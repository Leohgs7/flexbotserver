[
    {
        "name": {
            "text": "sin"
        },
        "parameters": {
            "text": "(num angle)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.sin()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "sin"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "cos"
        },
        "parameters": {
            "text": "(num angle)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.cos()."
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "cos"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "tan"
        },
        "parameters": {
            "text": "(num angle)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.tan()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "tan"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "atan"
        },
        "parameters": {
            "text": "(num ratio)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.atan()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "atan"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "fabs"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.fabs()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "fabs"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "exp"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.exp()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "exp"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "log10"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.log10()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "log10"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "log"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.log()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "log"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "sqrt"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.sqrt()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "sqrt"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "atan2"
        },
        "parameters": {
            "text": "(num dy, num dx)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.atan2()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "atan2"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "fmod"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.fmod()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "fmod"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "min"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.min()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "min"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "max"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.max()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "max"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "minof"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.min()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "min"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "maxof"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.max()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "max"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pow"
        },
        "parameters": {
            "text": "(num num1, num num2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.pow()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "pow"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "floor"
        },
        "parameters": {
            "text": "(num num)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.floor()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "floor"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ceil"
        },
        "parameters": {
            "text": "(num num)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.ceil()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "ceil"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pi"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.pi"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "PropertyRef": {
                "class": "Math",
                "text": "pi"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "sqr"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.sqr()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "sqr"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "factorial"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.factorial()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "factorial"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "frac"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.frac()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "frac"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "round"
        },
        "parameters": {
            "text": "(num value[, num precision])"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.round()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "round"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "sign"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.sign()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "sign"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "trunc"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.trunc()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "trunc"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "diffsign"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.sign()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "sign"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "add"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the + operator"
        },
        "description": {
            "text": "This command is deprecated. Use the + operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "double sum = add(1,2);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "sub"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the - operator"
        },
        "description": {
            "text": "This command is deprecated. Use the - operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "double operator instead. = sub(10,4);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "mul"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the * operator"
        },
        "description": {
            "text": "This command is deprecated. Use the * operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "double product = mul(3,4);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "div"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the / operator"
        },
        "description": {
            "text": "This command is deprecated. Use the / operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "div(10,2)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "divide"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the / operator"
        },
        "description": {
            "text": "This command is deprecated. Use / operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "divide(10,2)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "degreestoradians"
        },
        "parameters": {
            "text": "(num degrees)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.radians()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "radians"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "radianstodegrees"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.degrees()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "degrees"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "eq"
        },
        "parameters": {
            "text": "(num/node value1, num/node value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the == operator"
        },
        "description": {
            "text": "This command is deprecated. Use the == operator instead.. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ge"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the >= operator"
        },
        "description": {
            "text": "This command is deprecated. Use the >= operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gt"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the > operator"
        },
        "description": {
            "text": "This command is deprecated. Use the > operator instead.. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "le"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the <= operator"
        },
        "description": {
            "text": "This command is deprecated. Use the <= operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lt"
        },
        "parameters": {
            "text": "(num value1, num value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the < operator"
        },
        "description": {
            "text": "This command is deprecated. Use the < operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ne"
        },
        "parameters": {
            "text": "(num/node value1, num/node value2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the != operator"
        },
        "description": {
            "text": "This command is deprecated. Use the != operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "and"
        },
        "parameters": {
            "text": "(num/node condition1, num/node condition2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the && operator"
        },
        "description": {
            "text": "This command is deprecated. Use the && operator instead.. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "not"
        },
        "parameters": {
            "text": "(num/node value1)"
        },
        "shortdescription": {
            "text": "Deprecated, use the ! operator"
        },
        "description": {
            "text": "This command is deprecated. Use the ! operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "or"
        },
        "parameters": {
            "text": "(num/node condition1, num/node condition2)"
        },
        "shortdescription": {
            "text": "Deprecated, use the || operator"
        },
        "description": {
            "text": "This command is deprecated. Use the || operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "if"
        },
        "parameters": {
            "text": "(num condition) { }"
        },
        "description": {
            "text": "If the condition is true (i.e. the conditional expression returns a 1), then the statement immediately following the closing parenthesis will be executed. If braces { } are what immediately follows the closing parenthesis, then the block of code within the braces will be executed when the condition is true. Nothing is executed if the condition is false (returns a 0), unless an \"else\" has been defined. Refer to the Users Manual for more information. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "if (item.Weight < 100)"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "else"
        },
        "parameters": {
            "text": "{ }"
        },
        "description": {
            "text": "Used in conjunction with the \"if\" statement to declare what (if any) code should be executed when the condition for the \"if\" is false. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "if( item.Weight < 100 )"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "return"
        },
        "parameters": {
            "text": "(num value)"
        },
        "description": {
            "text": "This command causes a function to stop executing and return value to the function that called it. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "double res = item.rank * 5;"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "while"
        },
        "parameters": {
            "text": "(num expression) {}"
        },
        "description": {
            "text": "Repeatedly execute the following block {} while the expression returns a non-zero value. Be careful with this function because it can cause FlexSim to freeze if the value never becomes false.  Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "while(current.subnodes.length > 4)"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "iterate"
        },
        "parameters": {
            "text": "(num start, num end, num step) {}"
        },
        "shortdescription": {
            "text": "Deprecated, use for() or while() commands"
        },
        "description": {
            "text": "This command is deprecated. Use for() or while() commands instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "iterate(1,9,2)"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "count"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "The value of the iterator used with several commands such as repeat(), findmatch(), findmin(), and findmax(). The value of count will depend on which iteration is currently being executed.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "findmax(Table(\"MyTable\").numRows, Table(\"MyTable\")[count][5])"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "repeat"
        },
        "parameters": {
            "text": "(num nr, expression)"
        },
        "description": {
            "text": "Executes expression the specified number of times. The expression can use \"count\" to get the 1-based number of the iteration being executed.\n\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "repeat(current.outObjects.length, current.outObjects[count].input.close);"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "findmatch"
        },
        "parameters": {
            "text": "(num nr, num matchexpression[, returnexpression = count, num reverseorder = 0])"
        },
        "description": {
            "text": "Performs a matching test a defined number of times, and when a match is found, returns a user-definable value\n\t\tassociated with that match. Within the match expression and return expression, \"count\" can be used to determine\n\t\twhich iteration your are on in the check. This can be used to search in a list of things for a matching item or criterion. If returnexpression is not included in the call, then findmatch() will return the count associated\n\t\twith the matching expression. If no matches are found, findmatch() will return 0. If reverseorder is 1, then\n\t\tit will go backwards, assigning count to nr first, then nr - 1, etc. down to 1. If \n\t\treturnexpression is left out, then findmatch will return the count associated with the \n\t\tfound match.\n\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int portNr = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5);"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "findmax"
        },
        "parameters": {
            "text": "(num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0])"
        },
        "description": {
            "text": "Iteratively evaluates an expression, and then returns the maximum value found, or a user-definable return value\n\t\tassociated with that maximum value. Within the value expression, return expression and criterion, \"count\" can be used to determine\n\t\twhich iteration you are on in the check. If the return expression is not defined, the maximum value found will be returned. \n\t\tAdditionally, you can specify a criterion to filter out values as invalid. If criterion is defined and nothing meets the\n\t\tcriterion, 0 will be returned.\n\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "double latestCreation = findmax(current.subnodes.length, getcreationtime(current.subnodes[count]));"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "findmin"
        },
        "parameters": {
            "text": "(num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0])"
        },
        "description": {
            "text": "Iteratively evaluates an expression, and then returns the minimum value found, or a user-definable return value\n\t\tassociated with that minimum value. findmin() is the same as findmax() except it finds the minimum value instead\n\t\tof the maximum value. For more information, refer to the documentation for findmax().\n\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "Refer to findmax()"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "forobjectlayerunder"
        },
        "parameters": {
            "text": "(node container)  { }"
        },
        "description": {
            "text": "This command is deprecated. Use for() or while() commands instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "forobjectlayerunder(model())"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "forobjectsbefore"
        },
        "parameters": {
            "text": "(node thenode)  { }"
        },
        "description": {
            "text": "This command is deprecated. Use for() or while() commands instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "forobjectsbefore(model.subnodes[5]))"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "forobjectsbehind"
        },
        "parameters": {
            "text": "(node thenode)  { }"
        },
        "description": {
            "text": "This command is deprecated. Use for() or while() commands instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "forobjectsbehind(model.subnodes[5])"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "forobjecttreeunder"
        },
        "parameters": {
            "text": "(node container)  { }"
        },
        "description": {
            "text": "Execute a block of code for each node that is in the tree under the node specified as container, including all sub-trees. To access the node that is currently active in the loop, the \"a\" command is used. The forobjecttreeunder() command can only be used in flexscript, not C++. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "forobjecttreeunder(model())"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "forobjectselectionset"
        },
        "parameters": {
            "text": "(node container)  { }"
        },
        "description": {
            "text": "This command is deprecated. Instead use: Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "forobjectselectionset(library()) { pt(a.name); pr(); }"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "forobjecthighlightedin"
        },
        "parameters": {
            "text": "(obj view)  { }"
        },
        "description": {
            "text": "This command is deprecated. Use selectedobject() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "forobjecthighlightedin(sv())"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "listmin"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "listmin(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listmax"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "listmax(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listminimum"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "listminimum(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listmaximum"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "listmaximum(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listmean"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "listmean(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listsum"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the + operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "listsum(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listinlist"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "listinlist(5,3,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listmul"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the * operator"
        },
        "description": {
            "text": "This command is deprecated. Use the * operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "listmul(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "listsub"
        },
        "parameters": {
            "text": "(num qty, num val [, num a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the - operator"
        },
        "description": {
            "text": "This command is deprecated. Use the - operator instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "listsub(5,2,1,2,3,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "stringtopchar"
        },
        "parameters": {
            "text": "(str string)"
        },
        "shortdescription": {
            "text": "Deprecated, use apchar()"
        },
        "description": {
            "text": "This command is deprecated. Use apchar() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "setname(current,stringtopchar(\"ThisObjectName\"));"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "tostring"
        },
        "parameters": {
            "text": "(thing)"
        },
        "description": {
            "text": "For developer use. Assert as pchar string. Assert that the number val is of type char*. Only serves a real purpose in C++, but is safe to use in Flexscript. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "tostring(eventdata)"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "numtostring"
        },
        "parameters": {
            "text": "(num value[, num width, num precision])"
        },
        "shortdescription": {
            "text": "Deprecated, use string.fromNum()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "MethodRef": {
                "class": "string",
                "text": "fromNum"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "stringtonum"
        },
        "parameters": {
            "text": "(str string)"
        },
        "shortdescription": {
            "text": "Deprecated, use string.toNum()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "MethodRef": {
                "class": "string",
                "text": "toNum"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "stringcopy"
        },
        "parameters": {
            "text": "(str string, num start, num length)"
        },
        "shortdescription": {
            "text": "Deprecated, use string.substr()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "MethodRef": {
                "class": "string",
                "text": "substr"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "stringlen"
        },
        "parameters": {
            "text": "(str string)"
        },
        "shortdescription": {
            "text": "Deprecated, use string.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "PropertyRef": {
                "class": "string",
                "text": "length"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "concat"
        },
        "parameters": {
            "text": "(str text1, str text2 [, str text3, ...])"
        },
        "shortdescription": {
            "text": "Deprecated, use + operator"
        },
        "description": {
            "text": "This command is deprecated. Use the + operator instead. \"a\" + \"b\" + \"c\" Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "comparetext"
        },
        "parameters": {
            "text": "(str text1, str text2[, int ignorecase])"
        },
        "shortdescription": {
            "text": "Deprecated, use == operator"
        },
        "description": {
            "text": "This command is deprecated. Use the == operator instead. myStr == \"Hello\" Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "stringcompare"
        },
        "parameters": {
            "text": "(str text1, str text2)"
        },
        "shortdescription": {
            "text": "Compare strings for alphabetical order"
        },
        "description": {
            "text": "Compare strings for alphabetical order.  The return value is zero if the strings are the same. If text1 is alphabetically before text2, a negative number is returned.  If text1 is alphabetically after text2, a positive number is returned.  Same as the strcmp() C++ function. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "stringcompare(\"zenith\",\"beta\") returns 1"
        },
        "gr": {
            "text": "3"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "clearconsole"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Clears the output console"
        },
        "description": {
            "text": "This command clears the output console if it is open. The output console is where output from the pt(), pf(), and pr() commands is printed. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "if (v_printerror == 1)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pt"
        },
        "parameters": {
            "text": "(str text)"
        },
        "shortdescription": {
            "text": "Deprecated, use print()"
        },
        "description": {
            "text": "This command is deprecated. Use the print() command instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "rr": {}
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pf"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use print()"
        },
        "description": {
            "text": "This command is deprecated. Use the print() command instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pd"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use print()"
        },
        "description": {
            "text": "This command is deprecated. Use the print() command instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pc"
        },
        "parameters": {
            "text": "(num asciivalue)"
        },
        "shortdescription": {
            "text": "Deprecated, use print()"
        },
        "description": {
            "text": "This command is deprecated. Use the print() command instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pr"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use print()"
        },
        "description": {
            "text": "This command is deprecated. Use the print() command instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "print"
        },
        "parameters": {
            "text": "([var value, var value2, ...])"
        },
        "shortdescription": {
            "text": "Print the contents of the given parameters and a new line to the console"
        },
        "description": {
            "text": "This command takes 0 to 20 variants as parameters. Each parameter is printed to the console and separated by a space. \n\tAfter all the parameters are printed a new line character is printed to the console. The output console must be open to write to it. \n\tTo open the console, use Debug > Output Console in the menu. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "print(\"Number:\", 1); print([1, 2]);"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pdir"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "This command returns a string containing the path on the hard drive to the FlexSim's program directory. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "string flexpath = pdir();"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "cdir"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "Returns a string of the path to FlexSim's install directory. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "string userpath = cdir(); For a standard installation this will return C:\\Program Files\\Flexsim3\\"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "pfile"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the string attached to the end of the command line used to start the FlexSim application. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "If FlexSim was started with this command line:"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "parg"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "This command is deprecated. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "parg()"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "strascii"
        },
        "parameters": {
            "text": "(num asciivalue)"
        },
        "shortdescription": {},
        "description": {
            "text": "This command returns a string that contains the character whose ascii value is character.  Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "strascii(91) + \"alert(\" + strascii(34) + \"Hello There\" + strascii(34) + \")\" + strascii(93);"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "asciistr"
        },
        "parameters": {
            "text": "(str string [, num index])"
        },
        "description": {
            "text": "This command returns the ascii value of the character at the specified index (0-based) of the string. If index is not specified, the first character of the string is used. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "asciistr(\"fred\",1) returns 114, the ascii value of 'r'"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "strquote"
        },
        "parameters": {
            "text": "(str string)"
        },
        "shortdescription": {
            "text": "Deprecated, use \\\""
        },
        "description": {
            "text": "This command is deprecated. Use \\\" instead to include quotation marks within a string. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "strquote(\"hello\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "buildall"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command builds Flexscript trees for all of the nodes in the tree that are designated as Flexscript nodes. A Flexscript node must have a Flexscript tree made before it can run. This option is available in the main menu under Build -> Build All Flexscript. This must be done before running a model with Flexscript written anywhere in it. It should also be done after making any changes to GUIs. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "buildall();"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "howmanycommands"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the number of commands. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "howmanycommands()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "howmanyattributes"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the number of attributes. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "howmanyattributes()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "addcommand"
        },
        "parameters": {
            "text": "(obj codenode, str commandname, str description, str parameters, str example [, str cppprefix, str shortdescription])"
        },
        "description": {
            "text": "For developer use. Adds a Flexscript command to the current list of available commands. The new command is available until the next compile. The Tools | User Commands menu is for end-users to create their own commands.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "addcommand(...)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "buildnodeflexscript"
        },
        "parameters": {
            "text": "(node codenode)"
        },
        "description": {
            "text": "For developer use. This command builds Flexscript trees for the node specified as node if it is designated as a Flexscript node. A Flexscript node must have a Flexscript tree made before it can run.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "buildnodeflexscript(Table(\"mytable\").cell(1,2));"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cleannodeflexscript"
        },
        "parameters": {
            "text": "(node startnode)"
        },
        "description": {
            "text": "For developer use. This command recursively deletes Flexscript trees starting at the node specified.   High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cleannodeflexscript(model());"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "anum"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated, use tonum()"
        },
        "description": {
            "text": "This command is deprecated. Use tonum() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "anum(so())"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "anode"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated, use tonode()"
        },
        "description": {
            "text": "This command is deprecated. Use tonode() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "anode(so())"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "aptr"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated, use toptr()"
        },
        "description": {
            "text": "This command is deprecated. Use toptr() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "aptr(so())"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "apchar"
        },
        "parameters": {
            "text": "(str string)"
        },
        "shortdescription": {
            "text": "Asserts string as a char*"
        },
        "description": {
            "text": "Assert type as C style string (e.g. char*). Alias for stringtopchar Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "apchar(\"hello\")"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "tonum"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Assert type as a number"
        },
        "description": {
            "text": "Assert type as an arithmetic number. Only serves a real purpose in C++. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "return tonum(current);"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "tonode"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Assert type as a node pointer"
        },
        "description": {
            "text": "Assert type as a node pointer. Only serves a real purpose in C++. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "tonode(getnodenum(couplingnode))"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "toptr"
        },
        "parameters": {
            "text": "(thing)"
        },
        "description": {
            "text": "For developer use. Assert type as pointer. Assert that the argument thing is of type void*. Only serves a real purpose in C++, but is safe to use in flexscript. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "toptr(so())"
        },
        "gr": {
            "text": "26"
        }
    },
    {
        "name": {
            "text": "function_s"
        },
        "parameters": {
            "text": "(obj object, str name [, num param_a,...])"
        },
        "description": {
            "text": "For developer use. Executes code associated with the node found in the object's eventfunctions group having the specified name. For a list of the pre-defined system level events in FlexSim refer to function_n() command documentation.\n\t High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "function_s(current,\"OnReset\",1,2,3)"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "userfunction_s"
        },
        "parameters": {
            "text": "(obj object, str name [, num param_a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use nodefunction()"
        },
        "description": {
            "text": "This command is deprecated. Use nodefunction() instead, because it will work on any node. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "userfunction_s(current,\"myfunc\",1,2,3)"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "function_n"
        },
        "parameters": {
            "text": "(obj object, num index [, num param_a,...])"
        },
        "description": {
            "text": "For developer use. Executes code associated with a node found in the object's eventfunctions group having the specified event code. The event code is not the rank of the node in the eventfunctions group, but it corresponds to one of the following pre-defined FlexSim event : High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "function_n(current,1,1,2,3)"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "userfunction_n"
        },
        "parameters": {
            "text": "(obj object, num index [, num param_a,...])"
        },
        "shortdescription": {
            "text": "Deprecated, use nodefunction()"
        },
        "description": {
            "text": "This command is deprecated. Use nodefunction() instead because it will work on any node. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "userfunction_s(current,4,1,2,3)"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "nodefunction"
        },
        "parameters": {
            "text": "(node thenode [, par1, par2, ... par10])"
        },
        "description": {
            "text": "For developer use. This command executes a function that is defined on thenode. Thenode must be toggled as either a C++ node or a Flexscript node. If the node is C++, the model must be compiled before calling this command. Any parameters that need to be passed to the function are passed as par1, par2, etc. Up to 10 parameters may be passed. The values that are passed using this command must all be numbers, but can then be accessed and recast from within the function called using the command param(x) where x is the number of the parameter. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "nodefunction(node_v_entrytrigger,tonum(item),portnum);"
        },
        "gr": {
            "text": "7"
        }
    },
    {
        "name": {
            "text": "delayednodefunction"
        },
        "parameters": {
            "text": "(node thenode, double timeDelay[, par1, par2, ... par10])"
        },
        "description": {
            "text": "For developer use. This command executes a function that is defined on thenode after a defined delay time. It works the same as the nodefunction() command, except it delays firing the node for the given delay time. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "delayednodefunction(current.myFunc, tonum(item));"
        },
        "gr": {
            "text": "7"
        }
    },
    {
        "name": {
            "text": "nodefunctionlisten"
        },
        "parameters": {
            "text": "(node theNode, node relayNode[, num flags, par1, par2, ... par10])"
        },
        "description": {
            "text": "For developer use. This command will create a listening mechanism where whenever nodefunction() is called on theNode, relayNode will also be executed. \n\tflags is a bitwise mask of one of the following values: Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables.",
            "div": [
                {
                    "class": "indent",
                    "b": {
                        "text": "NFL_PRE_LISTEN"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "NFL_LISTEN"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "NFL_PERSIST"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "NFL_PASS_THROUGH_PARAMS"
                    }
                }
            ]
        },
        "example": {
            "text": "nodefunctionlisten(getvarnode(current, \"entrytrigger\"), current.entrylistener);"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "eventlisten"
        },
        "parameters": {
            "text": "(obj object, str eventName, node relayNode[, num flags, par1, par2, ... par10])"
        },
        "description": {
            "text": "This command will create a listening mechanism where whenever the defined event is called on object, relayNode will also be executed. \n\tflags is a bitwise mask of one of the following values: Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables.",
            "div": [
                {
                    "class": "indent",
                    "b": {
                        "text": "EVENT_PRE_LISTEN"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "EVENT_LISTEN"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "EVENT_PERSIST"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "EVENT_PASS_THROUGH_PARAMS"
                    }
                },
                {
                    "class": "indent",
                    "b": {
                        "text": "EVENT_LISTEN_ONCE"
                    }
                }
            ]
        },
        "example": {
            "text": "eventlisten(current, \"OnEntry\", current.entrylistener);"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "param"
        },
        "parameters": {
            "text": "(num index)"
        },
        "shortdescription": {
            "text": "Gets a parameter passed into a function"
        },
        "description": {
            "text": "This command is used inside a function that is called by the nodefunction() command. It returns the parameter \n\tpassed to nodefunction specified by index as a node (or treenode), string, int, double, stringarray, intarray, doublearray or treenodearray.\n\tThe first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "If a trigger/field is called with:"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "parval"
        },
        "parameters": {
            "text": "(num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use param()"
        },
        "description": {
            "text": "This command is deprecated. Use param instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "If a trigger/field is called with:"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "parnode"
        },
        "parameters": {
            "text": "(num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use param()"
        },
        "description": {
            "text": "This command is deprecated. Use param instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "If a trigger/field is called with:"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "parstr"
        },
        "parameters": {
            "text": "(num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use param()"
        },
        "description": {
            "text": "This command is deprecated. Use param instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "If a trigger/field is called with:"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "parqty"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Get the number of parameters passed into the nodefunction. This is used together with the nodefunction command. The value returned only applies when using Flexscript, not C++. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "parqty()"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "c"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "This command is used to reference the active node during a function's execution. If the function was called using nodefunction(), c returns a reference to the node on which the function is written. If the function is an event function, c returns a reference to the object that contains the event. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "treenode current = ownerobject(c);"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "i"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "For developer use. This command is used only in event functions. It is used to reference the object that was passed to the value of 0 is) command as the involved object.  Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "string involvedname = i.name;"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "ip"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "For developer use. Node pointer meaning 'involved port'. Alias for 'eventdata'.  Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {},
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "sendmessage"
        },
        "parameters": {
            "text": "(obj toobject, obj fromobject [, var par1, var par2, var par3])"
        },
        "shortdescription": {
            "text": "Send a message to an object, firing its OnMessage trigger"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "message"
            }
        },
        "example": {
            "text": "sendmessage(current.centerObjects[1], current, item, 10);"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "gets"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "sets"
        },
        "parameters": {
            "text": "(node thenode, str value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "getname"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.name"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "name"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "setname"
        },
        "parameters": {
            "text": "(obj object, str value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.name"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "name"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getnodestr"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "setnodestr"
        },
        "parameters": {
            "text": "(node thenode, str value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getnodename"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "name"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "setnodename"
        },
        "parameters": {
            "text": "(obj/node object, str value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "name"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "get"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "set"
        },
        "parameters": {
            "text": "(node thenode, num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getnodenum"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "setnodenum"
        },
        "parameters": {
            "text": "(node thenode, num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "setnodenum"
        }
    },
    {
        "name": {
            "text": "nodepoint"
        },
        "parameters": {
            "text": "(node a, node b)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "value"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "nodejoin"
        },
        "parameters": {
            "text": "(node a, node b)"
        },
        "description": {
            "text": "For developer use. Join two pointer nodes to form a bi-directional coupling. A bi-directional coupling in FlexSim is a pair of nodes who's data points to each other. FlexSim automatically manages the coupling. If either one of the endpoints is deleted or nullified, FlexSim cleans up to prevent dangling pointers. The two nodes a and b must have coupling data. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "nodejoin(so(),so().next)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "nodebreak"
        },
        "parameters": {
            "text": "(node a)"
        },
        "description": {
            "text": "For developer use. Breaks a coupling pointer on a node that has coupling data that is pointing to another node. If the node is part of a bi-directional coupling, the other coupling is not affected. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "nodebreak(so())"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "inc"
        },
        "parameters": {
            "text": "(node thenode, num amount)"
        },
        "shortdescription": {
            "text": "Deprecated, use += operator"
        },
        "description": {
            "text": "This command is deprecated. Use += operator instead. myNode.value += 2; Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "inc(current.mylabel,1)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "att"
        },
        "parameters": {
            "text": "(obj object, num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use getvarnode()"
        },
        "description": {
            "text": "This command is deprecated. Use var(), var_s() or getvarnode() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "att(current,1)"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "att_s"
        },
        "parameters": {
            "text": "(obj object, str name)"
        },
        "shortdescription": {
            "text": "Deprecated, use getvarnode()"
        },
        "description": {
            "text": "This command is deprecated. Use getvarnode() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "att_s(current,\"myatt\")"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "var"
        },
        "parameters": {
            "text": "(obj object, num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use getvarnode()"
        },
        "description": {
            "text": "This command is deprecated. Use getvarnode() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "var(so(),1)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "var_s"
        },
        "parameters": {
            "text": "(obj object, str name)"
        },
        "shortdescription": {
            "text": "Deprecated, use getvarnode()"
        },
        "description": {
            "text": "This command is deprecated. Use getvarnode() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "var_s(current,\"myatt\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "setloc"
        },
        "parameters": {
            "text": "(obj object, num x, num y, num z[, num xFactor, num yFactor, num zFactor])"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.location"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "location"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "setcenter"
        },
        "parameters": {
            "text": "(obj object, num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.setLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "setLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "node"
        },
        "parameters": {
            "text": "(str relativepath[, obj startnode])"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.find()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "find"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "attlink"
        },
        "parameters": {
            "text": "(node viewdatanode, str path)"
        },
        "description": {
            "text": "For developer use. Find a node by text path, relative to the view's objectfocus. This command will return the node on the path relative to the object focus of the ownerview of viewdatanode. For example, let viewdatanode be a node inside the structure of a view, such as an OnPress event node. Then, let the objectfocus of the parent view point to an object in the model called \"Processor\". Now, whatever is passed to the path argument of attlink() will be relative to the Processor object. So, if \">variables\" was passed to path in the attlink call, then attlink would return the pointer to \"variables\" of the Processor. If the node does not exist, attlink will return a null \"safenode\" which signals a failure to find the requested node. The return value can be tested for validity with the objectexists() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "attlink(so(),\">variables\") // where so() is data node inside view"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "nodetopath"
        },
        "parameters": {
            "text": "(node thenode [, num nameflag=0])"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.getPath()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "getPath"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "nodetomodelpath"
        },
        "parameters": {
            "text": "(node thenode [, num nameflag=1])"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.getPath()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "getPath"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "thisclass"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "For developer use. This keyword is used in an eventfunction to get the class of the object receiving the call. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "thisclass"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "inheritcode"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command is used for subclass function inheritance. Call this in an event function to call that same event function on the object's classobject. In C++ or DLL code, call _inheritcode(callpoint); Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "Flexscript:"
        },
        "gr": {
            "text": "7"
        }
    },
    {
        "name": {
            "text": "debug"
        },
        "parameters": {
            "text": "([num operation, num/obj p2, num/obj p3])"
        },
        "shortdescription": {
            "text": "Acts like a breakpoint in Flexscript to start debugging"
        },
        "description": {
            "text": "For developer use. This command is used to control the Flexscript step debugger. Calling this command without any parameters will behave as if there is a breakpoint at that line of code.  Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "debug();"
        },
        "gr": {
            "text": "7"
        }
    },
    {
        "name": {
            "text": "content"
        },
        "parameters": {
            "text": "(node parent)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.subnodes.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "subnodes"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "contentunder"
        },
        "parameters": {
            "text": "(node thenode [, num objectsonly)"
        },
        "description": {
            "text": "This command returns the number of nodes in the tree that are inside the node specified as thenode plus the number of nodes that may be contained in any sub-trees that begin at that layer. If thenode does not contain any other nodes, this command returns 0. If objectsonly is not specified or 0, any node in the FlexSim tree can be passed as thenode. If objectsonly is not 0, any node passed in as thenode that isn't an object will return 0. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "if (contentunder(current) >= getvarnum(current,\"maxcontent\"))"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rank"
        },
        "parameters": {
            "text": "(obj parent, num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.subnodes[]"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "subnodes"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "setrank"
        },
        "parameters": {
            "text": "(obj/node object, num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.rank"
        },
        "description": {
            "text": "This command. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "rank"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "swapnoderanks"
        },
        "parameters": {
            "text": "(obj/node parentnode, num index1, num index2)"
        },
        "shortdescription": {
            "text": "Swap the ranks for two nodes in a parent node's sub-tree"
        },
        "description": {
            "text": "This command swaps the ranks of two nodes in the parent node's sub-tree. Swapping ranks can be faster than using setrank() especially for very large lists of nodes. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "swapnoderanks(parentNode,4,parentNode.subnodes.length);"
        },
        "gr": {
            "text": "8"
        }
    },
    {
        "name": {
            "text": "getrank"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.rank"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "rank"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "objectexists"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Check if an object exists"
        },
        "description": {
            "text": "If you're trying to test if an object exists when using dot syntax you can omit the objectexists. For example, if (current.labels[\"MyLabel\"]) or if (current.next). Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "if (objectexists(next(current)))"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "first"
        },
        "parameters": {
            "text": "(node container)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.first"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "first"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "last"
        },
        "parameters": {
            "text": "(node container)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.last"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "last"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "prev"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.prev"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "prev"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "next"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.next"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "next"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "up"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.up"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "up"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "a"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "This command is used to reference objects during iterations of certain flexscript commands such as forobjectlayerunder() and forobjecttreeunder(). This command does not require parentheses, and can only be used in C++.  Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "See forobjecttreeunder()."
        },
        "gr": {
            "text": "3"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "hideports"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Deprecated, use switch_hideconnectors()"
        },
        "description": {
            "text": "This command is deprecated. Use switch_hideconnectors() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "hideports(current,1);"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "hidelabel"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Deprecated, use switch_hidelabel()"
        },
        "description": {
            "text": "This command is deprecated. Use switch_hidelabel() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "hidelabel(current,0);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "switch_expanded"
        },
        "parameters": {
            "text": "(node thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Expand/collaps sub-level nodes of thenode"
        },
        "description": {
            "text": "Expand or collapse sub-level nodes of thenode in the tree view.  This is analogous to clicking the + and - sign of thenode in the tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_expanded(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_cppfunc"
        },
        "parameters": {
            "text": "(node thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"C++\" flag of thenode"
        },
        "description": {
            "text": "Get or set the \"C++\" flag of thenode.  A value of 1 is C++, a value of 0 is not C++, a value of -1 gets the current value. If a node is toggled as C++ it will be compiled as a C++ function at time of compile. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_cppfunc(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_selected"
        },
        "parameters": {
            "text": "(obj thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Selected\" flag of thenode"
        },
        "description": {
            "text": "Get or set the \"Selected\" flag of thenode (red highlight).  A value of 1 is selected, a value of 0 is unselected, a value of -1 gets the current value. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_selected(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hashedlist"
        },
        "parameters": {
            "text": "(obj thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Hashed List\" flag of thenode"
        },
        "description": {
            "text": "Get or set the \"Hashed List\" flag of the thenode.  A value of 1 sets the node to store a hashed list of its subnodes for fast lookup by name, a value of 0 sets the node to not store a hashed list of subnodes, a value of -1 gets the current value. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_hashedlist(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hideconnectors"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Hide Connectors\" flag of the object"
        },
        "description": {
            "text": "Get or set the \"Hide Connectors\" flag of the object.  A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the connectors will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "switch_hideconnectors(so(),1)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hidelabel"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Show Name\" flag of the object"
        },
        "description": {
            "text": "Get or set the \"Show Name\" flag of the object.  A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. A value of -1 gets the current value for the switch. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "switch_hidelabel(so(),1)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_showobject"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Expand/collaps the object data of an object node"
        },
        "description": {
            "text": "Expand or collapse the object data of an object node in a tree view. This is analogous to clicking the > next to the object node in a tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "switch_showobject(so(),1)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_statelocked"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "description": {
            "text": "Get or set the \"is code state locked\" flag of the node object.  A value of 1 is enable, a value of 0 is disable, a value of -1 gets the current value. If enabled, the node will be locked as either C++ or flexscript depending on what it currently is (the model will not change it when \"Make All Code C++/Flexscript\" is chosen through the main menu. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_statelocked(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hidden"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "description": {
            "text": "Not implemented"
        },
        "example": {
            "text": "switch_hidden(so(),1)"
        },
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_protected"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Protected\" flag of the object"
        },
        "description": {
            "text": "Get or set the \"Protected\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected).  A value of 1 is protected, a value of 0 is unprotected, and a value of -1 gets the current value. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_protected(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_noselect"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"No Select\" flag of the object"
        },
        "description": {
            "text": "Get or set the \"No Select\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected).  A value of 1 is unselectable, a value of 0 is selectable, and a value of -1 gets the current value. Setting no select on an object keeps it from being clicked on with the mouse in the 3D view. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_noselect(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hideshape"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Show 3D Shape\" flag of the object"
        },
        "description": {
            "text": "Get or set the \"Show 3D Shape\" flag of the object.  A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "switch_hideshape(so(),1)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_variable"
        },
        "parameters": {
            "text": "(obj object, str var[, num off/on])"
        },
        "description": {
            "text": "For developer use. Add and set; or remove a dynamic switch variable to/from an object. When set to on, a node called var will be added to the structure of object and have a numerical value of 1 assigned to it. When set to off, a node called var, if present will be removed from the structure of object. Used in model update code. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "switch_variable(so(),\"arrivalmode\",1);"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hidebase"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Get or set the \"Show 2D Shape\" flag of the object.  A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. The 2D shape (base) of an object is visible in the Planar view window. Note that view windows also have an attribute named hideallbases that controls the display of 2D shapes (bases) for ALL objects in their view. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "switch_hidebase(so(),1)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_hidecontents"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"Show Contents\" flag of the object"
        },
        "description": {
            "text": "Get or set the \"Show Contents\" flag of the object.  A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the contents of an objects will stop the display of objects (e.g. flowitems) contained within it. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "switch_hidecontents(so(),1)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_enablestats"
        },
        "parameters": {
            "text": "(obj object[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"stats\" flag of the object"
        },
        "description": {
            "text": "Get or set an object's \"stats\" flag. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "switch_enablestats(so(),1)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_stateused"
        },
        "parameters": {
            "text": "(obj thenode[, num off/on])"
        },
        "description": {
            "text": "For developer use. Get or set where a node inside a state profile is used by the object. This flag is automatically set in the setstate() command, \n\t\tso developers can know which states are used by an object, for UI development. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_stateused(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_destroyonreset"
        },
        "parameters": {
            "text": "(obj thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"destroy on reset\" flag of the object"
        },
        "description": {
            "text": "Get or set a node's \"destroy on reset\" flag. If the flag is 1, the node will be deleted when the model is reset. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_destroyonreset(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_preservecoupling"
        },
        "parameters": {
            "text": "(obj thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"preserve coupling\" flag of the object"
        },
        "description": {
            "text": "Get or set a node's \"preserve coupling\" flag. If the flag is 1, when the coupling node is copied, the copy will also point to its partner. For one-way couplings, the original and the copy will both point at the same partner node. For two-way couplings, a new partner node will be created. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_preservecoupling(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_orphancoupling"
        },
        "parameters": {
            "text": "(obj thenode[, num off/on])"
        },
        "shortdescription": {
            "text": "Get or set the \"orphan coupling\" flag of the object"
        },
        "description": {
            "text": "Get or set a node's \"orphan coupling\" flag. If the flag is 1, when the coupling node is copied, the copy won't be destroyed if it no longer points to a valid node. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_orphancoupling(so(),1)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "library"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Reference to the library node in the main tree"
        },
        "description": {
            "text": "This command returns a reference to the library node in the main tree. It is used as a fast way of referencing the library. Commands for referencing nodes or objects through FlexSim's tree structure."
        },
        "example": {
            "text": "treenode SourceObj = library().find(\"?Source\");"
        },
        "gr": {
            "text": "9"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "model"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Reference the model's root node"
        },
        "description": {
            "text": "This command returns a reference to the model node in the main tree. It is used as a fast way of referencing the model. Commands for referencing nodes or objects through FlexSim's tree structure."
        },
        "example": {
            "text": "treenode SourceObj = Model.find(\"Source1\");"
        },
        "gr": {
            "text": "9"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "main"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use maintree()"
        },
        "description": {
            "text": "This command is deprecated. Use maintree() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "main()"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "maintree"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Reference to the main tree"
        },
        "description": {
            "text": "Returns a reference to the main tree. When defining string paths to nodes in the main tree, MAIN can be used as in the following example node(\"MAIN:/project/exec/globals/cppfunctions\"); Commands for referencing nodes or objects through FlexSim's tree structure."
        },
        "example": {
            "text": "maintree().find(\"project/exec/globals/cppfunctions\");"
        },
        "gr": {
            "text": "9"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "views"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Reference to the views tree"
        },
        "description": {
            "text": "This command returns a reference to the views tree. The views tree contains all of the information about the windows that are currently open as well as all of the available GUIs. When defining string paths to nodes in the view tree, VIEW can be used as in the following example: node(\"VIEW:/standardviews/ortho\"); Commands for referencing nodes or objects through FlexSim's tree structure."
        },
        "example": {
            "text": "activateview(views().find(\"standardviews/runcontrol\"));"
        },
        "gr": {
            "text": "9"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "setstate"
        },
        "parameters": {
            "text": "(obj object, num state [, num profilenr])"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.setState()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "setState"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setstate_s"
        },
        "parameters": {
            "text": "(obj object, str statename)"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "stats"
            }
        },
        "example": {
            "text": "setstate_s(current,\"busy\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ownerobject"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Gets the object that \"owns\" the executing node, usually the current object"
        },
        "description": {
            "text": "This command returns the node with object data attached to it that is the start of the sub-tree that thenode is in. \n\t\tIn other words, it returns the object node that contains thenode. The result of this command is cached on thenode, so that subsequent calls\n\t\tto ownerobject(thenode) do not search in the tree, but return the cached result. If thenode subsequently changes parent, ownerobject(thenode) will\n\t\treturn the cached result. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree.",
            "img": {
                "src": "Images/OwnerObject.png"
            }
        },
        "example": {
            "text": "string objname = ownerobject(c).name;"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "findownerobject"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "description": {
            "text": "Like ownerobject(), this command returns the object node containing thenode. Unlike ownerobject(), this command does not\n\tcache the result, but searches in the tree for the \"owner\" node. For example when a TaskExecuter transfers from one NetworkNode to another on a network path, a coupling node is transferred to the new node to keep track of the TaskExecuter's current node, and findownerobject() is used to get access to the correct \"owner\" node.  Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "findownerobject(c)"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "classobject"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Returns the class object of an instance"
        },
        "description": {
            "text": "Returns the class object of an instance. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "if(classobject(current) == library().find(\"?Processor\"))"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "closeallip"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Close all input ports of object"
        },
        "description": {
            "text": "Close all input ports of object. Closing all input ports of an object will block entry to the object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "closeallip(current)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openallip"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Open all input ports of object"
        },
        "description": {
            "text": "Open all input ports of object. If an input port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "openallip(current)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "closeallop"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Close all output ports of object"
        },
        "description": {
            "text": "Close all output ports of object. Closing all output ports of an object will block the exit of that object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "closeallop(current)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openallop"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Open all output ports of object"
        },
        "description": {
            "text": "Open all output ports of object. If an output port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "openallop(current)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "inobject"
        },
        "parameters": {
            "text": "(obj object, num inputportnum)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.inObjects[]"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "inObjects"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "outobject"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.outObjects[]"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "outObjects"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "nrip"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.inObjects.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "inObjects"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "nrop"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.outObjects.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "outObjects"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "closeip"
        },
        "parameters": {
            "text": "(obj object, num inputportnum)"
        },
        "shortdescription": {
            "text": "Close one input port of object"
        },
        "description": {
            "text": "Close just inputportnum of object. Closing an input port of an object will block entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "closeip(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "closeop"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "shortdescription": {
            "text": "Close one output port of object"
        },
        "description": {
            "text": "Close just outputportnum of object. Closing an output port of an object will block the exit from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "closeop(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openip"
        },
        "parameters": {
            "text": "(obj object, num inputportnum)"
        },
        "shortdescription": {
            "text": "Open one input port of object"
        },
        "description": {
            "text": "Open just inputportnum of object. Opening an input port of an object will allow entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "openip(so(),1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openop"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "shortdescription": {
            "text": "Open one output port of object"
        },
        "description": {
            "text": "Open just outputportnum of object. Opening an output port of an object will allow exiting from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "openop(so(),1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "connect"
        },
        "parameters": {
            "text": "(obj object1, num port1, obj object2, num port2)"
        },
        "shortdescription": {
            "text": "Deprecated, use contextdragconnection()"
        },
        "description": {
            "text": "This command is deprecated. Use contextdragconnection() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "connect(model().subnodes[2],1,model().subnodes[3],2)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "objectconnect"
        },
        "parameters": {
            "text": "(obj object1, obj object2)"
        },
        "shortdescription": {
            "text": "Deprecated, use contextdragconnection()"
        },
        "description": {
            "text": "This command is deprecated. Use contextdragconnection() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "connect(so(),so().next)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ipopno"
        },
        "parameters": {
            "text": "(obj object, num inputportnum)"
        },
        "shortdescription": {
            "text": "Output port number that is connected to inputportnum of object"
        },
        "description": {
            "text": "This command returns the output port number that is connected to inputportnum of object.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "int otherport = ipopno(current,1);"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "opipno"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "shortdescription": {
            "text": "Input port number that is connect to outputportnum of object"
        },
        "description": {
            "text": "This command returns the input port number that is connected to outputportnum of object.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "int otherport = opipno(current,1);"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "closeinput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.input.close()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "input"
            }
        },
        "example": {
            "text": "if (current.subnodes.length == getvarnum(current,\"maxcontent\")"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "closeoutput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.output.close()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "output"
            }
        },
        "example": {
            "text": "if (current.subnodes.length == current.mincontent)"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "stopinput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.input.stop()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "input"
            }
        },
        "example": {
            "text": "stopinput(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stopoutput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.output.stop()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "output"
            }
        },
        "example": {
            "text": "stopoutput(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openinput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.input.open()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "input"
            }
        },
        "example": {
            "text": "if (current.subnodes.length < maxcontent)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openoutput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.output.open()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "output"
            }
        },
        "example": {
            "text": "if (current.subnodes.length > mincontent)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resumeinput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.input.resume()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "input"
            }
        },
        "example": {
            "text": "resumeinput(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resumeoutput"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.output.resume()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "output"
            }
        },
        "example": {
            "text": "resumeoutput(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ipready"
        },
        "parameters": {
            "text": "(obj object, num inputportnum)"
        },
        "description": {
            "text": "Returns a 1 if the inputportnum of object is open and the connecting output port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the input of this object or the output of the connecting object are currently open.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "ipready(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "opready"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "description": {
            "text": "Returns a 1 if the outputportnum of object is open and the connecting input port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the output of this object or the input of the connecting object are currently open.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "opready(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ipopen"
        },
        "parameters": {
            "text": "(object object, num inputportnum)"
        },
        "description": {
            "text": "Returns a 1 if the inputportnum on object is open. Otherwise returns zero.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "ipopen(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "opopen"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "description": {
            "text": "Returns a 1 if the outputportnum on object is open. Otherwise returns zero.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "opopen(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ipavailable"
        },
        "parameters": {
            "text": "(obj object, num inputportnum)"
        },
        "description": {
            "text": "Returns a 1 if the upstream object through the specified object's input port is available. Particularly, it checks if the upstream object exists, if it is stopped, if its output is open, and if the connected output port is open. This function returns 0 if the upstream object isn't available. Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "ipavailable(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "opavailable"
        },
        "parameters": {
            "text": "(obj object, num outputportnum)"
        },
        "description": {
            "text": "Returns a 1 if the downstream object through the specified object's output port is available. Particularly, it checks if the downstream object exists, if it is stopped, if its input is open, and if the connected input port is open. This function returns 0 if the downstream object isn't available. Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "opavailable(current,1)"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "transitionport"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "Get the most recently traversed port number by an object in the model. It refers to the last moveobject() call which occurred in the model run.  Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "transitionport()"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "centerobject"
        },
        "parameters": {
            "text": "(obj object, num centerportnum)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.centerObjects[]"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "centerObjects"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "nrcp"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.centerObjects.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "centerObjects"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "cpcpno"
        },
        "parameters": {
            "text": "(obj object, num port)"
        },
        "description": {
            "text": "This command returns the center port number that is connected to the specified center port number of object. Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "int otherport = cpcpno(current,1);"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "settable"
        },
        "parameters": {
            "text": "(node table, num sx, num sy[, num type, num overwrite])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cell"
        },
        "parameters": {
            "text": "(node table, num col, num row)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.cell()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "cell"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "cellrowcolumn"
        },
        "parameters": {
            "text": "(node table, num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "nrows"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.numRows"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "PropertyRef": {
                "class": "Table",
                "text": "numRows"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ncols"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.numCols"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "PropertyRef": {
                "class": "Table",
                "text": "numCols"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettablenum"
        },
        "parameters": {
            "text": "(str/node/num table, num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Table's [] operators"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettablestr"
        },
        "parameters": {
            "text": "(str/node/num table, num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Table's [] operators"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "settablenum"
        },
        "parameters": {
            "text": "(str/node/num table, num row, num col, num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Table's [] operators"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "settablestr"
        },
        "parameters": {
            "text": "(str/node/num table, num row, num col, str value)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Table's [] operators"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "exporttable"
        },
        "parameters": {
            "text": "(node exportnode, str filename[, num exportcolumnnames = 0, num exportrownames = 0, str listseparator = 0, str decimalseparator = 0])"
        },
        "shortdescription": {
            "text": "Export a table in .CSV format"
        },
        "description": {
            "text": "Export a table in .CSV (Comma Separated Value) format.  Commands for accessing, assigning and managing data in tables."
        },
        "example": {
            "text": "exporttable(so(),\"mytable.csv\",1, 1)"
        },
        "gr": {
            "text": "12"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "importdataset"
        },
        "parameters": {
            "text": "(node datatree, str filename, num format)"
        },
        "description": {
            "text": "Import tree dataset from a Comma Separated Value (CSV) file. datatree should be the node to import the data into. There are 3 possible formats to import. If format is 1, then the data is imported as a table, meaning each sub-node of datatree is a row in the table, and each sub-node of each row is a cell in the table. This is the same as using the importtable() command. If format is 2, then the data is imported as a simple data series. The csv file is assumed to have one column, and each row's value is imported into a sub-node of datatree. If format is 3, then the data is imported as a series of x,y pairs. The csv file is assumed to have 2 columns. Row 1 column 1 of the csv file is imported as sub-node 1 of datatree, row 1 column 2 is imported as sub-node 2 of datatree, row 2 column 1 is imported as sub-node 3 of datatree, and so forth. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "importdataset(so(),\"C:\\\\mydataset.csv\",1)"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "exportdataset"
        },
        "parameters": {
            "text": "(node datatree, str filename, num format[, str wrOption = \"w\"])"
        },
        "description": {
            "text": "Export tree dataset to .CSV (Comma Separated Value) format. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "exportdataset(so(),\"mydataset.csv\",1)"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "clearbundle"
        },
        "parameters": {
            "text": "(node datanode[, num resetflags = 0])"
        },
        "shortdescription": {
            "text": "Clears all bundle data"
        },
        "description": {
            "text": "Clears the bundle data associated with datanode. This will clear all entries as well as all fields in the bundle.\n\tresetflags is a bitwise mask for flags to initialize the bundle by. Valid values are: Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "clearbundle(x);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "addbundlefield"
        },
        "parameters": {
            "text": "(node datanode, str fieldname, num type[, num maxstrsize])"
        },
        "shortdescription": {
            "text": "Adds a field to the bundle"
        },
        "description": {
            "text": "Adds a field to the bundle with the given field name. Returns the field rank (base 0) of the added field.\n\tAll fields for a bundle must be added before any entries are added.\n\tThe type is a bitwise flag that must be one of the following values: Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "i": [
                {
                    "text": "O(log n)"
                },
                {
                    "text": "O(1)"
                }
            ]
        },
        "example": {
            "text": "addbundlefield(x, \"Object Name\", BUNDLE_FIELD_TYPE_STR | BUNDLE_FIELD_NULLABLE, 64);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "addbundleentry"
        },
        "parameters": {
            "text": "(node datanode[, field1val, field2val, ...])"
        },
        "shortdescription": {
            "text": "Adds a new entry to the bundle (base 0)"
        },
        "description": {
            "text": "Adds a new entry to the bundle (base 0).  All fields must be added before adding entries.  The optional field values will be added to the fields in the given order.  Up to 29 field values can be given.  For bundles with more fields, use setbundlevalue.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int lastentry = addbundleentry(x, time(), current.subnodes.length);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "removefirstbundleentry"
        },
        "parameters": {
            "text": "(node datanode)"
        },
        "shortdescription": {
            "text": "Removes the first entry in the bundle"
        },
        "description": {
            "text": "Removes the first entry in the bundle. For managing memory footprint of historical data.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "removefirstbundleentry(x);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "removelastbundleentry"
        },
        "parameters": {
            "text": "(node datanode)"
        },
        "shortdescription": {
            "text": "Removes the last entry of the bundle"
        },
        "description": {
            "text": "Removes the last entry of the bundle. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "removefirstbundleentry(x);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "removebundleentry"
        },
        "parameters": {
            "text": "(node datanode, int entrynum)"
        },
        "shortdescription": {
            "text": "Removes the entry entrynum (base 0) of the bundle"
        },
        "description": {
            "text": "Removes the entry entrynum (base 0) of the bundle. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "removebundleentry(x, 2);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setbundlevalue"
        },
        "parameters": {
            "text": "(node datanode, num entrynr, str/num field, num/str val)"
        },
        "shortdescription": {
            "text": "Sets the value of the entry (base 0) and field (base 0) of the bundle"
        },
        "description": {
            "text": "Sets the value of the defined entry (base 0) and field (base 0) of the bundle.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "setbundlevalue(x, 5, \"Object Name\", current.name);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getbundlevalue"
        },
        "parameters": {
            "text": "(node datanode, num entrynr, str/num field)"
        },
        "shortdescription": {
            "text": "Gets the value of the defined entry (base 0) and field (base 0) of the bundle"
        },
        "description": {
            "text": "Returns the value of the defined entry (base 0) and field (base 0) of the bundle.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "string name = getbundlevalue(x, 5, \"Object Name\");"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num/str/node"
        }
    },
    {
        "name": {
            "text": "getbundleindexentries"
        },
        "parameters": {
            "text": "(node datanode, str/num field, str/num value)"
        },
        "shortdescription": {
            "text": "Gets all rows with a matching value in the given field"
        },
        "description": {
            "text": "If this command succeeds, it returns an int or an intarray containing\n\tall entries (0-based) that contain the given value for the given field. If it fails,\n\tit returns -1. It will fail if the datanode is not a bundle, or if the given field\n\tis not an indexed field, or if none of values in the field match the given value.\n\tSee the addbundlefield command for information on how to make an indexed field.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "gr": {
            "text": "18"
        },
        "example": {
            "text": "int entryNr = getbundleindexentries(data, \"SKU\", \"FS2016-BLU\");"
        }
    },
    {
        "name": {
            "text": "getbundlenrentries"
        },
        "parameters": {
            "text": "(node datanode)"
        },
        "shortdescription": {
            "text": "Gets the total number of entries in the bundle"
        },
        "description": {
            "text": "Returns the total number of entries in the bundle.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int nrentries = getbundlenrentries(x);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getbundlenrfields"
        },
        "parameters": {
            "text": "(node datanode)"
        },
        "shortdescription": {
            "text": "Gets the total number of fields in the bundle"
        },
        "description": {
            "text": "Returns the total number of fields in the bundle.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int nrfields = getbundlenrfields(x);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getbundlefieldname"
        },
        "parameters": {
            "text": "(node datanode, num fieldnr)"
        },
        "shortdescription": {
            "text": "Gets the name of the nth ranked field (base 0) in the bundle"
        },
        "description": {
            "text": "Returns the name of the nth ranked field (base 0) in the bundle.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "string fieldname = getbundlefieldname(x, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "getbundlefieldnr"
        },
        "parameters": {
            "text": "(node datanode, str fieldname)"
        },
        "shortdescription": {
            "text": "Gets the rank of the bundle field (base 0)"
        },
        "description": {
            "text": "Returns the rank of the bundle field (base 0). If the bundle field doesn't exist, returns -1.\n\t Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int index = getbundlefieldnr(x, \"Field Name\");"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getbundlefieldtype"
        },
        "parameters": {
            "text": "(node datanode, num fieldnr)"
        },
        "shortdescription": {
            "text": "Gets the data type of the bundle field at rank fieldnr (base 0)"
        },
        "description": {
            "text": "Returns the data type of the bundle field at rank fieldnr (base 0). Available return values are: Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int type = getbundlefieldtype(x, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "createinstance"
        },
        "parameters": {
            "text": "(obj class, obj location)"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "create"
            }
        },
        "example": {
            "text": "createinstance(library().find(\"?Source\"), model());"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "createcopy"
        },
        "parameters": {
            "text": "(node thenode, node container [, num samename, num inobject, num cached, num replace])"
        },
        "shortdescription": {
            "text": "Copies thenode into the specified container"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "copy"
            }
        },
        "example": {
            "text": "createcopy(Model.find(\"Tools/FlowItemBin/7/1\"), current)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "moveobject"
        },
        "parameters": {
            "text": "(obj object, obj location[, num outport])"
        },
        "shortdescription": {
            "text": "Moves object to the specified location"
        },
        "description": {
            "text": "This command moves the object to the specified location through the specified port. The specified port does not have to actually exist, this value is used by the receiving location to be able to reference the port the object came in through. When an object moves into location, the OnReceive event function of location is executed. This includes the OnEntry trigger function. Explicitly calling this on a flowitem with events queued up for it may cause problems. Only use when you know that no events are pending for the object being moved. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "moveobject(current.first,current.centerObjects[1]);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "clearcontents"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.subnodes.clear()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "subnodes"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "destroyobject"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.destroy()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "destroy"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "nodeinsertafter"
        },
        "parameters": {
            "text": "(node targetnode)"
        },
        "shortdescription": {
            "text": "Creates a new node immediately after targetnode"
        },
        "description": {
            "text": "This command creates a new node in the tree immediately after the targetnode. The new node has no data attached to it. Data is attached using the nodeadddata() command. Any node in the tree can be passed as targetnode. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "nodeinsertafter(item.find(\">labels\").last).dataType = DATATYPE_NUMBER;"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "nodeinsertinto"
        },
        "parameters": {
            "text": "(node containernode)"
        },
        "shortdescription": {
            "text": "Deprecated, Creates a new node inside containernode"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "subnodes"
            }
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "nodeadddata"
        },
        "parameters": {
            "text": "(node thenode, num type:num/str/ptr/obj)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value or treenode.dataType"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "treenode"
                },
                {
                    "text": "treenode"
                }
            ],
            "PropertyRef": [
                {
                    "class": "treenode",
                    "text": "value"
                },
                {
                    "class": "treenode",
                    "text": "dataType"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "nodedeldata"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.value or treenode.dataType"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "treenode"
                },
                {
                    "text": "treenode"
                }
            ],
            "PropertyRef": [
                {
                    "class": "treenode",
                    "text": "value"
                },
                {
                    "class": "treenode",
                    "text": "dataType"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "assertsubnode"
        },
        "parameters": {
            "text": "(node containernode, str name[, num datatype])"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.subnodes.assert()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "subnodes"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "copyattributes"
        },
        "parameters": {
            "text": "(obj destination, obj source, num mask)"
        },
        "description": {
            "text": "For developer use. Copy the attributes from one object to another. Use mask parameter to enable specific groups (from least significant):  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copyattributes(library().subnodes[1],model().subnodes[1],ATTCOPY_SPATIAL | ATTCOPY_VISUAL)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "integrityscan"
        },
        "parameters": {
            "text": "(obj class, obj start)"
        },
        "description": {
            "text": "For developer use. Checks that attributes have not been deleted from model objects, based on their class object. A search is done starting at the given starting node. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "integrityscan(rank(library(1)),model())"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "store"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "store();"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "undo"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "Undoes the previously recorded action for the specified view.  The specified view must have an undohistory attribute to record undoable actions. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "undo(view);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "redo"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "Redoes the previously undone action for the specified view.  The specified view must have an undohistory attribute to record undoable actions. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "redo(view);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createundorecord"
        },
        "parameters": {
            "text": "(obj view, obj object, num undocode[, num p1, num p2, num p3])"
        },
        "description": {
            "text": "Creates an undo record for the specified view. Returns the uniqueid for the created record. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "updateundorecord"
        },
        "parameters": {
            "text": "(obj view, num uniqueid[, num updatetype, num p1, num p2])"
        },
        "description": {
            "text": "Updates an undo record for the specified view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "updateundorecord(view, getundorecordid(record));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "finishundorecord"
        },
        "parameters": {
            "text": "(obj view, num uniqueid)"
        },
        "description": {
            "text": "Finishes an undo record for the specified view.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "finishundorecord(view, getundorecordid(record));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "beginaggregatedundo"
        },
        "parameters": {
            "text": "(obj view, str description)"
        },
        "description": {
            "text": "Begins an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the next endaggregatedundo() command will be encapsulated into a single undoable operation. Returns the id for the created record.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "int id = beginaggregatedundo(c.find(\"@/TheTable\"),\"Name Change\");"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "endaggregatedundo"
        },
        "parameters": {
            "text": "(obj view, num id)"
        },
        "description": {
            "text": "Ends an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the previous beginaggregatedundo() command will be encapsulated into a single undoable operation. Pass the id returned by the beginaggregatedundo() function.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "endaggregatedundo(c.find(\"@/TheTable\"),id);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "continueaggregatedundo"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "Continues the previously-finished aggregated undo record for the specified view. This is used if some other logic created and finished an aggregated undo,\n\tbut you want it to append any subsequent changes onto the previously finished undo record.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "int id = continueaggregatedundo(c.find(\"@/TheTable\"));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getcurrentundorecord"
        },
        "parameters": {
            "text": "(obj view[, int flags = 0x1])"
        },
        "description": {
            "text": "Returns a pointer to the treenode associated with the current undo record in the undohistory of the specified view. This is \n\tthe record that would be undone first when you perform an undo operation. It is also the most recently created record \n\t(potentially deep in the undo aggregation hierarchy) when and aggregated undo operation is being created. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "treenode record = getcurrentundorecord(view);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "getundorecordid"
        },
        "parameters": {
            "text": "(obj record)"
        },
        "description": {
            "text": "Returns the id of the specified undo record.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "int id = getundorecordid(getcurrentundorecord(view));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "findundorecordbyid"
        },
        "parameters": {
            "text": "(obj view, num id)"
        },
        "description": {
            "text": "Returns the undo record with the specified id for the specified view.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "beginignoreundo"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "beginignoreundo();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "endignoreundo"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record.\n\tSee Miscellaneous Concepts >  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/GUIs/AdvancedUndo/AdvancedUndo.html",
                "text": "Advanced Undo"
            }
        },
        "example": {
            "text": "endignoreundo();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "clearundohistory"
        },
        "parameters": {
            "text": "([obj view])"
        },
        "description": {
            "text": "Deletes all undo records in the undohistory of the specified view. If no view is specified, it will clear the global undo history used by the 3D and tree windows. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "clearundohistory(view);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "registereventtype"
        },
        "parameters": {
            "text": "(str name)"
        },
        "description": {
            "text": "Registers a custom event type for use with the Event Log. Returns the index of the eventtype to be used later by other commands such as logevent(). Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "int index = registereventtype(\"MyEventType\");"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "addtoeventtypelegend"
        },
        "parameters": {
            "text": "(str name, num parameter, num value, str legendname)"
        },
        "description": {
            "text": "The eventtype legend allows you to associate a string with a given value for a given parameter in that eventtype.\n\tPassing a negative number for 'parameter' allows you to add a preceeding string to explain the parameter.\n\tIf the 'parameter' is negative and the 'value' is -1, then it assumes the number is a pointer to a node and will display the node's path as a string. \n\t Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "addtoeventtypelegend(index,-1,-1,\"resource: \"); // for p1, display the text \"resource: \" and display the path for the object"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "logevent"
        },
        "parameters": {
            "text": "(num/str index/name[, obj object, obj involved, num p1, num p2, num p3, num p4])"
        },
        "description": {
            "text": "Logs an event as an entry in the Event Log. Use the name passed into registereventtype() or the index returned by registereventtype(). Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "logevent(\"MyEventType\",current,item,port);"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "eventloginfo"
        },
        "parameters": {
            "text": "(num operation, num n1)"
        },
        "description": {
            "text": "For developer use. Returns a string value describing something related to the Event Log. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "string objectpath = eventloginfo(ELI_GET_OBJECTPATH,1);"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "createevent"
        },
        "parameters": {
            "text": "(obj object, num time, num code[, str data, node involved])"
        },
        "description": {
            "text": "For developer use. This command creates an event that will occur sometime in the future in the model's run. The event will be created for the object specified by object. It will occur time seconds from the time that this command is called. If an event needs to occur that the same simulation time that it was created at, time should be 0. When the event occurs, the OnTimerEvent event function of the class of object will be called. This function will be passed code, data, and involved. These values can be accessed in OnTimerEvent as eventcode, eventdata, and i. Generally, eventcode is used to determine what type of event is being created or executed. Eventdata is used as a description of the event for the user's benefit. It is generally not important to the execution of OnTimerEvent. Any objects that are involved in the event, such as a flowitem that is entering or exiting, are passed as involved and are referenced in OnTimerEvent as i. There are predefined values for code that the user should use listed below: Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "if (current.subnodes.length >= current.mincontent)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "delayevents"
        },
        "parameters": {
            "text": "(num value)"
        },
        "description": {
            "text": "For developer use. Delay all events in the eventlist. The times of all events in the eventlist will be incremented by value.  Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "delayevents(20)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "delayeventsofobject"
        },
        "parameters": {
            "text": "(obj object, num value)"
        },
        "description": {
            "text": "For developer use. Delay events of object. The timed events of object are incremented by value, and the eventlist re-sorted. Value may be positive or negative.  Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "delayeventsofobject(model().subnodes[2],20)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "destroyeventsofobject"
        },
        "parameters": {
            "text": "(obj object [, num simtime, num code, str data, node involved])"
        },
        "shortdescription": {
            "text": "Destroys events associated with object"
        },
        "description": {
            "text": "Destroys events associated with the given object. The first parameter, object, is the only required parameter. Other parameters are optional and provide a filter for choosing which events to destroy, as follows: Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "destroyeventsofobject(model().subnodes[2])"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "destroyevent"
        },
        "parameters": {
            "text": "(node event)"
        },
        "description": {
            "text": "For developer use. Destroys a particular event from the event list. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "destroyevent(node(\"MAIN:/1/exec/events\").last)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "destroymessageevents"
        },
        "parameters": {
            "text": "(obj object, num time, obj fromobj[, num param1, num param2, num param3])"
        },
        "shortdescription": {
            "text": "Destroys message events associated with object"
        },
        "description": {
            "text": "Destroys message events associated with the given object. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "destroymessageevents(current, time(), NULL, 8)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "eventqty"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the number of events currently pending"
        },
        "description": {
            "text": "Returns the number of events currently pending. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "eventqty()"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "eventget"
        },
        "parameters": {
            "text": "(num index, num thing)"
        },
        "shortdescription": {
            "text": "An event attribute for the event at index"
        },
        "description": {
            "text": "Returns an event attribute at the specified index in MAIN:/project/exec/events. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "eventget(2,3)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num/node/str"
        }
    },
    {
        "name": {
            "text": "startlisten"
        },
        "parameters": {
            "text": "(obj listener)"
        },
        "description": {
            "text": "For developer use. Tell the executive that an object is a listener. Not persistent across sessions. This command will add a node in the executive listener list pointing to listener. When a session is reloaded, or after a compile, listeners need to be reset. The listening mechanism can add a significant load to the executive, so use minimally. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. The listener must filter the message to decide whether to respond to the OnListen message. Refer to the Online Reference Guide for the parameters passed into an OnListen message. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "startlisten(so())"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stoplisten"
        },
        "parameters": {
            "text": "(obj listener)"
        },
        "description": {
            "text": "For developer use. Tell the executive that this object is not a listener anymore. This command will remove the pointer to listener from the listeners list if previously added with the startlisten() command. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "stoplisten(so())"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "listenerinfo"
        },
        "parameters": {
            "text": "(int info)"
        },
        "description": {
            "text": "For developer use. This command returns information for use within the OnListen and OnPreListen event functions. Commands for creating, searching and manipulating events."
        },
        "example": {
            "code": {
                "text": "treenode current = c;\ntreenode involved = i;\nint code = listenerinfo(1);\ntreenode associated = tonode(listenerinfo(2));\ntreenode coupling = tonode(listenerinfo(3));\n\nprint(\"OnListen\");\nprint(\"current: \", current);\nprint(\"involved: \", involved);\nprint(\"code: \", code);\nprint(\"associated: \", associated);\nprint(\"coupling: \", coupling);"
            }
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num/node"
        }
    },
    {
        "name": {
            "text": "eventdata"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "For developer use. This command returns the string value that was passed to the createevent() command as data. It is only used in the OnTimerEvent function of the library objects. Generally, it is used as a description to the user of the type of event that is occurring. It is not generally used in the execution of the OnTimerEvent function, for speed reasons. This command should not have parentheses when it is called. See also createevent() and eventcode. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "if (comparetext(eventdata,\"openinputs\"))"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "str/num/node"
        }
    },
    {
        "name": {
            "text": "eventcode"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "For developer use. This command returns the number value that was passed to the createevent() command as code. It is only used in the OnTimerEvent function of the library objects. It is generally used to identify the type of event that is occurring. This command should not have parentheses when it is called. See also createevent() and eventdata. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "if (eventcode == EVENT_OPENINPUTS)"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "time"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use the Model class"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Model"
            },
            "PropertyRef": {
                "class": "Model",
                "text": "time"
            }
        },
        "example": {
            "text": "item.TimeIn = time();"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "statisticaltime"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use the Model class"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Model"
            },
            "PropertyRef": {
                "class": "Model",
                "text": "statisticalTime"
            }
        },
        "example": {
            "text": "item.TimeIn = statisticaltime();"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "reset"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use resetmodel()"
        },
        "description": {
            "text": "This command is deprecated. Use resetmodel() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "reset();"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "go"
        },
        "parameters": {
            "text": "([num fast])"
        },
        "shortdescription": {
            "text": "Starts the simulation run"
        },
        "description": {
            "text": "This command starts the simulation run. If there are any events in the event queue, they will occur when the clock reaches them. If there are no events in the queue, the clock will stop. This command will not reset the simulation. If fast is 1, then it will not bind objects before starting. This improves speed if you are stopping and starting the simulation often. See also runfunction(). Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "stop();"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stop"
        },
        "parameters": {
            "text": "([num fast])"
        },
        "shortdescription": {
            "text": "Stops the simulation run"
        },
        "description": {
            "text": "This command stops the simulation clock from running. The model stops with all of its pending events still in the queue. If the user starts the model again before resetting, the model will continue from the exact time that it stopped at. If fast is 1, then FlexSim will not rebind objects. This will improve speed if you are stopping and starting often. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "stop()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "runspeed"
        },
        "parameters": {
            "text": "(num speed[, num precisionMode])"
        },
        "shortdescription": {
            "text": "Sets the simulation speed"
        },
        "description": {
            "text": "This command sets the speed at which the simulation will run. It is the same as clicking and dragging the \n\tslider bar on the Run Control window, but more precise. The speed that the model will attempt to run at is defined as \n\tthe number of simulation time units per real second. The model may not actually achieve this speed if the computer cpu \n\tcan not keep up. precisionMode defines the precision to use. If 0, the precision mode will remain what it was before the \n\tcall. If you pass RUN_SPEED_LOW_PRECISION, it will set to a low precision run speed. If you pass RUN_SPEED_HIGH_PRECISION,\n\tit will run in high precision mode. This is used for emulation purposes. The precision mode will be reset to low precision \n\ton every reset, so you need to have something in your model set it back on reset or when the model starts to enable high \n\tprecision mode. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "runspeed(10);"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "step"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Advance the model run by one step. One step means to process exactly one event.  Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "step()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stoptime"
        },
        "parameters": {
            "text": "(num time [, num stopNum=1])"
        },
        "shortdescription": {
            "text": "Sets the time when the simulation should stop"
        },
        "description": {
            "text": "This command sets the time at which the simulation should stop running. The model will not necessarily stop at the exact time specified, but will stop at the first system check on or after the specified stop time. The model may stop early if there are no more events to execute. If stopNum is specified, the stop time at that rank will be set. If time is -1, the command returns the stoptime of stopNum. If time is 0 and stopNum is -1, all stop times will be reset such that there is only one disabled stop time at time 0. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "if (stoptime(-1) < 500)"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "skip"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Advance the model run by one step (process exactly one event) and then process any and all events at that same exact model time. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "skip()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fastforward"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Saves off the current runspeed, sets the run speed to max, suspends draw, and then runs to the next stop time. Once the next stop time is reached drawing is resumed and the runspeed is restored. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "fastforward()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "daemonstate"
        },
        "parameters": {
            "text": "(num thing)"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "daemonstate(1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "runfunction"
        },
        "parameters": {
            "text": "(num noreset)"
        },
        "description": {
            "text": "For developer use. Block user input/output, perform a model run at maximum speed possible by cpu, and return control when stoptime is met.  If stoptime = 0, the stoptime is assumed to be 1000. See go(). Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "runfunction(1)"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "activateview"
        },
        "parameters": {
            "text": "(obj viewnode)"
        },
        "description": {
            "text": "For developer use. This command makes a GUI window active and visible. It should be used to open a window that is stored in the view tree without creating a copy of the view in the active tree, in order to make direct changes that will be saved in the view tree instead of being deleted when the window is closed. Generally, the command createview() should be used to open GUI windows. Use makeactive() if you want to make an already open view the active, or top, window. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "activateview(views.find(\"standardviews/other/FindReplace\"));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createview"
        },
        "parameters": {
            "text": "(str viewpath[, str objectfocus, str viewfocus])"
        },
        "description": {
            "text": "For developer use. This command creates a new GUI window in the active node of the views tree. This window is a copy of the window whose path is given in viewpath. The window will have an object focus of objectfocus and a view focus of viewfocus. Objectfocus and viewfocus are generally the same for most GUI windows. They should be the path of the node that this GUI window is representing. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "createview(\"VIEW:/standardviews/other/FindReplace\",\"MAIN:/project/model/Tools/precision\",\"MAIN:/project/model/Tools/precision\");"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "closeview"
        },
        "parameters": {
            "text": "(node viewnode)"
        },
        "description": {
            "text": "For developer use. This command closes the view specified as viewnode. If viewnode is not a viewwindow or GUI, this command does nothing. The view is not removed from the active views folder, however. Use destroyobject() to remove it. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "treenode activewindows = views().find(\"active\");"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "repaintall"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Repaint all windows. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "repaintall()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "repaintallactive"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Repaint all windows in the active list. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "repaintallactive()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "repaintview"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Repaint the window without regenerating. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "repaintview(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "refreshview"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Regenerate the window from it's view definition. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "refreshview(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "applylinks"
        },
        "parameters": {
            "text": "(node view [, num refresh])"
        },
        "description": {
            "text": "For developer use. This command applies all of the hotlinks and coldlinks in the view window specified as view. If refresh is 1, then the links will be refreshed, meaning the values from the model will be retrieved and set on the window controls themselves. If refresh is 0, then the values in the model will be set according to what the user specified in the view. This command is used in Flexscript GUI programming. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "applylinks(ownerview(c));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "windowshow"
        },
        "parameters": {
            "text": "(HWND/node thewindow , num show)"
        },
        "description": {
            "text": "For developer use. Show or hide a window. If the second parameter is 1, then the window will be shown. Otherwise the window will be hidden. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "windowshow(windowfromnode(c))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "windowmove"
        },
        "parameters": {
            "text": "(HWND window, num x, num y, num sx, num sy[, num refresh])"
        },
        "description": {
            "text": "For developer use. Move a window to the specified x,y pixel location and give it the sx,sy size in pixels. If refresh is 1, then the window will repaint itself. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "windowmove(windowfromnode(c),10,10,200,200,1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "windowflash"
        },
        "parameters": {
            "text": "(HWND window, num count, num timeout)"
        },
        "description": {
            "text": "For developer use. Causes the specified window to flash. Count is the number of times to flash the window. Timeout controls the time between flashes. If timeout is 0, the default cursor blink rate is used. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "windowflash(windowfromnode(ownerview(c)),2,125);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "addviewtext"
        },
        "parameters": {
            "text": "(node view, string text)"
        },
        "description": {
            "text": "For developer use. Add text to the specified window. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "addviewtext(sv(),\"Hello\")"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getviewtext"
        },
        "parameters": {
            "text": "(obj/num window)"
        },
        "description": {
            "text": "For developer use. Returns the text of a window. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "getviewtext(sv())"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "setviewtext"
        },
        "parameters": {
            "text": "(obj/HWND window, str text)"
        },
        "description": {
            "text": "For developer use. Set the text of a gui edit field. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setviewtext(c,\"hello\")"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "gettableviewselection"
        },
        "parameters": {
            "text": "(obj tableview, num val)"
        },
        "description": {
            "text": "For developer use. Returns values based on the blue selection range in a table view: val 1 returns the start row, val 2 returns the start col, val 3 returns the end row, val 4 returns the end col. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "int startrow = gettableviewselection(c,1);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "settableviewselection"
        },
        "parameters": {
            "text": "(obj tableview, num startrow, num startcol, num endrow, num endcol[, num rangeselected])"
        },
        "description": {
            "text": "For developer use. Sets the blue selection range in a table view. If any of the number parameters are less than 0, it deselects everything. Use 0 to select header cells.  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "settableviewselection(c,0,1,2,2);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getchecked"
        },
        "parameters": {
            "text": "(obj window)"
        },
        "description": {
            "text": "For developer use. Returns the checked state of a button. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "getchecked(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "setchecked"
        },
        "parameters": {
            "text": "(obj view, num value)"
        },
        "description": {
            "text": "For developer use. Set the checked state of a button. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setchecked(c,0) ;"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "scrollinfo"
        },
        "parameters": {
            "text": "(obj/HWND view, num get_set {0-1}, num horz_vert_ctl {0-2}, num scrollinfo {1-4}[, num value])"
        },
        "description": {
            "text": "For developer use. Gets or sets scrollinfo for a scrollbar on a view. The value parameter is only used if get_set is 1. The position of the scrollbar (nPos) is changed with scrollinfo 4. You can also get and set the nMin, nMax, and nPage values of the scrollbar with scrollinfo 1, 2, and 3 respectively. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "scrollinfo(TheTable,1,1,4,scrollinfo(c,0,1,4)-amount);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "mainmenucommand"
        },
        "parameters": {
            "text": "(str name)"
        },
        "description": {
            "text": "For developer use. Execute a command from the stock main menu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "mainmenucommand(\"File|Open...\")"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "viewmenucommand"
        },
        "parameters": {
            "text": "(str name, obj view)"
        },
        "description": {
            "text": "For developer use. Execute a command from the stock view menu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "viewmenucommand(\"Edit|Copy\")"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "applicationcommand"
        },
        "parameters": {
            "text": "(str name[, p1, p2, p3, ...])"
        },
        "description": {
            "text": "For developer use. Execute a command based on its name.  This command will search for the named node in VIEW:/nodefunctions, then in MAIN:/project/exec/globals/nodefunctions, then in VIEW:/commands, and lastly in the FlexSim Engine.  If it finds a toggled node, it will call nodefunction on that node passing in up to 10 number parameters.  If it finds an untoggled node, it will call executefsnode() on that node passing in n1 as c, n2 as i, and n3 as eventcode. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "applicationcommand(\"outputconsole\");"
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "webcommand"
        },
        "parameters": {
            "text": "(str name[, p1, p2, p3, ...])"
        },
        "shortdescription": {
            "text": "Used to manipulate FlexSim's HTML engine/widgets"
        },
        "description": {
            "text": "A command used for manipulating FlexSim's HTML engine, html widgets, etc. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "string innerhtml = webcommand(\"getelementinnerhtml\", view, \"title\");"
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "callwebscriptmethod"
        },
        "parameters": {
            "text": "(obj view, str domid, str methodname, int type [, num/str data ...])"
        },
        "description": {
            "text": "Call a method on a DOM element in the HTML document of an HTML view. You must define the type of data of any parameters that are to be passed \n\t\tinto the method. The following types are available: Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "callwebscriptmethod(view, \"chart\", \"updateData\", CWSM_DOUBLE, time(), CWSM_NODE, getvarnode(current, \"data\"), CWSM_STRING, \"My Title\", CWSM_END);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "menumain"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the HMENU reference of the main menu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "var menu = menumain();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "getviewmenu"
        },
        "parameters": {
            "text": "(obj view, int menutype)"
        },
        "description": {
            "text": "For developer use. Returns the HMENU reference of the menu based on the menutype. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "var menu = menubelow(getviewmenu(c, 4), 0);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "menubelow"
        },
        "parameters": {
            "text": "(HMENU menu, num index)"
        },
        "description": {
            "text": "For developer use. Get the menu item with the specified index (starting with 0) in the specified menu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "var menu = menubelow(menumain(),4);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "menucheck"
        },
        "parameters": {
            "text": "(HMENU menu, num index, num on/off)"
        },
        "description": {
            "text": "For developer use. Set the check state of the menu item with the specified index (starting with 0) in the specified menu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "menucheck(menumain(), 2, 1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "menugray"
        },
        "parameters": {
            "text": "(HMENU menu, num index, num on/off)"
        },
        "description": {
            "text": "For developer use. Set the gray state of the menu item with the specified index (starting with 0) in the specified menu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "menugray(menumain(), 2, 1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "comborefresh"
        },
        "parameters": {
            "text": "(obj combonode)"
        },
        "description": {
            "text": "For developer use. Refreshes a picklist combobox contents. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "comborefresh(current);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "tabcontrolrefresh"
        },
        "parameters": {
            "text": "(obj tabcontrolnode)"
        },
        "description": {
            "text": "For developer use. Refreshes a tab control. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "tabcontrolrefresh(c.find(\"@/tabcontrol\"));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "combocurrentnode"
        },
        "parameters": {
            "text": "(obj combonode)"
        },
        "description": {
            "text": "For developer use. Returns the current node of the specified picklist combobox. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "createview("
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "activeview"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the currently active window as an HWND"
        },
        "description": {
            "text": "Returns the currently active window as an HWND. To get the node associated with the window, use nodefromwindow() Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "treenode viewnode = nodefromwindow(activeview());"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "activedocumentview"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the currently active document window as an HWND"
        },
        "description": {
            "text": "Returns the currently active document window as an HWND. To get the node associated with the window, use activedocumentnode(). Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "treenode activedoc = nodefromwindow(activedocumentview());"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "activedocumentnode"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the currently active document window"
        },
        "description": {
            "text": "Returns the currently active document window. If the active document window is a tabbed window, it will return the active tab page node. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "treenode activedoc = activedocumentnode();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "sendonactivatenotify"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Causes each palette windows' OnActivateNotify event to fire. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "sendonactivatenotify();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ownerview"
        },
        "parameters": {
            "text": "(obj viewobj)"
        },
        "description": {
            "text": "For developer use. Get the topmost node of a view structure. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "ownerview(sv())"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "nodefromwindow"
        },
        "parameters": {
            "text": "(num window)"
        },
        "description": {
            "text": "For developer use. Get the node of a window handle Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "nodefromwindow(windowfromnode(sv()))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "windowfromnode"
        },
        "parameters": {
            "text": "(obj viewnode)"
        },
        "description": {
            "text": "For developer use. Get the window handle (HWND) of a view node. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "windowfromnode(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "so"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets a reference to the last node designated as so()"
        },
        "description": {
            "text": "This command returns a reference to the last node that was designated the selected object. This command is only used in the scripting window. To designate a node as so, right-click on the node in the tree and select Edit|Designate This Node (so). Any node in the tree can be designated the selected object. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "getnodename(so())"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "sv"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets a reference to the last view desginated as sv()"
        },
        "description": {
            "text": "This command returns a reference to the last view window that was designated the selected view. To designate a view window, right-click on the window, not on any objects drawn in that window, and select \"Set as (sv)\". Any open view window (e.g. Ortho or VR) can be designated the selected view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "flypath(sv(),1);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "viewdist"
        },
        "parameters": {
            "text": "(obj view, obj object)"
        },
        "shortdescription": {
            "text": "Gets the distance from the focus point of view to object"
        },
        "description": {
            "text": "Returns the distance from the focus point of the view to object. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "if(viewdist(view, current) > 100) ;"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "systemwindow"
        },
        "parameters": {
            "text": "(num windowtype)"
        },
        "description": {
            "text": "For developer use. Get HWND handle to a system window: 1-Output 2-System 3-Compiler 4-Trace 5-Commands 6-Attributes 7-Completions 8-app 9-appsb 10-Output Edit 11-Compiler Edit 12-Trace Edit 13-System Edit Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "systemwindow(1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "selectedobject"
        },
        "parameters": {
            "text": "(obj window [, num reset])"
        },
        "description": {
            "text": "For developer use. Get the highlighted node in a view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "selectedobject(ownerview(c))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "selectedx"
        },
        "parameters": {
            "text": "(obj window)"
        },
        "description": {
            "text": "For developer use. Get the x position of the highlighted object in a view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "selectedx(ownerview(c))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "selectedy"
        },
        "parameters": {
            "text": "(obj window)"
        },
        "description": {
            "text": "For developer use. Get the y position of the highlighted object in a view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "selectedy(ownerview(c))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "selectedz"
        },
        "parameters": {
            "text": "(obj window)"
        },
        "description": {
            "text": "For developer use. Get the z position of the highlighted object in a view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "selectedz(ownerview(c))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "select"
        },
        "parameters": {
            "text": "(obj window)"
        },
        "description": {
            "text": "For developer use. Select the specified view object. Convert the return value with tonode().  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "select(ownerview(c))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "clickcode"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the type of click in a view.  Used in the OnClick event. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "if(clickcode()==2)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lastkey"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the keycode of a keypress in OnKeyPress event. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "lastkey()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lastkeyup"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the keycode of a keypress in OnKeyPress event. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "lastkeyup()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lastkeydown"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the keycode of a keypress in OnKeyPress event. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "lastkeydown()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "controlpressed"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For devloper use. Test if CTRL key is pressed Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "controlpressed()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "shiftpressed"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Test if SHIFT key is pressed.  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "shiftpressed()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lastclickednode"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns a pointer to the last clicked node. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "lastclickednode()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "dropx"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the x position of a drop action"
        },
        "description": {
            "text": "Get the x position of a drop action Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "dropx()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dropy"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the y position of a drop action"
        },
        "description": {
            "text": "Get the y position of a drop action Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "dropy()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dropz"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the z position of a drop action"
        },
        "description": {
            "text": "Get the z position of a drop action Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "dropz()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "draginfo"
        },
        "parameters": {
            "text": "(num operation[, num val])"
        },
        "shortdescription": {
            "text": "Gets or set values related to draggin the mouse"
        },
        "description": {
            "text": "Get or set values related to dragging the mouse. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "double dx = draginfo(DRAG_INFO_DX);"
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "dropnodefrom"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the view from which a node was dropped. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "dropnodefrom()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "dropnodeto"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the view into which a node was dropped. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "dropnodeto()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "cursorinfo"
        },
        "parameters": {
            "text": "(obj/num view, num operation, num x/y/z, num pos/move)"
        },
        "description": {
            "text": "For developer use. This command represents a lot of functionality wrapped up into one command.\n  It is a way of getting information regarding the position/state of the mouse for a window control. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows.",
            "u": [
                {
                    "text": "view"
                },
                {
                    "text": "operation"
                },
                {
                    "text": "xyz"
                },
                {
                    "text": "pos/move"
                }
            ]
        },
        "example": {
            "text": "cursorinfo(c,2,1,1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickcolor"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Opens a color picker window to allow the user to pick a color. Use pickedcolorred(), pickedcolorgreen(), pickedcolorblue() commands to retrieve the rgb color component values. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "pickcolor();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pickcolornode"
        },
        "parameters": {
            "text": "(obj colornode)"
        },
        "description": {
            "text": "For developer use. Open a color picker window to set the rgb color values of the color attribute node of an object. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "pickcolornode(color(current));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "pickedcolorred"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the red component of a color picked with the pickcolor() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "pickcolor();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickedcolorgreen"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the green component of a color picked with the pickcolor() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "pickcolor();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickedcolorblue"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the blue component of a color picked with the pickcolor() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "pickcolor();"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getfilebrowse"
        },
        "parameters": {
            "text": "(str extension, str extensiondescription[, str defaultreturn, str location, num savemode, node filelist])"
        },
        "shortdescription": {
            "text": "Opens a standard windows file browser dialog window"
        },
        "description": {
            "text": "This command opens a standard Windows file browser dialog window. The files shown in the window will have the extensions defined in extension. Different extensions should be separated by semicolons (;) in extension. The text passed as description will be used in the file browser to describe the type of file to open. This command returns a string that is the path of the selected file. If no file is selected, or Cancel is pressed, the command returns an empty string.  See filebrowse() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "string shapefile = getfilebrowse(\"*.3ds; *.wrl\",\"3D shape files\");"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "getdashboardcontrol"
        },
        "parameters": {
            "text": "(str id [, node startnode])"
        },
        "shortdescription": {
            "text": "Returns a reference to the dashboard control associated with id"
        },
        "description": {
            "text": "Returns a reference to the dashboard control that has the ID value of id. This command will search through all open dashboards until it finds a control with matching ID. Passing in a value for startnode will cause the command to only search through the dashboard containing startnode.  Dashboard controls include edit fields, buttons, comboboxes, etc. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "treenode accelEdit = getdashboardcontrol(\"accelEdit\", c); //Searches through the current dashboard only"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "treenode"
        }
    },
    {
        "name": {
            "text": "getfilesindirectory"
        },
        "parameters": {
            "text": "(str directory, str extension, node destnode)"
        },
        "description": {
            "text": "Retrieves all files in the specified directory that match the specified extension, and populates the content of destnode with nodes \n\tholding the path to each matching file. The command returns the number of matching files that were found. The extension parameter\n\tshould be the specific three (or sometimes four) letter extension that you want to get. For example, if you want all .fsm model files, specify the string \"fsm\".\n\tAlso, if you pass \"directories\" as the extension parameter, then the command will retrieve the list of directories inside the directory. To get all \n\tfiles, no matter the extension, pass \"*\" as the extension parameter. File paths will be set on the string data (as opposed to the name) of nodes\n\tinserted into destnode.\n\t Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "code": {
                "text": "treenode destnode = Model.find(\"Tools\").subnodes.assert(\"Files\");\nint nrfiles = getfilesindirectory(documentsdir(), \"*\", destnode);\nfor(int i = 1; i <= nrfiles; i++)\n{\n\tmpt(\"file: \");\n\tmpt(destnode.subnodes[i].value);\n\tmpr();\n}"
            }
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "help"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Display the help system window. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "help()"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "msg"
        },
        "parameters": {
            "text": "(str caption, str text [, num buttontype])"
        },
        "shortdescription": {
            "text": "Display a message dialog"
        },
        "description": {
            "text": "This command creates a message box with a title bar displaying the caption and the text written inside the box. \n\tThe buttons displayed on the message box are based on the value for buttontype. \n\tIf OK or Yes are pressed, msg() returns 1. If No is pressed, msg() returns 0. The value returned when Cancel is pressed depends on the buttontype. \n\tIf buttontype is 3, Cancel returns -1; otherwise it returns 0. \n\tIf buttontype is not specified, it is assumed to be 0.\n\t Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "if (msg(\"Finished\", \"Close the database?\") == 1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickfile"
        },
        "parameters": {
            "text": "(str extension, str extensiondescription[, str defaultreturn])"
        },
        "description": {
            "text": "For developer use. Opens a file browser for the user to choose a file. The browser will be looking for files with the specified extension.  The extensiondescription is any text which describes the type of files allowed. This command will return the full path to the chosen file. Convert the return value with tostr(). See filebrowse() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "pickfile(\"*.xls\",\"Excel Workbooks\")"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "report"
        },
        "parameters": {
            "text": "(obj containerobj, str path+filename, num append [0/1])"
        },
        "description": {
            "text": "For developer use. Generate a standard report file in \"comma separated value\" (csv) format for all objects under containerobj which are currently selected. If append is 1, then the report will be appended to the end of the file specified.  If append is 0, then either the file will be created or the existing file will be cleared before the report is written to it. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "report(model());"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "reportmode"
        },
        "parameters": {
            "text": "(int mode [0=general, 1=state])"
        },
        "description": {
            "text": "For developer use. Set the report mode. (General or state.) Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "reportmode(0);"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "showcompilerconsole"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Show the compiler console.  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "showcompilerconsole()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawline"
        },
        "parameters": {
            "text": "(obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1})"
        },
        "shortdescription": {
            "text": "Draws a planar line"
        },
        "description": {
            "text": "This command draws a planar line with a starting point of xloc1, yloc1, zloc1, and an ending point of  xloc2, yloc2, zloc2.  The color is defined by the red, green, blue color components ranging from 0 to 1. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglDisable(GL_LIGHTING);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawtriangle"
        },
        "parameters": {
            "text": "(obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num red {0-1}, num green {0-1}, num blue {0-1})"
        },
        "shortdescription": {
            "text": "Draws a planar triangle"
        },
        "description": {
            "text": "This command draws a planar triangle with vertices defined by xloc1, yloc1, zloc1, xloc2, yloc2, zloc2, xloc3, yloc3, and zloc3.  The color is defined by the red, green, blue color components ranging from 0 to 1. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawtriangle(view, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawquad"
        },
        "parameters": {
            "text": "(obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num x4, num y4, num z4, num red {0-1}, num green {0-1}, num blue {0-1})"
        },
        "shortdescription": {
            "text": "Draws a planar quadrilateral"
        },
        "description": {
            "text": "This command draws a planar quadrilateral with vertices defined by x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, and z4.  The color is defined by the red, green, blue color components ranging from 0 to 1. The resultant shape and lighting is dependent on the order or sequence in which the vertices are defined. If vertices are all in one plane, consider using drawrectangle() command. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawquad(view, 0, 0, 1, 0, 0, 0, 2, 2, 2, 4, 5, 6, 1, 0, 0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawtext"
        },
        "parameters": {
            "text": "(obj view, str text, num x, num y, num z [, num width, num height, num thickness, num rx, num ry, num rz, num red {0-1}, num green {0-1}, num blue {0-1} , num opacity {0-1}, num flags])"
        },
        "shortdescription": {
            "text": "Draws text"
        },
        "description": {
            "text": "This command draws text at a location defined by x, y, and z. \n\tThe width parameter is not used. The text width and height is determined by the height parameter. \n\tThe rotation is defined by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 1. You can \n\tdefine the flags parameter as follows: 0x1 = bold, 0x2 = italic, 0x4 = underline. The flags parameter only applies to non-3d views\n\tThe opacity if used should be a number ranging between 0 (full transparency) to 1 (opaque). \n\tCall drawfont() command to change font type before calling drawtext() if desired.\n\tThis command can be used in a planar, 3D, graph or panel view. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawtext(view, \"Hello\", 0,0,0, 0,.3,.1, 90,0,0, 1,0,0, .8);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawflattext"
        },
        "parameters": {
            "text": "(str text)"
        },
        "description": {
            "text": "This command can only be used in a 3D view. It draws a texture-mapped text string. This uses the same functionality that draws\n\tthe names and stats below objects. If scaled correctly, it draws a very crisp, readable text. Use this in conjunction with setdrawnamefunction() \n\tto customize the data that is shown in the box below objects. Unlike drawtext(), this command's parameter set is much more stripped down, so you \n\tshould use gl commands (i.e. fglTranslate(), fglScale(), fglColor(), etc.) to set up the location, size, and render settings before drawing \n\tthe text. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "Add the following code to an object's Custom Draw Code trigger:",
            "code": {
                "text": "if(!param(2)) {\n\tsetdrawnamefunction(80, 15, c, param(1), 1);\n} else {\n\tfglTranslate(-40, -15, 0);\n\tdrawflattext(\"Hello World\");\n}"
            }
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "draw3dtext"
        },
        "parameters": {
            "text": "(str text[, num asBitmap])"
        },
        "shortdescription": {
            "text": "Draws text in a 3d view"
        },
        "description": {
            "text": "This command is similar to drawtext(), but can only be used in a 3D view, and its parameter set is stripped down to \n\tprovide direct access to the text rendering procedure. Whereas drawtext() does some automatic scaling based on the current object,\n\tas well as some OpenGL state changes, etc., draw3dtext() calls the text drawing procedure directly, so any positioning, scaling,\n\tcolor settings, etc., should be done with OpenGL commands, i.e. glTranslated(), glScaled(), glColor3d(), etc.\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "draw3dtext(current.name);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setdrawnamefunction"
        },
        "parameters": {
            "text": "(num boxwidth, num boxheight, node nodefunction[, num pval1, num pval2, num pval3])"
        },
        "description": {
            "text": "This command gives direct access to the functionality that displays information in boxes below objects in the model.\n\tFlexSim's 3D display mechanism works by performing multiple drawing passes over the objects in the model. First, it gathers and caches \n\tdata for what needs to be drawn. Then it goes through and draws the object shapes and calls the objects' custom draw functionality. Finally it \n\tdraws any overlays such as connectors, information boxes, etc. The setdrawnamefunction() command, if called as part of an object's custom draw \n\tfunctionality, i.e. its OnDraw event or its Custom Draw Code trigger, will cause a callback to be fired when the drawing sequence gets to the \n\tinformation box step for that object. To do this, call the command and specify the size that you want the box to be drawn, and pass as the nodefunction \n\tparameter a reference to a node holding the code you want to fire to draw the box information, as well as up to 3 parameters that will be passed \n\tas param(1), param(2), and param(3) into that nodefunction. Then implement the nodefunction code to draw any information you want, using the \n\tdrawflattext() command, or any other OpenGL drawing commands. Note that when the nodefunction is call, the OpenGL model view matrix will be set so \n\tthat the (0,0,0) point is at the top-center of the display box, and one length unit represents one pixel on the screen.\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "Add the following code to an object's Custom Draw Code trigger:",
            "code": {
                "text": "if(!param(2)) {\n\tsetdrawnamefunction(80, 15, c, param(1), 1);\n} else {\n\tfglTranslate(-40, -15, 0);\n\tdrawflattext(\"Hello World\");\n}"
            }
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawrect"
        },
        "parameters": {
            "text": "(obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1})"
        },
        "shortdescription": {
            "text": "Draws a planar rectangle"
        },
        "description": {
            "text": "This command draws a planar rectangle with opposite corners defined by x1, y1, z1, and x2, y2, and z2. Both points must lie in a plane parallel to the xy plane. \n\tThe color is defined by the red, green, blue color components ranging from 0 to 1. \n\tThis command can be called in a planar, 3D, graph, or panel view. See also drawquad()\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawrect(view, 0,0,.5, 1, 1, .5, 1, 0, 0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawpie"
        },
        "parameters": {
            "text": "(obj view, num x, num y, num z, num x2, num y2, num z2, num startangle, num endangle, num red {0-1}, num green {0-1}, num blue {0-1})"
        },
        "shortdescription": {
            "text": "Draws a flat pie shape"
        },
        "description": {
            "text": "Draws a flat pie shape with its origin (center of radius) positioned at the midpoint between [x1,y1,z1] and [x2,y2,z2]. The angles are measured in degrees counterclockwise from the positive x axis. Negative angles are measured clockwise. The pie is filled from the start angle to the endangle counterclockwise. The color is defined by the red, green, blue color components ranging from 0 to 1.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawpie(view,3,3,0,0,0,0,45,90,0.5,0,0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawobject"
        },
        "parameters": {
            "text": "(obj view, num shapeindex, num textureindex[, num animation, treenode shapedata])"
        },
        "shortdescription": {
            "text": "Draws a 3D shape"
        },
        "description": {
            "text": "Draws a 3d object with the specified shape and texture indices. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawtomodelscale(current);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawimage"
        },
        "parameters": {
            "text": "(obj view, str imagepath, num x, num y, num width, num height, num scaling)"
        },
        "shortdescription": {
            "text": "Draws an image"
        },
        "description": {
            "text": "Draws the image at imagepath in the view.  The scaling value specifies \n\thow the image will be positioned and scaled.\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawimage(c, \"buttons\\\\visible_eye.png\", 0, 10, 0, 0, 0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getdrawtextmetric"
        },
        "parameters": {
            "text": "(str text, num fontsize, num metric[, num a])"
        },
        "description": {
            "text": "Returns information about the text. If metric is 1, it will return the width of the text. If metric is 2, it will return the height of the text. If metric is 3, it will return the max fitting length of the text using 'a' as the max extent. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "getdrawtextmetric(\"Hello\",12,1,0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "distfromviewpoint"
        },
        "parameters": {
            "text": "(obj object, obj view)"
        },
        "shortdescription": {
            "text": "How far from the viewpoint object is in the window view"
        },
        "description": {
            "text": "Returns how far from the viewpoint the object specified as object is in the view window specified as view. This value is only meaningful if view is a reference to a Perspective window. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "double dist = distfromviewpoint(model().subnodes[2],sv());"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getviewscale"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Returns the view scale factor. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "getviewscale(sv())"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "spaceglobal"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use drawtomodelscale()"
        },
        "description": {
            "text": "This command is deprecated. Use drawtomodelscale() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "spaceglobal()"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "spacebase"
        },
        "parameters": {
            "text": "([num view/object])"
        },
        "description": {
            "text": "Set the OpenGL matrix to the scaled space of the current object/view. If the parameter is 0, then the object's base space matrix will be loaded. If the parameter is 1, then the view's space will be loaded, meaning any subsequent draw commands will face the viewer directly and not change scale. This command can only be used in OnDraw event and Custom Draw Code trigger. See drawtoobjectscale() when scaling the OpenGL space by the object's size. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "spacebase(0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "spaceobject"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use drawtoobjectscale()"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Use drawtoobjectscale() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "spaceobject()"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "spacetranslate"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "description": {
            "text": "Apply translation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "spacetranslate(current.size.x, -current.size.y, 0)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "spacescale"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "description": {
            "text": "Apply scale transform to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "spacescale(2, 1, 1)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "spacerotate"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "description": {
            "text": "Apply rotation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "spacerotate(90, 0, 0)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setcameradirection"
        },
        "parameters": {
            "text": "(obj view, num x, num y, num z, num rx, num ry, num rz)"
        },
        "shortdescription": {
            "text": "Sets the viewpoint direction of the 3D view"
        },
        "description": {
            "text": "Set the viewpoint direction of an orthographic or perspective view. (x,y,z) is the location of the focus point of the camera. (rx, ry, rz) is the rotation of the camera. The associated view attribute names are: viewpointx, viewpointy, viewpointradius, viewpointrx, viewpointry, viewpointrz respectively. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setcameradirection(sv(), 0, 0, 0, -40, 0, 25);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setcameravolume"
        },
        "parameters": {
            "text": "(obj view, num w, num h, num nearclip, num farclip, num magnification, num fov, num projtype, num firstperson)"
        },
        "description": {
            "text": "For developer use. Set the OpenGL camera volume. Sets additional view parameters not set with setcameradirection. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "No example."
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawfont"
        },
        "parameters": {
            "text": "(num font)"
        },
        "shortdescription": {
            "text": "Specifies the font to be used with drawtext()"
        },
        "description": {
            "text": "Call before drawtext, to define font to be drawn. After drawtext is called, the font will be reset to default. There are currently 12 font types (numbers 0 through 11). Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawfont(2)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flystart"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Start fly mode. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flystart(ownerview(c))"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flyto"
        },
        "parameters": {
            "text": "(obj view, num endtime, num x, num y, num z, num rx, num ry, num rz)"
        },
        "description": {
            "text": "For developer use. Fly to the specified viewpoint over time.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flyto(sv(),10000,0,0,20,-50,0,-30);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flystop"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command stops any active flypaths.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flystop();"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flypath"
        },
        "parameters": {
            "text": "(obj view, num pathno [, num singlerun])"
        },
        "description": {
            "text": "For developer use. This command begins the predefined flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flypath(ownerview(c),1);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flypathadd"
        },
        "parameters": {
            "text": "(obj view, num pathno)"
        },
        "description": {
            "text": "For developer use. This command adds a flypath to the flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flypathadd(ownerview(c),1);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flypathreset"
        },
        "parameters": {
            "text": "(obj view, num pathno)"
        },
        "description": {
            "text": "For developer use. This command clears the points from the flypath numbered pathno in the view specified as view. Once the points have been cleared, a new set of flypath points can be generated. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flypathreset(ownerview(c),1);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "helpcommands"
        },
        "parameters": {
            "text": "(node destnode, num what, str command)"
        },
        "description": {
            "text": "For developer use. Used to get information about a command. Enter the command name in parameter 3. \n\t\tThe return value will be copied into the string data of destnode.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "helpcommands("
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "richeditaddtext"
        },
        "parameters": {
            "text": "(obj richedit, str text, num protected (0/1))"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "richedittoken"
        },
        "parameters": {
            "text": "(obj richedit, num tokenindex)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cppgettoken"
        },
        "parameters": {
            "text": "(obj textblock, num tokenindex)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "cppsettoken"
        },
        "parameters": {
            "text": "(obj textblock, num tokenindex, str insertiontext)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "picklistapply"
        },
        "parameters": {
            "text": "(obj combobox)"
        },
        "description": {
            "text": "For developer use. Applies the selected picked option from a picklist combobox. This is done when applylinks is called, or when and OK or Apply button is pressed. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "picklistapply(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "codetotemplate"
        },
        "parameters": {
            "text": "(obj code, obj edit)"
        },
        "description": {
            "text": "For developer use.  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "codetotemplate(so(),sv())"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "templatetocode"
        },
        "parameters": {
            "text": "(obj code, obj edit)"
        },
        "description": {
            "text": "For developer use. Apply template code to c++. This is used in a picklist's template code drop-down to apply edited template code back to the C++/Flexscript code that created it.  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "templatetocode(so(),sv())"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mediareset"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Unload all media. This will unload all currently loaded media from FlexSim: images; shapes; and sounds.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "mediareset()"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fgldebuglevel"
        },
        "parameters": {
            "text": "(num level [0-3])"
        },
        "description": {
            "text": "For developer use. Set the OpenGL debug level. The higher the number, the more scrutiny is put on the system, and the more reporting is done. 0 is none, 3 is maximum.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "fgldebuglevel(3)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "avistart"
        },
        "parameters": {
            "text": "(str filename, node viewnode, num fps)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/Tools/VideoRecorder/VideoRecorder.html",
                "text": "Video Recorder"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "aviadd"
        },
        "parameters": {
            "text": "(node viewnode)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/Tools/VideoRecorder/VideoRecorder.html",
                "text": "Video Recorder"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "avifinish"
        },
        "parameters": {
            "text": "(node viewnode)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/Tools/VideoRecorder/VideoRecorder.html",
                "text": "Video Recorder"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "autoloadallmedia"
        },
        "parameters": {
            "text": "([node thenode])"
        },
        "description": {
            "text": "For developer use. This command loads all of the media (images and shapes) required by the current views, library, and model. Images are either .bmp or .jpg graphics files. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many images or shapes that need to be loaded. This command is not available in C++. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "autoloadallmedia();"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "autoloadshapes"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command loads all 3D shapes required by the current views, library, and model. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many shapes that need to be loaded. This command is not available in C++. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "autoloadshapes();"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "autoloadimages"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command loads all of the images required by the current views, library, and model. Images are either .bmp or .jpg graphics files. This command may take some time to complete, if there are many images that need to be loaded. This command is not available in C++. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "autoloadimages();"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "autoloadsounds"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command loads all sounds required by the current views, library, and model as declared by \"sound\" attributes on the objects. This command may take some time to complete, if there are many sounds that need to be loaded. This command is not available in C++. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "autoloadsounds();"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "loadimage"
        },
        "parameters": {
            "text": "(str file, str name)"
        },
        "description": {
            "text": "For developer use. Load an image directly. An image file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded images. Each image has a corresponding name and an index. This command will return the index corresponding to the loaded image. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "loadimage(\"c:/myimage.bmp\",\"myimage\")"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "unloadimage"
        },
        "parameters": {
            "text": "(int textureid)"
        },
        "description": {
            "text": "For developer use. Unload an image from the Media List by index. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "treenode view = node(\"VIEW:/1>Documents/Dashboard/1+/~/GraphPanel/1/1\");"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "loadsound"
        },
        "parameters": {
            "text": "(str path+filename)"
        },
        "shortdescription": {
            "text": "Deprecated, use soundload()"
        },
        "description": {
            "text": "This command is deprecated. Use soundload() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int applauseindex = loadsound(\"c:/My Music/APPLAUSE.WAV\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "loadthreedobject"
        },
        "parameters": {
            "text": "(str file, str name)"
        },
        "description": {
            "text": "For developer use. Load a 3D model directly. A shape file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the loaded shape.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "loadthreedobject(\"c:/myshape.wrl\",\"myshape\")"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getshapeindex"
        },
        "parameters": {
            "text": "(str name)"
        },
        "shortdescription": {
            "text": "Gets the index of a loaded 3D shape"
        },
        "description": {
            "text": "Get the index of a loaded shape by its file path name. The file path name used in this command must use double backslashes as shown in the example. Use View -> Media Files to see a complete list of currently loaded shapes with their associated file path names and indexes.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "getshapeindex(\"fs3d\\\\Operator\\\\BasicOperator\\\\Chest.3ds\");"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettextureindex"
        },
        "parameters": {
            "text": "(str name)"
        },
        "shortdescription": {
            "text": "Gets the index of a loaded image"
        },
        "description": {
            "text": "Get the index of a loaded image by name. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to a texture's name. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "gettextureindex(\"myimage\")"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getsoundindex"
        },
        "parameters": {
            "text": "(str name)"
        },
        "shortdescription": {
            "text": "Gets the index of a loaded sound"
        },
        "description": {
            "text": "Returns the index of a loaded sound by the name associated with it in the project/media/sounds folder. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "getsoundindex(\"C:/My Sounds/APPLAUSE.WAV\");"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "shapeinfo"
        },
        "parameters": {
            "text": "(num info[, p1, p2, p3])"
        },
        "shortdescription": {
            "text": "Gets or sets information about loaded 3D shapes."
        },
        "description": {
            "text": "Gets or sets information about loaded 3D shapes. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "shapeinfo(SHAPEINFO_GET_ANIMATION_COUNT, shapeIndex);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "bindtexture"
        },
        "parameters": {
            "text": "(num textureid)"
        },
        "description": {
            "text": "This function is used in an OpenGL call sequence. When OpenGL commands are being used to draw a scene, this command will bind the texture loaded into FlexSim with the index textureid. Once bound, a texture will be used to render any polygons drawn subsequently. Texture mapping is the application (or mapping) of an image (or texture) to the surface of a polygon or other graphics primitive.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "bindtexture(10)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "textureaxis_s"
        },
        "parameters": {
            "text": "(num x, num y, num z, num a)"
        },
        "description": {
            "text": "Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture S axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "textureaxis_s(1,0,0,0)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "textureaxis_t"
        },
        "parameters": {
            "text": "(num x, num y, num z, num a)"
        },
        "description": {
            "text": "Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture T axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "textureaxis_t(0,0,1,0)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "objectshapecode"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use getshapeindex()"
        },
        "description": {
            "text": "This command is deprecated. Use getshapeindex() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "objectshapecode(so())"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "objecttexcode"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use getobjecttextureindex()"
        },
        "description": {
            "text": "This command is deprecated. Use getobjecttextureindex() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "objecttexcode(current)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "objectsoundcode"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the index of object's default sound"
        },
        "description": {
            "text": "Get the index of the object's default sound. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This function will return the index corresponding to the objects default sound assuming the object has a sound and soundindex attribute (default objects do not at this time) Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "objectsoundcode(current)"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "opengllighting"
        },
        "parameters": {
            "text": "(num on/off)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING)"
        },
        "description": {
            "text": "This command is deprecated. Use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "openglcolor"
        },
        "parameters": {
            "text": "(num red {0-1}, num green {0-1}, num blue {0-1}, num opacity {0-1})"
        },
        "shortdescription": {
            "text": "Deprecated, use fglColor()"
        },
        "description": {
            "text": "This command is deprecated. Use fglColor() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "soundload"
        },
        "parameters": {
            "text": "(str path+filename)"
        },
        "shortdescription": {
            "text": "Load a sound into FlexSim"
        },
        "description": {
            "text": "A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. Microsoft Wave Format files (.wav) can be loaded and played. Sounds can have their volume, balance and frequency adjusted dynamically. Multiple channels are managed through the Microsoft DirectSound Interface. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "int applauseindex = soundload(\"c:/My Music/APPLAUSE.WAV\");"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "soundstop"
        },
        "parameters": {
            "text": "(obj view, num sound)"
        },
        "shortdescription": {
            "text": "Stop a sound playing"
        },
        "description": {
            "text": "Stop a sound playing. Sounds are attached to a window by the operating system, so the view parameter is important.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "soundstop(sv(),1)"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "soundplay"
        },
        "parameters": {
            "text": "(obj view, num soundindex, num volume [, num tempo, num repeat y/n, num balance])"
        },
        "shortdescription": {
            "text": "Play a loaded sound"
        },
        "description": {
            "text": "Play a loaded sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "soundplay(sv(),3,.75,.25,1,.5)"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "soundplayfile"
        },
        "parameters": {
            "text": "(obj view, str path+filename, num volume [, num tempo, num repeat, num balance])"
        },
        "shortdescription": {
            "text": "Play a sound directly from a file"
        },
        "description": {
            "text": "Play a sound directly from a file. Sounds are attached to a window by the operating system, so the view parameter is important. The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "soundplayfile(sv(),\"C:/My Sounds/APPLAUSE.WAV\",1,1,0,.5);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "soundchange"
        },
        "parameters": {
            "text": "(obj view, num sound, num volume, num tempo, num repeat, num balance)"
        },
        "shortdescription": {
            "text": "Change a currently playing sond"
        },
        "description": {
            "text": "Change a currently playing sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Interesting affects are achieved when the volume and balance are changed based on the viewpoint relative to an object making the object appear to be emitting the sound. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "soundchange(sv(),1,1,1,1,.5)"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "applyshapefactors"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Applies all of the shape factors to object"
        },
        "description": {
            "text": "This command applies all of the shape factors to the object if it has any. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "applyshapefactors(item);"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "randinit"
        },
        "parameters": {
            "text": "(num stream, num seedvalue[, num seedvalue2, num seedvalue3, num seedvalue4, num seedvalue5, num seedvalue 6])"
        },
        "shortdescription": {
            "text": "Initializes a random stream"
        },
        "description": {
            "text": "Initializes the random number stream by setting its first value to seedvalue. Although there are an unlimited number of random number streams available to the user, only the first one hundred streams numbered 0 through 99 have been initialized when the FlexSim application is opened. To create a new stream, simply execute the randinit() command for the new stream. For instance, executing randinit(105, 7628912) will create a new stream number 105 if it does not currently exist, and set its initial seed value to 7628912. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "Example 1:"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "randnext"
        },
        "parameters": {
            "text": "(num stream)"
        },
        "description": {
            "text": "For development use. Returns the next random number from the stream. This command is used to pull random samples from probability distribution functions. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "randnext(1);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "randantithetic"
        },
        "parameters": {
            "text": "(num on/off)"
        },
        "description": {
            "text": "Makes number streams antithetic. Using this command, users can switch random streams to generate numbers between 1 and 0; rather than the default of 0 to 1. This is helpful for determining if random numbers are having a big affect on the results of the model. It's also useful when experimenting with massive models and there isn't sufficient time to run the model for multiple iterations as required for good statistical sampling. The user can then choose to do just one regular run and one antithetic run of the model to obtain two diametrically apposed results. These two results can be averaged for an approximation that is somewhat better than if each run of the model used random stream generators without antithetic sampling. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "randantithetic(1);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getstream"
        },
        "parameters": {
            "text": "(node object)"
        },
        "shortdescription": {
            "text": "Returns a unique random stream associated with the object"
        },
        "description": {
            "text": "Returns a unique random stream associated with the object. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "uniform(0, 1, getstream(current))"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "bernoulli"
        },
        "parameters": {
            "text": "(num prob, num succeed-value, num fail-value[, num stream])"
        },
        "shortdescription": {
            "text": "Returns one of two possible values, based on the given probability"
        },
        "description": {
            "text": "bernoulli(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
            
        },
        "example": {
            "text": "treenode curoperator = current.centerObjects[bernoulli(90,1,2,1)];"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "beta"
        },
        "parameters": {
            "text": "(num min, num max, num shape1, num shape2[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a beta distribution"
        },
        "description": {
            "text": "beta(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
            
        },
        "example": {
            "text": "double ptime = beta(8, 12, 1.3, 3, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "binomial"
        },
        "parameters": {
            "text": "(num trials, num prob[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a binomial distribution"
        },
        "description": {
            "text": "binomial(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int fparts = binomial(item.batchsize, 10, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "negbinomial"
        },
        "parameters": {
            "text": "(num successes, num prob[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a negative binomial distribution"
        },
        "description": {
            "text": "Generates a discrete random variate from a negative binomial distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "hypergeometric"
        },
        "parameters": {
            "text": "(num trials, num successes, num size[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a hypergeometric distribution"
        },
        "description": {
            "text": "hypergeometric(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "cempirical"
        },
        "parameters": {
            "text": "(str/node/num table[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a continuous empirical distribution"
        },
        "description": {
            "text": "A continuous empirical distribution with percentages and values defined in the table specified. Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "img": [
                {
                    "src": "Images/EmpiricalTable1.jpg"
                },
                {
                    "src": "Images/EmpiricalTable2.jpg"
                },
                {
                    "src": "Images/EmpiricalTable3.jpg"
                }
            ]
        },
        "example": {
            "text": "cempirical(\"mytable\", 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dempirical"
        },
        "parameters": {
            "text": "(str/node/num table[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a discrete empirical distribution"
        },
        "description": {
            "text": "A discrete empirical distribution. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int ptype = dempirical(\"prodtypes\", 5);"
        },
        "gr": {
            "text": "18"
        }
    },
    {
        "name": {
            "text": "duniform"
        },
        "parameters": {
            "text": "(num min, num max[, num stream])"
        },
        "shortdescription": {
            "text": "Returns random integer between the min and max"
        },
        "description": {
            "text": "duniform(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "duniform(1, 6, 3);"
        },
        "gr": {
            "text": "18"
        }
    },
    {
        "name": {
            "text": "empirical"
        },
        "parameters": {
            "text": "(str/node/num table[, num stream])"
        },
        "description": {
            "text": "A continuous empirical distribution. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "empirical(\"mytable\", 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "erlang"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from an erlang distribution"
        },
        "description": {
            "text": "erlang(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "double servicetime = erlang(60, 2, 4, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "exponential"
        },
        "parameters": {
            "text": "(num location, num scale [, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from an exponential distribution"
        },
        "description": {
            "text": "exponential(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "exponential(0, 10, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gamma"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a gamma distribution"
        },
        "description": {
            "text": "gamma(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "double repairtime = gamma(60, 2, 3.4, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "geometric"
        },
        "parameters": {
            "text": "(num prob[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a geometric distribution"
        },
        "description": {
            "text": "Generates a discrete random number with a geometric distribution and parameters as specified. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        }
    },
    {
        "name": {
            "text": "inversegaussian"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from an inversegaussian distribution"
        },
        "description": {
            "text": "inversegaussian(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "double repairtime = inversegaussian(60, 2, 4, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "invertedweibull"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from an inverted weibull distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from an inverted weibull distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "johnsonbounded"
        },
        "parameters": {
            "text": "(num min, num max, num shape1, num shape2[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a johnson bounded distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a johnson bounded distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "johnsonunbounded"
        },
        "parameters": {
            "text": "(num location, num scale, num shape1, num shape2[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a johnson unbounded distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a johnson unbounded distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "loglaplace"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a log laplace distribution"
        },
        "description": {
            "text": "loglaplace(  Commands for creating, manipulating, and accessing statistical data; including probability distributions."
            
        },
        "example": {
            "text": "loglaplace(0, 2, 8, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "loglogistic"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a log logistic distribution"
        },
        "description": {
            "text": "loglogistic( Commands for creating, manipulating, and accessing statistical data; including probability distributions."
            
        },
        "example": {
            "text": "loglogistic(0, 1, 2, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lognormal"
        },
        "parameters": {
            "text": "(num location, num normalmean, num normalstdev[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a lognormal distribution"
        },
        "description": {
            "text": "lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "http://en.wikipedia.org/wiki/Lognormal",
                "text": "wikipedia"
            },
            "u": [
                {
                    "text": "Inputs:"
                },
                {
                    "text": "Outputs:"
                },
                {
                    "text": "Probability Density Functions:"
                },
                {
                    "text": "Possible Applications:"
                },
                {
                    "text": "Comments:"
                }
            ],
            "infinity": [
                {},
                {},
                {}
            ],
            "squared": [
                {},
                {},
                {}
            ],
            "divide": {},
            "minus": {},
            "img": {
                "src": "Images/LogNormalDistribution.jpg"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lognormalmeanstdev"
        },
        "parameters": {
            "text": "(num mean, num stdev[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a lognormal distribution"
        },
        "description": {
            "text": "This command is an alternative to the lognormal2 command, used in the absence of data. You can specify the \n\tmean and standard deviation, and the command will calculate from those parameters the proper location, scale, and shape \n\tparameters for the lognormal2 command, and return a sample from that distribution. Note that the shape of the distribution\n\tis pre-defined to be a bell-shaped curve with a reasonably long right tail. Hence this command isn't as flexible as the \n\tlognormal2 command. This command, similar to the triangular distribution, should be used in the absence of\n\tdata, where you know the mean and standard deviation of the distribution, and you assume that the distribution is right-skewed\n\t(it has a longer right tail), but you do not have a real data set to fit to a distribution. Refer to lognormal2\n\tfor more information. Relating to the diagram describing the lognormal2 distribution, the lognormalmeanstdev command uses a \n\tnormalstdev/shape value of 0.75 to define its shape. Note that since the shape of the\n\tdistribution is hard-set, depending on the mean and standard deviation values, this may return a negative value. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "double cycletime = lognormalmeanstdev(10, 2);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "lognormal2"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a lognormal distribution"
        },
        "description": {
            "text": "lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "a": {
                "href": "http://en.wikipedia.org/wiki/Lognormal",
                "text": "wikipedia"
            }
        },
        "example": {
            "text": "double cycletime = lognormal2(0, 29.8, 0.31, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "normal"
        },
        "parameters": {
            "text": "(num mean, num stddev[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a normal distribution"
        },
        "description": {
            "text": "normal(μ, σ, stream) is an unbounded continuous probability distribution.  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "u": [
                {
                    "text": "Inputs:"
                },
                {
                    "text": "Outputs:"
                },
                {
                    "text": "Probability Density Functions:"
                },
                {
                    "text": "Possible Applications:"
                },
                {
                    "text": "Comments:"
                }
            ],
            "isin": {},
            "infinity": [
                {},
                {},
                {},
                {},
                {}
            ],
            "i": {
                "text": "stream"
            },
            "squared": {},
            "img": {
                "src": "Images/NormalDistribution.jpg"
            }
        },
        "example": {
            "text": "double thickness = Math.max(0.001, normal(5, 1.2));"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pearsont5"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a pearson t 5 distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a Person-T5 distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pearsont6"
        },
        "parameters": {
            "text": "(num location, num scale, num shape1, num shape2[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a pearson t 6 distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a Person-T6 distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "poisson"
        },
        "parameters": {
            "text": "(num mean[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a poisson distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a poisson distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "randomwalk"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "description": {
            "text": "Generates a continuous random variate from a random walk distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "triangular"
        },
        "parameters": {
            "text": "(num min, num max, num mode[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a triangular distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a triangular distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "uniform"
        },
        "parameters": {
            "text": "(num min, num max[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random number between the min and max values"
        },
        "description": {
            "text": "uniform(  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "aParam": [
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            ],
            "bParam": [
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            ],
            "i": [
                {
                    "text": "stream"
                },
                {
                    "text": "stream"
                }
            ],
            "u": [
                {
                    "text": "Inputs:"
                },
                {
                    "text": "Outputs:"
                },
                {
                    "text": "Possible Applications:"
                },
                {
                    "text": "Comments:"
                }
            ],
            "minus": [
                {},
                {}
            ],
            "divide": [
                {},
                {}
            ],
            "squared": {}
        },
        "example": {
            "text": "uniform(12.3, 27.5, 3);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "weibull"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a weibull distribution"
        },
        "description": {
            "text": "weibull(  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "gamma": [
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            ],
            "beta": [
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            ],
            "alpha": [
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            ],
            "i": [
                {
                    "text": "stream"
                },
                {
                    "text": "stream"
                }
            ],
            "u": [
                {
                    "text": "Inputs:"
                },
                {
                    "text": "Outputs:"
                },
                {
                    "text": "Probability Density Functions:"
                },
                {
                    "text": "Possible Applications:"
                },
                {
                    "text": "Comments:"
                }
            ],
            "isin": {},
            "infinity": [
                {},
                {},
                {}
            ],
            "divide": [
                {},
                {},
                {},
                {},
                {},
                {}
            ],
            "gfunc": [
                {},
                {},
                {},
                {}
            ],
            "squared": [
                {},
                {}
            ],
            "minus": {},
            "img": {
                "src": "Images/WeibullDistribution.jpg"
            }
        },
        "example": {
            "text": "weibull(0, 2, 3, 5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "cauchy"
        },
        "parameters": {
            "text": "(num location, num scale[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a cauchy distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a cauchy distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "extremevalue1a"
        },
        "parameters": {
            "text": "(num location, num scale[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a extremevalue1a distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a extremevalue1a distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "extremevalue1b"
        },
        "parameters": {
            "text": "(num location, num scale[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a extremevalue1b distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a extremevalue1b distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "inverseweibull"
        },
        "parameters": {
            "text": "(num location, num scale, num shape[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a inverseweibull distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a inverseweibull distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "laplace"
        },
        "parameters": {
            "text": "(num location, num scale[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a laplace distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a laplace distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "logarithmic"
        },
        "parameters": {
            "text": "(num theta[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a logarithmic distribution"
        },
        "description": {
            "text": "Generates a discrete random variate from a logarithmic distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pareto"
        },
        "parameters": {
            "text": "(num min, num scale[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a pareto distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a pareto distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "logistic"
        },
        "parameters": {
            "text": "(num location, num scale[, num stream])"
        },
        "shortdescription": {
            "text": "Returns a random sample from a logistic distribution"
        },
        "description": {
            "text": "Generates a continuous random variate from a logistic distribution with parameters as defined. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getdatastat"
        },
        "parameters": {
            "text": "(num stat, num/node nrSamples/parentNode, num sampler [, num p1, num p2, num p3])"
        },
        "description": {
            "text": "Calculates and returns a certain statistic of a data set.  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "b": [
                {
                    "text": "stat"
                },
                {
                    "text": "nrSamples"
                },
                {
                    "text": "sampler"
                }
            ],
            "div": [
                {
                    "class": "indent",
                    "div": [
                        {
                            "class": "pbodyindent",
                            "text": "STAT_MEAN - calculates the sample mean of the set"
                        },
                        {
                            "class": "pbodyindent",
                            "text": "STAT_MIN - calculates the minimum value in a defined range of values. p1 is the first element in the \n\t\t\t\trange (default is the first element in the set), p2 is the last element in the range (default \n\t\t\t\tis the last element in the set), and p3 defines a stride, allowing you to look at \n\t\t\t\tevery nth value (default 1). If either of p1, p2, or p3 is 0, then it will revert to that value's\n\t\t\t\trespective default."
                        },
                        {
                            "class": "pbodyindent",
                            "text": "STAT_MAX - calculates the maximum element in a defined range of values. p1, p2 and p3 are the same as for STAT_MIN"
                        },
                        {
                            "class": "pbodyindent",
                            "text": "STAT_VARIANCE - calculates the unbiased variance of the data set"
                        },
                        {
                            "class": "pbodyindent",
                            "text": "STAT_STD_DEV - calculates the unbiased standard deviation of the set"
                        },
                        {
                            "class": "pbodyindent",
                            "text": "STAT_SUM - calculates the sum of the set"
                        },
                        {
                            "class": "pbodyindent",
                            "text": "STAT_CONF_INTERVAL_HALF_WIDTH - calculates the confidence interval half-width of the set.\n\t\t\tPass in p1 to define the desired\n\t\t\tconfidence percentage. FlexSim will return precise values for percentages at 80%, 90%, 95%, 98%, 99%, and 99.8% and for\n\t\t\tsample sizes at or below 100 degrees of freedom. For percentages not in this set, FlexSim will \"clamp\" it to the nearest\n\t\t\tpercentage ABOVE the percentage passed in. So if you pass in a 75%, it will return an 80% confidence interval. Since an \n\t\t\t80% confidence interval will be a \"wider\" interval, we clamp up to be \"safer\" with the wider interval. Confidence\n\t\t\tintervals above 99.8 will simply return 0 (i.e. not valid). For degrees \n\t\t\tof freedom above above 100, it will assume 100 degrees of freedom."
                        }
                    ]
                },
                {
                    "class": "indent",
                    "text": "Note: parameter 2 as a parentNode is deprecated and you should use the parameter 2 as nrSamples option because it\n\t\tencompasses the other and is more flexible. The following deprecated functionality:",
                    "code": [
                        {
                            "text": "getdatastat(STAT_MEAN, myNode, 0, 0, 0, 0)"
                        },
                        {
                            "text": "getdatastat(STAT_MEAN, myNode.subnodes.length, myNode.subnodes[count].value, 0, 0, 0)"
                        }
                    ]
                },
                {
                    "class": "indent",
                    "text": "Use count for determining which value is to be retrieved. Below are several examples:",
                    "code": [
                        {
                            "text": "getdatastat(STAT_MEAN, Table(\"GT1\").numRows, Table(\"GT1\")[count][5])"
                        },
                        {
                            "text": "getdatastat(STAT_SUM, Table(\"MyBundle\").numRows, Table(\"MyBundle\")[count][\"Time\"])"
                        }
                    ]
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getstat"
        },
        "parameters": {
            "text": "(node object, str name, int flag [, var p1, var p2, var p3])"
        },
        "shortdescription": {
            "text": "Returns the statistic value for the given object"
        },
        "description": {
            "text": "It is preferred to use  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "stats"
            },
            "b": [
                {
                    "text": "name"
                },
                {
                    "text": "flag"
                },
                {
                    "text": "p1"
                },
                {
                    "text": "p2"
                },
                {
                    "text": "p3"
                },
                {
                    "text": "STAT_TIME_AT_VALUE"
                }
            ],
            "code": [
                {
                    "text": "function_s(object, \"enumerateStatistics\", targetNode)"
                },
                {
                    "text": "getstat(object, \"Output\", STAT_CURRENT)"
                },
                {
                    "text": "getstat(object, \"Content\", STAT_AVERAGE)"
                },
                {
                    "text": "getstat(object, \"State\", STAT_CURRENT, 0)"
                },
                {
                    "text": "getstat(object, \"State\", STAT_TIME_AT_VALUE, 0, STATE_IDLE)"
                },
                {
                    "text": "getstat(object, \"Staytime\", STAT_MAX)"
                }
            ],
            "div": {
                "class": "indent",
                "div": [
                    {
                        "class": "pbodyindent",
                        "text": "STAT_CURRENT - returns the current value of this statistic"
                    },
                    {
                        "class": "pbodyindent",
                        "text": "STAT_MIN - returns the minimum value of this statistic"
                    },
                    {
                        "class": "pbodyindent",
                        "text": "STAT_MAX - returns the maximum value of this statistic"
                    },
                    {
                        "class": "pbodyindent",
                        "text": "STAT_AVERAGE - returns the average value of this statistic"
                    },
                    {
                        "class": "pbodyindent",
                        "text": "STAT_TIME_AT_VALUE - returns the total simulation time the stat spent\n\t\t\tat a given value (requires an additional p1/p2/p3 parameter designating the desired value). This \n\t\t\tis only valid if the stat is tracking its history or profile data, such as in objects' standard \"State\" \n\t\t\tstatistics. See below for more information on this."
                    }
                ]
            }
        },
        "example": {},
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "fileopen"
        },
        "parameters": {
            "text": "(str filename [, str opentype])"
        },
        "shortdescription": {
            "text": "Opens the FlexSim file interface"
        },
        "description": {
            "text": "Opens the FlexSim file interface. Returns 1 if successful. Returns 0 if an error is encountered. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fileopen(\"C:/myfile.txt\", \"w\");"
        },
        "gr": {
            "text": "21"
        }
    },
    {
        "name": {
            "text": "fileclose"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Closes the FlexSim file interface"
        },
        "description": {
            "text": "Closes the FlexSim file interface and saves any data written to the file while it was open. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fileclose()"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fpt"
        },
        "parameters": {
            "text": "(str text)"
        },
        "shortdescription": {
            "text": "Prints a string to the open file"
        },
        "description": {
            "text": "Prints a string to the open file. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fpt(\"Hello\")"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fpf"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Prints a floating point value to the open file"
        },
        "description": {
            "text": "Prints a floating point value to the open file. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fpf(1.234)"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fpd"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Prints an integer value to the open file"
        },
        "description": {
            "text": "Prints an integer value to the open file. Floating point values will be truncated. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fpd(3) prints 3"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fpc"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Prints an ASCII character to the open file"
        },
        "description": {
            "text": "Prints an ASCII character to the open file. Common values: TAB = 9, LF = 10, CR = 13 Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fpc(9)"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fpr"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Prints a return (new line) to the open file"
        },
        "description": {
            "text": "Prints a return (new line) to the open file. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "fpr()"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbopen"
        },
        "parameters": {
            "text": "(str databasename, str command {SQL string or Tablename}, num usetable [, num showlogin])"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbopen(\"itemdrive\",\"timetable\",1);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbclose"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "if (current.donegatheringdata == 1)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbgetmetrics"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbgetmetrics()"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbgetnumrows"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "for (int x=1; x<=dbgetnumrows(); x++)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbgetnumcols"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "for (int x=1; x<=dbgetnumcols(); x++)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbgettablecell"
        },
        "parameters": {
            "text": "(num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "double tablevalue = stringtonum(dbgettablecell(1,1));"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "dbgetfieldname"
        },
        "parameters": {
            "text": "(num column)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "string ColName = dbgetfieldname(1);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "dbgetmode"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "if (dbgetmode() != DBMODE_CLOSED)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbsqlquery"
        },
        "parameters": {
            "text": "(str query[, num forwardOnlyCursor])"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbsqlquery(\"select processtime from timetable where type='1'\");"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "dbsettablecell"
        },
        "parameters": {
            "text": "(num row, num col, str value)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "for (int x=1; x<= model().subnodes.length; x++)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbwritechanges"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbwritechanges()"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbchangetable"
        },
        "parameters": {
            "text": "(str tablename)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbchangetable(\"Inventory\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excellaunch"
        },
        "parameters": {
            "text": "([str launchdir])"
        },
        "shortdescription": {
            "text": "Launch Microsoft Excel"
        },
        "description": {
            "text": "This command opens Microsoft Excel so that it can be accessed by FlexSim. If launchdir is not specified, the path defined in Tools|Excel...|Global Settings will be used. Otherwise, the launchdir must be an accurate path to the location on the hard drive where EXCEL.EXE is located. It is typically something like \"C:/Program Files/Microsoft Office/Office10,\" but may be different depending on the version of Excel installed. It is generally not required to launch Excel before communicating with it. However, if FlexSim is set to communicate with Excel via DDE (by calling maintenance(1000,1), this is not the default behavior) Excel must be running before any communication can be performed. If excellaunch() is called at the beginning of communication, excelquit() must also be called before the user opens a new model, compiles the current model or closes FlexSim. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excellaunch(\" C:/Program Files/Microsoft Office/Office10\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelquit"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Close Microsoft Excel"
        },
        "description": {
            "text": "This command closes Microsoft Excel if it is open. After this command is called, no other commands to Excel should be called. Any Excel files that were open should be closed before this command is called. You may get an Excel prompt to save changes to any workbooks that were left open. Use excelclose() to avoid this. This command must be called if excellaunch() was called previously. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "see excellaunch();"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelopen"
        },
        "parameters": {
            "text": "(str workbook)"
        },
        "shortdescription": {
            "text": "Open the Excel workbook"
        },
        "description": {
            "text": "This command opens the file called workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelopen(\"mydata.xls\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "excelcreateworkbook"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Create an Excel workbook"
        },
        "description": {
            "text": "This command creates a workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open or create another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelcreateworkbook();"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "excelclose"
        },
        "parameters": {
            "text": "(num save [1/0])"
        },
        "shortdescription": {
            "text": "Close the currently open Excel workbook"
        },
        "description": {
            "text": "This command closes the currently open Excel workbook. If save is 1, the workbook will be saved before it closes. If save is 0, changes made to the workbook will be discarded. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "See the example for excelopen()."
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelmacro"
        },
        "parameters": {
            "text": "(str macro)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. This command allows the user to send an Excel 4.0 macro command to Excel. This language is no longer maintained by Microsoft and may be removed from future versions of Excel. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "excelmacro(\"select(\\\"r1c1:r5c5\\\")\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelsetsheet"
        },
        "parameters": {
            "text": "(str sheetname)"
        },
        "shortdescription": {
            "text": "Sets the active worksheet of the currently open Excel workbook"
        },
        "description": {
            "text": "This command sets the active worksheet in the currently open Excel workbook.  Whenever excelreadnum() or excelreadstr() are called, the value read will come from the active worksheet. The active worksheet may be set many times for the same open workbook. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "See the example for excelopen()."
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "excelread"
        },
        "parameters": {
            "text": "(num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated, use excelreadnum(), excelreadstr() or excelreadcell()"
        },
        "description": {
            "text": "This command is deprecated. Use excelreadnum(), excelreadstr() or excelreadcell() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "excelreadcell"
        },
        "parameters": {
            "text": "(num row, num col[, num flags])"
        },
        "shortdescription": {
            "text": "Returns the value of a cell in the active worksheet as a variant"
        },
        "description": {
            "text": "Returns the value of a cell in the active worksheet as a variant.  Flags can be specified to specify what exactly is returned from Excel.  \n\t\tThose flags are EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, and EXCEL_DATE_AS_NUM.  Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "Variant value = excelreadcell(1, 5, EXCEL_DATA_NUMBER | EXCEL_DATE_AS_NUM);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "excelwrite"
        },
        "parameters": {
            "text": "(str data, num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated, use excelwritenum() and excelwritestr()"
        },
        "description": {
            "text": "This command is deprecated. Use excelwritenum() and excelwritestr() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "excelcreatesheet"
        },
        "parameters": {
            "text": "(str name)"
        },
        "shortdescription": {
            "text": "Creates a new worksheet in the currently open Excel workbook"
        },
        "description": {
            "text": "Creates a new worksheet. The new sheet will be given the specified name. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelcreatesheet(\"MyNewSheet\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "exceldeletesheet"
        },
        "parameters": {
            "text": "(str name [, int allowwarning])"
        },
        "shortdescription": {
            "text": "Delete the worksheet in the currently open Excel workbook"
        },
        "description": {
            "text": "Deletes the specified worksheet. If allowwarning is 1, you will be warned before you delete a sheet with data. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "exceldeletesheet(\"MyNewSheet\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelsetrange"
        },
        "parameters": {
            "text": "(str rangename, num startrow, num startcolumn, num endrow, num endcolumn)"
        },
        "shortdescription": {
            "text": "Creates or changes a named range of the currently open Excel workbook"
        },
        "description": {
            "text": "Creates or changes a named range. The range will be on the active sheet. The range's upper-left cell is defined by startrow and startcolumn. The bottom-right cell is defined by endrow and endcolumn. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelsetrange(\"MyRange\",5,5,10,15);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelgetrangeparam"
        },
        "parameters": {
            "text": "(str rangename, num param)"
        },
        "shortdescription": {
            "text": "Retrieves a location parameter about the named range of the currently open Excel workbook"
        },
        "description": {
            "text": "Retrieves a location parameter about the named range. Valid values for param are: Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "int width = excelgetrangeparam(\"MyRange\",5);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "excelgetrangesheet"
        },
        "parameters": {
            "text": "(str rangename)"
        },
        "shortdescription": {
            "text": "Gets the name of the worksheet associated with rangename of the currently open Excel workbook"
        },
        "description": {
            "text": "Returns the name of the worksheet where the specified range is located. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "pt(excelgetrangesheet(\"MyRange\"));"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "exceldeleterange"
        },
        "parameters": {
            "text": "(str rangename)"
        },
        "shortdescription": {
            "text": "Deletes the specified range of the currently open Excel workbook"
        },
        "description": {
            "text": "Deletes the specified range. Does not affect the data in the range. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "exceldeleterange(\"MyRange\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelrangeread"
        },
        "parameters": {
            "text": "(str rangename[treenode target], num row, num col[, num numRows, num numCols, num flags])"
        },
        "shortdescription": {
            "text": "Reads an Excel range and dumps it to a treenode"
        },
        "description": {
            "text": "This function is overloaded so that it has two functions depending on which arguments you pass in.\n\tThe first (where you pass in a string) is deprecated. Use excelrangereadnum() and excelrangereadstr() instead.   Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode myTable = node (\"Tools/GlobalTables/GlobalTable1>variables/data\", model());"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "excelrangewrite"
        },
        "parameters": {
            "text": "(treenode source, num row, num col, num flags)"
        },
        "shortdescription": {
            "text": "Reads data from a source table node and writes it to the active Excel sheet"
        },
        "description": {
            "text": "This function will write all the of the data from the source table node to the active Excel sheet.  If the treenode has bundle data,\n  this will read the bundle and write it to the sheet, otherwise it will look for child nodes with data on them, like a Global Table.  The row and col passed in \n  specify where on the Excel sheet to begin writing the data.  All of the data on the source node will always be written.  Flags can be passed in to change the use \n  of headers.  Those flags are EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode myTable = node(\"Tools/GlobalTables/GlobalTable1>variables/data\", model());"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelversion"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the version of Microsoft Excel"
        },
        "description": {
            "text": "Returns a string that contains the Excel interface version. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelversion()"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "excelexportnode"
        },
        "parameters": {
            "text": "(node table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Deprecated, use excelexporttable()"
        },
        "description": {
            "text": "This command is deprecated. Use excelexporttable() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "excelexportnode(reftable(\"Table1\"),1,1,5,3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelexporttable"
        },
        "parameters": {
            "text": "(str/node/num table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Exports data from a table within FlexSim to the currently open Excel workbook"
        },
        "description": {
            "text": "Exports data from a table within FlexSim to Excel. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node.  The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelexporttable(\"Table1\",1,1,5,3);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelimportnode"
        },
        "parameters": {
            "text": "(obj node, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Deprecated, use excelimporttable()"
        },
        "description": {
            "text": "This command is deprecated. Use excelimporttable() instead Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "excelimportnode(so(),1,1,5,3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelimporttable"
        },
        "parameters": {
            "text": "(str/node/num table, num startrow, num startcol, num numrows, num numcols)"
        },
        "shortdescription": {
            "text": "Imports data from the currently open Excel workbook to a table in FlexSim"
        },
        "description": {
            "text": "Imports data from Excel to a table in FlexSim. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node.  The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelimporttable(\"MyTable\",1,1,5,3);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelmultitableexport"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Starts the automatic exporting of data from FlexSim tables to Excel"
        },
        "description": {
            "text": "Starts the automatic exporting of data from FlexSim tables to Excel sheets as setup in the Excel Import/Export tool. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelmultitableexport()"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelmultitableimport"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Starts the automatic importing of data from Excel to FlexSim tables"
        },
        "description": {
            "text": "Starts the automatic importing of data from Excel sheets to FlexSim tables as setup in the Excel Import/Export tool. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelmultitableimport()"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelreadnum"
        },
        "parameters": {
            "text": "(num row, num column [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Read the numeric value from a cell of the active sheet of the currently open Excel workbook"
        },
        "description": {
            "text": "Reads a numeric value from a cell defined by row and column of the active sheet of the currently open Excel workbook. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelreadnum(5,1)"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "excelreadstr"
        },
        "parameters": {
            "text": "(num row, num column [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Read the text value from a cell of the active sheet of the currently open Excel workbook"
        },
        "description": {
            "text": "Reads a text value from a cell defined by row and column of the active sheet in the currently open Excel workbook. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelreadstr(5,1)"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "excelrangereadnum"
        },
        "parameters": {
            "text": "(str rangename, num row, num column)"
        },
        "shortdescription": {
            "text": "Read the numeric value from a cell of the specified range of the currently open Excel workbook"
        },
        "description": {
            "text": "Reads a numeric value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelreadnum(\"MyRange\",5,1)"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "excelrangereadstr"
        },
        "parameters": {
            "text": "(str rangename, num row, num column [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Read the text value from a cell of the specified range of the currently open Excel workbook"
        },
        "description": {
            "text": "Reads a text value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelreadstr(\"MyRange\",5,1)"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "excelupdatepreferences"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "SYSTEM USE ONLY"
        },
        "description": {
            "text": "SYSTEM USE ONLY - used to update global variables to match preferences. Called in startupRT.txt and in OnSelect of Excel Preferences GUI. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "excelupdatepreferences()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelwritenum"
        },
        "parameters": {
            "text": "(num row, num column, num value [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Write the numeric value to a cell of the active sheet of the currently open Excel workbook"
        },
        "description": {
            "text": "Writes a numeric value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelwritenum(5,1,99.87)"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelwritestr"
        },
        "parameters": {
            "text": "(num row, num column, str value [, num rowchar, num colchar])"
        },
        "shortdescription": {
            "text": "Write the string value to a cell of the active sheet of the currently open Excel workbook"
        },
        "description": {
            "text": "Writes string value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelwritestr(5,1,\"My String\")"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelrangewritenum"
        },
        "parameters": {
            "text": "(str rangename, num row, num column, num value)"
        },
        "shortdescription": {
            "text": "Write the numeric value to a cell of the specified range of the currently open Excel workbook"
        },
        "description": {
            "text": "Writes a numeric value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelwritenum(\"MyRange\",5,1,99.87)"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelrangewritestr"
        },
        "parameters": {
            "text": "(str rangename, num row, num column, str value)"
        },
        "shortdescription": {
            "text": "Write the string value to a cell of the specified range of the currently open Excel workbook"
        },
        "description": {
            "text": "Writes string value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelwritestr(\"MyRange\",5,1,\"My String\")"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdnew"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdnew()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdopen"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdopen()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdsaveas"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdsaveas()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdexit"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdexit()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdcompile"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdcompile()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmddelete"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "description": {
            "text": "For developer use. Use destroyobject(). High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmddelete(model().subnodes[4]))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdloadtree"
        },
        "parameters": {
            "text": "(obj desttree, str filename [, num nobuild])"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdloadtree(node(\"MAIN:/project/model/2\"),\"c:/mytree.t\"))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdsavetree"
        },
        "parameters": {
            "text": "(obj tree, str filename)"
        },
        "shortdescription": {
            "text": "Save a Tree by name"
        },
        "description": {
            "text": "Save a Tree by name High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdsavetree(node(\"MAIN:/project/library/1\"),\"c:\\\\mytree.t\"))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdloadsession"
        },
        "parameters": {
            "text": "(str filename)"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdloadsession(\"c:/mysession.fss\")"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdsavesession"
        },
        "parameters": {
            "text": "(str filename)"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdsavesession(\"c:/mysession.fss\")"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cmdloadbyextension"
        },
        "parameters": {
            "text": "(str filename, num silent)"
        },
        "description": {
            "text": "For developer use.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "cmdloadbyextension(\"c:/mysession.fss\",0)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "undos"
        },
        "parameters": {
            "text": "(num off/on)"
        },
        "description": {
            "text": "This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "undos(1);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "consoleexecutefs"
        },
        "parameters": {
            "text": "(HWND input, HWND output)"
        },
        "description": {
            "text": "For developer use. High-level development commands not typically intended for end users."
        },
        "example": {},
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "executefsfile"
        },
        "parameters": {
            "text": "(str filename, num direct)"
        },
        "description": {
            "text": "For developer use. Executes Flexscript code in a file. The specified file is loaded and its content is executed. The contents of the file are assumed to be valid Flexscript code. If direct is 0, then FlexSim's program directory will be concatenated onto the front of filename, otherwise filename will remain as it is. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "executefsfile(\"c:/myscript.fs\",1)"
        },
        "gr": {
            "text": "30"
        }
    },
    {
        "name": {
            "text": "maintenance"
        },
        "parameters": {
            "text": "(num command[, num state, str strparam])"
        },
        "description": {
            "text": "For developer use. Set a maintenance switch. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "maintenance(0)"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "runprogram"
        },
        "parameters": {
            "text": "(str commandline)"
        },
        "shortdescription": {
            "text": "Run an external program"
        },
        "description": {
            "text": "Run an external program. This command will issue a command to the operating system. The commandline may contain full program arguments. A return value > 31 means success. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "runprogram(\"c:/myprogram.exe\")"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rundocument"
        },
        "parameters": {
            "text": "(str command, str path+filename)"
        },
        "shortdescription": {
            "text": "Open a file using the default application for the file type"
        },
        "description": {
            "text": "Opens a file using the default application used for opening files with the specified extension on your computer. The available commands are: edit, explore, find, open, and print. A return value > 32 means success.  Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "rundocument(\"open\",\"C:/myfile.doc\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "runexpertfit"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "Deprecated, returns 0. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "runexpertfit()"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setmessageloopsleep"
        },
        "parameters": {
            "text": "(num interval, num sleeptime)"
        },
        "description": {
            "text": "For developer use. Set a sleep time for each cycle of the message loop to decrease cpu load. Use carefully because a large value can make FlexSim unresponsive to user input. Every interval milliseconds, FlexSim will pause for a period of sleeptime milliseconds. This command may help certain laptops that tend to overheat due to excessive cpu usage. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "setmessageloopsleep(1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "searchname"
        },
        "parameters": {
            "text": "(obj startnode, str searchname)"
        },
        "description": {
            "text": "For developer use. Search for a name match under startnode. Results appear in the output console. The search is case-sensitive. Returns the total number of matches found. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "searchname(main(),\"FixedResource\")"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "searchdata_n"
        },
        "parameters": {
            "text": "(obj startnode, num val)"
        },
        "description": {
            "text": "For developer use. Search for a number data match under startnode. Only number data nodes are searched. Results appear on the output console. Returns the total number of matches found. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "searchdata_n(main(),25)"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "searchdata_s"
        },
        "parameters": {
            "text": "(obj startnode, str string [, num replication])"
        },
        "description": {
            "text": "For developer use. Search for a string data match under startnode. Results appear in the output console. This function will recognize substrings and report which nodes contain them, and how many. The search is case-sensitive. Replication is currently not used. Returns the total number of matches found. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "searchdata_s(main(),\"glVertex()\",1)"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "replacename"
        },
        "parameters": {
            "text": "(obj startnode, str searchname, str replacement)"
        },
        "description": {
            "text": "For developer use. Replace all node names found to be a match with searchname that fall under startnode. This function requires an exact match and will not recognize substrings. Returns the total number of matches found. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "replacename(main(),\"jack\",\"john\")"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "replacedata_n"
        },
        "parameters": {
            "text": "(obj startnode, num value, num replacement)"
        },
        "description": {
            "text": "For developer use. Search/Replace number data matched under startnode. Only number data nodes are searched. Returns the total number of matches found. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "replacedata_n(main(),25,42)"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "replacedata_s"
        },
        "parameters": {
            "text": "(obj startnode, str string, str replacement[, num replication])"
        },
        "description": {
            "text": "For developer use. Search for a string data match under startnode and replace with the replacement string. Results appear in the output console. This function will recognize and replace substrings. The search is case-sensitive. Replication is currently not used. See searchdata_s(). Returns the total number of matches found. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "replacedata_s(main(),\"jack\",\"john\")"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "fillwithatts"
        },
        "parameters": {
            "text": "(obj object, num attgroup)"
        },
        "description": {
            "text": "For developer use. Fill an object with attribute from an attribute group.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "fillwithatts(so(),1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "graphtohistogram"
        },
        "parameters": {
            "text": "(obj graph, obj histogram, num start, num end, num res, num xyformat)"
        },
        "description": {
            "text": "For developer use. Generate histogram data from a list of values. This command will generate a histogram inside the node histogram based on the occurrence table given by graph. Mainly used internally by objects. The starting value of the histogram is specified as start. The ending value of the histogram is specified as end. The number of buckets in the histogram is specified as res. If xyformat is 0, it assumes that the graph is a y format occurrence table. If xyformat is 1, it assumed the graph is an xy format occurrence table. Similar to makehisto(). Refer to makehisto() for more information on these similarities. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "graphtohistogram(so(),so().next,1,10,5,0)"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resetstats"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Reset all object statistics without performing a full model reset. It is typically used internally by the experiment manager. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "resetstats()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resetexperiment"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Reset the experiment without performing a full model reset. It is typically used internally by the experiment manager. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "resetexperiment()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fastspline"
        },
        "parameters": {
            "text": "(obj spline, num perc [0-1])"
        },
        "description": {
            "text": "For developer use. Get a spline mapping from a cached spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will use the precalculated values for the spline object given in spline. The parameter perc is the position along the spline of interest. The precalculated values are evaluated when the fastsplineall() or fastsplineupdate() commands are used. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "fastspline(splinestartnode,1)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fastsplineupdate"
        },
        "parameters": {
            "text": "(obj spline, num res)"
        },
        "description": {
            "text": "For developer use. Cache a spline's shape to increase it's speed. The geometry for all splines in the model are re-evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands whenever calling fastspline(). Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "fastsplineupdate(so(),20)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fastsplineall"
        },
        "parameters": {
            "text": "(obj starttree {model}, num res)"
        },
        "description": {
            "text": "For developer use. Cache all splines at once. The geometry for all splines in the model are evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinery(), splinery(), splinery(), splinelength(), splineposobject() commands whenever calling fastspline(). Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "fastsplineall(model(),20)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dynamicsplineall"
        },
        "parameters": {
            "text": "(node starttree)"
        },
        "description": {
            "text": "For developer use. Un-cache all splines for objects under starttree. Any splines in the model become editable or \"unlocked\". Spline rendering becomes slower in editable mode. In editable mode, splines can be edited dynamically.  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "dynamicsplineall(model())"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "spline"
        },
        "parameters": {
            "text": "(obj spline, num perc)"
        },
        "description": {
            "text": "For developer use. Calculate spline mapping and set the current spline parameters using the spline object spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will not set the precalculated values for the spline object given in spline, as in fastspline().The parameter perc is the position along the spline of interest. This command does not lock precalculated values as when the fastsplineall() or fastsplineupdate() commands are used. A spline can be defined as any chain of objects that are connected from output ports to input ports. Pass the first object in the output port to input port chain as parameter 1. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "spline(splinestartobject,0.6)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "splinex"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will give the position on the spline at the parameter p given  in the last call to spline().  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinex()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "spliney"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will give the position on the spline at the parameter p given  in the last call to spline().  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "spliney()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "splinez"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will give the position on the spline at the parameter p given  in the last call to spline().  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinez()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "splinerx"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given  in the last call to spline(). Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinerx()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "splinery"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given  in the last call to spline().  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinery()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "splinerz"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given  in the last call to spline().  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinerz()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "splinelength"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Current spline parameter. This will return the length of the current spline.  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinelength()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "splineposobject"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "description": {
            "text": "For developer use. Position object according to current spline parameters.  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splineposobject(current)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "splinedraw"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "description": {
            "text": "For developer use. Draw a line along a spline based on the current spline geometry as calculate by the spline(). Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinedraw()"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "splinedrawextrusion"
        },
        "parameters": {
            "text": "(obj object, num step, num wide, num high, num top, num side)"
        },
        "description": {
            "text": "For developer use. Draw a spline based on the current spline geometry as calculate by the spline() with a rectangular extrusion. Using parameters of spline object. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "splinedrawextrusion(current,20,1,2,1,1)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "travelto"
        },
        "parameters": {
            "text": "(obj object, obj spline, num x, num y, num z, num vmax, num acc, num dec)"
        },
        "shortdescription": {
            "text": "Deprecated, use kinematics"
        },
        "description": {
            "text": "This command is deprecated. Use kinematics instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "travelto(traveler,NULL,100,100,0,5,1,6)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "traveltoupdate"
        },
        "parameters": {
            "text": "(obj object [, obj spline])"
        },
        "shortdescription": {
            "text": "Deprecated, use kinematics"
        },
        "description": {
            "text": "This command is deprecated. Use kinematics instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "traveltoupdate(current)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "tracemaskevents"
        },
        "parameters": {
            "text": "(num mask)"
        },
        "description": {
            "text": "For developer use. Set a 32 bit trace mask: Sum of Math.pow(2,N1)+Math.pow(2,N2)... where Nx are the event numbers to be reported in the trace.  See View|Trace Debugger... High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "tracemaskevents(listsum(Math.pow(2,1),Math.pow(2,2),Math.pow(2,3)))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "tracemaskobject"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "description": {
            "text": "For developer use. Set an object to be included in the event reporting in the trace debugger.  See View|Trace Debugger... High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "tracemaskobject(Model.find(\"Processor3\"))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "tracemasktime"
        },
        "parameters": {
            "text": "(num start, num end)"
        },
        "description": {
            "text": "For developer use. Define a start and end time for event reporting in the trace debugger.   See View|Trace Debugger... High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "tracemasktime(100,200)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "statsenablemask"
        },
        "parameters": {
            "text": "(num mask)"
        },
        "description": {
            "text": "For developer use. Enable or disable aspects of stats collection. Set a 32 bit enable mask: Sum of flags. Bits: 0 = State; 1 = Flow; 2 = Inside Ports.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "statsenablemask(add(1,2))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "uselisteners"
        },
        "parameters": {
            "text": "(num mask)"
        },
        "description": {
            "text": "Enable or disable listening. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "uselisteners(1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "outputtreecontent"
        },
        "parameters": {
            "text": "(node containernode, str path+filename)"
        },
        "shortdescription": {
            "text": "Writes the data of all nodes in the tree under containernode to a text file"
        },
        "description": {
            "text": "Writes the data of all nodes in the tree under containernode to a text file on disk. If file does not exist, it will be created. For more functionality, use menu option: Stats | Model Documentation. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "outputtreecontent(model(),\"C:/MyModelDocumentation.txt\")"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dataplot"
        },
        "parameters": {
            "text": "(obj tree, num type, num action, num x, num y, num z)"
        },
        "description": {
            "text": "For developer use. This command lets you create, reset or add data to a histogram, x/y chart, or a data series. The first three parameters define the associated node in the tree as well as the operation to do. The last three parameters, x,y and z, define the appropriate data for the operation. The first parameter should be the main node in the tree that holds the graph/histo data. The second parameter should be either 1, 2, or 3, and defines the type of data that the node holds. 1 means graphx data. For this data type the node contains a list of sub-nodes, and each sub-node contains a number that is a unique point in a data series. 2 means graphxy. For this data type, the node again contains a list of sub-nodes but this time the sub-nodes are paired together as x/y pairs. Nodes ranked 1 and 2 hold the x and y values for one data point, nodes 3 and 4 hold x and y values for the next data point, etc. A type parameter of 3 means histo data. Here the node holds data associated with a histogram.  The action parameter should be either 1, 2, or 3, and defines the action that you want to do. 1 means a create operation. This is only needed for histogram type data, as it needs to set up the node's sub-tree structure. To create a histogram plot, pass the minimum value for the histogram as the x parameter, the maximum value of the histogram as the y value, and the number of divisions, or buckets, as the z parameter. An action parameter value of 2 means you want to reset the data. This will clear the content of the node for graphx or graphxy data, and will reset the histogram values for histogram data. An action parameter value of 3 means you want to add a data point. For graphx and histo data, pass the data point as the x parameter. For graphxy data, pass the as the x and y paramters. In summary: Type: 1-graphx/2-graphxy/3-histo. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "dataplot(stats_contentgraph(model.find(\"Processor2\")),2,3,8.6,5,0); This adds a point to Processor2's content graph for time 8.6 and content 5. This example is only for demonstration purposes. You should never need to do this since the Processor automatically maintains its content graph."
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "distcutoff"
        },
        "parameters": {
            "text": "(num radius)"
        },
        "shortdescription": {
            "text": "Sets a globally applied cutoff radius for object drawing"
        },
        "description": {
            "text": "Sets a globally applied cutoff radius (from the viewpoint) for object drawing. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "discutoff(10)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "suspenddraw"
        },
        "parameters": {
            "text": "(num bitmask)"
        },
        "description": {
            "text": "For developer use. Bit mask. Disables draw in window types. Bits: 0 - TREE; 1 - PLANAR; 2 - SPATIAL High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "suspenddraw(1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "installpackage"
        },
        "parameters": {
            "text": "(str path+filename)"
        },
        "shortdescription": {
            "text": "Deprecated, use user libraries"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/CustomLibraries/CustomLibraries.html",
                "text": "user libraries"
            }
        },
        "example": {
            "text": "installpackage(\"C:/mypak.fpk\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "license"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the current license type"
        },
        "description": {
            "text": "Get the current license type High-level development commands not typically intended for end users."
        },
        "example": {},
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "licenseactivation"
        },
        "parameters": {
            "text": "(num operation[, str buffer, var p1, node callback])"
        },
        "description": {
            "text": "For developer use. Do various licensing operations. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "licenseactivation(LA_SET_ACTIVATION_SERVER_PARAMS,\"@localhost\",0);"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "familycreate"
        },
        "parameters": {
            "text": "(obj familycontainer, str name)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "example": {
            "text": "familycreate(item,\"family1\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "familydelete"
        },
        "parameters": {
            "text": "(obj familycontainer, str name)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "example": {
            "text": "familydelete(item,\"family1\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "familymember"
        },
        "parameters": {
            "text": "(obj familycontainer, str name, num index)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "example": {
            "text": "familymember(item,\"family1\",2)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "familymemberqty"
        },
        "parameters": {
            "text": "(obj familycontainer, str name)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "example": {
            "text": "familymemberqty(item,\"family1\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "familymemberadd"
        },
        "parameters": {
            "text": "(obj familycontainer, str name, obj member)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "example": {
            "text": "familymemberadd(item,\"family1\",item.subnodes[1])"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "familymemberdel"
        },
        "parameters": {
            "text": "(obj familycontainer, str name, obj member)"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "example": {
            "text": "familymemberdel(item,\"family1\",item.subnodes[2])"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getsystemmetric"
        },
        "parameters": {
            "text": "(num metric[, HWND win])"
        },
        "description": {
            "text": "For developer use. Returns system screen metrics. These values for metric return the following values (if not specified, values are in logical units): Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "getsystemmetric(1)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "setticker"
        },
        "parameters": {
            "text": "(node thenode[, num tickspersecond])"
        },
        "description": {
            "text": "For developer use. Set the ticker script node. If tickspersecond is specified, the code will be executed that many times per second, otherwise the code associated with the node will be executed at each iteration of the windows event loop. The node must be toggled FlexScript or C++. No model events are created in association with the ticker node execution. To turn off ticker execution, use setticker(0). High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "setticker(so())"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "realtime"
        },
        "parameters": {
            "text": "([num timecode = 0])"
        },
        "shortdescription": {
            "text": "Gets the real clock time"
        },
        "description": {
            "text": "Returns the real clock time in a variety of formats based on the timecode:  Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "string curdatetime = realtime(12);"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {
            "text": "num/str"
        }
    },
    {
        "name": {
            "text": "recover"
        },
        "parameters": {
            "text": "(num phase)"
        },
        "shortdescription": {
            "text": "Load recovery files"
        },
        "description": {
            "text": "Load recovery files. phase: 1 or 2 High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "recover(1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "changedisplay"
        },
        "parameters": {
            "text": "(num width, num height, num depth, num fullscreen, num test)"
        },
        "shortdescription": {
            "text": "Change resolution"
        },
        "description": {
            "text": "Change resolution High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "changedisplay(1024,768,0,0,0)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setcurrent"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setitem"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setport"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "current"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "This command is deprecated. This should not be used as a special command with the setcurrent command anymore. Instead, declare a treenode variable type as current, then use current in your code as any other variable type. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode current = model().subnodes[3];"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num/node"
        }
    },
    {
        "name": {
            "text": "item"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "This command is deprecated. This should not be used as a special command with the setitem command anymore. Instead, declare a treenode variable type as item, then use item in your code as any other variable type. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode item = model().subnodes[3];"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num/node"
        }
    },
    {
        "name": {
            "text": "port"
        },
        "parameters": {
            "text": "<no parentheses>"
        },
        "description": {
            "text": "This command is deprecated. This should not be used as a special command with the setport command anymore. Instead, declare an int variable type as port, then use port in your code as any other variable type. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int port = param(3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num/node"
        }
    },
    {
        "name": {
            "text": "executefsnode"
        },
        "parameters": {
            "text": "(node thenode, node c[, node i, node/num/str eventdata, int nobuild])"
        },
        "shortdescription": {
            "text": "Execute a node as Flexscript"
        },
        "description": {
            "text": "Dynamically execute a node as Flexscript. If the node is not already Flexscript, the nobuild parameter should be 0. Used to parse string data into Flexscript to execute, such as from a global table or label. The c and i parameters can be accessed in the function as c and i. The eventdata parameter can be accessed as eventdata if it is a string or as eventcode (an integer) if it is a number. If eventdata is a node, it can be accessed using tonode(eventdata) in the function. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "executefsnode(current.labels[\"myFunc\"],NULL,NULL,NULL,0)"
        },
        "gr": {
            "text": "7"
        }
    },
    {
        "name": {
            "text": "relloc"
        },
        "parameters": {
            "text": "(obj object, obj containerobj, num coordinate)"
        },
        "shortdescription": {
            "text": "Deprecated, use Vec3.project()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Vec3"
            },
            "MethodRef": {
                "class": "Vec3",
                "text": "project"
            }
        },
        "example": {
            "text": "double x = relloc(current,model(),1);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "localarray"
        },
        "parameters": {
            "text": "(num qty[, num datatype])"
        },
        "shortdescription": {
            "text": "Deprecated, use Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "example": {
            "text": "localarray(1,4)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "local"
        },
        "parameters": {
            "text": "(num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use local variables"
        },
        "description": {
            "text": "This command is deprecated. Use local variables like treenode, int, double, string instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "setnodenum(local(1),4);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "fscheckall"
        },
        "parameters": {
            "text": "(node startingnode)"
        },
        "description": {
            "text": "For developer use. This command checks for errors in all flexscript nodes under and including the specified startingnode and outputs the results to the compiler console if it finds atleast one error. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "fscheckall(main());"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stringpart"
        },
        "parameters": {
            "text": "(str string, num start, num length)"
        },
        "shortdescription": {
            "text": "Deprecated, use string.substr()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "MethodRef": {
                "class": "string",
                "text": "substr"
            }
        },
        "example": {
            "text": "stringpart(\"Hello\",2,3) returns the sub string \"llo\"."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "comparetrees"
        },
        "parameters": {
            "text": "(obj tree1, obj tree2)"
        },
        "description": {
            "text": "For developer use. Test trees for equality. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "comparetrees(node(\"MAIN:/project/model/1\"),node(\"MAIN:/project/model/2\"))"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "module"
        },
        "parameters": {
            "text": "(num type, node libnode)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Use the DLL functionality provided with version 4 instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "module(MOD_UNLOAD,main.find(\"project/exec/dll/1\"))"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "particleset"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Used to set values on a \"particle\" object, which is no longer supported. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "showgraphicinfo"
        },
        "parameters": {
            "text": "(num showhide, str filename)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stick"
        },
        "parameters": {
            "text": "(num stickno, num command [, HWND/num win, var/num p])"
        },
        "description": {
            "text": "For developer use. This command queries the joystick or controller state or sets functionality for a joystick or controller.\n\t High-level development commands not typically intended for end users.",
            "b": [
                {
                    "text": "stickno"
                },
                {
                    "text": "command"
                }
            ]
        },
        "example": {
            "text": "stick(1, STICK_JOY_YPOS); This gets the y position of the joystick id 1"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "switch"
        },
        "parameters": {
            "text": "(num value)"
        },
        "description": {
            "text": "Execute one of several possible cases, based on value  Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "int msgcase = msgparam(1);"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "case"
        },
        "parameters": {
            "text": "value:"
        },
        "description": {
            "text": "One case in a switch statement {}  Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "case 5: { msg(\"case statement\",\"\"); }"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "default"
        },
        "parameters": {
            "text": ":"
        },
        "description": {
            "text": "The default case in a switch statement {}  Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "default: { msg(\"case statement\",\"\"); }"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "break"
        },
        "parameters": {},
        "description": {
            "text": "Break out of a loop or the case of a switch statement {}  Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "break;"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "for"
        },
        "parameters": {
            "text": "(initalstatement; whiletrueexpression ; countstatement)"
        },
        "description": {
            "text": "Perform a number of loops. The initialstatement will be executed once before starting the loop. The whiletrueexpression will be evaluated before executing each loop and the loop will stop as soon as this expression is true. The countstatement is executed at the end of each loop and usually increments a counter. Refer to the help manual under Writing Logic in FlexSim for more information. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "for(int i = 1; i <= 5; i++)"
        },
        "gr": {
            "text": "3"
        }
    },
    {
        "name": {
            "text": "system_gli"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "system_sli"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_cli"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_gld"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "system_sld"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_cld"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_gls"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "system_sls"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_cls"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_gln"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "system_sln"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_cln"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_glia"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "system_slia"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_clia"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_glda"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "system_slda"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_clda"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_glsa"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "system_slsa"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_clsa"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_glna"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "system_slna"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "system_clna"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "msgparam"
        },
        "parameters": {
            "text": "(num param)"
        },
        "shortdescription": {
            "text": "Within an OnMessage trigger, get the value of a message parameter"
        },
        "description": {
            "text": "Returns a parameter passed to with the  Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "message"
            }
        },
        "example": {
            "text": "int msgtype = msgparam(1);"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "msgsendingobject"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Within an OnMessage trigger, get a reference to the object sending the message"
        },
        "description": {
            "text": "Returns a reference to the object that sent the message as defined in the  Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "message"
            }
        },
        "example": {
            "text": "treenode sender = msgsendingobject;"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "stringreturn"
        },
        "parameters": {
            "text": "(str returnstring, ptr callpoint)"
        },
        "description": {
            "text": "This command is deprecated. You can simply return strings from C++ user commands with the return statement.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "C++: stringreturn(result, callpoint); return 0;"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "makearray"
        },
        "parameters": {
            "text": "(num qty)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "MethodRef": {
                "class": "Array",
                "text": "Array"
            }
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "fillarray"
        },
        "parameters": {
            "text": "(array thearray, num/treenode/string val1[, num/treenode/string val2, ...])"
        },
        "shortdescription": {
            "text": "Deprecated, use the Array class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "arraysize"
        },
        "parameters": {
            "text": "(var array)"
        },
        "shortdescription": {
            "text": "Deprecated, use array.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Array"
            },
            "PropertyRef": {
                "class": "Array",
                "text": "length"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "system_ms"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        }
    },
    {
        "name": {
            "text": "system_cls"
        },
        "parameters": {},
        "description": {
            "text": "System Command. Do not use."
        },
        "example": {},
        "gr": {
            "text": "0"
        }
    },
    {
        "name": {
            "text": "addkinematic"
        },
        "parameters": {
            "text": "(node infonode, num x, num y, num z, num targetspeed, num acc, num dec, num startspeed, num endspeed, num starttime, num type )"
        },
        "shortdescription": {
            "text": "Adds one kinematic operation to a set of kinematics"
        },
        "description": {
            "text": "Adds one kinematic operation to a set of kinematics. For more information, refer to the user manual documentation on kinematics. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "addkinematic(current.labels[\"kinematics\"], 1, 0, 0,  5,0,0,   0,0,  time(), KINEMATIC_TRAVEL);"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "assertlabel"
        },
        "parameters": {
            "text": "(obj object, str labelname, num datatype)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.labels.assert()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labels"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "addlabel"
        },
        "parameters": {
            "text": "(obj object, str labelname [, num/str value])"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "treenode"
                },
                {
                    "text": "treenode"
                }
            ],
            "PropertyRef": {
                "class": "treenode",
                "text": "labels"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "addsphere"
        },
        "parameters": {
            "text": "(obj object, num x, num y, num z, num radius)"
        },
        "description": {
            "text": "For developer use. Adds a collision sphere with the specified radius to the specified object at location x, y, z relative to the object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "addsphere(Processor1, 2, -1.25, .75, 1);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "applyalleditstonodes"
        },
        "parameters": {
            "text": "([obj view])"
        },
        "description": {
            "text": "For developer use. Applies all view edits. This is done before a compile or save. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "applyalleditstonodes"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "applyeditstonode"
        },
        "parameters": {
            "text": "(obj view, obj editednode)"
        },
        "description": {
            "text": "For developer use. Applies view changes to a node. This is usually only needed for a table view, and is essentially the same as mouse-clicking off of the table's currently active cell. This is the opposite of applytoedits. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "applyeditstonode(ownerview(c), current)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "applytoedits"
        },
        "parameters": {
            "text": "(obj view, obj editednode)"
        },
        "description": {
            "text": "For developer use. Applies programmatic changes to a node if that node has been selected in a view. This is usually only needed for a table view. This is the opposite of applyeditstonode(). Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "applytoedits(ownerview(c), current)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "calculateconfidence"
        },
        "parameters": {
            "text": "(num stddev, num nrofdatapoints, num confidence)"
        },
        "description": {
            "text": "For developer use. Calculates the confidence interval for the given standard deviation and number of data points. The return value is the distance on one side of the interval from the sample mean. This uses the t distribution to calculate the confidence interval. Confidence values must be either 90, 95, or 99. This is used in the experimenter to calculate the confidence intervals for the mean of performance measures for each scenario. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "calculateconfidence(5.82, nrofsamples, 90)"
        },
        "gr": {
            "text": "18"
        }
    },
    {
        "name": {
            "text": "cellrc"
        },
        "parameters": {
            "text": "(obj object, num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.cell()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "cell"
            }
        },
        "example": {
            "text": "double val = getnodenum(cellrc(reftable(\"MyTable\"),2,3));"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "changeconveyorspeed"
        },
        "parameters": {
            "text": "(obj conveyor, num newspeed )"
        },
        "shortdescription": {
            "text": "Deprecated, use conveyor.targetSpeed"
        },
        "description": {
            "text": "This command is deprecated. Legacy conveyors are no longer supported. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Conveyor"
            },
            "PropertyRef": {
                "class": "Conveyor",
                "text": "targetSpeed"
            }
        },
        "example": {
            "text": "changeconveyorspeed(current, 4);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "changepersonvisuals"
        },
        "parameters": {
            "text": "(treenode person, string category, num/string index [, Array color])"
        },
        "shortdescription": {
            "text": "Change the person's visuals (Head, Hair, Skin Texture, Clothes)"
        },
        "description": {
            "text": "Change the person's visuals (Head, Hair, Skin Texture, Clothes). This can be done dynamically during the model run. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "changepersonvisuals(person, \"Shirt\", \"Scrubs\", Color.red)"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "changetask"
        },
        "parameters": {
            "text": "(obj tasksequence, num taskrank, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] )"
        },
        "shortdescription": {
            "text": "Dynamically change a task in tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. This command lets you change a task dynamically. For example, if you want an operator to travel to object B instead of traveling to object A, but a task has already been created for him to travel to object A, you can use this command to change the task.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "changetask(gettasksequence(current, 0), 4, TASKTYPE_TRAVEL, current.centerObjects[5]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "checkforexistingview"
        },
        "parameters": {
            "text": "(obj view [, num mode])"
        },
        "description": {
            "text": "For developer use. Checks to see if there are any currently active windows that match this window.  Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "checkforexistingview(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "clearglobaltable"
        },
        "parameters": {
            "text": "(str/node/num table)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "clientclose"
        },
        "parameters": {
            "text": "(num socket)"
        },
        "shortdescription": {
            "text": "Closes the client socket"
        },
        "description": {
            "text": "This command closes the client socket specified as socket.  Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "clientclose(1);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "clientconnect"
        },
        "parameters": {
            "text": "(num socket, str hostname, num port)"
        },
        "shortdescription": {
            "text": "Attempts to connect the client socket"
        },
        "description": {
            "text": "This command attempts to connect the socket specified by socket to a server running on the machine called hostname, which is listening on the port specified.  Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "clientconnect(1,\"localhost\",1880);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "clientcreate"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Creates a new client socket with TCP/IP protocol"
        },
        "description": {
            "text": "This command creates a new client socket that is set to communicate using the TCP/IP protocol. FlexSim can create up to fifty client sockets at one time.   Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "int socknum = clientcreate();"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "clientreceive"
        },
        "parameters": {
            "text": "(num socket, str buffer, num buffersize, num noblock[1/0])"
        },
        "shortdescription": {
            "text": "Receives data sent to the socket"
        },
        "description": {
            "text": "This command receives data that has been sent to the socket specified as socket. The value of socket is the number that is returned by clientcreate().  This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "c++: int bytes = clientreceive(1,Buf,15,0);"
        },
        "gr": {
            "text": "19"
        }
    },
    {
        "name": {
            "text": "clientsend"
        },
        "parameters": {
            "text": "(num socket, str message[, num charlength])"
        },
        "shortdescription": {
            "text": "Sends a message across the socket"
        },
        "description": {
            "text": "This command sends a message across the socket specified as socket. The value passed as socket is the number returned by clientcreate(). The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "clientsend(1,\"REQ:service\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "closenodeedge"
        },
        "parameters": {
            "text": "(obj object, num edgenum)"
        },
        "shortdescription": {
            "text": "Closes entry to the networknode's edge"
        },
        "description": {
            "text": "Closes entry to the networknode's specified edge number.   Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "closenodeedge(current.centerObjects[1], 3);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "cm"
        },
        "parameters": {
            "text": "(num centimeters)"
        },
        "shortdescription": {
            "text": "Gets the number of meters in the number of centimeters"
        },
        "description": {
            "text": "Returns the number of meters in the specified number of centimeters. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "cm(3)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "codetotemplatetext"
        },
        "parameters": {
            "text": "(node codeobject, node toobjecttext [, num firstcommentonly])"
        },
        "description": {
            "text": "For developer use. Converts C++/Flexscript code into template code. Sets the text in toobjecttext to the template code of the code found in codeobject's text Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {},
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "coloraqua"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "aqua"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorarray"
        },
        "parameters": {
            "text": "(obj object, num colornumber)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": {
                "class": "Object",
                "text": "color"
            },
            "MethodRef": {
                "class": "Color",
                "text": "byNumber"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorblack"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "black"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorblue"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "blue"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorbrown"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "brown"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorgray"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "gray"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorgreen"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "green"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorlightblue"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "lightBlue"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorlime"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "lime"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colororange"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "orange"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorpink"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "pink"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorpurple"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "purple"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorrandom"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": {
                "class": "Object",
                "text": "color"
            },
            "MethodRef": {
                "class": "Color",
                "text": "random"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorred"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "red"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorrgb"
        },
        "parameters": {
            "text": "(obj object, num red, num green, num blue)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "color"
            },
            "MethodRef": {
                "class": "Color",
                "text": "Color"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorsilver"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "silver"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorteal"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "teal"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "colorwhite"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "white"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "coloryellow"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Object",
                    "text": "color"
                },
                {
                    "class": "Color",
                    "text": "yellow"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "containerentry"
        },
        "parameters": {
            "text": "(obj container, obj item)"
        },
        "shortdescription": {
            "text": "Deprecated, use tracked variables or Process Flow"
        },
        "description": {
            "text": "This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "containerexit"
        },
        "parameters": {
            "text": "(obj container, obj item)"
        },
        "shortdescription": {
            "text": "Deprecated, use tracked variables or Process Flow"
        },
        "description": {
            "text": "This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "contentobj"
        },
        "parameters": {
            "text": "(obj container)"
        },
        "shortdescription": {
            "text": "Deprected, use Object.attrs.length"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "attrs"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "contextdragconnection"
        },
        "parameters": {
            "text": "(obj fromobject, obj toobject, str/num characterpressed)"
        },
        "shortdescription": {
            "text": "Creates an A or S connection between objects"
        },
        "description": {
            "text": "This command mimicks holding the specified letter down on the keyboard, clicking on the fromobject and then dragging to the toobject with the mouse.  Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "contextdragconnection(model().subnodes[5], model().subnodes3], \"A\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "copylabel"
        },
        "parameters": {
            "text": "(obj highlightedobject, str/obj labelnamenode)"
        },
        "description": {
            "text": "For developer use. Copies the label with the name specified by parameter 2 or stored on the string data of the node in parameter 2 from the parameter 1 object to all selected objects in the model. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copylabel(selectedobject(ownerview(c)), c.find(\">labelname\"))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "copylabels"
        },
        "parameters": {
            "text": "(obj highlightedobj[, num mode])"
        },
        "description": {
            "text": "For developer use. Copies all labels from the parameter 1 object to all selected objects in the model.  By default it clears out all existing \n\tlabels and replaces them with the labels on the parameter 1 object.  If mode is 1, existing labels will be overwritten by any incoming labels with the same name,\n\tbut will otherwise be left alone. If mode is 2, only labels that the selected objects do not already have will be copied. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copylabels(selectedobject(ownerview(c)), c.find(\">labelname\"))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "copyvariable"
        },
        "parameters": {
            "text": "(obj fromobject, obj variablenamenode)"
        },
        "description": {
            "text": "For developer use. Copies the variable with the name held by the node in parameter 2 from the parameter 1 object to all selected objects in the model. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copyvariable(selectedobject(ownerview(c)), c.find(\">variablename\"))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "copyvariables"
        },
        "parameters": {
            "text": "(obj fromobject)"
        },
        "description": {
            "text": "For developer use. Copies all variables from the parameter 1 object to all selected objects in the model. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copyvariables(selectedobject(ownerview(c)))"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "copyvisuals"
        },
        "parameters": {
            "text": "(obj highlightedobj [, num copyshapefactorsalso])"
        },
        "description": {
            "text": "For developer use. Copies all visuals from the parameter 1 object to all selected objects in the model. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copyvisuals(selectedobject(ownerview(c)),1)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createcoordinatedtasksequence"
        },
        "parameters": {
            "text": "(obj dispatcher)"
        },
        "shortdescription": {
            "text": "Create a new, empty coordinated task sequence"
        },
        "description": {
            "text": "Create a new, empty coordinated task sequence on the specified Dispatcher. Must be followed at some point by dispatchcoordinatedtasksequence. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "createcoordinatedtasksequence(current.centerObjects[1]);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "createcoupling"
        },
        "parameters": {
            "text": "(node container1, node container2)"
        },
        "shortdescription": {
            "text": "Creates a pointer coupling inside the two container nodes"
        },
        "description": {
            "text": "Creates a pointer coupling inside the two container nodes Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "createcoupling(current.labels[\"items\"], item.labels[\"owner\"]);"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "removeallcouplingreferences"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Recursively breaks couplings from a node and its subnodes in the tree"
        },
        "description": {
            "text": "Recursively breaks couplings from a node and its subnodes in the tree. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "removeallcouplingreferences(current);"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createdelaytask"
        },
        "parameters": {
            "text": "(obj dispatcher, num delaytime, num state, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createdelaytask(current.centerObjects[1], 25, SCHEDULED_DOWN, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createemptytasksequence"
        },
        "parameters": {
            "text": "(obj dispatcher, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Creates a new task sequence in the dispatcher's queue and returns a reference to it"
        },
        "description": {
            "text": "This command is deprecated. Use TaskSequence.create() instead. Creates an empty task sequence in the dispatcher's tasksequence queue. Tasks should be added to this task sequence once it is created, using the inserttask command.  The task sequence is dispatched with the dispatchtasksequence command. This command returns a pointer to the newly created tasksequence node. The possible values for preempting are:  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createemptytasksequence(current.centerObjects[1], 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "createloadtask"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj destination, obj flowitem, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createsendmessagetask"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj receiver, num priority, num preempting , num param1, num param2, num param3)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createsendmessagetask(current, current.centerObjects[1],1,PREEMPT_NOT,5, 6, 7);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createstandardtask"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj origin, obj destination, obj flowitem, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createstandardtaskcurrent.centerObjects[1],current.centerObjects[2],current.centerObjects[3],item, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createtravelloadtask"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj destination, obj flowitem, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createtravelloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createtraveltask"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj destination, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createtraveltask( current.centerObjects[1], current.centerObjects[2], 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createtraveltolocandwaittask"
        },
        "parameters": {
            "text": "(obj taskexecuter, num relativeloc, num x, num y, num z, num endspeed, num state, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createtraveltolocandwaittask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, STATE_IDLE, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createtraveltoloctask"
        },
        "parameters": {
            "text": "(obj dispatcher, num relativeloc, num x, num y, num z, num endspeed, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createtraveltoloctask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createtravelunloadtask"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj destination, obj flowitem, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createtravelunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createunloadtask"
        },
        "parameters": {
            "text": "(obj dispatcher, obj destination, obj flowitem, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createuserlibrary"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. This command creates a new user library Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "createuserlibrary();"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createwaittask"
        },
        "parameters": {
            "text": "(obj taskexecuter, num state, num priority, num preempting)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "createwaittask(current.centerObjects[1], STATE_IDLE, 1, PREEMPT_NOT);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "days"
        },
        "parameters": {
            "text": "(num days)"
        },
        "shortdescription": {
            "text": "Gets the number of model time units in the give number of days"
        },
        "description": {
            "text": "Return the number of model time units in the given number of days. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "days(1)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbexportnode"
        },
        "parameters": {
            "text": "(obj tablenode, num startrow, num startcol, num numrows, num numcols)"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbexportnode(so(),1,1,4,5);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbexporttable"
        },
        "parameters": {
            "text": "(str tablename, num startrow, num startcol, num numrows, num numcols)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbexportnode(\"MyTable4\",2,2,3,3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbgettablenum"
        },
        "parameters": {
            "text": "(num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "double val = dbgettablenum(2,3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbgettablestr"
        },
        "parameters": {
            "text": "(num row, num col)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "string val = dbgettablenum(2,3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "dbimportnode"
        },
        "parameters": {
            "text": "(obj tablenode, num startrow, num startcol, num numrows, num numcols)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbimportnode(so(),1,1,4,5);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbimporttable"
        },
        "parameters": {
            "text": "(str tablename, num startrow, num startcol, num numrows, num numcols)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbimportnode(\"MyTable4\",2,2,3,3);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbsettablenum"
        },
        "parameters": {
            "text": "(num row, num col, num val)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbsettablenum(2,3,56.5);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dbsettablestr"
        },
        "parameters": {
            "text": "(num row, num col, str val)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbgettablestr(1,1,\"John\");"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "dbviewtable"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbviewtable();"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "deactivatekinematics"
        },
        "parameters": {
            "text": "(node kinematicsnode)"
        },
        "shortdescription": {
            "text": "Causes kinematics to do nothing when updatekinematics() is called"
        },
        "description": {
            "text": "Causes kinematics to do nothing when updatekinematics() is subsequently called instead of updating the object. Call this in the reset trigger of an object to free the object to move it around in the ortho view. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "deactivatekinematics(current.labels[\"kinLabel\"]);"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "defaultdragconnection"
        },
        "parameters": {
            "text": "(obj fromobject, obj toobject, char characterpressed)"
        },
        "shortdescription": {
            "text": "Deprecated, use contextdragconnection()"
        },
        "description": {
            "text": "This command is deprecated. Use contextdragconnection() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "defaultdragconnection(model().subnodes[count], model().subnodes[2], 'A')"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "deleteselected"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Deletes all selected objects in the model. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "deleteselected()"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dellabel"
        },
        "parameters": {
            "text": "(obj object, str/num label)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.labels[\"LabelName\"].destroy()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labels"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "destroy"
            }
        },
        "example": {
            "text": "dellabel(current,\"MyLabel\")"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "deselectall"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Deselects all objects in the model. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "deselectall()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dispatchcoordinatedtasksequence"
        },
        "parameters": {
            "text": "(obj tasksequence)"
        },
        "shortdescription": {
            "text": "Dispatches the coordinated task sequence"
        },
        "description": {
            "text": "Dispatches the specified coordinated task sequence. Must be called after calling createcoordinatedtasksequence(). Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "dispatchcoordinatedtasksequence(newts);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dispatchtasksequence"
        },
        "parameters": {
            "text": "(obj tasksequence)"
        },
        "shortdescription": {
            "text": "Dispatches the task sequence, initiating handling/execution of the task sequence"
        },
        "description": {
            "text": "This command is deprecated. Use TaskSequence.dispatch() \n  instead. Tells the dispatcher/taskexecuter in which the specified task sequence resides to handle that task sequence. Users should create the task sequence using the createemptytasksequence command, then add tasks using the inserttask command, then cause the task sequence to be handled using the dispatchtasksequence command. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "dispatchtasksequence(newtasksequence);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "distancetotravel"
        },
        "parameters": {
            "text": "(obj traveler, obj destination)"
        },
        "shortdescription": {
            "text": "Gets the distance a traveler would need to travel to reach destination"
        },
        "description": {
            "text": "Returns the distance that a traveler (Operator, Transporter, etc) would need to travel in order to reach the given destination. If the object is connected to a network, then it will return the travel distance along the network. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "distancetotravel(current.centerObjects[1], current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "drawcolumn"
        },
        "parameters": {
            "text": "(num x, num y, num z, num totalsides, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat])"
        },
        "shortdescription": {
            "text": "Draws a 3D column"
        },
        "description": {
            "text": "A very versatile command that can draw anything with multiple sides and a height such as a square, a pentagon, a pyramid, and even a cylinder (if the total number of sides is large).  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawcolumn(0,0,0, 5 ,4,2, 6 ,0,0,0, 175,175,175, .6, 3, 5,1);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawcube"
        },
        "parameters": {
            "text": "(num x, num y, num z, num sx, num sy, num sz, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat])"
        },
        "shortdescription": {
            "text": "Draws a 3D cube"
        },
        "description": {
            "text": "Draws a cube with its origin (bottom left corner) positioned at x, y, z. Its length, width, and height is defined by sx, sy, and sz respectively. It can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawcube(0,0,0, 5,3,2, 0,0,0, 175,175,175, .6, 3, 1,1);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawcylinder"
        },
        "parameters": {
            "text": "(num x, num y, num z, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex])"
        },
        "shortdescription": {
            "text": "Draws a 3D clyinder"
        },
        "description": {
            "text": "This command draws a hollow cylinder with its origin (center of base) positioned at x, y, z.  The cylinder's dimensions are defined by a base radius, a top radius and a height.  Use the drawdisk() command to cap off the ends of the cylinder. The cylinder can be rotated in degrees about the x, y, and  z axis by rx, ry, and rz.  The color is defined by the red, green, blue color components ranging from 0 to 255.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawcylinder(0,0,0, 1,1, 5, 0,0,0, 175,175,175, .6,3);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawdisk"
        },
        "parameters": {
            "text": "(num x, num y, num z, num innerradius, num outerradius, num startangle, num sweepangle, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex])"
        },
        "shortdescription": {
            "text": "Draw a 3D disk"
        },
        "description": {
            "text": "Draws a flat planar disk with its origin (center of radius) positioned at x, y, z. The disk's dimensions are defined by an inner radius, an outer radius, a start angle, and a sweep angle. A sweep angle of 360 makes a complete circle. An innerradius greater than 0 will create a disk with a hole in the middle of it. The disk can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawdisk(0,0,0, .5,2, 90,270, 0,0,0, 175,175,175, 1,3);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawrectangle"
        },
        "parameters": {
            "text": "(num x, num y, num z, num length, num width, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat])"
        },
        "shortdescription": {
            "text": "Draw a 3D rectangle"
        },
        "description": {
            "text": "Draws a flat planar rectangle with a user-defined location, length, width, rotation, and color. The drawquad() command must be used to draw a rectangle that is not parallel with the x, y or z plane.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawrectangle(0,0,0, 2,3, 0,0,0, 175,175,175, .6, 1, 2,3);"
        },
        "gr": {
            "text": "2"
        }
    },
    {
        "name": {
            "text": "drawsphere"
        },
        "parameters": {
            "text": "(num x, num y, num z, num radius, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex])"
        },
        "shortdescription": {
            "text": "Draw a 3D sphere"
        },
        "description": {
            "text": "Draws a hollow sphere with its origin (center of sphere) positioned at x, y, z. The sphere's dimensions are defined by a single radius. The color is defined by the red, green, blue color components ranging from 0 to 255.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawsphere(0,0,0,5,175,175,175,1,3);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawspheres"
        },
        "parameters": {
            "text": "(obj object, obj view)"
        },
        "description": {
            "text": "For developer use. Draws the collision spheres assigned to the specified object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "drawspheres(current,view);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawtomodelscale"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the current drawing scale of the model"
        },
        "description": {
            "text": "Returns the current drawing scale to that of the model after a previous call of drawtoobjectscale(). This is equivalent to the following OpenGL function: Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawtomodelscale(current);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "drawtoobjectscale"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Scale subsequent draw commands to the size of the object"
        },
        "description": {
            "text": "This command causes all subsequent draw commands to be scaled according to the size of the object. This is equivalent to the following OpenGL function: Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawtoobjectscale(current);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dropuserlibraryobject"
        },
        "parameters": {
            "text": "(obj object [, obj ontoobject, num x, num y, num z, obj ontoview, num viewalreadyset])"
        },
        "description": {
            "text": "For developer use. Drops the specified object as if it were dragged from a user library into the model. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "dropuserlibraryobject(node(\"MAIN:/project/userlibrary/1/1\"));"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "duplicateselected"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Duplicates all selected objects in the model. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "duplicateselected()"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "enablecode"
        },
        "parameters": {
            "text": "(node codenode [, num mode])"
        },
        "shortdescription": {
            "text": "Makes the node a code node"
        },
        "description": {
            "text": "If mode is 0, then the node is set to FlexScript unless the node is already a code node and then it leaves the node as is. If mode is non-zero, then it forces a given toggle: 1-FlexScript, 2-C++, 3-DLL. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "enablecode(getvarnode(current, \"exittrigger\"));"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "endwaittask"
        },
        "parameters": {
            "text": "(obj taskexecuter)"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow or freeoperators()"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead or the freeoperators() command instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "endwaittask(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flipselected"
        },
        "parameters": {
            "text": "(num firstX, num firstY, num secondX, num secondY[, node roottree])"
        },
        "shortdescription": {
            "text": "Flip selected objects across an axis"
        },
        "description": {
            "text": "Flip selected objects across the axis defined by the two passed xy points Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "flipselected(1, 5, 2, 7)"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fpm"
        },
        "parameters": {
            "text": "(num feetperminute)"
        },
        "shortdescription": {
            "text": "Gets the number of model length/time units in the number of feet/minute"
        },
        "description": {
            "text": "Return the number of model length/time units in the specified number of feet/minute. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "fpm(9)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "fps"
        },
        "parameters": {
            "text": "(num feetpersecond)"
        },
        "shortdescription": {
            "text": "Gets the number of model length/time units in the number of feet/minute"
        },
        "description": {
            "text": "Return the number of model length/time units in the specified number of feet/second. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "fps(9)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "filebrowse"
        },
        "parameters": {
            "text": "(str extension, str description, str startpath)"
        },
        "shortdescription": {
            "text": "Opens a file selection dialog"
        },
        "description": {
            "text": "Opens a file selection dialog that allows the user to select the specified file type(s). Different types should be separated by semicolons(;). The dialog's default directory is the path specified. The commands pdir() and cdir() can only be passed as the path parameter in C++. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "string filename = filebrowse(\"*.fsm; *.fsp; *.fsv; *.fss\",\"FlexSim Files\",pdir());"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "firecreateevent"
        },
        "parameters": {
            "text": "(obj object, num x, num y, num z, num iscopy [, num libraryfunctiononly])"
        },
        "description": {
            "text": "For developer use. Fires the creation event of the specified object. x, y, and z are the rz the object was dropped at. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "firevalue of 0 islast(model()),0,0,0, 1);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "freeoperators"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj involved)"
        },
        "shortdescription": {
            "text": "Release all operators connected to taskexecuter that are working on involved"
        },
        "description": {
            "text": "Release all operators connected to the specified dispatcher that are currently working on the involved object. This command should be executed from a trigger when you want to release operator(s) that you have called to a process using the requestoperators command or using a utilize task. The first parameter can be either a dispatcher connected to operator(s) that you want to free, or it can be the operator itself. The second parameter is a key for releasing the appropriate operator(s). If you have called the operator(s) using the requestoperators command, then the second parameter of the freeoperators command should match the third parameter of the requestoperators command. If you have given an operator a utilize task, then the second parameter of the freeoperators command should match the involved1 parameter of the utilize task. You would probably execute this command from a trigger like OnProcessFinish or OnSetupFinish. For more information, refer to the task sequence section of the user manual. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "freeoperators(current.centerObjects[1], item);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ft"
        },
        "parameters": {
            "text": "(num feet)"
        },
        "shortdescription": {
            "text": "Gets the number of model length units in the number of feet"
        },
        "description": {
            "text": "Return the number of model length units in the specified number of feet. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "ft(3)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getallocatedfromkey"
        },
        "parameters": {
            "text": "(obj coordtasksequence, num key)"
        },
        "shortdescription": {
            "text": "Gets a reference to the object allocated for the allocate task for the given key"
        },
        "description": {
            "text": "Returns a reference to the object that has been allocated for the allocate task specified by the given key. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "treenode allocatedobj = getallocatedfromkey(getcoordinatedtasksequence(current.centerObjects[1], 0), mykey);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "getcolorcomponent"
        },
        "parameters": {
            "text": "(obj object, num index)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Use  \n\t\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Color"
                },
                {
                    "text": "Color"
                },
                {
                    "text": "Color"
                },
                {
                    "text": "Color"
                }
            ],
            "PropertyRef": [
                {
                    "class": "Color",
                    "text": "r"
                },
                {
                    "class": "Color",
                    "text": "g"
                },
                {
                    "class": "Color",
                    "text": "b"
                },
                {
                    "class": "Color",
                    "text": "a"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getcoordinatedtasksequence"
        },
        "parameters": {
            "text": "(obj dispatcher, num tasksequencerank)"
        },
        "shortdescription": {
            "text": "Gets a reference to a coordinated task sequence"
        },
        "description": {
            "text": "Returns a reference to the coordinated task sequence that is associated with allocation request with the specified rank in the specified dispatcher's  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "treenode  coordtasksequence = getcoordinatedtasksequence(current.centerObjects[1], 5);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getcreationtime"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the time that a flow item was created"
        },
        "description": {
            "text": "Returns the time that a flowitem was first created. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "time() - getcreationtime(item)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getcurtask"
        },
        "parameters": {
            "text": "(node tasksequence)"
        },
        "shortdescription": {
            "text": "Gets the current task number of tasksequence"
        },
        "description": {
            "text": "Returns the current task number of the task sequence Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "if(getcurtask(ts) > 5)"
        },
        "gr": {
            "text": "24"
        }
    },
    {
        "name": {
            "text": "getdatatype"
        },
        "parameters": {
            "text": "(thing)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.dataType"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "dataType"
            }
        },
        "example": {
            "text": "getdatatype(so())"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getvartype"
        },
        "parameters": {
            "text": "(var)"
        },
        "shortdescription": {
            "text": "Deprecated, use Variant.type"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Variant"
            },
            "PropertyRef": {
                "class": "Variant",
                "text": "type"
            }
        },
        "example": {
            "text": "getvartype(myVar)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getedgedist"
        },
        "parameters": {
            "text": "(obj netnode, num edgenum)"
        },
        "shortdescription": {
            "text": "Gets the distance of the edge of a network node"
        },
        "description": {
            "text": "Returns the distance of the specified edge of the network node. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "getedgedist(current, 1)"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getedgespeedlimit"
        },
        "parameters": {
            "text": "(obj netnode, num edgenum)"
        },
        "shortdescription": {
            "text": "Gets the speed limit of the edge of a network node"
        },
        "description": {
            "text": "Returns the speed limit of the specified edge of the network node. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "getedgespeedlimit(current, 1)"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getentrytime"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the time that a flow item entered the current object it is in"
        },
        "description": {
            "text": "Returns the last entry time of the item (the time the flowitem last entered another object). Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "time() - getentrytime(item)"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "geteventtime"
        },
        "parameters": {
            "text": "(str EventName, num mode[1/2/3])"
        },
        "shortdescription": {
            "text": "Gets a UserEvent's event time"
        },
        "description": {
            "text": "Returns a UserEvent's event time. Mode: 1 - Repeat time intervals, 2 - Exact event time, 3 - Time until event fires Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "double remainingtime = geteventtime(\"myevent\",3);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getframe"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the current Shape Frame being drawn for object"
        },
        "description": {
            "text": "Returns the current 3D shape frame that is being drawn for the object. If the 3D shape assigned to the object was named myshape.3ds, and if two additional 3D shapes with file names myshapeFRAME1.3ds and myshapeFRAME2.3ds resided in the same directory as myshape.3ds, then the two additional files would be loaded into FlexSim automatically at the same time myshape.3ds was loaded, and setting the object's frame from 0 to 1 to 2 would change the object's shape to each of the shapes defined by the three files in order. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "if(getframe(current) == 3)) setframe(current, 5);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getinput"
        },
        "parameters": {
            "text": "(obj involved)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.stats.input.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "stats"
            }
        },
        "example": {
            "text": "double inval = getinput(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getitemtype"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use labels"
        },
        "description": {
            "text": "This command is deprecated. Use labels instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "getitemtype(so())"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getitemvar"
        },
        "parameters": {
            "text": "(obj item, num var)"
        },
        "shortdescription": {
            "text": "Gets the value of a FixedResource variable for the item"
        },
        "description": {
            "text": "This returns the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "getitemvar(current.first, 3)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getitemsendto"
        },
        "parameters": {
            "text": "(obj item)"
        },
        "shortdescription": {
            "text": "Gets the value of the evaluated sendto for the item"
        },
        "description": {
            "text": "This returns the value of the evaluated sendto for the item if it is in a FixedResource and has been released.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "getitemsendto(item)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getitemstate"
        },
        "parameters": {
            "text": "(obj item)"
        },
        "shortdescription": {
            "text": "Gets the FixedResource state of the flowitem"
        },
        "description": {
            "text": "Returns the FixedResource state of the flowitem. This will be one of 3 values:  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "getitemstate(so())"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getiteminvolved"
        },
        "parameters": {
            "text": "(obj item)"
        },
        "shortdescription": {
            "text": "Gets the object reference stored in the FixedResource involved variable for the item"
        },
        "description": {
            "text": "This returns the object reference stored in the FixedResource involved variable for the item.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "getiteminvolved(current.first)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getkinematics"
        },
        "parameters": {
            "text": "(node infonode, num querytype[, num kinematicindex, num updatetime/traveldist])"
        },
        "shortdescription": {
            "text": "Gets information from the specified kinematics operation"
        },
        "description": {
            "text": "Gets information from the specified kinematics operation. For more information, refer to the help documentation on kinematics. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "getkinematics(current.labels[\"kinematics\"], KINEMATIC_ARRIVALTIME, 1, current.size.x);"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getlabel"
        },
        "parameters": {
            "text": "(obj node, str/num label)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labelProperties"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num/str/node"
        }
    },
    {
        "name": {
            "text": "getlabelnum"
        },
        "parameters": {
            "text": "(obj node, str/num label)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labelProperties"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getlabelstr"
        },
        "parameters": {
            "text": "(obj node, str/num label)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labelProperties"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "getlastfiletype"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the type of the last file saved. 1 = Model file 2 = Project file 3 = View file 4 = Session file 0 = Other file Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "if (getlastfiletype()) {pt(\"Known file type\"); pr(); }"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getmodelunit"
        },
        "parameters": {
            "text": "(num querytype)"
        },
        "description": {
            "text": "Returns information about the model's unit settings.\n\t Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "getmodelunit(LENGTH_MULTIPLE)"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num/str/node"
        }
    },
    {
        "name": {
            "text": "getmodelunitnum"
        },
        "parameters": {
            "text": "(num querytype)"
        },
        "description": {
            "text": "This command is deprecated. Use getmodelunit() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getmodelunitstr"
        },
        "parameters": {
            "text": "(num querytype)"
        },
        "description": {
            "text": "This command is deprecated. Use getmodelunit() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "convert"
        },
        "parameters": {
            "text": "(var value, var from, var to)"
        },
        "returntype": {
            "text": "var"
        },
        "shortdescription": {
            "text": "Converts the given value (a time) from one time format to another"
        },
        "description": {
            "text": "Converts the given value (a time) from one format to another. The from and to arguments only accept the following values:\n\t Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "convert(42308, XL_DATETIME, MODEL_TIME) // converts an Excel date to a valid model time"
        },
        "gr": {
            "text": "26"
        }
    },
    {
        "name": {
            "text": "getnroftasks"
        },
        "parameters": {
            "text": "(obj tasksequence)"
        },
        "shortdescription": {
            "text": "Gets the number of uncompleted tasks in the tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the number of tasks that still need to be completed in the tasksequence (including the current task). Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "if(getnroftasks(mytasksequence) > 5)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getobjectimageindex"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use."
        },
        "description": {
            "text": "This command is deprecated. Do not use. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "getobjectimageindex(item);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getobjectshapeindex"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the index number of the 3D shape assigned to object"
        },
        "description": {
            "text": "Returns the index number of the 3D shape currently assigned to the object. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "getobjectshapeindex(item);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getobjecttextureindex"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Gets the index number of the image assigned as the texture for the object's 3D shape"
        },
        "description": {
            "text": "Returns the index number of the bmp or jpeg image currently assigned as the default texture for the object's 3D shape. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "getobjecttextureindex(item);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getoutput"
        },
        "parameters": {
            "text": "(obj involved)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.stats.output.value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "stats"
            }
        },
        "example": {
            "text": "double outval = getoutput(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getparentwindow"
        },
        "parameters": {
            "text": "(HWND window)"
        },
        "description": {
            "text": "For developer use. Returns the parent window of the specified window. Use windowfromnode as a parameter to pass into this function. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {},
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getpreempt"
        },
        "parameters": {
            "text": "(node tasksequence)"
        },
        "shortdescription": {
            "text": "Gets the preempt value of the tasksequence"
        },
        "description": {
            "text": "Returns the preempt value of the tasksequence.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "if(getpreempt(mytasksequence) == PREEMPT_ONLY)"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getpriority"
        },
        "parameters": {
            "text": "(node tasksequence)"
        },
        "shortdescription": {
            "text": "Gets the priority value of the tasksequence"
        },
        "description": {
            "text": "Returns the priority value of the tasksequence. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "if(getpriority(mytasksequence) > 5)"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getstatenum"
        },
        "parameters": {
            "text": "(obj object [, num stateprofilenr])"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.stats.state().value"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "stats"
            }
        },
        "example": {
            "text": "getstatenum(current);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getstatestr"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.stats.state().valueString"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "stats"
            }
        },
        "example": {
            "text": "getstatestr(current);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "gettablecell"
        },
        "parameters": {
            "text": "(str/node/num table, num row, num column)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.cell"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "cell"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "executetablecell"
        },
        "parameters": {
            "text": "(str/node/num table, num row, num column)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.executeCell() or the Table's [] operators"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Table"
                },
                {
                    "text": "Table"
                }
            ],
            "MethodRef": {
                "class": "Table",
                "text": "executeCell"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "gettablecols"
        },
        "parameters": {
            "text": "(str/node/num table)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.numCols"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "PropertyRef": {
                "class": "Table",
                "text": "numCols"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettablerows"
        },
        "parameters": {
            "text": "(str/node/num table)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.numRows"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "PropertyRef": {
                "class": "Table",
                "text": "numRows"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettaskinvolved"
        },
        "parameters": {
            "text": "(obj tasksequence, num taskrank, num involvednum)"
        },
        "shortdescription": {
            "text": "Gets a reference to the first or second involved object of the task of the tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task classes instead. Returns a reference to either the first or second involved object for the nth ranked task of the specified task sequence.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode  loaditem = getinvolved(gettasksequence(current.centerObjects[1], 0), 2, 1);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "gettasksequence"
        },
        "parameters": {
            "text": "(obj dispatcher, num tasksequencerank)"
        },
        "shortdescription": {
            "text": "Gets a reference to a task sequence"
        },
        "description": {
            "text": "This command is deprecated. Use the Dispatcher and TaskExecuter class methods and properties instead. Returns a reference to the task sequence that has the specified rank in the specified dispatcher's task sequence queue. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode  mytasksequence = gettasksequence(current.centerObjects[1], 5);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "gettasksequencequeue"
        },
        "parameters": {
            "text": "(obj dispatcher)"
        },
        "shortdescription": {
            "text": "Gets a reference to the dispatcher's tasksequence queue"
        },
        "description": {
            "text": "This command is deprecated. Use the Dispatcher class properties instead. Returns a reference to the specified dispatcher's task sequence queue. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode  tsqueue = gettasksequencequeue(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "gettasktype"
        },
        "parameters": {
            "text": "(obj tasksequence, num taskrank)"
        },
        "shortdescription": {
            "text": "Gets the task type of the task at rank taskrank of tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the task type for the nth ranked task of the specified task sequence.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "if(gettasktype(gettasksequence(current.centerObjects[1], 0), 2) == TASKTYPE_LOAD)..."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettaskstate"
        },
        "parameters": {
            "text": "(obj tasksequence, num taskrank)"
        },
        "shortdescription": {
            "text": "Gets the state of the task at rank taskrank of tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Gets the state of the task at rank taskrank of tasksequence. The following are task states: Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "if(gettaskstate(gettasksequence(current.centerObjects[1], 0), 2) == TASKSTATE_ACTIVE)..."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettaskvariable"
        },
        "parameters": {
            "text": "(obj tasksequence, num taskrank, num variablenum)"
        },
        "shortdescription": {
            "text": "Gets the tasksequence variable for the task at rank taskrank of tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns a reference to one of the four task variables for the nth ranked task of the specified task sequence.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "double myvar = gettaskvariable(gettasksequence(current.centerObjects[1], 0), 2, 1);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettotalnroftasks"
        },
        "parameters": {
            "text": "(obj tasksequence)"
        },
        "shortdescription": {
            "text": "Gets the total number of tasks that were ever added to the tasksequence"
        },
        "description": {
            "text": "This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the total number of tasks that were ever added to the tasksequence. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "gettotalnroftasks(mytasksequence)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettreedrawposition"
        },
        "parameters": {
            "text": "(node destnode, node roottree)"
        },
        "description": {
            "text": "For developer use. High-level development commands not typically intended for end users."
        },
        "example": {},
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "assertattribute"
        },
        "parameters": {
            "text": "(obj object, str attributename, num datatype)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.attrs.assert()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "attrs"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "assertvariable"
        },
        "parameters": {
            "text": "(obj object, str variablename, num datatype)"
        },
        "shortdescription": {
            "text": "Gets a reference to variable variablename of object, creates the variable if it does not exist"
        },
        "description": {
            "text": "This command returns a reference to a variable with the given name. If the variable does not exist, one is created with the defined data type. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "treenode newvar = assertvariable(Model.find(\"/Processor1\"),\"MyVariable\", DATATYPE_NUMBER);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getvarnode"
        },
        "parameters": {
            "text": "(obj object, str/num var)"
        },
        "shortdescription": {
            "text": "Gets a node reference to an object's variable"
        },
        "description": {
            "text": "Returns a reference to the specified variable's node in the specified object. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "treenode schedule = getvarnode(current,\"schedule\");"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "getvarnum"
        },
        "parameters": {
            "text": "(obj object, str/num var)"
        },
        "shortdescription": {
            "text": "Gets the value of an object's numeric variable"
        },
        "description": {
            "text": "Returns the numeric value stored in the specified variable of the specified object. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "double speed = getvarnum(current,\"speed\");"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getvarstr"
        },
        "parameters": {
            "text": "(obj object, str/num var)"
        },
        "shortdescription": {
            "text": "Gets the value of an object's string variable"
        },
        "description": {
            "text": "Returns the string data stored on the specified variable of the specified object. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "pt(getvarstr(model().subnodes[2],\"creationtrigger\"));"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "groupconnectfrom"
        },
        "parameters": {
            "text": "(obj object, str character)"
        },
        "description": {
            "text": "For developer use. Connects the object passed in as param(1) to every selected object in the model using the letter passed in as param(2).  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "groupconnectfrom(selectedobject(ownerview(c)),\"A\");"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "groupconnectto"
        },
        "parameters": {
            "text": "(obj object, str character)"
        },
        "description": {
            "text": "For developer use. Connects every selected object in the model to the object passed in as param(1) using the letter passed in as param(2).  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "groupconnectto(selectedobject(ownerview(c)),\"A\");"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "groupcopyconnections"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "description": {
            "text": "For developer use. Copies the connections on the object passed in as param(1) onto every selected object in the model.  High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "groupcopyconnections(selectedobject(ownerview(c)));"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "groupsetnames"
        },
        "parameters": {
            "text": "(node namenode, num startnum, num append)"
        },
        "description": {
            "text": "For developer use. Sets the names of all of the selected objects in the model to the string data on namenode. If append is 1, then a number is appended to the end of each name, starting at startnum and increasing by 1 for each object. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "groupsetnames(\"WeldStation\",1,1);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "hideprogressbar"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Hides the progress bar Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "hideprogressbar();"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "highestconnection"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the highest numbered server connection index"
        },
        "description": {
            "text": "Returns the highest numbered server connection index. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "int highconn = highestconnection();"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "holditem"
        },
        "parameters": {
            "text": "(obj item)"
        },
        "shortdescription": {
            "text": "Holds the item if it has already been released"
        },
        "description": {
            "text": "Holds the specified item if it has already been released. This in effect \"unreleases\" the item so that it will not leave. This only applies if the item is in a FixedResource and it has already been released and has not been \"allocated\" to a downstream object (it is not waiting for a transport). Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "holditem(item)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "hours"
        },
        "parameters": {
            "text": "(num hours)"
        },
        "shortdescription": {
            "text": "Gets the number of model time units in the number of hours"
        },
        "description": {
            "text": "Return the number of model time units in the given number of hours. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "hours(1)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "in"
        },
        "parameters": {
            "text": "(num inches)"
        },
        "shortdescription": {
            "text": "Gets the number of model length units in the number of inches"
        },
        "description": {
            "text": "Return the number of model length units in the specified number of inches. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "in(8)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "initkinematics"
        },
        "parameters": {
            "text": "(node infonode, obj/num object/x[, num flags/y, num z, num rx, num ry, num rz, num flags, num unused])"
        },
        "shortdescription": {
            "text": "Initializes a kinematic operation"
        },
        "description": {
            "text": "Initialize a kinematic operation.  Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "initkinematics(current.labels[\"kinematics\"], current)"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "inputopen"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Returns 1 if the object's input is open, 0 otherwise"
        },
        "description": {
            "text": "Returns 1 if the object's input is open, 0 otherwise.  The closeinput(), stopinput(), openinput(), and resumeinput() commands affect the return value of this command. The commands like closeip() and closeallip() do NOT affect the return value. Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "if(inputopen(current)) current.input.close;"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "insertallocatetask"
        },
        "parameters": {
            "text": "(obj tasksequence, obj dispatcher, num priority, num preempt [, num noblock] )"
        },
        "shortdescription": {
            "text": "Inserts an allocate task into the coordinated task sequence"
        },
        "description": {
            "text": "Inserts an Allocate Task into the specified coordinated task sequence. By default the allocation task is a blocking task, but if noblock is 1, then the allocation does not block further execution of the task sequence. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "insertallocatetask(newts, current.centerObjects[2], 0, 0);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "insertcopy"
        },
        "parameters": {
            "text": "(obj originalobject, obj containerobject)"
        },
        "shortdescription": {
            "text": "Creates a copy of the flowitem and moves it into the container object"
        },
        "description": {
            "text": "Creates a copy of the flowitem and moves it into the container object, causing the OnReceive event of the container to execute.  Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "insertcopy(item, current);"
        },
        "gr": {
            "text": "30"
        }
    },
    {
        "name": {
            "text": "insertdeallocatetask"
        },
        "parameters": {
            "text": "(obj tasksequence, num allocationkey [, num noblock] )"
        },
        "shortdescription": {
            "text": "Inserts a deallocate task into the coordinated task sequence"
        },
        "description": {
            "text": "Inserts a Deallocate Task into the specified coordinated task sequence to deallocate the resource specified by allocationkey. By default this task will block, but if noblock is 1, it will not block. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "insertdeallocatetask(newts,forkkey);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "insertproxytask"
        },
        "parameters": {
            "text": "(obj tasksequence, num executerkey, num type [, num/obj involved1, num/obj involved2 , num var1, num var2, num var3, num var4])"
        },
        "shortdescription": {
            "text": "Inserts a proxy task into the coordinated task sequence"
        },
        "description": {
            "text": "Inserts a proxy task into the specified coordinated task sequence. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "insertproxytask(newts, dispatchkey, TASKTYPE_TRAVEL, current.centerObjects[1], NULL,0,0,0,0);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "insertsynctask"
        },
        "parameters": {
            "text": "(obj tasksequence, num taskkey)"
        },
        "shortdescription": {
            "text": "Inserts a sync task into the coordinated task sequence"
        },
        "description": {
            "text": "Insert a Sync Task for the specified task in a coordinated task sequence. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "insertsynctask(newts, travelkey);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "inserttask"
        },
        "parameters": {
            "text": "(obj tasksequence, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] )"
        },
        "shortdescription": {
            "text": "Inserts a new task to the task sequence"
        },
        "description": {
            "text": "This command is deprecated. Use TaskSequence.addTask() instead. Inserts a task into the specified tasksequence of the specified type. Depending on the task type, the remaining parameters will have a different meaning. Refer to the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/TaskSequences/QuickReference/QuickReference.html",
                "text": "Task Type Quick Reference"
            }
        },
        "example": {
            "text": "inserttask(ts, TASKTYPE_TRAVEL, current, NULL);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "isclasstype"
        },
        "parameters": {
            "text": "(obj object, num/str classtype)"
        },
        "shortdescription": {
            "text": "Compares the object to classtype, returns 1 for yes, 0 for no"
        },
        "description": {
            "text": "Returns whether or not the object is of the given classtype. 1 means yes, 0 means no. Possible classtype parameters are: Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "isclasstype(current, CLASSTYPE_DISPATCHER);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "iskeydown"
        },
        "parameters": {
            "text": "([num key])"
        },
        "description": {
            "text": "For developer use. Returns 1 if the specified keyboard key is being held down. If the first parameter is not passed, then the function will return 1 if any key is being held down. Otherwise, the function returns 0. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "iskeydown(74)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "isprojectcompiled"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns 1 if the project has been compiled. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "isprojectcompiled()"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "keyedclick"
        },
        "parameters": {
            "text": "(obj object, num key[, obj view])"
        },
        "description": {
            "text": "For developer use. Executes the object's keyed click functionality (X, C, V) Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "keyedclick(model().last, 88)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "label"
        },
        "parameters": {
            "text": "(obj object, str/num label)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.labels[]"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labels"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "listboxrefresh"
        },
        "parameters": {
            "text": "(obj listbox)"
        },
        "shortdescription": {
            "text": "Refreshes the contents of a listbox"
        },
        "description": {
            "text": "Refreshes the contents of a listbox. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "listboxrefresh(c.find(\"../Collision Members\"))"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "loadselectedfromfile"
        },
        "parameters": {
            "text": "(obj highlightedobj)"
        },
        "description": {
            "text": "For developer use. Loads previously saved tree file into the highlighted object. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "loadselectedfromfile(selectedobject(ownerview(c)))"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "loadstate"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Loads the state of the project.  If savestate() has been executed, then this command must be executed before you can run the model again. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "loadstate();"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "loaduserlibrary"
        },
        "parameters": {
            "text": "(str libfile [, obj libraryview, num reloadmedia, num changeitemcurrent, num autoinstall])"
        },
        "description": {
            "text": "For developer use. Loads a library from the path specified in libfile. If reloadmedia is true, autoloadallmedia() will be called\n\tafter loading the library. If autoinstall is true, the library's load and new model autoinstall objects will be added to the model. The \n\tlibraryview and changeitemcurrent parameters are no longer used. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "loaduserlibrary(cdir() + \"libraries/mylib.fsl\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "makeactive"
        },
        "parameters": {
            "text": "(obj viewwindow)"
        },
        "description": {
            "text": "For developer use. Makes the specified window active. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "makeactive(ownerview(c));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "makehisto"
        },
        "parameters": {
            "text": "(obj datalist, obj histocontainer, num nrofbuckets)"
        },
        "description": {
            "text": "For developer use. Builds a histogram structure from the data list and puts it in the destination container node with the given number of buckets. This is similar to graphtohistogram() except that this command creates a more complete structure. To illustrate the operator instead., view a FlexSim object's attribute tree. The makehisto command will create the entire stucture of object>stats/staytime/staytimehisto, whereas graphtohistogram will only populate object>stats/staytime/staytimehisto/data. makehisto also assumes a standard, y data series structure, meaning each sub-node of datalist is its own data point (they are not paired as x/y values). Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "makehisto(c.find(\"@>objectfocus+\"), c.find(\">histogram\"), 20)"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "memberadd"
        },
        "parameters": {
            "text": "(obj childobject, str parentname, num type)"
        },
        "description": {
            "text": "If type = 1, then the childobject is added as a member to a Time Table named \"parentname\". Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "memberadd(model().subnodes[2],\"TimeTable1\",1)"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "memberremove"
        },
        "parameters": {
            "text": "(obj childobject, str parentname, num type)"
        },
        "description": {
            "text": "If type = 1, then the childobject is removed as a member from a Time Table named \"parentname\". Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "memberremove(model().subnodes[2],\"TimeTable1\",1)"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "memberremoveall"
        },
        "parameters": {
            "text": "(str parentname, num type)"
        },
        "description": {
            "text": "If type = 1, then all members are removed from a Time Table named \"parentname\". Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "memberremoveall(\"TimeTable1\",1)"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mph"
        },
        "parameters": {
            "text": "(num milesperhour)"
        },
        "shortdescription": {
            "text": "Gets the number of model length/time units in the number of miles/hour"
        },
        "description": {
            "text": "Return the number of model length/time units in the specified number of miles/hour. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "mph(9)"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "minutes"
        },
        "parameters": {
            "text": "(num minutes)"
        },
        "shortdescription": {
            "text": "Gets the number of model time units in the number of minutes"
        },
        "description": {
            "text": "Return the number of model time units in the given number of minutes. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "minutes(1);"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "moveselectedintohighlighted"
        },
        "parameters": {
            "text": "(obj highlightedobj [, node selectedcontainer])"
        },
        "description": {
            "text": "For developer use. Moves all selected objects in the model into the highlighted object. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "moveselectedintohighlighted(selectedobject(ownerview(c)))"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "movetasksequence"
        },
        "parameters": {
            "text": "(obj tasksequence, obj dispatcher)"
        },
        "shortdescription": {
            "text": "Moves tasksequence into the dispatcher's tasksequence queue"
        },
        "description": {
            "text": "This command is deprecated. Use TaskSequence.move() instead. Moves the specified tasksequence into the specified dispatcher's tasksequence queue.   Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "movetasksequence(tasksequence, current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "nametomodelpath"
        },
        "parameters": {
            "text": "(obj node, obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.getPath()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "MethodRef": {
                "class": "treenode",
                "text": "getPath"
            }
        },
        "example": {
            "text": "nametomodelpath(curlistnode, current);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ntravelto"
        },
        "parameters": {
            "text": "(obj traveler, obj spline, num endx, num endy, num endz, num vmax, num acc, num dec, num startspeed, num endspeed)"
        },
        "shortdescription": {
            "text": "Deprecated, use kinematics instead"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/Kinematics/Kinematics.html",
                "text": "kinematics"
            }
        },
        "example": {
            "text": "ntravelto(current, 0, 5, 8, 0, 1, 1, 1, 0, 1)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "ntraveltoupdate"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use kinematics instead"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/Kinematics/Kinematics.html",
                "text": "kinematics"
            }
        },
        "example": {
            "text": "ntraveltoupdate(current)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "numconnections"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the number of server connections that are currently active"
        },
        "description": {
            "text": "Returns the number of server connections that are currently active. Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "int numconns = numconnections();"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "opennodeedge"
        },
        "parameters": {
            "text": "(obj networknode, num edgenum)"
        },
        "shortdescription": {
            "text": "Opens entry to the networknode's edge"
        },
        "description": {
            "text": "Opens entry to the networknode's specified edge number. Closing a node's edge with closenodeedge() blocks travelers from entry onto the edge. This command opens the edge up again. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "opennodeedge(current.centerObjects[1], 3);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "optimizenetwork"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Causes the model's network navigator to regenerate its distance table"
        },
        "description": {
            "text": "Causes the model's network navigator to regenerate its distance table.  Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "optimizenetwork()"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "outputopen"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Returns 1 if the object's output is open, 0 otherwise"
        },
        "description": {
            "text": "Returns 1 if the object's output is open, 0 otherwise.  The closeoutput(), stopoutput(), openoutput(), and resumeoutput() commands affect the return value of this command. The commands like closeop() and closeallop() do NOT affect the return value. Commands associated with the port connections of an objects."
        },
        "example": {
            "text": "if(outputopen(current)) current.output.close;"
        },
        "gr": {
            "text": "11"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickoffsetx"
        },
        "parameters": {
            "text": "(obj station, obj item, obj loadingobject)"
        },
        "description": {
            "text": "This command queries the station for an x offset for the loadingobject to travel from its x center in order to load the item.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "int xoffset = pickoffsetx(item.up,item,current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickoffsety"
        },
        "parameters": {
            "text": "(obj station, obj item, obj loadingobject)"
        },
        "description": {
            "text": "This command queries the station for a y offset for the loadingobject to travel from its y center in order to load the item.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "int yoffset = pickoffsety(item.up,item,current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickoffsetz"
        },
        "parameters": {
            "text": "(obj station, obj item, obj loadingobject)"
        },
        "description": {
            "text": "This command queries the station for a z offset for the loadingobject to travel from its z base in order to load the item.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "int zoffset = pickoffsetz(item.up,item,current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pickoptiononselect"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. This command is used by pick list gui controls to modify the combobox text when an option is selected. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "pickoptiononselect(c);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "placeoffsetx"
        },
        "parameters": {
            "text": "(obj station, obj item, obj unloadingobject)"
        },
        "description": {
            "text": "This command queries the station for an x offset for the unloadingobject to travel from its x center in order to unload the item.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "int xoffset = placeoffsetx(current.centerObjects[1],item,current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "placeoffsety"
        },
        "parameters": {
            "text": "(obj station, obj item, obj unloadingobject)"
        },
        "description": {
            "text": "This command queries the station for a y offset for the unloadingobject to travel from its y center in order to unload the item.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "int yoffset = placeoffsety(current.centerObjects[1],item,current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "placeoffsetz"
        },
        "parameters": {
            "text": "(obj station, obj item, obj unloadingobject)"
        },
        "description": {
            "text": "This command queries the station for a z offset for the unloadingobject to travel from its z base in order to unload the item.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "int zoffset = placeoffsetz(current.centerObjects[1],item,current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "popupmenu"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Returns a reference to the view's popup menu as an HMenu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "popupmenu(c)"
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "postmovewindowupdate"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Do not use. High-level development commands not typically intended for end users."
        },
        "example": {},
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "profilekinematics"
        },
        "parameters": {
            "text": "(node infonode, num kinematicindex)"
        },
        "shortdescription": {
            "text": "Prints information about the specified kinematics operation to the output console"
        },
        "description": {
            "text": "Prints information about the specified kinematics operation to the output console. For more information, refer to the help documentation on kinematics. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "printkinematics(current.labels[\"kinematics\"], 0);"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "profileevents"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Prints descriptions of all events currently in the event queue to the output console"
        },
        "description": {
            "text": "Prints to the output console descriptions of all of the events currently waiting in the event queue. The output console must be open to write to it.  To open console, use menus View | Output Console. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "profileevents()"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "profiletasksequence"
        },
        "parameters": {
            "text": "(node tasksequence)"
        },
        "shortdescription": {
            "text": "Prints information on a task sequence to the output console"
        },
        "description": {
            "text": "Prints information on a task sequence to the output console.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "profiletasksequence(gettasksequence(so(), 0));"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "qstudentt"
        },
        "parameters": {
            "text": "(num confidence [0.9/0.95/0.99], num degreesoffreedom)"
        },
        "description": {
            "text": "For developer use. Returns the quantity of the studentt distribution value for the given percent confidence and degrees of freedom. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "qstudentt(0.95, nrofsamples - 1)"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackdrawfilledcell"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level, num x, num y, num z, num sx, num sy, num sz, num red, num green, num blue)"
        },
        "shortdescription": {
            "text": "Draws a box in the rack's given bay and level"
        },
        "description": {
            "text": "Draws a box in the rack's given bay and level. x,y, and z are numbers between 0 and 1 representing the percentage into the cell to start drawing the box. sx, sy, and sz are numbers between 0 and 1 representing the size percentage of the box. Red, green and blue specify the color of the box. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "fglDisable(GL_TEXTURE_2D);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "rackdrawvirtualcontent"
        },
        "parameters": {
            "text": "(obj rack, num bayfillperc, num levelfillperc, num itemdepth, num red, num green, num blue, num virtualonly)"
        },
        "shortdescription": {
            "text": "Draw the rack's virtual content"
        },
        "description": {
            "text": "Draws the rack's \"virtual\" content. This command will usually only be used if you are recycling flowitems using the rackrecycleitem command. When this command is executed, the rack goes through its content table, and draws a box for every flowitem in the rack, at its appropriate bay and level. If virtualonly is 1, then it will only draw a box in spots where a slot is filled, but no flowitem is present (the flowitem has been recycled). Bayfillperc and levelfillperc are values between 0 and 1, and specify the percent of the cell to fill with the drawn box. Item depth is the size each item takes up in the rack. For a floor storage rack, this the z size of the items. For a regular rack, it is the y size of the items. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackdrawvirtualcontent(current, 0.9,0.9,3,  256,0, 0,  1);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "rackgetbaycontent"
        },
        "parameters": {
            "text": "(obj rack, num bay)"
        },
        "shortdescription": {
            "text": "Gets the number of flow items in the bay of the rack"
        },
        "description": {
            "text": "Returns the number of flow items in the specified bay of the rack Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "int numitems = rackgetbaycontent(current, 5);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetbayloc"
        },
        "parameters": {
            "text": "(obj rack, num bay)"
        },
        "shortdescription": {
            "text": "Gets the x location of bay relative to the rack's origin"
        },
        "description": {
            "text": "Returns the x location of the given bay of the rack, relative to the rack's origin. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackgetbayloc(current, 5);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetbayofitem"
        },
        "parameters": {
            "text": "(obj rack, obj item)"
        },
        "shortdescription": {
            "text": "Gets the bay number of the rack that the item is placed in"
        },
        "description": {
            "text": "Returns the bay number of the rack that the item is placed in Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "int baynum = rackgetbayofitem(current, item);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetbaysize"
        },
        "parameters": {
            "text": "(obj rack, num bay)"
        },
        "shortdescription": {
            "text": "Gets the x size of bay of the rack"
        },
        "description": {
            "text": "Returns the x size of the given bay of the rack. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackgetbaysize(current, 5);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetcellcontent"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level)"
        },
        "shortdescription": {
            "text": "Gets the number of flow items in bay and level of the rack"
        },
        "description": {
            "text": "Returns the number of flow items in the specified bay and level of the rack Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "int numitems = rackgetcellcontent(current, 5, 3);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetcellvar"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level, num varnum, node storagenode)"
        },
        "description": {
            "text": "Returns the value stored in a three dimensional table with rows representing the rack's bays,  Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "int typeofcellitems = rackgetcellvar(current, 1,5,3, current.labels[\"storageData\"]);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetitembybaylevel"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level, num itemrank)"
        },
        "shortdescription": {
            "text": "Gets a reference to an item in the bay and level of the rack"
        },
        "description": {
            "text": "Returns a reference to an item in the specified bay and level of the rack.  Itemrank specifies the rank of the item  in that cell. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "treenode theitem = rackgetitembybaylevel(current, 5, 4, 2);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "rackgetitemcellrank"
        },
        "parameters": {
            "text": "(obj rack, obj item)"
        },
        "shortdescription": {
            "text": "Gets the item's rank within the rack's cell"
        },
        "description": {
            "text": "Returns the rank of the item within its given cell in a rack. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "int theRank = rackgetitemcellrank(current, item);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetlevelloc"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level)"
        },
        "shortdescription": {
            "text": "Gets the y or z location of the level relative to the rack's origin"
        },
        "description": {
            "text": "Returns the y or z location of the given level of the rack, relative to the rack's origin.  Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackgetlevelloc(current, 5, 4);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetlevelofitem"
        },
        "parameters": {
            "text": "(obj rack, obj item)"
        },
        "shortdescription": {
            "text": "Gets the level number of the rack that the item is placed in"
        },
        "description": {
            "text": "Returns the level number of the rack that the item is placed in Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "int levelnum = rackgetlevelofitem(current, item);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetlevelsize"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level)"
        },
        "shortdescription": {
            "text": "Gets the y or z size of the level of the rack"
        },
        "description": {
            "text": "Returns the y or z size of the given level of the rack. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackgetlevelsize(current, 5, 4);"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetnrofbays"
        },
        "parameters": {
            "text": "(obj rack)"
        },
        "shortdescription": {
            "text": "Gets the number of bays rack has"
        },
        "description": {
            "text": "Returns the number of bays that the rack has. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "return  duniform(1,rackgetnrofbays(rack));"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackgetnroflevels"
        },
        "parameters": {
            "text": "( obj rack [,num bay ] )"
        },
        "shortdescription": {
            "text": "Gets the number of levels in the bay of the rack"
        },
        "description": {
            "text": "Returns the number of levels in the specified bay of the rack. If no bay parameter is passed into the function, then the nroflevels in the first bay will be returned. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "return  duniform(1,rackgetnroflevels(rack, baynum));"
        },
        "gr": {
            "text": "28"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "rackrecycleitem"
        },
        "parameters": {
            "text": "(obj rack, obj item, num binrank)"
        },
        "shortdescription": {
            "text": "Recycles the flowitem into the flowitem bin"
        },
        "description": {
            "text": "Recycles the flowitem into the flowitem bin specified.  Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackrecycleitem(current, item, 5);"
        },
        "gr": {
            "text": "28"
        }
    },
    {
        "name": {
            "text": "rackrestoreitem"
        },
        "parameters": {
            "text": "(obj rack, num binrank, num bay, num level, num position)"
        },
        "shortdescription": {
            "text": "Restores a flowitem from the flowitem bin into the bay and level"
        },
        "description": {
            "text": "Restores a flowitem from the flowitem bin into the given bay and level. Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "rackrestoreitem(current, 5, 7, 3, 1);"
        },
        "gr": {
            "text": "28"
        }
    },
    {
        "name": {
            "text": "racksetcellcontent"
        },
        "parameters": {
            "text": "(obj rack, num bay, num level, num contentval)"
        },
        "shortdescription": {
            "text": "Sets the virtual content of the rack's cell to contentval"
        },
        "description": {
            "text": "Sets the \"virtual\" content of the rack's cell to the specified value.  Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "racksetcellcontent(current, 5, 3, 2);"
        },
        "gr": {
            "text": "28"
        }
    },
    {
        "name": {
            "text": "racksetcellvar"
        },
        "parameters": {
            "text": "(obj rack,num bay, num level, num varnum, num setvalue, node storagenode)"
        },
        "description": {
            "text": "Sets the  value in a three dimensional table with rows representing the rack's bays,  Commands for accessing and assigning data on Rack objects."
        },
        "example": {
            "text": "racksetcellvar(current, 5, 3, 2, 4.6, current.labels[\"storageData\"]);"
        },
        "gr": {
            "text": "28"
        }
    },
    {
        "name": {
            "text": "rankobj"
        },
        "parameters": {
            "text": "(obj container, num rank)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.attrs[]"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "attrs"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "reassignnetnode"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj networknode)"
        },
        "description": {
            "text": "TaskExecuters using a NetworkNode system are always associated with a specific NetworkNode in the system (red line graphic) which continually changes as they travel around.  This command reassigns the specified taskexecuter to networknode. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "reassignnetnode(current, current.centrObjects[5]);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "receiveitem"
        },
        "parameters": {
            "text": "(obj station [, num port ] )"
        },
        "shortdescription": {
            "text": "Tells the FixedResource to open inputs and receive a flowitem"
        },
        "description": {
            "text": "Tells the FixedResource station to open its inputs and receive a flowitem.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "receiveitem(current)"
        },
        "gr": {
            "text": "29"
        }
    },
    {
        "name": {
            "text": "evaluatepullcriteria"
        },
        "parameters": {
            "text": "(obj fixedresource, obj item, num portnr[, num bypassflags])"
        },
        "shortdescription": {
            "text": "Causes the FixedResource object to re-fire its pull requirement"
        },
        "description": {
            "text": "Tells the FixedResource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. This command returns the value returned by the pull requirement field if the item can be pulled. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "evaluatepullcriteria(current, item, 1); // See also Pull Best Item picklist option"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "pullitem"
        },
        "parameters": {
            "text": "(obj fixedresource, obj item, num portnr[, num bypassflags])"
        },
        "description": {
            "text": "Tells the fixedresource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. If the pull evaluation is true, this command pulls the item immediately. This command returns 1 if the item was successfully pulled and 0 if not. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. You can specify BYPASS_ALL to immediately pull the item regardless of availability. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "pullitem(current, item, 1); // See also Pull Best Item picklist option"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "recycleitem"
        },
        "parameters": {
            "text": "(obj item , num binrank  )"
        },
        "shortdescription": {
            "text": "Recycles the flowitem to the flowitem bin"
        },
        "description": {
            "text": "Recycles the specified flowitem to the flowitem bin. Binrank should be the rank in the flowitem bin to recycle to (texturedcoloredbox = 5, etc.) Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "recycleitem(item, 5);"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "redirectnetworktraveler"
        },
        "parameters": {
            "text": "(obj traveler, obj newdest)"
        },
        "description": {
            "text": "Attempts to change the end destination of the traveler to that of the newdest object. Only works if the traveler is currently on a TASKTYPE_TRAVEL task and is on a travel network. Returns 1 if successful. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "redirectnetworktraveler(traveler, Model.find(\"Processor5\"));"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "redirectpicklists"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Adjusts all picklists of a parameters or properties window that has been redirected. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {},
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "refreshmodelcommands"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "System command. Do not use. High-level development commands not typically intended for end users."
        },
        "example": {},
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "reftable"
        },
        "parameters": {
            "text": "(str/num globaltable)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table(\"GlobalTableName\")"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            }
        },
        "example": {
            "text": "Table table = reftable(\"GlobalTable1\")"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "releaseitem"
        },
        "parameters": {
            "text": "(obj flowitem [, num port ])"
        },
        "shortdescription": {
            "text": "Releases the flowitem from its current object"
        },
        "description": {
            "text": "Releases the specified flowitem. A flowitem is released when it is free to exit the object currently containing it, at which time the Send to Port is evaluated.  This command should only be used if the flowitem is in a BasicFR object and the flowitem has not been released already, or if it is any FixedResource and has been held with holditem().  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "releaseitem(item)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "reordertasks"
        },
        "parameters": {
            "text": "(obj dispatcher)"
        },
        "shortdescription": {
            "text": "Causes the dispatcher to reorder all its task sequences according to its queue strategy"
        },
        "description": {
            "text": "Causes the involved Dispatcher/TaskExecuter to reorder all its task sequences according to its queue strategy. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "reordertasks(c)"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "repositionhighlightededits"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Repositions the edit controls for a tree view's highlighted object. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {},
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "requestdecision"
        },
        "parameters": {
            "text": "(str/node/num object)"
        },
        "description": {
            "text": "Request a decision from a ReinforcementLearning object. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "requestdecision(\"ReinforcementLearning1\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "requestoperators"
        },
        "parameters": {
            "text": "(obj dispatcher, obj station, obj involved, num nrofops, num priority, num preempting)"
        },
        "description": {
            "text": "Request a specified number of operators to come to the station object and work on the involved object until released. The involved object will later need to be passed into the freeoperators() command when releasing the operators. The operator(s) being called must either be the object referenced by dispatcher, or be connected to its output ports.  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "requestoperators(current.centerObjects[1], current, item, 2, 0, PREEMPT_NOT);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "rerankbesttask"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "description": {
            "text": "This command forces the object specified as dispatcher to search through its task sequence queue and put the task sequence with the highest priority in the front of its queue. This will not reorder the other task sequences in the queue. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "rerankbesttask(current);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resetlayer"
        },
        "parameters": {
            "text": "(obj layer)"
        },
        "description": {
            "text": "For developer use. Resets the layer passed. Use resetmodel instead.  Commands for stopping, starting, and managing simulation runs."
        },
        "example": {},
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resetmodel"
        },
        "parameters": {
            "text": "([num buildflexscript])"
        },
        "shortdescription": {
            "text": "Resets the model"
        },
        "description": {
            "text": "Resets the model. Use this command instead of reset(). The parameter specifies whether the engine should build all flexscript functions as well. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "resetmodel()"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resumeobject"
        },
        "parameters": {
            "text": "(obj object [, num id, num stateprofile ] )"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.resume()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "resume"
            }
        },
        "example": {
            "text": "resumeobject(current.centerObjects[1]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resumetransportsin"
        },
        "parameters": {
            "text": "(obj fixedresource [, num saverank])"
        },
        "description": {
            "text": "This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportin command, and notifies those taskexecuters that they can resume their unload operation. The saverank parameter refers to a rank in the tree of a specific saved reference.  If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsin variable. References to specific saved taskexecuters can be referenced by: nroftransportsinnode.subnodes[saverank].value Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "resumetransportsin(current);"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resumetransportsout"
        },
        "parameters": {
            "text": "(obj fixedresource [, num saverank])"
        },
        "description": {
            "text": "This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportout command, and notifies those taskexecuters that they can resume their load operation.The saverank parameter refers to a rank in the tree of a specific saved reference.  If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsout variable. References to specific saved taskexecuters can be referenced by: nroftransportsoutnode.subnodes[saverank].value Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "resumetransportsout(current);"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "rotateselected"
        },
        "parameters": {
            "text": "(double angle, double x, double y[, obj roottree])"
        },
        "description": {
            "text": "Rotates all selected objects in the model around the designated origin x/y location Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "rotateselected(90, 5, 0)"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savebyname"
        },
        "parameters": {
            "text": "(obj tree, str filename)"
        },
        "description": {
            "text": "For developer use. Saves the specified tree node to a file with the given name. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "savebyname(Model.find(\"MyProcessor\"), \"C:\\\\MyProcessor.t\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savefpk"
        },
        "parameters": {
            "text": "(node servicepackhead)"
        },
        "shortdescription": {
            "text": "Deprecated, use user libraries"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/CustomLibraries/CustomLibraries.html",
                "text": "user libraries"
            }
        },
        "example": {
            "text": "savefpk(so());"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savemodelprepare"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Prepares the model to be saved, including reseting, etc. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "savemodelprepare();"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "saveselectedtofile"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Saves all selected objects in the model to a tree file. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "saveselectedtofile()"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savestate"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use.  Saves the state of the project.  Once this command is executed, you can save your project (.fsp), then open in later, compile, execute loadstate(), and run from the previous spot you started from. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "savestate();"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savestoppedtransportin"
        },
        "parameters": {
            "text": "(obj fixedresource, obj taskexecuter)"
        },
        "description": {
            "text": "This should only be executed from the transport in complete trigger of a BasicFR object.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "if(getvarnum(current, \"nrofstops\") > 0)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savestoppedtransportout"
        },
        "parameters": {
            "text": "(obj fixedresource, obj taskexecuter)"
        },
        "description": {
            "text": "This should only be executed from the transport out complete trigger of a BasicFR object.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "if(getvarnum(current, \"nrofstops\") > 0)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "savetree"
        },
        "parameters": {
            "text": "(node tree, str extension, str description, str startingpath)"
        },
        "description": {
            "text": "For developer use. Opens a save file dialog prompting the user for a file name to save. The tree passed in will be saved with the specified name, unless a session is selected. Then the first parameter is ignored. cdir() and pdir() may not be directly used as the path in FlexScript. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "savetree(model(),\"fsm\",\"FlexSim Model\",documentsdir());"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "scalekinematicstotime"
        },
        "parameters": {
            "text": "(node kinematics, int kinematicnr, double scaletotime)"
        },
        "shortdescription": {
            "text": "Scales the kinematics to a defined time"
        },
        "description": {
            "text": "Scales the kinematic(s) to a defined time. This can be used to preserve the characteristics of the kinematics, i.e. accelerate->peak speed->decelerate, but have the total time it takes to perform the kinematics be defined by some other mechanism such as a distribution. If kinematicnr is 0, then the entire set of kinematics will be scaled to the given time. If kinematicnr is greater than 0, then only that kinematic will be scaled. The return value is the new end time of the kinematic(s). Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "scalekinematicstotime(kinematics, 0, exponential(0, 10));"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "searchfornode"
        },
        "parameters": {
            "text": "(str/node searchstr, node startnode, num findnr[, num searchobjects])"
        },
        "description": {
            "text": "For developer use. Recursively searches the startnode for a node with a name containing the searchstr.\n  The findnr parameter is useful when the search finds multiple nodes containing the given name, specifying a number i here will give you\nthe ith node found. Set searchobjects to 1 to search the object's data nodes. Miscellaneous commands that have not been categorized."
        },
        "example": {},
        "gr": {
            "text": "30"
        }
    },
    {
        "name": {
            "text": "seconds"
        },
        "parameters": {
            "text": "(num seconds)"
        },
        "shortdescription": {
            "text": "Gets the number of model time units in the number of seconds"
        },
        "description": {
            "text": "Return the number of model time units in the given number of seconds. Commands for converting units, data types, and spatial coordinate."
        },
        "example": {
            "text": "seconds(30);"
        },
        "gr": {
            "text": "26"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "selectall"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Selects all objects in the model. Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables."
        },
        "example": {
            "text": "selectall()"
        },
        "gr": {
            "text": "7"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "senddelayedmessage"
        },
        "parameters": {
            "text": "(obj toobject, num delaytime, obj fromobject [, num par1, num par2, num par3])"
        },
        "shortdescription": {
            "text": "Send a delayed message to an object, firing its OnMessage trigger after the delay time has transpired"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "message"
            }
        },
        "example": {
            "text": "senddelayedmessage(current.outObjects[1], 25, current, 0, 0, 0);"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "serveraccept"
        },
        "parameters": {
            "text": "(int noblocking)"
        },
        "shortdescription": {
            "text": "Gets the server will attempt to accept a client connection"
        },
        "description": {
            "text": "The server will attempt to accept a client connection. If noblocking = 0, the command blocks until a connection is made. It returns an index used to reference the connection made.  Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "int client = serveraccept(0);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "servercloseconnection"
        },
        "parameters": {
            "text": "(int connection)"
        },
        "shortdescription": {
            "text": "Closes the client connection"
        },
        "description": {
            "text": "The specified connection to a client is closed. Does not close the main server socket. This should be done when the server is completely finished communicating with a client. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "servercloseconnection(1);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "serverclosemain"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Closes the main server socket and all open connections"
        },
        "description": {
            "text": "Closes the main server socket and all of the connections that are still open. No more communication can be done until it is created again. All connections should be closed before this is called. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "serverclosemain()"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "servercreatemain"
        },
        "parameters": {
            "text": "(int port)"
        },
        "shortdescription": {
            "text": "Creates a server socket that is listening for connections to the specified port"
        },
        "description": {
            "text": "Creates a server socket that is listening for connections on the specified port. Some ports (called well-known ports) are reserved for special applications. Anything port number over 1024 is usually safe to use. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "servercreatemain(1880);"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "serverreceive"
        },
        "parameters": {
            "text": "(int connection, char *buffer, int bufsize, int noblocking)"
        },
        "shortdescription": {
            "text": "Receives a message from the connection"
        },
        "description": {
            "text": "Receives a message from the specified connection. This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "c++: int bytes = serverreceive(1,Buf,15,0);"
        },
        "gr": {
            "text": "19"
        }
    },
    {
        "name": {
            "text": "serversend"
        },
        "parameters": {
            "text": "(int connection, char* message [, num charlength] )"
        },
        "shortdescription": {
            "text": "Sends a message to the client connect to connection"
        },
        "description": {
            "text": "Sends the specified text message to the client that is connected to the specified connection. Returns the number of bytes (characters) sent correctly. The text message to be sent must be converted into a char *. The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "serversend(1,\"MadeConnection\");"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "setcollisioncheck"
        },
        "parameters": {
            "text": "(obj taskexecuter, num checkstate [, num checkinterval])"
        },
        "shortdescription": {
            "text": "Sets the state and interval for collision checking on the taskexecuter"
        },
        "description": {
            "text": "Sets the state and interval for collision checking on the taskexecuter. If checkstate is 1, then check for collisions, else don't. If interval is >0, then reset the \"Time between Collision Checks\" for the taskexecuter specified. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "setcollisioncheck(traveler,1,5);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setcolor"
        },
        "parameters": {
            "text": "(obj object, num red, num green, num blue)"
        },
        "shortdescription": {
            "text": "Deprecated, use the Color class"
        },
        "description": {
            "text": "This command is deprecated. Instead set  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "color"
            },
            "MethodRef": {
                "class": "Color",
                "text": "Color"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setdropcoords"
        },
        "parameters": {
            "text": "(obj view[, obj dropnodefrom, obj dropnodeto])"
        },
        "description": {
            "text": "For developer use.  Sets the dropx() and dropy() coordinate commands for the view based on current mouse location. \n\t\tYou can optionally also set the dropnodefrom and dropnodeto parameters, which will define the nodes returned by dropnodefrom() and dropnodeto(). Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setdropcoords()"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "seteventtime"
        },
        "parameters": {
            "text": "(str EventName, num time, num timemode[1/2], num createevent[1/0])"
        },
        "shortdescription": {
            "text": "Sets the \"Repeat Event Time\" for the global UserEvent"
        },
        "description": {
            "text": "Sets the \"Repeat Event Time\" for the specified global UserEvent. If timemode = 1, then timeval will be used directly; otherwise, the timeval - time() will be used.  If createevent = 1, then in addition to updating the \"Repeat Event Time\", a single event will be created at the previous time specified. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "seteventtime(\"UserEvent1\",20,1,0);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setframe"
        },
        "parameters": {
            "text": "(obj object, num/str toframe)"
        },
        "shortdescription": {
            "text": "Sets the shape frame of an object"
        },
        "description": {
            "text": "Sets the frame attribute of the object to the framenumber.  The frame defines which 3D image to display. \n\t\tThis is a nice way of changing the 3D shape of an object on the fly. There are two ways to define frames on an object.\n\t\tFirst, you can do it through the naming of various 3D files. For example, if the object was assigned Operator.3ds as \n\t\tits default shape, and there are additional files in the same directory as \n\t\tOperator.3ds named OperatorFRAME1.3ds, OperatorFRAME2.3ds and OperatorFRAME3.3ds, then the frame attribute could be \n\t\tset to 0,1,2, or 3 which would change the displayed shape to each of the 3ds files respectively. Secondly, you can \n\t\tadd sub-nodes to an obejct's shape attribute, each with a path to the 3D file associated with that frame. Subsequently,\n\t\tframe 1 would be associated with the shape attribute's first sub-node, etc. This is the method used within FlexSim's \n\t\tenvironment to define shape frames. If toframe is a string, then the latter method is assumed, and it will find the \n\t\tshape attribute sub-node with the corresponding name. One use of this command \n\t\twould be to change the 3d shape in the OnDown trigger to show a \"broken\" shape. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "if(getframe(current) == 3)) setframe(current, 5);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "startanimation"
        },
        "parameters": {
            "text": "(obj object, num/str animation[, num speedtype, num speedvalue, num repeattype, num repeatvalue])"
        },
        "shortdescription": {
            "text": "Deprecated, use Animation class"
        },
        "description": {
            "text": "This command is deprecated. Use the Animation class instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "startanimation(current, \"Stand\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updateanimation"
        },
        "parameters": {
            "text": "(obj object [, num updatetime, num animationnr])"
        },
        "shortdescription": {
            "text": "Deprecated, use Animation class"
        },
        "description": {
            "text": "This command is deprecated. Use the Animation class instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "updateanimation(current);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "stopanimation"
        },
        "parameters": {
            "text": "(obj object, num/str animation)"
        },
        "shortdescription": {
            "text": "Deprecated, use Animation class"
        },
        "description": {
            "text": "This command is deprecated. Use the Animation class instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "stopanimation(current, \"Walk\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resumeanimation"
        },
        "parameters": {
            "text": "(obj object, num/str animation[, num resumeAtType, num resumeAtVal])"
        },
        "shortdescription": {
            "text": "Deprecated, use Animation class"
        },
        "description": {
            "text": "This command is deprecated. Use the Animation class instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "resumeanimation(current, \"Stand\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setanimationvar"
        },
        "parameters": {
            "text": "(obj object, num/str animation, str varName, num/obj toValue)"
        },
        "shortdescription": {
            "text": "Sets the value of an animation variable on an object"
        },
        "description": {
            "text": "Sets the value of an animation variable on an object. Animation variables are attributes of an animation \n\tthat may need to dynamically change for different runs of the animation, such as surrogates, time between keyframes, \n\tor position/rotation/size values of a given keyframe. For example, you may use surrogates in building your animation.\n\tYou do this by choosing a default visual from the flowitem bin to use as you create the animation. Then when the \n\tsimulation runs, you substitute real flowitems in for those surrogates when you run the simulation. You do this \n\tsubstitution by setting the value of an animation variable that you've associated with that surrogate to the actual\n\treference to the flowitem. Another example is you may use an animation variable to dynamically define the z position \n\tof a keyframe at run-time. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setanimationvar(current, \"Animation1\", \"Item1\", current.first);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getanimationvar"
        },
        "parameters": {
            "text": "(obj object, num/str animation, str varName)"
        },
        "shortdescription": {
            "text": "Gets the current value of an animation variable"
        },
        "description": {
            "text": "Gets the current value of an animation variable. See setanimationvar() for more information on animation\n\tvariables. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "treenode curItem = getanimationvar(current, \"Animation1\", \"Item1\");"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {
            "text": "obj/num"
        }
    },
    {
        "name": {
            "text": "setitemtype"
        },
        "parameters": {
            "text": "(obj object, num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use labels"
        },
        "description": {
            "text": "This command is deprecated. Use labels instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "setitemtype(item,duniform(1,3));"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setitemvar"
        },
        "parameters": {
            "text": "(obj item, num var, num value)"
        },
        "description": {
            "text": "This sets the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3, and the value parameter should be whatever value you want to set it to. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "setitemvar(current.first, 3, time())"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setitemsendto"
        },
        "parameters": {
            "text": "(obj item, num value)"
        },
        "description": {
            "text": "This sets the value of the sendto for the item if it is in a FixedResource. Only use this command if you are using an explicit FixedResource class object and want to store a sendto value on the item before releasing it, and then later use the releaseitem() command, passing the port in. If you want to change the evaluated sendto of an item that has already been released, execute holditem(), and then releaseitem() again, instead of this command. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "setitemsendto(item, current.currentsendto)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setiteminvolved"
        },
        "parameters": {
            "text": "(obj item, obj involved)"
        },
        "description": {
            "text": "This sets the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. Only use this command if you are using the explicit FixedResource class as and object in your model. You can use this command, along with the setitemvar, getitemvar, and getiteminvolved commands, to store variables on the items the object receives. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "setiteminvolved(current.first, current.centerObjects[1])"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setkinematicsrotoffset"
        },
        "parameters": {
            "text": "(node infonode, num rx, num ry, num rz)"
        },
        "description": {
            "text": "Sets the initial kinematics rotational offset for a kinematics operation. For more information, refer to the help documentation on kinematics. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "setkinematicsrotoffset(current.labels[\"kinematics\"], 0, 0, 180);"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setlabel"
        },
        "parameters": {
            "text": "(obj node, str/num label, num/str/node value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labelProperties"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setlabelnum"
        },
        "parameters": {
            "text": "(obj object, str/num label, num value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labelProperties"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setlabelstr"
        },
        "parameters": {
            "text": "(obj object, str/num label, str value)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.LabelName"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "labelProperties"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setobjectbillboard"
        },
        "parameters": {
            "text": "(obj object, num mode)"
        },
        "shortdescription": {
            "text": "Sets the billboard attribute of the visual tool object"
        },
        "description": {
            "text": "This command sets the billboard attribute of the visual tool object. The following modes are available: Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setobjectbillboard(current, 1);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setobjectimageindex"
        },
        "parameters": {
            "text": "(obj object, num index)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use."
        },
        "description": {
            "text": "This command is deprecated. Do not use. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "setobjectimageindex(item,gettextureindex(\"fs3d\\\\BBsphere.bmp\"));"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setobjectshapeindex"
        },
        "parameters": {
            "text": "(obj object, num index)"
        },
        "shortdescription": {
            "text": "Sets the index number for the 3D shape of an object"
        },
        "description": {
            "text": "Sets the index number for the 3D shape of an object. For the new index to take effect, the shape node of the object must be removed or renamed, so this command renames the shape node to \"_shape\" for you. The index number must be a valid index number of a currently imported 3D shape. To view currently imported 3D shapes and to import more shapes, use View -> Media Files. See setframe() as another solution to changing the 3D shape of an object on the fly. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setobjectshapeindex(item,getshapeindex(\"fs3d\\\\Processor.3ds\"));"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setobjecttextureindex"
        },
        "parameters": {
            "text": "(obj object, num index)"
        },
        "shortdescription": {
            "text": "Sets the index number of the image assigned as a texture for the object's 3D shape"
        },
        "description": {
            "text": "Sets the index number of the bmp or jpeg image to be assigned as the texture for the object's 3D shape. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Note that this command does not change the object's imageobject attribute so the original texture will return when the model is reset. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setobjecttextureindex(item,gettextureindex(\"bitmaps\\\\flowitempicture.bmp\"));"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setpreempt"
        },
        "parameters": {
            "text": "(obj tasksequence, num newpreempt)"
        },
        "shortdescription": {
            "text": "Sets the preempt value of the tasksequence"
        },
        "description": {
            "text": "Sets the preempt value of the tasksequence to the value of newpreempt. Possible values are:  Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "setpreempt(tasksequence, PREEMPT_NOT);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setpriority"
        },
        "parameters": {
            "text": "(obj tasksequence, num newpriority)"
        },
        "shortdescription": {
            "text": "Sets the priority of the tasksequence"
        },
        "description": {
            "text": "Sets the priority value of the tasksequence to the value newpriority. Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "setpriority(myts, 1);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setprogressbar"
        },
        "parameters": {
            "text": "(num progress)"
        },
        "description": {
            "text": "For developer use. Sets the progress bar to the specified value. Should be a value between 0 and 100. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "setprogressbar((numread / numtotal) * 100);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setresetposition"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Sets the reset position of the object"
        },
        "description": {
            "text": "Sets the reset position of the object to its current position. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setresetposition(current);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setrot"
        },
        "parameters": {
            "text": "(obj object, num rx, num ry, num rz)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.rotation"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "rotation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setselectedobject"
        },
        "parameters": {
            "text": "(obj view, obj selected)"
        },
        "description": {
            "text": "For developer use. Sets the selectedobject (yellow highlighted object) of the view. Note that this is different than so(). The highlighted object is accessed by the selectedobject() command. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setselectedobject(ownerview(c), model().first)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setsize"
        },
        "parameters": {
            "text": "(obj object, num sx, num sy, num sz)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.size"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "size"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "settablesize"
        },
        "parameters": {
            "text": "(str/num/node table, num rows, num cols [, num datatype, num overwrite y/n])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.setSize()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "setSize"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "addtablerow"
        },
        "parameters": {
            "text": "(str/num/node table [, num row, num datatype])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.addRow()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "addRow"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "deletetablerow"
        },
        "parameters": {
            "text": "(str/num/node table, num row)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.deleteRow()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "deleteRow"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "movetablerow"
        },
        "parameters": {
            "text": "(str/num/node table, num row, num newrow)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.moveRow()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "moveRow"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "swaptablerows"
        },
        "parameters": {
            "text": "(str/num/node table, num row, num row2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.swapRows()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "swapRows"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "addtablecol"
        },
        "parameters": {
            "text": "(str/num/node table [, num column, num datatype])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.addCol()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "addCol"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "deletetablecol"
        },
        "parameters": {
            "text": "(str/num/node table, num column)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.deleteCol()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "deleteCol"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "movetablecol"
        },
        "parameters": {
            "text": "(str/num/node table, num column, num newcolumn)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.moveCol()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "moveCol"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "swaptablecols"
        },
        "parameters": {
            "text": "(str/num/node table, num column, num column2)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.swapCols()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "swapCols"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setundos"
        },
        "parameters": {
            "text": "(num maxundos)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "setundos(2);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setvarnum"
        },
        "parameters": {
            "text": "(obj object, str/num var, num value)"
        },
        "shortdescription": {
            "text": "Sets the value of an object's numeric variable"
        },
        "description": {
            "text": "Set the specified variable on the object to the number passed in as value. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setvarnum(current.centerObjects[1],\"speed\",1.5);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setvarstr"
        },
        "parameters": {
            "text": "(obj object, str/num var, str value)"
        },
        "shortdescription": {
            "text": "Sets the value of an object's string variable"
        },
        "description": {
            "text": "Set the string value of the specified variable on the object. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "setvarstr(current,\"cycletime\",\"return exponential(10,1);\");"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "showhelp"
        },
        "parameters": {
            "text": "(str topicname)"
        },
        "description": {
            "text": "For developer use. Opens a help topic specified by the topic name. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "showhelp(\"getting_started\");"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "showprogressbar"
        },
        "parameters": {
            "text": "(str caption)"
        },
        "description": {
            "text": "For developer use. Opens the progress bar with the specified caption. The bar's progress will be initialized to 0. Use setprogressbar to update the progess value. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "showprogressbar(\"Loading data, please wait\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "socketend"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Shuts down the processes started with socketinit()"
        },
        "description": {
            "text": "This command shuts down the processes that were started with socketinit(). It should be called when the model has completely finished working with the sockets that it had open. This function returns true if the shut down is successful. See clientsend() for more information. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "socketend();"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "socketinit"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Initializes background processes that allow Windows Sockets to be used"
        },
        "description": {
            "text": "This command initializes the background processes that allow Windows Sockets to be used. It must be called before any calls to socket commands will work. This function returns true if the initialization is successful. See clientsend() for more information. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "socketinit();"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "sorttable"
        },
        "parameters": {
            "text": "(str/node/num table, num column)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.sort()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "sort"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "multisorttable"
        },
        "parameters": {
            "text": "(str/node/num table, num col1[, num col2, num col3, ...])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.sort()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "sort"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "standardpreopen"
        },
        "parameters": {
            "text": "(obj object[, int nobuild])"
        },
        "description": {
            "text": "For developer use. Queries if there are any open windows that are the same as the current window being opened. If so, then the current window is closed. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "standardpreopen(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "startuploadlibraries"
        },
        "parameters": {
            "text": "([num viewalreadyset])"
        },
        "description": {
            "text": "For developer use. Loads libraries on startup. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "startuploadlibraries()"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getstatetableutilization"
        },
        "parameters": {
            "text": "(Table stateTable, TrackedVariable stateProfile)"
        },
        "description": {
            "text": "Returns the utilization of a state profile given a state table. See  Commands for creating, manipulating, and accessing statistical data; including probability distributions.",
            "a": {
                "href": "flexsimdir/manual/Reference/Tools/StateTable/StateTable.html",
                "text": "State Table"
            }
        },
        "example": {
            "text": "getstatetableutilization(Table(\"StateTable1\"), Model.find(\"Processor1\").as(Object).stats.state())"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "stopobject"
        },
        "parameters": {
            "text": "(obj object, num state [, num id, num priority, num stateprofile] )"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.stop()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "stop"
            }
        },
        "example": {
            "text": "stopobject(current.centerObjects[1], STATE_BLOCKED);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "switch_flexscript"
        },
        "parameters": {
            "text": "(obj object[, num on/off/query])"
        },
        "description": {
            "text": "For developer use. This command switches the flexscript toggle of a node.\n\t Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_flexscript(var_s(current, \"code\"), 1);"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "transfernode"
        },
        "parameters": {
            "text": "(node movenode, node container)"
        },
        "shortdescription": {
            "text": "Deprecated, use treenode.up"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "treenode"
            },
            "PropertyRef": {
                "class": "treenode",
                "text": "up"
            }
        },
        "example": {
            "text": "transfernode(current.labels[\"inactivequeue\"].first, current.labels[\"activequeue\"]);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "transfernodeobj"
        },
        "parameters": {
            "text": "(node movenode, node container)"
        },
        "shortdescription": {
            "text": "Moves movenode into the container node's object data"
        },
        "description": {
            "text": "This command moves movenode into the container node's object data. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "transfernodeobj(current.attrs.find(\"body\"), current.next);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "transportincomplete"
        },
        "parameters": {
            "text": "(obj object, obj item [, num inport, obj transporter])"
        },
        "shortdescription": {
            "text": "Notifies the FixedResource object that item will now be moved into it"
        },
        "description": {
            "text": "This command notifies a downstream FixedResource object that the specified item will now be moved into it from an upstream object. This should only be used if the upstream object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the downstream FixedResource to manage data on how many items are slated to enter the object, but haven't arrived yet. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "transportincomplete(current.outObjects[port], item, opipno(current, port));"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "transportoutcomplete"
        },
        "parameters": {
            "text": "(obj object, obj item [, num outport, obj transporter])"
        },
        "shortdescription": {
            "text": "Notifies the FixedResource object that item will now be moved out of it"
        },
        "description": {
            "text": "This command notifies the FixedResource object that the specified item will now be moved out of it. This should only be used if the object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the FixedResource to manage data on how many items are still in the object but are ready to leave. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it.  Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "transportoutcomplete(current, item, port);"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updatekinematics"
        },
        "parameters": {
            "text": "(node infonode, obj object [, num updatetime])"
        },
        "shortdescription": {
            "text": "Updates the location of the object based on its kinematics"
        },
        "description": {
            "text": "Updates the location of the object based on the kinematics operation and the current time. For more information, refer to the help documentation on kinematics. Commands associated with kinematics and spline math."
        },
        "example": {
            "text": "updatekinematics(current.labels[\"kinematics\"], current, time());"
        },
        "gr": {
            "text": "32"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updatelocations"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Updates the location of the object and the objects inside of it"
        },
        "description": {
            "text": "This command causes the object to update the location of itself and possibly the objects inside of it. Use this command to refresh locations before querying or executing functionality that would query the location of an object. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "updatelocations(current);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updatestate"
        },
        "parameters": {
            "text": "(obj object [, num profilenr])"
        },
        "shortdescription": {
            "text": "Updates the state of the object"
        },
        "description": {
            "text": "Updates the state of the specified object.  Could be used in the OnDraw function of an object to make its states display smoothly while the model is running. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "updatestate(current);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updatestates"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Updates the states of all objects in the model"
        },
        "description": {
            "text": "Updates the states of all objects in the model. Additionally, this command also updates the content stats of all the objects. The 'Stop' button and menu option both call this function before executing a stop() so that objects' stats are updated.  Otherwise, reports will not reflect the time the object was in its last state. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "updatestates();"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "userinput"
        },
        "parameters": {
            "text": "(obj targetnode, str text [, int stop])"
        },
        "shortdescription": {
            "text": "Prompts the user for a value in a dialog box"
        },
        "description": {
            "text": "Prompts the user for a value in a dialog box. The value is placed in the specified node. The model does not stop running while the dialog is open unless the stop parameter is specified. If the stop parameter is specified, then the model stops until the dialog is closed and it returns the value. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "userinput(model().subnodes[3].labels[\"myLabel\"],\"Please enter a value\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "var"
        }
    },
    {
        "name": {
            "text": "validatename"
        },
        "parameters": {
            "text": "(obj node, num isviewtext [, obj object])"
        },
        "description": {
            "text": "For developer use. Makes sure the name of node is a valid FlexSim name, replacing invalid characters with underscores and bringing up a message if changes were made. If isviewtext is 1, it assumes the node passed is an edit field, and it changes the viewtext of the field, instead of the name of the node. If the object parameter is specified, it checks that object's name against all the other names of objects in its container. If there are names that are the same, it will pop up an error message. This command is called when you press the Apply or OK buttons in an object's Properties window. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "validatename(current, 0);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "vectorprojectx"
        },
        "parameters": {
            "text": "(obj projectfrom, num fromx, num fromy, num fromz, obj projectonto)"
        },
        "shortdescription": {
            "text": "Deprecated, use Vec3.project()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Vec3"
            },
            "MethodRef": {
                "class": "Vec3",
                "text": "project"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "vectorprojecty"
        },
        "parameters": {
            "text": "(obj projectfrom, num fromx, num fromy, num fromz, obj projectonto)"
        },
        "shortdescription": {
            "text": "Deprecated, use Vec3.project()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Vec3"
            },
            "MethodRef": {
                "class": "Vec3",
                "text": "project"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "vectorprojectz"
        },
        "parameters": {
            "text": "(obj projectfrom, num fromx, num fromy, num fromz, obj projectonto)"
        },
        "shortdescription": {
            "text": "Deprecated, use Vec3.project()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Vec3"
            },
            "MethodRef": {
                "class": "Vec3",
                "text": "project"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "windowgray"
        },
        "parameters": {
            "text": "(HWND window, num graystate)"
        },
        "description": {
            "text": "For developer use. Enables or disables the window based on the graystate parameter (1 or 0). Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "graywindow(windowfromnode(c),1);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "windowmenu"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "description": {
            "text": "For developer use. Returns a reference to the view's menu as an HMenu. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "windowmenu(c)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "xcenter"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.getLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "getLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "xloc"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.location or Object.getLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Object"
                }
            ],
            "PropertyRef": {
                "class": "Object",
                "text": "location"
            },
            "MethodRef": {
                "class": "Object",
                "text": "getLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "xrot"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.rotation or Object.setRotation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Object"
                }
            ],
            "PropertyRef": {
                "class": "Object",
                "text": "rotation"
            },
            "MethodRef": {
                "class": "Object",
                "text": "setRotation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "xsize"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.size"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "size"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ycenter"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.getLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "getLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "yloc"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.location or Object.getLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Object"
                }
            ],
            "PropertyRef": {
                "class": "Object",
                "text": "location"
            },
            "MethodRef": {
                "class": "Object",
                "text": "getLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "yrot"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.rotation"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "rotation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "ysize"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.size"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "size"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "zcenter"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.getLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "MethodRef": {
                "class": "Object",
                "text": "getLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "zloc"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.location or Object.getLocation()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Object"
                },
                {
                    "text": "Object"
                }
            ],
            "PropertyRef": {
                "class": "Object",
                "text": "location"
            },
            "MethodRef": {
                "class": "Object",
                "text": "getLocation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "zrot"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.rotation"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "rotation"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "zsize"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Deprecated, use Object.size"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Object"
            },
            "PropertyRef": {
                "class": "Object",
                "text": "size"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "stringsearch"
        },
        "parameters": {
            "text": "(str stringtosearch, str searchfor, int startindex[, int flags])"
        },
        "shortdescription": {
            "text": "Deprecated, use string.search()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "MethodRef": {
                "class": "string",
                "text": "search"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "stringtoken"
        },
        "parameters": {
            "text": "(str token, str delimit)"
        },
        "shortdescription": {
            "text": "Finds the next token in a string"
        },
        "description": {
            "text": "Finds the next token in a string. The first parameter is a string containing delimited tokens. The second parameter is a string with a set of delimiter characters. Works similarly to strtok() in C++. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "string token = \"Jacob,Emma,Michael,Isabella,Ethan\";"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "stringreplace"
        },
        "parameters": {
            "text": "(str stringtosearch, str searchfor, str replacewith)"
        },
        "shortdescription": {
            "text": "Deprecated, use string.replace()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "string"
            },
            "MethodRef": {
                "class": "string",
                "text": "replace"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "checkdllconnection"
        },
        "parameters": {
            "text": "(node dllnode, num force)"
        },
        "shortdescription": {
            "text": "Returns 1 if the node is properly connected with a dll function"
        },
        "description": {
            "text": "Returns 1 if the node is properly connected with a dll function. Otherwise returns 0. If force is 1, then if the node is not connected, it will attempt to bind it to a dll function, and will return 1 if successful, 0 if not. The node must be toggled as DLL and have proper data specifying the path to the dll and the function name. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "if(!checkdllconnection(getvarnode(current, \"exittrigger\"), 1)) msg(\"DLL Error\",\"Error connecting to dll.\")"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "switch_dllfunc"
        },
        "parameters": {
            "text": "(node dllnode[, num on/off/get])"
        },
        "description": {
            "text": "Switches the node's dll toggle on or off. 1 switches it on, 0 off, and -1 gets the current state.  Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {
            "text": "switch_dllfunc(getvarnode(current, \"exittrigger\"), 1);"
        },
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "toggleallcodestates"
        },
        "parameters": {
            "text": "(node startpoint, num ascpp)"
        },
        "shortdescription": {
            "text": "Toggles all code nodes under startpoint as either C++ or flexscript"
        },
        "description": {
            "text": "Traverses the tree starting at start point and toggles all code nodes to either c++ or flexscript. 1 toggles to c++, 0 toggles to flexscript. This will only change nodes that have not been locked to their code state. This is the same as using the menu option Build|Make all code C++ or Build|Make all code flexscript. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "toggleallcodestates(model(), 1);"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "gettableheader"
        },
        "parameters": {
            "text": "(string/num/node table, num row/col, num rowcolnr)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.getColHeader() or Table.getRowHeader()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Table"
                },
                {
                    "text": "Table"
                }
            ],
            "MethodRef": [
                {
                    "class": "Table",
                    "text": "getColHeader"
                },
                {
                    "class": "Table",
                    "text": "getRowHeader"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "settableheader"
        },
        "parameters": {
            "text": "(string/num/node table, num row/col, num rowcolnr, string value)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.setColHeader() or Table.setRowHeader()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "Table"
                },
                {
                    "text": "Table"
                }
            ],
            "MethodRef": [
                {
                    "class": "Table",
                    "text": "setColHeader"
                },
                {
                    "class": "Table",
                    "text": "setRowHeader"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "importtable"
        },
        "parameters": {
            "text": "(node importnode, str filename[, num importcolheaders = 0, num importrowheaders = 0, str listseparator = 0, str decimalseparator = 0, str thousandseparator = 0])"
        },
        "shortdescription": {
            "text": "Imports table data into importnode from a csv file. When importing both row and column headers, the first value in the file will be skipped. When importing into a bundle table, each field will use the data type of its first imported cell (row 1)."
        },
        "description": {
            "text": "Imports table data into the node from a csv (comma-separated values) file. Commands for accessing, assigning and managing data in tables."
        },
        "example": {
            "text": "importtable(current.labels[\"data\"], \"C:/modeldata.csv\", 1, 1)"
        },
        "gr": {
            "text": "12"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createpopup"
        },
        "parameters": {
            "text": "(str viewpath, str objectfocus, str viewfocus, obj relativeto, num x, num y, num sx, num sy)"
        },
        "shortdescription": {
            "text": "Creates a new popup window"
        },
        "description": {
            "text": "Similar to the createview command in that it creates a new window. However, FlexSim manages this window so that whenever the user clicks outside of the window, the window will be closed. Code template pop-ups use this command to create a drop-down in which you can edit the template code. The pop-up view must contain a style attribute with the WS_POPUP style. You also specify a view node \"relative to\" which the popup's location will be set (usually whatever view you're writing code on). Also specify an offset location in pixels from relativeto's top-left corner, and a size of the pop-up. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "treenode combobox = c.find(\"../pickoptions\");"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "highlightviewtext"
        },
        "parameters": {
            "text": "(node view, num pos, num span, num mode span/lines)"
        },
        "shortdescription": {
            "text": "Highlights text in a code edit window"
        },
        "description": {
            "text": "Highlights text in a scintilla code edit window. This is used by the flexscript syntax checker to go to highlight a syntax error in the code edit window. You can either highlight whole lines or individual characters. To highlight individual characters, specify mode as 2. For lines specify mode as 1. For lines, specify pos as the start line to highlight(the first line is line 1) and span the number of lines to highlight. For individual characters, specify pos as the start position and span as the number of characters to highlight (position 0 is the position to the left to the first character) Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "highlightviewtext(c, 0, 5, 2)"
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "redirectconsole"
        },
        "parameters": {
            "text": "(num console:output/system/compiler/trace, obj view)"
        },
        "shortdescription": {
            "text": "Redirects any prints to a given console"
        },
        "description": {
            "text": "This redirects any prints to a given console so that they will instead be printed to the view text of the specified view. \n\tCONSOLE_OUTPUT redirects the output console, CONSOLE_SYSTEM redirects the system console, CONSOLE_COMPILER redirects the compiler console, CONSOLE_TRANCE redirects the trace console. To redirect it back to its original console, call the command again and specify NULL as the view parameter. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "redirectconsole(2, c);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fileexists"
        },
        "parameters": {
            "text": "(str filepath)"
        },
        "shortdescription": {
            "text": "Returns 1 if the file exists, 0 otherwise"
        },
        "description": {
            "text": "Returns 1 if the file exists, otherwise 0. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "if(fileexists(\"C:/myfile.txt\"))"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "executestring"
        },
        "parameters": {
            "text": "(str thestring[, node c, node i, obj eventdata])"
        },
        "shortdescription": {
            "text": "Executes a string as flexscript"
        },
        "description": {
            "text": "Executes the given string as flexscript. Parameters 2-4 are the same as executefsnode. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "executestring(\"profileevents()\");"
        },
        "gr": {
            "text": "5"
        }
    },
    {
        "name": {
            "text": "endreplication"
        },
        "parameters": {
            "text": "(num onlyifexperimenting)"
        },
        "shortdescription": {
            "text": "Ends the current experimenter replication"
        },
        "description": {
            "text": "Will end the current experimenter replication. Use this if your experiment's end time is dependent on a certain condition becoming true instead of a set end time. Specify 1 for onlyifexperimenting to make sure that you only stop if you are running the experiment. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "if(current.stats.output >= 5000) endreplication(1);"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "resetuniqueid"
        },
        "parameters": {
            "text": "(obj flowitem)"
        },
        "shortdescription": {
            "text": "Resets the uniqueid attributes on a flowitem to a value that has not been assigned to another flowitem"
        },
        "description": {
            "text": "This command resets the uniqueid attribute on a flowitem to a value that has not been assigned to another flowitem already. This attribute is required to collect Full History information for the Full Report. This command should be used if a flowitem has not been destroyed but needs to be considered as a new item for data collection purposes. For example, if a flowitem is being recycled by a modeler (not with the built-in recycling functionality), they should call this when the flowitem is returned to circulation. Flowitems typically only have the uniqueid attribute when Full History collection is enabled. Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "resetuniqueid(item);"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "enablefullhistory"
        },
        "parameters": {
            "text": "(num on/off)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Turns Full History collection on and off. If the parameter passed in is 1, Full History will be turned on. If it is 0, it will be turned off. This command should not be called directly. Instead, use the Enable Full History menu option to turn Full History on or off. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "enablefullhistory(1); // Turns Full History collection on"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getmoverecord"
        },
        "parameters": {
            "text": "(num record)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Returns a movement record that has been recorded for the Full History Report. A movement record is created every time a flowitem moves from one object to another if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a MoveRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "See the example for getnummoverecords()."
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "getmoverecordvalue"
        },
        "parameters": {
            "text": "(num record, num value)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Returns one of the values from the movement record that is passed in as the first parameter to the function. This record is the return value from a call to getmoverecord(). The value passed to this function as the second parameter indicates which value from the movement record the user wishes to retrieve:\n\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "See the example for getnummoverecords()."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getnummoverecords"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Returns the number of movement records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "// Print the move records that have been recorded"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getstaterecord"
        },
        "parameters": {
            "text": "(num record)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Returns a state change record that has been recorded for the Full History Report. A state change record is created every time an object changes state if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a StateRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "See the example for getnumstaterecords()."
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "getstaterecordvalue"
        },
        "parameters": {
            "text": "(num record, num value)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Returns one of the values from the state change record that is passed in as the first parameter to the function. This record is the return value from a call to getstaterecord(). The value passed to this function as the second parameter indicates which value from the state change record the user wishes to retrieve:\n\t Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "See the example for getnumstaterecords()."
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getnumstaterecords"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Returns the number of state change records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "// Print the state change records that have been recorded"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettrackedvariable"
        },
        "parameters": {
            "text": "(str/node trackedvar [, num valtype] )"
        },
        "shortdescription": {
            "text": "Deprecated, use Tracked Variable class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "TrackedVariable"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "settrackedvariable"
        },
        "parameters": {
            "text": "(str/node trackedvar, num value[, num rate])"
        },
        "shortdescription": {
            "text": "Deprecated, use Tracked Variable class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "TrackedVariable"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "trackedvariable"
        },
        "parameters": {
            "text": "(str name)"
        },
        "shortdescription": {
            "text": "Deprecated, use Tracked Variable class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "TrackedVariable"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "inittrackedvariable"
        },
        "parameters": {
            "text": "(node theNode, num type[, num startValue, num flags])"
        },
        "shortdescription": {
            "text": "Deprecated, use Tracked Variable class"
        },
        "description": {
            "text": "This command is deprecated. Use the  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "TrackedVariable"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "showhtmlhelp"
        },
        "parameters": {
            "text": "(str topic)"
        },
        "description": {
            "text": "For developer use. Open FlexSim's User Manual with the given topic to open. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "showhtmlhelp(\"Welcome_to_Flexsim.html\")"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "rebindobjectattributes"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "shortdescription": {
            "text": "Rebinds object attributes"
        },
        "description": {
            "text": "Rebinds object attributes for the given node. If you delete or add an attribute to an object, the object's attribute cache will not immediately reflect that change, so you can call rebindobjectattributes to update the object's attribute cache. This is the same as right-clicking on the object and selecting Edit|Rebind Object Attributes. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "rebindobjectattributes(c)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "setcursor"
        },
        "parameters": {
            "text": "(num cursorid[, num forgetCount = 0])"
        },
        "shortdescription": {
            "text": "Sets the visual look of the mouse pointer"
        },
        "description": {
            "text": "Sets the visual look of the mouse pointer. Valid ids are as follows Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setcursor(3)"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "postclosewindowmessage"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "shortdescription": {
            "text": "Posts a Windows Message to close the window"
        },
        "description": {
            "text": "Posts a message onto the Windows message queue to close the window. This allows you to finish any scripting code before the window is actually closed. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "postclosewindowmessage(ownerview(c));"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "continue"
        },
        "parameters": {},
        "description": {
            "text": "Continues immediately to the next iteration of a for or while loop without executing any of the remaining code in the current loop. Flexscript or C++ keywords and constructs."
        },
        "example": {
            "text": "if(thisloopnotneeded) continue;"
        },
        "gr": {
            "text": "3"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "refreshglobalvariables"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Refreshes all global variables to their initial values. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "refreshglobalvariables()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "refreshcommandlist"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Refreshes the command list. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "refreshcommandlist()"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updatetoolsmenu"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use the Toolbox"
        },
        "description": {
            "text": "This command is deprecated, use the Toolbox. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "updatetoolsmenu()"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "bcgetitemkinematics"
        },
        "parameters": {
            "text": "(obj basicconveyor, obj item, num kinematictype {0-main kinematic : 1-time dependent : 2-convey dependent})"
        },
        "shortdescription": {
            "text": "Deprecated, legacy conveyors are no longer supported"
        },
        "description": {
            "text": "Deprecated, Legacy conveyors are no longer supported. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode kin = bcgetitemkinematics(current, item, 2);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "bcgetitemposition"
        },
        "parameters": {
            "text": "(obj basicconveyor, obj item)"
        },
        "shortdescription": {
            "text": "Deprecated, legacy conveyors are no longer supported"
        },
        "description": {
            "text": "Deprecated, Legacy conveyors are no longer supported. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "bcgetitemposition(current,current.first);"
        },
        "gr": {
            "text": "31"
        }
    },
    {
        "name": {
            "text": "bcsetdirection"
        },
        "parameters": {
            "text": "(obj basicconveyor, num direction)"
        },
        "shortdescription": {
            "text": "Deprecated, legacy conveyors are no longer supported"
        },
        "description": {
            "text": "Deprecated, Legacy conveyors are no longer supported. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "bcsetdirection(so(),0);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "bcsetitemconveystate"
        },
        "parameters": {
            "text": "(obj basicconveyor, obj item, num startpoint, num startspeed, num targetspeed, num accdec)"
        },
        "shortdescription": {
            "text": "Deprecated, legacy conveyors are no longer supported"
        },
        "description": {
            "text": "Deprecated, Legacy conveyors are no longer supported. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "bcsetitemconveystate(current, item, position, 0, 60, 0);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "asin"
        },
        "parameters": {
            "text": "(num ratio)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.asin()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "asin"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "acos"
        },
        "parameters": {
            "text": "(num ratio)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.acos()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "acos"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "angle"
        },
        "parameters": {
            "text": "(num dx, num dy)"
        },
        "shortdescription": {
            "text": "Deprecated, use Math.atan2()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Math"
            },
            "MethodRef": {
                "class": "Math",
                "text": "atan2"
            }
        },
        "example": {
            "text": "double myangle = angle(distx, disty)"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "bitwiseand"
        },
        "parameters": {
            "text": "(num a, num b)"
        },
        "shortdescription": {
            "text": "Deprecated, use & operator"
        },
        "description": {
            "text": "This command is deprecated. Use & operator instead.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int bwa = bitwiseand(0x460, 0x040);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "bitwisenot"
        },
        "parameters": {
            "text": "(num a)"
        },
        "shortdescription": {
            "text": "Deprecated, use ~ operator"
        },
        "description": {
            "text": "This command is deprecated. Use ~ operator instead.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int bwn = bitwisenot(0x0);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "bitwiseor"
        },
        "parameters": {
            "text": "(num a, num b)"
        },
        "shortdescription": {
            "text": "Deprecated, use | operator"
        },
        "description": {
            "text": "This command is deprecated. Use | operator instead.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int bwo = bitwiseor(0x15, 0x01);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "bitwisexor"
        },
        "parameters": {
            "text": "(num a, num b)"
        },
        "shortdescription": {
            "text": "Deprecated, use ^ operator"
        },
        "description": {
            "text": "This command is deprecated. Use ^ operator instead.  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "int bwxo = bitwisexor(0x15, 0x01);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "mpt"
        },
        "parameters": {
            "text": "(str printvalue)"
        },
        "shortdescription": {
            "text": "Print text to the system console"
        },
        "description": {
            "text": "Prints the text printvalue to the system console. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "mpt(\"System console printout\");"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mpf"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Print a floating point value to the system console"
        },
        "description": {
            "text": "Prints the floating point value to the system console. Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "mpf(7.69);"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mpd"
        },
        "parameters": {
            "text": "(num value)"
        },
        "shortdescription": {
            "text": "Print an integer to the system console"
        },
        "description": {
            "text": "Prints the integer value to the system console Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "mpd(6);"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mpr"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Print a new line to the system console"
        },
        "description": {
            "text": "Prints a new line to the system console Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "mpr();"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "modeldir"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the path to the currently open model's directory"
        },
        "description": {
            "text": "Returns that path of the currently open model's directory. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "modeldir();"
        },
        "gr": {
            "text": "5"
        }
    },
    {
        "name": {
            "text": "currentfile"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the path to the currently open model"
        },
        "description": {
            "text": "Returns the path of the currently open model. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "currentfile();"
        },
        "gr": {
            "text": "5"
        }
    },
    {
        "name": {
            "text": "truncatemediapath"
        },
        "parameters": {
            "text": "(str path)"
        },
        "description": {
            "text": "Returns a truncated media path based on the full path of the file passed. If this file exists relative to the model \n\tdirectory, then the path will be truncated to be relative to the model directory. It will also be truncated if it is relative to \n\tthe FlexSim install directory. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "truncatemediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\texturebox.wrl\");"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "documentsdir"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the full path to the currently active user's FlexSim Projects folder in My Documents"
        },
        "description": {
            "text": "Returns a full path to the currently active user's FlexSim Projects folder in My Documents Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "documentsdir()"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "programdatadir"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the full path to the directory where FlexSim stores program data"
        },
        "description": {
            "text": "Returns a full path to the directory where FlexSim stores program data, such as the help documents. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "programdatadir() returns a string like \"C:\\ProgramData\\Flexsim\\Flexsim7\\\""
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "userdatadir"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Gets the full path to the directory where FlexSim stores user data"
        },
        "description": {
            "text": "Returns a full path to the directory where FlexSim stores user data, such as global preferences and compiler settings. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "userdatadir() returns a string like \"C:\\Users\\USERNAME\\AppData\\Roaming\\Flexsim\\Flexsim7\\\""
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "commandlineparam"
        },
        "parameters": {
            "text": "(str param)"
        },
        "description": {
            "text": "Returns the specified commandline parameter that was passed in if FlexSim is being run from the commandline. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "commandlineparam(\"nrofops\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "getpath"
        },
        "parameters": {
            "text": "(str truncatedpath)"
        },
        "shortdescription": {
            "text": "Returns the full file path of the truncated path"
        },
        "description": {
            "text": "Takes a truncated, or relative file path, and returns the full file path. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "string fullpath = getpath(\"fs3d\\\\texturebox.wrl\");"
        },
        "gr": {
            "text": "5"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "getrunstate"
        },
        "parameters": {
            "text": "([int checkProcessingEvent])"
        },
        "shortdescription": {
            "text": "Returns 1 if the model is currently running, 0 if not"
        },
        "description": {
            "text": "Returns 1 if the model is currently running, 0 if not. If you pass a true value, returns whether an event is currently executing. Commands for stopping, starting, and managing simulation runs."
        },
        "example": {
            "text": "if(!getrunstate()){msg(\"Model Stopped\", \"The model is not running right now.\",1);}"
        },
        "gr": {
            "text": "15"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "windowstyle"
        },
        "parameters": {
            "text": "(HWND/obj window [, num style, num useexstyle])"
        },
        "shortdescription": {
            "text": "Gets the windowstyle of window"
        },
        "description": {
            "text": "Used in GUI development. Dynamically gets/sets the window style of the given window. \n\tIf style is 0, this will simply return the current style of the window. Otherwise, it will set it. \n\tIf useexstyle is 1, it will apply/get the extended style of the window. Refer to Windows SDK documentation for more information on \n\twindow styles. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "As an example, this command is used in the perspective view's \"Full Screen\" context menu option to change \n\tthe style of the perspective window so that it no longer has a title bar when it is in full screen mode."
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "keyboardfocus"
        },
        "parameters": {
            "text": "([HWND/node focus])"
        },
        "shortdescription": {
            "text": "Gets/Sets keyboard focus"
        },
        "description": {
            "text": "Used in GUI development. Gets/Sets the keyboard focus. If the focus parameter is left out, then this command will \n\treturn a reference to the current keyboard focus as an HWND handle. \n\tOtherwise, it will set the focus to the keyboard focus to the passed parameter. Use windowfromnode() or getviewhwnd() to get access \n\tto the HWND handle of a view node.\n\t Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "keyboardfocus(windowfromnode(edit));"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getpickingmode"
        },
        "parameters": {
            "text": "(obj view)"
        },
        "shortdescription": {
            "text": "Gets the picking mode for view"
        },
        "description": {
            "text": "Gets the picking mode for the specified view. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "int isselectionmode = getpickingmode(view);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "setpickingdrawfocus"
        },
        "parameters": {
            "text": "(obj theview, obj focus, num what[, obj secondaryfocus, num flags])"
        },
        "description": {
            "text": "For developer use. Sets the draw code following this call to be picked as the focus when clicking or dragging. Usually you would use this \n\tto draw custom sizers and grippers on your object, and then implement an OnDrag or an OnClick event on the object that would call getpickingdrawfocus()\n\tto figure out what part was clicked. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "setpickingdrawfocus(view, current, 20, drawsurrogate(current).first.subnodes[3], DETECT_DRAG_Y);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getpickingdrawfocus"
        },
        "parameters": {
            "text": "(obj theview, num whattoget, num pickedid)"
        },
        "shortdescription": {
            "text": "Gets the picking draw focus"
        },
        "description": {
            "text": "Gets the picking draw focus.  Used in OnClick to know what was clicked. \n\tThe whattoget parameter can be PICK_TYPE, PICK_OBJECT, or PICK_SECONDARY_OBJECT. \n\tpickedid should be PICK_PRESSED for the \"pressed\" pick, PICK_HOVERED for the \"hovered\" pick, PICK_RELEASED for the \"released\" pick, or PICK_MOVED for \"mouse moved\" pick. Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "int picktype = getpickingdrawfocus(view, PICK_TYPE, 0);"
        },
        "gr": {
            "text": "17"
        }
    },
    {
        "name": {
            "text": "getdirbrowse"
        },
        "parameters": {
            "text": "(str initialdir, str message, node result)"
        },
        "shortdescription": {
            "text": "Opens a browser window to pick a directory"
        },
        "description": {
            "text": "Opens a browser window to pick a directory. destnode should have string data, and the directory path will be written \n\tto its text. Commands associated with strings, string manipulation and string comparisons."
        },
        "example": {
            "text": "getdirbrowse(documentsdir, \"A folder\", destnode)"
        },
        "gr": {
            "text": "5"
        }
    },
    {
        "name": {
            "text": "drawshadow"
        },
        "parameters": {
            "text": "(num phase (1,2,3))"
        },
        "shortdescription": {
            "text": "In OnDraw: draw shadow volume"
        },
        "description": {
            "text": "In OnDraw: draw shadow volume Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawshadow(1);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glBegin"
        },
        "parameters": {
            "text": "(num primitive)"
        },
        "shortdescription": {
            "text": "Deprecated, use the mesh() API"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Use the mesh() API instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glEnd"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use the mesh() API"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Use the mesh() API instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glVertex3d"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Deprecated, use the mesh() API"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Use the mesh() API instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglRotate"
        },
        "parameters": {
            "text": "(num degrees, num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Rotates the current OpenGL drawing context by degrees around axis x,y,z"
        },
        "description": {
            "text": "Rotates the current OpenGL drawing context by degrees around an axis defined by the vertex (x,y,z). Anything drawn after \n\ta rotation is based on the new rotation of the axes. See glVertex3d for definition of the OpenGL xyz coordinate system. You can refer \n\tto standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglRotate(90,1,0,0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glRotated"
        },
        "parameters": {
            "text": "(num degrees, num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglRotate()"
        },
        "description": {
            "text": "This command is deprecated. Use fglRotate() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglTranslate"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Translates the current OpenGL drawing context by x,y,z"
        },
        "description": {
            "text": "Translates the current OpenGL drawing context by the given translation parameters. See glVertex3d for definition of the \n\tOpenGL xyz coordinate system. Anything drawn after a translation is based on the new location of the axes. You can refer to standard \n\tOpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglTranslate(15, 4, 0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glTranslated"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglTranslate()"
        },
        "description": {
            "text": "This command is deprecated. Use fglTranslate() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglScale"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Scales the current OpenGL drawing context by x,y,z"
        },
        "description": {
            "text": "Scales the current OpenGL drawing context by the given scale parameters. See glVertex3d for definition of the OpenGL xyz \n\tcoordinate system. Anything drawn after this command is based on the change in scale of the axes. You can refer to standard OpenGL \n\tdocumentation for more information if needed.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglScale(2,4,1);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glScaled"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglScale()"
        },
        "description": {
            "text": "This command is deprecated. Use fglScale() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglLoadIdentity"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "Loads the identity matrix into the current OpenGL drawing context, or in other words, replaces the current matrix with the \n\tidentity matrix. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Loading \n\tthe identity matrix is simply a way of resetting things to the origin, so there's no rotation, translation or scaling. The default \n\tposition is (0,0,0) and the default orientation is looking down the negative z-axis. You can refer to standard OpenGL documentation for \n\tmore information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglLoadIdentity()"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glLoadIdentity"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use fglLoadIdentity()"
        },
        "description": {
            "text": "This command is deprecated. Use fglLoadIdentity() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglMatrixMode"
        },
        "parameters": {
            "text": "(num mode)"
        },
        "shortdescription": {
            "text": "Specifies which matrix stack is the target for subsequent matrix operations"
        },
        "description": {
            "text": "Specifies which matrix stack is the target for subsequent matrix operations.  A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE.  The initial value is GL_MODELVIEW which is used when moving objects around the scene. You can refer to standard OpenGL documentation for more information if needed.  Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglMatrixMode(GL_MODELVIEW);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glMatrixMode"
        },
        "parameters": {
            "text": "(num mode)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglMatrixMode()"
        },
        "description": {
            "text": "This command is deprecated. Use fglMatrixMode() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglPushMatrix"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Pushes the current OpenGL drawing context onto the matrix stack"
        },
        "description": {
            "text": "Pushes the current OpenGL drawing context onto the matrix stack which can later be retrieved with glPopMatrix(). If you are drawing more than one object and you don't want the glTranslated, glRotated or glScaled to affect the next objects, you should use glPushMatrix and glPopMatrix. The OpenGL stack stores the space matrices in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglPushMatrix();"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glPushMatrix"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use fglPushMatrix()"
        },
        "description": {
            "text": "This command is deprecated. Use fglPushMatrix() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglPopMatrix"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Pops the current OpenGL drawing context from the matrix stack"
        },
        "description": {
            "text": "Pops the current OpenGL drawing context from the matrix stack, or in other words returns to the space on the top of the stack. The OpenGL stack stores the space matrix in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglPopMatrix();"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glPopMatrix"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use fglPopMatrix()"
        },
        "description": {
            "text": "This command is deprecated. Use fglPopMatrix() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglColor"
        },
        "parameters": {
            "text": "(num red {0-1}, num green {0-1}, num blue {0-1}[, num alpha {0-1}])"
        },
        "shortdescription": {
            "text": "Sets the color for drawing a mesh in OpenGL"
        },
        "description": {
            "text": "Sets the color for drawing a mesh in OpenGL. The rgb color components are between 0 and 1. The optional alpha component is between 0 (transparent) and 1 (opaque). Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {},
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glColor3d"
        },
        "parameters": {
            "text": "(num red {0-1}, num green {0-1}, num blue {0-1})"
        },
        "shortdescription": {
            "text": "Deprecated, use fglColor()"
        },
        "description": {
            "text": "This command is deprecated. Use fglColor() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glColor4d"
        },
        "parameters": {
            "text": "(num red {0-1}, num green {0-1}, num blue {0-1}, num alpha {0-1})"
        },
        "shortdescription": {
            "text": "Deprecated, use fglColor()"
        },
        "description": {
            "text": "This command is deprecated. Use fglColor() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglNormal"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Sets the normal vector for shading subsequent vertices in OpenGL"
        },
        "description": {
            "text": "Sets the normal vector for shading subsequent vertices in OpenGL drawing. \n\tPolygons will be flat shaded unless normals are applied to them. \n\tA normal is a vector that is perpendicular to the polygon and points in the direction the \n\tpolygon is facing. Remember polygons with vertices defined in a counter-clockwise winding \n\tpoints forward per the \"right-hand rule\". Polygon shading is based on the angle between \n\tthe normals and the light source. Normals are applied to each vertex in the same way \n\tcolors are, but is usually just defined at the start of each polygon definition. When a \n\tpolygon's normals point directly at the light source, they are brightly shaded; and are \n\tdarker shaded when the angles are skewed. You can refer to standard OpenGL documentation \n\tfor more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglNormal(1,0,0);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glNormal3d"
        },
        "parameters": {
            "text": "(num x, num y, num z)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglNormal()"
        },
        "description": {
            "text": "This command is deprecated. Use fglNormal() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "glNormal3d(1,0,0);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glPointSize"
        },
        "parameters": {
            "text": "(num pointsize)"
        },
        "shortdescription": {
            "text": "Specifies the point size in pixels for subsequent vertices drawn in OpenGL"
        },
        "description": {
            "text": "Specifies the point size in pixels for subsequent vertices drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "glPointSize(5);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glLineWidth"
        },
        "parameters": {
            "text": "(num linewidth)"
        },
        "shortdescription": {
            "text": "Specifies the line width for subsequent lines draw in OpenGL"
        },
        "description": {
            "text": "Specifies the line width for subsequent lines drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "glLineWidth(3);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglEnable"
        },
        "parameters": {
            "text": "(num setting)"
        },
        "shortdescription": {
            "text": "Enables an OpenGL draw setting"
        },
        "description": {
            "text": "Enables an OpenGL draw setting.\n\tNote that for optimization purposes, FlexSim's drawing engine does not automatically restore the \n\tenabled/disabled state of a given setting, so it is up to you, if you use this command, to restore\n\tthe setting to its default after you have executed your drawing functionality. Failing to restore\n\ta setting to its default will result in weird rendering of other objects in the model.\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglEnable(GL_LIGHTING);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glEnable"
        },
        "parameters": {
            "text": "(num setting)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglEnable()"
        },
        "description": {
            "text": "This command is deprecated. Use fglEnable() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglDisable"
        },
        "parameters": {
            "text": "(num setting)"
        },
        "shortdescription": {
            "text": "Disables an OpenGL draw setting"
        },
        "description": {
            "text": "Disables an OpenGL draw setting. See glEnable() for list of draw settings. \n\tYou can refer to standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "fglDisable(GL_LIGHTING);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glDisable"
        },
        "parameters": {
            "text": "(num setting)"
        },
        "shortdescription": {
            "text": "Deprecated, use fglDisable()"
        },
        "description": {
            "text": "This command is deprecated. Use fglDisable() instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glIsEnabled"
        },
        "parameters": {
            "text": "(num setting)"
        },
        "shortdescription": {
            "text": "Returns 1 if the OpenGL setting is enabled, 0 otherwise"
        },
        "description": {
            "text": "Returns 1 if the OpenGL setting is enabled, 0 otherwise. See fglEnable() for list of draw settings. \n\t\t\t\tNote that this is an extremely slow operation and is discouraged. \n\t\t\t\tYou can refer to standard OpenGL documentation for more information if needed. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "glIsEnabled(GL_LIGHTING)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glPushAttrib"
        },
        "parameters": {
            "text": "(num attribsetting)"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glPopAttrib"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, do not use"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "glTexCoord2d"
        },
        "parameters": {
            "text": "(num x 0-1, num y 0-1)"
        },
        "shortdescription": {
            "text": "Deprecated, use the mesh() API"
        },
        "description": {
            "text": "This command is deprecated. Do not use. Use the mesh() API instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fglinfo"
        },
        "parameters": {
            "text": "(num operation, obj view)"
        },
        "shortdescription": {
            "text": "Gets information about a 3D view's draw state"
        },
        "description": {
            "text": "This command gives you access to various information about the draw state of a 3d view. \n\tLogic/data that is performed/returned is based on the operation parameter, as follows: Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window.",
            "b": {
                "text": "FGL_INFO_SHADERTYPE"
            }
        },
        "example": {
            "text": "/*do not draw this object when rendering the shadow map*/"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "drawbox"
        },
        "parameters": {
            "text": "(num x, num y, num z, num sx, num sy, num sz, num glbegin)"
        },
        "shortdescription": {
            "text": "Draws a simple box"
        },
        "description": {
            "text": "Draws a simple box. If glbegin is 1, then it will call glBegin before drawing. \n\tThis command is a shortcut way to draw an OpenGL type cube that allows more control over lighting, \n\tcoloring, and texturing than the drawcube() command. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "drawbox(5,0,0, 2,1,3, 1);"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "flyendnode"
        },
        "parameters": {
            "text": "(node x)"
        },
        "shortdescription": {
            "text": "Gets a reference to the node that represents the stopping point for the current fly path"
        },
        "description": {
            "text": "Returns a reference to the node in the tree that represents the stopping point for the current fly path.  Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "Used in the presentation builder GUI."
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "flyactive"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Returns 1 if there is an fly path running, 0 otherwise"
        },
        "description": {
            "text": "Returns 1 if there is a fly path currently being run, 0 otherwise. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "flyactive()"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "flyupdate"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Updates the currently active fly path"
        },
        "description": {
            "text": "Updates the currently active fly path if there is one Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {},
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "viewtofile"
        },
        "parameters": {
            "text": "(obj view, str path[, num width, num height])"
        },
        "shortdescription": {
            "text": "Saves the specified view as a bitmap image"
        },
        "description": {
            "text": "Saves the specified view as a bitmap image to the specified file. Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths."
        },
        "example": {
            "text": "viewtofile(node(\"VIEW:/active/ortho\"), modeldir() + \"screenshot.bmp\"));"
        },
        "gr": {
            "text": "16"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "avi"
        },
        "parameters": {
            "text": "(int cmd, str filename, num tex, num frame)"
        },
        "shortdescription": {
            "text": "Not fully implemented"
        },
        "description": {
            "text": "Not fully implemented yet. Will eventually apply an avi video as a texture of a 3d object."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mediapath"
        },
        "parameters": {
            "text": "(str projectpath, str filepath, int mode)"
        },
        "description": {
            "text": "Returns strip of the project pathfile from filepath to make it relative, where mode denotes as 1=default, 2=getfile, 3=getpath."
        },
        "example": {
            "text": "int mode = 1;\n\tmediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\program\", \"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\operator.3ds\", mode);"
        },
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "mediafile"
        },
        "parameters": {
            "text": "(str filename)"
        },
        "description": {
            "text": "This command will search (by default in fs3d folder) for the filename and returns the full path plus filename if found."
        },
        "example": {
            "text": "string fullpath = mediafile(\"fs3d\\\\queue_n_color.3ds\");"
        },
        "gr": {
            "text": "0"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "embedfile"
        },
        "parameters": {
            "text": "(num mode, str projectpath, str filepath)"
        },
        "shortdescription": {
            "text": "Embeds a file in a node"
        },
        "description": {
            "text": "This command is used to embed a file in a node. mode can take the following values, 1=embed, 2=extract, 3=remove."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "wmp"
        },
        "parameters": {
            "text": "(num cmd, str file, HWND win, num left, num right, num top, num bottom, num controls)"
        },
        "shortdescription": {
            "text": "Opens the file in Windows Media Player"
        },
        "description": {
            "text": "Opens the file in Windows Media Player."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "randstate"
        },
        "parameters": {
            "text": "(num stream[, seednr])"
        },
        "shortdescription": {
            "text": "Gets the current state value for the random number stream"
        },
        "description": {
            "text": "Returns the current state value for the specified random number stream. This state value may be useful as the seed value in the randinit() command for the purposes of restarting a saved state model from the same point in the random number stream of the initial run. Commands for creating, manipulating, and accessing statistical data; including probability distributions."
        },
        "example": {
            "text": "int curstate = randstate(5);"
        },
        "gr": {
            "text": "18"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "filereadline"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Reads a line from the currently open file"
        },
        "description": {
            "text": "Reads a line from the currently open file. Used with fileopen() Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "string nextline = filereadline();"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "endoffile"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Returns 1 if the end of the currently open file has been reached"
        },
        "description": {
            "text": "Returns 1 if the end of the currently open file has been reached. Used with fileopen() Commands for giving feedback to the modeler for debugging or reporting purposes."
        },
        "example": {
            "text": "while(!endoffile()){string nextline = filereadline();}"
        },
        "gr": {
            "text": "21"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "dbusername"
        },
        "parameters": {
            "text": "(str username, str password)"
        },
        "shortdescription": {
            "text": "Deprecated. Use Database.Connection"
        },
        "description": {
            "text": "This command is deprecated.  Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Database.Connection"
            }
        },
        "example": {
            "text": "dbusername(\"user1\",\"abc123XYZ\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "backupfile"
        },
        "parameters": {
            "text": "(str filepath)"
        },
        "description": {
            "text": "For developer use. Backs up the file by appending a ! onto the specified file's name. Note that this doesn't copy the file. You would do this before an overwrite of a file. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "backupfile(modeldir() + \"mydocument.htm\");"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "sendwindowmessage"
        },
        "parameters": {
            "text": "(HWND window, num msg[, num/str/node wParam, num/str/node lParam])"
        },
        "description": {
            "text": "For developer use. This gives direct access to the Windows API SendMessage() command, sending a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "sendwindowmessage(windowfromnode(view), WM_COPY, 0,0);"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "postwindowmessage"
        },
        "parameters": {
            "text": "(HWND window, num msg[, num/str/node wParam, num/str/node lParam])"
        },
        "description": {
            "text": "For developer use. This gives direct access to the Windows API PostMessage() command, posting a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "postwindowmessage(windowfromnode(view), WM_COPY, 0,0);"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getviewhwnd"
        },
        "parameters": {
            "text": "(obj view, int windowtype)"
        },
        "shortdescription": {
            "text": "Gets the HWND handle for a certain window of a view"
        },
        "description": {
            "text": "Returns a windows HWND handle for a certain window of a view. Each view may use several windows to display data properly. For example, a tree view contains the main window that displays the tree as well as a window that displays the string or number data on a node for editing, as well as a window that displays/edits the name of a node. The windowtype parameter specifies which window handle you want returned, as follows: Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows."
        },
        "example": {
            "text": "sendwindowmessage(getviewhwnd(treeview,2), SCI_SETSEL, 4, 8);"
        },
        "gr": {
            "text": "17"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getproperty"
        },
        "parameters": {
            "text": "(str filename, num property)"
        },
        "description": {
            "text": "For developer use. Gets the value for the specified property in the specified file. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "getproperty(modeldir() + \"MyModel.fsm\",1);"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "setproperty"
        },
        "parameters": {
            "text": "(str filename, num property, str newvalue)"
        },
        "description": {
            "text": "For developer use. Sets the value for the specified property in the specified file to the newvalue. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "setproperty(modeldir() + \"MyModel.fsm\",1,\"Custom Title\");"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fileisreadonly"
        },
        "parameters": {
            "text": "(str filename)"
        },
        "description": {
            "text": "For developer use (Dynamo). Looks for the string \"READONLY\" in the PROPERTY_COMMENTS of the specified file. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "fileisreadonly(pdir() + \"\\\\flexsim.exe\")"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getapplicationtitle"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Returns the current application's title as a string. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "msg(getapplicationtitle(),\"Hello world.\");"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "str"
        }
    },
    {
        "name": {
            "text": "setapplicationtitle"
        },
        "parameters": {
            "text": "(str title)"
        },
        "description": {
            "text": "For developer use. Sets the current application's title. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "setapplicationtitle(\"Custom Application Title\");"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "modeleditmode"
        },
        "parameters": {
            "text": "(num/str mode)"
        },
        "description": {
            "text": "For developer use. Sets the current model edit mode. You can query the current mode with -1. High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "modeleditmode(\"AConnect\");"
        },
        "gr": {
            "text": "33"
        }
    },
    {
        "name": {
            "text": "socketx"
        },
        "parameters": {
            "text": "socketx(int serverclient, int cmd, int port=0, char* data=\"\", linkedlist * thenode=SAFENODE)"
        },
        "shortdescription": {
            "text": "Not implemented yet"
        },
        "description": {
            "text": "Not implemented yet."
        },
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "mesh"
        },
        "parameters": {
            "text": "(node meshnode, int pervertexattribs, int flags)"
        },
        "shortdescription": {
            "text": "Creates an empty mesh and assigns it to meshnode"
        },
        "description": {
            "text": "Creates an empty mesh and assigns it to meshnode. The pervertexattribs takes a bit-wise ORed combination of the following attributes:\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE, MESH_STATIC_DRAW)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "meshaddvertex"
        },
        "parameters": {
            "text": "(node meshnode)"
        },
        "shortdescription": {
            "text": "Adds a vertex to a mesh"
        },
        "description": {
            "text": "Adds a vertex to the mesh associated with meshnode. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "meshaddvertex(Model.find(\"mesh\"))"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "meshsetvertexattrib"
        },
        "parameters": {
            "text": "(node meshnode, int vertindex, int attribid, double param1 [, double param2, double param3, double param4])"
        },
        "shortdescription": {
            "text": "Sets the value of attribid at the vertindex of a mesh"
        },
        "description": {
            "text": "Sets the value of attribid at the vertindex of the mesh associated with meshnode.  The following attributes can be used as the attribid:\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE4, MESH_STATIC_DRAW)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "meshsetattrib"
        },
        "parameters": {
            "text": "(node meshnode, int attribid, double param1 [, double param2, double param3, double param4])"
        },
        "shortdescription": {
            "text": "Adds/sets the value of attribid to the vertindex of a mesh"
        },
        "description": {
            "text": "Sets the value of attribid to be applied to the entire mesh associated with meshnode. The following attributes can be used as the attribid:\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "meshsetattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "meshdraw"
        },
        "parameters": {
            "text": "(node meshnode, int drawmode, int offset, int count [, int stride])"
        },
        "shortdescription": {
            "text": "Draws a mesh"
        },
        "description": {
            "text": "Draws the mesh associated with meshnode. The value for drawmode can be any of the following:\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "meshdraw(node(\"/mesh\",model()), GLTRIANGLES, 0, 3, 0)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "meshaddindex"
        },
        "parameters": {
            "text": "(node meshnode, int index)"
        },
        "shortdescription": {
            "text": "Adds an indexed vertex to a mesh"
        },
        "description": {
            "text": "Adds an indexed vertex to the mesh associated with meshnode.\n\tThis command is ignored if the mesh does not have a MESH_INDEXED flag. Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "int newindex = meshaddindex(node(\"/mesh\",model()), 4)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "meshinfo"
        },
        "parameters": {
            "text": "(node meshnode, int type[,int index, int param])"
        },
        "shortdescription": {
            "text": "Gets the specified information from a mesh"
        },
        "description": {
            "text": "Gets the specified information from the mesh associated with meshnode.  Index is the index of the requested vertex (base 0).  Type is specified as one of the following for the mesh (index and param ignored):\n\t Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window."
        },
        "example": {
            "text": "double xposition = meshinfo(Model.find(\"mesh\"), MESH_POSITION, 6, MESH_POS_X)"
        },
        "gr": {
            "text": "2"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "cubemap"
        },
        "parameters": {
            "text": "(int cmd, int FACEa, int FACEb, int FACEc, int FACEd, int FACEe, int FACEf)"
        },
        "shortdescription": {
            "text": "Attaches 2D images to vertices of a 3D model"
        },
        "description": {
            "text": "This command can be used to attach 2D images to vertices of a 3D model and the texture image is wallpapered onto the geometry of the 3D model. The six faces can be defined by FACEa, FACEb, FACEc, FACEd, FACEe, and FACEf. We can directly use the number of the reference texture after importing into media files.\n\tThe parameter cmd will take the following values whenever writing OpenGL call sequences."
        },
        "example": {
            "text": "cubemap(2, 39,39,39,39,39,39);"
        },
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "simexec"
        },
        "parameters": {
            "text": "(num cmd, num v1)"
        },
        "description": {},
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "trackpopup"
        },
        "parameters": {
            "text": "(node thenode)"
        },
        "description": {},
        "example": {},
        "gr": {
            "text": "0"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "copycolor"
        },
        "parameters": {
            "text": "(obj highlightedobj)"
        },
        "description": {
            "text": "For developer use. Copies the color of the highlighted object to all of the selected objects High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "copycolor(current)"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "createglobaltasksequence"
        },
        "parameters": {
            "text": "(str name, obj dispatcher [, obj dp1, obj dp2, obj dp3, obj dp4, obj dp5])"
        },
        "shortdescription": {
            "text": "Deprecated, use Process Flow instead"
        },
        "description": {
            "text": "This command is deprecated. Use Process Flow instead. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "treenode ts = createglobaltasksequence(\"GlobalTS\", current.centerObjects[1])"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "documentusercommands"
        },
        "parameters": {
            "text": "()"
        },
        "description": {
            "text": "For developer use. Accesses the current model's command documenation and updates a file called usercommands.xml so that the user commands are included in the command documentation High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "documentusercommands();"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "emptyfluidobject"
        },
        "parameters": {
            "text": "(obj object)"
        },
        "shortdescription": {
            "text": "Sets the contents of the fluid object to 0"
        },
        "description": {
            "text": "Sets the contents of the fluid object to 0. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "emptyfluidobject(current);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getnetnode"
        },
        "parameters": {
            "text": "(obj object, num nodenr)"
        },
        "shortdescription": {
            "text": "Gets the nth network node connected to object with an A connection line"
        },
        "description": {
            "text": "Returns the nth network node connected to the object with a \"blue\" or \"station\" connection line Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "getnetnode(current, 1)"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "getnetnodespline"
        },
        "parameters": {
            "text": "(obj netnode, num edgenr)"
        },
        "shortdescription": {
            "text": "Gets a reference to the spline head of netnode's edge edgenr"
        },
        "description": {
            "text": "Returns a reference to the spline head for the specified edge of the network node. You can \n\tuse spline() commands to then access location data for that spline. Note that the spline head may not be \n\tinside the network node you're passing, but rather may be in the network node on the other side of the edge.\n\tYou can use the isedgeforward() command to query whether the spline is inside the network node. If not, then\n\tspline percentages disances passed to the spline() command will be backwards.\n\t Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "treenode splinehead = getnetnodespline(netnode, 2);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "getnetworkdistance"
        },
        "parameters": {
            "text": "(num fromnetnoderank, num tonetnoderank)"
        },
        "shortdescription": {
            "text": "Gets the network distance between two network nodes"
        },
        "description": {
            "text": "Returns the network distance between the network nodes. Note that the \n\tnetwork nodes are referenced by their member ranks, not by the pointer to the network node. \n\tUse rankfromnetnode() to get a network node's member rank.\n\t Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "getnetworkdistance(rankfromnetnode(current), rankfromnetnode(current.outObjects[1]));"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getnextparametersobject"
        },
        "parameters": {
            "text": "(obj startobject, str guifocus, num doguifocusclass, num searchforward)"
        },
        "description": {
            "text": "For developer use. Used in parameters window to access the next object when the \"Next\" button on the parameters window is pressed.\n\t High-level development commands not typically intended for end users."
        },
        "example": {
            "text": "Refer to object parameters properties windows in the view tree"
        },
        "gr": {
            "text": "33"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "getnextnetnode"
        },
        "parameters": {
            "text": "(num fromnn, num tonn)"
        },
        "shortdescription": {
            "text": "Gets the rank of the next network node from fromnn in order to get to tonn"
        },
        "description": {
            "text": "Returns the rank of the next network node to go to from one network node in getting to \n\tthe destination network node. The return value and parameters will all be network node member\n\tranks. Use rankfromnetnode() to get the member rank of a network node, and netnodefromrank()\n\tto get the network node from the member rank.\n\t Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "treenode nextnode = netnodefromrank(getnextnetnode(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\"))));"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getnextnetnodeoutport"
        },
        "parameters": {
            "text": "(num fromnn, num tonn)"
        },
        "shortdescription": {
            "text": "Gets the output port of the network node fromnn in order to get to tonn"
        },
        "description": {
            "text": "Returns the output port, or edge number, to go to in getting from a source network node\n\tto a destination network node.\n\t Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "int outport = getnextnetnodeoutport(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\")));"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "gettenetnode"
        },
        "parameters": {
            "text": "(obj taskexecuter)"
        },
        "shortdescription": {
            "text": "Gets the current network node that a taskexecuter is attached to with an A Connection"
        },
        "description": {
            "text": "Returns the current network node that a taskexecuter (TE) is attached to with a red line. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "treenode netnode = gettenetnode(current);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "gettenavigator"
        },
        "parameters": {
            "text": "(obj taskexecuter)"
        },
        "shortdescription": {
            "text": "Gets the current navigator that a taskexecuter is connect to"
        },
        "description": {
            "text": "Returns the current navigator that a taskexecuter (TE) is connected to, either DefaultNavigator or DefaultNetworkNavigator. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "treenode navigator = gettenavigator(current);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "gettenetworkinfo"
        },
        "parameters": {
            "text": "(obj taskexecuter, obj destobj, num info)"
        },
        "shortdescription": {
            "text": "Gets information regarding the current state of a taskexecuter on a node network"
        },
        "description": {
            "text": "Returns information regarding the current state of a taskexecuter on a node network. Valid queries are as follows: Commands associated with NetworkNode objects and network paths.",
            "b": [
                {
                    "text": "NETWORK_INFO_DEST_NET_NODE_RANK"
                },
                {
                    "text": "NETWORK_INFO_ORIGIN_NET_NODE_RANK"
                },
                {
                    "text": "NETWORK_INFO_DISTANCE"
                },
                {
                    "text": "NETWORK_INFO_CUR_DIST_ALONG_EDGE"
                },
                {
                    "text": "NETWORK_INFO_CUR_TRAVEL_ORIGIN_RANK"
                },
                {
                    "text": "NETWORK_INFO_CUR_TRAVEL_DEST_RANK"
                }
            ]
        },
        "example": {
            "text": "int destrank = gettenetworkinfo(current, NULL, NETWORK_INFO_CUR_TRAVEL_DEST_RANK);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getutilizedobject"
        },
        "parameters": {
            "text": "(obj dispatcher, obj involved, obj station, num utilizednr)"
        },
        "shortdescription": {
            "text": "Gets a reference to an operator that is currently executing a utilize task"
        },
        "description": {
            "text": "Finds and returns a reference to an operator that is currently executing a utilize task\n\twith the given involved and station variables. If multiple operators are being used, then utilizednr allows\n\tyou to distinguish which one you want to reference.\n\t Commands associated with TaskExecuter objects and a tasksequence."
        },
        "example": {
            "text": "treenode op = getutilizedobject(current.centerObjects[1], item, current, 1);"
        },
        "gr": {
            "text": "24"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "inititem"
        },
        "parameters": {
            "text": "(obj item)"
        },
        "shortdescription": {
            "text": "Initializes the FixedResource variables of a flowitem"
        },
        "description": {
            "text": "Initializes the FixedResource variables of a flowitem, usually done when the flowitem first enters the fixed resource. This is usually already done for you, but may be used in some exceptional cases when developing your own BasicFR object behavior.\n\t Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object."
        },
        "example": {
            "text": "inititem(item)"
        },
        "gr": {
            "text": "29"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "isedgeforward"
        },
        "parameters": {
            "text": "(obj netnode, num edgenr)"
        },
        "shortdescription": {
            "text": "Returns 1 if the network node's edge is forward, 0 otherwise"
        },
        "description": {
            "text": "Returns 1 if the network node's edge is \"forward\" meaning when created, the connection was \n\tdragged FROM this network node to the other network node. If the edge is forward, then the spline head is\n\tcontained by this network node, and the spline distance values go forward from this network node.\n\t Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "isedgeforward(current, 2)"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "netnodefromrank"
        },
        "parameters": {
            "text": "(num rank)"
        },
        "shortdescription": {
            "text": "Returns the network node member at rank rank"
        },
        "description": {
            "text": "Takes a network node member rank and returns the actual reference to the network node. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "treenode netnode = netnodefromrank(5);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "rankfromnetnode"
        },
        "parameters": {
            "text": "(obj netnode)"
        },
        "shortdescription": {
            "text": "Returns the member rank of network node netnode"
        },
        "description": {
            "text": "Takes a network node reference and returns the member rank of that network node. Each network node has a specific \"member rank\", which is used as a \n\trow/column reference in the network's distance and next node tables. The first network node that is added to a model gets member rank 1, the second gets member rank\n\t2, and so on. Commands associated with NetworkNode objects and network paths."
        },
        "example": {
            "text": "int memberrank = rankfromnetnode(current);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "trafficcontrolinfo"
        },
        "parameters": {
            "text": "(obj trafficcontrol, num info [, num a, num b])"
        },
        "shortdescription": {
            "text": "Gets information on a traffic controller"
        },
        "description": {
            "text": "This command gives you access to various information on a traffic control, as well as lets you direct the traffic control\n\tto perform logic. Logic/data that is performed/returned is based on the info parameter, as follows: Commands associated with NetworkNode objects and network paths.",
            "b": [
                {
                    "text": "trafficcontrolinfo(tc, TCI_NR_ACTIVE_TRAVELERS)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER, num travelnr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_COUPLING, num travelernr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_RANK_FROM_TRAVELER, obj traveler)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_NR_MEMBERS)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_MEMBER, num membernr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_MEMBER_COUPLING, num membernr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_MEMBER_RANK_FROM_NETWORK_NODE, obj netnode)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_NR_ENTRY_REQUESTS)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_TRAVELER, num requestnr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NETWORK_NODE, num requestnr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NODE, num requestnr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_ALLOW_ENTRY, num requestnr)"
                },
                {
                    "text": "trafficcontrolinfo(tc, TCI_SET_ENTRY_REQUEST_RANK, num requestnr, num settorank)"
                },
                {
                    "text": "TC_ON_ENTRY_REQUEST_DEFAULT"
                },
                {
                    "text": "TC_ON_ENTRY_REQUEST_ALLOW"
                },
                {
                    "text": "TC_ON_ENTRY_REQUEST_QUEUE"
                }
            ]
        },
        "example": {
            "text": "treenode netnode = trafficcontrolinfo(tc, TCI_MEMBER, 2);"
        },
        "gr": {
            "text": "27"
        },
        "returntype": {
            "text": "num/node"
        }
    },
    {
        "name": {
            "text": "addsystemcontrolleritem"
        },
        "parameters": {
            "text": "(obj systemcontroller, num productid, num linenum, num target, num starttime [, num newcolumn1, num newcolumn2, num newcolumn3, num newcolumn4])"
        },
        "shortdescription": {
            "text": "For Dynamo use"
        },
        "description": {
            "text": "For Dynamo use. Adds a new line item to a SystemController's schedule during a model run. Does not actually add a new row to the table. The parameters are the same data that the SystemController's schedule requires. The newcolumn parameters are numbers that could have been added to each row of the SystemController's schedule table. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "addsystemcontrolleritem(current.centerObjects[1],0,1,1,0);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getlinecontrollerdata"
        },
        "parameters": {
            "text": "(obj linecontroller, num datatype, num column)"
        },
        "shortdescription": {
            "text": "For Dynamo use"
        },
        "description": {
            "text": "For Dynamo use. Returns data about the LineController's current job, 1 = ProdID, 2 = LineNum, 3 = Target, 4 = StartTime. 5 = Extra Column Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "getlinecontrollerdata(current,1,0);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getreportnum"
        },
        "parameters": {
            "text": "(node report, int column, int rowsback)"
        },
        "shortdescription": {
            "text": "For Dynamo use"
        },
        "description": {
            "text": "For Dynamo use. Returns the value from a Report object that is in the specified column. The row is determined by subtracting the rowsback parameter from the number of rows in the table. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "double myval = getreportnum(current,3,0);"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "notifylinecontroller"
        },
        "parameters": {
            "text": "(node object, int controllernum, num output, num sendinglast [0/1])"
        },
        "shortdescription": {
            "text": "For Dynamo use"
        },
        "description": {
            "text": "For Dynamo use. Informs a LineController connected to the object that material has left the line so the Controller can decide if the run is complete. The number of the LineController to be notified is the contollernum parameter. The object should report how much material (of any kind) has left it since the model began running and whether or not the material leaving is the last material in the object. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "notifylinecontroller(current,1,current.stats.output + 1,(current.subnodes.length == 1));"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "updatereport"
        },
        "parameters": {
            "text": "(num/str/node report)"
        },
        "shortdescription": {
            "text": "For Dynamo use"
        },
        "description": {
            "text": "For Dynamo use. Causes the specified Report to add a new row to its table and populate it correctly. This is used to add entries that are not time-based. Miscellaneous commands that have not been categorized."
        },
        "example": {
            "text": "updatereport(\"ResultsReport\");"
        },
        "gr": {
            "text": "30"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "exportfullhistory"
        },
        "parameters": {
            "text": "([str filename, num scenario, num replication])"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Writes to a database (.mdb file) the Full History data that was collected during a run. If a file name is passed to this command, that name willbe used for the database. If no file name is passed in, the user will be prompted for a file to save the data to. If the file (either passed in or selected from a dialog) does not exist, it will be created. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "exportfullhistory(\"myrundata.mdb\");"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "openflexsimchart"
        },
        "parameters": {
            "text": "([str filename1] [,str filename2])"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "excelsave"
        },
        "parameters": {
            "text": "([str filename])"
        },
        "shortdescription": {
            "text": "Saves the currently open Excel file"
        },
        "description": {
            "text": "Saves the currently open Excel file. If a filename is passed to this command, the file will be saved with that name. This is the equivalent of selecting Save As from Excel's File menu. If no parameters are passed to this command, the file will be saved with its current name, and the original file will be overwritten. This is the equivalent of selecting Save from Excel's File menu. Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel."
        },
        "example": {
            "text": "excelsave(\"runresults_001.xls\")"
        },
        "gr": {
            "text": "19"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "addfullhistorystaterecord"
        },
        "parameters": {
            "text": "(num time, num state, obj object)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Adds a new entry to the State table that is recorded when Full History is enabled. The new entry records that the specified object passed in as the third parameter changed to the specified state at the time that is entered as the first parameter. This should only need to be called if the object is having its state changed by soem command other than setstate(). Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "addfullhistorystaterecord(time(), STATE_IDLE, current);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "addfullhistorymoverecord"
        },
        "parameters": {
            "text": "(num flowitemid, num time, obj origin, obj destination, num itemtype)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Adds a new entry to the Movement table that is recorded when Full History is enabled. The new entry records that the flowitem identified by flowitemid moved from the orgin object to the destination object and the specified time. The entry also records that the flowitem's itemtype at the time of the movement was the itemtype passed as the third parameter. Users should only have to use this command in very rare situations. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "addfullhistorymoverecord(getnodenum(uniqueid(item)), time(), current, current.outObjects[1], item.type);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "clearfullhistory"
        },
        "parameters": {
            "text": "(int resetuniqueid)"
        },
        "shortdescription": {
            "text": "Deprecated"
        },
        "description": {
            "text": "This command is deprecated. Deletes all of the data that has been collected by the Full History system. If resetuniqueid is 1, then the unique IDs of the flowitems that are created after this command is called will being again at 1. Typically, this parameter should be 0, as that will continue numbering so that old flowitems are not confused with new flowitems. Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead."
        },
        "example": {
            "text": "clearfullhistory(0);"
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "fluidcontent"
        },
        "parameters": {
            "text": "(obj fluidobject)"
        },
        "shortdescription": {
            "text": "Gets the current fluid content of fluidobject"
        },
        "description": {
            "text": "Returns the current fluid content of the specified Fluid Object. It is the same as reading the \"curcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "double objcontent = fluidcontent(current.outObjects[1]);"
        },
        "gr": {
            "text": "10"
        }
    },
    {
        "name": {
            "text": "fluidmaxcontent"
        },
        "parameters": {
            "text": "(obj fluidobject)"
        },
        "shortdescription": {
            "text": "Gets the max fluid content of fluidobject"
        },
        "description": {
            "text": "Returns the defined maximum fluid content of the specified Fluid Object. It is the same as reading the \"maxcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "double objmaxcontent = fluidmaxcontent(current.outObjects[1]);"
        },
        "gr": {
            "text": "10"
        }
    },
    {
        "name": {
            "text": "createtickevent"
        },
        "parameters": {
            "text": "(obj fluidobject)"
        },
        "shortdescription": {
            "text": "Creates a tick event for fluidobject and all objects assigned to that Ticker"
        },
        "description": {
            "text": "Creates a Tick event for the Fluid Object that is passed in and all of the other Fluid Objects that are controlled by the same Ticker. This allows the user to cause fluid material to move at times that are not the Ticker's normal tick times. The user can also pass a specific Ticker as the parameter to this command. Commands for creating, searching and manipulating events."
        },
        "example": {
            "text": "createtickevent(current);"
        },
        "gr": {
            "text": "14"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "reassignticker"
        },
        "parameters": {
            "text": "(obj fluidobject, obj ticker[, int resortticker])"
        },
        "shortdescription": {
            "text": "Reassigns the Fluid Object's ticker"
        },
        "description": {
            "text": "Changes the Fluid Object passed in as the first parameter from the control of its current Ticker, to the Ticker that is passed in as the second parameter. The object will then have its fluid movement calculated whenever the new Ticker's tick-time elapses. It is recommended that Fluid Objects that are connected to each other always be controlled by the same Ticker. If resortticker is 1, then the new Ticker will immediately resort its list of controlled objects. This may change the order that some fluid objects are evaluated and may have side-effects in the model behavior. Commands for accessing and assigning data on objects."
        },
        "example": {
            "text": "reassignticker(current,Model.find(\"Ticker2\",1);"
        },
        "gr": {
            "text": "10"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "query"
        },
        "parameters": {
            "text": "(str query[, node/num/str p1, node/num/str p2, ...])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            },
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/SQLQueries/SQLQueries.html",
                "text": "SQL Queries"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "setquerynode"
        },
        "parameters": {
            "text": "(node queryNode)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            },
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/SQLQueries/SQLQueries.html",
                "text": "SQL Queries"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "dumpquery"
        },
        "parameters": {
            "text": "(node dumpNode[, num asTable])"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "getquerymatchcount"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getqueryvalue"
        },
        "parameters": {
            "text": "(num row, num/str col)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            },
            "b": [
                {
                    "text": "row"
                },
                {
                    "text": "col"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num/str/node"
        }
    },
    {
        "name": {
            "text": "getquerycolcount"
        },
        "parameters": {
            "text": "()"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "getquerymatchtablerow"
        },
        "parameters": {
            "text": "(str/num table, num matchRow)"
        },
        "shortdescription": {
            "text": "Deprecated, use Table.query()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Table"
            },
            "MethodRef": {
                "class": "Table",
                "text": "query"
            },
            "b": [
                {
                    "text": "table"
                },
                {
                    "text": "matchRow"
                }
            ]
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "$iter"
        },
        "parameters": {
            "text": "(num index)"
        },
        "shortdescription": {
            "text": "See User Manual > Miscellaneous Concepts > SQL Queries"
        },
        "description": {
            "text": "See Miscellaneous Concepts >  Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree.",
            "a": {
                "href": "flexsimdir/manual/Reference/DeveloperAdvancedUser/SQLQueries/SQLQueries.html",
                "text": "SQL Queries"
            }
        },
        "example": {},
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num/node"
        }
    },
    {
        "name": {
            "text": "getsdtvalue"
        },
        "parameters": {
            "text": "(node sdtNode, str valName)"
        },
        "shortdescription": {
            "text": "For developer use"
        },
        "description": {
            "text": "Primarily for developer use only. Returns the value of the named class member of a node that has \"SimpleDataType\" data. We\n\tdiscourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members\n\tand their names, so model code that accesses these values by name may not work in future versions. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {},
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "num/node/str"
        }
    },
    {
        "name": {
            "text": "setsdtvalue"
        },
        "parameters": {
            "text": "(node sdtNode, str valName, num/str/node toVal)"
        },
        "shortdescription": {
            "text": "For developer use"
        },
        "description": {
            "text": "Primarily for developer use only. Sets the value of the named class member of a node that has \"SimpleDataType\" data. We\n\tdiscourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members\n\tand their names, so model code that accesses these values by name may not work in future versions. Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree."
        },
        "example": {},
        "gr": {
            "text": "8"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "listpull"
        },
        "parameters": {
            "text": "(str/obj list, str/node query, num requestNum [, num requireNum, str/node/num puller, str/node/num partitionId, num flags])"
        },
        "shortdescription": {
            "text": "Deprecated, use List.pull()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "List"
            },
            "MethodRef": {
                "class": "List",
                "text": "pull"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node/str/num/array"
        }
    },
    {
        "name": {
            "text": "listpush"
        },
        "parameters": {
            "text": "(str/obj list [, str/node/num pushVal, str/node/num partitionId, ...])"
        },
        "shortdescription": {
            "text": "Deprecated, use List.push()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "List"
            },
            "MethodRef": {
                "class": "List",
                "text": "push"
            }
        },
        "example": {},
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node/str/num/array"
        }
    },
    {
        "name": {
            "text": "globallist"
        },
        "parameters": {
            "text": "(str listName)"
        },
        "shortdescription": {
            "text": "Deprecated, use List(\"GlobalListName\")"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "List"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "listbackorders"
        },
        "parameters": {
            "text": "(obj list[, var partitionId])"
        },
        "shortdescription": {
            "text": "Deprecated, use List.backOrders()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "List"
            },
            "MethodRef": {
                "class": "List",
                "text": "backOrders"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "listentries"
        },
        "parameters": {
            "text": "(obj list[, var partitionId])"
        },
        "shortdescription": {
            "text": "Deprecated, use List.entries()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "List"
            },
            "MethodRef": {
                "class": "List",
                "text": "entries"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "node"
        }
    },
    {
        "name": {
            "text": "listremove"
        },
        "parameters": {
            "text": "(obj entryOrBackOrder)"
        },
        "shortdescription": {
            "text": "Deprecated, use List.backOrders()[backOrderNum].remove() or List.entries()[enterNum].remove()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": [
                {
                    "text": "List"
                },
                {
                    "text": "List"
                }
            ],
            "MethodRef": [
                {
                    "class": "List",
                    "text": "backOrders"
                },
                {
                    "class": "List",
                    "text": "entries"
                }
            ]
        },
        "gr": {
            "text": "31"
        },
        "returntype": {}
    },
    {
        "name": {
            "text": "groupaddmember"
        },
        "parameters": {
            "text": "(str group, obj member)"
        },
        "shortdescription": {
            "text": "Deprecated, use Group.addMember()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            },
            "MethodRef": {
                "class": "Group",
                "text": "addMember"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "groupmember"
        },
        "parameters": {
            "text": "(str group, num member)"
        },
        "shortdescription": {
            "text": "Deprecated, use Group[]"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "obj"
        }
    },
    {
        "name": {
            "text": "groupnummembers"
        },
        "parameters": {
            "text": "(str group)"
        },
        "shortdescription": {
            "text": "Deprecated, use Group.length()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            },
            "PropertyRef": {
                "class": "Group",
                "text": "length"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    },
    {
        "name": {
            "text": "groupremovemember"
        },
        "parameters": {
            "text": "(str group, num/obj member)"
        },
        "shortdescription": {
            "text": "Deprecated, use Group.removeMember()"
        },
        "description": {
            "text": "This command is deprecated. Use  Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead.",
            "ClassRef": {
                "text": "Group"
            },
            "MethodRef": {
                "class": "Group",
                "text": "removeMember"
            }
        },
        "gr": {
            "text": "31"
        },
        "returntype": {
            "text": "num"
        }
    }
]
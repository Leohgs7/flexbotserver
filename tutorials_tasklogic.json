[
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial1TaskLogicTools/TaskLogicToolsOverview/TaskLogicToolsOverview.html",
        "title": "Tutorial 1 - Task Logic Tools",
        "content": "This tutorial will walk you through the different tools and approaches to creating tasks for task executers. You'll learn several different approaches and the advantages or disadvantages of each method. For example, you'll learn how to create tasks using standard 3D logic and process flows that use lists. Tasks Covered This tutorial will cover the following tasks: Task 1.1 Tasks Using Standard 3D Logic In this tutorial task, you'll learn how to build tasks using the standard logic that is available on 3D objects. Many of the 3D fixed resources have properties and basic logic that can be used to assign simple tasks to task executers, such as basic loading and unloading tasks or requiring an operator to be present during processing time. This tutorial will teach you how to create the logic for these simple tasks. Task 1.2 Tasks Using Process Flow In this tutorial task, you'll get an introduction to building tasks using process flow. You'll learn some of the advantages of using Process Flow to create task logic, including the ability to customize tasks. Task 1.3 Task Using Lists In this task, you'll learn how to build tasks using lists in a process flow. Lists have the added advantage of allowing you to sort or prioritize tasks using your own custom criteria. This tutorial will also include a discussion of the pros and cons of building tasks with lists. Task 1.4 Task Using Global Lists In this task, you'll learn about a different system for building tasks that uses global lists and task sequences. In this system, you'll pre-build a task sequence for each flow item that needs to be transported and push those task sequences to a global list. Operators will then pull tasks from the task sequence list. As with the previous tutorial, you'll learn about the disadvantages and advantages of this method. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Key Concepts About Task Logic"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial1TaskLogicTools/1-1TasksStandard3DLogic/1-1TasksStandard3DLogic.html",
        "title": "Tutorial Task 1.1 - Tasks Using Standard 3D Logic",
        "content": "Task Overview In this series of tutorials, you'll learn about the different methods for creating task logic for task executers. If you are unfamiliar with what tasks or task executers are, consider reading Key Concepts About Task Logic before completing this tutorial. In this first tutorial task, you'll learn how to build tasks using the standard logic that is available on 3D objects. Many of the 3D fixed resources have properties and basic logic that can be used to assign simple tasks to task executers, such as basic loading and unloading tasks or requiring an operator to be present during processing time. This tutorial will teach you how to create the logic for these simple tasks. This task will also include an analysis of the advantages and disadvantages of this method. When you're finished, your 3D model will work similar to the following image: Step 1 Build the 3D Model In this step, you'll build a basic 3D model for this tutorial. You'll first add a plane that will act as a container for the 3D objects in the model. Then, you'll add the 3D objects you'll need for this model. When you're finished, your model should look similar to the following image: To build this model: Make sure your 3D model window is open and active. From the Library, drag a Plane (under Visual ) into the 3D model. With the plane selected, in Properties, change the name of the plane to StandardLogic . Click the arrow next to the color box to open the color selector menu. Choose the lightest shade of yellow. Change the plane's X-size to 21.00 . Drag the following 3D objects onto the plane: A Source A Queue A Processor A Sink An Operator Arrange the 3D objects so that they are roughly in the same position as shown in the image at the beginning of this step. Double-check that the names of each 3D object ends in a 1 , such as Sink1 , Queue1 , etc. Check your model to ensure it looks similar to the image shown at the beginning of this step. Step 2 Create a Task Using Standard 3D Object Logic In this step, you'll learn how to create simple transportation tasks using the standard logic available on 3D objects. You'll set up the operator to transport flow items from the queue to the processor, which is a relatively easy and straightforward process in FlexSim. You'll also change the item arrival rates and processing times. To make these changes: Create port-connections (A-connects) between the following objects: From Source1 to Queue1 From Queue1 to Processor1 From Processor1 to Sink1 Create a center port connection (S-connect) from Queue1 to Operator1 . Click Queue1 to bring up its properties on the right. Under the Output section, check the Use Transport box. Confirm that the Use Transport box states current.centerObjects[1] . What Does This Code Mean? The code current means that it will refer to the current object. In this case, it's the queue. The code centerObjects[1] tells the property to use the task executer that is connected to the current object's first center port. In this case, it's the operator. Click Source1 to bring up its properties on the right. Under the Source section, check the Arrival at Time 0 box. In the Inter-Arrivaltime box, delete the current text and type 5 . Reset and run the model: When a flow item arrives in the queue, the operator will transport it to the processor as soon as the processor is available. Step 3 Add Additional Operators Now that you've built a simple transportation task using the standard logic, you'll make it a little more complex by adding a second operator to the model. In standard logic, you need a dispatcher object in order to assign tasks to more than one operator. This step will walk you through the process of setting up this system. When you're finished, your 3D model should look similar to the following image: To add a second operator to your model: Remove the center port connection between Queue1 and Operator1 . To remove center port connections, press and hold the W key while clicking two connected objects.) From the Library, drag a Dispatcher and place it on the plane near Queue1 . Also drag a second Operator onto the plane. Rename the operators as follows: Object New Name Operator1 Operator1A Operator2 Operator1B Click Operator1B to select it. In Properties, click the arrow next to the color selector box and select the turquoise color. Create a center port connection (S-connect) from Dispatcher1 to Queue1 . Create port connections (A-connects) from Dispatcher1 to Operator1A and Operator1B . Make Sure You Connect in the Right Order Make sure the port connections go from the dispatcher to the operators and not the other way around. Otherwise, the logic won't work correctly. Click Dispatcher1 to bring up its properties on the right. Under the Dispatcher section, click the arrow next to the Pass To box to open a menu. Select Round Robin If Available . The Queue Is Already Using Its Center Port for Transport Normally when setting up a dispatcher to manage transportation, you would need to tell the queue to assign transportation tasks to the task executer connected to its center port. However, you don't need to do that here because you already set up that functionality in a previous step. Reset and run the model: Notice that not much changes when you add a second operator in this scenario. The system isn't any more efficient than it was with one operator. A lot of that has to do with how the standard logic has operators wait at the processor until it has finished processing a flow item. With this logic, it doesn't help to have an extra operator very much. Step 4 Add a Second Processor Transportation tasks sometimes become more complicated when you add more than one possible destination. In this step, you'll add a second processor to the model to see how this affects the standard logic. You'll also add a new type of task for the operator to work on to get a better sense of how adding a second processor affects the overall logic of the system. In this step, you'll require the operator to be present at Processor1A during the processor's setup time. This means that a flow item will sit at the processor until an operator can be present at the processor. The operator is needed to complete the necessary setup before the item can be processed. To add a second processor and create the setup time logic: Remove the port connection from Dispatcher1 to Operator1B . (To remove port connections, press and hold the Q key while clicking two connected objects.) Don't Delete Operator1B You won't use Operator1B for the rest of the steps in this tutorial task, but you'll bring Operator1B back again in the next tutorial task. Click the StandardLogic plane to select it. In Quick Properties, change the plane's Y-size to 10.00 to make it wider. Drag a second Processor onto the plane. Rename the processors as follows: Object New Name Processor1 Processor1A Processor2 Processor1B Create port connections (A-connects): From Queue1 to Processor1B From Processor1B to Sink1 Click Processor1B to bring up its properties on the right. Under the Processor section, change the Process Time to 5 . Create a center-port connection (S-connect) from Dispatcher1 to Processor1A . Click Processor1A to bring up its properties on the right. Under the Processor section in the Setup Time box, delete the current number and type 5 . Check the Use Operator(s) for Setup checkbox. Confirm that the Pick Operator box states current.centerObjects[1] . Reset and run the model: Notice that Operator1A tends to perform tasks in this repeated order: Transports items to Processor1A Transports items to Processor1B Completes the setup time for Processor1A (which takes 5 seconds) It would probably make more sense if the operator stayed and completed the setup for Processor1A before moving on to transport items to Processor1B. However, the operator doesn't perform the tasks in this order because it determines which tasks it will work on using FIFO logic (first in first out). In other words, the operator will do tasks in the order in which it receives the tasks that are assigned to it. In this case, Queue1 and Processor1A are both assigning tasks to the operator. Queue1 assigns transportation tasks any time a port is free to receive a flow item. Processor 1A assigns a tasks when it has a flow item and is ready to have the operator assist with the setup time. Because Processor 1A will always assign tasks after Queue1 assigns transportation tasks, the setup time will never be done immediately after Processor1A receives a flow item. The solution to this problem is to add priority levels and preemption logic to tasks, which will be covered in the next step. Step 5 Add Priority and Preemption As you saw at the end of the last step, the operator sometimes performs tasks in a strange order. Because the operator uses FIFO logic (first in, first out) to perform tasks, it sometimes performs tasks in an order that aren't efficient or intuitive. In this step, you'll learn how to fix this problem using task priority levels. You can override the FIFO task logic by assigning tasks a priority number. Task executers will complete tasks with higher priority numbers before tasks with lower priority numbers. By default, all tasks have a priority level of 0, so task executers will work on any task with a priority of 1 or higher first. (See Task Priorities and Preemption for more information.) In this step, you'll assign the setup time task a priority of 1 so that the operator will work on it immediately after delivering a flow item to it. To add priorities to the setup time task: Click Processor1A to bring up its properties on the right. Under the Processor section, click in the Priority box and change the number to 1.00 . Confirm that the Preemption menu is currently set to preempt only . Reset and run the model: Notice that the operator now stays and completes the setup time on Processor1A before leaving to work on any other tasks. Conclusion Now that you've built transportation tasks using the standard 3D operating logic, you can see that it has a few advantages: Quick to set up - You'll notice that setting up a basic model that uses the standard operating logic was relatively fast and easy. Ease of use - If you want to create a simple transportation task that uses standard logic, it's probably best to use the standard operating logic because it is so straightforward and simple. Preemption and priorities - It's relatively easy to assign priority levels and preemption to tasks using the standard 3D object logic. However, there are some significant disadvantages that come from using the standard operating logic. To use the example from the model you just built: Some inefficiencies - As was pointed out earlier, it's difficult to study how adding additional operators would help make the system efficient or not since they don't always behave how you would expect actual operators to work in a normal business system. Unexpected behavior - Sometimes an operator might perform tasks in a strange order because it was responding to the timing of events in the simulation model. Each 3D object has a specific order of events that will control when it does a specific action. One problem is that these order of events aren't easy to discover and their logic isn't visible, so it's difficult to know how to predict or troubleshoot a particular problem caused by timing issues. Intermediate tasks - What if you needed to add an intermediate task in between the queue and the processor? For example, imagine that the operator was supposed to stop at a computer and scan the flow item's bar code or that the operator needed to weigh the flow item before putting it on the processor. Custom logic would be quite difficult to build into the standard logic system. Model scalability - What if a single flow item needed to be transported by two operators at a time? What if you wanted to be able to add additional operators to study how many employees are needed to keep up with the work load? As soon as you add more complexity to your model, the standard logic becomes a little more difficult to scale. While it was easy to set up the standard 3D logic for this basic transportation task, it becomes a lot less easy to set up as soon as you try to adapt it or customize it for a more complex business process. That's when it becomes more useful to use the Process Flow tool. In the next several tutorial tasks, you'll learn about several different methods for creating a simple transportation task using the Process Flow tool. You'll learn more about the advantages and disadvantages of each system. Continue on to Tutorial Task 1.2 - Tasks Using Process Flow ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial1TaskLogicTools/1-2TasksProcessFlow/1-2TasksProcessFlow.html",
        "title": "Tutorial Task 1.2 - Tasks Using Process Flow",
        "content": "Task Overview In this tutorial task, you'll get a comprehensive introduction to building tasks using task sequences in a process flow. This tutorial will show you some of the advantages and disadvantages of working in Process Flow, such as: Adding intermediate tasks Combining process flow logic with standard logic You'll build a series of different simulation models, finally ending in one that works similar to the following image: Step 1 Copy and Modify the 3D Model In this step, you'll copy the original system you used to build the standard logic. In the next step, you'll change this system so that it uses process flow logic instead. When you're finished, your 3D model should look similar to the following image: To copy the plane: Click Processor1A to bring up its properties on the right. Under the Processor section, change the Setup Time to 0 . Clear the Use Operator(s) for Setup checkbox. Click the StandardLogic plane to select it. Press Ctrl+C to copy the plane and all the objects on it. Click somewhere blank in the model to de-select the original plane. Then, press Ctrl+V to copy the plane. With the copied plane selected, change the name of the plane to BasicProcessFlowLogic in Properties. Click the arrow next to the color box to open the color selector menu. Choose the lightest shade of orange. Rename each of the 3D objects on the copied plane replacing any 1 numbers with a 2 , such as Sink2 , Operator2A , Processor2A , etc. Remove the center port connection from the dispatcher to the Queue, and from the dispatcher to Processor2B. (Press and hold the ‘W’ key while clicking and dragging between the two objects.) Check to ensure that your 3D model looks similar to the image shown at the beginning of this step. Step 2 Create Tasks Using Process Flow In this step, you'll add activities to a general process flow to build a process flow that uses task sequence activities to create transportation task logic. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow . Click a blank space in the process flow so that nothing is selected. In Quick Properties, change the name of the process flow to TaskSequenceLogic . With the process flow open and active, add a Container shape (under Display ) from the Library, dragging it into the process flow. In Properties, change the name of the shape to Basic Task Sequence . Click the arrow next to the Color box to change it to orange. You'll use orange because it matches the color of the BasicProcessFlowLogic plane. In the Basic Task Sequence shape, add the following activities to create a stacked block: An Event-Triggered Source (under Token Creation ) A Create Task Sequence (under Task Sequences ) A Load (under Task Sequences ) An Unload (under Task Sequences ) A Finish Task Sequence (under Task Sequences ) A Sink (under Basic ) Rename the activities as follows: Activity New Name Source Source: Item to Transport Create Task Sequence Create Load Unload Task Load Load Item from Queue2 Unload Unload Item at Processor Sink Sink: Item is Processed Check to make sure your process flow looks similar to the image shown in the beginning of this step. Step 3 Create the Process Flow Logic In this step, you'll edit the properties for the activities in the process flow. The following is an overview of how each activity will function: Activity Explanation Source: Item to Transport The Event-Triggered Source is an event-listening activity that will listen to events in the 3D model. Whenever an item in Queue2 tries to find a Transport, this activity will create a token and release it to the next downstream activity. You'll assign a label to this token named FlowItem that will contain a reference to the specific flow item that triggered the event, as well as a label named Processor which will be a reference to the Processor the Item is going to. Create Load Unload Task This activity will create a new Task Sequence, defining the next several Task Activities into a singular sequence to be executed. It will set a label named taskSequence onto the token to designate the tasks assigned to the sequence. It will send the Task Sequence to the Dispatcher to then assign those series of Tasks to one of the operators. Load Item at Queue2 This activity tells the operator which flow item needs to be picked up and where it is located. It will use the taskSequence label to designate that this task is part of the Task Sequence that was created previously. It will use the FlowItem label to designate what is being loaded onto the Transport. Unload Item at Processor This activity tells the operator where to unload the flow item. It will use the taskSequence label to designate that this task is part of the Task Sequence that was created previously and it will use the FlowItem label to tell the operator Finish Task Sequence Once all the task activities are finished, this activity will designate the Task Sequence as being finished, allowing the operators to be assigned other tasks. Sink: Item is Processed This activity removes the token from the process flow. You'll use its default settings. To create this functionality: In the 3D model, click on Queue2 to open its properties on the right. Under the Output section make sure the Use Transport box is checked. Next to the check box, in the Use Transport field, click on the black arrow to bring up the picklist options. Select the No Transport Reference option. (We will be assigning the task to a Transport in Process Flow.) It should look like this: Click the Source: Item to Transport activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. In the 3D model, click Queue2 to open a menu. Select Queue2: Transport Reference . The name of the sampled object will appear next to the activity. In Properties, in the Label Assignment table, click the cell that is on the Item row under the Label Name or Value column. Type FlowItem . Click on the cell in the same column on the Destination row, and type Processor . Click the cell on the Item row under the Operation to open a menu. Select assign . Do the same for the Destination row. What Do These Label Do? Standard, object-based events have specific parameters associated with them. In this case, the Entering Item parameter contains a reference to the flow item that triggered the event. You'll usually want to preserve some of this information by putting it into a label that can be referenced by other process flow activities. For the purposes of this tutorial, you'll use the label name FlowItem for the Item label and Processor for the Destination label so that you'll more clearly see the other places in this process flow that will reference these labels. Click the Create Load Unload Task activity to select it. In Properties, next to the Task Executer / Dispatcher box, click the Sampler button to enter sampling mode. In the 3D model, click Dispatcher2 to open a menu. Select BasicProcessFlowLogic/Dispatcher2 . Leave the rest of the options in the Create Load Unload Task activity as their defaults. Click the Load Item from Queue2 activity to select it. In Properties, make sure the Executer / Task Sequence field reads: token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select FlowItem . Click the Unload Item at Processor activity to select it. In Properties, make sure the Executer / Task Sequence field reads: token.taskSequence . In the Item box type token.FlowItem . In the Station box type token.Processor . Reset and run the model: Similar to the way the operator works with the standard 3D object logic, the operator using the process flow will transport arriving flow items to the processor. You'll also notice that tokens in the process flow represent the flow items as they move through the transportation tasks. Step 4 Add a Custom Task Up to this point, you've learned how to merely replicate standard logic using process flow. In this step, you'll begin to see how the process flow method has a major advantage over the standard logic: it can handle customization much better. You can easily create custom tasks that better represent the business system you're trying to model. In this step, you'll customize the task sequence by adding an intermediate task. You'll add a shape (a kind of visual object) to the 3D model to represent the station where the operator will need to scan flow items before unloading them at the processor: Then you'll add and rename two additional activities to the process flow that will simulate the scanning tasks. When you're finished, your process flow will look similar to the following image: The following is an overview of how the two new activities will function: Activity Explanation Travel to ScanStation2 This activity will tell the operator to travel to the ScanStation2 object. Delay: Scan Item This activity will simulate the amount of time that it takes to scan the flow item in the computer. You'll set the delay to 1 second. To make these changes to your simulation model: With the 3D model active, drag a Shape (under Visual ) and place it near Processor2A and Processor2B . Click the Shape to bring up its properties on the right. In the name box at the top of the window, change the name of the shape to ScanStation2 . Right-click the Shape and select Edit then select Show Name to display the object's name. In the Basic Task Sequence shape in the process flow, click the stacked block of activities to select it. Click the Unlink buttons before and after the Load Item from Queue2 activity to separate it from the stacked block. Drag a Travel activity (under Task Sequences ) from the Library and insert it after the Load Item from Queue2 activity. Drag a Delay activity (under Task Sequences ) and insert it after the Travel activity. What is the difference between the two Delay type activities? A Basic Delay activity will hold a token for the specified amount of time, whereas the Task Sequence Delay assigns the Delay and a corresponding State to a Task Executer. When the delay represents a process on the part of the Task Executer, this is more accurate when gathering statistics because it assumes that there is an event or process taking place as part of the Delay with the Task Executer involved. In our case, the operator is scanning the item, so we want to use a Task Sequence Delay to represent the Operator doing the scanning. Rename the two new activities: Activity New Name Travel Travel to ScanStation2 Delay Delay: Scan Item Click the Travel to ScanStation2 activity to select it. In Properties, check to make sure the Executer / Task Sequence box reads: token.taskSequence . Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click ScanStation2 to open a menu. Select BasicProcessFlowLogic/ScanStation2 . 15. Click the Delay activity to select it. In Quick Properties in the Delay Time box, delete the current text and type 1.00 . Make sure the Executer / Task Sequence box reads token.taskSequence . Leave the State box as 3- busy , which should be the default. Reset and run the model: As you watch, the operators will take the flow item to the scanner and delay briefly before loading it on the processors. Notice that it was relatively easy to insert a simple intermediate task into this process flow. Unfortunately, there is no easy way to create this in the standard logic without writing custom code in Flexscript. Conclusion Now that you've built transportation tasks in process flow, you can see that it has a few advantages: Ease of use - Like the standard logic, setting up a process flow isn't too difficult, but does involve some more steps. It's also fairly intuitive. The logic is more visible - Building the logic in a process flow helps you to see exactly how the operator will perform the tasks. The flowchart-like visuals of the Process Flow tool are a little more intuitive, which makes it easier to troubleshoot and design custom tasks. Ability to customize - Unlike the standard logic, it's relatively easy to make custom tasks with a process flow. Notice that in this tutorial, it was relatively simple to insert an intermediate task in between the transportation tasks. While it's certainly possible to add intermediate, custom tasks using just the standard 3D logic, you would have to learn how to write FlexScript code to do so. By now you hopefully have gotten a good, in-depth introduction to the advantages and disadvantages of building tasks in a process flow. The next tutorial will cover how to build task logic using lists. Continue on to Tutorial Task 1.3 - Tasks Using Lists ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial1TaskLogicTools/1-3TasksLists/1-3TasksLists.html",
        "title": "Tutorial Task 1.3 - Tasks Using Lists",
        "content": "Task Overview In this task, you'll learn how to build tasks using lists in a process flow. Lists have the advantage of allowing you to sort or prioritize tasks using your own custom criteria. This tutorial will also include a discussion of the pros and cons of building tasks with lists. When you're finished, your simulation model will operate similar to the following model: Step 1 Copy and Modify the 3D Model In this step, you'll copy the system you used to build the basic Process Flow logic. When you're finished, your 3D model should look similar to the following image: Click the BasicProcessFlowLogic plane to select it. (It's the orange one.) Press Ctrl+C to copy the plane and all the objects on it. Click somewhere blank in the model to de-select the original plane. Press Ctrl+V to copy the plane. With the copied plane selected, in Properties, change the name of the plane to ListLogic . Click the arrow next to the color box to open the color selector menu. Choose the lightest shade of red. Rename each of the 3D objects on the copied plane, replacing any 2 numbers with a 3 , such as Queue3 , Operator3A , Processor3A , etc. Now remove the port connections from Queue3 to Processors 3A and 3B. (Press and hold the Q key while clicking two connected objects to remove this connection.) Right-click Processor3A to open a menu. Point to Object Groups and select Add to New Group . In the group properties window, change the name of the group to ListProcessors . (You can re-navigate to this properties window by going to the Toolbox tab, next to the Library tab, and finding the Group under your Groups section, and double-clicking on the group.) Click the Sampler button to enter sampling mode. In the 3D model, click Processor3B to sample it and add it to the group. Close the group properties window. Check to ensure that your 3D model looks similar to the image shown at the beginning of this step. Step 2 Create Tasks Using Lists In this step, you'll add activities to a general process flow to build a process flow that uses lists to create transportation task logic. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow . Click a blank space in the process flow so that nothing is selected. In Quick Properties, change the name of the process flow to ListLogic . With the process flow open and active, drag two Container shapes from the Library (under Display ). In Properties, change the name of the first shape to Queue Pushes Items to List . Click the arrow next to the Color box to change it to red. You'll use red because it matches the color of the ListLogic plane. Change the name of the second shape to Processors Pull Items From List . Repeat the previous step to change the color of the second shape to red as well. In the Queue Pushes Items to List shape, add the following activities to create a stacked block: An Event-Triggered Source (under Token Creation ) A Push to List (under Shared Assets ) A Sink (under Basic ) Add a List shared asset to the right of the stacked block. Rename the activities and shared assets as follows: Activity New Name List List: Items to Transport Source (Event Triggered) Source: Item Enters Queue Push to List Push to List: Items to Transport Sink Sink: Item Was Pushed In the Processors Pull Items From List shape, create a Schedule Source (under Token Creation ) Under the newly-created stacked block, create a second stacked block with the following activities: A Pull from List (under Shared Assets ) A Create TS (under Task Sequences ) A Load (under Task Sequences ) A Travel (under Task Sequences ) A Delay (under Task Sequences ) An Unload (under Task Sequences ) A Finish TS (under Task Sequences ) Rename the activities and shared assets as follows: Activity New Name Source (Schedule) Source: Initialize Processor Group Pull from List Pull from List: Items to Transport Create TS Create Task Sequence Load Load Item from Queue Travel Travel to ScanStation Delay Delay: Scan Item Unload Unload Item at Processor Finish TS Finish TS Create a connector going from Source: Initialize Processor Group to Pull from List: Items to Transport . Create a connector going from Finish Task Sequence that loops back to Pull from List: Items to Transport . Check to make sure your process flow looks similar to the image shown in the beginning of this step. Step 3 Create the Push to List Logic One thing to keep in mind when working with lists is that they are slightly more complex because you are usually working with more than one flow. The term flow here refers to two different streams of tokens that will move through the process flow. One flow of tokens will manage the flow of items in the 3D model, pushing them to the task list when they're ready for transport. Another flow of tokens will manage the flow of the operators in the 3D model, directing them to pull items from a list and complete a series of tasks. In this step, you'll edit the properties for the activities in the Queue Pushes Tasks to List process flow. These activities will essentially control the flow of items that need to be transported. Simply put, when a flow item enters the queue, it will get pushed to a list where it will wait indefinitely until it can be transported. The following is an overview of how each activity and shared asset will function: Activity Explanation List: Items to Transport This list will store a reference to all the flow items in Queue3 that are ready to be transported to a processor. Source: Item Enters Queue The Event-Triggered Source is an event-listening activity that will listen to events in the 3D model. When a flow item enters Queue3, this activity will create a token and release it to the next downstream activity. You'll assign a label to this token named FlowItem that will contain a reference to the specific flow item that triggered the event. Push to List: Items to Transport This activity will push all flow items that are in the queue onto the Items to Transport list. When the items get pushed to the list, they will retain the reference to the specific flow item using the FlowItem label. Sink: Item Was Pushed This activity removes the token from the process flow. You'll use its default settings. To create this functionality: Click the Source: Item Enters Queue activity to select it. Click the Exclamation Point button to enter sampling mode. In the 3D model, click Queue3 to open a menu. Select Queue3: On Entry . In Properties, in the Label Assignment table, click the cell that is on the Entering Item row under the Label Name or Value column. Type FlowItem . Click the cell that is on the Entering Item row under the Operation to open a menu. Select assign . What Does This Label Do? Standard, object-based events have specific parameters associated with them. In this case, the Entering Item parameter contains a reference to the flow item that triggered the event. You'll usually want to preserve some of this information by putting it into a label that can be referenced by other process flow activities. For the purposes of this tutorial, you'll use the label name FlowItem so that you'll more clearly see the other places in this process flow that will reference this label. Click the Push to List: Items to Transport activity to select it. Click the Exclamation Point button to enter sampling mode. Click the List: Items to Transport shared asset to select it. A blue line will now link this activity to the shared asset. In Properties, click the arrow next to the Push Value box to open a menu. Point to Token Label , then select FlowItem . In the next step, you'll set up the logic that will cause the operators to pull items from the list and begin the transportation tasks. Step 4 Create the Pull from List Logic In this step, you'll edit the properties for the activities in the Processors Pull Tasks From List process flow. In the previous step, you learned how process flows that use lists usually have more than one flow of tokens. In this process flow, one flow of tokens will control the flow items and one will control the processors and operators. In this step, you'll design the logic that controls the processors and operators. This set of activities will pull an item from the list and tell an operator to transport that item. Notice how in the previous process flow, the tokens represented flow items. In this process flow, the tokens will represent the processors making requests for items. The following is an overview of how each activity and shared asset will function: Activity Explanation Source: Initialize Processor Group When the simulation starts, this activity will create a token for each processor in the ListProcessors group. It will assign one of the members of the processor group to a label on each of those tokens. Pull From List: Items to Transport This activity will pull a flow item from the Items to Transport list. You'll assign the token a label called TransportedItem that will contain a reference to the flow item that was pulled from the list. Create Task Sequence This will initialize the sequence of tasks to be assigned to the dispatcher and then operators. Load Item from Queue This activity tells the operator which flow item needs to be picked up and where it is located. Travel to ScanStation This activity will tell the operator to travel to the ScanStation3 object. Delay: Scan Item This activity will simulate the amount of time that it takes to scan the flow item in the computer. You'll set the delay to 1 second. Unload Item at Processor This activity tells the operator where to unload the flow item. When this task is finished, the token will loop back to the Pull From List activity and the process will repeat itself. Finish Task Sequence This activity designates the series of tasks as finished, so the operator can be assigned a new task sequence. To create this logic: Click the Source: Initialize Processors Group activity to select it. In Properties in the Arrivals table, click the cell under the Quantity column. With that cell selected, click the arrow next to the Arrival 1: Quantity box and type Group(“ListProcessors”).length . In this properties window, click the plus sign to add a new label to the created tokens. In the Name box, write Processor . Now in the Value box type, Group(“ListProcessors”)[tokenIndex] . What Do These bits of Code Mean? This code will tell the process flow how many members are currently in the ListProcessors group. The code .length refers to the number of members in the group. In the second script adding square brackets after that it means we are looking for the entry in that group located at a specific index. (All objects in a group have an index defining what position in the group they are.) We then enter the term tokenIndex. When creating tokens in a Scheduled Source, they have an index number designating which order they are created in. Since we are creating a number equal to the “length” or number listed in the group, this script will assign each member of the group to a label on the token, according to that token’s index. It may seem complicated, but you can know that if you follow these steps in a scheduled source, it will create a number of tokens equal to the number of members in a group, and it will assign one member each to each of the tokens on a label. Click the Pull from List: Items to Transport activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. Click the List: Items to Transport shared asset to select it. A blue line will now link this activity to the shared asset. In Properties, under the Assign To button, delete the current text and type token.TransportedItem . Click the Create Load Unload Task activity to select it. In Properties, next to the Task Executer / Dispatcher box, click the Sampler button to enter sampling mode. In the 3D model, click Dispatcher3 to open a menu. Select ListLogic/Dispatcher3 . Leave the rest of the options in the Create Load Unload Task activity as their defaults. Click the Load Item from Queue activity to select it. In the Properties make sure the default for Executer / Task Sequence reads token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select TransportedItem . Click the Travel to ScanStation activity to select it. In the Properties make sure the default for Executer / Task Sequence reads token.taskSequence . Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click ScanStation3 to open a menu. Select ListLogic/ScanStation3 . Click the Delay activity to select it. In the Quick Properties make sure the default for Executer / Task Sequence reads token.taskSequence . Click the Unload Item at Processor activity to select it. In the Properties make sure the default for Executer / Task Sequence reads token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select TransportedItem . Click the arrow next to the Station box to open a menu. Point to Token Label and select Processor . We can leave the Finish Task Sequence with its default settings. Reset and run the model: As you can see, the process flow that uses a list can do everything that the process flow that only uses resources can do. The two models operate identically. The only disadvantage of using the list logic is that it is a little more complicated to set up initially. Lists require you to think through your logic more thoroughly. But what are some of the advantages of using a list? One main advantage of using lists is that you can build in some fairly complex logic into it. You can use lists to prioritize certain tasks, to assign tasks to operators based on list fields, to sort tasks, and much more. The next step will demonstrate how you can use lists to sort transportation tasks by priority. Step 5 Use Labels to Prioritize Tasks In this step, you'll use lists to add a priority level to flow items. The operators will transport flow items with a high priority before flow items that do not have a high priority. To create this logic, you'll add a label to all of the flow items called RushOrder . This label will have either a true or false value (where 1 is true and 0 is false) to indicate whether the flow item is a rush order or not. You'll set it so that 30% of the items are rush orders. You'll also change the color of the rush order items to red so that you can see the logic more visibly. Lastly, you'll edit the properties of the Pull From List: Items to Transport activity so that the operators will transport rush order items first. You'll create this logic by adding a query to this activity where items with a higher RushOrder value will get pulled from the list first. To create this logic: In the 3D model, click Source3 to bring up its properties on the right. Under the Triggers section, click the Add button to open a menu. Select the On Creation option to add this trigger. Next to the OnCreation box, click the Add button to open a menu. Point to Data , then select Set Label . A picklist options window will appear. In the Label box, delete the current text and type \"RushOrder\" . In the Value box, delete the current text and type bernoulli(30, 1, 0) . What Does This Code Mean? A bernoulli statistical distribution assigns a specific value to the label a specific percentage of time. In this case, the distribution will return a value of 1 (which will mean that it is \"true\" and that it is a rush order) 30% of the time. The rest of the time, it will return a value of 0 (which will mean it is \"false\"). In other words, 30% of the flow items will be rush orders. Under the Triggers section again, click the Add button to open a menu. Select the On Exit option to add this trigger. Next to the OnExit box, click the Add button to open a menu. Point to Visual , then select Set Color By Case . A picklist options window will appear. In the value box type item.RushOrder . Make sure the Object box says item . Click the Add button box twice to create two new entries. In the box right under the one that reads Default , write the number 0 . In the box right below that write 1 Now in the box next to the number 0 , click the black arrow, and select the option Color.brown . In the bottom box below that, click the black arrow and select the option Color.red . The window should appear as follows. Return back to the Properties for the list shared asset, click the Advanced button to open the list properties. On the Fields tab, click the Add button to open a menu. Select Label to add a label field to the list. In the Label Field box, delete the current text and type RushOrder . On the Back Orders tab, check the Reevaluate All Values On Push checkbox. Click the OK button to save the changes and close the window. In the ListLogic process flow, click the Pull from List: Items to Transport activity to select it. In Properties, click the arrow next to the Query / Object box to open a menu. Point to ORDER BY (Sort) and select RushOrder . In the query that now shows up in this box, change the ASC to DESC . Before you run the model, it might help to open the list entries so that you can view it during the simulation run. Click the List: Items to Transport shared asset to select it. In Properties, click the View Entries button. Reset and run the model. Pay attention not just to the 3D model, but what is happening on the list's entries as well. Notice that the operators always prioritize transporting the red rush order items before other items. If they don't pick up a rush order item immediately, it's usually because the rush order item arrived in the queue after the operator's token reached the Pull from List activity. Lists enable you to build this kind of complex task logic. They can be ideal for systems in which task executers need to sort, filter, or prioritize tasks. Step 6 Add an Additional Task As you noticed in the previous task, every once in a while the task executers don't pick up one of the rush order flow items in the queue. This problem is caused by subtle timing issues where the rush order item arrived in the queue after the task executer had already begun the loading task. You can fix this problem by simply adding a Travel activity before the Pull From List activity. That way, the task executer will travel back to the queue before pulling an item from the list, which will ensure that high priority items are always picked first. When you're finished, your process flow will look similar to the following image: To make these changes: With the process flow open and active, drag a Travel activity between the Unload and Finish Task Sequence activities Rename this activity Travel to Queue . In Properties, check to make sure the Executer / Task Sequence box reads token.taskSequence. Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click Queue3 to open a menu. Select ListLogic/Queue3 to sample it. Reset and run the model: Now the operators always pick up the rush order items whenever one is in the queue. The key take-away from this step is to remember that task order and sequencing is important. It can affect the behavior of operators in subtle, but important ways. Conclusion Now that you've built transportation tasks using lists in a process flow, you can see that it has a few important things to note: You can sort and prioritize tasks - Lists give you the ability to create more complex task logic, such as determining which tasks should be completed first. More Complex - Lists can sometimes be a little more complicated to set up because you have to think through how your logic will work on a deeper level. There's more elements or token flows that you have to consider when setting up your list logic. For example, you have to think through the logistics of which events in the simulation model will cause something to be pushed to a list and which events will cause something to be pulled from that list. You also have to think more carefully about what the tokens in the process flow will be linked to in the 3D model. (For example, do they represent flow items or task executers, etc.). Might not always behave like you expected - Sometimes the timing of events or the sequence of tasks can affect the behavior of the operators in ways that you didn't expect. However, process flows are fortunately fairly easy to troubleshoot and fix when unexpected behaviors occur. Up to this point, you've learned how to use local lists to create task logic. In the next tutorial, you'll learn how to use global lists to explore even more possibilities for building different types of task logic. Continue to Tutorial Task 1.4 - Tasks Using Global Lists ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial1TaskLogicTools/1-4TasksGlobalLists/1-4TasksGlobalLists.html",
        "title": "Tutorial Task 1.4 - Tasks Using Global Lists",
        "content": "Task Overview In this tutorial task, you'll learn a system for building tasks that uses global lists and task sequences. A task sequence is a complete series of tasks that will eventually be dispatched to a task executer. When a task executer works on the task sequence, it will finish all of the tasks in the task sequence one by one without interruption (unless it is pre-empted away). You can push task sequences to a global list and then the task executer can pull tasks off the list when they are available to work on another task. (See the following section for an explanation of how global lists differ from local lists.) You could think of a task sequence as a complete list of \"to do\" items that the operator will pull from a job board. The operator will complete all the tasks in the task sequence in the order they're listed. When the task sequence is complete, the operator will return to the job board and get a new \"to do\" list (task sequence) to work on. When you're finished, your simulation model will operate similar to the following model: What are Global Lists? How are global lists different from local lists in the context of this tutorial? Generally, the difference between a local list and a global list has to do with how accessible the list is across the various elements of the simulation model. The list you built in the previous tutorial was a local list because it was only accessible internally through the general process flow. That means that only tokens inside that local process flow could push and pull items from the list. Notice also that you simply set up a list by dragging a list shared asset into the process flow, but you didn't change any of its default settings or do anything to make it so that it could be accessed outside of that process flow. In this tutorial, you'll create a global list in the Toolbox and then link it to a list shared asset in a process flow. Once you've made the list globally accessible, it can be used by both the process flow and the objects in the 3D model at the same time. The process flow will be able to push task sequences to the list and then the operators in the 3D model will be able to pull task sequences directly off the list whenever they are available to work on a new task. The operators will interact with the global list completely independently of the process flow. Step 1 Copy and Modify the 3D Model In this step, you'll copy the system you used to build the list logic. When you're finished, your 3D model should look similar to the following image: To copy the plane: Click the ListLogic plane to select it. (It's the red one.) Press Ctrl+C to copy the plane and all the objects on it. Click somewhere blank in the model to de-select the original plane. Press Ctrl+V to copy the plane. Move the newly copied plane so that it is above the StandardLogic plane (the yellow one). With the copied plane selected, in Properties, change the name of the plane to GlobalListLogic . Click the arrow next to the color box to open the color selector menu. Choose the lightest shade of green. Rename each of the 3D objects on the copied plane, replacing any 3 numbers with a 4 , such as Queue4 , Operator4A , Processor4A , etc. Right-click Processor4A to open a menu. Point to Object Groups and click ListProcessors to remove this operator from that group. Repeat the previous step to remove Processor4B from the ListProcessors group. Right-click Processor4A to open a menu. Point to Object Groups and select Add to New Group . In the group properties window, change the name of the group to GlobalListProcessors . Close the group properties window. Don't Add Processor4B For Now Be aware that you will not add Processor4B to the GlobalListProcessors group yet. It will be easier to demonstrate the full capabilities of the global list with just one processor for now. Check to ensure that your 3D model looks similar to the image shown at the beginning of this step. Step 2 Create a Global List In this step, you'll set up the global list that will store the task sequences and you'll link that to the list in the process flow. You'll also set up the operators to pull task sequences from this list any time their On Resource Available trigger fires. This trigger fires any time an operator completes a task and is free to work on another task. To create this logic: In the left pane, click the Toolbox tab to switch to the Toolbox. Click the Add button to open a menu. Point to Global List , then select Task Sequence List . In the list properties, change the name of the list to Available Tasks . You'll leave the fields on their default settings for now. Click the Back Orders tab and check the Reevaluate All Values on Push checkbox. Press the OK button to save the changes and close the window. In the 3D model, click Operator4A to bring up its properties on the right. Under the Triggers section, click the Add button to open a menu. Select On Resource Available . Next to the On Resource Available box, click the Add button to open a menu. Point to Use List , and then select Pull from Task Sequence List . In the picklist properties window, confirm that Available Tasks is listed as the global list the operator will use. Repeat the previous steps for Operator4B . Consider saving your model at this point. Step 3 Create Tasks Using Global Lists In this step, you'll add activities to a general process flow to build a process flow that uses global lists to create transportation task logic. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow . Click a blank space in the process flow so that nothing is selected. In Quick Properties, change the name of the process flow to GlobalListLogic . With the process flow open and active, drag a Container shape (under Display ) into the process flow. In Properties, change the name of the shape to Tasks Using Global Lists . Click the arrow next to the Color box to change it to dark green. You'll use green because it matches the color of the GlobalListLogic plane. In the Tasks Using Global Lists shape, add the following activities to create a stacked block: An Event-Triggered Source (under Token Creation ) A Create Task Sequence (under Tasks Sequences ) A Load (under Task Sequences ) A Travel (under Task Sequences ) A Delay (under Task Sequences ) An Unload (under Task Sequences ) A Finish Task Sequence (under Task Sequences ) A Push to List (under Shared Assets ) A Sink (under Basic ) Make Sure You Use the Task Sequence Delay Make sure that you use the Task Sequence Delay activity as opposed to the Delay activity under the Basic group. You'll need the Task Sequence Delay because you'll be dispatching this set of tasks to a list. The tasks will get completed later. A normal Delay activity would only delay the token while it's adding these tasks to the task sequence. Add a List shared asset to the right of the stacked block. Rename the activities and shared assets as follows: Activity New Name List List: Available Tasks Source Source: Item Enters Queue Create TS Create TS: TransportTasks Load Load Item from Queue Travel Travel to ScanStation Delay Delay: Scan Item Unload Unload Item at Processor Push to List Push to List: Available Tasks Sink Sink: Task Sequence Pulled Check to make sure your process flow looks similar to the image shown in the beginning of this step. Step 4 Create the Global List Logic In this step, you'll set up the process flow logic that will control these tasks. This process flow will be quite similar to the list-based process flow you built in the previous tutorial task, but it will have a few key differences. The main difference is that you will build a task sequence and then push that task sequence onto a list. The task sequence will contain all the different tasks needed to complete the transportation task for the flow item that is associated with the task sequence. Then, the operators will pull the task sequences from the list whenever they are available to work on tasks. The following is an overview of how each activity and shared asset will function: Activity Explanation List: Available Tasks This list will store a reference to all the transportation task sequences that are available for operators to work on. You'll link this internal list to a global list in the next step. Source: Item Enters Queue The Event-Triggered Source is an event-listening activity that will listen to events in the 3D model. When a flow item enters Queue4, this activity will create a token and release it to the next downstream activity. You'll assign a label to this token named ItemToTransport that will contain a reference to the specific flow item that triggered the event. Create TS: TransportTasks This activity will create a task sequence named TransportTasks . This task sequence will be empty at this point, but as tokens move through the rest of the process flow, those tasks will be added to this task sequence. The task sequence will store the transportation tasks in the sequence they should be completed. Later, the task sequence will get pushed to the global list. Load Item from Queue This activity tells the operator which flow item needs to be picked up and where it is located. Travel to ScanStation This activity will tell the operator to travel to the ScanStation4 object. Delay: Scan Item This activity will simulate the amount of time that it takes to scan the flow item in the computer. You'll set the delay to 1 second. Unload Item at Processor This activity tells the operator where to unload the flow item. For now, you'll set this activity to only drop off flow items at Processor4A. Finish TS This activity declares the end of the sequence of tasks. Push to List: Available Tasks This activity will push the tasks in the TransportTasks task sequence onto the Available Tasks global list. Sink: Task Sequence Pulled This activity removes the token from the process flow. You'll use its default settings. To create this functionality: In the process flow, click the List: Available Tasks shared asset to select it. In Properties, click the arrow next to the List box to open a menu. Point to Global List , then select Available Tasks . Click the Source: Item Enters Queue activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. In the 3D model, click Queue4 to open a menu. Select Queue4: On Entry . In Properties, in the Label Assignment table, click the cell that is on the Entering Item row under the Label Name column. Type ItemToTransport . Click the cell that is on the Entering Item row under the Operator column to open a menu. Select assign . What Does This Label Do? Standard, object-based events have specific parameters associated with them. In this case, the Entering Item parameter contains a reference to the flow item that triggered the event. You'll usually want to preserve some of this information by putting it into a label that can be referenced by other process flow activities. For the purposes of this tutorial, you'll use the label name ItemToTransport so that you'll more clearly see the other places in this process flow that will reference this label. Click the Create TS: TransportTasks activity to select it. In Properties, next to the Task Executer / Dispatcher box, click the Delete button . In the box under the Assign to option, delete the current text and type token.TransportTasks . Make sure the Dispatch and Wait checkbox is unchecked. What Does This Label Do? For now, you're not going to assign this task sequence to a specific task executer. That's why you changed the Task Executer field display to \"none.\" Instead, you're going to create a new task sequence and dispatch it later. You'll name this task sequence TransportTasks . You'll assign all the subsequent tasks to this task sequence before dispatching it to the global list. Click the Load Item from Queue activity to select it. In Properties, click the arrow next to the Task Executer / Sequence box to open a menu. Point to Token Label and select TransportTasks . Click the arrow next to the Item box to open a menu. Point to Token Label and select ItemToTransport . Click the Travel to ScanStation activity to select it. In Properties, click the arrow next to the Task Executer / Sequence box to open a menu. Point to Token Label and select TransportTasks . Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click ScanStation4 to open a menu. Select GlobalListLogic/ScanStation4 . Click the Delay: Scan Item activity to select it. In Properties, click the arrow next to the Task Executer / Sequence box to open a menu. Point to Token Label and select TransportTasks . In the Delay Time box, delete the current text and type 1.00 . Click the Unload: Item at Processor activity to select it. In Properties, click the arrow next to the Task Executer / Sequence box to open a menu. Point to Token Label and select TransportTasks . Click the arrow next to the Item box to open a menu. Point to Token Label and select ItemToTransport . Next to the Station box, click the Sampler button to enter sampling mode. In the 3D model, click Processor4A to open a menu. Select GlobalListLogic/Processor4A . Click the Finish TS activity to select it. In Quick Properties, click on the box below Task Sequence , and write token.TransportTasks in the box. Click the Push to List: Available Tasks activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. Click the List: Available Tasks shared asset to select it. A blue line will now link this activity to the shared asset. In Properties, click the arrow next to the Push Value box to open a menu. Point to Token Label , then select TransportTasks . Reset and run the model: As you can see, nothing is happening. The boxes are simply stacking up inside the queue and the operators are motionless. What went wrong? If you take a look at the process flow, that offers the clue: notice that the tokens are forming a bottleneck inside the Load Item From Queue activity. That means something is happening in this activity that is preventing the tokens from moving to the next downstream activity. In the next step, you'll learn why this happening and how to fix the problem. Step 5 Troubleshoot the Bottleneck In this step, you'll fix the token bottleneck that is occurring in the process flow. To fix this problem, you need to keep in mind how the logic in this process flow differs from the logic used in other kinds of process flows you've built in this tutorial up to this point. In the other process flows you've built, the operators performed each task as the tokens moved through various activities in the process flow in real time. In this process flow, you're using a different approach. Instead of completing the tasks in real time, the task are added to a task sequence and then pushed to a global list. As was mentioned at the beginning of this tutorial, you could think of a task sequence as a complete list of \"to do\" items that will get posted to a collective job board (the global list). What you're doing in this process flow is building the instructions for the task executer to do later. The task sequence will wait on a global list until a task executer pulls it off the list and starts working on it. The reason the global list process flow is experiencing a bottleneck is because the Load Item from Queue activity won't release the token to the next downstream activity. The activity is supposed to wait until the task is complete before it can move on by default. Since these tasks won't get completed in real time, you need to adjust the properties so that this task doesn't have to be complete before the token can move to the next activity. To make these changes: Click the Load Item from Queue activity to select it. In Properties, clear the Wait Until Complete checkbox. Click the Travel to ScanStation activity to select it. In Properties, clear the Wait Until Complete checkbox. Click the Delay: Scan Item activity to select it. In Properties, clear the Wait Until Complete checkbox. Click the Unload: Item at Processor activity to select it. In Properties, clear the Wait Until Complete checkbox. Reset and run the model: As you can see, now the bottleneck is fixed and it runs nearly identically to the other simulation models that use different methods for setting up the logic. Of course, at this point, you haven't set up the ability to work with a second processor or how to handle high priority flow items. Notice also that sometimes the operators load more than one flow item on the processor at a time because it's currently not restricted by an Acquire Resource activity. You'll set up logic to handle these kinds of issues in the rest of this tutorial. Step 6 Add Task Sequence Priorities Since pushing task sequences to a global list allows you to mix and match with the standard logic system, that means you can also integrate the task sequences with the priority and preemption capabilities of the standard logic system. You'll set up that logic in this step. You'll use the RushOrder label on the flow items to assign priority levels to the task sequences before they're pushed onto the list. You'll also get to see how these priority levels interact with the standard logic. When you're finished, your process flow will look similar to the following image: The following is an overview of how the new or edited activities and shared assets will function: Activity Explanation Assign Labels: Copy RushOrder This activity will copy the RushOrder label from the flow item so that it is on the token as well. Create TS: TransportTasks You'll edit this activity so that it assigns a priority level to each task sequence based on the priority form the RushOrder label. List: Available Tasks You'll add an additional field to this list to track the task sequence's priority levels. To create this logic: With the process flow open and active, insert an Assign Labels activity (under Basic ) after the Source: Item Enters Queue activity. Rename this activity Assign Labels: Copy RushOrder . In this activity's Properties, click the Add button to add a new label. In the Name box, type RushOrder . In the Value box, type token.ItemToTransport.RushOrder . What Does This Label Do? This label will copy the value of the flow item's RushOrder label to the token's label by the same name. Flow items that are rush orders will have a value of 1 for this label. Click the Create TS: TransportTasks activity to select it. In Properties in the Priority box, delete the current text and type token.RushOrder . What Does This Code Do? This code assigns the value of the RushOrder label as the task sequence's priority number. So, if the flow item is a rush order, it will be assigned a priority of 1. Click the List: Available Tasks shared asset. In Quick Properties, click the Advanced button to open the list's properties. On the Fields tab, click the Add button to open a menu. Select priority to add this field. Press the OK button to save the changes and close the properties window. In the 3D model, click Operator4A to bring up its properties on the right. Under the Triggers section next to the On Resource Available trigger, click the Edit Properties button to open the picklist options. Next to the Query box, click the Add button to open a menu. Point to ORDER BY (Sort) , then select priority . Change the ASC to DESC . Repeat the previous steps for Operator4B . Reset and run the model. The global list system can handle priorities just as well as the system that used local lists. However, it has the additional advantage of working better with the priority levels of the standard logic. In other words, you can develop more sophisticated priority and preemption systems that can combine elements of standard logic with process flow logic. Step 7 Add a Second Processor In this last step, you'll add that second processor back in. Unfortunately, when you add the functionality for a second processor, you'll begin to see some of the disadvantages of building task sequences and then pushing them to a global task sequence list. When you're finished, your process flow will look similar to the following image: The following is an overview of how the new and edited activities and shared assets will function: Activity Explanation Resources: Processors You'll link this shared activity to GlobalListProcessors group in the 3D model so that the processors in this group can be acquired, restricting them to one flow item at a time. You'll also set the resource's queue strategy so that it prioritizes flow items with a RushOrder value of 1. Acquire Processor This activity will attempt to acquire a processor before building the task sequence. If the processor is available, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named Processor that will contain a reference to the processor in the 3D model that was acquired. Unload Item at Processor You'll edit this activity so that it will use the Processor label to determine which processor should receive the flow item. Wait for Event: Process Finish This is an event-listening activity, which means it will listen to an object in the 3D model and release the token to the next downstream activity once the event occurs. This activity will wait for the processor to finish processing the item before releasing the token to the next activity. Release Processor This activity will release the processor so that it can accept another flow item. It will use the Processor label to release the processor. To add a second processor: In the 3D model, right-click Processor4B to open a menu. Point to Object Groups , then select GlobalListProcessors to add the processor to this group. In the process flow, insert an Acquire Resource activity (under Shared Assets ) after the Assign Labels: Copy RushOrder activity. Insert a Wait for Event activity (under Basic ) after the Push to List: Available Tasks activity. Insert a Release Resource activity (under Shared Assets ) after the Wait for Event activity you just added. Add a Resource shared asset (under Shared Assets ) and put it to the right of the stacked block of activities. Rename the following activities and shared assets: Activity New Name Resource Resources: Processors Acquire Acquire Processor Wait for Event Wait for Event: Process Finish Release Release Processor Sink: Task Sequence Pulled Sink: Item Released to Sink Click the Resource: Processors shared asset to select it. In Properties, click the arrow next to the Reference box to open a menu. Point to Group , then select GlobalListProcessors . In the Queue Strategy box, type ORDER BY Puller.RushOrder DESC . The Queue Strategy Logic Replaces the Operator's Pull Logic Recall that earlier in this tutorial you set the operators to pull higher priority task sequences from the global list first. The queue strategy logic that you just added will replace the operator's pull logic. If you wanted to go the extra mile, you could delete that pull logic. However, the simulation model would function the same regardless because the pull logic is now essentially irrelevant. Click the Acquire Processor activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. Click the Resource: Processors shared asset to sample it. A blue line will now link this activity to the shared asset. In Properties, in the Assign to Label box, delete the current text and type token.Processor . What Does This Expression Mean? When the Acquire Resource activity acquires a resource, it adds a label to the entering token. This label contains a reference to the processor in the 3D model that was acquired. While you could have used the default label name of resource , it is often helpful to assign more intuitive names to labels for better model management. For the purposes of this tutorial, you're changing the name of the label to Processor so that you'll more clearly see the other places in this process flow that will reference this label. Click the Unload: Item at Processor activity to select it. In Properties, click the arrow next to the Station box to open a menu. Point to Token Label and select Processor . Click the Wait for Event: On Process Finish activity to select it. Click the arrow next to the Object box to open a menu. Point to Token Label and select Processor . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click Processor4A to open a menu. Select On Process Finish . Click the Release Processor activity to select it. Click the arrow next to the Resource(s) Assigned To to open a menu. Point to Token Label , then select Processor . Reset and run the model. While the global list system can handle having an additional processor without any problems, you've unfortunately lost some of the advantages of the global list system. For instance, notice that the process flow only creates and pushes two task sequences to a list at a time. Only two task sequences can get pushed onto the list at a time because only two processors can be acquired at a time. This reduces the effectiveness of the global list because it works better when the operator can choose from many tasks and focus on pulling pulls tasks based on the ones with that match certain criteria. This problem could be prevented if somehow the processor could be dynamically assigned at the moment the operator pulls the task sequence from the global list, as opposed to being assigned before the task sequence is pushed to the list. However, there currently isn't an easy method for doing that in FlexSim. Fortunately, you'll learn how to implement a fairly simple workaround for this problem in the next step. Step 8 Troubleshoot the Processor Issue In this step, you'll add a workaround for the problem that you encountered in the previous step when you tried to add a second processor. As you'll recall, the issue is that you can't dynamically assign a processor at the time the operator pulls the task sequence from the global list. The workaround solution is to put a queue in front of the two processors so that it can store items when the operator unloads them. Then, you'll set the processors to pull flow items from the queue whenever they're ready for another item. You'll also set up the new queue so that rush order items are pulled first by the processor. Lastly, you'll modify the process flow to remove unnecessary activities and change the unloading destination for the flow items. To make these changes: In the 3D model, add another Queue to the GlobalListLogic plane, placing it near the two processors. (You might need to move the Scanstation4 shape to make room.) Rename the new queue Destination4 . Create port connections (A-connects) from Destination4 to Processor4A and Processor4B . Click Processor4A to open its properties on the right. Under the Input section, check the Pull box. Click the OK button to save the changes and close the window. Repeat the previous steps for Processor4B . Click Destination4 to open its properties window. Under the Triggers section, click the Add button to open a menu. Select On Entry . Next to the On Entry box, click the Add button to open a menu. Point to Control , then Sort by Expression to open a picklist window. In the Expression box, delete the current text and type item.RushOrder . Confirm that the Order menu currently displays Descending . What Does This Code Mean? When a new item enters Destination4, it will trigger the On Entry trigger for the queue. When that happens, the queue will sort any items with a RushOrder value of 1 so that they are at the top of the queue and get pulled first. In the process flow, delete the following activities and shared assets: The Resource: Processors shared asset The Acquire Processor activity The Wait for Event: Process Finish activity The Release Processor activity Click the Unload: Item at Processor to select it. In Properties next to the Station box, click the Sampler button to enter sampling mode. In the 3D model, click the Destination4 queue to open a menu. Select GlobalListLogic/Destination4 to sample it. Reset and run the model: Now the task list holds many more than two tasks at a time because the system no longer has restrictions requiring you to assign the processor before the task sequence is built and pushed to the list. If items begin to accumulate in the Destination4 queue, the processors will pull the rush order items first. (You can test this by experimenting with longer processing times, if you'd like.) Conclusion Now that you've built transportation tasks using lists in a process flow, you can see that it has a few advantages: Designing look-for-work task systems - Using a global list, you could push task sequences to a list and then have an operator pull off task sequences based on certain criteria once they become available. In this example, you had operators pull higher priority tasks first, but you could possibly add even more complexity to the system. For example, you could have operators with a particular speciality pull off task sequences that require that speciality. Model scalability - This look-for-work system could scale well because you could potentially set up your model so that available task sequences from many different systems are put on one global list that is accessed by one pool of operators. Mixing and matching with standard logic - If you need to design a task system that uses the strengths of both process flow and standard logic, it might be helpful to use the task sequence method. Priorities and preemption - The other process flow systems don't have a way to assign tasks a priority level or preemption value that works well with the standard logic. The only way to assign priorities and preemption is to build a task sequence and assign that sequence a priority level or preemption value, then push it to a global list. However, there are some disadvantages that come from using lists to build task logic: No dynamic decision-making - One disadvantage of this system is that task sequences can't be dynamically changed or updated once it's been pushed to a global list. Once a task sequence has been pushed to a global list, it can't be altered. For example, an operator can't make a dynamic decision about which processor to unload a flow item because that had to be pre-determined when the task sequence was built and pushed to the list. This particular weakness of the global list system potentially eliminates the advantages of the system. This concludes the task logic tutorial. By now, you've hopefully gotten a good sense of the advantages and disadvantages of different methods for building task logic in a simulation model. When you are considering which system to use in your simulation projects, consider the unique needs of your system and the task logic method that will be best suited to that project."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial2CoordinatedTasks/CoordinatedTasksOverview/CoordinatedTasksOverview.html",
        "title": "Tutorial 2 - Coordinated Tasks",
        "content": "This tutorial will teach you how to create coordinated tasks in FlexSim using the Process Flow tool. Coordinated tasks are when two or more operators are needed to complete a given task. In this tutorial, you'll create a set of transportation tasks for one operator to load a standard-sized box at a queue and unload it at a processor. Then, you'll create a series of coordinated tasks for two operators to load a heavy box at a queue and work together to transport and unload it at a processor. When you're finished, your simulation model will operate similar to the following image: Tasks Covered This tutorial will cover the following tasks: Task 2.1 Create Standard Loading Tasks Before you can learn how to create coordinated tasks, it helps to review the process for building the logic of basic tasks in a process flow. In this tutorial, you'll set up a simple series of transportation tasks in a process flow. These tasks will direct operators to load and unload boxes from one queue to two different processors. Task 2.2 Create Coordinated Loading Tasks In this tutorial, you'll learn how to create coordinated loading tasks. You'll set up a system in which large boxes will occasionally arrive. These boxes that will be heavy enough that they will require two operators to load and transport the box together. You'll learn how to use the Coordination activities to get the two operators to work together on a single set of tasks. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Key Concepts About Task Logic Coordinated Tasks Process Flow Coordination"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial2CoordinatedTasks/2-1StandardTasks/2-1StandardTasks.html",
        "title": "Tutorial Task 2.1 - Create Standard Loading Tasks",
        "content": "Task Overview Before learning how to create coordinated tasks, it helps to review the key concepts and processes that are involved in building basic tasks in a process flow. In many ways, this first tutorial task will be a review of the concepts taught in the Tutorial 1 - Task Logic Tools Tutorial . Similar to the simulation model you built in that tutorial, you'll set up a simple series of transportation tasks in a process flow in this tutorial. The tasks in this process flow will direct two operators to load and unload boxes from one queue to two different processors. Building this simple transportation series of tasks first will help you to see how coordinated tasks are built a little differently from standard tasks. When you're finished, your simulation model will work similar to the following image: Step 1 Build the 3D Model In this step, you'll build a basic 3D model for this tutorial. You'll add some queues that will store the boxes that need to be transported, the operators that will transport the boxes, and the processors that will process the boxes. When you're finished, your model should look similar to the following image: To build this model: Make sure your 3D model window is open and active. From the Library, drag the following 3D objects into the model: 2 Queues 2 Operators 2 Processors A Sink Rename the objects as follows: Object New Name First Queue StandardQueue Second Queue LargeQueue First Operator OperatorA Second Operator OperatorB First Processor ProcessorA Second Processor ProcessorB Create port-connections (A-connects) between the following objects: From ProcessorA to Sink1 From ProcessorB to Sink1 Click OperatorB to select it. In Properties, click the color selector to open it. Select the blue color. Right-click OperatorA to open a menu. Point to Object Groups and select Add to New Group to open a new group properties window. In the name box at the top of the window, change the name of the group to Operators . In the Members group, click the Sampler button to enter sampling mode. Click OperatorB to sample it. Repeat the previous steps to create another group called Processors , adding ProcessorA and ProcessorB as members. Check to ensure your model looks similar to the image shown at the beginning of this step. Step 2 Add Activities to a Process Flow In this step, you'll add the activities and shared assets to a process flow. These activities will eventually control the 3D model's transportation logic. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the logic in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow to create a new process flow. With the process flow active, in Properties, change the name of the process flow to LoadingTasks . Add 4 Container shapes (under Display ) to the process flow. Rename the shapes as follows: Resources Create Boxes Standard Transport Tasks Process Boxes In the Resources shape, add two Resource shared assets (under Shared Assets ). Rename the shared assets as follows: Shared Asset New Name Resource (first one) Resource: Processors Resource (second one) Resource: Operators In the Create Boxes shape, create a stacked block with the following activities: An Inter-Arrival Source (under Token Creation ) A Create Object (under Objects ) Rename the activities and shared assets as follows: Activity New Name Source Source: Items Arrive Create Object Create Object: Box In the Standard Transport Tasks shape, create a stacked block with the following activities: 2 Acquire Resources (under Shared Assets ) A Create Task Sequence A Load (under Task Sequences ) An Unload (under Task Sequences ) A Release Task Sequence A Release Resource (under Shared Assets ) Rename the activities and shared assets as follows: Activity New Name Acquire (first one) Acquire Processor Acquire (second one) Acquire Operator Create TS Create Task Sequence Load Load Box at Queue Unload Unload at Processor Finish TS Finish Task Sequence Release (first one) Release Operator In the Process Boxes shape, create a stacked block with the following activities: A Wait for Event (under Basic ) A Release Resource (under Shared Assets ) A Sink (under Basic ) Rename the activities and shared assets as follows: Activity New Name Wait for Event Wait for Event: On Process Finish Release (second one) Release Processor Sink Sink: Box Processed Create a connector going from the following activities: From the Create Object: Box activity to the Acquire: Processor activity From the Release Operator activity to the Wait for Event: On Process Finish activity Consider saving your simulation model. Step 3 Edit the Shared Assets and Initial Activities In this step, you'll link the resource shared assets to the two different groups you set up in the first step of the tutorial. You'll also edit the logic that will create the boxes in the simulation model. The following is an overview of how the shared assets and activities will function: Activity Explanation Resource: Processors You'll link this shared activity to the Processors group, which contains the processors in the 3D model. These processors can then be acquired as a destination for the boxes. Resource: Operators You'll link this shared activity to Operators group, which contains the operators in the 3D model. These operators can then be acquired to work on the transportation tasks. Source: Items Arrive This Inter-Arrival Source will set the arrival rate at which boxes will enter the StandardQueue in the 3D model. You'll use the default statistical distribution for this activity for now. Create Object: Box Once the token is created, it will move to this activity which will create a box flow item and place it in the StandardQueue in the 3D model. You'll assign a label named Box that will contain a reference to the specific box that was created by this token. To create this logic: Click the Resource: Processors shared asset to select it. In Properties, click the arrow next to the Reference box to open a menu. Point to Group , then select Processors . Repeat the previous step to link the Resource: Operators shared asset to the Operators group. Click the Create Object: Box activity to select it. In Properties, confirm that the Create In option is selected. In the box below this option, click the Sampler button to enter sampling mode. In the 3D model, click the StandardQueue to open a menu. Select StandardQueue from the menu. In the box under the Assign to option, type token.Box . What Does This Label Do? The Box label will link the token in the process flow with the flow item that was created in the 3D model (the box). It will be used throughout the process flow to reference the specific box that is tied to this token. Consider saving your simulation model. Step 4 Create the Standard Transport Task Logic In this step, you'll edit the activities that will control the logic for the transportation tasks. The following is an overview of how the new activities will function: Activity Explanation Acquire Processor This activity will attempt to acquire one of the processors for the box. If none of the processors are available to work on the task, the token will wait at this activity until a processor becomes available. If a processor is available to receive the box, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named Processor that will contain a reference to the specific processor that was acquired by the token. Acquire Operator This activity will attempt to acquire one of the operators to work on the transportation tasks. If an operator is not available to work on the task, the token will wait at this activity until an operator becomes available. If an operator is available to work on the task, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named Operator that will contain a reference to the specific operator that was acquired by the token. Create Task Sequence This activity sets up the series of the tasks (Load and Unload) as a sequence of tasks to be carried out by the assigned operator. Load Box at Queue This activity tells the operator which flow item needs to be picked up and where it is located. It will use the Operator label to assign the task to the same operator that was acquired in the previous activity and it will use the Box label to tell the operator which item should be transported. Unload at Processor This activity tells the operator where to unload the flow item. It will use the Operator label to assign the task to the same operator that was acquired in the previous activity and it will use the Box label to tell the operator which item should be transported. You'll use the Processor label to tell the operator which processor should receive the flow item. Finish Task Sequence This activity designates the sequence of tasks as finished. Release Operator When the transportation task is complete, this activity will release the operator. It will use the Operator label to release the operator. To create this logic: Click the Acquire Processor activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Resource: Processors shared asset to sample it. In Properties in the Assign To Label box, type token.Processor . What Does This Label Do? When the Acquire Resource activity acquires a resource, it adds a label to the entering token. This label contains a reference to the task executer in the 3D model that was acquired. While you could have used the default label name of resource , it is often helpful to assign more intuitive names to labels for better model management. For the purposes of this tutorial, you're changing the name of the label to Processor so that you'll more clearly see the other places in this process flow that will reference this label. Click the Acquire Operator activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Resource: Operators shared asset to sample it. In Properties in the Assign To Label box, type token.Operator . What Does This Label Do? Similar to the Processor label, the Operator label will track which operator was acquired and assigned to this token. Changing the name of the label to Operator will help you to more clearly see the other places in this process flow that will reference this label. Click the Create Task Sequence activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select Operator . This will assign the task sequence we are creating to the operator previously acquired. Leave the other settings as their default values. You'll notice that this activity creates a new label on the token called taskSequence . All of the tasks in this sequence will be assigned to the sequence via this label. Click the Load Box at Queue activity to select it. In the Properties make sure the default for Executer / Task Sequence reads token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select Box . Click the Unload at Processor activity to select it. In the Properties make sure the default for Executer / Task Sequence reads token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select Box . Click the arrow next to the Station box to open a menu. Point to Token Label and select Processor . We can leave the Finish Task Sequence as its default settings. Make sure the Task Sequence box reads token.taskSequence . This designates the end of the sequence of tasks to be carried out. Click the Release Operator activity to select it. In Properties, click the arrow next to the Resource(s) Assigned To box to open a menu. Point to Token Label and select Operator . Consider saving your simulation model. Step 5 Create the Process Boxes Logic In this step, you'll edit the logic for the activities that will release the processor after it finishes processing the flow item. The following is an overview of how the new activities will function: Activity Explanation Wait for Event: On Process Finish This is an event-listening activity, which means it will listen to an object in the 3D model and release the token to the next downstream activity once the event occurs. This activity will wait for the processor to finish processing the item before releasing the token to the next activity. Release Processor When the flow item is finished being processed, this activity will release the processor. It will use the Processor label to release the processor. Sink: Box Processed This activity removes the token from the process flow. You'll use its default settings. To create this logic: Click the Wait for Event: On Process Finish activity to select it. In Properties, click the arrow next to the Object box to open a menu. Point to Token Label and select Processor . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click ProcessorA to open a menu. Select On Process Finish . Click the Release Processor activity to select it. In Properties, click the arrow next to the Resource(s) Assigned To box to open a menu. Point to Token Label and select Processor . Consider saving your simulation model. Step 6 Run and Test the Model Reset and run the simulation model: As you watch the model run, the operators will load boxes at the StandardQueue and unload them at one of the processors. If your model isn't behaving as expected, go back and double-check that all your property settings are correct. Conclusion Now that you've reviewed the process for creating simple transportation tasks in FlexSim, you're ready to move on to creating a coordinated transportation task. Continue on to Tutorial Task 2.2 - Create Coordinated Loading Tasks ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial2CoordinatedTasks/2-2CoordinatedTasks/2-2CoordinatedTasks.html",
        "title": "Tutorial Task 2.2 - Create Coordinated Loading Tasks",
        "content": "Task Overview In this tutorial task, you'll learn how to create coordinated loading tasks. Coordinated tasks are when two or more operators are needed to complete a given task. To review, up to this point, you've created a simulation model of a system in which two operators transport standard-sized boxes from one queue to two processors. But imagine you needed to create a simulation model for a business system in which: The boxes that needed to be transported had varying weights When the weight of a box exceeds 40, workplace regulations require two operators to transport it You'll model that kind of system in this tutorial. Normally, the two operators will transport standard size boxes on their own. But occasionally, a large box will require them to work together to transport the box, which means you'll need to design coordinated task logic to handle these special tasks. You'll begin by editing the process flow logic so that it occasionally creates a box that has a weight exceeding 40. When a box is larger than 40, you'll design logic that will change the box's visuals so that it appears larger than the standard boxes and is colored red. These changes will help make the heavy boxes visually distinct from the standard boxes. Then, you'll design logic that will place the heavy boxes inside the LargeQueue in the 3D model. After that, you'll add two tracks to your process flow to handle the coordinated tasks. One track will control the main operator who will handle loading and transporting the heavy boxes. The second track will control the assisting operator who will assist with the transportation tasks. You'll use the Process Flow Coordination activities to ensure that the two operators work on these tasks at the same time. See Coordinated Tasks and Process Flow Coordination for a deeper explanation of the processes and activities involved in building coordinated tasks. When you're finished, your simulation model will operate similar to the following image: Step 1 Add Activities to Vary the Weight of Boxes In this step, you'll modify the process flow by adding new activities that will create heavy boxes and place them in the LargeQueue. When you're finished, the process flow will look like this: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the logic in the next step. To add and connect these activities: With the process flow open and active, add the following activities to the end of the stacked block in the Create Boxes shape: An Assign Labels activity (under Basic ) A Decide activity (under Basic ) Rename these activities as follows: Activity New Name Assign Labels Assign Labels: Weight Decide Decide: Standard or Heavy? Add another Container shape (under Display ) to the process flow. In Properties, rename this process shape as Create Heavy Boxes . Click the Color box to change the shape's color to red. Inside the Create Heavy Boxes shape, add the following activities to create a stacked block: 2 Change Visual (under Visual ) A Move Object (under Objects ) Rename these activities as follows: Activity New Name Change Visual (first one) Change Visual: Resize Large Box Change Visual (second one) Change Visual: Color Red Move Object Move Object: To LargeQueue Create a second connector going from the Decide: Standard or Heavy? activity to the Change Visual: Resize Large Box . Consider saving your simulation model. Step 2 Add the Heavy Boxes Logic In this step, you'll modify the process flow by adding activities that will create heavy boxes and place them in the LargeQueue. You'll resize these boxes so that they are larger and colored red. You'll also change the arrival rate for the boxes to slow it down a little bit. The following is an overview of how the new and modified activities will function: Activity Explanation Source: Items Arrive You'll modify this activity so that the boxes will arrive every 10 seconds. Assign Labels: Weight You'll add a label called Weight to the token that randomly assigns a weight to the box between 1 and 50. You'll use the uniform statistical distribution to assign this value. This distribution will mean that most of the time, a standard box (those with a weight below 40) will get created. But occasionally a large box (with a weight above 40) will get created. Decide: Standard or Heavy? This activity will check the value that was assigned to the Weight . If the value of this label is higher than 40, the token will be sent to the activities in the Create Heavy Boxes shape. If the value is lower than 40, it will continue on to the activities in the Standard Transport Tasks shape. Change Visual: Resize Large Box This activity will receive the tokens that are associated with boxes that are classified as heavy because their Weight label is larger than 40. It will resize these boxes so that they appear larger in the 3D model. The standard box size is 0.61 by 0.61 by 0.3. You'll set the large boxes to be 1 by 1 by 0.8. Change Visual: Color Red This activity will change the heavy boxes so that they are colored red in the 3D model. Move Object: To LargeQueue This activity will place the heavy boxes inside the LargeQueue in the 3D model. To create this logic: Click the Source: Items Arrive activity to select it. In Properties, check the Arrival at time 0 checkbox. In the Inter-Arrivaltime box, type 10.00 . Click the Assign Labels: Weight activity to select it. In Properties, click the arrow next to the Assign Labels To box to open a menu. Point to Token Label , then select Box . Click the Add button to add a new label. In the Name box, type Weight . Click the arrow next to the Value box to open a menu. Point to Statistical Distribution , then select Uniform to open the distribution chooser. In the Minimum box, type 1.00 . In the Maximum box, type 50.00 . Click the Decide: Standard or Heavy? activity to select it. In Properties, click the arrow next to the Send Token To box to open a menu. Select Conditional Decide . In the Condition box, type token.Box.Weight < 40 . What Does This Expression Mean? This expression will check the value of the Weight label on the box that is associated with this token. If the value is less than 40, it will return a value of true . If it is true, then it will be routed through the first outgoing connector, which means the token will go to the activities in the Standard Transport Tasks shape. If the value is false (because its weight is bigger than 40), it will be routed through the second outgoing connector, which means it will go to the activities in the Create Heavy Boxes shape. Click the Change Visual: Resize Large Box activity to select it. In Properties next to the Change Visual box, click the Add button to open a menu. Select Set Rotation, Size, or Location . Click the Set menu and select Size . In the Object box, type token.Box . In the Z box, type 0.8 . Click the Change Visual: Color Red activity to select it. In Properties next to the Change Visual box, click the Add button to open a menu. Select Set Object Color . In the Object box, type token.Box . Click the arrow next to the Color box to open a menu. Select Red . Click the Move Object: To LargeQueue activity to select it. In Properties, click the arrow next to the Object(s) box to open a menu. Point to Token Label , then select Box . Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click the LargeQueue to open a menu. Select LargeQueue . Try running the simulation model: As you watch, you'll eventually see a few large, red boxes that will appear in the LargeQueue. For now, the large boxes will just stay in the queue because you haven't created logic to move them out of the queue yet. You'll do that in the rest of the steps of this tutorial. Step 3 Add Coordinated Task Activities In this step, you'll add activities to your process flow that will control the logic of the 3D model. When you're finished with this step, your process flow will look similar to the following image: For now, you'll merely add these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add these activities: Add two Container shapes (under Display ) to the process flow. Rename the two shapes Heavy Transport Tasks and Secondary Transport Tasks . In Properties for both shapes, change the Color box to change each shape's color to red. In the Heavy Transport Tasks shape, create a stacked block with the following activities: An Acquire Resource (under Shared Assets ) A Split (under Coordination ) Rename these activities as follows: Activity New Name Acquire Acquire: Processor Split Split: Create Coordinated Tasks In the Heavy Transport Tasks shape, create a stacked block with the following activities: An Acquire Resource (under Shared Assets ) A Travel (under Task Sequences ) A Create Task Sequence (under Task Sequences ) Rename these activities as follows: Activity New Name Acquire Acquire: Main Operator Travel Travel: MainOp to LargeQueue Create TS Create Main Task Sequence Add the following activities to the Heavy Transport Tasks shape in this order, but leave them floating and unconnected: A Synchronize (under Coordination ) A Load (under Task Sequences ) A Synchronize (under Coordination ) A Travel (under Task Sequences ) A Synchronize (under Coordination ) An Unload (under Task Sequences ) A Synchronize (under Coordination ) A Finish Task Sequence (under Task Sequences ) A Release Resource (under Shared Assets ) stacked with the Finish Task Sequence. Resize the four Synchronize activities so that they span across both the Heavy Transport Tasks and the Secondary Transport Tasks shapes. Rename these activities as follows: Activity New Name Synchronize (first one) Synchronize: Both Operators at LargeQueue Load Load Box at LargeQueue Synchronize (second one) Synchronize: Both Operators Loaded Box Travel Travel: MainOp to Processor Synchronize (third one) Synchronize: Both Operators at Processor Unload Unload Box at Processor Synchronize (fourth one) Synchronize: Both Operators Ready for Release Finish TS Finish Main Task Sequence Release Release: Main Operator Click the stacked block that contains the Acquire: Main Operator activity to select. Press Ctrl+C to copy the stacked block. Press Ctrl+V to paste the stacked block. Position it inside the Secondary Transport Tasks so that it is parallel with the original stacked block. Rename the copied activities as follows: Activity New Name Acquire: Main Operator (copied) Acquire: Assisting Operator Create Main Task Sequence Create Assisting Task Sequence Travel: MainOp to LargeQueue (copied) Travel: AsstOp to LargeQueue Add a Travel activity (under Task Sequences ) to the Secondary Transport Tasks shape. Position it so that it is parallel with the Travel: MainOp to Processor activity in the Heavy Transport Tasks shape. Rename this activity as Travel: AsstOp to Processor . At the bottom of the Secondary Transport Tasks shape, create a stacked block with the following activities: A Finish Task Sequence (under Task Sequences ) A Release Resource (under Shared Assets ) A Sink (under Basic ) Rename these activities as follows: Activity New Name Finish TS Finish Assisting Task Sequence Release Release: Assisting Operator Sink Sink: Coordinated Task Complete Check to make sure your process flow looks similar to the image at the beginning of this step. Step 4 Connect the Activities You'll notice that in the previous step you added some coordination activities (the Split and Synchronize activities). The logic of these activities depends on setting up the connectors between your activities correctly. (See Process Flow Coordination for more information.) For that reason, you'll work on connecting all the activities correctly in this step. The important thing to pay attention to is making sure you connect the activities in the right order so that the connector rankings are correct. Do your best to ensure that you follow these steps in this exact order. When you're finished, your process flow should look similar to the following image: To connect these activities: Create a connector going out from the Move Object: To LargeQueue activity to the Acquire: Processor activity. Create a connector going out from the Split: Create Coordinated Tasks activity to the Acquire: Main Operator activity. Create a second connector going out from the Split: Create Coordinated Tasks activity to the Acquire: Assisting Operator activity. Check Your Connection Rankings In order for this activity's logic to work correctly, the outgoing connectors need to be correct. With this Split activity selected, the connector to the Acquire: Main Operator activity should have a 1 next to it and the connector to the Acquire: Assisting Operator activity should have a 2 next to it. If your connection numbers are reversed, you could delete the connections and re-connect the activities. Alternatively, you could click the connection and change its rank number in Properties. See Changing the Rank Number or Name of Outgoing Connectors for information about editing a connector's rank number. Create connectors between the activities in the Heavy Transport Tasks shape: From the Travel: MainOp to LargeQueue activity to the Synchronize: Both Operators at LargeQueue activity From the Synchronize: Both Operators at LargeQueue activity to the Load Box at LargeQueue From the Load Box at LargeQueue to the Synchronize: Both Operators Loaded Box activity. From the Synchronize: Both Operators Loaded Box activity to the Travel: MainOp to Processor activity From the Travel: MainOp to Processor activity to the Synchronize: Both Operators at Processor activity From the Synchronize: Both Operators at Processor activity to the Unload Box at Processor activity From the Unload Box at Processor activity to the Synchronize: Both Operators Ready for Release activity From the Synchronize: Both Operators Ready for Release activity to the Finish Main Task Sequence activity Create connectors between the activities in the Secondary Transport Tasks shape: From the Travel: AsstOp to LargeQueue activity to the Synchronize: Both Operators at LargeQueue activity From the Synchronize: Both Operators at LargeQueue activity to the Synchronize: Both Operators Loaded Box activity From the Synchronize: Both Operators Loaded Box activity to the Travel: AsstOp to Processor activity From the Travel: AsstOp to Processor activity to the Synchronize: Both Operators at Processor activity From the Synchronize: Both Operators at Processor activity to the Synchronize: Both Operators Ready for Release activity From the Synchronize: Both Operators Ready for Release activity to the Finish Assisting Task Sequence activity Check Your Connection Rankings Click each Synchronize activity and check that the connector rankings that connect to activities in the Heavy Transport Tasks shape are always ranked 1 (both incoming and outgoing). Check that connections to activities in the Secondary Transport Tasks shape are always ranked 2 (both incoming and outgoing). Create a connector going out from the Release: Main Operator to the Wait for Event: On Process Finish stacked block (in the Process Boxes shape). Click the newly created connector to select it. In Properties in the Line Style group, open the Type menu and select Split . Consider saving your simulation model. Step 5 Edit the Heavy Transport Task Logic In this step, you'll create the logic that will control the tasks for the operator on the Heavy Transport Tasks track. The following is an overview of how the activities will function: Activity Explanation Acquire: Processor This activity will attempt to acquire one of the processors for the box. If the processor is not available to receive the flow item, the token will wait at this activity until the processor becomes available. If the processor is available, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named Processor that will contain a reference to the specific processor that was acquired. Split: Create Coordinated Tasks The Split activity will split the incoming token into two identical tokens and release them through each outgoing connector. You'll use these two tokens to synchronize the two operators so that they can coordinate their tasks. One token will control the main operator and the other will control the assisting operator. You'll create the second token as an independent token with a copy of the original token's labels. Acquire: Main Operator This activity will attempt to acquire an operator to work on the transportation tasks. If the operator is not available to work on the task, the token will wait at this activity until the operator becomes available. If the operator is available to work on the task, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named MainOperator that will contain a reference to the specific operator that was acquired and you'll use this to assign the rest of the tasks to this operator. Create Main Task Sequence This activity sets up the series of the tasks (Load and Unload) as a sequence of tasks to be carried out by the main operator. Travel: MainOp to LargeQueue This activity will tell the main operator to travel to the LargeQueue in the 3D model. It will use the MainOperator label to assign the task to the same operator that was acquired in the previous activity. Synchronize: Both Operators at LargeQueue This activity will ensure that the main operator will wait until the assisting operator has also traveled to the queue and is ready to help load the large box. The token controlling the main operator will wait until the token controlling the assisting operator reaches this activity. You'll use the default settings for this activity. Load Box at LargeQueue This activity will tell the main operator to load the box at LargeQueue. It will use the MainOperator label to assign the task to the same operator that was acquired in the previous activity and it will use the Box label to tell the operator which item should be transported. Synchronize: Both Operators Loaded Box This activity will ensure that the assisting operator will wait until the main operator has loaded the large box. The token controlling the assisting operator will wait until the token controlling the main operator reaches this activity. You'll use the default settings for this activity. Travel: MainOp to Processor This activity will tell the main operator to travel to the processor that was acquired earlier. It will use the MainOperator label to assign the task to the same operator that was acquired in the previous activity and it will use the Processor label to tell the main operator which processor it should travel to. Synchronize: Both Operators at Processor This activity will ensure that both the main operator and the assisting operator will both arrive at the processor before unloading the box. The token controlling the assisting operator will wait until the token controlling the main operator reaches this activity. You'll use the default settings for this activity. Unload Box at Processor This activity tells the main operator to unload the box at the processor. It will use the MainOperator label to assign the task to the same operator that was acquired in the previous activity and it will use the Box label to tell the operator which item should be transported. You'll use the Processor label to tell the operator which processor should receive the flow item. Synchronize: Both Operators Ready for Release This activity will ensure that the assisting operator will wait until the main operator has unloaded the large box. The token controlling the assisting operator will wait until the token controlling the main operator reaches this activity. You'll use the default settings for this activity. Finish Main Task Sequence This activity designates the series of tasks for the main operator as finished. Release: Main Operator This activity releases the main operator so that it can work on other tasks. It will use the MainOperator label to release the operator. To create this logic: Click the Acquire: Processor activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Resource: Processors shared asset to sample it. In Properties, click the arrow next to the Assign To Label box to open a menu. Point to Token Label , then select Processor . What Does This Label Do? When the Acquire Resource activity acquires a resource, it adds a label to the entering token. This label contains a reference to the task executer in the 3D model that was acquired. While you could have used the default label name of resource, it is often helpful to assign more intuitive names to labels for better model management. For the purposes of this tutorial, you're changing the name of the label to Processor so that you'll more clearly see the other places in this process flow that will reference this label. Click the Acquire: Main Operator activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Resource: Operators shared asset to sample it. In Properties in the Assign To Label box, type token.MainOperator . What Does This Label Do? Similar to the Processor label, the MainOperator label will track which operator was acquired and assigned to this token. Changing the name of the label to MainOperator will help you to more clearly see the other places in this process flow that will reference this label. Click the Create Main Task Sequence activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select MainOperator . In the box below the Assign To radio button, change the text to token.MainTaskSequence Click the Travel: MainOp to LargeQueue activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select MainTaskSequence . Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click the LargeQueue to open a menu. Select LargeQueue . Click the Load Box at LargeQueue activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select MainTaskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select Box . Click the Travel: MainOp to Processor activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select MainTaskSequence . Click the arrow next to the Destination box to open a menu. Point to Token Label and select Processor . Click the Unload Box at Processor activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select MainTaskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select Box . Click the arrow next to the Station box to open a menu. Point to Token Label and select Processor . Click the Finish Main Task Sequence activity to select it. In Properties, click the arrow next to the Task Sequence box to open a menu. Point to Token Label and select MainTaskSequence . Click the Release: Main Operator activity to select it. In Properties, click the arrow next to the Resource(s) Assigned To box to open a menu. Point to Token Label and select MainOperator . Consider saving your simulation model. Step 6 Edit the Secondary Transport Task Logic In this step, you'll create the logic that will control the tasks for the operator on the Secondary Transport Tasks track. The following is an overview of how the activities will function: Activity Explanation Acquire: Assisting Operator This activity will attempt to acquire an operator to work on the transportation tasks. If the operator is not available to work on the task, the token will wait at this activity until the operator becomes available. If the operator is available to work on the task, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named AssistingOperator that will contain a reference to the specific operator that was acquired and you'll use this to assign the rest of the tasks to this operator. Create Assisting Task Sequence This activity sets up the series of the tasks (Load and Unload) as a sequence of tasks to be carried out by the assisting operator. Travel: AsstOp to LargeQueue This activity will tell the assisting operator to travel to the LargeQueue in the 3D model. Synchronize: Both Operators at LargeQueue This activity will ensure that the main operator will wait until the assisting operator has also traveled to the queue and is ready to help load the large box. The token controlling the main operator will wait until the token controlling the assisting operator reaches this activity. You'll use the default settings for this activity. Synchronize: Both Operators Loaded Box This activity will ensure that the assisting operator will wait until the main operator has loaded the large box. The token controlling the assisting operator will wait until the token controlling the main operator reaches this activity. You'll use the default settings for this activity. Travel: AsstOp to Processor This activity will tell the assisting operator to travel to the processor that was acquired earlier. It will use the Processor label to tell the main operator which processor it should travel to. Synchronize: Both Operators Ready for Release This activity will ensure that the assisting operator will wait until the main operator has unloaded the large box. The token controlling the assisting operator will wait until the token controlling the main operator reaches this activity. You'll use the default settings for this activity. Finish Assisting Task Sequence This activity designates the series of tasks for the assisting operator as finished. Release: Assisting Operator This activity releases the assisting operator so that it can work on other tasks. Sink: Coordinated Task Complete This activity removes the token that was linked to the flow item from the process flow. To create this logic: Click the Acquire: Assisting Operator activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Resource: Operators shared asset to sample it. In Properties in the Assign To Label box, type token.AssistingOperator . What Does This Label Do? Similar to the Processor label, the AssistingOperator label will track which operator was acquired and assigned to this token. Changing the name of the label to AssistingOperator will help you to more clearly see the other places in this process flow that will reference this label. Click the Create Assisting Task Sequence activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select AssistingOperator . In the box below the Assign To radio button, change the text to token.AssistingTaskSequence Click the Travel: AsstOp to LargeQueue activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select AssistingTaskSequence . Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click the LargeQueue to open a menu. Select LargeQueue . Click the Travel: AsstOp to Processor activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select AssistingTaskSequence . Click the arrow next to the Destination box to open a menu. Point to Token Label and select Processor . Click the Finish Assisting Task Sequence activity to select it. In Properties, click the arrow next to the Task Sequence box to open a menu. Point to Token Label and select AssistingTaskSequence . Click the Release: Assisting Operator activity to select it. In Properties, click the arrow next to the Resource(s) Assigned To box to open a menu. Point to Token Label and select AssistingOperator . Consider saving your simulation model. Step 7 Run and Test the Simulation Model Run the simulation model: As you watch, you'll see that when a large box appears in the LargeQueue, eventually one of the operators will go to load it. Once the other operator comes to load the box as well, the two operators then transport the box to one of the processors. The Split and Synchronize activities make it possible for the two operators to perform their tasks at the same time. The only disadvantage of coordinated tasks is that the two operators follow the exact same travel path when they're working on the coordinated task and so their 3D visualizations appear to be merged together, creating an odd visual effect. One way to possibly fix this would be to apply some Change Visual activities that would apply a small offset to the assisting operator. However, that's a little difficult to get right and you might find it's easier just to live with the strange visualization. Conclusion This concludes the coordinated tasks tutorial. By now, you should have gotten a sense of how to build coordinated tasks by building parallel tracks and using the Coordination process flow activities to synchronize the tasks between the two operators."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial3ConditionalTasks/ConditionalTasksOverview/ConditionalTasksOverview.html",
        "title": "Tutorial 3 - Conditional Tasks",
        "content": "This tutorial is an advanced tutorial that will teach you how to build tasks that are only performed under certain conditions that might vary during a simulation model run. You'll create a model in which an operator transports multiple flow items to three possible destinations. The destination that will receive the flow items will depend on whether those destinations have reached their maximum capacity or not. You'll learn a little bit about sub flows and get introduced to some more advanced FlexScript expressions. When you're finished, your simulation model will operate similar to the following image: Tasks Covered This tutorial will cover the following tasks: Task 3.1 Use Sub Flows and Arrays In this task, you'll design a system in which an operator transports several flow items at a time. In order to create this logic, you'll learn how to use sub flows in the Process Flow tool and you'll learn about labels that contain a special type of data called arrays . Task 3.2 Add Conditional Tasks In this task, you'll add some additional destination queues and set some constraints on those destinations by restricting how many flow items they can hold at a time. These constraints will create the changing conditions that your model logic will need to respond to dynamically when the model runs. You'll learn how to create nested sub flows and custom user commands that will create this model logic. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Key Concepts About Task Logic Sub Process Flows"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial3ConditionalTasks/3-1SubflowsArrays/3-1SubflowsArrays.html",
        "title": "Tutorial Task 3.1 - Use Sub Flows and Arrays",
        "content": "Task Overview In this tutorial task, you'll build a simple 3D model in which an operator transports multiple items at a time. When you're finished, your simulation model will operate similar to the following image: In order to create this kind of logic, you'll need to learn about two important concepts: arrays and sub flows. The following sections will briefly introduce these concepts and link you to other relevant material for further information. Using Arrays in Labels In FlexSim, the term array refers to a data structure that can contain more than one value if needed. Each element in that array is usually identified by an index , which is a number that indicates the position of the value in the array. In this 3D model, you'll use a label that contains an array of values. When an operator is ready to pick up items for transport, a Pull From List activity in the process flow will pull 2-5 flow items from a list (each representing an item that needs to be transported). The references to those flow items will be stored in a label called GroupOfItems that contains an array of values. The reference for each flow item will be assigned a unique index, starting with 1. Each index will be assigned based on the order in which the flow items were pulled from the list. The following image shows an example of what the GroupOfItems array could possibly contain: In this example, the GroupOfItems array contains references to five flow items. In this example, the array has 1-5 indexes since the Pull From List activity will pull up to 5 items from the list at a time. Each index has a specific value , which, in this case, is a reference to a unique flow item in the 3D model. If you want to reference one of the flow items in the array, you will need to use its specific index. When you call that index, it will return its current value. Using the example in the preceding image, the FlexScript expression token.GroupOfItems[2] would return a reference to the flow item named Box11 in the 3D model. The expression token.GroupOfItems[4] would return a reference to the flow item named Box17 in the 3D model. Another FlexScript expression you'll find useful when working with arrays is .length . This expression will return a value that indicates how many elements are in a specific array. Continuing with the example in the preceding image, the FlexScript expression token.GroupOfItems.length would return a value of 5 because there are 5 elements in this array. Using Sub Flows A sub process flow (usually called a sub flow for short) is a separate process flow or set of activities that begin running when it is triggered by another activity or event in a process flow. Think of sub flows as chunks of self-contained logic that will get executed when they are triggered by certain events in the simulation model or general process flow. Sub flows can cut down on the need to repeatedly create a certain block of process flow activities in multiple places throughout your process flows. In other words, it can help you cut down on redundancy in your process flow and make it more efficient and well-organized. In this first tutorial task, you'll create a sub flow for loading and unloading flow items. Since the operator will load and unload multiple flow items at a time, you'll create sub flows to handle the loading and unloading logic. Rather than having to create a long string of activities to handle the loading and unloading of each flow item, each flow item will instead run through the sub flow on its own. You'll only need to create one simple block of activities for the loading process and one block for the unloading process. See Sub Process Flows for a deeper explanation of the key concepts related to sub flows. Step 1 Build the 3D Model In this step, you'll build a basic 3D model for this tutorial. You'll add two planes, one for loading and another for unloading. You'll add various 3D objects to these two planes and one operator to handle the transportation tasks. In the last few steps, you'll create some 3D object groups as well. When you're finished, your model should look similar to the following image: To build this model: Make sure your 3D model window is open and active. From the Library, drag two Planes (under Visual ) into the model. Click the first Plane to select it. In Quick Properties, rename it as Loading . Click the color selector to open it. Select the light red color. Change the X-size to 7.00 and the Y-size to 7.00 . Click the second Plane to select it. In Quick Properties, rename it as Destination1 . Click the color selector to open it. Select the light orange color. Change the X-size to 13.00 and the Y-size to 7.00 . From the Library, drag the following 3D objects into the model and place them on the Loading plane: A Source A Queue Rename the objects as follows: Object New Name Source1 MainSource Queue1 MainQueue From the Library, drag the following 3D objects into the model and place them on the Destination1 plane: A Queue A Processor A Sink Create port-connections (A-connects) between the following objects: From MainSource to MainQueue From Queue1 to Processor1 From Processor1 to Sink1 From the Library, drag an Operator into the model, placing it between the two planes. Right-click Operator1 to open a menu. Point to Object Groups and select Add to New Group to open a new group properties window. In the name box at the top of the window, change the name of the group to Operators . Close the window. Right-click Queue1 to open a menu. Point to Object Groups and select Add to New Group to open a new group properties window. In the name box at the top of the window, change the name of the group to Destinations . Close the window. Click the Source to bring up its properties on the right. Under the Source section, check the Arrival at time 0 box. In the Inter-Arrivaltime box, type 5 . Check to ensure your model looks similar to the image shown at the beginning of this step. Step 2 Add Activities to a Process Flow In this step, you'll add the activities and shared assets to a process flow. These activities will eventually control the 3D model's transportation logic. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the logic in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow to create a new process flow. With the process flow active, in Properties, change the name of the process flow to TransportTasks . Add 5 Container shapes (under Display ) to the process flow. Rename the shapes as follows: Shared Assets MainQueue Pushes Items to List Operator Tasks Loading Sub Flow Unloading Sub Flow In Properties, use the color selector to change the color of the Loading Sub Flow shape to red. Repeat the previous step to change the color of the Unloading Sub Flow shape to orange. In the Shared Assets shape, add the following shared assets: A List A Resource Rename the shared assets as follows: Shared Asset New Name List List: ItemsToTransport Resource Resource: Operators In the MainQueue Pushes Items to List shape, add the following activities to create a stacked block: An Event-Triggered Source (under Token Creation ) A Push to List (under Shared Assets ) A Sink (under Basic ) Rename the activities as follows: Activity New Name Source Source: Item Enters MainQueue Push to List Push to List: ItemsToTransport Sink Sink: Item Was Pushed In the Operator Tasks shape, add the following activities to create a stacked block: An Schedule Source (under Token Creation ) An Acquire Resource (under Shared Assets ) An Assign Labels (under Basic ) In the Operator Tasks shape, add the following activities to create another stacked block: A Travel (under Task Sequences ) A Pull from List (under Shared Assets ) 2 Run Sub Flow activities (under Sub Flow ) Rename the activities as follows: Activity New Name Source Source: Create Token for Operator Acquire Acquire Operator Assign Labels Assign Labels: MainQueue Travel Travel to MainQueue Pull from List Pull from List: ItemsToTransport Run Sub Flow (first one) Run Sub Flow: Loading Run Sub Flow (second one) Run Sub Flow: Unloading In the Loading Sub Flow shape, add the following activities to create another stacked block: A Start (under Sub Flow ) A Load (under Task Sequences ) A Finish (under Sub Flow ) Rename the activities as follows: Activity New Name Start Start Loading Sub Flow Load Load Items at MainQueue Finish Finish Loading Sub Flow In the Unloading Sub Flow shape, add the following activities to create another stacked block: A Start (under Sub Flow ) An Assign Labels (under Basic ) An Unload (under Task Sequences ) A Finish (under Sub Flow ) Rename the activities as follows: Activity New Name Start Start Unloading Sub Flow Assign Labels Assign Labels: Destination Unload Unload Items at Destination Finish Finish Unloading Sub Flow Create connectors between the following activities: Going from Assign Labels: MainQueue to Travel to MainQueue Going from Run Sub Flow: Unloading looping back to Travel to MainQueue Right-click the Run Sub Flow: Loading activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light red color. Repeat this process to change the color of all the activities in the Loading Sub Flow shape to light red. Right-click the Run Sub Flow: Unloading activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light orange color. Repeat this process to change the color of all the activities in the Unloading Sub Flow shape to light orange. Check to make sure your process flow looks similar to the image shown in the beginning of this step. Step 3 Create the Push to List Logic In this step, you'll edit the properties for the activities in the MainQueue Pushes Tasks to List shape. Simply put, when a flow item enters the queue, it will get pushed to a list where it will wait indefinitely until it can be transported. The following is an overview of how each activity and shared asset will function: Activity Explanation List: Items to Transport This list will store a reference to all the flow items in the MainQueue that are ready to be transported to a destination queue. You'll use the default settings for now. Resource: Operators You'll link this shared activity to the Operators group in the 3D model so that the operator in this group can be acquired for the transportation tasks. Source: Item Enters MainQueue The Event-Triggered Source is an event-listening activity that will listen to events in the 3D model. When a flow item enters Queue3, this activity will create a token and release it to the next downstream activity. You'll assign a label to this token named FlowItem that will contain a reference to the specific flow item that triggered the event. Push to List: Items to Transport This activity will push all flow items that are in the queue onto the Items to Transport list. When the items get pushed to the list, they will retain the reference to the specific flow item using the FlowItem label. Sink: Item Was Pushed This activity removes the token from the process flow. You'll use its default settings. To create this functionality: Click the Resource: Operators shared asset to select it. In Properties, click the arrow next to the Reference box to open a menu. Point to Group , then select Operators . Click the Source: Item Enters MainQueue activity to select it. Click the Exclamation Point button to enter sampling mode. In the 3D model, click MainQueue to open a menu. Select MainQueue: On Entry . In Properties, in the Label Assignment table, click the cell that is on the Entering Item row under the Label Name column. Type FlowItem . Click the cell that is on the Entering Item row under the Operation to open a menu. Select assign . What Does This Label Do? Standard, object-based events have specific parameters associated with them. In this case, the Entering Item parameter contains a reference to the flow item that triggered the event. You'll usually want to preserve some of this information by putting it into a label that can be referenced by other process flow activities. For the purposes of this tutorial, you'll use the label name FlowItem so that you'll more clearly see the other places in this process flow that will reference this label. Click the Push to List: Items to Transport activity to select it. Click the Exclamation Point button to enter sampling mode. Click the List: Items to Transport shared asset to select it. A blue line will now link this activity to the shared asset. In Properties, click the arrow next to the Push Value box to open a menu. Point to Token Label , then select FlowItem . Consider saving your simulation model. Step 4 Add the Operator Task Logic The following is an overview of how each activity and shared asset will function: Activity Explanation Source: Create Token for Operator When the simulation starts, this activity will create a token for each operator in the Operators group. You'll set this activity to reference the NumberOfOperators process flow variable that you'll set up in this tutorial step. This activity will determine how many tokens to create by referencing how many operators are in the group at the time the simulation starts. Acquire Operator This activity will attempt to acquire a resource (one of the operators) to work on the transportation tasks. If an operator is not available to work on the task, the token will wait at this activity until the operator becomes available. If an operator is available to work on the task, the token will acquire that resource and release the token to the next downstream object. When the resource is acquired, you'll assign the token a label named Operator that will contain a reference to the specific operator that was acquired. Assign Labels: MainQueue This activity will create a label called MainQueue which will contain a reference to the MainQueue object in the 3D model. Travel to MainQueue This activity will tell the operator to travel to the MainQueue. You'll use the MainQueue label that you created in the Assign Labels activity. To create this functionality: Click a blank area in the process flow to ensure nothing is selected. In Quick Properties, click the More Properties button. On the Variables tab, click the Add button to create a new variable. In the Name box, change the name of the variable to NumberOfOperators . Confirm that the Type menu is set to Number . In the Default Value box, delete the current value and type Group(\"Operators\").length . What Does This Code Mean? This code will tell the process flow how many members are currently in the Operators group. The code .length refers to the number of members in the group. You'll need this variable so that the process flow can create a token for each operator that will work on transportation tasks. If you add or remove operators from this group, the process flow will automatically update on reset. Click the OK button to close the window and save the changes. Click the Source: Create Token for Operator activity to select it. In Properties in the Arrivals table, click the cell under the Quantity column. With that cell selected, click the arrow next to the Arrival 1: Quantity box under the table to open a menu. Point to Process Flow Variable , then select NumberOfOperators . What Does This Process Flow Variable Do? Recall that earlier in this tutorial, you create a process flow variable called NumberOfOperators that tells the process flow how many members are currently in the Operators group. You'll need this variable so that the Schedule Source activity can create a token for each operator that is available to work on transportation tasks. If you add or remove operators from this group, this activity will automatically update when you reset the simulation model. Click the Acquire Operator activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. Click the Resource: Operators shared asset to select it. A blue line will now link this activity to the shared asset. In the Assign To Label box, delete the current text and type token.Operator . Click the Assign Labels: MainQueue to select it. In Properties, click the Add button to add a new label. In the Name box, type MainQueue . Next to the Value box, click the Sampler button to enter sampling mode. In the 3D model, click the MainQueue to open a menu. Select Loading/MainQueue . Click the Travel to MainQueue activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label , then select Operator . Click the arrow next to the Destination box to open a menu. Point to Token Label , then select MainQueue . Consider saving your simulation model. Step 5 Set Up the Loading Sub Flow In this step, you'll set up the loading logic for the operator. You'll pull a certain number of items from the list, then tell the operator to load that number of items at the MainQueue. You'll do all of this using a label that contains an array and a sub flow that is dedicated to loading items. The following is an overview of how each activity and shared asset will function: Activity Explanation Pull from List: ItemsToTransport This activity will pull up to 5 flow items from the Items to Transport list. You'll assign the token a label called GroupofItems that will contain an array with references to each flow item that was pulled from the list. Run Sub Flow: Loading This activity will create child tokens and send them to the Loading Sub Flow. You'll set up the logic of this activity so that it will create a child token for each item that was pulled from the list in the previous activity. You'll also put a reference for each individual flow item in a label on the child tokens called MyItem . Start Loading Sub Flow Every sub flow needs to begin with a Start activity. When the Run Sub Flow activity sends child tokens to a sub flow, it will always send them to this activity. You'll use the default settings for this activity. Load Items at MainQueue When each child token reaches this activity, it will tell the operator which flow items to load and which location to load them from. You'll use the Operator label to indicate which operator should perform this task and you'll use the MyItem label on each child token to tell the operator which items it should load from the MainQueue. Finish Loading Sub Flow Every sub flow needs to end with a Finish activity. The parent token on the Run Sub Flow activity will wait at that activity until all of its child tokens have reached the Finish activity. You'll use the default settings for this activity. To create this functionality: Click the Pull from List: ItemsToTransport activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. Click the List: ItemsToTransport shared asset to select it. A blue line will now link this activity to the shared asset. In the Request Number box, type 5.00 . In the Require Number box, type 2.00 . Confirm that the Assign to option is selected. In the box below this option, type token.GroupOfItems . What Does This Label Do? When this activity pulls items from the list, it adds a label to the entering token that will contain a reference to the item in the 3D model that was pulled from the list. In this case, you'll pull up to 5 items from the list at a time. Rather than make a label on the token for each individual item, you'll instead store each item as an index in an array. Arrays can store references to multiple items at the same time. In this case, you'll name this array GroupOfItems that will contain references to each item that was pulled from the list. Click the Run Sub Flow: Loading activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. In the Loading Sub Flow shape, click the Start Loading Sub Flow activity to sample it. In Properties, click the arrow next to the Quantity box to open a menu. Select Array Size to open a picklist options window. In the picklist options window, click the arrow next to the Array box to open a menu. Point to Labels , then select token.GroupOfItems . When you click outside the picklist options, it will auto-generate the correct expression for you. What Does This Expression Mean? This expression tells the Run Sub Flow activity how many child tokens need to be created in the Loading Sub Flow. The first part of the expression token.GroupOfItems references the array you created in the previous Pull From List activity. The .length part of the expression gets the number of indexes that are currently in the array. In other words, it returns a value based on how many items were pulled from the list and creates a token for each item on the list. Click the Add button to add a label. In the Name box, type MyItem . Click the arrow next to the Value box to open a menu. Point to Array , then select Value from Label Array to open a picklist options window. In the picklist options window, click the arrow next to the Label box to open a menu. Select GroupOfItems . Click the arrow next to the Index box to open a menu. Select creationRank . When you click outside the picklist options, it will auto-generate the correct expression for you. What Does This Expression Mean? This expression tells the Run Sub Flow activity to create a unique reference to each index in the array, which correlates to each flow item that was pulled from the list. The first part of the expression token.GroupOfItems references the array you created in the previous Pull From List activity. When the [creationRank] part of the expression is evaluated for the first created child token, the creationRank will have a value of 1. When it is evaluated for the second created child token, creationRank will have a value of 2, and so forth. In this case, the order in which the tokens were created will correlate with the indexes of the GroupOfItems array. For example, token.GroupOfItems[1] would return the reference to the first flow item that was pulled from the list in the previous Pull From List activity. Therefore, each child token that is created will have a label called MyItem that will contain a unique reference to one of the flow items that was pulled from the list. Be aware that the creationRank code is generally only used with process flow activities that create tokens such as Run Sub Flows or other token creation activities. It isn't code that you can use with arrays in general. In the Loading Sub Flow shape, click the Load Items at MainQueue activity to select it. In Quick Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label , then select Operator . Click the arrow next to the Item box to open a menu. Point to Token Label , then select MyItem . Consider saving your simulation model. Step 6 Set Up the Unloading Sub Flow In this step, you'll set up the unloading logic for the operator. The unloading sub flow will work similar to the loading sub flow, except that the operator will unload items at a specified destination. The following is an overview of how each activity and shared asset will function: Activity Explanation Run Sub Flow: Unloading This activity will create child tokens and send them to the Unloading Sub Flow. The settings for this activity will be identical to the Run Sub Flow: Loading activity. This activity will create a child token for each item that was pulled from the list in the previous activity. You'll also put a reference for each individual flow item in a label on the tokens called MyItem on the child tokens. Start Unloading Sub Flow Every sub flow needs to begin with a Start activity. When the Run Sub Flow activity sends child tokens to a sub flow, it will always send them to this activity. You'll use the default settings for this activity. Assign Labels: Destination This activity will create a label on the child token that sets its destination. For now, you'll sample Queue1 in the 3D model to set that as the destination for all tokens. Unload Items at Destination When each child token reaches this activity, it will tell the operator which flow items to unload and which location to load them from. You'll use the Operator label to indicate which operator should perform this task and you'll use the MyItem label on each child token to tell the operator which items it should load from the MainQueue. The Destination label that you set in the previous activity will tell the operator to unload the items at Queue1 in the 3D model. Finish Unloading Sub Flow Every sub flow needs to end with a Finish activity. The parent token on the Run Sub Flow activity will wait at that activity until all of its child tokens have reached the Finish activity. You'll use the default settings for this activity. To create this functionality: Click the Run Sub Flow: Unloading activity to select it. Click the Exclamation Point button next to the activity to enter sampling mode. In the Unloading Sub Flow shape, click the Start Unloading Sub Flow activity to sample it. In Properties, click the arrow next to the Quantity box to open a menu. Select Array Size to open a picklist options window. In the picklist options window, click the arrow next to the Array box to open a menu. Point to Labels , then select token.GroupOfItems . When you click outside the picklist options, it will auto-generate the correct expression for you. Click the Add button to add a label. In the Name box, type MyItem . Click the arrow next to the Value box to open a menu. Point to Array , then select Value from Label Array to open a picklist options window. In the picklist options window, click the arrow next to the Label box to open a menu. Select GroupOfItems . Click the arrow next to the Index box to open a menu. Select creationRank . When you click outside the picklist options, it will auto-generate the correct expression for you. Click the Assign Labels: Destination activity to select it. In Properties, click the Add button to add a label. In the Name box, type Destination . Next to the Value box, click the Sampler button to enter sampling mode. In the 3D model, click Queue1 to open a menu. Select Destination1/Queue1 to sample it. In the Unloading Sub Flow shape, click the Unload Items at Destination activity to select it. In Quick Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label , then select Operator . Click the arrow next to the Item box to open a menu. Point to Token Label , then select MyItem . Click the arrow next to the Station box to open a menu. Point to Token Label , then select Destination . Consider saving your simulation model. Step 7 Run the Model Reset and run the model: As you watch, the operator will load multiple items at the MainQueue and then unload them all at the Queue1. If you wanted, you could increase the distance between the two queues to see how that would affect the operator's efficiency. Conclusion In this tutorial task, you reviewed how to use lists to assign tasks to an operator and you got a simple introduction to how arrays and sub flows work. In the next tutorial, you'll learn how to add some complexity to the model when you add additional destinations. You'll build the logic that will change where the operator unloads flow items based on certain varying conditions and constraints in the model. Continue to Tutorial Task 3.2 - Add Conditional Tasks ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial3ConditionalTasks/3-2AddConditionalTasks/3-2AddConditionalTasks.html",
        "title": "Tutorial Task 3.2 - Add Conditional Tasks",
        "content": "Task Overview In this tutorial task, you'll learn how to create tasks that can change based on varying conditions during a model run. You'll add some constraints to the simulation model that will create these varying conditions. To start, you'll add two additional unloading destinations, for a total of three. Then, you'll add some restrictions to the number of flow items that these queues can accept at a given time by changing their maximum capacity. These limitations will create conditions in which an operator might not be able to unload all the items at a single destination and will have to evaluate whether the queues have room to accept flow items. You'll create this logic by building a nested sub flow (a sub flow within a sub flow) that uses Decide activities to make decisions dynamically during a simulation run based on whether the destinations have reached their full capacity or not. When you're finished, your simulation model will operate similar to the following image: Groups Can Also Act as Arrays In the previous tutorial, you learned that arrays are data structures that can contain more than one value if needed. To review, you also learned that each element in that array is usually identified by an index , which is a number that indicates the position of the value in the array. In the previous tutorial you created a label that contained an array called GroupOfItems that contained 2-5 flow items that were pulled from the ItemsToTransport list. But labels aren't the only thing that can contain arrays. 3D object groups actually store information about their members as arrays. Just like you can reference individual flow items in the GroupOfItems array by their index, you can also refer to specific members of a 3D object group by their index. A group member's index is based on the order in which it appears in the group. For example, in the first step in this tutorial, you'll add two additional queues to the 3D model. Then, you'll add these queues to the Destinations group you created in the previous tutorial: In this example, the Destinations group has an array that contains three queues. Each queue occupies a position between 1-3 in the array, which is its index . If you want to reference one of the queues in the array, you will need to use its specific index. Using the example in the preceding image, the FlexScript expression Group(\"Destinations\")[2] would return a reference to Queue2 in the Destination2 plane. The expression Group(\"Destinations\")[3] would return a reference to Queue3 in the Destination3 plane. Recall that the expression .length will return a value that indicates how many elements are in a specific array. In this same way, the expression Group(\"Destinations\").length would return a value of 3 because there are 3 members in the Destinations group. You've Seen This Expression Before Did you notice that you actually already used this expression in the previous tutorial task when you created the process flow variable that would check for how many operators were in the Operators group? See Tutorial 3.1 - Step 4 for reference. Step 1 Modify the 3D Model In this step, you'll add two additional destinations to the 3D model. Then, you'll add some constraints to your model by restricting how many flow items each queue can hold at a given time. When you're finished, your model will look similar to the following image: To make these changes: Click the Destination1 plane in the 3D model to select it. (It's the orange one.) Press Ctrl+C to copy the plane and all the objects on it. Click somewhere blank in the model to de-select the original plane. Press Ctrl+V to copy the plane. Repeat this step to add a third plane. With the second copied plane selected, in Properties, change the name of the plane to Destination2. Rename each of the 3D objects on the second copied plane so that they all end in a 2, such as Queue2, Processor2, and Sink2 . Repeat these steps to change the name of the third copied plane to Destination3 and renaming all the objects on the plane so that they end in 3. Click Queue1 to select it. In Properties in the Queue tab, in the Max Content box, type 2 . Click the OK button to save the changes and close the properties window. Repeat this step for Queue2 , changing its Max Content to 1 . Repeat this step for Queue3 , changing its Max Content to 3 . When you copied the two planes, FlexSim should have automatically added Queue2 and Queue3 to the Destinations group. To confirm this, open the Toolbox in the left pane. Double-click the Destinations group to open its properties window. Confirm that the two new queues are in this group. Close all of the group windows. Check to ensure your model looks similar to the image shown at the beginning of this step. Step 2 Reorganize the Process Flow In this step, you'll change the process flow by reorganizing the shapes and activities in the Unloading Sub Flow. This sub flow is actually going to contain a sub flow within a sub flow, so you'll create the organization for that logic. When you're finished, your process flow should look similar to the following image: For now, you'll merely reorganize some of the shapes and activities in the process flow. But you will make a small change to the Run Sub Flow: Unloading activity at the end of this step. To reorganize the process flow: Move the Unloading Sub Flow shape so that it is below the other shapes and resize it so that it is much larger. Add a Container (under Display ) and move it so that it is inside the Unloading Sub Flow . Rename the new shape Unload at Destination Sub Flow . In Properties, use the color selector to change the color of the Unload at Destination Sub Flow shape to the second darkest yellow. Click the stacked block of activities in the Unloading Sub Flow to select it. Click the Unlink buttons to separate the Unload Items at Destination activity. Move the Unload Items at Destination activity into the Unload at Destination Sub Flow shape. Right-click the Unload Items at Destination activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light yellow color. Rename the Assign Labels: Destination activity as Assign Labels: DestinationNumber . In the Operator Tasks shape, click the Run Sub Flow: Unloading activity to select it. In Quick Properties in the Quantity box, delete the current text and type 1 . Consider saving your simulation model. Step 3 Add Activities to the Unloading Sub Flow In this step, you'll add some additional activities to the Unloading Sub Flow process flow. These activities will eventually control unloading logic for the 3D model. When you're finished, your process flow should look similar to the following image: For now, you'll merely add these activities to the process flow. You'll add connections and edit the properties to add the logic in a later step. To add these activities: In the Unloading Sub Flow shape, create a stacked block with the following activities: A Run Sub Flow activity (under Sub Flow ) A Decide activity (under Basic ) Rename the activities as follows: Activity New Name Run Sub Flow Run Sub Flow: Unload at Destination Decide Decide: More Items to Unload? Right-click the Run Sub Flow: Unload at Destination activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light yellow color. Right-click the Decide: More Items to Unload? activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light orange color. In the Unloading Sub Flow create a stacked block with the following activities: An Assign Labels activity (under Basic ) A Decide activity (under Basic ) Rename the activities as follows: Activity New Name Assign Labels Assign Labels: DestinationNumber+1 Decide Decide: More Destinations to Try? Change the color of both these activities to light orange. Click the stacked block with the Run Sub Flow: Unload at Destination to select it. Press Ctrl+C to copy the stacked. Press Ctrl+V to copy the activities. Move the newly copied stacked block so that it is between the Assign Labels: DestinationNumber +1 stacked block and the Finish Unloading Sub Flow activity. Add a Wait for Event activity (under Basic ) to the beginning of the newly copied stacked block. Rename the Wait for Event activity as Wait for Event: A Queue Has Space . Right-click the Assign Labels: DestinationNumber+1 activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light orange color. Repeat the previous step to change the color of the rest of the activities to light orange (except for the yellow Run Sub Flow activities). In the Unload at Destination Sub Flow shape, create a stacked block with the following activities near the top of the shape: A Start activity (under Sub Flow ) A Travel activity (under Task Sequences ) Rename the activities as follows: Activity New Name Start Start Unload at Destination Sub Flow Travel Travel to Destination Add a Decide activity (under Basic ) under the stacked block, but leave it loose and unconnected. Rename this activity Decide: Any Space for Items? . Add another Decide activity, appending it to the Unload Items at Destination activity to create a stacked block. Rename this activity Decide: More Items to Unload? . Add a Finish activity (under Sub Flow ) under the last stacked block, but leave it loose and unconnected. Rename this activity Finish Unload at Destination Sub Flow . Right-click the Start: Unload at Destination activity to open a menu. Select Edit Activity Visuals to open a properties window. Open the Background Color selector and choose the light yellow color. Repeat these steps to change all the activities in the Unload at Destination Sub Flow shape to a light yellow color. Consider saving your simulation model. Step 4 Connect the Activities You'll notice that in the previous step you added some Decide activities. The logic of Decide activities depends on setting up the connectors between your activities correctly. For that reason, you'll work on connecting all the activities correctly in this step. The important thing to pay attention to is making sure you connect the activities in the right order so that the connector rankings are correct. Do your best to ensure that you follow these steps in this exact order. When you're finished, your process flow should look similar to the following image: To connect these activities: Create a connector going out from the Assign Labels: DesinationNumber activity to the stacked block starting with the RunSub Flow: Unload at Destination activity. Create a connector going out from the Decide: More Items to Unload? activity to the Assign Labels: DesinationNumber+1 activity. Click the connector you just created to select it. In Properties in the Name box, type Yes . Create a connector going out from the Decide: More Items to Unload? activity to the Finish Unloading Sub Flow . Click the connector you just created to select it. In Properties in the Name box, type No . Check Your Connection Rankings In order for this activity's logic to work correctly, the outgoing connectors need to be correct. With this Decide activity selected, the connector named Yes should have a 1 next to it and the connector named No should have a 2 next to it. If your connection numbers are reversed, you could delete the connections and re-connect the activities. Alternatively, you could click the connection and change its rank number in Properties. See Changing the Rank Number or Name of Outgoing Connectors for information about editing a connector's rank number. Create a connector going out from the Decide: More Destinations to Try? activity looping back to the stacked block starting with the Run Sub Flow: Unload at Destination activity. Click the connector you just created to select it. In Properties in the Name box, type Yes . Create a connector going out from the Decide: More Destinations to Try? activity to the stacked block starting with the Wait for Event: A Queue Has Space activity. Click the connector you just created to select it. In Properties in the Name box, type No . Check Your Connection Rankings In order for this activity's logic to work correctly, the outgoing connectors need to be correct. With this Decide activity selected, the connector named Yes should have a 1 next to it and the connector named No should have a 2 next to it. Create a connector going out from the Decide: More Items to Unload? activity looping back to the beginning of the that same stacked block, the one starting with the Wait for Event: A Queue Has Space activity. Click the connector you just created to select it. In Properties in the Name box, type Yes . Create a connector going out from the Decide: More Items to Unload? activity to the stacked block starting with the Finish Unloading Sub Flow activity. Click the connector you just created to select it. In Properties in the Name box, type No . Check Your Connection Rankings In order for this activity's logic to work correctly, the outgoing connectors need to be correct. With this Decide activity selected, the connector named Yes should have a 1 next to it and the connector named No should have a 2 next to it. Create a connector going out from the Travel to Destination activity to the Decide: Any Space for Items? activity. Create a connector going out from the Decide: Any Space for Items? activity to the Unload Items at Destination activity. Click the connector you just created to select it. In Properties in the Name box, type Yes . Create a connector going out from the Decide: Any Space for Items? activity to the Finish: Unload at Destination Sub Flow activity. Click the connector you just created to select it. In Properties in the Name box, type No . Check Your Connection Rankings In order for this activity's logic to work correctly, the outgoing connectors need to be correct. With this Decide activity selected, the connector named Yes should have a 1 next to it and the connector named No should have a 2 next to it. Create a connector going out from the Decide: More Items to Unload? activity looping back to the Decide: Any Space for Items? activity. Click the connector you just created to select it. In Properties in the Name box, type Yes . Create a connector going out from the Decide: More Items to Unload? activity to the Finish: Unload at Destination Sub Flow activity. Click the connector you just created to select it. In Properties in the Name box, type No . Check Your Connection Rankings In order for this activity's logic to work correctly, the outgoing connectors need to be correct. With this Decide activity selected, the connector named Yes should have a 1 next to it and the connector named No should have a 2 next to it. Consider saving your simulation model. Step 5 Edit the Main Unloading Sub Flow Logic In this step, you'll create the logic that will control the main activities in the unloading sub flow (the orange activities). The following is an overview of how the activities will function: Activity Explanation Start Unloading Sub Flow Every sub flow needs to begin with a Start activity. When the Run Sub Flow activity sends child tokens to a sub flow, it will always send them to this activity. You'll use the default settings for this activity. Assign Labels: DestinationNumber You'll change the previous settings you used for this activity in the previous tutorial. You'll rename the label that is assigned to tokens to DestinationNumber and assign it an initial value of 1. You'll use this label later to refer to one of the queues in the Destinations group by the order in which they appear in the Destinations group (their index). Run Sub Flow: Unload at Destination (first one) This activity will create one child token and send it to the Unload at Destination Sub Flow. You'll also create a label on the child token called Destination . Using the DestinationNumber label you created in the previous activity, you'll be able to reference the first queue in the Destinations group in the 3D model. You'll set that queue as the first destination. Decide: More Items to Unload? (first one) After the Unload at Destination Sub Flow finishes running, it will move to this activity. This activity will check to see if there are any other items that need to be unloaded by seeing if there are any items left to unload in the GroupOfItems array. If there are items left over, the token will be routed to the next downstream activity. If all the items have been unloaded, it will send the token to the Finish Unloading Sub Flow activity. Assign Labels: DestinationNumber+1 If there are more items to unload, this activity will increase the DestinationNumber label by one. Recall that this label will tell the process flow which queue in the Destination group is the current destination that the operator should attempt to unload items at (using its index number). If the operator just tried Queue1, it will try Queue2, and so forth. Decide: More Destinations to Try? Since the previous activity will increase the DestinationNumber label by one, you'll need this activity to make sure that this label doesn't increase beyond the number of Destinations that are currently available in the model. This Decide activity will compare the current value of the DestinationNumber value against the number of queues that are currently in the Destinations group in the 3D model. If the destination is less than or equal to the number of members in the Destinations group, that will mean there are still more destinations at which the operator can attempt to unload items. If so, the token will be looped back to the first Run Sub Flow: Unload at Destination activity and the unloading sub flow will run again at the next destination. If not, the token will move to the Wait for Event: A Queue Has Space activity. Wait for Event: A Queue Has Space If a token reaches this Wait for Event activity, it's because all of the queues in the model were currently at their maximum capacity. The token will wait here until a flow item exits one of the queues and clears up space for that flow item. Since you'll be listening to a group of queues, you'll update the Destination label so that it will have a reference to the specific queue that triggered the event. Then, the token will move to the second Run Sub Flow activity. Run Sub Flow: Unload at Destination (second one) If a token reaches this activity, it means that one of the queues now has space to receive a flow item. It will then need to run the Unload at Destination Sub Flow for the Destination that triggered the event in the previous activity. Decide: More Items to Unload? (second one) After the Unload at Destination Sub Flow finished running, it will move to this activity. This activity will check to see if there are any other items that need to be unloaded by seeing if there are any items left to unload in the GroupOfItems array. If there are items left over, the token will be looped back to the Wait for Event activity. If all the items have been unloaded, it will send the token to the Finish Unloading Sub Flow activity. Finish Unloading Sub Flow Every sub flow needs to end with a Finish activity. The parent token on the Run Sub Flow activity will wait at that activity until all of its child tokens have reached the Finish activity. You'll use the default settings for this activity. To create this logic: Click the Assign Labels: DestinationNumber activity to select it. In the Name box, change the text to DestinationNumber . In the Value box, delete the existing text and type 1.00 . What Does This Label Do? As was discussed in the introduction to this tutorial, the Destinations group is basically an array. Each group member in that array is assigned an index based on the order they appear in the group. The DestinationNumber label will eventually refer to the index number of one of the queues in the Destinations group in the 3D model. For now, you will set it to 1, which means that it will become the index for the queue that is listed first in the Destinations group. Right now, Queue1 should be in the first position and so it will be the first destination. Therefore, the number 1 should correlate with Queue1's index in the Destinations group. Click the Run Sub Flow: Unload at Destination activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Start Unload at Destination Sub Flow activity to sample it. In Properties under the Assign Labels to Children group, click the Add button to add a label. In the Name box, type Destination . In the Value box, type Group(\"Destinations\")[token.DestinationNumber] . What Does This Expression Mean? As was explained in the introduction to this tutorial task, groups are arrays and each group member has an index in this array. The first part of this expression Group(\"Destinations\") references the Destinations group that you created. This group contains the three destination queues in the 3D model. The second part of the expression [token.DestinationNumber] provides the index number for the group member you want to reference. Recall that you created the DestinationNumber label earlier in the Unloading Sub Flow. This label's initial value is 1. Therefore, [token.DestinationNumber] will return the value of 1. The first part of the expression Group(\"Destinations\") will reference the Destinations group in the 3D model. Therefore, the full expression Group(\"Destinations\")[token.DestinationNumber] will return a reference Queue1 in the 3D model. Later in the sub flow, another Assign Labels activity will increase the value of the DestinationNumber label to 2 if the operator needs to drop off more flow items and Queue1 is already at its maximum capacity. By creating dynamic references that will change if the conditions of the model are different, you can set up your model to scale well. You can add as many destinations as needed without having to update the logic each time. Click the Decide: More Items to Unload? activity to select it. In Properties, click the arrow next to the Send Token To box to open a menu. Select Conditional Decide to open a properties window. In the Condition box, delete the current text and type token.GroupOfItems.length > 0 . What Does This Expression Mean? This expression tells the Decide activity to check and see if there are any more items in the GroupOfItems array. The first part of the expression token.GroupOfItems references the array you created in the previous Operator Tasks portion of the process flow. The .length part of the expression gets the number of indexes that are currently in the array. In other words, it returns a value based on how many items now remain in the GroupOfItems array. The > 0 part of the code checks whether the value is greater than zero. If there are still items left to unload, this expression will return a positive number, which means the value of the expression will be true. The token will then be sent to the Assign Labels: DestinationNumber+1 activity. If there are no items left to unload, the expression will return a 0, which means the expression is false. In that case, the token will be sent to the Finish Unloading Sub Flow activity. Skipping ahead again, repeat these same steps for the second Decide: More Items to Unload? activity so that their properties are identical. Click the Assign Labels: DestinationaNumber+1 activity to select it. In Properties, click the Add button to add a label. Click the arrow next to the Name box to open a menu. Point to Token Label , then select DestinationNumber . Click the arrow next to the Value box to open a menu. Select Increment Label to open up a properties window. You'll use the default value of 1 so just click outside of the window. Click the Decide: More Destinations to Try? activity to select it. In Properties, click the arrow next to the Send Token To box to open a menu. Select Conditional Decide to open a properties window. In the Condition box, delete the current text and type token.DestinationNumber <= Group(\"Destinations\").length . What Does This Expression Mean? This expression will compare the current value of the token's DestinationNumber label with the number of destinations that are currently available. If the DestinationNumber is equal to or less than the number of available destinations, it will return a true value and it will mean that there is still more destinations that can be checked for space. If there are more destinations to try, the token will be sent through the Yes connector. Otherwise, it will be sent through the No connector. Click the Wait for Event: A Queue Has Space to select it. In Properties, click the arrow next to the Object box to open a menu. Point to Group , then select Destinations . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click any one of the Queue objects to open a menu. Select On Exit . Click the arrow next to the Assign Event Object To box to open a menu. Point to Token Label , then select Destination . Click the Run Sub Flow: Unload at Destination activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the Start Unload at Destination Sub Flow activity to sample it. Consider saving your simulation model. Step 6 Edit the Unload at Destination Sub Flow Logic In this step, you'll create the logic that will control the activities in the Unload at Destination Sub Flow (the yellow activities). The following is an overview of how the activities will function: Activity Explanation Start Unload at Destination Sub Flow Every sub flow needs to begin with a Start activity. When the Run Sub Flow activity sends child tokens to a sub flow, it will always send them to this activity. You'll use the default settings for this activity. Travel to Destination This activity will tell the operator to travel to the one of the destination queues in the 3D model. You'll use the Destination label that was created on the Run Sub Flow activity that created this child token to determine which queue is the current destination. Decide: Any Space for Items? This activity will determine whether the current destination has reached its maximum capacity or not. If it has not reached its maximum capacity, then the token will be sent to the Unload Items at Destination activity. If the queue is full, the token will be sent to the Finish Unload at Destination Sub Flow activity. Unload Items at Destination When each child token reaches this activity, it will tell the operator which flow items to unload and which location to load them at. You'll use the Operator label to indicate which operator should perform this task and you'll use the MyItem label on each child token to tell the operator which items it should load from the MainQueue. The Destination label that you set in the previous activity will tell the operator to unload the items at Queue1 in the 3D model. Decide: More Items to Unload? After the operator has finished unloading one flow item, it will move to this activity. This activity will check to see if there are any other items that need to be unloaded by seeing if there are any items left to unload in the GroupOfItems array. If there are items left over, the token will be routed to the next downstream activity. If all the items have been unloaded, it will send the token to the Finish Unload at Destination Sub Flow activity. Finish Unload at Destination Sub Flow Every sub flow needs to end with a Finish activity. The parent token on the Run Sub Flow activity will wait at that activity until all of its child tokens have reached the Finish activity. You'll use the default settings for this activity. To create this logic: Click the Travel to Destination activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label , then select Operator . Click the arrow next to the Destination box to open a menu. Point to Token Label , then select Destination . Click the Decide: Any Space for Items? activity to select it. In Properties, click the arrow next to the Send Token To box and select Conditional Decide to open a properties window. In the Condition box, type token.Destination.subnodes.length < getvarnum(token.Destination, \"maxcontent\") . What Does This Expression Mean? Notice this code is a comparison statement. The less-than symbol < in the code is comparing the value of the left half of the statement to the value on the right half of the statement. The left half the statement token.Destination.subnodes.length is getting the current content of the queue in the 3D model that is currently set as this token's Destination label. If a queue is currently holding any flow items, they will be listed as subnodes for the queue node in the FlexSim tree. The phrase .length checks to see how many subnodes there are (if any). The right half of the statement getvarnum(token.Destination, \"maxcontent\") checks for the maximum capacity of the queue that is currently set as this token's Destination label. If the current content is less than the maximum content, it means that the destination still has room for more flow items. Therefore, the statement is true and it will return a 1. If the current content is greater than the maximum content, the statement is false and it will return a 0. Click the Unload Items at Destination activity to select it. In Properties, in the Item box, type token.GroupOfItems.pop() . What Does This Expression Mean? This expression tells the operator to unload whatever item is at the end of the array. The first part of the expression token.GroupOfItems tells the activity to use the GroupOfItems label on the token, which contains an array. The second part of the expression .pop() is a command that gets the value of the last index in the array. After it gets the value of that command, it actually then deletes that index from the array. You'll want to delete the flow item from the array after it has been unloaded so that it's no longer tracked by the operator. Click the Decide: More Items to Unload? activity to select it. In Properties, click the arrow next to the Send Token To box and select Conditional Decide to open a properties window. In the Condition box, type token.GroupOfItems.length . Consider saving your simulation model. Step 7 Run the Simulation Model Reset and run the model: As you watch, the operator will start dropping off items at the first queue. When the first queue reaches its maximum capacity of 2 flow items, the operator will move on to the second queue. If the second queue has reached its maximum capacity of 1, then the operator will move to the third queue. If your model isn't behaving exactly this way, check your properties to make sure you didn't accidentally skip a crucial step. Generally you can figure out which activity is causing problems by checking which activity has tokens at the time an error occurs. Conclusion This concludes Tutorial 3. In this tutorial, you built a model with some fairly complex transportation logic. Hopefully you can see how with a little bit of knowledge of FlexScript and some conditional logic using Decide activities, you can make some pretty robust simulation models for any kind of business system you need to simulate."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial4AGVs/AGVOverview/AGVOverview.html",
        "title": "Task Tutorial 4 - Automatic Guided Vehicles (AGVs)",
        "content": "Using FlexSim's AGV objects, you can study and create the ideal systems for creating an AGV network that maximizes speed and efficiency. FlexSim's AGV module is designed to simulate AGV travel systems at any level of complexity. You can use the AGV module to compare different layouts and dispatching strategies, or to analyze load balancing and capacity constraints. The high-fidelity simulation of AGV travel includes detailed speed, acceleration, and deceleration profiles, as well as accumulation and/or mutual exclusion in travel areas. In FlexSim, you can use task executers to transport flow items from one fixed resource to another. The AGV objects use these same basic principles of transportation, but they use more sophisticated travel networks and logic. You'll learn more about this logic in this tutorial. In this tutorial, you'll learn both basic and advanced techniques for building AGV networks in FlexSim. You'll build a system of AGV networks that will transport medical supplies, laundry, and waste to and from the loading dock to the rest of the hospital. When you're finished, your 3D model will look and function similar to the following image: Tasks Covered This tutorial will cover the following tasks: Task 4.1 AGVs Using Standard 3D Logic In this task, you'll learn how to create a basic AGV network using only standard 3D logic. You'll learn how to create AGV paths and connect 3D objects to control points along those paths. You'll also learn how to add more than one AGV to a simulation model. Task 4.2 AGVs Using Process Flow In this tutorial task, you'll learn how to set up the AGV process flow template. You'll also learn how to create pick up areas, drop off areas, and park points. At the end of the tutorial, you'll learn how to adjust control point sensitivity in order to make your system more efficient. Task 4.3 Using Elevators With AGVs In this task, you'll learn how to use elevators to transport AGVs to multiple floors in a model. You'll also learn how to create custom flow items and how to send AGVs to different types of locations based on the type of load it is carrying. Task 4.4 Custom AGV Settings In the last tutorial task, you'll learn how to create custom loading and unloading times for different types of flow items. You'll learn how to use a global table to create custom loading and unloading times for each type of custom flow item. For More Information To learn more about some of the concepts explained in this tutorial, see the following topics: Key Concepts About AGV Networks Working With AGV Paths Building AGV Network Logic Adding Elevators to AGV Networks"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial4AGVs/4-1AGVsUsingStandardLogic/4-1AGVsUsingStandardLogic.html",
        "title": "Tutorial Task 4.1 - AGVs Using Standard 3D Logic",
        "content": "Task Overview When you complete this tutorial, you'll eventually build an AGV network for an entire hospital. The AGVs will transport medical supplies, laundry, and waste to and from the loading dock area throughout the rest of the hospital. For now in this first tutorial task, you'll focus on creating a very basic AGV network using only standard 3D logic. You'll learn how to create AGV paths and connect 3D objects to control points along those paths. You'll also learn how to add more than one AGV to the model. When you're finished, your model will look similar to the following image: Step 1 Add and Connect AGV Paths In this step, you'll add and connect AGV paths together to create the main AGV network. This network will become a circular circuit on which AGVs will loop around continuously looking for tasks to work on. When you're finished with this step, your 3D model should look like the following image: For the most part, AGV paths can be added, moved, resized, etc. using the same methods you would use for other 3D objects. However, the key difference is that AGV paths have two ends: respectively called the start and the end. The start is where AGVs enter the path and the end is where AGVs leave the path. Although these two ends are connected, you can move them independently. Curved paths also have a radius, start angle, and sweep angle that you can use to control the arc of the path. To create the AGV path layout for this 3D model: In the Library, click the Expand button next to the AGV group to view the AGV objects. Click the Straight Path to enter path building mode . When you are in path building mode, your mouse pointer will change to a plus sign with a Straight Path icon next to it, as shown in the following image: Once in building mode, find the position in your 3D model where you want to place the start of the AGV path. When you click on that position in the model and start moving the mouse pointer from left to right, you'll notice that it begins creating an AGV path. Reposition the mouse pointer until the path is 28 units away from the start. Eventually the main AGV looping path will be 25 units along the x-axis and 30 units long the y-axis, but you'll want to leave 1 unit of space on either end. Notice that you are still in path building mode. You'll build 3 additional paths. Try to build the paths into a square box shape that is approximately 25 by 30 units long without connecting the paths together at the corners, as shown in the following image: Press the Esc key to exit path building mode. Before joining these paths, check to ensure that the paths are oriented to move in a counter-clockwise direction. The directional arrows on each path show you the direction that the AGVs will move on this path: The south path should move from left to right The east path should move from down to up The north path should move from right to left The west path should move from up to down Changing Path Direction If you need to change the direction of the paths, click the path to select it. In Properties, click the Switch Direction button. The directional arrows on the path should reverse themselves. Now it's time to join the paths. In the Library under the AGV group, click the Join Paths object to enter path joining mode . When you are in path joining mode, your mouse pointer will change to a plus sign with a Join Paths icon next to it, as shown in the following image: While you are in joining mode, hover your mouse over the end of one of the paths until it turns yellow, as though it were highlighted. Click the path and start moving the mouse pointer to the end of the nearest path. Click the path when it turns yellow as though it were highlighted. The paths should now be joined. Join all the remaining paths together so that they form a closed circuit. Check the Joined Path Directions Check the new joined paths to make sure they match the direction that the AGVs should travel from one path to another. The new paths should match the directional flow of the other paths. Press the Esc key to exit path joining mode. Consider saving your simulation model at this point. Step 2 Add and Connect 3D Objects to the Network In this step, you'll add a variety of 3D objects to the model: A queue that will act as the hospital's unloading dock where it will eventually receive shipments of medical supplies and clean laundry Two processors that will represent the amount of time it takes to stage the shipments for pick up by the AGVs at their loading stations A TaskExecuter object (because these objects visually look like AGVs by default) A sink that will temporarily act as a destination for the AGV when it unloads its shipments Perhaps most importantly, you'll learn how to use an AGV object called a control point to connect 3D objects to an AGV network in this step. Control points are access points where fixed resources and task executers can interact with the AGV network. You'll connect the fixed resources to a control point so that they can call and receive transports. And you'll connect the task executers to the control point so that they can enter and travel on the AGV network. Keep in mind that the AGV network is basically a more sophisticated way to transport flow items from one 3D object to another, but the basic transport logic is very similar to the standard method of transporting flow items using a task executer. For that reason, you'll need to make sure that all the objects are connected with port connections. When you're finished with this step, your 3D model should look similar to the following image: To add and connect these objects: In the Library under the AGV group, drag out seven Control Points and place two on each straight path except the top one. Place each control point about 5 units away from the sides of the paths, as shown in the following image: For clarity, rename a few of the new control points as follows: Object New Name Control Point in the top east corner AGVEntryPoint Control Point in the upper west corner MainDropOffPoint Control Point in the lower west corner MainPickUpPoint Add the following 3D objects from the Library into the 3D model: A Queue (near the MainPickUpPoint) 2 Processors (near the MainPickUpPoint) A Sink (near the MainDropOffPoint) A TaskExecuter (near the AGVEntryPoint) For clarity, rename the objects as follows: Object New Name Queue UnloadingDock Processor1 Staging1 Processor2 Staging2 Sink DropOff TaskExecuter AGV1 Create a connection (A-connect) from AGV1 to the AGVEntryPoint control point to open a menu. Select Traveler AGV . A red line will appear showing the AGV is connected. Create connections (A-connect) for the following objects: From the Staging1 processor to the MainPickUpPoint control point From the Staging2 processor to the MainPickUpPoint control point From the DropOff sink to the MainDropOffPoint control point From UnloadingDock queue to Staging1 processor From UnloadingDock queue to Staging2 processor From Staging1 processor to DropOff sink From Staging2 processor to DropOff sink Create a center-port connection (S-connect) from the Staging1 processor to AGV1 . Repeat the previous step to connect the Staging2 processor to AGV1 as well. Turning Off Port Connection Visuals in AGV Models As you can probably see, port connections in AGV systems tend to look a little cluttered and messy. You won't need these port connections for very long in this tutorial because they will get replaced by other logic. However, if you would like, you can turn off the port connection visuals. Click a blank area in the 3D model to ensure nothing is selected. In Properties, clear the Show Connections box to turn off the connections temporarily. When you're finished, your model should look similar to the image shown at the beginning of this step. Step 3 Set Up the Transportation Logic In this step, you'll create the basic transportation logic that the staging processors will use to send items to the drop off sink using the AGV network. For now, you'll learn how to integrate AGVs into the standard 3D object logic. In a future step, you'll learn how to integrate it with process flow. At the end of this step, you'll also set up a simple process flow that will handle the schedule for items that arrive at the unloading dock. For now, you'll set the schedule to only deliver two flow items that will immediately be processed by the two staging processors. In the future, you'll make this arrival schedule more complex. Keep in mind that the main goal in this step is mostly to test that the basic transportation logic is working. When you're finished, your process flow will look similar to the following image: The following is an overview of how each activity will function: Activity Explanation Source: MedSupplies Deliveries The Schedule Source is an activity that will create tokens at a specific time during a simulation model. For now, you'll set this activity to create two tokens when the simulation model begins. Create Object: Item at Unloading Dock This activity will create a box flow item and place it inside the UnloadingDock queue. Sink: Item Created This activity removes the token from the process flow. You'll use its default settings. To set up the transportation logic: Click Staging1 processor to bring up its properties on the right. Under the Output section, check the Use Transport box. Click the OK button to save the changes and close the properties window. Repeat the previous steps for the Staging2 processor as well. On the main toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow to create a new process flow. In Properties, change the name of this new process flow to DeliverySchedule . From the library under the Display group, add a Container shape. For clarity, rename the shape Medical Supplies . Add the following activities to the process flow, creating a stacked block: A Schedule Source (under Token Creation ) A Create Object (under Objects ) A Sink (under Basic ) For clarity, rename the new activities as follows: Object New Name Source Source: MedSupplies Deliveries Create Object Create Object: Item at Unloading Dock Sink Sink: Item Created Click the Source: MedSupplies Deliveries activity to select it. In Properties, under the Arrivals table, find the cell on the first row under the Quantity column. Type 2 in this cell. Click the Create Object: Item at Unloading Dock activity to select it. In Properties, check to ensure that the Create In option is selected. Next the box under this option, click the Sampler button to enter sampling mode. In the 3D model, click the UnloadingDock queue to open a menu. Select UnloadingDock to sample it. Reset and run the model to test that the basic AGV transportation logic is working: This Model Is Running at a Faster Speed The model run shown in the previous image is running at 10.00 speed, which is slightly faster than the default speed. If you've set up your model correctly, the two processors will process two flow items. When they are done processing, the AGV will pick up one flow item and transport it to the sink. Then, it will loop back around again and pick up another flow item. If your model isn't behaving as expected, go back and check that you've completed the previous steps in the tutorial correctly. Step 4 Add a Second AGV In this step, you'll learn how to add additional AGVs to the AGV network. If you are using standard logic to control the AGVs, you'll need to switch to using a dispatcher once you begin using more than one AGV. When you're finished, your 3D model will look similar to the following image: To add a second AGV: Remove the center port connections that are connecting AGV1 to the Staging1 and Staging2 processors. (Press and hold the W key while clicking two connected objects.) From the Library add the following objects to the model: A Dispatcher A TaskExecuter For clarity, rename the objects as follows: Object New Name Dispatcher1 AGVDispatcher TaskExecuter AGV2 Create a center-port connection (S-connect) from the Staging1 processor to AGVDispatcher . Repeat the previous step to connect the Staging2 processor to AGVDispatcher as well. Create port connections (A-connects) from the AGVDispatcher to both the AGVs . Drag AGV1 away from the AGVEntryPoint so that the control point is visible in the 3D model. Create a port connection (A-connect) from AGV2 to the AGVEntryPoint control point to open a menu. Select Traveler AGV . A red line will appear showing the second AGV is connected. Reset and run the model: Notice that AGV2 gets deadlocked because AGV1 stays at the drop off point and won't move so that AGV2 can deliver the flow item. The reason why AGV1 doesn't move is because there are no more unloading tasks for it to work on. As a result, it just remains at its current position until it gets assigned a new task to work on. Since the current model only schedules two flow items to arrive at the unloading dock, there will never be any new tasks. You could solve this problem by ensuring there is a continuous amount of work for the two AGVs to work on. You could also add more than one drop off point to the sink so that different AGVs can each deliver their loads to the sink without having a conflict. However, adding park points is easier when you use the AGV process flow template, which will be covered in the next tutorial task. Conclusion Now that you've built a very basic AGV model using only standard 3D objects and standard 3D logic, it's time to make this basic model a little more complex. In the next tutorial task, you'll learn how to use the AGV process flow template and you'll add some pick up and parking points to the model. Continue on to Tutorial Task 4.2 - AGVs Using Process Flow ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial4AGVs/4-2AGVsUsingProcessFlow/4-2AGVsUsingProcessFlow.html",
        "title": "Tutorial Task 4.2 - AGVs Using Process Flow",
        "content": "Task Overview To make AGV simulation even simpler, FlexSim has several pre-built AGV process flow templates you can use with your AGV simulation project. These process flow templates already have the basic logic needed for most AGV systems. The following image shows a zoomed out version of the advanced AGV template: In this tutorial task, you'll learn how to set up the advanced process flow template. You'll also learn how to create pick up areas, drop off areas, and park points. At the end of the tutorial, you'll learn how to adjust control point sensitivity in order to make your system more efficient. While it is beyond the scope of this tutorial to explain the exact details of how the AGV template works, you should be aware that this process flow will control nearly all of the logic in this AGV system. Consider exploring the AGV process flow template in more detail to learn how it works. When you're finished, your model will look similar to the following image: Step 1 Add the AGV Process Flow Template In this step, you'll create the AGV Process Flow template and attach the AGVs to the process flow. As you'll see in this step, the basic set up is fairly simple. After creating the process flow template, you'll need to attach the AGVs to the process flow. Then, you'll set the processors to push transportation tasks to a global list called AGVWork, which is automatically created when you set up the AGV process flow. Once the AGVs are attached to the process flow, you won't need the dispatcher object, so you can delete it. In order for the process flow to work correctly, you'll also need to create a Next Work Point loop. A Next Work Point loop is basically a series of control points that are connected to each other in a loop. Once this circuit has been set up, the AGVs in the system will loop continuously through the network looking for transportation tasks to work on. You'll set up the Next Work Point system in the main AGV network in this step. To add the process flow and set up its logic: On the main toolbar, click the Process Flow button to open a menu. Point to Add an Object Process Flow and then select Advanced AGV to create this process flow template. In the newly created process flow, click a blank area to ensure nothing is selected. In Properties under the Process Flow Instances group, find the Attached Objects (instances) box. Click the Sampler button by this box to enter sampling mode. In the 3D model, click AGV1 . It should now show up in the Attached Objects box. Repeat the previous steps to attach AGV2 to the process flow as well. Now that the AGVs are attached to the process flow, you can delete the AGVDispatcher in the 3D model. In the 3D model, click the Staging1 processor to bring up its properties. Under the Output section, click the arrow next to the Use Transport box to open a menu. Point to Use List , then select Push to Item List (No Task Sequence) to open a picklist window. The AGV Template Auto-Generates a Global List When you first added the AGV process flow template to your model, the template created a global list named AGVWork . This global list is for handling available AGV transportation tasks. This list is automatically integrated into the logic of the AGV process flow template. Check that the List box shows that the AGVWork list is currently selected. Leave the rest of the properties on their default settings. Click off the properties window to save the changes and close it. Repeat the previous steps to add the AGVWork list to the Staging2 processor as well. If the two AGVs are currently hovering over the AGVEntryPoint control point, drag those away from the control point so the control point is visible. Create a connection (A-connect) from the AGVEntryPoint control point to the MainDropOffPoint control point to open a menu. Select NextWorkPoint . A red line will appear showing the two control points are connected. Repeat the process to create Next Work Point connections looping between the rest of the control points in the following order: From the MainDropOffPoint control point to the MainPickUpPoint control point From the MainPickUpPoint control point to the bottom left control point From the bottom left control point to the bottom right control point From the bottom right control point to the lower right control point From the lower right control point to the upper right control point From the upper right control point to the AGVEntryPoint control point Reset and run the simulation model: If you'll recall from the end of the previous tutorial task, there was a problem in which AGV1 and AGV2 get deadlocked. Fortunately, this problem no longer occurs because both AGVs now loop around the system continuously looking for work, regardless of whether there is actual work that needs to be performed or not. The AGV process flow template automatically creates this logic. Step 2 Add a Pick Up Area In this step, you'll learn how to add a pickup area and connect pick up control points to location control points. You'll create pickup stations where up to 10 items can wait for transportation by an AGV. When you're finished with this step, your 3D model will look similar to the following image: To create a pick up area: Create a horizontal AGV path going from right to left extending out from the lower left corner of the AGV network that is 14 units long. Leave 1 unit of space on either end. Create a vertical AGV path going from up to down that is 3 units long. The path should be 1 unit left and down from the previous path. Create a horizontal path going from left to right that is 16 units long. It should be 1 unit right and down from the previous path. Create a vertical path going down to up that is 3 units long. It should be 1 unit right and up from the previous path. Use the Join Paths tool in the Library to join these paths together. Join the main AGV path to the first and last new path you created. Make sure the join paths flow in the same direction as the other paths. Add 10 control points to the top and bottom paths, spacing them about 3 units apart. For clarity, rename the new control points as PickUp1, Pickup2, etc. in the order that the AGVs will pass over them. Create a control point connection (A-connect) from MainPickUpPoint control point to the PickUp1 control point to open a menu. Select PickUpPoints . A green line will appear showing the two control points are connected. Repeat the previous steps to create pick up control points from the MainPickUpPoint to all 10 of the pick up control points. Performing the Same Operation on Multiple Objects If you have multiple objects you want to perform the same action on, you can select them all first and then do the action. You can read more about this in Highlighting and Selecting Objects . For example, if you want to make an A-connection from one control point to many control points, start by selecting the many control points with Ctrl+Click. Start A-connecting from the single control point to one of the many. When you complete the connection, that same connection will appear on the rest of the highlighted control points. Open the DeliverySchedule process flow. Click the Source: MedSupplies Deliveries activity to select it. In Properties, under the Arrivals group, find the cell on the first row under the Quantity column. Type 10 in this cell. Reset and run the model: Notice that the flow items enter the queue and the processors begin processing them. Then, the processors pass them to the MainPickUpPoint control point, which immediately diverts the items to one of the ten pick up points. When the AGVs pass over the MainPickUpPoint looking for work, it diverts them to the pick up area. The AGVs then load the flow items and transport them to their destination. If you keep the model running long enough, the AGVs will transport all of the items. Notice that when that happens, they will bypass entering the pick up area because there isn't any transportation work in that area for them to work on: Step 3 Add a Drop Off Area In the same way that you can create pick up points for AGV transfers, you can also create drop off points for fixed resources. This step will guide you through the process. When you're finished with this step, your 3D model will look similar to the following image: To create a drop off area and use a global list: In the 3D model, delete the DropOff sink. Create a horizontal AGV path going from right to left extending out from the upper left corner of the AGV network that is 12 units long. Leave 1 unit of space on either end. Create a vertical AGV path going from up to down that is 3 units long. The path should be 1 unit left and down from the previous path. Create an identical horizontal path going from left to right that is 12 units long. It should be 1 unit right and down from the previous path. Use the Join Paths tool in the Library to join these paths together. Join the main AGV path to the first and last new path you created. Make sure the join paths flow in the same direction as the other paths. Add 4 control points to the top and bottom path, spacing them equally along the path. For clarity, rename the new control points as DropOff1, DropOff2, etc. in the order that the AGVs will pass over them. From the Library, add a Queue to this area. For clarity, rename the new queue LoadingDock . Create a connection (A-connect) from the LoadingDock queue to the MainDropOffPoint control point. Create a connection (A-connect) from the MainDropOffPoint control point to the DropOff1 control point to open a menu. Select DropoffPoints . A light blue line will appear to show that the location control point is now connected to the drop off control point. Repeat the previous steps as needed to create additional drop off control points for the other three drop off control points. Check that your simulation model looks similar to the image shown at the beginning of this step. Step 4 Use Lists to Set Item Destinations In this step, you'll learn about a different method to send items to a downstream object. Rather than using port connections, you'll push and pull items from a global item list named ItemsReadyForDelivery . You'll also change the Dropoff sink to a queue instead. Although lists require a little more thought to set up correctly, lists are sometimes better for item routing in an AGV model because they don't require making port connections over potentially long distances. Lists can also simplify what many-to-many port routings for models with many different origin points and many different destination points. To create a global item list: In the Toolbox, click the Add button to open a menu. Point to Global List , then select Item List . In the list properties window, change the list name to ItemsReadyForDelivery . In the Label Field box, delete the current text and type LoadType . Delete all the Expression Fields . Press the OK button to save the changes and close the window. Click the Staging1 processor to bring up its properties. Under the Output section, click the arrow next to the Send to Port button to open a menu. Point to Use List , then select Push to Item List . Click the arrow next to the List box to open a menu. Select ItemsReadyForDelivery . Repeat the previous steps for the Staging2 processor as well. Click the LoadingDock queue to bring up its properties. Under the Input section check the Pull check box. Click the arrow next to Pull Strategy to open a menu. Point to Use List and select Pull from Item List . Click the arrow next to the List box to open a menu. Select ItemsReadyForDelivery . Click off the popup window to save the changes and close it. Reset and run the model: Notice that the first AGV drops off at DropOff4 and the second AGV drops off at DropOff3. Step 5 Add Park Points In this step, you'll add three more AGVs to the model for a total of five. You'll also create park points for each of the AGVs. Park points are locations where AGVs begin when the simulation model first starts running. During a simulation run, an AGV can return to the park point to recharge its batteries when they are running low. When you're finished with this step, your 3D model will look similar to the following image: To add additional AGVs and create park points: From the Library add three more TaskExecuter objects to the 3D model. For clarity, rename these AGVs as AGV3 , AGV4 , and AGV5 . Open the AGV process flow. Click a blank area to ensure nothing is selected. In Properties under the Process Flow Instances group, find the Attached Objects (instances) box. Click the Sampler button by this box to enter sampling mode. In the 3D model, click AGV3 . It should now show up in the Attached Objects box. Repeat the previous steps to attach the other two new AGVs to the process flow as well. Drag AGV1 and AGV2 away from the AGVEntryPoint control point so that it is visible in the 3D model. Create a port connection (A-connect) from AGV2 to the AGVEntryPoint control point to open a menu. Select Traveler AGV . A red line will appear showing the second AGV is connected. Repeat the previous step to connect the rest of the AGVs to the control point. In the top left corner about 4 units away from the corner, create a vertical AGV path that is 6 units. Click the new path to select it. In Properties, check the Two Way check box. Press Ctrl+C to copy the selected path. Press Ctrl+V to paste a copy of the path in the model. Repeat the previous step to create 5 paths. Space the paths out so that they are about four units apart from each other. You Might Need to Move the AGVEntry Control Point You might also need to move the AGVEntry control point slightly to the right to make sure it comes before the park points on the main AGV network. Use the Join Paths tool in the Library to join each park path to the main AGV network. Click one of the new joining paths you created to select it. In Properties, check the Two Way check box. Repeat the previous step to change all the new joining paths to two-way paths. From the library, add a Control Point to the middle of one of the park paths. Repeat this step for all five park paths. For clarity, rename these new control points ParkPoint1 , ParkPoint2 , etc. Create a port connection (A-connect) from the AGVEntryPoint control point to the ParkPoint1 control point to open a menu. Select ParkPoints . A dark green line will appear showing the second AGV is connected. Repeat the previous steps to connect the AGVEntryPoint control point to the rest of the park points. Reset and run the simulation model: When the simulation starts, all five AGVs start in their designated park points and then travel throughout the network working on the transportation tasks. You'll notice that sometimes the AGVs have to stop momentarily. You'll learn how to reduce the amount of time an AGV waits at a control point in the next step. If you keep the model running long enough, the AGVs will transport all of the items. Notice that when that happens, the AGVs will eventually all return to their park points to charge their batteries instead of idly looping around the system: Step 6 Change Control Point Sensitivity In the previous step, you noticed that sometimes the AGVs had to stop while waiting for the AGV on the path ahead of them to clear the control point its on. That's because AGV networks have a sophisticated look-ahead mechanism that can avoid crashes by determining if the next control point on the path is available or not. If it is not available, the AGV will wait at its current control point. By default, the control points don't become free until the AGV that claimed it has reached the next control point. You can change the control point's sensitivity so that the AGV merely has to clear the control point itself before the control point can be allocated by another AGV. You'll learn how to change this sensitivity by changing its Deallocation Type property in this step. To change the AGV system's control point sensitivity: Drag the five AGVs away from the AGVEntryPoint control point so that it is visible in the 3D model. Click the AGVEntryPoint control point to select it. In Properties, click the Deallocation Type menu to open it. Select Deallocate When Past Current . Repeat the previous step for all the control points on the main AGV network. Reset and run the simulation model: Notice now that the AGVs are more efficient as they travel through the system. The AGVs deadlocks less often and they quickly space themselves out efficiently throughout the network. Conclusion Now you've learned how the AGV process flow template makes it possible to do even more complicated AGV behavior like pick up points, drop off points, and park points. You've also learned how to adjust control point sensitivity to make your system more efficient if needed. In the next tutorial, you'll learn how to add elevators to your AGV system so that AGVs can travel to multiple floors if needed. Continue on to Tutorial 4.3 - Using Elevators With AGVs ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial4AGVs/4-3UsingElevators/4-3UsingElevators.html",
        "title": "Tutorial Task 4.3 - Using Elevators With AGVs",
        "content": "Task Overview In this tutorial task, you'll learn how to use elevators to transport AGVs to multiple floors in a model. However, before you do that, you'll create four new flow items: one for medical supplies, clean laundry, dirty laundry, and waste. You'll learn to send AGVs to different types of locations based on the type of load it is carrying. You'll also modify the delivery schedule so that medical supplies and clean laundry will arrive at the unloading dock on an alternating schedule. After creating the flow items and updating the delivery schedule, you'll create upper floors to the hospital that will each need to receive shipments of medical supplies and clean laundry. You'll add an elevator to the simulation model to transport AGVs between the different floors. In the last step, you'll learn how to modify the simulation model to add additional elevators. Just like in the previous tutorial task, you will use an AGV elevator process flow template to create the logic for this model. Again, it is beyond the scope of this tutorial to explain the exact details of how the AGV elevator template works, you should be aware that this process flow will control nearly all of the logic in this AGV elevator system. Consider exploring the AGV elevator process flow template in more detail to learn how it works. The template is organized by function and is self-documented to help you understand it. When you're finished, your model will look similar to the following image: Step 1 Create New Flow Items In order to demonstrate the sophisticated way in which AGVs can deliver different types of loads to different locations, you're going to create some custom flow items in this step. These custom items that will be transported to various destinations in the simulation model. You'll create flow items for medical supplies, clean laundry, dirty laundry, and waste: To create these new flow items: In the Toolbox, expand the FlowItem Bin group. Double-click the Box to open that flow item in the Flow Item Bin. In the Flow Item Menu , make sure that Box is currently selected, then click the Copy button to create a copy of the Box flow item. In Properties, change the name of this flow item to MedSupplies . Change the Color to white. With this flow item still selected in the Flow Item Menu , click the Copy button to create a copy of it. In Properties, change the name of this flow item to CleanLaundry . Change the Color to green. Change the X-size to 0.60 and the Y-size to 1.0 . With this flow item still selected in the Flow Item Menu , click the Copy button to create a copy of it. In Properties, change the name of this flow item to DirtyLaundry . Change the Color to dark blue. In the Flow Item Menu , select the Cylinder . Click the Copy button to create a copy of it. In Properties, change the name of this flow item to Waste . Leave all the other properties at their default. Consider saving your simulation model at this point. Step 2 Change the Delivery Schedule In this step, you'll modify the DeliverySchedule process flow so that the Unloading Dock will regularly receive two types of flow items: medical supplies and clean laundry. In this hypothetical scenario, the unloading dock will receive a shipment of 10 units of medical supplies every 30 minutes. 15 minutes after the unloading dock receives that shipment, the unloading dock will receive a shipment of 10 units of clean laundry. It will then repeat on this schedule indefinitely. You'll start by editing the DeliverySchedule process flow activities. The following is an overview of how each activity will function after you've edited them: Activity Explanation Source: MedSupplies Deliveries The Schedule Source is an activity that will create tokens at a specific time during a simulation model. You'll edit this activity so that it creates 10 tokens when the simulation starts, and then repeats that schedule every 30 minutes. In order to create this functionality, you'll need to add an additional row that will release 0 tokens 1800 seconds later (the equivalent of 30 minutes in the simulation model). Create Object: Item at Unloading Dock You'll edit this activity so that it will create the new MedSupplies flow item and place it inside the UnloadingDock queue. You'll also add a label named LoadType to the new flow items that will indicate which type of flow item it is. You'll use a value of 1 for MedSupplies flow items. After you've made these edits, you'll create a copy of this activity block and modify it to create Clean Laundry deliveries. You'll make a few edits to the activities: Activity Explanation Source: Clean Laundry Deliveries This Schedule Source activity will be identical to the MedSupplies Deliveries, except that it will be offset by 900 seconds (the equivalent of 15 minutes in the simulation model). The time offset will make it so that the deliveries alternate every 15 minutes in the simulation model. Create Object: Item at Unloading Dock You'll edit this activity so that it will create the new CleanLaundry flow item and place it inside the UnloadingDock queue. You'll also edit the label named LoadType to use a value of 2 for CleanLaundry flow items. To make these changes to the delivery schedule: Open the DeliverySchedule process flow. Click the Source: MedSupplies Deliveries activity to select it. In Properties, check the Repeat Schedule checkbox. Under the Arrivals table, click the Add button to add a second row. In the second row under the Time column, type 1800 . In the second row under the Quantity column, change the quantity to 0 . Click the Create Object: Item at Unloading Dock to select it. In Properties, click the arrow next to the Object box to open a menu. Point to Flowitems , then select MedSupplies . Under the Assign Labels to Created Objects , click the Add button to add a label. In the Name box, delete the current text and type LoadType . In the Value box, delete the current text and type 1.00 . Click the Medical Supplies shape to select it. Press Ctrl+C to copy the shape. Click a blank area in the process flow and press Ctrl+V to paste the shape. Change the name of the copied shape to Clean Laundry . In the Clean Laundry shape, change the name of the Source: MedSupplies Deliveries activity to Source: Clean Laundry Deliveries . Click the Source: Clean Laundry Deliveries activity to select it. In Properties in the Offset Time box, type 900.00 . In the Clean Laundry shape, click the Create Object: Item at Unloading Dock to select it. In Properties, click the arrow next to the Object box to open a menu. Point to Flowitems , then select CleanLaundry . Under the Assign Labels to Created Objects , click the Add button to add a label. In the Name box, delete the current text and type LoadType . In the Value box, delete the current text and type 2.00 . Reset and run the model: As you watch the model, the medical supplies are delivered right when the model starts. 15 minutes later, the clean laundry is delivered. Be aware that the model run in the previous image is being run at a speed of 40.00 and there is an edit cutting out the time between deliveries. Step 3 Create an Upper Floor Layout In this step, you'll create three floors to which the AGVs will travel to deliver the medical supplies and clean laundry. For this model, you won't create floors that are stacked vertically on top of each other. Rather, you will create different floor sections and place them on the same plane as the main floor of the AGV model. The stacked floor model has the advantage of looking a little more realistic. However, keeping the floors on the same plane has the advantage of being much easier to work with. See Creating Multiple Floor Layouts for more information about working with multiple floors in AGV models, including links for more information about how to create stacked floor models. You'll need to create a Next Work Point loop on each floor. As you'll recall from the previous tutorial task, a Next Work Point loop is basically a series of control points that are connected to each other in a loop. Once this circuit has been set up, the AGVs in the system will loop continuously through the network looking for transportation tasks to work on. You need to create a Next Work Point loop on the upper floors in order for the AGVs to keep looping through that floor and to return to the main AGV network when they're finished with transportation tasks. When you're finished, your model will look similar to the following image: To create an upper floor layout: You'll start by creating an elevator area. Create a series of AGV paths extending out from the center right side of the AGV network that is 3 units long on the x-axis and 8 units long on the y-axis. Make sure that the path directions flow in the same direction as the main AGV network. Next, you'll create a network for one of the upper floors. About five spaces out from the new elevator area you just created, create a looping series of AGV paths that is 8 units long on the x-axis and 4 units along the y-axis. Set the path directions to flow clockwise. From the library, add 2 Sinks , placing them above the new floor area. Add 2 Queues , placing them below the new floor area. For clarity, rename the new objects as follows: Object New Name First Sink Floor3Supplies Second Sink Floor3Laundry First Queue Floor3Waste Second Queue Floor3DirtyLaundry Add four Control Points , placing them on the paths for the new floor area near each object. Create location connections (A-connects) between the four objects and the control point near it on the path. Add one more Control Point to the upper path in the elevator area. For clarity, rename this control point ElevatorExit . Create a connection (A-connect) from the control point near the Floor3Supplies sink to the control point near Floor3Laundry to open a menu. Select NextWorkPoint . A red line will appear showing the second AGV is connected. Repeat the previous step to create looping next work point connections between the new control points in the following order: From the control point near the Floor3Laundry sink to the control point near the Floor3DirtyLaundry queue From the control point near the Floor3DirtyLaundry queue to the control point near the Floor3Waste queue From the control point near the Floor3Waste queue to the ElevatorExit control point From the ElevatorExit control point to the control point on the upper right corner on the main AGV network Make Sure You're Connected Back to the Main AGV Network You need a next work point connection that reconnects back to the main AGV network or else the AGVs will remain on the upper floor. Check that your model looks similar to the image at the beginning of this step. Step 4 Add Upper Floor Destination Logic Now that you've created the basic template for one of the upper floors in your 3D model, it's time to set up the logic for these objects. In this step, you'll set the sinks on the upper floors to pull flow items from the ItemsReadyForDelivery global list using the LoadType label. You'll set the Floor3Supplies sink to pull medical supplies (which have a LoadType value of 1) and the Floor3Laundry sink will pull clean laundry (which has a LoadType value of 2). You'll also set the Floor3Waste and Floor3DirtyLaundry queues to automatically push any flow items they contain to the ItemsReadyForDelivery global list. After you've set up this logic, you'll create copies of the upper floor objects to add two additional floors. You'll also create a two-way AGV path connecting the path from the elevator area to each of the upper floors. You need to create this path so that the AGV network needs to be able to find a travel path from one floor to another. When you're finished, your model will look similar to the following image: To create this logic: Click the Floor3Supplies sink to bring up its properties on the right. Under the Input tab, check the Pull checkbox. Click the arrow next to the Pull Strategy box to open a menu. Point to Use List and select Pull from Item List to open a picklist window. Click the arrow next to the List box to open a menu and select ItemsReadyForDelivery . Next to the Query box, click the Add button to open a menu. Point to WHERE (filter) and select LoadType . In the Query box, change the last part of the list query to == 1 . Repeat the previous steps for the Floor3Laundry sink, but instead change the last part of the list query to == 2 . Click the Floor3Waste queue to bring up its properties. Under the Output section, click the arrow next to the Send To Port box to open a menu. Point to Use List , then select Push to Item List . Click the arrow next to the List box and select ItemsReadyForDelivery . Check the Use Transport box. Click the arrow next to this box to open a menu. Point to Use List , then select Push to Item List (No Task Sequence) to open a picklist window. Check that the List box shows that the AGVWork list is currently selected. Leave the rest of the properties on their default settings. Repeat the previous steps for the Floor3DirtyLaundry queue as well. Press and hold the Ctrl key and draw a box around the entire new floor area you created to select these objects (including both sinks, both queues, and the AGV paths). Press Ctrl+C to copy these objects. Press Ctrl+V to paste a copy of these objects. Move the copied objects to that they are just below the original objects (but still on the same plane). Rename each of the newly copied 3D objects replacing any 3 numbers with the number 2 : Floor2Supplies, Floor2Laundry, Floor2Waste, and Floor2DirtyLaundry . Repeat the previous step to create a third copy of the original objects. Move these copied objects just above the original objects (but still on the same plane). Rename each of the newly copied 3D objects replacing any 3 numbers with the number 4 : Floor4Supplies, Floor4Laundry, Floor4Waste, and Floor4DirtyLaundry . Create an AGV path extending from the elevator area to one of the three upper floor areas. Select the new path you created. In Properties, check the Two Way check box. Repeat the previous steps to add two-way AGV paths to the other two floors. Reset and run the model: As the model runs, you'll see that AGVs travel to the upper floors to drop off flow items at the various sinks. Different sinks receive different flow items based on their LoadType label. As was mentioned in the introduction to this step, you need the two-way AGV paths in order for the AGVs to travel to the upper floors. After you add the elevator in the next step, the AGVs will not use these paths to move between the floors. However, you still need these paths to be present in order for the AGV network to calculate a possible path to the upper floors. Step 5 Add an Elevator In this step, you'll add an elevator to the model and create a new process flow to control this elevator using the AGV Elevator process flow template. In the last part of the step, you'll attach the new elevator to this process flow. When you're finished, your model will look similar to the following image: To add an elevator to the AGV model: From the Library, add an Elevator to the 3D model, placing it in between the elevator area and the upper floors. On the main toolbar, click the Process Flow button to open a menu. Point to Add an Object Process Flow and then select AGV Elevator . In the newly created process flow template, click a blank area to ensure nothing is selected. In Properties under the Process Flow Instances find the Attached Objects (instances) box. Click the Sampler button to enter sampling mode. In the 3D model, click Elevator1 to attach it to the process flow template. Close the process flow template. Check that your model looks similar to the image in the beginning of this step. Step 6 Add Elevator Redirect and Entry Control Points In this step, you'll set up the control points on the ground floor and upper floors that they will interact with the AGVs and the process flow to use the elevator to move between the floors. You'll start by adding elevator redirect control points and connecting them to the elevator. Elevator redirect control points handle requests for elevator transport. When an AGV passes over the redirect control point, it will attempt to acquire an elevator for transport. If one is available, it will then proceed on the path until it reaches an elevator floor control point. If an elevator is not available, it will wait at this control point until an elevator is free. After you've added the elevator redirect control points, you'll add elevator floor control points. Elevator floor control points become the point where AGVs enter and exit the elevator on each floor. When an AGV passes over an elevator floor control point, it will appear inside the elevator. When an AGV exits an elevator, it will appear on the elevator floor control point. When you're finished, your 3D model will look similar to the following image: To add elevator redirect and entry control points: Add a Control Point to the lower path in the elevator area so that it will be the first control point an AGV passes over when it enters the elevator area. Add a Control Point to the floor 2 area so that an AGV will pass over this control point right after leaving the control point connected to the Floor2Waste queue. Repeat the previous step to add identical control points to the floor 3 and floor 4 areas as well. For clarity, rename the new control points Floor1ElevatorRedirect, Floor2ElevatorRediect, etc. Create a connection (A-connect) from the Floor1ElevatorRedirect control point to Elevator1 to open a menu. Select ElevatorRedirectCP . A purple line will appear connecting the control point and the elevator. Repeat the previous step to connect the Floor2ElevatorRedirect , Floor3ElevatorRedirect , and Floor4ElevatorRedirect control points to the Elevator1 as well. Click the Floor2ElevatorRedirect control point to select it. In Properties, under the Labels group, click the Add button to open a menu. Select Add Number Label to add a new label. Name the label floorZ . Set the value to 5 . Repeat the previous steps for Floor3ElevatorRedirect control point to create a floorZ label with a value 10 . Repeat the previous steps for Floor4ElevatorRedirect control point to create a floorZ label with a value 15 . Repeat the previous steps for Floor1ElevatorRedirect control point to create a floorZ label with a value 0 . Add a Control Point to the AGV path near Elevator1 . Add a Control Point to the floor 2 area in the middle of the left path. Repeat the previous step to add identical control points to the floor 3 and floor 4 areas as well. For clarity, rename the new control points Floor1Entrance, Floor2Entrance, etc. Press and hold the A key to enter connection mode. Click the Floor1Entrance control point to select it. Then, click Elevator1 to open a menu. Select ElevatorFloorCP . An orange line will appear connecting the control point and the elevator. Repeat the previous step to connect the Floor2Entrance , Floor3Entrance , and Floor4Entrance control points to the elevator as well. Reset and run the simulation model: Now as the simulation model runs, the AGVs will use the elevators to move from one floor to another. Notice also that the elevator raises to different Z-heights depending on the floor it is traveling to. The elevator knows which height to move to because of the floorZ label that you set for each elevator redirect control point. Step 7 Add a Second Elevator In this step, you'll learn about the changes you would make to an AGV model if you decided to use more than one elevator. You'll add a second elevator and a dispatcher that will control which elevator the AGVs take to get to an upper floor. You'll also change the connections needed to operate with two elevators. When you're finished, your model will look similar to the following image: To add a second elevator: From the Library, add the following 3D objects to the elevator area of the model: An Elevator A Dispatcher For clarity, rename Dispatcher1 as ElevatorDispatcher . Click the Floor1ElevatorRedirect control point to select it. In Properties, click the Connections menu. Select ElevatorRedirectCP . In the box below this menu, click Elevator1 to select it. Click the Remove button to delete this connection. Repeat the previous steps to remove the elevator redirect connections from Floor2ElevatorRedirect , Floor3ElevatorRedirect , and Floor4ElevatorRedirect as well. Press and hold the A key to enter connection mode. Click the Floor1ElevatorRedirect control point. Then, click the ElevatorDispatcher to open a menu. Select ElevatorRedirectCP . A purple line will appear connecting the control point and the dispatcher. Repeat the previous step to connect the Floor2ElevatorRedirect , Floor3ElevatorRedirect , and Floor3ElevatorRedirect control points to the ElevatorDispatcher as well. Move the Floor1Entrance so that it is directly in front of the Elevator1 . Rename this control point Floor1Entrance1 . From the Library, add a Control Point and place it directly in front of Elevator2 . Rename the new control point Floor1Entrance2 . Press and hold the A key to enter connection mode. Click the Floor1Entrance1 control point to select it. Then, click Elevator2 to open a menu. Select ElevatorFloorCP . An orange line will appear connecting the control point and the second elevator. Repeat the previous step to connect the Floor2Entrance , Floor3Entrance , and Floor4Entrance control points to Elevator2 as well. Create input port connections (A-connects) going from the ElevatorDispatcher to both Elevator1 and Elevator2 . On the main toolbar, click the Process Flow button to open a menu. Select AGV Elevator to open this process flow. Click a blank area in the process flow to ensure nothing is selected. In Properties under the Process Flow Instances find the Attached Objects (instances) box. Click the Sampler button to enter sampling mode. In the 3D model, click Elevator2 to attach it to the process flow template. Hide Port Connections If you want to reduce clutter, you could hide the center port connections between the dispatcher and elevators by clicking a blank area in the 3D model to ensure nothing is selected. Then, in Properties, clear the Show Connections check box. Reset and run the model: As the model runs, the AGVs will now use both elevators to move from one floor to another. Conclusion Now you've learned how to integrate elevators into an AGV model as needed. In the next tutorial, you'll learn about some additional AGV settings that you can use to customize your AGVs. You'll learn how to adjust load times, speeds, and other settings. Continue on to Tutorial 4.4 - Custom AGV Settings ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/TaskLogic/Tutorial4AGVs/4-4CustomAGVSettings/4-4CustomAGVSettings.html",
        "title": "Tutorial Task 4.4 - Custom AGV Settings",
        "content": "Task Overview In this tutorial task, you'll learn how to create custom loading and unloading times for different types of flow items. You'll begin the tutorial task by changing the arrival schedule so that the upper floors regularly produce dirty laundry and waste that needs to be transported to the loading dock area. In the last step, you'll learn how to use a global table to create custom loading and unloading times for each type of flow item. When you are finished, your simulation model will look similar to the following image: Step 1 Create Additional Delivery Schedules In this step, you'll add additional activities to the DeliverySchedule process flow you created in an earlier tutorial task. Eventually, these new activities will create the logic that will regularly create dirty laundry and waste in the queues on each of the upper floors. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select DeliverySchedule to open this process flow. From the Library under the Display group, add a Container shape. Rename the new process shape Dirty Laundry . Inside the Dirty Laundry shape, add a Schedule Source (under Token Creation ). Create a stacked block with the following activities: A Create Object activity (under Objects ) A Delay activity (under Basic ) For clarity, rename the new activities as follows: Activity New Name Source Source: Simulation Starts Create Object Create Object: Item on Upper Floors Delay Delay: Collection Time Create a connection from the Source: Simulation Starts activity to the Create Object: Item on Upper Floors activity. Create a connection from the Delay: Collection Time activity looping back to the Create Object: Item on Upper Floors activity. Check that your process flow looks similar to the image shown in the beginning of this step. Step 2 Edit the Delivery Schedule Logic In this step, you'll create the logic for the new activities you added in the previous step. The following is an overview of how each activity and shared asset will function: Activity Explanation Source: Simulation Starts This activity will create 3 tokens that will loop continuously throughout the rest of the activities in the Dirty Laundry shape. You'll assign a unique value for a label named Destination on each token. One token will create tokens for the Floor2DirtyLaundry queue, another for the Floor3DirtyLaundry queue, etc. You'll also offset the timing of some of these tokens so that they don't all move to the next activity at the same time. Create Object: Item on Upper Floors You'll edit this activity so that it will create the new DirtyLaundry flow item and place it inside the one of the queues on the upper floor. The token will use its Destination label to know which queue it should use. You'll also add a label named LoadType to the new flow items that will indicate which type of flow item it is. You'll use a value of 3 for DirtyLaundry flow items. Delay: Collection Time The token will be delayed a varying amount of time, representing the amount of time it takes a staff member to collect the dirty laundry. You'll use an exponential distribution with a scale of 1800 seconds (equivalent to 15 minutes). After the token finishes the delay, it will loop back to the Create Object activity. After you've made these edits, you'll create a copy of these activities that will simulate Waste collection. You'll make a few edits to the activities: Activity Explanation Source: Simulation Starts (Waste) This schedule source will be identical to the Dirty Laundry schedule source. The only difference is you will add a small offset time of 900 seconds to this activity. You'll also assign Destination labels that will create tokens for the Floor4Waste queue, the Floor3Waste queue, etc. Create Object: Item on Upper Floors You'll edit this activity so that it will create the new Waste flow item and place it inside the UnloadingDock queue. You'll also edit the LoadType label to use a value of 4 for Waste flow items. To create this logic: Click the Source: Simulation Starts activity to select it. In Properties, click the Add button to add a new row. Repeat the previous step until there are 3 rows. Increase the Labels box to 1 . In the table, rename the new label column Destination . Highlight the 3 cells. Right-click the cells and select \"Assign String Data\". Click the first cell under the Destination column to select it. Type Floor2DirtyLaundry in this cell. Under the Destination column for the second row, type Floor3DirtyLaundry . Under the Destination column for the third row, type Floor4DirtyLaundry . Under the Time column for the second row, type 300 . Under the Time column for the third row, type 600 . Click the Create Object: Item on Upper Floors activity to select it. In Properties click the arrow next to the Object box to open a menu. Point to FlowItems and select DirtyLaundry . Make sure the Create In option is selected. In the box underneath that, type in Model.find(token.Destination) . This will use the destination label to find a reference to the associated queue. Under the Assign Labels to Created Objects , click the Add button to add a label. In the Name box, delete the current text and type LoadType . In the Value box, delete the current text and type 3.00 . Click the Delay: Collection Time activity to select it. In Properties next to the Delay Time box, click the Edit Properties button to open the statistical distribution properties. Change the Scale to 1800 . Click the Dirty Laundry shape to select it. Press Ctrl+C to copy the shape. Click a blank area in the process flow and press Ctrl+V to paste a copy of the shape into the process flow. Rename the copied shape Waste . In the Waste shape, click the Source: Simulation Starts activity to select it. In the Offset Time box, type 900.00 . In the Arrivals table, under the Destination column for the first row, type Floor4Waste . Under the Destination column for the second row, type Floor3Waste . Under the Destination column for the third row, type Floor2Waste . Click the Create Object: Item on Upper Floors activity to select it. In Properties, click the arrow next to the Object box to open a menu. Point to FlowItems and select Waste . Under the Assign Labels to Created Objects for the LoadType label, change the Value box, delete the current text and type 4.00 . Consider saving your simulation model at this point. Step 3 Change the Drop Off Logic In this step, you'll add a second queue to the loading dock area. One queue will collect dirty laundry for shipment to a cleaning facility and one queue will collect waste for removal. You'll change the drop off logic so that the two queues in the loading dock area pull the dirty laundry and waste flow items from the ItemsReadyForDelivery global list. Because items in the upper floors will now need transport to the loading dock, you'll also add Next Work Point connections from the main AGV network to each of the upper floors. To change the drop off logic: From the library, add a Queue to the 3D model near the drop off area. Rename the new queue WasteRemoval . Press and hold the A key to enter connection mode. Click the MainDropOffPoint control point. Then, click the WasteRemoval queue to open a menu. Select Location . A blue line will appear connecting the control point and the queue. Click the WasteRemoval queue to bring up its properties on the right. Under the Input section, check the Pull check box. Click the arrow next to the Pull Strategy box to open a menu. Point to Use List and select Pull from Item List to open a picklist window. Click the arrow next to the List box to open a menu and select ItemsReadyForDelivery . Next to the Query box, click the Add button to open a menu. Point to WHERE (Filter) and select LoadType . In the Query box, change the last part of the list query to == 4 . Click the LoadingDock queue to bring up its properties. In the Input section next to the Pull Strategy box, click the Edit Properties button to open a picklist window. Next to the Query box, click the Add button to open a menu. Point to WHERE (Filter) and select LoadType . In the Query box, change the last part of the list query to == 3 . Reset and run the simulation model: As the model runs, dirty laundry and waste will gradually appear in the queues on the upper floors and the AGVs will transport those items to the first available queue in the loading dock area. Step 4 Customize Loading and Unloading Times In this step you'll create a global table that will control the loading and unloading times for the AGVs depending on what type of load they are transporting. When you're finished, your global table will look similar to the following image: After setting up the global table, you'll then update the AGVs in the 3D model to use this global table to determine the loading and unloading times of the four different flow items. This step will demonstrate two different methods for referencing a global table. For the Load Time property, you'll learn how to reference a global table using a picklist. For the Unload Time property, you'll use a different method in which you'll reference a global table using FlexScript. Explore both methods to determine which one you prefer. To customize the load times: In the Toolbox, click the Add button to open a menu. Select Global Table to create a new table. In Properties, change the name of the table to ItemLoadTypes . In the Rows box, increase the number to 4 . In the Columns box, increase the number to 3 . Change the name of the row headers as follows: Row Number Row Name Row 1 MedSupplies Row 2 CleanLaundry Row 3 DirtyLaundry Row 4 Waste Change the name of the column headers as follows: Column Number Column Name Col 1 LoadType Col 2 LoadTime Col3 UnloadTime Fill in the cell values as follows: LoadType LoadTime UnloadTime MedSupplies 1 30 45 CleanLaundry 2 15 20 DirtyLaundry 3 15 20 Waste 4 10 10 Click the Model tab to return to the 3D model view. If needed, drag all of the AGVs away from the AGVEntryPoint control point to different areas in the model so that you can access each one. Click AGV1 to bring up its properties on the right. In the TaskExecuter section, click the arrow next to the Load Time box to open a menu. Select By Global Table Lookup to open a picklist window. Click the arrow next to the Table box to open a menu. Select ItemLoadTypes . In the Row box, type item.LoadType . In the Column box, type \"LoadTime\" . In the Unload Time box, type the following expression: Table(\"ItemLoadTypes\")[item.LoadType][\"UnloadTime\"] What Does This Expression Mean? The first part of the expression that starts with Table(\"ItemLoadTypes\") tells this property to get the load time by looking up the global table named ItemLoadTypes . The second part in brackets [item.LoadType] says to use the LoadType label on the flow item to get the row number it should look up in the table. The last part in brackets [\"UnloadTime\"] returns the value of the cell under the UnloadTime column for that specific row. Repeat the previous steps to change the Load Time and Unload Time properties for the rest of the AGVs. Use whichever global table lookup method you prefer. Reset and run the simulation model: As the simulation model runs, you'll notice that the AGVs will spend different amounts of time loading and unloading flow items based on which type of flow items it is. Conclusion Now that you've completed the AGV tutorial, you hopefully have a good sense of all the different features and settings that are available when building an AGV model. As you can see, you've been able to build a fairly complex AGV simulation model using almost no code at all. The AGV features and process flow templates make it easy to build AGV systems and scale well to large simulation projects as needed. For even more information about modeling AGV systems in FlexSim, consider reading the chapter about Working With Task Executers , which contains a section about AGVs. This concludes the AGV tutorial."
    }
]
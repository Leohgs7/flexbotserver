[
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/KeyConceptsData/KeyConceptsData.html",
        "title": "Key Concepts About Getting Data",
        "content": "Simulation Data Basics A simulation model generates data as it runs. In FlexSim, some of that data is generated by 3D objects as they interact with flowitems. The following example shows a simple model running, as well as the statistics generated by some of the objects: In addition to these statistics, you can easily configure your model to collect additional statistics in a table. The following example shows a table that collects the duration from when items enter the queue to when they exit the processor: FlexSim's statistics system is highly flexsible, so you can use it to get almost any data that you need. Once you have a model generating data, you can: View the data within FlexSim Create charts based on the data within FlexSim Export the data to Excel, a database, or a file Export charts as images or html files Use the Experimenter or Optimizer to explore different options for your system Standard FlexSim Statistics Nearly all 3D objects and process flow activities automatically collect a standard set of statistics while a simulation model runs. In general, these standard statistics are the kind of data that most simulation modelers are typically interested in getting from their model. For example, most fixed resources collect content statistics that track how many flow items the object currently contains, as well as its minimum, maximum, and average contents, as shown in the following image: In addition to the standard statistics that are available for each object, you can use chart templates to gather a wide range of other statistics that simulation modelers are typically interested in. The following table provides an overview of the general categories of standard statistics available on 3D objects and/or process flow activities or through chart templates: Category Explanation Content Tracks the amount of flow items in 3D objects or the number of tokens in process flow activities. The default statistics can give you the current, minimum, maximum, and average content of a 3D object. State Lists the current state of a 3D object. For example, a processor has an idle state and a processing state, as well as several other possible states. If you are interested in which states are available for a particular 3D object, you should refer to that object's topic in the Reference section of this manual. Staytime Tracks the amount of time a flow item stays in a fixed resource. The default statistics can give you the minimum, maximum, and average staytimes. Throughput Tracks how many flow items or tokens pass through a 3D object or process flow activity. The default statistics can give you the object or activity's current input and output. Travel Tracks the total distance a task executer travels, measured in the simulation distance units you used when you first set up your simulation model. In addition to these general categories, some 3D objects or process flow activities collect additional standard statistics that are specific to their functionality. Custom Statistics You might be interested in gathering additional statistics and data that aren't available by default in FlexSim. For these kinds of custom statistics, you can use the Statistics Collector tool. See Overview of Advanced Data Gathering Methods for more information. Standard Data Gathering Methods The following image provides an overview of the major phases of the data gathering process for the majority of simulation projects: The following sections will explain each phase of the process and link to other relevant topics for more information. Create a Dashboard The first step in getting data from your model will be to add a dashboard to your simulation model. Dashboards are a blank window pane that you can customize with anything that you need to access during a simulation run. You will need a dashboard in order to use chart templates or to pin the specific object statistics you're interested in. See Key Concepts About Dashboards and Charts for more information. Add Chart Templates or Pin Statistics The next step is to choose a chart template that is appropriate for the kind of statistics you're interested in getting from your simulation model. You could also pin any of the standard statistics available for any 3D object or process flow activity using the statistics panel in Quick Properties. When you add a chart template or pin an object statistic to the dashboard, FlexSim will create the necessary background tools (statistics collectors, calculated tables, etc.) that will gather data about the statistic you're interested in. If you're using a chart template, a properties window will pop up that will allow you to select which object(s) you want to gather statistics from. See Overview of Chart Templates and Viewing Standard Statistics for more information. Run the Simulation While the simulation runs, you can: Watch any charts update in real time in the dashboard. Watch the standard statistics update in real time in Quick Properties or statistics windows. You could also watch it in the dashboard if you pin it to the dashboard. See Running a Simulation for more information. Analyze the Data After the simulation run, you can study the data outputs and make changes to the simulation model as needed. You can also export the data for analysis by a third party tool. You can also use some of the more advanced data gathering tools if you feel they will be relevant to your simulation project. See the next section for more information. Advanced Data Gathering Methods If your simulation model has advanced data gathering needs, you should consider learning more about how the statistics collector and other tools work. See Overview of Advanced Data Gathering Methods for more information. The following table provides an overview of the advanced data gathering tools: Tool Description The Statistics Collector Statistics collectors can gather raw data from the objects and events you specify during a simulation run. During a simulation run, collectors will listen to these objects and put the raw data into a data table. The Calculated Table Calculated tables can transform the raw data from the data table that was generated by a statistics collector. Calculated tables can transform this data in a variety of ways, including filtering statistics, comparing statistics, and performing advanced calculations. The Experimenter The Experimenter is a tool that runs the same simulation model multiple times, changing one or more variables each time to see if the results are different. The Optimizer Depending on your license type, the Experimenter can also include the Optimizer, which can give you a high-level overview of the conditions that will produce the best possible solution for the problem you are trying to solve through simulation."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/PerformanceMeasures/PerformanceMeasures.html",
        "title": "Performance Measures",
        "content": "What are Performance Measures? Performance measures are output values for a model. Common performance measures include: Total throughput Average utilization Average wait time Maximum queue length Number Outputs vs Table Outputs Each performance measure reports a solitary value. To report an entire table as an output of the model, you can use tools like the Statistics Collector or the Calculated Table . Performance measures are the opposite of a Model Parameter . As the user, you determine the value of a parameter, and parameters influence model behavior. Performance measures, on the other hand, only observe model behavior, and do not influence it. As the user, you don't set the value directly. Rather, you'll set an expression that determines the value based on the current state of the model. Experiments and Optimizations Performance measures are automatically included in any experiment or optimization. Performance Measure Tables All performance measures are defined in a Performance Measure Table. By default, new models have a single performance measure table called PerformanceMeasures. You can find it in the toolbox: You can also add additional performance measure tables from the Add button in the toolbox. Each row of the table represents a single performance measure. To add or remove performance measure, you just add or remove rows from this table. You can edit the Name, Display Units, and Description of the performance measure directly in the table. Like Model Parameters, the name of all performance measures should be unique, even if they are defined in separate tables. The Value of a performance measure is defined by a function. Whenever you get the value of a performance measure, that function is evaluated. To edit that function, you can click on a cell in the Value column, and click the button that appears: The Value field of the performance measure value allows you to define an expression. The expression is evaluated whenever the value of the performance measure is required, such as at the end of a replication, or whenever the performance measure table paints. The Reference field of the performance measure value allows you to point to a node in the model. That node is passed in when the Value field is evaluated. You can use the Sampler button to to sample an object. You can also use it to sample an object and a statistic related to that object. For example, if you sample a processor, point to Statistics, and choose Output, the Reference field will be set to the Processor, and the Value field will be configured to get the output statistic from the reference. You can sample: Most 3D Objects Most Activities and Shared Assets Groups (in the toolbox) Charts Performance Measures Shouldn't Reference Themselves The expression you provide as the value of your performance measure should not try to include the performance measure itself, or its previous values. If you need a previous value to calculate a performance measure, you should use a Tracked Variable to store current and previous values, and use a performance measure to display the value of that Tracked Variable. Performance Measures and Run Speed In some cases, it can be computationally expensive to calculate a performance measure. If closing the Performance Measure Table's window improves run speed, consider keeping it closed by default, and opening it at the end of a model run."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/StandardDataGathering/KeyConceptsDashboards/KeyConceptsDashboards.html",
        "title": "Key Concepts About Dashboards and Charts",
        "content": "Overview of Dashboards and Charts Dashboards are a blank window pane that you can customize with anything that you need to access during a simulation run. The most common purpose for using a dashboard is to display charts. Charts can display statistics and visually represent data from a statistics collector. They are actually updated in real time while your simulation model is running. In addition to displaying charts, dashboards can also include other types of model displays such as the date and time or model documentation. Arranging and Displaying Dashboards Most users typically open a dashboard to the side of the 3D model to display data from the simulation model in real time during a simulation run. Types of Dashboard Content When you open a dashboard, you'll notice that the Library changes to display various dashboard widgets. There are four categories of widgets, which are explained in more detail in the following sections: Charts The first set of widgets in the library are the basic all-purpose charts: These charts don't make any assumptions about what kinds of data you want to collect other than how you want to visualize that data. If you use these types of charts, you'll need to connect those charts to any objects or tools such as data collectors on your own. For that reason, these basic charts are typically used by more advanced users. See Types of Charts for a more detailed explanation of how each type of chart visualizes data. Chart Templates The next five sets of widgets are the chart templates (with the following image only showing a portion of the available chart templates): Chart templates are intended to help you create commonly needed statistics in a quick, easy, and user-friendly manner. You should select a chart based on the types of statistics you're interested in and how you want to visualize the data. When you use a chart template, you'll be able to specify the objects from which you would like to gather statistics. When you drag one of the charts to the dashboard and set up its basic properties, the chart will auto-generate the necessary tools that are needed for that statistical task (statistics collectors, calculated tables, groups, etc.). However, these tools will remain hidden in the background unless you install them in your simulation model. General You can use the general widgets to display general information about the model such as the model's current date and time, custom financial data, or model documentation to explain the model to stakeholders. Model Inputs Custom model inputs allow you to change certain variables in the model to see how they affect the results of a simulation run. Model inputs allow you to build a custom control panel that you can use to modify variables in the simulation model before each run. For example, you could build model inputs that control flow item arrival times, processing times, or the number of operators in a model. Typically model inputs are only used by advanced simulation modelers that are handing off the model to stakeholders or to users who are not authorized to change the simulation model itself. Model inputs make it possible for users who are not familiar with FlexSim to control and get information from a simulation model without directly editing the model itself. Building model inputs will be explained in more detail in a forthcoming chapter in the User Manual about creating presentations. Best Practices When Working With Charts The following sections provide a few general guidelines for working with charts in FlexSim: Choose the Right Chart Choosing the right chart to visualize your data will depend a lot on what kind of data you're trying to represent visually. Before choosing a chart, spend a moment and think about the nature of the data you're trying to visualize. What do you need to convey about this data? Do you need to display a single set of data or compare data from multiple objects or sources? Which objects do you want to collect data from? Will it be better to aggregate data or to show the data as it changes over time? Use Descriptive Titles and Labels Your charts will be more useful if they are as clear as possible. Ensure that the chart's title is descriptive and that data labels are accurate. In many cases, you might need to consider renaming objects or rows and columns in the data table in order to make your labels more accurate and user-friendly. Types of Charts The following table provides an overview of the charts you can use to visualize your simulation model's data: Chart Explanation Time Plot Can display data as scatter plots, line charts, or stair step plots. These charts are best for showing values that will fluctuate over time or when you want to show a relationship between two variables using their X and Y coordinates. See Time Plot for more information. Histogram Can visualize a distribution of numerical data. These charts are ideal when you are using a random statistical distribution to introduce variability into your simulation model. These charts can display the frequency that certain numbers are generated by the distribution. It can also compare objects that are using different statistical distributions. See Histogram for more information. Gantt Chart Visualizes data in a stacked bar chart that shows the progress of items or tokens as they move through a simulation model over time. These charts are helpful for showing the staytime of items or tokens in each 3D object or activity in the model. They can also illustrate the dependency relationships between objects and activities. See Gantt Chart for more information. Pie Chart Shows each data point as a percentage compared to the whole data series. Pie charts are best for comparing sets of similar values from various objects. See Pie Chart for more information. Bar Chart Similar to a pie chart, bar charts can compare data between similar objects. Bar charts are ideal if you want to display absolute values rather than relative values. See Bar Chart for more information. Table Chart Table charts display the raw statistics for a set of data. You should choose this type of chart if you simply want to see the hard data from the model expressed in numbers or text. See Table Chart for more information. Box Plot Like histograms, box plots can visualize a distribution of numerical data. These charts are ideal when you are using a random statistical distribution to introduce variability into your simulation model. These charts can display the frequency that certain numbers are generated by the distribution. See Box Plot for more information. Sankey Diagram Sankey diagrams can visualize the flow of items from one object to another. These charts are most useful when there are two or more possible routes that an item could take to get from the beginning of one system to another. Sankey diagrams can display the amount of items that took one route as opposed to another. See Sankey Diagram for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/StandardDataGathering/WorkingWithDashboards/WorkingWithDashboards.html",
        "title": "Working With Dashboards and Charts",
        "content": "Using the Toolbox You'll primarily use the Toolbox to manage dashboards. See Using the Toolbox for general information about working with tool components like dashboards. This topic will explain how to edit and delete dashboards from the Toolbox and other related tasks. Creating and Renaming a New Dashboard To create and rename a new dashboard: On the main toolbar, click the Dashboards button to open a menu. Select Add a dashboard . The new dashboard will open as a separate pane to the left of the 3D model. In Quick Properties in the Dashboard Name box, change the name of your dashboard to accurately represent the kind of content the dashboard will contain. Choosing a Chart FlexSim provides many easy-to-use chart options in the Dashboard Library. For the most part, these charts are organized by the kind of statistic they display. For example, to view Output data for an object, or for several objects, consider choosing a chart from the Output section. For each kind of statistic, FlexSim provides several visualization options. For example, you can view an object's content as a Table Chart, a Bar Chart, and as a Time Plot. Most of the charts in the dashboard library are considered chart templates. See Overview of Chart Templates for a brief description of each chart template. Consider also reading Best Practices When Working With Charts and Types of Charts for guidelines about working with charts and selecting appropriate chart types to visualize your data. Adding Charts or Model Inputs You can add charts to a dashboard using several different methods, as explained in the following sections: Adding Charts from the Library To add charts or model inputs to a dashboard: Make sure the dashboard is the active window so that the Library displays the dashboard charts and widgets. Drag a chart or widget from the Library into the dashboard. The properties window for charts and chart templates will usually open automatically after they have been added to a dashboard. On the Options tab, you can specify which objects the chart template should gather data from and set any other properties that are specific to that type of chart template. See Selecting Objects for more information. You can use the other tabs to change the display settings such as controlling what is displayed in a legend or which colors the chart should use. See Changing Chart Displays for more information. Adding Charts from the Quick Library You can also use the Quick Library to add charts or widgets to a dashboard: Double-click an area in the dashboard to open the Quick Library. Click the chart or widget you want to add to the dashboard. The properties window for charts will usually open automatically when it's been added to a dashboard. Pinning Statistics to a Dashboard When you pin a standard statistic to a dashboard, it will automatically generate a statistic collector for that statistic and create a chart in the dashboard. You can change the chart type by adding a different chart type to the dashboard and then linking it to the auto-generated statistics collector. See Viewing Standard Statistics for specific instructions. Selecting Objects As was discussed earlier in this topic, you need to know which objects you want to get data from as part of the data-gathering process. The following sections will explain some of the different options that are available: Single Objects You can gather data from any object in a 3D model or from any process flow activity in a process flow. When you're working with a chart template, you can either sample the object or select the object from a menu. For example, the following chart will gather data from three individual processor objects: Composite Objects You'll see the term composite object come up a lot while you're choosing chart templates. In FlexSim, this term is used to describe a set of user-defined objects that mark the beginning and end of an area such as a workstation. For example, imagine you have modeled a workstation in which flow items move from a queue to a processer, then to a second queue and a second processor: Perhaps you wanted to gather data about how many flow items are circulating through that entire workstation at the same time. In this example, you could set the first queue as the beginning point of the composite object and the second processor as the end point of the composite object: For data collection purposes, these objects and all the objects in between the flow will count as one object. For example, imagine there are 10 items in Queue1, 1 item in Processor1, 5 items in Queue3, and 1 item in Processor2. The total content inside the composite object would be 17 items. Groups of Objects You can use groups to create a custom group of objects that you can gather data from at the same time. For example, imagine you have created a group called MyProcessors that has three processors as members: You could then sample the group or select it from the menu to gather data from all three processors at the same time: Changing Chart Displays You can change several aspects of the chart's visuals including: Font sizes Colors (if applicable) Chart legends And various chart-specific elements You'll make these changes in the Settings and Colors tab. Moving or Resizing a Chart To move or resize a chart: Click the chart to select it. To move the chart, hover over the edge of the chart until the mouse changes to the directional arrows, then move the chart. With the chart selected, click and drag the black sizer boxes to resize it. Installing a Chart Template When you use a chart template, FlexSim automatically generates many of the tools that are needed to create the statistics for that template. Various chart templates might create process flows, groups, statistics collectors, or calculated tables. These tools will run invisibly in the background. However, if you would like to make these tools visible, you can install them from the chart template. Installing chart template tools can be a great way for you to study and learn about more advanced data gathering techniques if you'd like to learn how the advanced tools work together in FlexSim. To install a chart template: Double-click the chart to open its properties window. On the Advanced tab, click the Install button. Check the Toolbox in the left pane and you'll see several new tool components will now appear, depending on the type of chart template that was installed. You can click each individual tool component to view its properties and see how the tools work together to create the statistic you wanted. Exporting a Chart or Chart Template If you want to export a chart's data, you should actually export the data table of the statistics collector that is linked to the chart in the background: If you're using a chart template, make sure you install it first. (See Installing a Chart Template for more information.) Double-click the chart to open its properties window. On the Advanced tab, click the Export Data button. Navigate to the folder where you would like to save the data and give it an appropriate file name. If you want to export a chart itself, you can right-click it to open a menu and select Export as PNG to save it as an image file. As an alternative: Click the chart to select it. Press Ctrl+C to copy it to your computer's clipboard. Open an image editing software program and press Ctrl+V to paste the image into a new file. Setting up a Chart (Advanced) If you use the basic charts, you'll need to connect those charts to any objects or tools such as data collectors on your own. For that reason, these basic charts are typically used by more advanced users. This section will explain how to set up a basic chart. Linking a Chart to a Statistics Collector Every chart needs to be linked to a statistic collector's data table. The data table will provide the raw data that will be visualized by the chart. You can also link the data to a calculated table if needed. To link a chart to a statistics collector: Double-click the chart to open its properties window. In the Data tab, click the Data Source menu and select a statistics collector or calculated table from the menu. If there are currently no statistics collectors available, you can select Add a New Statistics Collector . If needed, press the ... next to the Data Source menu to open the collector's properties. Setting Up the Chart Data After you've linked a chart to a statistic collector, you'll need to tell the chart which columns from the data table should be used to create the chart's elements. These settings are found on each chart's Data tab. In general, a lot of the chart settings will depend on the columns you created in a collector's data table. Once you've linked a statistics collector to a chart, its columns will show up as possible options that can be included in the chart's elements. So make sure that you have a good understanding of the names and values of the charts in the collector's data table. The chart's settings will vary based on the specific type of chart you are creating. For specific information about each chart's settings and properties, refer to that chart's reference page. See Types of Charts for links to each chart's reference page. Exploring and Experimenting If you are not sure what a specific setting does, you could try playing around with a few settings and see how that affects the chart. If you've run the model long enough to get a little bit of data for the chart to visualize, you can apply the changes and see how it will affect the chart immediately."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/StandardDataGathering/OverviewChartTemplates/OverviewChartTemplates.html",
        "title": "Overview of Chart Templates",
        "content": "Introduction to Chart Templates Chart templates are intended to help you create commonly needed statistics in a quick, easy, and user-friendly manner. You should select a chart based on what type of statistics you're interested in and how you want to visualize the data from that statistic. When you use a chart template, you'll be able to specify the objects from which you would like to gather statistics. When you drag one of the charts to the dashboard and set up its basic properties, the chart will auto-generate the necessary tools that are needed for that statistical task (statistics collectors, calculated tables, groups, etc.). However, these tools will remain hidden in the background unless you install them in your simulation model. See Working With Dashboards and Charts for more information. The following sections will provide a high-level overview of all the chart templates that are currently available in FlexSim. Content Templates Content chart templates can be used to graph the content or WIP (work-in-progress) of many individual objects, process flow activities, or a specified set of objects. In other words, these templates will tell you the content of the involved objects, such as the current, minimum, maximum and average number of flow items or tokens being contained by those objects. The following table provides a brief overview of the available templates: Name and Icon Description Content (Table) Creates a table chart that displays the current content (WIP) for all selected objects. See the Content Table Template reference page for more information. Content (Bar) Creates a bar chart in which the length of the bars is determined by the current content (WIP) for all selected objects. See the Content Bar Template reference page for more information. Content Vs Time Creates a stair-step time plot displaying the changes in the content (WIP) for all selected objects over time. See the Content Vs Time Template reference page for more information. Average Content (Table) Creates a table that shows the average content (WIP) for all selected objects. See the Average Content Table Template reference page for more information. Average Content (Bar) Creates a bar chart that shows the average content (WIP) for all selected objects. The length of the bars show the average content of the objects. See the Average Content Bar Template reference page for more information. Composite WIP (Table) Creates a table that displays the current content (WIP) for a group of selected objects. The chart will track how many flow items or tokens are between an entry object and an exit object. See the Composite WIP Table Template reference page for more information. Composite WIP (Bar) Creates a bar chart that displays the current content (WIP) for a group of selected objects. The length of the bars shows the content for the entire group of objects. The chart will track how many flow items or tokens are between an entry object and an exit object. See the Composite WIP Bar Template reference page for more information. Composite WIP Vs Time Creates a stair-step chart that displays the changes in the content (WIP) for a group of selected objects over time. The chart will track how many flow items or tokens are between an entry object and an exit object over time. See the Composite WIP Vs Time Template reference page for more information. WIP By Type (Table) Creates a table that breaks down the content (WIP) in an object based on a flow item or token's type or label. It can also track the content of composite objects, so the content between an entry object and an exit object. See the WIP By Type Table Template reference page for more information. WIP By Type (Bar) Creates a bar chart that breaks down the content (WIP) in an object based on a flow item or token's type or label. It can also track the content of composite objects, so the content between an entry object and an exit object. See the WIP By Type Bar Template reference page for more information. WIP By Type Vs Time Creates a stair-step chart that displays the changes over time in the content (WIP) in a object based on based on a flow item or token's type or label. It can also track the content of composite objects, so the content between an entry object and an exit object. See the Composite WIP Vs Time Template reference page for more information. Output Templates Output templates can be used to graph the output of many individual objects, process flow activities, or a specified set of objects. In other words, these templates will calculate the number of flow items or tokens that have left the object or activity. The following table provides a brief overview of the available templates: Name and Icon Description Output (Table) Creates a table that shows the output of the selected objects. See the Output Table Template reference page for more information. Output (Bar) Creates a bar chart in which the length of the bars is determined by the current output for all selected objects. See the Output Bar Template reference page for more information. Output Per Hour (Table) Creates a table that that shows the total output of the selected objects divided by the total number of hours the simulation has run so far. See the Output Per Hour Table Template reference page for more information. Output Per Hour (Bar) Creates a bar chart that shows the total output of the selected objects divided by the total number of hours the simulation has run so far. See the Output Per Hour Bar Template reference page for more information. Output Per Hour (vs Time) Creates a line graph that shows the changes over time in the output of the selected objects for each hour in the simulation run so far. See the Output Per Hour vs Time Template reference page for more information. Composite Output (Table) Creates a table that displays the combined output of all selected objects. See the Composite Output Table Template reference page for more information. Composite Output (Bar) Creates a bar chart that displays the combined output of all selected objects. See the Composite Output Bar Template reference page for more information. Composite Output Per Hour (Table) Creates a table that displays the combined output of all selected objects divided by the total number of hours in the simulation run so far. See the Composite Output Per Hour Table Template reference page for more information. Composite Output Per Hour (Bar) Creates a bar chart that displays the combined output of all selected objects divided by the total number of hours in the simulation run so far. See the Composite Output Per Hour Bar Template reference page for more information. Composite Output Per Hour (Vs Time) Creates a line graph that shows the changes over time in the combined throughout of all selected objects for each hour the simulation has run so far. See the Composite Output Per Hour Vs Time Template reference page for more information. Output By Type (Table) Creates a table that breaks down the output of an object based on a flow item or token's type or label. It can also track the output of composite objects, so the content between an entry object and an exit object. See the Output By Type Table Template reference page for more information. Output By Type (Bar) Creates a bar chart that breaks down the output of an object based on a flow item or token's type or label. It can also track the output of composite objects, so the content between an entry object and an exit object. See the Output By Type Bar Template reference page for more information. Output Per Hour By Type (Table) Creates a table that breaks down the output of an object based on a flow item or token's type or label divided by the total number of hours in the simulation so far. It can also track the output of composite objects, so the content between an entry object and an exit object. See the Output Per Hour By Type Table Template reference page for more information. Output Per Hour By Type (Bar) Creates a bar chart that displays a breakdown of the output of an object based on a flow item or token's type or label divided by the total number of hours in the simulation so far. It can also track the output of composite objects, so the content between an entry object and an exit object. See the Output Per Hour By Type Bar Template reference page for more information. Output Per Hour By Type (vs Time) Creates a line graph that show the changes over time in the output of an object based on a flow item or token's type or label for each hour in the simulation so far. It can also track the output of composite objects, so the content between an entry object and an exit object. See the Output Per Hour By Type Vs Time Template reference page for more information. Staytime Templates Staytime templates can be used to graph the staytime values of many individual objects, process flow activities, or a specified set of objects. In other words, these templates can get statistics about how long flow items or tokens remained at an object or activity. The following table provides a brief overview of the available templates: Name and Icon Description Staytime (Table) Creates a table that shows the average, minimum, and maximum staytimes for all selected objects. See the Staytime Table Template reference page for more information. Staytime (Bar) Creates a bar chart that displays the average staytimes for all selected objects. See the Staytime Bar Template reference page for more information. Staytime Per Hour Creates a line graph that shows the changes over time in the average staytime for all selected objects for each hour that the simulation has run so far. See the Staytime Per Hour Vs Time Template reference page for more information. Staytime (vs Time) Creates a time plot representing the stay time of each flow item or token that entered and exited the selected objects. See the Staytime vs Time Template reference page for more information. Staytime Histogram Creates a histogram that represents how many flow items or tokens had a specific staytime value for the selected objects. See the Staytime Histogram Template reference page for more information. Composite Staytime (Table) Creates a table showing the average, minimum, and maximum combined staytimes for a group of selected objects. The chart will track the staytimes for flow items or tokens between an entry object and an exit object. See the Composite Staytime Table Template reference page for more information. Composite Staytime (Bar) Creates a bar chart showing the average combined staytimes for a group of selected objects. The chart will track the staytimes for flow items or tokens between an entry object and an exit object. See the Composite Staytime Bar Template reference page for more information. Composite Staytime Per Hour (vs Time) Creates a line graph that shows the changes over time in the average staytime for a group of selected objects for each hour that the simulation has run so far. The chart will track the staytimes for flow items or tokens between an entry object and an exit object. See the Composite Staytime Per Hour Vs Time Template reference page for more information. Composite Staytime (vs Time) Creates a time plot that shows each flow item or token's staytime for a group of selected objects. The chart will track the staytimes for flow items or tokens between an entry object and an exit object. See the Composite Staytime vs Time Template reference page for more information. Composite Staytime Histogram Creates a histogram showing how many flow items or tokens had a specific staytime value for the selected group of objects. The chart will track the staytimes for flow items or tokens between an entry object and an exit object. See the Composite Staytime Histogram Template reference page for more information. Staytime By Type (Table) Creates a table that breaks down the average, minimum, and maximum staytimes for an object based on a flow item or token's type or label. See the Staytime By Type Table Template reference page for more information. Staytime By Type (Bar) Creates a bar chart that breaks down the average staytimes for an object based on a flow item or token's type or label. See the Staytime By Type Bar Template reference page for more information. Staytime Per Hour By Type (vs Time) Creates a line graph that shows the changes over time in the average staytime for an object based on a flow item or token's type or label for each hour that the simulation has run so far. See the Staytime Per Hour By Type Vs Time Template reference page for more information. Staytime By Type (vs Time) Creates a time plot that breaks down the staytimes for each flow item or token based on its type or label for all selected objects over time. See the Staytime By Type Vs Time Template reference page for more information. Staytime By Type Histogram Creates a histogram showing how many flow items or tokens had a specific staytime value for the selected group of objects based on the flow item or token's type or label. See the Staytime By Type Histogram Template reference page for more information. Item Trace Gantt Creates a gantt chart that tracks each flow item's staytime at each object or activity as it flows through the simulation. See the Item Trace Gantt Template reference page for more information. State Templates State templates allow you to make charts that display state information for a set of objects. States give information about how much time a 3D object spends in a particular state such as idle, processing, traveling, etc. Be aware that these templates can only work with fixed resources and task executers in the 3D model. The following table provides a brief overview of the available templates: Name and Icon Description State Pie Creates a pie chart that shows the percentage of time that 3D object(s) are in various states. See the State Pie Template reference page for more information. Composite State Pie Creates a pie chart that shows the average percentage of time that a group of 3D objects is in various states. See the Composite State Pie Template reference page for more information. State Bar Creates a bar chart that shows the percentage of time that 3D object(s) are in various states. See the State Bar Template reference page for more information. Composite State Bar Creates a bar chart that shows the total percentage of time that a group of 3D objects is in various states. See the Composite State Bar Template reference page for more information. Utilization By Hour (vs Time) Creates a time plot that shows the percentage of time in which a 3D object(s) spent utilized during a defined time interval. See the Utilization By Hour Template reference page for more information. State Gantt Creates a gantt chart that shows the precise amount of time 3D object(s) are in various states over time. See the State Gantt Template reference page for more information. Zone Templates Zone templates allow you to chart statistics from a specific zone shared asset in a process flow. The following table provides a brief overview of the available templates: Name and Icon Description Zone Statistics (Table) Creates a table that can show the current, minimum, maximum, and average content of tokens in a process flow zone. See the Zone Statistics Table Template reference page for more information. Zone Partition Statistics (Table) Creates a table that can show the current, minimum, maximum, and average content of tokens in a process flow divided by their partitions. See the Zone Partition Statistics Table Template reference page for more information. Zone Statistics (Bar) Creates a bar chart that can display any of the standard zone statistics available for a zone in process flow. See the Zone Statistics Bar Template reference page for more information. Zone Partition Statistics (Bar) Creates a bar chart that can display any of the standard zone statistics available for a zone in process flow divided by token partitions. See the Zone Partition Statistics Bar Template reference page for more information. Zone Stats (vs Time) Creates a time plot that shows the value of any standard zone statistic as it changes over time. See the Zone Statistics Vs Time Template reference page for more information. Zone Partition Stats (vs Time) Creates a time plot that shows the value of any standard zone statistic as it changes over time divided by token partitions. See the Zone Partition Statistics Vs Time Template reference page for more information. Milestone Templates Milestone templates allow you to chart statistics gathered by a milestone collector. The following table provides a brief overview of the available templates: Name and Icon Description Interval Histogram Creates a histogram showing how many flow items or tokens had a specific staytime value for the selected milestone intervals. See the Interval Histogram Template reference page for more information. Interval By Type Histogram Creates a histogram showing how many flow items or tokens had a specific staytime value for the selected milestone intervals based on the flow item or token's type or label. See the Interval By Type Histogram Template reference page for more information. Interval Creates a box plot that shows the distribution and quartiles of the selected milestone intervals. See the Interval Box Plot Template reference page for more information. Interval By Type Creates a box plot that shows the distribution and quartiles of the selected milestone intervals based on the flow item or token's type or label. See the Interval By Type Box Plot Template reference page for more information. Milestone Sankey Creates a sankey diagram that shows how flow items or tokens flow from one milestone to the next. See the Milestone Sankey Template reference page for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/StandardDataGathering/ViewingStandardStats/ViewingStandardStats.html",
        "title": "Viewing Standard Statistics",
        "content": "Introduction to Standard Statistics Nearly all 3D objects and process flow activities automatically collect a standard set of statistics while a simulation model runs. See Key Concepts About Getting Data for a more detailed explanation of the different categories of standard statistics that are available in FlexSim. You might have noticed in Quick Properties that the default statistics have pin buttons next to them. You can use the pin button to pin a specific default statistic that you're interested in to a dashboard. There are several advantages to pinning a statistic to a dashboard: Focusing on Your Key Metrics - You likely won't be interested in every one of the default statistics that are available. You can pin the specific statistics you're interested in to the dashboard and ignore the statistics you're not interested in. Consolidating Statistics - You will probably be interested in statistics from more than one object. However, you can only view one object in Quick Properties at a time. While you could possibly open several statistics windows, that might clutter up your workspace. It's much easier to pin statistics from all the objects you're interested in to a single dashboard that you can view during a simulation run. Automatically Generating Statistics Collectors - When you pin a default statistic to a dashboard, it automatically generates a statistics collector for this statistic. These auto-generated statistics collector can cut down on the time it takes to create a collector for the statistics you're interested in. It's also a good way to explore and learn more about how statistics collectors work. You can also combine elements from one auto-generated collector with elements from another collector to compare data from multiple objects. Create Charts - Once a statistic has been pinned to a chart and you've auto-generated a collector, you can create charts to better visualize the statistics you're interested in. By default, many statistics are simply displayed as raw data in a table, but you can easily use a different kind of chart to visualize your data. This topic will explain how to view standard statistics on 3D objects or process flow activities and other related topics. Viewing 3D Object Statistics To view the standard statistics for a 3D object: In the 3D model, click a 3D object to select it. In Quick Properties, click the Expand button next to the Statistics group. Expanding the Statistics The Statistics group will automatically expand during a simulation run. Reset and run the model to watch the statistics update in real time. Easier Access to Standard Statistics As an alternative to viewing the standard statistics in Quick Properties, you can pin any of the default statistics to a dashboard for easier access. See Pinning Statistics to a Dashboard for more information. You can also set your model view settings to automatically show 3D object statistics while a simulation model runs: Click a blank space in the 3D model to ensure nothing is currently selected. In Quick Properties, click the Show Names and select Show Names and Stats from the menu. Selecting a 3D Object During a Run You can also view a 3D object's statistics during a simulation run by selecting the object. While the simulation runs, the object will show its current standard statistics. Viewing Process Flow Activity Statistics To view the standard statistics for a process flow activity: In a process flow, click an activity to select it. In Quick Properties, click the Statistics button next to the activity's name to open the statistics window. Reset and run the model to watch the statistics update in real time. Easier Access to Standard Statistics As an alternative to viewing the standard statistics in the statistics window, you can pin any of the default statistics to a dashboard for easier access. See Pinning Statistics to a Dashboard for more information. Pinning Statistics to a Dashboard You might have noticed in Quick Properties that the standard statistics have pin buttons next to them. You can use the pin button to pin a specific standard statistic that you're interested in to a dashboard. See Pinning Statistics to a Dashboard for a more thorough explanation of why you might want to pin a statistic to a dashboard. To pin a statistic to a dashboard: Find the statistic in which you are interested. (See Viewing 3D Object Statistics and Viewing Process Flow Activity Statistics .) Next to the statistic in which you are interested, click the Pin button to open a menu. Point to or select the name of the dashboard that you want to pin the statistic to. If you haven't created a dashboard yet, point to Pin to New Dashboard . Pin Menus Might Vary Each pin's menu is context-sensitive, which means that the options will change based on the kind of statistic you are trying to pin. Some statistics might have more than one available option. In this case, the options will be displayed in a sub-menu after you point to the dashboard you want to pin the statistics to. Confirm the following: The statistic you selected should be added as a new chart on the dashboard you selected. In the Toolbox under the Statistics Collector group, you should see a new statistics collector for the statistic that you pinned. Changing the Chart Type When you pin a standard statistic to a dashboard, it will automatically generate a statistic collector for that statistic and create a chart in the dashboard. You can change the chart type by adding a different chart type to the dashboard and then linking it to the auto-generated statistics collector. See Working With Dashboards and Charts for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/StandardDataGathering/UsingMilestoneCollector/UsingMilestoneCollector.html",
        "title": "Using the Milestone Collector",
        "content": "About the Milestone Collector Before reading this topic, consider reading Key Concepts About Getting Data to ensure you are familiar with the overall processes and tools that are involved in getting data from a simulation model. The Milestone Collector is a tool that you can use to create and track milestones in your simulation model. A milestone is any event that occurs in a simulation run that you are interested in tracking for statistical purposes. For example, imagine you were simulating a health care facility and you wanted to track how long it takes patients to complete the check-in process. You could create a new milestone collector and set milestones for the beginning and end of the check-in process. During a simulation run as patients begin to enter the health care facility, the milestone collector could track when each patient began and ended the check-in process. You could even gather more specific data about when the patient completed specific steps in the check-in process by making each step in the process its own milestone. After setting up your milestone collector and running the simulation model, you could then export the data or use one of FlexSim's milestone chart templates to visualize the milestone data. A milestone interval is the amount of time it took a flow item or customer to get from one milestone to another during a simulation run. You can gather statistics about the minimum, maximum, and average times between two intervals as needed. Create a New Milestone Collector One important concept to keep in mind is that each milestone collector will always have a data table associated with it. If you would like to create multiple tables that will each track different milestone data, you should create a separate milestone collector for each table. You can add, manage, and delete milestone collectors using the Toolbox. See Using the Toolbox for more information. Adding Milestones The first step in setting up a milestone collector is to define your milestones. For that you need to tell the milestone collector which object(s) and events will be considered a milestone. You'll use the Milestones tab on the milestone collector to add the events: The Milestone List is on the left side of this tab. The Milestone List displays all the milestones that the milestone collector is currently listening to. You'll need to add milestones to this list if you want the milestone collector to listen to them. (See Types of Events for more information about the types of events a milestone collector can listen to.) Adding Milestones Using the Sampler Button The sampler button is one of the easiest ways to add a milestone to the collector. To add a milestone using the sampler button: Click the Add button above the Milestone List to add a new milestone. With the new milestone selected, you can give the milestone a more memorable name in the Name box. In the Events group, click the Sampler button to enter sampling mode. In the 3D model, click the object you want the milestone collector to listen to during a simulation run. The method you will use for sampling the object might differ based on the type of object you are sampling: Type Explanation 3D Object Click an object in the 3D model to sample it Process Flow Activity or Shared Asset Click an activity or shared asset in a process flow to sample it Groups In the Toolbox under Groups, click the name of the group to sample it Tracked Variables In the Toolbox under Tracked Variables, click the name of the variable to sample it When you click the object, it will open a menu listing all the events that are available for this type of object. Select the appropriate event from the list. Adding Events Using the Menu Alternatively, you can use the Add button to select an event using the menu. To add events using the menu: Click the Add button above the Milestone List to add a new milestone. With the new milestone selected, you can give the milestone a more memorable name in the Name box. In the Events group, click the Add button to open a menu. Navigate to the object or group that want to select. Changing the Object or Event Use the Event List in the Events group to delete, copy, or add any additional milestones as needed. Editing Milestone Details The properties in the milestone details are context-sensitive, meaning that different properties will be available depending on the type of event that is currently selected in the Event List. In general, you'll likely use the default settings for the milestone details and you won't need to change them. However, you can use the milestone details to: Give Your Event a Custom Name - You can change the event's name if needed. Create Labels from Event Parameters - Object-based events have specific parameters associated with them. These parameters contain basic information about the event, such as which flow item or token triggered the event. You can use the Event Details properties to preserve any relevant information from these parameters with a custom label. Change the Object or Event - If you selected the wrong object but would still like to use that specific event (or vice versa), you can make that change here. Add a Condition - If you want to further filter or restrict the events that the milestone collector listens to, you could add a condition that tells the milestone collector which events to record or ignore. For example, you could specify that it should only record an event if the value of a label on the flow item meets some criteria, such as having a ProductType label equal to 2. Using a Milestone Chart Template Once you've set up a milestone collector, you can add a milestone chart template to a dashboard that will display data from that collector. The chart templates that are designed to work with milestone collectors can be found in the Dashboard Library under the Milestone Templates group. Pick a chart based on the type of statistic you want and the way you want to visualize the statistic. (See Key Concepts About Dashboards and Charts and Overview of Chart Templates - Milestone Templates for more information.) The chart template will auto-generate any additional collectors or calculated tables that you'll need for that statistic. Viewing a Milestone Collector Table If you would like to view the raw data collected by a milestone collector during or after a simulation run, you can view the milestone collector table. To view the table: With the milestone collector open, click the General tab. Click the View Table button to open a table and view the data. Exporting Milestone Collector Data You can also export the data gathered by a milestone collector as a .CSV file for analysis by your preferred third party software if needed. To export the data from a milestone collector table: With the milestone collector open, click the General tab. Click the Export Table button. Navigate to the file directory where you'd like to save the .CSV and give it an appropriate file name."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/AdvancedDataGathering/OverviewAdvancedData/OverviewAdvancedData.html",
        "title": "Overview of Advanced Data Gathering",
        "content": "Reasons to Use Advanced Data Gathering Methods The majority of simulation projects will only need the standard data gathering methods. (See Key Concepts About Data Gathering for an overview of the standard methods.) However, your simulation project might require more advanced data gathering methods. Typical situations in which it might be useful to use advanced methods include: Your project needs custom statistics - FlexSim provides a wide variety of standard statistics that will fit many project's needs, but it can't necessarily anticipate every possible data-gathering need that a simulation project might have. Fortunately, you can use the Statistics Collector and Calculated Table tools to gather most kinds of custom data that might be unique to your simulation project. You would like to experiment with different model setups - You might want to run a simulation model multiple times, changing one or more variables to see how these changes affect key performance measures. The Experimenter and Optimizer tools can run these experiments and capture this kind of data. See Key Concepts About Experiments for more information about these two tools. Install Templates as a Way to Learn Advanced Methods One way to learn about more advanced methods of data gathering is to begin by working with a chart template that is roughly similar to a statistic you want to gather from your simulation model. If you install the chart template, it will allow you to access any statistic collectors, calculated tables, process flows, or groups that were necessary to generate that statistic. Exploring these tools and how they interact can teach you a lot about how to build your own custom tools. Advanced Data Gathering Methods The following image provides an overview of the major phases of the data gathering process for custom statistics: The following sections will explain each phase of the process and link to other relevant topics for more detail. The Statistics Collector Tutorial If you would like a more hands-on guide about how to set up a statistics collector to gather a variety of custom statistics from a simulation model, consider completing the Statistics Collector Tutorial . Add Events In this phase, you'll create a statistics collector and determine which objects and events you want to gather data from. Later, the statistics collector will listen to these events during a simulation run and record data about these events. For example, imagine you want to study the stay time of an item, meaning the amount of time it takes an item to flow through an assembly line. First, you'd build a simulation model of the assembly line in FlexSim: You'd then create a statistics collector that will listen to the events in the model that are relevant to the item's stay time. In the model shown in the preceding image, you could set up a statistics collector to listen to the OnEntry event on the Parts Storage queue, which fires whenever an item enters the queue. You could also set it up to listen to the OnExit event on the Finishing Station processor, which fires whenever an item moves from the processor to the sink. Listening to these two events allows you to record the time that each event happens for each flow item as it moves through the simulation. See Using the Statistics Collector for more in-depth information about this process. What Kind of Events Can the Statistics Collector Track? Statistics collectors can listen to a wide variety of events. See Types of Events for more information. Set Up the Data Table While the model runs, the statistics collector will capture all the data from the objects and events you are listening to and put all of this raw data into a table called the data table . For that reason, you need to format the data table to determine how it will add rows to the table during the simulation run and how it will populate the content of the cells under each column. To return to the example used in the previous section, you would set the collector's data table to create a row for each unique flow item that enters the Part Storage queue. The data table will record the time that the item enters the queue under one column. Then, when the item exits the Finishing Station processor, the Data Table can record the time the time the item exited in another column. When you run the model, the raw data that is generated in your data table will look similar to the following image: See Using the Statistics Collector for more in-depth information about this process. Transform the Data You might want to take the raw data that was generated in a statistics collector's data table and transform, filter, or combine the data in some way to create new data. You'll transform this data by creating a calculated table. See Using the Calculated Table for more information. Transforming the Data is Optional Be aware that this phase is optional. You could also complete this phase after a simulation run if needed. To return to the example used in the previous sections, once you've gathered the raw data about when items enter the first queue and exit the final processor, you could use a calculated table to subtract the two values and get the total stay time for each item. Run the Simulation Model While the simulation runs, the statistics collector will gather the raw data and the calculated table will transform this data as specified. See Running a Simulation for more information. Analyze the Data To analyze the data, you could: Display the data in a chart on a dashboard (see Key Concepts About Dashboards and Charts for more information) Run experiments or optimizations to determine the ideal model setup (see Key Concepts About Experiments for more information) Export the data from any of these tools so that you can analyze it using third party software Types of Events Before reading this section, make sure you are familiar with the concepts explained in the Key Concepts About Events topic. Statistics collectors can listen to a wide variety of events in the simulation model. The following section explains the general categories of events that they can listen to. 3D Object Events and Process Flow Events Standard events are the events that occur while a 3D object is interacting with flow items during a simulation run. Events can also refer to the events that occur when a process flow activity interacts with a token. Standard events are usually associated with a trigger that will fire when immediately after the event occurs. For example, when a processor is finished processing a flow item, the OnProcessFinish trigger will fire. When a token enters a process flow activity, the activity's OnEntry trigger will fire. Statistics collectors can collect information from a 3D object or process flow activity any time a specific event occurs. When that event occurs, it will gather any relevant data that is associated with that particular event. For example, it can gather data about: The ID of the item or token that caused the event to occur The time the event occurred The state the object was in when the event occurred The value of labels associated with the item at the moment the event occurred, etc. Be aware that you have to specifically tell a statistics collector which information you would like it to collect at the time the event occurs. Group Events You can listen to groups of 3D objects or process flow activities, not just individual objects or activities. When an event happens to any member of a group, a statistics collector could record it. For example, you could put several processors in a group called Work Stations and then listen for any time the OnProcessFinish trigger fires on any processor in the group. Listening to a group of objects or activities can be a good method for making your model scale well as it grows in complexity. You will only have to set up a statistics collector once to listen for events on all the objects in a group rather having to add each individual object as they get added to the simulation model. See Groups for more information. Change Events and Tracked Variables In general, change events are events that listen for any statistical change to occur on a 3D object or activity. When that statistical change occurs, a statistics collector can record relevant data. For example, a statistics collector could monitor the content of a queue in the 3D model. If the content goes above or below a certain threshold, the collector could record the time that occurred. It could also record when it drops back down below the threshold. You can also listen to state changes. For example, you could track any time an operator changes from an idle state to a utilized state. Statistics collectors allow you to define the event's change rule , which is the criteria that will cause a statistical event to recorded in the data table. Statistics collectors can also listen to any tracked variables that you have created to track custom statistical changes. See Tracked Variables for more information about this tool. Timer Events You can set up statistics collector to collect data at regular timed intervals called timer events . When one of the timer events occurs, the statistics collector can record data about the simulation model as it exists in that moment of time. As with standard, object-based events, you also have to tell the statistics collector specifically which information you'd like to collect. Using FlexScript in the Statistics Collector When you add events to a statistics collector, it will listen for that event in the simulation model during a simulation run. Every time that event occurs, the statistics collector will create an event data object. This object will only exist for a short period of time during a simulation run. When the event occurs, it will gather any information you wanted (such as data from labels or from the event parameters). The event data object will then populate the data table with the information it collected. The event data object will be destroyed after it has finished updating all the rows and columns you specified in the data table. If you need to refer to this object using FlexScript, you should use the variable data . For example, when you set up the statistics collector, imagine that you assigned the flow item the name MyItem when you were matching labels to the event parameters. Imagine that this flow item in the 3D model has a label called ProductType on it. To get the value of the ProductType label on the flow item, you would use this syntax: data.MyItem.ProductType If the statistics collector can't find a label, it will display an error message. To prevent this problem, you could end your syntax with a ? . This question mark tells the system to return an empty value for the label if it doesn't exist. The syntax would look like this: data.MyItem.ProductType? To use FlexScript to get information from the event node that is associated with a specific event, you would use this syntax: data.eventNode The Data Variable Isn't Accessible Anywhere Else You should only use the data variable within the statistics collector's fields. It won't work in other tools."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/AdvancedDataGathering/UsingStatsCollector/UsingStatsCollector.html",
        "title": "Using the Statistics Collector",
        "content": "About the Statistics Collector Before reading this topic, consider reading Key Concepts About Getting Data to ensure you are familiar with the overall processes and tools that are involved in getting data from a simulation model. The Statistics Collector is a tool that will gather data from the objects and events you specify during a simulation run. During a simulation run, a statistics collector will listen to these objects and put the data into a table, such as the one shown in the following example, which tracks the time at which items enter and exit an assembly line: Once you've collected this raw data, you could possibly: Transform the data using the Calculated Table tool. (See Using the Calculated Table for more information.) Visualize the data using some of the charts available within FlexSim. Export the data to an external software program such as Excel or Tableau. The Statistics Collector has two main advantages: It can easily adapt to meet your unique data-gathering needs. You can customize statistics collectors to gather data from nearly any event or statistic that is available during a simulation run. At the same time, the statistics collector won't guess about what data you might want and only gives you exactly what you asked for. Nothing more and nothing less. In other words, the statistics collector lets you determine exactly what data you want to gather while also allowing you to filter out any unnecessary data that you don't want. It gives you direct access to your simulation model's raw data. While it is sometimes useful to create charts to visualize the results of a simulation model, sometimes it's more useful to have access to the raw data from a simulation run itself. Using statistics collectors, you won't need to create a chart to get information from simulation run. All your raw data will be available in data tables that you create and define. Using the data from these tables, you can then perform more calculations, display the data in a chart in FlexSim, or export the data for further analysis using your preferred data analysis software programs. Statistics Collector Tutorial The best way to learn about using the Statistics Collector is to use the Statistics Collector Tutorial: Tutorial 2 - The Statistics Collector This tutorial will guide you through using the Statistics Collector to make many different kinds of tables and chart in FlexSim. The tutorial also explains the basic concept associated with the Statistics Collector Statistics Collector Reference To learn about all available options for the Statistics Collector, or to learn in how the Statistics Collector works in great detail, you can read the following reference topic: Reference - The Statistics Collector The reference documentation includes in-depth descriptions of how the Statistics Collector works, and how to use the user interface."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/AdvancedDataGathering/UsingCalculatedTable/UsingCalculatedTable.html",
        "title": "Using the Calculated Table",
        "content": "About the Calculated Table If you'll recall from reading the Overview of Advanced Data Gathering , there are five basic phases involved in getting custom statistics from a simulation model. The Calculated Table tool is involved in the third phase: The purpose of a calculated table is to transform the raw data from the data table that was generated in a statistics collector's data table. Calculated tables can transform this data in a variety of ways, including but not limited to: Filtering - Calculated tables could filter raw data to only show you data that meets a specific criteria. You could filter data so that it only shows you data that falls within a specific range or above a certain threshold. You could also filter data to show you the minimum or maximum values in a range of data. Calculations - Calculated tables can perform mathematical calculations such as addition, subtraction, multiplication, etc. It can also give you the average for a range of data. Comparisons - You can use calculated tables to compare two different data sets side by side. Consolidation - If you are working with several different statistics collectors, you could use a calculated table to combine all the data into one table. Transforming the Data is Optional Be aware that this phase is optional. You could also complete this phase after a simulation run if needed. Creating a New Calculated Table Calculated tables need to reference a data table in a statistics collector in order to function property. Although you could possibly set up a calculated table before setting up a statistics collector, it would be difficult to do so. See Using the Statistics Collector for more information. One important concept to keep in mind is that each calculated table will always have its own data table associated with it. If you would like to create multiple tables, you should create a separate calculated table for each one. You can add, manage, and delete calculated tables using the Toolbox. See Using the Toolbox for more information. Setting the Update Frequency When you first create a calculated table, you'll need to decide how frequently the calculated table will refresh itself and update the values in the cells during a simulation run. When deciding the update frequency, you'll need to balance the need for current data against the need not to overtax your computer's processing capability. The following image highlights the properties that are relevant to setting the update frequency: Calculated tables have three update options: Manual - If you choose this option, the calculated table will not update unless you update it yourself. You can update the table during a simulation run by clicking the Update button in the calculated table's properties window. Using Charts with the Manual Update Option If your dashboard uses a chart that references a calculated table, you will need to press the Update button in the calculated table's properties window to refresh the chart during a simulation run. By Interval - If you choose this option, the calculated table will update at regular intervals during a simulation run. You will need to enter the interval time (in simulation time units) in the Update Interval box. Always - If you choose this option and you are viewing a calculated table or chart during a simulation run, the table or chart will update every time the screen paints during a simulation run. Writing an SQL Query The Query box controls what is displayed and calculated in the calculated table. This box uses SQL to write queries. You might already be familiar with SQL since FlexSim's Global List tool frequently uses SQL expressions. Learning SQL generally doesn't take more than a few day's effort and there are many high-quality resources available at free or low cost on the Internet. One recommended resource is Code School's Try SQL course. The Level 1 course is currently free for anyone who sets up an account. Validating a Calculated Table You might want to test your calculated table to ensure that you have written your SQL queries correctly. The best way to test this is to view your table during or after a simulation run so that there is data available to query. After writing your query, click the Update button in the calculated table to see if you get the results you expected to get. Viewing a Calculated Table To view a calculated table: With the Toolbox open, under the Calculated Tables group, look for the specific calculated table you want to view. Right-click the calculated table to open a menu. Select View Table . The data table for that calculated table will then show up as a new window in the model. If you have not yet run a simulation model, the table will be blank. You can reset and run the simulation model to watch it get populated in real time. Exporting a Calculated Table You can export the data collected in a calculated table in a comma-separated value file (.CSV). You can then import this file into a third-party data analysis software program such as Excel or Tableau as needed. To export the data from a calculated table: Before exporting the calculated table, ensure that you've run the simulation model so that the data table has is populated with the data you want. With the Toolbox open, under the Calculated Tables group, look for the specific calculated table you want to export. Right-click the calculated table to open a menu. Select Export to CSV . Navigate to the computer folder in which you want to save your file. Give it an appropriate name and then save the file. The file should now be saved on your computer. Double-check that your file now shows up in the appropriate folder."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/AdvancedDataGathering/WorkingWithCharts/WorkingWithCharts.html",
        "title": "Working With Charts",
        "content": "Key Concepts and Overview FlexSim's charts display output table data. Both the Statistics Collector and the Calculated Table create an output table that can be visualized with a chart. FlexSim provides the following chart types, found in the Base Chart Types section of the Dashboard Library: Time Plot Histogram Gantt Chart Pie Chart Bar Chart Table Chart Box Plot Sankey Diagram Each chart type visualizes data from a table. In fact, each chart type visualizes data from specific columns in a table. For example, a time plot visualizes data from two columns a column for the x values, and a column for the y values. In the following image, you can see: A table A time plot's properties window, and A time plot, visualizing the table data. In this example, there is a table called ContentVsTime. The time plot is configured to visualize this table, showing the Time column along the x axis, and showing the Content column along the y axis. To make a custom chart in FlexSim, you can use the following steps: Deterime which kind of chart you would like. Use the Statistics Collector or Calculated Table to create a table of data. Be sure that the table you have created is compatible with the type of chart you want. Create a chart, from the Base Chart Types section of the library. Configure the chart by selecting the table to visualize, as well as which columns in that table contain the values to visualize. Using Split-by Columns Many of the charts have Split by properties. This means that you can designate one or more columns that contain categorizing values for each row. For example, a time plot can use additional columns to determine which y-axis to plot values in: In this example, the time plot is using the Queue column to categorize each data point. All data points that have a matching value in the Queue column are plotted together. The time plot, histogram, box plot, bar chart, and pie chart all allow you to use a split by to group values along an axis. The time plot, histogram, and box plot also allow you to use a split by to group values by color. Sorting Categories Each chart will categorize its data, often by using a split-by. By default, these categories are ordered on the chart as they are in the table. For example, the box plot below has data categorized by day of week: You can see that the order of the days of the week shown in the chart matches the order they are found in the table, as you read down the table. You can change this behavior by sorting the categories on the chart. Charts that allow you to sort the category values have a Sorting tab: On each chart, you must opt-in to sorting by checking the Sort categories box. When you do that, you will see a list of sort elements. When you add a sort element, you will have two options: Sort by ordered list Sort in alpha/numeric order If you sort using an ordered list, you will need to supply an array of values, in the order you would like them to appear on the chart. For example, you could provide a list of the names of the days of the week: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"] In this case, the chart will understand that \"Monday\" comes after \"Sunday\" and before \"Tuesday\". When you provide a list, be sure that the list contains all possible values for that category. Any missing values will be sorted to the end of the list. If you sort in alpha/numeric order, the chart will compare values directly. You can specify whether to sort in ascending or descending order. Text values are sorted alphabetically, and number values are sorted by their value. Going back to the previous example, if you choose to sort using an ordered list, you can sort the x-axis categories in a meaningful way: Sort Element Order Matters If you have a category that is uses more than one column, you can determine how those categories are sorted by reordering the the list of sort elements."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/AdvancedDataGathering/KeyConceptsExperiments/KeyConceptsExperiments.html",
        "title": "Key Concepts About Experiments",
        "content": "About the Experimenter The Experimenter is a tool that automates running a model with different inputs and collecting the results. The experimenter can help you answer the following kinds of questions: How sensitive are the Performance Measures to random variation? What are the tradeoffs between the Parameter values and the Performance Measure values? What are the Parameter values that produce the best results? Does the model behave correctly with different combinations of Parameter values? These questions can only be answered by running the model many times, with different input values each time, and then gathering and comparing the results. The Experimenter is designed to make this process simple and easy, and less tedious. In addition, the Experimenter can run multiple configurations of the model simultaneously, which saves significant time. Key Terms This section defines and describes the key terms associated with the Experimenter. This section provides a brief introduction, with more in-depth discussion in the following sections. When you use the Experimenter, you'll follow this process: Configure a Job - A Job defines a strategy for generating Scenarios , and usually requires multiple Replications of each Scenario. Running a Replication of a Scenario is considered a Task . Run a Job - When you run a Job, the Job creates a list of Tasks to run. The Experimenter will run the model once for each Task and store the result in the Results Database File . Explore the results - After running a job, you can see the results produced by each Scenario, and also compare Scenarios. Jobs The Experimenter allows you to define one or more Jobs. A Job defines a strategy for generating Scenarios , as well as for determining how many Replications of each Scenario to run. There are three types of Job: Experiment Range-Based Optimization Experiment jobs allow you to define Scenarios directly, and specify how many replications of each Scenario you want to run. Range-Based jobs allow you to specify a range of values for one or more parameters. This job type will generate one scenario for every value in the range for every parameter. Optimization jobs allow you to specify an objective function (e.g. maximize throughput). This type of job generates scenarios automatically, searching for scenarios that optimize the objective function. Optimization Jobs Require a License The Optimization Job uses a third-party software program named OptQuest to search for optimal Scenarios, and requires an additional license. This license can be purchased from FlexSim, but isn't usually included with FlexSim. To purchase an OptQuest license or to ask about pricing, contact FlexSim Customer Support . Scenarios A Scenario is a set of input values that can be applied to a model. It includes the following information: All Model Parameter values The model Stop Time The model Warmup Time You can think of a Scenario as a tuple or vector composed of these values: P 1 P 2 ... P N Stop Time Warmup Time 3 7 ... 5.3 10000 500 As the Experimenter runs, it applies a Scenario to a model by setting the Model Parameter values, Stop Time, and Warmup Time. Then it runs the model and records the results. While the Stop Time and Warmup Time are both part of the Scenario, you'll likely be focusing on the effect different Model Parameter values have on the performance of your model. For more information on configuring Model Parameters, see the Model Parameters topic. Each Scenario can be identified by the values it contains. The Experimenter will generate a unique identifier called a hash for each Scenario. The hash is made up of numbers and letters. If two scenarios compute the same hash, they are considered identical. In many places on the interface, you may see the last 8 characters of the hash. For convenience, you can also specify a name for a Scenario. The name can be arbitrary, and is only used for display purposes. It is not included in the Scenario's hash. Replications FlexSim models use random numbers, generated from probability distributions, to introduce variability into the simulation. That variability influences the behavior of the system; for example, a process time might take longer than usual, causing a temporary bottleneck. Including randomness makes a model far more realistic and trustworthy. However, it also means that the results generated by the model depend on the random numbers used. In other words, model results are also variable. Because model results are variable, it is important to run Replications of each Scenario. Some Scenarios will be more sensitive to random variability than others. The only way to understand the distribution of results for a given Scenario is to run Replications. The random numbers produced by probability functions depend on the Replication number. For Replication 1, FlexSim will generate certain set of random values. For Replication 2, FlexSim will generate a different set of random values, and so on. Tasks Each Job generates a list of Tasks. Each Task is made up of a Scenario and a Replication number. The Experimenter will run the model once for each Task, and record the results. For example, a Job that defines three Scenarios and requests 10 Replications of each Scenario will generate 30 tasks. Some larger and more detailed models can take minutes or even hours to complete a single Task. Fortunately, The Experimenter can run Tasks simultaneously. By default, the number of tasks that run simultaneously will match the number of CPU cores on the machine you use. If you have network or web access to a machine with additional CPUs, you can configure the Experimenter to use the CPUs on the remote machine to run models. For more information, see Running Jobs on the Cloud . Tasks are Run in the Background When you run an experiment, FlexSim will run Tasks in the background and record their results. It won't close the instance of FlexSim you are using to run the Experimenter. Results Database File The Experimenter collects results for each Task that it runs. Those results include: All Performance Measures values All data for Dashboard charts All tables from Statistics Collectors and Calculated Tables All messages in the System Console and Output Console Usually, the most important results are the Performance Measure values. To learn more about configuring helpful Performance Measures, see the Performance Measures topic. The results are stored in the Results Database File. This is an extra file that the Experimenter creates when you run the first Job. By default, it will be in the same directory as the model file, and it will have the same name. The results are stored in the file at each Task completes, so the file will grow as a Job runs. The Results Database File persists between Job runs, and all Jobs share the same file. The Results Database File provides several advantages: Before running any Task, the Experimenter checks if results for that Task are in the file already. If so, the Experimenter won't run that Task again, which avoids unnecessary computation. You can run additional Replications of any Scenario, or append a new Scenario to the results at any time. Jobs can quickly generate copious amounts of data. Storing that data in a separate file lowers RAM requirements, and won't affect your original model's file size. Never Mix Results from Different Models It is possible to run a Job, change the model, and then run additional Jobs. This will incorrectly combine data from two different models, and present results from both. This is statistically invalid. To avoid this, rename your model using Auto Increment Save when you make changes. If you are using the default file name for your Results Database File, then the file name will update with your model's name. This will preserve the previous model file as well as the previous results file generated by that model. You can also delete the result file before running a new Job, if you are unsure. Best Practices The following sections explain a few best practices to keep in mind when designing experiments: Make Sure Your Model Was Built With Good Data Inputs You need to ensure that you put good data into your model (inputs) in order to get good data out of your model (outputs). Make sure that your simulation model relies on accurate data and random number distributions that accurately represent your business system's requirements. (See Data Gathering Strategies for more information.) Validate Your Model to Reduce Errors Try running your simulation model at least one time from start to finish before you run an experiment. Once your simulation model can be run without any errors, you are ready to use the Experimenter. Know Your Computer's Memory Limits The more experiments or optimizations you run, the more memory it will require from your computer. The Experimenter and Optimizer will use all your cores unless you limit the number of cores on the Advanced tab. You might begin to experience problems if you are using lots of cores. Each core requires as much memory as a single model run. For example, using 8 cores means that it would require 8 times as much memory as a normal model run. For that reason, make sure you are familiar with your computer's capabilities. Design your experiments that your computer can handle without causing an overload or taking longer than you wanted it to take. Running more experiments and optimizations can increase your confidence in the results you are getting, but you need to weigh the need for good data against your computer's capabilities."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/GettingData/AdvancedDataGathering/RunningJobs/RunningJobs.html",
        "title": "Running Jobs",
        "content": "About Experiment Jobs An Experiment Job defines a strategy for generating Scenarios, and for determining how many Replications of each Scenario to run. When you run a Job, the Experimenter will run the model once for each Replication of each Scenario, and record the results. Please read Key Concepts About Experiments before reading the rest of this topic. Opening the Experimenter To open the Experimenter: On FlexSim's main menu, click the Statistics menu. Select Experimenter . Once you've created an Experimenter, you can access it by double-clicking the Experimenter from the Toolbox. Overview of the Experimenter User Interface The Experimenter interface is a window that has multiple tabs. The following table explains the basic purpose of each tab: Tab Purpose Jobs The Jobs is where you'll manage the list of Jobs for the Experimenter. You can use this tab to add, configure, reorder, and remove Jobs. Run You will use this tab to run a Job. This tab also shows the progress of each job as it runs in a chart. Advanced On this tab, you can specify general options that apply to all Jobs. These options deal with what data is collected, configuring and using remote CPUs, and setting Experiment triggers. Most users won't need to change anything on this tab. Experiment Jobs The most commonly used Job type is the Experiment Job. The Experiment Job allows you to specify a set of Scenarios to run, as well as how many replications of each scenario to run. To configure the Experiment Job, you'll need to do the following: Set the Name of the Job. The name can be anything, but should be something that hints at the purpose of the Job. Set the Warmup Time . The value you specify will apply to all Scenarios. Set the Stop Time . The value you specify will apply to all Scenarios. Set the number of Replications . The Job will run this many Replications of each Scenario you define. Choose which Parameters to use. Adding a parameter adds a column to the Scenarios table. Note that all Parameters are included in each Scenario. If you don't use a particular Parameter, the Experiment Job will use the Parameter's current value for all Scenarios. Add Scenarios to run. Each Scenario is defined as a row of the table. You can set the value of each Parameter for each Scenario by editing the table. You can set the name of the Scenario by editing the row header. Before running the job, also be sure that you have defined at least one Performance Measure. For more information, see the Performance Measures topic. Running an Experiment Job To run your experiment, you will use the Run tab in the Experimenter, as shown in the following image. Then use the Job field to select your Experiment Job. The following sections will explain the various stages of running an experiment. Before Running an Experiment Job Before running an Experiment Job, you'll be able to see the status of any Scenarios your Job defines: Below the chart's title and legend, there is one box per Task generated by the Job. These boxes are organized by Scenario, and display the Replication number for that Task. If you haven't run the Job before, then all Tasks will be marked as \"Proposed\", meaning there is no data in the Results Database File connected with those Tasks. The chart also shows the name and hash of each Scenario. You can hover over any Scenario on the chart, and a magnifying glass icon 🔍 will appear. You can click on that icon to see a popup with additional information about each Scenario. Running an Experiment Job Click the Run button to run the Job. At this point, the Experiment Job submits all Tasks to the Experimenter. The Experimenter checks for any Tasks that have already been completed, and ignores those Tasks. All other tasks are added to the Results Database File at that point. On the chart, you'll be able to see those tasks change to \"Submitted\". Once the Task begins, you'll see a progress bar for that Task. The progress bar shows how much model time has elapsed, compared to the Stop Time as a percentage. When the model reaches the stop time, the task will be marked as \"Recording\". During this phase, the results are calculated and stored in the database file. Once all the results have been recorded, the Task is marked as \"Complete\": Running an Experiment Job Twice in a Row If you run the Experiment Job twice, the second run won't cause any Tasks to run, and it won't generate any additional results. This is because the Experimenter checks if the results for a given Task are in the Results Database File before running. What Happens During Recording? The Recording phase includes the following steps: The results are calculated. All Performance Measures are evaluated, and all Statistics Collectors and Calculated Tables are updated. The results are transferred to the main FlexSim process. If you are running the job on the cloud , then the time it takes to transfer the data will be affected by network connection speed. The results are written to the database file. After Running an Experiment Job When a Job has finsihed running, click the View Results button to open a separate window with the results. The Experiment Results window has six tabs: Tab Purpose Performance Measures This tab will display the results of the experiment for each performance measure that you defined. Use the menu to select the specific performance measure you want to display. Dashboard Statistics This tab will display dashboard charts from any of the scenarios and replications you are interested in exploring. Be aware that you need to first add the charts you are interested in to your Dashboard in your simulation model before you can use this tab. Statistics Tables This tab displays the data for each Output Table (Statistics Collector or Calculated Table). The data from all Tasks is included in this table, sorted by Scenario and Replication. Result Tables This tab displays each Result Table. A Result Table is a configurable table that shows Scenarios or Replications as rows, with Parameters and Performance Measures as columns. Console Output Use this tab to check that there weren't any errors in your simulation models when you ran the experiment. This tab will allow you to check the console output for each replication for any console error messages. Make sure you don't skip looking at this step. State Files If you have saved state files, those files will be accessible here. The following image shows an example of the results: You can see that both the Alternative1 and Alternative2 Scenarios had a higher Throughput than the Baseline Scenario. Exporting to Excel The Generate Report button allows you to dump all the raw data in the Results Database File to an Excel Workbook. This can be helpful for more in-depth analysis. Re-Running Replications or Scenarios There may be rare cases where you'd like to re-run a particular Scenario or Replication, without re-running the whole Experiment. From the Run tab on the Experimenter, you can hover over any completed Scenario or Replication, and a remove button ❌ will appear. If you remove results, then run the Job again, those Tasks will be run again. These cases are rare. There are not very many reasons to re-run a model. One particular case might be that a bug occurred in a particular Scenario or Replication, and you'd like to fix that bug, then re-run the associated Tasks. You must be able to guarantee that the change you made would not affect the results of any other Task, and that can be difficult to prove. It is usually better to re-run the entire Job, so that all results are generated by the same model. Optimization Jobs An Optimization Job is useful when you are trying to find the Parameter values that produce the best behavior in your model. Unlike an Experiment Job, you don't need to specify Scenarios. Instead, you simply specify two things: which Parameters can be varied, and an Objective. An Objective is a scoring function, as well as an option to either maximize or minimize that score. When you run an Optimization Job, the will start by generating random Scenarios and running Replications of those Scenarios. As Tasks complete, the Optimization Job will analyze the results and generate new Scenarios that perform better. Given enough time, an Optimization Job can often find a Scenario that performs very well. Finding the Optimal Scenario It would be ideal to find the absolute best set of Scenario values for a given model. However, even with only a few Parameters, the number of possible Scenarios can be extremely large. The Optimization Job uses proprietary heuristic algorithms to quickly find very good Scenarios, but without an exhaustive search, it is impossible to prove that a better Scenario does not exist. However, the Optimization Job can find extremely good Scenarios relatively quickly, and so is a powerful and helpful tool. Optimization Jobs Require an OptQuest License The Optimization Job uses the OptQuest optimization engine. In order to use it, you will need to purchase an OptQuest license; this license is not usually included with FlexSim. To purchase an OptQuest license or to ask about pricing, contact FlexSim Customer Support You'll use the following steps to configure an Optimization Job: Set the Name of the Job. The name can be anything, but is most helpful if it hints at the purpose of the Job. Set the Warmup Time . The value you specify will apply to all Scenarios. Set the Stop Time . The value you specify will apply to all Scenarios. Choose which Parameters to use. The Optimization Job will only adjust the values of the Parameters you specify. Optionally, specify any Initial Scenarios . The Optimization Job will evaluate these Scenarios early in the search. This is a way for you to provide a good starting point for the search, which can save time. Optionally, specify any Constraints . Constraints are described in a later section. Set the Wall Time and Max Iterations . These both control when the Optimization Job will stop. The Wall Time is the approximate number of seconds the Optimization Job will run for; if it exceeds that time, it wil stop. To stop the Optimization after 10 minutes, enter 600 in this field. The Max Iterations specifies the maximum number of Scenarios to evaluate. The Optimization Job will stop after evaluating this number of Scenarios. Specify the Replication Mode and the number of Replications . The most common setting is to run a fixed number of Replications. Define one or more Objectives . The next section discusses Objectives in more detail. Adding Objectives You need to define what success looks like so that the Optimizer can determine which Scenario best meet that definition. You'll do this by adding your specific goals to the Objectives table. An Objective contains a simple function. For example, you may be interested in maximizing the throughput of your system. If you had a Performance Measure called Throughput, your expression would look like this: [Throughput] . The function can include references to any Parameter or Performance Measure. Those names should be in sqare brackets. The function can also include basic math operations, such: as [Throughput] * 300 . Use Performance Measures for Objectives Consider making a Performance Measure that directly calculates the Objective value. This makes the function for the Objective very simple, and it allows you to test the expression. Note that each objective has an Active field. Only the active objectives are included in an optimization. If more than one objective is active, the Optimization Job will perform a multi-objective search. If only one objective is active, the Optimization Job will perform a single-objective search. You need at least one active objective to run the Optimization Job. Use a Small Number of Objectives Sometimes you will need to balance Objectives; for example, you might want to maximize revenue while minimizing cost. You can add multiple Objectives to an Optimization Job. If you do, then the Optimization Job will attempt to optimize both. In this case, the Optimization Job will find the set of Scenarios that make a trade-off curve. You can choose the trade-off that best suits your situation. Try to use only one or two Objectives. The Optimization Job can handle more; however, it can take significant time to find good Scenarios for all three Objectives. Adding Constraints Constraints are a way of specifying additional conditions that a given model must maintain. The Optimization Job will only mark a configuration as optimal if it is feasible within the constraints you've defined. Constraints are very different from objectives. An objective is a scoring function; the Optimization Job is trying to find parameters that improve the scores. A constraint is a pass-fail test. The Optimization Job will evaluate whether a given solution passes all the tests. If it does, then the solution is considered feasible. If the solution fails any of the tests, the Optimization Job considers that solution as infeasible. The Optimization Job will try to find the best feasible solution. Constraints are expressions that involve a ≤ or a ≥ comparison. Here are some example constraint equations: [OnTimeJobsPercent] >= 0.80 [ReworkParts] <= 10 [Utilization] >= 0.75 [PackTeamSize + ShipTeamSize] <= 30 In some cases, a constraint is there to enforce performance standards while optimizing. The Optimization Job is very focused, and without a constraint, may give you an unhelpful answer. For example, if you have an objective to maximize throughput, the Optimization Job might increase the number of employees to an absurdly high number. Throughput is fantastic, but maybe utilization is unacceptably low. To avoid this issue, you could add a constraint, so that utilization must be kept at or above a certain threshold. Constraints that involve Performance Measures are evaluated after the replication has been run. In other cases, a constraint is there to enforce rules between multiple Parameters. For example, the Optimization Job might be allowed to increase the number of people on various teams. However, you might want to keep the total number of people below 30. So you could add a constraint that specifies the sum of several Parameters is less than some number. A constraint that only involves constants or Parameter values can be evaluated without actually running the replication. They just help the Optimization Job suggest valid Scenarios. Running an Optimization Job To run an Optimization Job, you will use the Run tab of the Experimenter. Select the correct Job, and press the Run button: The Optimization Job Status Chart The Optimization Job has different status chart than the Experiment Job. The chart shows each Scenario as a point on a scatter plot. By default, the X axis shows the iteration number, and the Y axis shows the first objective. You can configure either axis to show values related to the Scenario, including the Parameters, Performance Measures, and Objective values. You can optionally choose to set the color of each point based on one of the Objective values. This can help you explore the relationships between Parameters, Peformance Measures, and Objectives. The best Scenarios are marked with a gold star ★ . If you have a single Objective, the Scenario with the star is the best the Optimization Job found before it was stopped. If you have multiple Objectives, there will be a star on each Scenario that is on the trade-off curve. If a Scenario is in the trade-off curve, it means that no Scenario was found that can improve any Objective without worsening another Objective. You can also select Scenarios by clicking on a point. A ring will appear around the Scenario. The color of the ring is consistent so you can select a point, then change the X, Y, and Color axis, and still see the selected Scenario. Viewing the Results Because all jobs share the Results Database File, you can click the View Results button in the Experimenter to open the Performance Measure Results window. This window shows all results, reguardless of which Job generated those results. Range-Based Jobs A Range-Based Job is very similar to an Experiment Job. They both allow you to define a specific set of Scenarios, as well as the number of replications to run for each Scenario. They differ in how you specify scenarios. An Experiment Job requires you to specify the value of all involved parameters for every scenario. A Range-Based Job, on the other hand, allows you to specify a set of values for each parameter. When you run the Range-Based Job, it generates one Scenario for every combination of parameter values. The job in the preceding image would generate 49 Scenarios. The job also specifies that each Scenario will run for five Replications, for a total of 245 tasks. To use this job, you can add model parameters to the Parameters table in the job's interface. Any parameters you don't specify are assumed to stay at their current values. The job generates scenarios using the order of the parameters and values defined in the table. The job in the preceding image would generate scenarios in the following order: Proc1X Proc2X -13 -3 -13 -2 ... ... -13 2 -13 3 -12 -3 -12 -2 ... ... For each parameter, you can specify a range. The range is the set of values for that parameter. For numeric types, you can specify that range in terms of a minimum, a maximum, and step size. For any parameter, including Expression and Sequence parameters, you can define the set of values explicitly. To do so, change the Range Type from Iterable to Specific Values . Running Range-Based Jobs When you run a Range-Based Job, you'll see a chart with two main sections: a progress bar, showing the progress of the job, and a grid of squares, where each square represents a Scenario. The chart arranges the Scenario squares into blocks, where all the Scenarios in that block have some parameter values in common. The common parameter values are used to create the title of the block. You can click on any scenario to see see more information about it in the footer of the chart. From there, you can click the 🔍 button to see the parameters for that scenario, or rename the scenario. If you hover over a replication box, you can click the 🧪 button to apply that replication to the model. You can also click on the ❌ button to delete the results from the scenario, or from one of its replications. Viewing the Results Because all jobs share the Results Database File, you can click the View Results button in the Experimenter to open the Performance Measure Results window. This window shows all results, reguardless of which Job generated those results. Running Jobs on the Cloud The Experimenter can use remote computers to run replications of a model. Normally, when you run a job, the Experimenter launches many instances of FlexSim on the same computer. It then communicates with those instances to run replications of the model. When using remote computers, FlexSim sends HTTP requests to servers at IP addresses you specify. Each of those servers launches FlexSim instances, and the Experimenter then communicates over the network or internet to with those instances. A remote computer must meet the following requirements: The FlexSim Webserver must be running on the remote computer. The exact same version of FlexSim must be installed on the remote computer. The IPv4 address of the remote computer's webserver must be specified in the Global Preferences on the local computer. The remote computer does not need to be licensed. Once the remote computers are configured, you simply need to check the Use distributed CPUs box on the Advanced tab of the Experimenter. Running Jobs on the Cloud Requires More Overhead When you run jobs on the cloud, the Experimenter will wait for all remote computers to launch all instances of FlexSim. It may take several minutes for any replications begin running. In addition, data transfer both to and from the remote instances of FlexSim will take longer. In spite of this extra overhead, using many remote computers can significantly reduce the time required to run a job. Querying Experiment Tables You can use SQL to query data from the Results Database File. Table Type Example Query Result Tables. You can add, edit, and remove Result Tables on the Result Tables tab of the Performance Measure Results window. SELECT * FROM Experiment.Summary Statistics Tables. These are the tables found on the Statistics Table tab of the Performance Measure Results window. The include all Statistics Collectors, Calculated Tables, People Statistics Tables, and Chart Templates. SELECT * FROM Experiment.[Stat Table Name] Legacy Experiment Tables. For backwards compatibility, you can query the Scenarios table, as well as the PerformanceMeasures table. Summary tables replace and improve both of these tables. SELECT * FROM Experiment.Scenarios SELECT * FROM Experiment.PerformanceMeasures You can run these queries using FlexScript or a Calculated Table . If you are familiar with SQL queries, you can use these tools to explore the result data further. You can Explore the Results Multiple Ways You can always view the results in FlexSim in the Performance Measure Results window. You can also export the result data to Excel. You can also query the data within FlexSim. You can use whichever method is most comfortable for you."
    }
]
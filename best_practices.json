[
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/IntroToSimulations/IntroToSimulations.html",
        "title": "Introduction to Simulations",
        "content": "What is a Simulation? In general, simulation models are digital imitations of a business system. In particular, a simulation can imitate the behavior of a business system over time. Using FlexSim, you can either build a simulation model that imitates your business system as it currently exists today or you can build a prototype of your future business system to predict its performance in the real world. (See Current State vs. Future State Models for more information about the pros and cons of building a current-state model or a future state-model.) The purpose of a simulation model is to help you gain a deeper understanding of your business system and work on improving it holistically. Ideally, once you have built your simulation model, you will be able to experiment with different variables in order to better optimize your system. You could also use your simulation model to test how your business system responds to changing conditions. However, you might find that even going through the work of gathering data to create your simulation model will give you some valuable insights in their own right. In the process of gathering data about your system, you will get a first-hand view of your system by making real observations in real time talking to real people. Those insights alone might help you identify ways to optimize your business system in a way you hadn't been able to see before. What are Discrete Event Simulations? A discrete event simulation has three main components: A model A clock An event list A model generates events, which drive the simulation. An event is something that will change the model at a specific time. All events are placed on the event list, which sorts events chronologically. As the simulation runs, the clock time increases. When the clock time matches the next event time, that event updates the model and is removed from the list. For example, the screen capture below shows a simple model running. You can see parts arrive from source, wait in the queue, and go through the processor before leaving the system. In this model, only one part can be processed at a time: This example shows the model, the clock, and the event list. The model consists of the 3D objects. The clock is shown above the 3D objects. The event list is shown below the object statistic windows. This example demonstrates the fundamentals of discrete event simulation. You can watch as the clock gets to an event, and then that event causes something to happen in the model. In addition, you can see that some events cause objects to create more events. For example, when the source creates a flowitem, it also creates an event to create another flowitem in the future. Finally, you can see that as the events occur, the statistics in the model are kept up to date. One of the main advantages of discrete event simulation is that you can skip the time between events. This allows the simulation clock to move much faster than real time, even for complex models. Continuous Values in Discrete Event Simulation In the previous example, you can see values that change between events; flowitems travel smoothly across the processor, and the average content statistic changes frequently. This may seem to go against the nature of event-based simulation. FlexSim simulates these kinds of values by recording key information with events. For example, when an item arrives on the processor, the processor records the arrival time. It calculates the time the part will be finished, and schedules an event at that time. This means that when the processor is drawn in the 3D view, it can use the current time and the item's arrival time to put the box in the correct position. The average content works in a similar manner. When the content changes, FlexSim can store enough information during that event to calculate the value between events, if that value is needed. An Example of Using Simulation Imagine you are building a simulation of an assembly line for car steering wheels and you are interested in determining whether your assembly line is running at its optimal efficiency level. In this simulation, a series of parts will arrive at a welding station. You might represent the welding station using a processor (a type of 3D object that simulates the time it takes to process a particular product) and an operator (the employee who needs to operate the welding machine). The arrival of the parts at the welding station would be an event . This event triggers the processor and operator to begin welding the parts together. Before the parts arrive, both the processor and operator might be idle , which is the specific state they are in before the parts arrive. After the parts arrive and the processor begins to weld the parts, the processor's state changes to processing (because it is processing the parts) and the operator's state changes to utilize (because the employee is being used). After the processor and operator finish welding the parts, the processor and operator return to their idle state. You can use then use these states to gather useful metrics about the efficiency of the assembly line. Perhaps you've decided that the key metrics you are interested is the amount of idle time compared to the amount of utilized time for both the operator and the processor. These metrics can help you determine whether your welding station and your employees were being under- or over-utilized: If your welding station and employees are being under- or over-utilized, it could mean that you haven't yet found the most efficient balance of resources in your business system to match customer demand. If your resources are over-utilized, you could have a bottleneck at that point in the assembly line. You could then experiment by increasing the number of welding stations and employees. If your resources are under-utilized, you could analyze your business system to determine if there are bottlenecks earlier in the assembly line or if there are currently too many welding stations or employees."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/ModelRepeatability/ModelRepeatability.html",
        "title": "Model Repeatability",
        "content": "Overview FlexSim allows you to have variability in your simulation runs through the use of statistical distributions. These randomly generated values give you more accurate results than a static set of data. Using the Experimenter you can run multiple replications of various scenarios, each of which can produce different results. You can compare and analyze those results for a more thorough understanding of your simulated system, or for the creation of confidence intervals. However, when you are building a model and want to validate your results, or you are trying to fix an error in your model, these varying results may be undesired. In these cases it can be useful to have your model be repeatable. This topic lists all the ways to make your model repeatable. Repeat Random Streams This option can be found under the Statistics Menu. If checked, every time you reset and run the model the random number generator will produce the same sequence of numbers. This makes it possible to have the results of your model be the same for each simulation run. If repeatable results are desired, this must always be checked. To truly have a repeatable model, the conditions below must be satisfied. Task Executer Reset Position If your Task Executers do not have a reset position, then when you reset and run your model, those Task Executers will start from wherever they were at the end of your last simulation run. This means that the Task Executers will have different travel times from run to run, which will affect your results. In order to set a reset position, right click on the Task Executer and select Edit > Set Object Reset Position. Or to set the reset position for multiple Task Executers at once, shift-select or Ctrl-click a group of Task Executers, then highlight one of the selected objects and click the \"Set\" Position on Reset button in the View > Edit Selected Objects section of Quick Properties. Custom Draw Code If any of your objects have code in the \"Custom Draw\" trigger, make sure that that code does not include any calls to functions that use the random number generator, such as statistical distributions. Item Locations If any of your code queries an item's location, you must call the function updatelocations() on the item or the Fixed Resource object containing the item before making your query. If updatelocations() is not called, the location returned will be where the item was when it was last drawn. Drawing rates vary with the run speed, so if updatelocations() is not called, model results will vary between running the model slowly and running it quickly, or running on different hardware. Keep in mind that loading/unloading an item while it is moving (on a conveyor, for example), requires that its location be queried. As such, updatelocations() should be called immediately before loading/unloading items to/from a moving location. Initializing Variables Declared variables in custom code should always be initialized to some default value. Failure to do so can result in variables containing random data. If there are any circumstances under which a variable might be accessed before it has explicitly been set, random data in that variable may cause non-repeatable behavior in your model. int myNumber; //the myNumber variable will have random data int myValidData = 0; //by initializing to a value that I can account for in my code, I guarantee that no random behavior will be introduced by uninitialized variables treenode myObject; //because I did not initialize this value, there is no telling what it is referencing. It is not NULL by default! treenode myNode = NULL; //much better to specify a NULL treenode, or some other treenode, as the default value, rather than assume (or hope) that an uninitialized variable will be NULL. Resetting Data If at any time during your model run values of persistent data are changed, that data will not change back to its original state on model reset. Examples of persistent data include Global Tables and object labels. Be sure to add code into OnReset triggers that will change the data back to its original state. For object labels, one way to do this is to check Automatically Reset Labels on the object's Label page. Non-Repeatable Data If any of your logic is based on data that will always vary, your model will never be repeatable. You should re-architect those portions of your logic to avoid basing decisions or conditions on non-repeatable data. Examples of non-repeatable data include memory addresses (using tonum() to get the memory address of a treenode, note that tonum() is deprecated and should no longer be used) and real time (using the realtime() function to get real-world time stamps). Eliminate all Modeling Errors Track down and fix any issues that are causing System Console or Compiler Console errors. Do not ignore these errors! These errors tell you that something in your model is wrong and should be fixed. Among other issues, errors in your model can cause unpredictable behavior and may cause your model to not be repeatable. Debugging Non-Repeatable Models If a model is still not giving repeatable results and the above suggestions have already been applied, the best way to debug the model is by looking at the Event Log , which can be found under the Debug menu. Set up the model exactly how you want to test it: Event Log open, \"Enable Logging\" checkbox ticked Start Time and End Time values set Various interface windows open or closed (3D views, Global Tables, etc.) etc. Save the model. Close FlexSim. Double-click on the model to open FlexSim with the model open. Press Reset once and Run once. Once the run is complete, or has passed your desired Stop Time in the Event Log window, press Export to save the log as a CSV file. Press Reset once and Run once. When the second run is complete, Export the new Event Log using a different file name. Now that you have the two event logs, you can compare them using a text comparison tool such as WinMerge. Find the first event where the time differs between the two logs. Inspect the objects involved in that event, or the objects that created that event, to see what could be different between the two runs. Rerun the model to just before that point, then step through events leading up to the diverging event. Use the debug tools to step through your code where necessary. For some models, it helps to click the Event header on the Event Log and filter out particular events. For instance, if you are sending messages that include a memory address as one of the message parameters, those addresses will be different for every simulation run and will make finding other differences in your exported log file hard to find. Sometimes this is expected and can be accounted for by removing these events from your log file. You can close and reopen FlexSim each time just in case the model is doing something to the application's state or variables in the MAIN or VIEW trees that aren't reset when you just open a model. This helps ensure that even if subsequent runs aren't the same, the first run in each test will match the first run of each subsequent test. Steps 3-6 should produce identical runs even if the model isn't repeatable after a simple Reset/Run without closing FlexSim. Additional memory addressing considerations If memory addresses of objects (retrieved with the tonum() command, note that tonum() is deprecated and should no longer be used) are used in your modeling logic, they should be stored as doubles. You will have issues if you cast them into integers. int is a signed datatype, but memory addresses are unsigned. Therefore, if you try to call tonode() on a memory address that has been stored as an integer, it might be a negative number and return NULL instead of actually returning the node. 64-bit systems compound the problem. Integers are 32-bit and, on a 64-bit system, memory addresses are 64-bit. This means you may have a memory address that is larger than an int, and it will get truncated when you cast it into an int. When you try to reference the node with tonode(), some other location in memory will be referenced. Always store memory addresses as doubles! Or, better yet, you should try to use the reference directly or cast it into a treenode as soon as possible. Avoid storing the memory address as a declared variable whenever possible. For example, if msgparam(3) returns a memory address: treenode qtde = tonode(msgparam(3)); //convert to a treenode as soon as possible int qtde = msgparam(3); //don't do this! always convert to treenode as soon as possible or, if necessary, store the memory address as a double In summary: Always convert a memory address to a treenode using tonode() as soon as possible. If you must pass memory addresses through numbers, use a double datatype, not an int. A double stores 64 bits and will properly reconvert back to a treenode when you call tonode() on its value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/BeforeBuilding/ProjectGoals/ProjectGoals.html",
        "title": "Identify Your Project Goals and Scope",
        "content": "Identify Your Project Goals The first step in creating a simulation model is to get clear and specific about the scope of your project and what goals you hope to accomplish by creating a simulation model. This section lists some common reasons why businesses begin simulation projects. Solve a Specific Problem Do you want to: Calculate the risk or return on investment for a specific business decision? Improve equipment utilization? Reduce waiting time and queue sizes? Improve throughput times? Allocate resources more efficiently? Eliminate stock-out (shortage) problems? Minimize the negative effects of breakdowns? Minimize the negative effects of rejects and waste? Establish optimum batch sizes and part sequencing? Resolve material handling issues? Optimize prioritization and dispatching logic for goods and services? Proof of Concept Do you want to: Successfully prove or pitch your solution to a problem to stakeholders and decision-makers? Demonstrate new tool design and capabilities? Study alternative investment ideas? Gain In-Depth Understanding Do you want to: Get a better understanding of your current system? Manage day-to-day operational decision making? Study cost reduction plans? Study the effect of setup times and tool changeovers? Employee Training Do you want to: Train operators in overall system behavior? Educate operators about job-related performance? Define Your Scope Next you should define the scope of your simulation project. The more you can narrow your scope, the better. Many people are tempted to create a simulation model of their entire business system, but this is generally not the best place to start. Unless you have a small, one-product business, modeling every single aspect of your business system will be too complicated and overwhelming. At least in the beginning of your simulation project, try to focus on the aspects of your business system that are directly relevant to one specific product line or a typical customer's experience. Try to choose a product or service that covers all the basic processes in your business system. After you get more comfortable with the software and become more experienced with simulations in general, you can move on to modeling more complex aspects of your business system. Only Include Essential Elements in Your Model Keep in mind that you should only include those elements of your business system that are needed to answer the question or solve the problem that you identified earlier. As one FlexSim customer once said, \"You don't need to model every single element of your business right down to the water cooler in the employee break room. Just keep it to the relevant elements. The best simulations are the ones that have a clear focus and eliminate any unnecessary details.\""
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/BeforeBuilding/CurrentOrFuture/CurrentOrFuture.html",
        "title": "Current vs. Future State Models",
        "content": "One of the first decisions you need to make before beginning your simulation project is to decide whether you should create a current-state or a future-state model. A current-state model depicts your current business system. The goal of a current-state model is to help you visualize and understand what is actually happening in your business system today. You can also use it to compare your simulation model to real-world performance to ensure that your model is accurate. By contrast, a future-state model will help you plan and design a more efficient business system that you will implement in the near future. You probably decided to explore simulation modeling because you were dissatisfied with your current business system. For that reason, you might be tempted to jump right in and start creating a future-state model. However, many simulation theorists strongly advise against that and instead recommend starting with a current-state model first. The process of creating a current-state model overlaps with the process of creating a future-state model and vice versa, as shown in the following image: There are many advantages to starting with a current-state model: Good practice - If you're new to FlexSim and simulation modeling, creating a model of your current system first will help you to learn how to use these tools better. Consider practicing modeling with a current-state model until you can use the tools a little more instinctively. Information gathering - Creating a current-state model will force you to gather important information you'll need about how your business system really works. You'll have to go out onto the floor and talk to your employees about each step in your business system. In doing so, you'll begin to see your business system with fresh eyes. Validating your model - Once you've created a current-state model, you'll be able to compare your simulation model with how your business system operates in reality, which is called validating your model in the simulation industry. You can then determine if the model you've created accurately depicts reality. Once you've validated your model, you can then go on and make a future-state model knowing that the model you started with is accurate. Problem solving - Creating a current-state model actually helps you to see problems with the current system that may have otherwise been invisible to you. Many times as you are creating a current-state model, you will begin to realize exactly what needs to change about your business system. That's why some simulation practitioners recommend keeping track of an action list (a \"to do\" list) of things to change while working on a current-state model. So, consider beginning your journey into simulation modeling by creating a current-state model first."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/BeforeBuilding/KeyMetrics/KeyMetrics.html",
        "title": "Determine Your Key Metrics",
        "content": "Why Do I Need to Think About Key Metrics? If your primary goal in creating a simulation model is to solve a problem, you're going to need to identify the key metrics that your business should use to determine whether it is running as effectively as it possibly can. FlexSim can give you almost any kind of statistic about your business system that you are interested in. FlexSim also gives you the ability to run experiments, seeing how various changes to your business system can impact the key metrics you are most interested in. For example, perhaps you want to determine whether leasing a $400,000 machine will justify the expense by sufficiently reducing costs on labor, maintenance, and/or raw materials. Which statistics would you want to look at in your simulation model? In that case, you'd want your simulation model to give you the minimum, maximum, and average statistics for: The production level of the old machine as opposed to the new machine The reduction in wasted raw material per unit on the old machine as opposed to the new machine The amount of time employees spend per unit operating the old machine versus the new machine The amount of time the old machine breaks down compared to the new machine You would then use these ranges of statistics to calculate the costs of the raw material, labor, and breakdowns per unit. The difference in costs between the old machine and the new machine would give you a range of possible savings per unit. You would then calculate the annual savings by adding the savings together and multiplying it by the annual production level. These statistics would help you determine whether those savings were high enough to justify the $400,000 expense. FlexSim empowers you to solve these kind of problems by giving you access to this information. However, it's ultimately up to you to decide which information has the most value to you. With that in mind, there are a few different ways you can possibly determine which metrics are the most important to your business system, as discussed in the following sections. Determine What Decision You Want to Support You probably started using FlexSim because you need to make some important decisions. And we all know we make better decisions when we have better data. In his best-selling book How to Measure Anything , Douglas Hubbard recommends asking these questions to determine what you want to measure: What is the decision this measurement is supposed to support? What is the definition of the thing being measured in terms of observable consequences? How, exactly, does this thing matter to the decision being asked? How much do you know about it now (i.e., what is your current level of uncertainty)? What is the value of additional information? Thinking seriously about these questions might help you to get more clear and specific about what metrics will most help you make better decisions for your business system. Use the Clarification Chain If you're still having difficulty identifying what you should measure. Consider using what Douglas Hubbard calls \"the clarification chain.\" The goal of the clarification chain is to move from vague and intangible goals to specific and tangible things that can be measured. Many measurements start by deconstructing an uncertain variable into its constituent parts and then identifying directly observable things that are easier to measure. Hubbard writes: \"First, we recognize that if X is something that we care about, then X, by definition, must be detectable in some way. How could we care about things like quality, risk, security, or public image if these things were totally undetectable, in any way, directly or indirectly? If we have reason to care about some unknown quantity, it is because we think it corresponds to desirable or undesirable results in some way. Second, if this thing is detectable, then it must be detectable in some amount. If you can observe a thing at all, you can observe more of it or less of it. Once we accept that much, the final step is perhaps the easiest. If we can observe it in some amount, then it must be measurable.\" As you work through the clarification chain, you should also try to get clear about why you want to measure something in order to understand what is really being measured. The purpose of the measurement is often the key to identifying what the key metric should be. Consider Building First and Identifying Metrics Later The statistician David Moore, the 1998 president of the American Statistical Association, once said: \"If you don't know what to measure, measure anyway. You'll learn what to measure.\" It's helpful to think of measurement as an iterative process. At this stage of the simulation project, don't worry about identifying too many concrete metrics yet. Build your model and begin measuring what you think will be most valuable. Keep in mind that you can always adjust the method based on these initial findings. For Deeper Reading Consider reading Douglas Hubbard's How to Measure Anything: Finding the Value of \"Intangibles\" in Business , in its 3rd edition at the time of this writing. Not only does this book provide useful guides for determining which metrics are the most valuable, but it is also a good introduction into the core principles behind simulation modeling."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/BeforeBuilding/DataGathering/DataGathering.html",
        "title": "Data Gathering Strategies",
        "content": "Putting Good Data Into Your Model You need to ensure that you put good data into your model (inputs) in order to get good data out of your model (outputs). For example, you'll need to know things like how long it takes to perform a particular process or how frequently customers arrive, etc. In order to input that kind of data into FlexSim, you'll have to observe your business system or use other data-gathering methods to get kind of information FlexSim needs to create an accurate model of your business system. This topic will discuss various methods for gathering useful data. What If the Inputs Vary Over Time? If your business system is like most, there are aspects of your business that seem random or that fluctuate over time. For example, you might know that customers arrive at heavier rates during certain peak hours than they do during slower hours. FlexSim can fortunately simulate this kind of variance. Aspects of your business that might appear to be purely random at first might actually follow statistically predictable patterns if you observe it closely. After you've observed your business system using the data gathering methods described in the following sections, you can input that data into FlexSim and it will suggest an appropriate statistical distribution to model this kind of variance over time. Use Historical Data You might already have all the useful data you need right at your fingertips. If your facility uses automated tracking for customers, work orders, etc., you could possibly pull that data from the computers that track it. You could then use that data to determine an appropriate statistical distribution for a particular process or set of processes. Talk to your facility's IT managers about pulling statistical data from these computers for a specific period of time. Remember that you'll want to gather enough data to be representative of what is normal for your business system. Simulating the Exact Historical Record You don't necessarily need to translate the historical data into a statistical distribution; FlexSim is capable of simulating the exact historical record if needed. However, using the exact historical record in your simulation system has a few advantages and disadvantages. One advantage is that historical re-runs can better replicate exactly what happened in your actual business system, which is great if you are only building a current-state simulation. However, historical re-runs don't always scale well when you need to create a future-state simulation. For example, you won't have any historical data on the 10 new products that you plan to introduce next year. (See Current State vs. Future State Models for more information.) Another disadvantage is that you won't be able to explore the inherent randomness of a system. You also have to re-import the historical data every time you want to simulate different data for a different historical time period. Conduct a Time Study A time study involves direct and continuous observation of a particular task or process to determine how much time the process takes. The observer often uses a timekeeping device (such as a stopwatch or video camera) to record the time taken to accomplish a task. The observer will observe the task multiple times over a long period of time, recording the amount of time each process takes every time. There are many free guides on the Internet for conducting time studies if you would like to conduct a time study yourself. There are also consulting firms that are willing to conduct time study projects if needed. Observe Your Business First Hand Don't just ask yourself: is this what is happening in my business system today? Make sure you actually go and see first-hand for yourself. While you're there observing your business system first hand, try walking along the actual pathways of the customer, material, and/or information flow yourself. Start with a quick walkthrough of the entire door-to-door business system to get an overall sense of the flow of materials and information. Ultimately the goal is to make real observations in real time talking to real people. Interview Employees You could interview all your staff members and get a rough estimate about how long particular processes take and use that data to get an approximate wait and processing times. Although employee interviews are subjective by nature, this kind of information would at least be useful for making an educated guess. Make an Educated Estimate There are actually some decent ways to make an educated guess within a 90% confidence range. Consider reading Douglas Hubbard's How to Measure Anything: Finding the Value of \"Intangibles\" in Business , in its 3rd edition at the time of this writing. This book discusses useful methods for estimating measurements that are potentially too costly or difficult to observe directly. Conduct a Sensitivity Analysis Each of the data-gathering methods described in the previous sections will involve some investment of time and money. Some methods are more resource-intensive than others. For example, time studies are the most costly, whereas interviewing employees or making an educated guess are not very costly at all. Before engaging in a costly time study, you should ensure that the information you would gain from this study would be valuable enough to justify the expense. You don't want to waste time and money on data that isn't going to matter to your simulation project in the end. One effective way to justify this expense is to conduct a sensitivity analysis . To conduct sensitivity analysis, begin building your simulation model with the least costly data-gathering methods (such as making an educated guess). Then, once you've built your first prototype of your simulation model, try testing your model inputs (such as customer arrival rates or processing times, etc.) by changing them and monitoring their impact on your key metrics. After performing this analysis, you'll know which model inputs have the strongest impact on the key metrics. You can then determine which model inputs are most valuable to your simulation project. In other words, you will know which model inputs might justify a more expensive data-gathering technique to get higher quality data."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/WhileBuilding/Containers/Containers.html",
        "title": "Using Containers as a Model Management Tool",
        "content": "Introduction to Using Containers The Container is a 3D object in the FlexSim library whose primary purpose is to contain objects. This makes them helpful for managing complex models. The following sections explain different ways you can use containers to make your model more efficient and well-organized. Organizing Objects Visually Perhaps you have a group of objects that are related in some way, such as a workstation that contains various 3D objects. One way that containers can help you better manage groups of 3D objects is by keeping these objects organized visually, as demonstrated in the following image: Moving Groups of Objects When you add a container to your model and populate it with sub-objects, you can move it as a single movable object in your model: See Moving, Rotating, Resizing 3D Objects for more information. Duplicating Groups of Objects Copying and pasting a container will duplicate all of the objects in the container: See Copying and Pasting Objects and Properties for instructions on duplicating objects. Creating Custom Libraries Custom libraries make it so that you can easily add copies of an object with custom properties. Using custom libraries, you can drag and drop a custom object directly from the library into your model. For example, if you've made several complex changes to the properties of a specific processor, you can add this processor to your custom object library. Then you can simply drag and drop the custom processor from the library into your model and the new processors will have identical properties. You can do the same thing with containers to create copies of multiple custom objects. For example, if you have a workstation with several 3D objects that you will copy throughout your model, it might be helpful to put the entire workstation in a container and add it to your custom library. See Creating Custom Object Libraries for instructions on creating custom libraries. Merging Models Created by Other Modelers If you are working with a team of modelers to create different portions of a complex simulation model, using containers can make the process of merging models much simpler. Not only do containers make it easy to move large sections of a model at the same time, they also make it so that you can quickly change the names of objects inside that container if needed for model functionality. For example, two FlexSim users were working on different portions of the same model and didn't realize they gave their objects the same names. Identical names would have caused problems in the model's behavior because their model's logic frequently referenced specific objects by name. Fortunately, all of their objects were in separate containers. Rather than rename every single object, one modeler simply changed the name of the container and easily updated the model's logic. Creating Additional Floors and Model Layouts If you need to model a facility that has multiple floors, you can use containers to create those floors: Use the Model Layout Tool to View Floors Side By Side It's not always convenient to view multiple floors stacked on top of each other while building a model. Using containers, you can use the Model Layout tool to quickly change between viewing the floors side by side or stacked on top of each other. See Creating Model Layouts for more information. Adding Objects to a Container When you add an empty container to your model, it will open a view into the contents of the container in a separate pane. You can then work in that pane to add and connect objects in the container. Once you've finished adding the objects you need, you can close the container's pane and work with the container as a single object in the model's 3D view. To get back to the pane, right-click on the container and choose View / Edit Contents . You can also edit the contents of the container in place by clicking on the container, and in properties, selectin Edit In Place . This will let you edit the contained objects directly in the model view. Uncheck Edit In Place once you are finished. Moving Existing Objects into a Container If you want to put existing objects into a container, you will need to use the Edit Selected Object tool: Add a Container to your model (from the Library under Visual ). Position the container near the objects you want to contain. Hold the Shift key and draw a box over all the objects to select them. A red box will appear around the selected objects. If you selected the container in red as well, hold the Ctrl key and click the container to deselect it. Click on the container so it will have a yellow border around it to indicate that it is the currently highlighted object. On the main menu, click View , then Edit Selected Objects . This tool will open in the right pane (where you normally see Quick Properties ). Under the Edit group, click the Move into Highlighted button. If needed, click the X in the corner of the Edit Selected Objects pane to close this tool and return to Quick Properties. Hold the Shift key and click in a blank area of the model to deselect the objects. Test to ensure that you successfully moved the objects into the plane by clicking the plane and moving it around. If you were successful, all the objects should move together when you move the plane. Surrounding Contained Objects To resize the container to fit its contents within its size, click on the container and press Fit Size To Contents in the properties pane. Moving Objects out of a Container If you want to remove objects from a container, you will use the Edit Selected Objects tool: Click on the container and in its properties select Edit In Place . Use Ctrl+click to select the objects you want to remove from the container one by one. Don't Select the Container Object Make sure you avoid selecting the container object or else the subsequent steps won't work. On the main menu, click View , then Edit Selected Objects . This tool will open in the right pane (where you normally see Quick Properties ). Under the Edit group, click the Move into Model button. If needed, click the X in the corner of the Edit Selected Objects pane to close this tool and return to Quick Properties. Hold the Shift key and click in a blank area of the model to deselect the objects. Test to ensure that you successfully moved the objects out of the plane by clicking the plane and moving it around. If you were successful, all the objects should remain stationery when you move the plane. Once finished, uncheck Edit In Place to return to manipulating the container as a single object. Creating Port Connections with Contained Objects You can connect from outside objects to the objects contained by a container. By default, when you attempt to connect with a container, the contained objects themselved with be selectable, so that when you connect, you will connect with those individual contained objects. Hiding the Content of Containers To hide the content of containers, right-click the container, and select Edit then select Hide Content ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/BestPractices/WhileBuilding/Flowchart/Flowchart.html",
        "title": "Build a Basic Flowchart of Your System's Logic",
        "content": "Why Build a Flowchart? Consider beginning the simulation process by building a basic flowchart of the business system you want to model. This flowchart could include the basic processes or stations in the product line or service that you want to model. Many simulation practitioners recommend starting with a basic flowchart because: If you build the Flowchart in FlexSim, that same flowchart can later power the underlying logic of your simulation model. You can create flowcharts using the Process Flow tool in FlexSim. Granted, FlexSim's flowchart tools aren't quite as feature-rich as software that is specifically designed for flowcharting. However, the main advantage of creating your flowchart in FlexSim is that, when you get to the later stages of the model-building process, you can then use this same flowchart to build the logic of your simulation model. All you need to do is add activities to your flowchart and you'll be able to create a fully functional simulation model in a much shorter amount of time. Building a flowchart of your business system can also helps you see your business system from a more holistic perspective. Similar to value-stream mapping in Lean philosophy, creating a flowchart helps you to view your business from a different vantage point: the flow of products or services through your business system. Or it can possibly help you see your business system from the perspective of the customer from the moment they come in the door to the moment they leave. Building a flowchart can be another useful way to gather data. Some people find that even the process of building a simple flowchart helps them identify clear areas of improvement for their business system because they begin to see problems that were otherwise invisible to them. Not only do flowcharts help you to observe your business system first-hand, but you can also easily share flowcharts with other employees who work more directly on the product line to determine if the flowchart accurately captures what actually happens in your business system basis. How to Build a Flowchart To build a new flowchart, you'll need to create a General Process Flow using the Process Flow tool. You can then drag flowchart shapes and arrows from the Process Flow Library into the flowchart. For a more detailed walkthrough of how to create a flowchart, see FlexSim Basics Tutorial 1.3 - Build a Process Flow Model ."
    }
]
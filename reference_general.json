[
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/SystemRequirements/SystemRequirements.html",
        "title": "System Requirements",
        "content": "Overview FlexSim's system requirements are divided into two tiers: Minimum: Many modern Windows PCs meet FlexSim's minimum requirements . While the minimum requirements are adequate to trial the software, they are often underpowered for common simulation modeling scenarios. Recommended: For regular FlexSim use, your computer system should meet or exceed the recommended specifications . Review our FlexSim Answers article Recommended System Requirements for an in-depth discussion regarding the hardware components that make the most difference when building and running your simulation models. Minimum System Requirements Many desktop and laptop computers produced in the last few years meet FlexSim's minimum requirements. A system that meets these minimum requirements will allow you to: evaluate FlexSim work through the tutorials build and run basic simulation models Operating System A 64-bit edition of Windows under current Microsoft extended support 1 Windows 11 (see supported versions ) Windows 10 (see supported versions ) FlexSim is tested and designed for Windows personal computer systems 2 . CPU A modern x64 Intel or AMD processor To meet minimum requirements for performance, compatibility, and vendor support (such as driver updates) we recommend a CPU produced within the last 5 years, such as: Intel 10th-Generation Core processor (Comet Lake, Ice Lake, Amber Lake) or higher AMD Zen 3 series processor (Ryzen 5000, etc.) or higher ARM processors are not supported. RAM 16 GB RAM or more Graphics A GPU supporting OpenGL 3.1 or higher To meet minimum requirements for performance, compatibility, and vendor support (such as driver updates) we recommend a GPU produced within the last 5 years, such as: Nvidia GeForce RTX 20 series (desktop) or 20 series (mobile) or higher AMD Radeon RX 5000 series (desktop) or 5000M series (mobile) or higher Intel Gen 12 Graphics or higher You may need to update your graphics driver for FlexSim to work properly. See the FlexSim Answers article Graphics Compatibility - Common Problems and Solutions for more suggestions on improving graphics compatibility and performance in FlexSim. Disk Space 3 GB free FlexSim's installer may be up to 1.2 GB in size, depending on version. After successful installation, the installer file may be deleted. After installation, FlexSim's program files may use up to 1.2 GB of disk space, depending on version. Your model files, CAD layouts, images, custom 3D shapes, data for import, exported reports, and other simulation related assets that you provide will take disk space in addition to the software's installation footprint. Additional Software The latest .NET Framework 3 Recommended Specifications For building and running your own simulations, we recommend using a modern, high-end PC with components that meet or exceed the following specifications: Operating System The most recent version of Microsoft Windows 11 . CPU A CPU scoring 34,000 or better in the PassMark - CPU Mark multi-thread benchmark, and 4000 or better in the single-thread benchmark, such as: Intel Core i7-12700K or higher AMD Ryzen 7 7700 or higher RAM 32 GB RAM or more Graphics A GPU scoring 22,000 or better in PassMark - G3D Mark benchmark, such as: NVIDIA GeForce RTX 4060 Ti or higher AMD Radeon RX 7700 XT or higher Notes Once an operating system reaches its end of extended support with Microsoft , FlexSim no longer actively supports that OS. Windows on ARM is not supported. FlexSim Software is designed for and tested on Windows personal computer systems. Remotely connected systems, thin-clients, virtual operating systems, virtualized GPUs, and other non-PC environments are not tested or directly supported. FlexSim Software requires compatible 3D hardware and driver support, which may be missing from such environments. Certain non-PC environments may successfully run FlexSim Software and meet your compatibility and performance needs. FlexSim provides no guarantees about the suitability of such environments. If you choose to use FlexSim Software in a non-PC environment, please test thoroughly and understand that FlexSim will not be able to provide more than general system support for your unique environment. FlexSim Software uses functionality provided by Microsoft's latest .NET framework. A compatible .NET framework is already installed on most computers, though if necessary, it can be downloaded directly from Microsoft ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ReleaseNotesAndHistory/ReleaseNotesAndHistory.html",
        "title": "Release Notes and History",
        "content": "The following is a list of features and fixes that have been included in the latest FlexSim releases. FlexSim 25.2.0 Added an option to change the Utilize animation for Operators. Added browse button for the Experimenter Results Database File path. GIS Added Ignore Objects checkbox to the Map Quick Properties. Omniverse Added support for exporting Containers. ProcessFlow Added Rotate to Object pickoption in the Change Visuals and Custom Code activities. Added list of animations while sampling from the Run Animation activity Added Code Snippet as a pick option to Assign Labels activity Value field. Added Custom Stream for randomly spaced Date Time Source. Added percentage value on the tooltip of Zones in Sankey Diagram. FlexSim 25.1.4 Included fixes listed in 25.0.9 below. FlexSim 25.1.3 (May 23, 2025) Included fixes listed in 25.0.8 below. FlexSim 25.1.2 (May 6, 2025) Included fixes listed in 25.0.7 below. FlexSim 25.1.1 (April 16, 2025) Included fixes listed in 25.0.6 below. FlexSim 25.1.0 (April 14, 2025) Added the ability to navigate in the 3D view with the arrow keys. Added the ability to change an Object's class. AGV Added Allocation Wait Point functionality to Control Points. Enabled dynamic changes to AGV load type . A* Improved the placement of new points when added to a path. Omniverse Improved FlexSim object manipulation in USD Stages. Improved saving of FlexSim object properties to USD. People Added Workspaces shortcut to the Healthcare environment. ProcessFlow Added the Timed Travel activity. Updated Batches and Waves to stack inside the boundaries of the activity. Added custom stream option for randomly spaced Date Time source. Added Show Percentages to Milestone Sankey chart. Added 'Code Snippet' as an option for Value in the Assign Label activity. FlexSim 25.0.9 Fixed the Visual Tool onDrag() function causing issues with 3rd party modules. Fixed an issue with the getProperty() command. AGV Fixed an issue allocating vertical path points in control areas. Fixed an issue with kinematics calculations. FlexSim 25.0.8 (May 23, 2025) Fixed issues with the Visual Tool properties panel. Fixed saving charts and Dashboards as PNG. Fixed drawing Unicode characters in dark mode. Fixed Utilization by Hour chart not recognizing warmup time. AGV Fixed AGV paths being exported to USD. Conveyor Fixed Show Transfers checkbox. People Added Control Area to the Healthcare environment library. FlexSim 25.0.7 (May 6, 2025) Fixed an issue when copying and pasting dashboard charts. Fixed an issue with downloading the denoiser for RTX mode. Fixed an issue with popups remaining open. Added State Profile option to Utilization by Hour chart. Fixed \"Delete and Copy Group Members\" behavior for Containers. Conveyor Fixed an issue with the Mass Flow algorithm for rebalancing downstream output. Omniverse Fixed objects flickering in live sessions. Process Flow Fixed an issue with embedding images. FlexSim 25.0.6 (April 16, 2025) Fixed an issue where deleting charts caused FlexSim to crash. Conveyor Fixed an issue with conveyor transfers not hiding properly. Fixed exceptions when A-connecting Mass Flow Conveyors. FlexSim 25.0.5 (April 14, 2025) Added support for Python 3.12 connections. Fixed a templating issue with containers. Fixed an issue with the License Server Disconnection message. Added Container object to the Search panel in Properties. Updated SketchUp importer to support 2025 .skp files and earlier. Included fixes listed in 24.0.10 below. Conveyor Fixed an issue with items transferring between conveyors and elevators. Omniverse Fixed issues with renaming SimObjects and USD Prims. Improved how USD Stage handles animation offsets. People Fixed an issue with Waiting Line creation causing exceptions. FlexSim 25.0.4 (March 14, 2025) Added BasicFR and BasicTE back into the Library under Advanced. Fixed an issue with the Compile Entire Session operation. Fixed an issue with disconnecting and reconnecting module DLLs. Fixed an issue which caused exceptions during license activation. Fixed an exception on Shift/Ctrl-drag in tree view. Fixed an issue with the Experimenter and Optimizer ending runs prematurely. FlexSim 25.0.3 (March 5, 2025) Fixed the Upgrade Now button on the start page. Fixed Ctrl+F in the 3D view. Fixed exceptions when clicking the Container in the library. Fixed issues with the Object Creation panel. Fixed issues with the Event Log exporting time values to csv. Fixed meshes moving every frame when using the headless webserver. Included fixes listed in 24.0.9 below. AGV Fixed Join Paths creating curved path set to 'Straight' class. Fixed AGVs jumping due to kinematics initilization issues. FlexSim 25.0.2 (January 17, 2025) Included fixes listed in 24.0.8 below. AGV Fixed moire shadows apearing when shift-clicking AGV paths. A* Fixed Grids being unselectable on creation. Omniverse Fixed an issue with deleting FlexSim objects from a USD file. Fixed an issue with conveyor meshes showing in USD. FlexSim 25.0.1 (December 18, 2024) Fixed a formatting bug which caused the month to be off by one. Updated references to the BasicFR and BasicTE. A* Fixed an issue with the A* Grid automatic resizing. FlexSim 25.0.0 (December 11, 2024) Added Container objects. Added View Task Sequence Queue right-click option. Added ability to fast-forward to an event in the Event List. Added Dark Mode support for combo boxes, MSTreeView and other windows. Added Utilization By Hour chart template. Added Vec4 and Mat4 to the FlexScript API. Added C# Connector . Removed BasicFR and BasicTE from displaying in the Library. Objects using these classes will still work properly. Included fixes listed in 24.2.3 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Added a security warning when loading 3rd party assemblies. Omniverse Added ability to write timestamped animation data to USD files. Other updates to the FlexScript USD API. FlexSim 24.2.3 (December 15, 2024) Fixed a bug with the Event Log end time. Fixed bugs with the Empirical Distribution UI. Included fixes listed in 24.0.7 below. Process Flow Fixed issue with the Properties panel not updating correctly when dragging out activities. FlexSim 24.2.2 (October 9, 2024) Fixed undo capabilities in Empirical Distribution parameters. Fixed a bug with Event Log filters. Fixed a bug with blank Event Logs. Included fixes listed in 24.0.6 below. FlexSim 24.2.1 (August 17, 2024) Fixed incorrect Prediction Error in Curve Fitter fits. Included fixes listed in 24.0.5 below. FlexSim 24.2.0 (August 5, 2024) Added Curve Fitter to Empirical Distribution. Updated the Event Log and Event List to be a table view. Added the ability to filter all Event List columns. Fixed exceptions when adding a Person component to an object. Included fixes listed in 24.1.1 below. A* Updated the A* Grid to be an object data type. Improved Grid resizing and manipulation capabilities. Added templating and inheritance capabilities to A* Grids. Emulation Emulation has been separated from the standard FlexSim installer and is now an independent module. Process Flow Added Breakpoints to Process Flow activities. Added End Speed field to Travel activities. FlexSim 24.1.1 (June 24, 2024) Included fixes listed in 24.0.4 below. A* Fixed ability to add objects to the A* Navigator by A-connecting from the object to an A* Grid. FlexSim 24.1.0 (April 8, 2024) Added line number information to FlexScript exceptions. Added Object Creation Properties panel that lets you copy properties from another object when creating new objects. Updated Event Log to use a database file instead of holding all its data in memory. Added headless webserver streaming. Added Search Properties panel that replaces the Find Objects view. Added Center in View and Select Object buttons to List Entry and Backorder views. Improved performance of Properties window. Improved performance of windowing system. Improved Empirical Distribution object. AGV Added an optional third origin array parameter to getCost() that lets the user say whether the AGV is oriented path-backwards on the origin control point. A* Updated A* objects so that A-connecting an object to any of them adds the object as a member of the A* navigator. Removed A* navigator 3D shape. Conveyor Fixed an issue with re-sending conveyor items. Emulation Added capability to OPC UA Protocol to handle arrays. Can read a whole array or single element and can write a whole array or single element, if supported by the server. Added Slave ID support for Modbus TCP/IPv4 and TCP/IPv6 connections. Omniverse Added an API to programmatically read/write usd prim properties. Fixed TE movement when in live session. Process Flow Added Always Stack Tokens checkbox to Process Flow properties. Updated themes to not change connector types or draw styles when applied. Updated user library flows and activity sets to use the flow's theme. FlexSim 24.0.10 (April 14, 2025) Fixed excessive Calculated Table exceptions for bad queries. Fixed issues with loading DLLs with non-ASCII paths. AGV Fixed an issue with getCost() with routing constraints. Conveyor Fixed default code for photoeye triggers OnCover and OnBlock. FlexSim 24.0.9 (March 5, 2025) Fixed webserver dashboards not rendering when the model is stopped. Fixed importing DXF files for model backgrounds. Fixed dark theme for 3D view in FlowItem Bin. Fixed issue with dropuserlibraryobject() causing exceptions during an experiment. Fixed progress bar colors in dark mode. Fixed an issue with SQL MAX query incorrectly returning zero when using only negative values. Fixed an issue with bundle type label causing model corruption. AGV Fixed an issue with AGVs ignoring conditional rules. Fixed an issue with Control Area sizing on creation. A* Fixed an issue with allocation release time when travelers become blocked. Conveyor Fixed S-connections not being made from ExitTransfers to TaskExecuters. GIS Fixed an issue with GIS Map painting onto the 3D view border. Omniverse Improved import/export process for conveyor prims. People Fixed issue with staff rotation when entering multilocations. Process Flow Fixed properties panel UI issues for some charts. FlexSim 24.0.8 (January 17, 2025) AGV Fixed an issue with accumulating paths. A* Fixed repeatability issue with Right Angles Only option. Omniverse Fixed flowitems not saving in USD stages properly. FlexSim 24.0.7 (December 15, 2024) Updated Working Mode to show names only as the default Name Style. Fixed exceptions from sampler when hovering over Model Floor in the Toolbox. Fixed an issue with macros not highlighting. Fixed issues with table element logic causing crashes. Fixed an issue with importing .ifc files that have unicode characters in the path. Fixed box plots sometimes falsely showing a zero data point. Fixed a floating point precision error with vectors. Fixed a bug with adding tables and metrics to calculated tables. Fixed a bug with database table names. Fixed an issue with line width scaling. AGV Fixed an issue with scrolling while a Control Area is selected. Fixed AGVs attaching trailers across accumulating paths. Fixed an issue with vertical AGV paths not connecting. Fixed Delete and Copy out Members not copying travel offset. Fixed an issue with AGVs traveling into infinity. Fixed an exception when building travel paths. Conveyor Fixed a bug where Mass Flow Conveyors with a flow rate of 0 would throw exceptions. Process Flow Fixed an issue with the Find Item query field not updating when using token labels. FlexSim 24.0.6 (October 9, 2024) Fixed sampler in the Motor properties panel of the Mass Flow Conveyor. Fixed an issue with Pull from List. Fixed an issue with queries with no SELECT statement. AGV Fixed issue with AGV path orientation being ignored. FlexSim 24.0.5 (August 17, 2024) Fixed crash when debugging large numbers. Fixed exception with getsdtvalue() when the value is null. Fixed Quick Library exception when People library was excluded. Improved performance of Experimenter Scenario table with lots of scenarios. Added a way to send json text with httpsendreply. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Removed ExpertFit. Agent Fixed an exception when traveling to an object as the Travel Destination in a Social Force System. A* Fixed traveler location when using Elevator and Navigator for offset travel. Fixed undoing changes in the Divider points list. Conveyor Fixed incorrect accumulation when changing UpstreamOutputOrder of Mass Flow Conveyor. Fixed Photo Eyes not firing correctly on Mass Flow Conveyors in some cases. Process Flow Fixed an exception when waiting for an OnLabelValueChange event. FlexSim 24.0.4 (June 22, 2024) Fixed exceptions when adding a Person component to an object. AGV Fixed issue with AGV acceleration values for different model units. Fixed issue with decoupling trains. Conveyor Fixed an issue with Mass Flow Conveyor output being blocked. Fixed logic for connecting from Decision Points to Entry/Exit Transfers. Emulation Fixed issue with MQTT payloads not being null terminated. GIS Increased the number of routes that can be made from each point. Omniverse Fixed a bug that occurred when trying to leave a live session which had flowitems in it. Fixed scaling for models with larger units. FlexSim 24.0.3 (April 8, 2024) Fixed bug in getkinematics command. Fixed bug with the default page loading incorrectly. Fixed bug with Transporter Travel To Loc task. Fixed bug with exporting all Dashboards to HTML. Fixed bug with isVirtual property compiling. Removed Python 3.7 and 3.8 connectors. Included fixes listed in 23.0.15 below. AGV Fixed bug with AGV not following orientation constraints. A* Fixed bug with Elevator kinematics causing teleporting behavior. Conveyor Fixed issue with crossing conveyors sending items. Fixed issue with items traveling off conveyors. Fixed bug where items glitch during transfer from conveyor to elevator. Fixed bug with MFC connection removal in visual tool. Omniverse Fixed bug with renaming prims and simObjects. FlexSim 24.0.2 (January 22, 2024) Reverted some optimizations to the Properties window that caused the window to not display properly in some cases, like when stopped on a breakpoint. Fixed optimal solution points being obscured by non-optimal points in the Optimizer Results window. Fixed a bug with Pull from list triggers that await with unique backorders. A* Fixed A* navigator not drawing a circle under inactive travelers. GIS Fixed undoing the creation of GIS points. FlexSim 24.0.1 (December 18, 2023) Fixed exceptions when adding some charts in the General library section. Fixed Paint Slot Labels properties panel not displaying correctly. Fixed error when saving a model with blank pointer data in a bundle table. Included fixes listed in 23.0.14 below. FlexSim 24.0.0 (December 6, 2023) Added ability to define Experimenter Filters to display subsets of Scenario results. Added ability to define and switch workspaces. Added Array.sort() method. Added support for importing .glTF and .glb files Added MQTT.Client and MQTT.Message FlexScript classes. Added Randomize and Copy to Selected buttons to the Person Visuals Properties panel. Added a popup that shows the parameter values of the scenario in the Performance Measure box plot. Added Average, Min, and Max columns to the Content chart. Improved save model prompt to not show when the model has not been changed since the last save. Updated changepersonvisuals() to take shape names in addition to indices. Updated sampler to show flow item access by path instead of just 'item'. Fixed level and kinetic level Tracked Variables. Fixed video streaming to the webserver and allowed setting the video bitrate. Changed the directory for Chromium temporary files from FlexSim's app data to the user's app data. Fixed OnDestroy being called twice on deleted nodes. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed imported values of Specular, SpecularFactor, and Shininess from FBX shapes. AGV Added ability to integrate Control Areas into A* networks. Added ability to programmatically allocate and deallocate a control area. Emulation Added support for Mitsubishi PLC using MC protocol. Added support for connecting to an MQTT Broker. Omniverse Updated USD Stages to create simulation objects from prim data when loaded. Saving or reloading USD Stages will now automatically update prim associations for contained simulation objects. Added support for exporting lines and points to USD. Improved exporting meshes with certain configurations. Process Flow Added tokenIndex to Date Time Source label value fields. FlexSim 23.2.3 (December 5, 2023) Fixed custom parameters not working. Included fixes listed in 23.0.13 below. FlexSim 23.2.2 (October 27, 2023) Fixed recording Dashboards with the Video Recorder. Fixed the Video Recorder progress bar display. Included fixes listed in 23.0.12 below. A* Fixed crash when travel path has multiple traversals of the same cell. Fixed issue with Robots stopping when continuing. Conveyor Fixed Mass Flow Transfers not scaling correctly with model units. Omniverse Fixed a crash when using Omniverse Live Mode. Fixed USD export transform issues for certain skeletal animations. Fixed conveyor transforms in USD Stages. Fixed exporting drawsurrogate shapes in USD Stage objects. Fixed USD export shape offsets when using frames. FlexSim 23.2.1 (September 8, 2023) Included fixes listed in 23.0.11 below. FlexSim 23.2.0 (August 7, 2023) Added an Omniverse module with support for USD (Universal Scene Description) . Added support for Python 3.11 connections. Added ability to export a restricted model. Updated status bar to show full path of selected object. Added a duplicate button to Parameter and Performance Measure Tables. Added Delay.realTime() method. Added Database.ResultSet.getFieldName() method. Added CSV export for Experimenter Dashboard data. Improved speed of generating experiment results. Updated 3D Text font to use global preferences instead of always preferring Arial Unicode MS if available. Added ability to remove multiple Property Table columns at a time. Added warning for when Storage System Address Scheme is missing a separator after non-fixed-length elements. Set \"Values Only\" as the default in Excel import. Added Flowitem Bin to toolbar. Added continueaggregatedundo() command. Removed unique column name constraint for bundles. Fixed undoing templated label changes. Fixed the LIMIT clause for Storage System slot/item queries. Fixed incorrect highlighting and selecting of Network Node edges. A* Updated Transporter fork lifts to move during A* offset travel. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Added support for acceleration and deceleration for A* travelers. This required a significant refactor of the logic under the hood. Things to be aware of: We added an update script that will set to zero the acceleration and deceleration of all task executers attached to the A* navigator. This means that most statically attached task executers should work generally the same as they did before, although the refactoring extended into the collision avoidance scheme (incorrect timings were fixed), so there may be slight differences in how the objects avoid each other. Our update script does not cover objects in the flow item bin, so if you create objects from the flow item bin that use the A* network, they will likely have nonzero acceleration and deceleration, and thus will behave differently now. Set those properties to zero, and they should behave more closely to the way they behaved in older models. The Create Person activity automatically sets these properties to zero when it attaches a person to the A* network. A* no longer supports doing te-logic offset travel with nonzero deceleration because early task finishing causes potentially incorrect travel paths (through barriers). Either use zero deceleration, in which case they will always travel all the way to the destination point before offsetting, or make them use A* for offset travel, in which case they'll properly build the new offset path using A* barriers from the shortened destination point. See A* - Acceleration / Deceleration for more information Conveyor Added Rise property. Omniverse Added support for importing 3D shapes in usd format. Added an Omniverse Connector tool for exporting model geometry and object properties to USD. Added a USD Stage object enabling bi-directional collaborative editing of usd stages. Process Flow Added a Breathe activity. Added support for Arrays in Batch's Group By field and Join/Synchronize's Partition ID fields. Added an INDEX option to the Label Aggregation of the Batch Activity. FlexSim 23.1.4 (August 7, 2023) Fixed a performance issue with loading 3D media. Updated pallet stacking method to resize empty pallets back to the initial Z size. Added update script to add pallet stacking method to flowitem bin. Included fixes listed in 23.0.10 below. FlexSim 23.1.3 (June 26, 2023) Fixed crash when double clicking twice in to bring up a Quick Library. Included fixes listed in 23.0.9 below. Conveyor Fixed Conveyor Transfers so they function correctly after switching which side they're on. FlexSim 23.1.2 (May 11, 2023) Fixed pinning some stats to dashboards. Fixed backwards sorting in Table Validation pickoptions. Fixed Table Validation help button links. Included fixes listed in 23.0.8 below. FlexSim 23.1.1 (April 5, 2023) Included fixes listed in 23.0.7 below. FlexSim 23.1.0 (April 3, 2023) Added Pallet Stacking packing method that sizes the pallet to encompass its contents. Added a Table Validation tool and Table Validation API . Added XML API . Added new Workbench Processor shape. Made popups resizable from the left. Updated SQL to allow Arrays as $ table parameters. Added MAP and MAP_AGG functions to SQL. Updated shape dropdown in Visuals Properties panel with a more useful list of shapes. Fix memory leak with pointer data type deletion. Fixed template connection deletion undo. Fixed tree panning in pixel scaled displays. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated treenode.getPath() to return \".\" if relativeTo is the same node and treenode.find(\".\") to return that same node. Conveyor Added Width Rules for Mass Flow Conveyors , including: A virtual width where the user can manually define the width of the conveyor. Number of lanes where the user can define how many bottling lanes wide the conveyor. Single lane where the user defines a spacing between bottles. Single lane where the user defines an 'air gap' between bottles. Added a Mass Flow Transfer object that acts as a pass-through, as if the conveyors were snapped together. Added red signal lines to Mass Flow Conveyors to indicate small chunks that are too small to draw a single unit. Added Randomized fill order to flow units. Added a flow rate calculator popup for calculating width and speed based on flow rates. Fixed an issue where not enough bottles were drawn at low densities. Fixed bug with negative event creation times. Process Flow Added ability to create connectors by A-connecting activities and containers. FlexSim 23.0.15 Fixed bug with sizing console title bars. Fixed the use of strings in animations arrays. Fixed running the experimenter with no GUI. Fixed issue with Tagged Resource performing an invalid downcast. Fixed Multiprocessor showing incorrect Process Dispatcher picklist options. Fixed tooltips about Excel import headers. Fixed bug with Scale Contents checkbox. Fixed bug when exporting Excel sheets with long names. Fixed sampling objects without English letters in the name. Fixed some popup dropdowns showing item.Type instead of \"Type\". Fixed Plane textures not updating. Fixed bug with overriding size on new template instances. Fixed Queue not setting item locations after warmup time. Fixed Combiners not showing connection names on c/v click. Updated Send Message trigger to use variants. Process Flow Fixed bug with invalid node checking in the sink. FlexSim 23.0.14 (December 18, 2023) Fixed lists of labels or triggers sometimes not being visible. Fixed exceptions with performance measures that aren't a number or null. AGV Fixed a situation where an AGV incorrectly got an infinite traversal distance. Process Flow Fixed freeze when opening a Zone Status window. Fixed a crash when adding certain Create Agent pickoptions. FlexSim 23.0.13 (December 5, 2023) Fixed bug with legacy Custom Chart in experimenter. Fixed bug with Travel Distance chart's length combo box. Fixed State Gantt chart warmup bug. Fixed bug with exported HTML of bar charts. Fixed user library objects with a reset position removing themselves on reset. Fixed exception when exporting Optimizer to Experiment. Fixed path issues with excelsave(). Fixed a crash caused when a bundle TableView's viewFocus becomes null. Fixed scenario table bugs with parameter names with unusual characters. AGV Fixed issue with control points at path intersections. Fixed exception issue with Navigator.getCost(). Conveyor Fixed adding conveyors attached to a process flow to a user library. Process Flow Fixed system console not opening to display non-existant label exceptions when evaluating token references. Fixed user library objects attached to an object flow making instances in the user library. Fixed exceptions when listening to events on an empty group. Fixed crash when removing instance in that instance's instanced view. FlexSim 23.0.12 (October 27, 2023) Fixed Floor Storage visualization. Fixed accessing parameters by name after changing a parameter's name. Fixed Ports panel add button not showing all objects. Fixed template popups being read only. Fixed issues with optimizer chart axes. Fixed optimizer export to csv with sequence parameters. Fixed a drawfont() initialization bug. AGV Fixed an issue where an AGV would not move on certain path configuations. Conveyor Fixed an issue when setting the GenerativeFlowRate property on reset. Fixed saving Mass Flow Conveyors with Decision Points to user libraries. Fixed bug with transfer speed property. Process Flow Fixed Process Flow toolbar menu not correctly handling empty folders. Added a check that the activity exists to pickoptions that get all tokens in an activity. FlexSim 23.0.11 (September 8, 2023) Fixed Experiment replications sometimes not finishing. Fixed State Tables created from state charts not having the full list of default states. Fixed state charts not using State Tables by default. Fixed certain keys incorrectly entering a table cell edit. Fixed excelrangewrite() to handle wide characters. Fixed RegExResult.getMatchIndex() so it actually returns an array. Fixed comments in code headers sometimes being added to list of header variables in popup dropdowns. Fixed Experiment.PerformanceMeasures table returning the wrong number of rows. Fixed Traffic Controller connection lines being unselectable. Fixed exceptions after deleting the last flowitem in the FlowItem Bin. Fixed splitter sizing the main window with DPI scaling. Made Parameters and Performance Measure table popups horizontally resizable. Added Kinetic Level type to options to create Tracked Variables. AGV Fixed incorrect AllocationCount stats. Fixed transfers sometimes not being created after refreshing path links. Fixed a navigation error when offset traveling from a control point on top of an intersection. Fixed a bug with defining orientation constraints. Fixed AGVs not properly being recognized as leaving an accumulating path when using destination offsets. Conveyor Fixed Merge Controller connection lines being unselectable. Fixed Motor connection lines being unselectable. Process Flow Fixed a bug with All Objects references in the Finish Kinematics activity. Fixed sampling activities in an Object flow from a Wait for Event activity in a General flow. Fixed arrays not being allowed in Move Object's object field. FlexSim 23.0.10 (August 7, 2023) Fixed Robots not working after hiding then showing its floor. Fixed scrollbar not showing for editable comobox dropdown lists. Fixed exception when viewing a Calculated Table's result table that joins data from other Calculated Tables. Fixed bug with unresponsive sankey chart. Fixed disappearing star icon in optimizer. Fixed Parameter Table option combobox not appearing. Fixed Property Table exception for string labels with short names. Updated Flowitem event code headers to properly set parameters. Improved error messages for slot-assign-then-delete. AGV Fixed issue with pre-arrival not firing. Fixed an infinite loop issue. Fixed a floating point precision error that sometimes caused an exception when arriving at a control point. Fixed a crash when doing a large number of loads or unloads in 0 time. A* Fixed allocations not drawing at correct Z height. Conveyor Fixed issue with photo eyes missing mass flow speed changes. Process Flow Fixed performance issue with Apply Kinematics activity. Fixed exception with Text object's custom date time format. FlexSim 23.0.9 (June 26, 2023) Fixed Properties panels sometimes opening blank when expanded. Fixed bug with evaluating Statistics Collector column code. Fixed Toolbox filtering of singleton tools. Fixed Shape Offsets edit fields not repainting the 3D view. Fixed up/down arrows not graying correctly for Parameter/PFM tables. Fixed updatelocations() to work with the Default Navigator and DefaultNetworkNavigator during offset travel. Fixed Paint Slot Label edit field to correctly handle strings containing '0.0'. Fixed Parameter Table's Reference sampler to allow sampling objects even if they don't have labels or properties. AGV Fixed distancetotravel() incorrectly returning an infinite value in some cases. Conveyor Fixed stoppedItem variable of DPs and PEs never being cleared. People Fixed exception when clicking MultiLocation's Acquire As Single Unit checkbox. Fixed returning Equipment/Transports to reset positions in a container. Process Flow Fixed Source icons not updating after undoing. Fixed an exception when adding an Object Process Flow to a user library with auto-install components. Fixed exceptions when using the 'table' parameter in 'Write to Global Table' popup. Fixed exception in the Create Kinematics header. Fixed exception that was seen sometimes after deleting a Create Kinematics activity. Fixed tooltip display on DPI scaled displays. FlexSim 23.0.8 (May 11, 2023) Fixed bug with time plot scroll. Fixed resizing objects with subcomponents using the Visuals panel of Properties. Fixed sampling shape paths from the 3D library. Fixed Toolbox not showing singleton tools when filtering. AGV Fixed some issues with incorrect routing and control point allocation. Process Flow Improved performance of attaching object flow instances. Fixed bugs with selecting stats in Zone charts. FlexSim 23.0.7 (April 5, 2023) Fixed some panels being scrollable with the mouse wheel when no scroll bar is present. Fixed entering mathematical formulas in various fields. Fixed exception in loadToUnloadDistance field of Task Sequence lists. Fixed State Tables being created for each state chart pinned. Fixed sampling of state profiles from State Tables. AGV Fixed bug where OnPreArrival triggers would not fire after a preempt. Fixed routing turnaround issue. Conveyor Fixed exceptions in OnClear/OnUncover triggers when there is no item. Process Flow Fixed arrays not being allowed in Batch Group By field of Batch activity. FlexSim 23.0.6 (March 31, 2023) Fixed exception when using the Delete and Copy parameter pickoptions with an AGV Network traveler. Fixed Query Builder not escaping SQL keywords, it now escapes all identifiers. Fixed TaskSequence.addTask(TASKTYPE_UTILIZE) not setting the Task Executer's state to 'utilized'. Fixed exception when clicking the gray rectangle in a range-based job parameter table. Fixed y and z rotation values being switched when exporting a 3D shape's mesh hierarchy. Fixed experimenter database file not correctly declaring its column data types for export. Fixed a WebGL draw glitch with misconfigured shape data overrides. Fixed State Gantt chart not working with BasicTEs. Included fixes listed in 22.0.15 below. AGV Fixed routing algorithm not correctly using the AGV's orientation when the reverse speed is different than the forward speed. Fixed stop-and-rotate allocation timing. Fixed issues with attaching trailers that extend past the end of an accumulating path. Fixed issues with AGVs not keeping orientation after offset traveling off a path. Fixed redirecting an AGV so that its path/agv offsets are reset to 0. Fixed behavior of offsets that go off the end of a path. Fixed an issue with deallocating points after preemption. Fixed deallocation distances after preemption. Fixed issues attaching control points in the air. Process Flow Fixed a bug in the Zone stats chart UI. FlexSim 23.0.5 (March 14, 2023) Fixed exceptions with Scenario Charts. Fixed various popups expanding off the bottom of the screen. Included fixes listed in 22.0.14 below. AGV Fixed control area deallocation issue. Fixed issue with refreshing path links on reset. Fixed issue with orientation constraints. Added better information display for routing data. Fixed issue with weird routing turnarounds. FlexSim 23.0.4 (February 28, 2023) Fixed Transporter load position in models with non-meter model units. Fixed a crash in clientreceive() when called from FlexScript with a limited buffersize. Fixed exception with backOrder::toString(). Included fixes listed in 22.0.13 below. AGV Fixed path building infinite loop issue. Fixed A* heurisitic calculator. Fixed AGV Navigator getCost() method not working when passed a treenode as the second parameter. Process Flow Fixed an issue introduced in 23.0.3 that caused models to run inconsistently when run at high speeds. FlexSim 23.0.3 (January 31, 2023) Improved Delete and Copy parameter pickoptions to better work with reset positions. Fixed issue with Reinforcement Learning improperly resetting the model. Fixed 'G' key not working with caps lock. Included fixes listed in 22.0.12 below. Bonsai Fixed bug with FlexSim getting stuck during training. FlexSim 23.0.2 (January 17, 2023) Fixed a crash with DWGs that have No Select unchecked. Fixed a memory leak with Maps in FlexScript. Fixed a memory leak when deleting pointer data. Fixed a bug with pointer labels. Bonsai Fixed unnecessary files being uploaded to Bonsai managed simulators. FlexSim 23.0.1 (December 21, 2022) Fixed some Fixed Resource properties always returning 0. Included fixes listed in 22.0.11 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Improved RNG initialization speed for high replications - For replications higher than 1024, random number streams are now initialized much faster but will produce different results. Replications 1024 and under are unaffected. Bonsai Increased range of possible reset seed values. GIS Fixed object path positioning. Process Flow Fixed existing object labels not being added to an Object flow's instanced labels cache when attaching. FlexSim 23.0.0 (December 5, 2022) Added ability to export a model as a Bonsai managed simulator . Added ability to use an instance of FlexSim as a Bonsai unmanaged simulator . Added a stacking method for Transporters. Added an option to remember the application's window placement when opening. Added an Edit Mode to Parameter Tables. Added more parameters to various OnSlot... events to improve selectively listening to certain slot events. Added Navigator.getCost() API. Added Table.getColNum() and Table.getRowNum() which can be used to check that a row or column with a given name exists. Added optional parameters for setting separators used by importtable() and exporttable() . Added flags parameter to Object.getProperty() . Added keyboard shortcut \"G\" to toggle showing the manipulation orb in the 3D view. Added keyboard shortcut \"Ctrl + /\" for multiline comments. Added a Toolbox icon to indicate when a tool has been disabled. Added middle click to close beveled tab views. Added tooltips to beveled tab views. Added list of Color Palettes to dropdowns in various set color popups. Added Proxy Details to License Activation window. Updated Video Recorder to ignore model stop times and restore run speed. Updated parameters to allow them to set other parameters during reset. Improved performance of gantt charts and optimizer chart and memory usage of several other charts. Fixed issue where Quick Library views would not automatically close after double clicking multiple times. Fixed getting namespaced properties in an SQL query. Fixed is() method not working for some types. Fixed inheriting pointer labels from a template object. Fixed Reinforcement Learning tool not being able to listen to Groups. Fixed applying properties with non-model units to selected objects. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed issue with slot labels not being remembered. If you set a slot label in FlexScript, and the script execution is not part of a simulation run (e.g. through a dashboard button, auto-build, executing script manually, etc.), then it will save that label value as its 'reset' label value, so that when you reset the model, it will stay at / go back to that value. Previously, labels that were set in script would be reset to nothing on reset. Updated Table() constructor to correctly handle GlobalTable nodes. Previously, passing a GlobalTable node into the constructor would not correctly use its data variable as the table node and would instead use the Object node itself. Removed Separator renaming split items. AGV Added user-customizable deadlock recovery. Added parameters to the OnAllocationFailed trigger that lets the user know if the allocation request represents a deadlock, as well as an array that is the deadlock cycle. The user can thus implement logic if the allocation failure is a deadlock, and return 1 to tell the system that the deadlock has been handled. New features for AMR simulation: Added an OnNavigationFailed trigger that is fired when the AGV can't resolve a valid path to a destination. This is to give the user the ability to handle the error. Returning 1 means try again, returning 2 means end the task. Added parameters to the Custom Path Cost : a forward/backward boolean and a reference to the AGV if there is one. Added AGV.traversalPoints property and AGV.TraversalPoint class. Made AGV.AllocationPoint.stopDist writable. Added AGV.stopRecharge() and AGV.addAllocationPoint() methods. Added OnBuildTravelPath event. Improved routing accessibility mode to be more informative. Improved performance of autobuilding AGV paths. Fixed exceptions after autobuilding AGV objects. Fixed issue with Control Point lock location. Fixed name numbering of Control Points dragged onto a path. A* Allowed A* grids Z height to be negative. Conveyor Fixed name numbering of Decision Points. Fixed exceptions on FR Transfer that hasn't released an item. Emulation Added support for additional protocols: Beckhoff, S7, and PLCSIM Advanced. Improved OPC UA connections with support for polling control variables and group writing of sensor variables. Using Emulation connections now requires an Emulation license. Modbus and OPC DA connections will work without an additional license. Fixed Modbus bugs and improved its error handling. GIS Added geocoding queries to Map and Point property panels. People Fixed elevator issues for elevator banks at non-0 Z locations. Process Flow Added Connector By Time pickoption to the Decide activity. Made activity properties windows resizable in all directions. Added labels defined on instance objects to autocomplete and instanced labels pickoptions. Removed logic that, when a new activity was added, would look at the last added activity and automatically create connections or create labels. FlexSim 22.2.4 (December 5, 2022) Fixed Properties not updating after adding new flowitem to bin. Fixed tree view context menu in dark mode. Included fixes listed in 22.0.10 below. Process Flow Fixed embedding of images in Process Flow views. FlexSim 22.2.3 (November 7, 2022) Fixed autocomplete for Model.parameters. in Properties fields. Fixed JSON parsing for non-object/array values. Included fixes listed in 22.0.9 below. FlexSim 22.2.2 (September 13, 2022) Fixed bug with Delete and Copy parameter pickoptions and Time Table / MTBF membership. Included fixes listed in 22.0.8 below. FlexSim 22.2.1 (August 23, 2022) Fixed color picking when Nvidia overrides anti-aliasing. Fixed dwg selection issues. Fixed the Import Preferences button. Included fixes listed in 22.0.7 below. AGV Fixed paths with their own meshes not following the AGVNavigator's path draw mode. Fixed issues with routing cost calculation given rotation. Fixed issue with AGV.RoutingConstraint.PassThroughBlocked. Fixed issues with lookahead timing on stop-and-rotate. Fixed initial stop distance. Fixed calculating transfer angles for paths inside rotated containers. Fixed PassThroughBlock rule so that it checks if the previous point is on top of the transfer. Fixed calculations for proximity and pre-arrival times so that they ignore rotation kinematics. FlexSim 22.2.0 (August 2, 2022) Added Tools.create() method for creating tool objects and Tools.get() method for getting references to tool objects. Added Object.create() method for creating library objects and treenode.copy() method for creating copies of treenodes. Updated SketchUp importer to support importing 2022 .skp files and earlier. Added Bonsai space type for Reinforcement Learning. Added Custom parameter type. Added X,Y,Z offsets for objects created by Delete and Copy parameter pickoptions. Updated Labels properties panel to auto-save reset labels whenever changes are made in that panel. Updated By Case pickoptions to use Variants for the case value. Updated popups to list model parameters. Updated Time Tables and MTBF MTTRs so that a new copy of one of their members is also a member. Improved QueryBuilder identifier handling. Improved Dark Mode styling of several UI elements. Added support for adding characters with an IME. Improved performance of JSON.parse(). Removed saving of .fsm! files. Included fixes listed in 22.0.6 below. AGV Added a new Stop and Rotate feature that allows AGVs to stop and rotate on an intersection. As part of this change: Updated Control Points to be able to attach to multiple paths, i.e. at a transfer between two paths. Create Transfers at Crossing checkbox that allows you to create transfers at straight path crossings. New settings on the AGV type: RotateThreshold and Rotation Speed in the speed table. Added several new classes: AGV.TravelPathSection AGV.AllocationPoint AGV.AllocatableObject AGV.Request Added several new properties to the AGV class: AGV.allocationPoints AGV.currentTravelDist AGV.currentTravelPathSection AGV.resetCP AGV.travelPath Added OnRequest trigger for Control Points and Control Areas. Added an ability to define dynamic barriers in AGV networks using AGV.AllocatableObject . routingConstraint . Updated showing/locking floors to better work with AGV objects. GIS Added a Freight Railways server. Added option to specify custom routing server URLs. People Updated Location Properties panel to apply shape change to all selected objects. Updated Staff flow to use an Idle Location variable so staff can, for example, sit at a desk while idle. Process Flow Updated Source arrival tables to better display FlexScript. FlexSim 22.1.4 (August 24, 2022) Included fixes listed in 22.0.6 and 22.0.7 below. FlexSim 22.1.3 (July 8, 2022) Updated environment application title to use full year string (with Update X). Included fixes listed in 22.0.5 below. FlexSim 22.1.2 (May 18, 2022) Fixed exception when putting breakpoints in code with call to Table.query(). Fixed external code connections in experiment children. Included fixes listed in 22.0.4 below. Process Flow Fixed exceptions when token entered Custom Code activity from some other activities like Exit Zone. FlexSim 22.1.1 (April 19, 2022) Fixed bug with range-based job locking a floor. Fixed an exception when a rack visualization reference isn't set. Included fixes listed in 22.0.3 below. People Fixed Walls not working with Floors Properties panel. FlexSim 22.1.0 (April 4, 2022) Added a Python connector. Implemented Coroutines in FlexScript. Added Range-based Experimenter Job . Added a Floors Properties panel for showing/hiding and locking objects at different floors (Z heights) for easier multi-floor modeling. Updated Parameters API . Added a Performance Measures API . Improved Crane frame sizers and added a FrameSize property. Improved ASRSvehicle rail sizers. Added an OnSimulationStart event. Enable pasting data into webserver tables. Changed the Property Table button on Properties panels to open a temporary Property Table. Improved the User Libraries to Open on Startup section of Global Preferences. Added manipulation handles orb to Text objects. Added the ability to save binary t files as part of a xml file map. Note that pointer references that point into or out of a t file WILL NOT BE PRESERVED. So this should really only be used to save large chunks of non-reference data such as global tables. receiveitem() now returns 1 if successful in FlexScript. Added a headers property to Http.Request. Fixed the Puller field sampler in Test Queries Properties panel not being able to sample certain objects like AGV control points. New models no longer have the WorkInProgress and TimeInSystem Tracked Variables. Included fixes listed in 22.0.2 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated pdir(), cdir(), modeldir(), documentsdir(), programdatadir(), and userdatadir() commands to use forward slashes. Made applicationcommand(\"createnewgroup\") consistent with other commands that create new tools and now opens the Group window unless a 1 is passed as the second parameter. The 3D objects no longer update the WorkInProgress or TimeInSystem Tracked Variables. A* Updated grids and barriers to respect the switch_hideshape flag. Conveyor Added an arrow to distinguish entry transfers from exit transfers. Process Flow Added units button to various time fields. Removed scaling based on current zoom level when creating container objects. Made Custom Code activity await completion of a coroutine. Made the Process Flow Instances Properties panel a multi select list. FlexSim 22.0.16 (April 3, 2023) Fixed exceptions with Scenario Charts. FlexSim 22.0.15 (March 31, 2023) Fixed a crash when pasting label names into a code editor. Fixed undos not working when the Model Limit view was showing. Fixed string.trim() not returning the modified string. Fixed error after toggling some nodes as DLL/External nodes. Fixed issues when a Robot's Move Time was set to 0. Fixed removing an object's On Pre Draw trigger. Fixed undoability of several operations in the Edit Selected Objects view. Fixed building State Tables from custom state profiles. Fixed undo exception after clicking a pillar while creating Walls. Fixed appearance of some icons and other UI elements in Dark theme. A* Fixed Z height of barriers/dividers when created by clicking on another barrier. Process Flow Fixed crash when sampling a token with a long chain of pointer label references. The sampler now limits the list to a chain of 10 labels. FlexSim 22.0.14 (March 14, 2023) Fixed memory corruption issues when resetting in certain conditions. Fixed Properties name field resetting cursor position when entering text with IME input. Conveyor Fixed adding repeat conveyor visualizations to a user library. Process Flow Fixed bug in Batch Activity table view. FlexSim 22.0.13 (February 28, 2023) Fixed tree corruption issues involving the experimenter's sqlite database connection. AGV Fixed breathe activity in Advanced AGV template that had a non-0 delay time. Conveyor Fixed flowunit shape mesh colors. Fixed Mass Flow Entry Transfer blocking issue. Process Flow Fixed incorrect connector ranks after dragging connector over a container. FlexSim 22.0.12 (January 31, 2023) Fixed applying color to multiple objects in a Property Table. Fixed display text of the Empirical Distribution picklist. AGV Fixed some pre-arrival events being skipped. Removed scroll wheel changing Z location for curved AGV paths. Conveyor Fixed listening to the OnContentChange event of Mass Flow Conveyors. Fixed some draw issues of Mass Flow Conveyors. Fixed Mass Flow Conveyors using the wrong density when changing speeds. Fixed Mass Flow Conveyors not setting their state to empty appropriately. Fixed Mass Flow Conveyors getting stuck when nearly fully accumulated. People Fixed appearance of Properties window when first entering the Healthcare environment on some computers. Process Flow Fixed activities not updating which container they are inside when moving them with arrow keys. Fixed undo errors in Scheduled Source popout window. FlexSim 22.0.11 (December 21, 2022) Fixed a bug that could cause Performance Measure charts to freeze. Fixed an issue with Storage.Slot.hasSpace() when no 3rd stacking order was specified. Conveyor Fixed an undo exception after dropping a Decision Point onto a Mass Flow Conveyor. Fixed a rounding error in the Mass Flow Conveyor Exit Transfer. Fixed some draw errors in Mass Flow Conveyors. Fixed virtual length functionality for Mass Flow Conveyors. Fixed issue with Mass Flow Conveyor flow unit color. Fixed issues with drawing the wrong width on round bottles. Process Flow Fixed event-listening activities not correctly assigning the event object in some cases. FlexSim 22.0.10 (December 5, 2022) Fixed issues listening to kinetic Tracked Variables change events. Fixed autocomplete logic for deleting matching various quotes and braces. Fixed issue with undoing template instance creation. Fixed mstreeview context menu items not working. Fixed script console losing text when undocking neighboring console. Fixed bugs with Racks with Level Progression Z-. Fixed Rack's option to Mark Slots with Outbound Items. Fixed Properties scrollbars not resizing properly. Fixed Storage.Slot.hasSpace() incorrectly returning false. Fixed issue with very thin links in Sankey diagram. Fixed object's resetposition not being updated when setting a single component of location/rotation/size. Fixed the initial string of the Date and Time Display chart. Fixed libqp.dll errors when connecting to a PostgreSQL database. Fixed Presentation Builder button errors when no flypaths exist. Fixed errors in Find Objects view after refreshing lists. AGV Fixed listening to battery level events on dynamically created AGVs. Fixed issue with user customization delegate Conveyor Fixed issue with MassFlowConveyor stats not updating after warmup time. Fixed Gap Optimizing Merge Controller not respecting Max Slug Size. FlexSim 22.0.9 (November 7, 2022) Fixed assigning number data to cell with blank string. Fixed issues saving model with undocked Properties panel. Fixed exception when creating new template instance of an operator. Fixed Statistics Collector row labels being lost in some cases. Fixed slow Optimizer performance. Fixed Optimizer issue exporting sequence parameters to experiment. Fixed bug with PFM correlation plots. Fixed adding Fluid object connections with Ports Properties panel. Updated If Item Label Changes pickoption to use Variants. Fixed GUI Builder controls having an extra windowtitle node. Fixed a Start Page bug that occurred in certain configurations. Fixed a crash when making an object its own template. Fixed saving and loading of empty arrays. A* Fixed totaltraveldist Stat decrementing when a TE has to wait for collision avoidance. AGV Fixed uneditable Speed table cells when adding new Load Type then Path Class. Conveyor Fixed issue setting EndLocation property of Straight Conveyors. People Fixed arriving travelers not respecting Elevator Bank max entries setting. Process Flow Updated DateTime Source to set its Calendar Start Time to the model start time when created. Fixed DateTime Source's Advanced table not displaying the correct dates in edit fields. Fixed issues with DateTime Sources that have their first arrival after the first model day. FlexSim 22.0.8 (September 13, 2022) Fixed Empirical Distribution not working for non-integer weights. Fixed exporting database columns with characters of more than 3 bytes. Fixed issue with default slot label values not working. Fixed exception when using Push Task Sequence to List pickoption. AGV Fixed distancetotravel() bug when getting distance only. Fixed control points not snapping to curved paths with certain specific start and sweep angles. Fixed invalid navigation error because travel path did not converge to a single point. Conveyor Fixed Mass Flow Entry and Exit Transfers not scaling size with model units. FlexSim 22.0.7 (August 22, 2022) Fixed Storage Object Dimensions popup for Property Tables. Fixed optimizer bug with sequence parameters. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated importtable() to always remove outer quotes from cell text. Previously, they were only removed if the text had a double quote, new line character, or list separator. AGV Fixed error getting the last trailer with Agv.getTrailer(). Conveyor Fixed an ExitTransfer bug with transporting out multiple ports when not stopping at end. FlexSim 22.0.6 (August 2, 2022) Fixed closing docked windows sometimes leaving blank space. Fixed crash with Drive-In Racks and Task Executers using AGV network offset travel. Fixed rack stacking of items with same size as slot. Fixed Kinetic Tracked Variables not respecting their lower/upper bounds. Fixed DateTime class not handling unicode strings correctly. Fixed Shape property not applying shape factors. Fixed draw issues for static text with custom viewbackgroundcolor. Fixed experimenter exceptions when using a runtime license. Fixed exceptions when entering a new line in FlexScript text areas of Model Documentation widget. Fixed Rack Dimensions Editor undo. Fixed removing relayed event triggers (like A* traveler triggers) in Triggers Properties panel. Fixed travel distance tracking for Elevators. Fixed Drive Through rack checkbox removing rack object. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed Task Executers not interpreting nullvar as 0 for certain task vars. AGV Fixed moving AGV paths into rotated containers with Edit Selected Objects. Fixed incorrect puller in Dropoff Point of Advanced AGV template flow. Fixed manipulation handles for Control Points reverting to defualt on reset. Fixed crash to now show an error message when the routing table is not resolved but the destination is not on the same path. Conveyor Fixed moving conveyors into rotated containers with Edit Selected Objects. Fixed conveyor Q disconnect logic. Fixed accumulation chain splitting on speed changes. Fixed errors when undoing after copying and pasting conveyors. People Fixed adding sublocations to MultiLocations in Express mode. Process Flow Fixed Ctrl+F and Ctrl+H keyboard shortcuts. Fixed Excel Sampling of Date Time Source. Fixed issues with Zone Status windows. Fixed Object Process Flows not getting icon from the object it was created from. FlexSim 22.0.5 (July 8, 2022) Fixed Oculus VR hands not working properly. Fixed intermittent crashes when opening FlexSim. Fixed item teleport bug with Drive-in Rack when using a navigator for offset travel. Fixed autocomplete suggesting class names that should be ruled out. Fixed thread safety issues in http requests. Updated Object.resetPosition to not throw an exception when cast to a boolean for an object that doesn't have a resetposition variable. Fixed exceptions when setting rank or datatype of a node Variant. Fixed an exception when a rack visualization reference isn't set. Improved QueryBuilder handling poor table names. Fixed Time Table calendar start time not accounting for model time units. Fix model input text not wrapping. Improve the positioning of checkbox labels on the webserver. Fixed static text alignment styles. Fixed pointers to the model displaying no text. A* Removed Z mouse wheel scrolling functionality for grids and dividers and their subclasses. Conveyor Fixed issue with items going the wrong direction with skew angle. Emulation Fixed small bug with Allen-Bradley protocol. GIS Improved stability of tile downloading. Increased the tile download request limit so tiles stream faster. People People chart QueryBuilder elements now update live. Replaced places hardcoded to start/stop the Stand animation with the user-defined IdleAnimation. Fixed a bug with custom filters on a people subset. Process Flow Fixed activity stats window not automatically showing stats of current instance. FlexSim 22.0.4 (May 18, 2022) Fixed a graphical glitch with tool panes on Windows 11. Fixed model layouts not updating reset positions of objects with that enabled. Fixed a crash in unloadimage(). Fixed html views not displaying local file urls properly. Fix bug in optimizer chart. AGV Updated AGV offset travel to just finish the travel operation instead of showing an error message if the user has not defined how the offset travel should be performed. A* Fixed A* Grids not correctly being set to the Grid Z height when added from the library. Conveyor Fixed issue with power and free initial speed being reset. Fixed error in default Catch Condition code header. GIS Fixed intermittent crashing by limiting how many tile requests are made simultaneously. People Fixed travelers not being able to use elevators when inside a container. Fixed exception adding new pickoption to OnPreempt field of Process activity. Fixed WaitingLine's getPlaceOffset not working correctly for travelers inside a container. Process Flow Fixed exception sampling for last acquired resource. FlexSim 22.0.3 (April 19, 2022) Fixed a crash when opening local command help. Fixed Database.DataType.Text not compiling. Fix exceptions with popup samplers in properties. Fixed setting custom background colors of static text controls. Fixed saving some multi-byte UTF-8 characters in fsx format. Improved Reinforcement Learning to handle reset if the model is running. Fixed a bug in Performance Measure replication histogram. AGV Fixed a bug with an arrival event being created too early when an agv is blocked at a transfer point and already allocated through a farther control point. Fixed exceptions with preempting. Process Flow Fixed exception in Variable's edit Variable drop down. FlexSim 22.0.2 (April 4, 2022) Fixed ASRS rail sizer drawing on the wrong side. Fixed ASRS rail moving when rotating in the 3D view. Fixed mouse wheel scrolling in parameters and performance measure tables. Improved crane frame sizers. Fixed the Code Snippet sampler replacing all code with sampled code. Fixed setting Parameters with dynamic properties. Fixed missing parameter in End of Replication trigger. Added a getter for the experimenter's current task. Fixed saving states in the experimenter database. Fixed bugs in experimenter socket communication. Fixed a bug where the experimenter wouldn't start if the model was saved during an experiment. Updated experimenter to cap console ouput at 100 MB. Fixed the background color of some controls when on transparent backgrounds like those in Windows 11. Fixed Empirical Distribution results for weights less than or equal to 0. Fixed dynamically updating warehousing visualizations. Fixed 3D text display of certain characters in particular fonts. Updated Group.addMember() and Group.removeMember() to apply changes to template instances. Fixed an exception in loading xml tree files from relative paths. Fixed string.search() when passing certain characters. Fixed experimenter's Export to CSV pickoption. Fixed experimenter triggers being deleted when deleting results file. Fixed an exception in OptQuest chart. Fixed a bug in the Item Trace Gantt chart. Fixed null value bugs in experiment charts. Fixed bugs in sankey diagram. Fixed experiment run results chart clipping in some cases. Fixed letters not working for Start Bay, Start Level, and Start Slot fields of AddressScheme properties panel. Fixed error when adding Full Bottle with Label flowitem. Fixed List's Initial Contents list not showing up-to-date object names. Fixed the loading media text on the webserver. Fixed single row tables having incorrect column datatype set in webserver. Fixed network path arrows draw selection. Fixed the Video Recorder samples combo box. Fixed help buttons to correctly show offline module documentation and to show online module documentation if local module manual files aren't installed. Fixed a memory leak in the Map class. Agent Fixed duplicating Agent Systems. AGV Fixed a crash with draw scale set to 0. Conveyor Fixed A connecting two mass flow conveyors creating a normal EntryTransfer and not a MassFlowEntryTransfer. Fixed dragging curved conveyor end sometimes forming a 'knot'. GIS Improved stability of GIS tile downloads. Fixed tile rendering at extremely close zoom levels. People Updated DownBehavior's State field to populate with list of staff states. Fixed utilization dashboard options QP panel getting stuck on Locations group list. Process Flow Fixed labels assigned in Event-triggered Source's table sometimes not being added to the labels cache. Fixed exceptions when adding a new milestone collector (or switching to a different collector) with no milestones defined. FlexSim 22.0.1 (January 21, 2022) Fixed a UI bug with renaming inherited labels. Made Table.sort() stable. Improved table sorting speed and fixed a crash. Fixed setting the objective aggregation of an optimization. Fixed an RTX Mode crash when using the video recorder. Changed the Visual Tool's custom draw code to use the alpha color component. Fixed the order of events in the MTBFMTTR picklist option \"Stop Object and Call Operators.\" Fixed an exception in the Reinforcement Learning window. Fixed the Reinforcement Learning Box space message format. Updated Box action spaces to normalize their range to [-1, 1]. Fixed list of color palettes for dashboards not updating often enough. Fixed Edit parameters button disappearing on MTBF MTTR window after changing units. Fixed setting multiple objects to a location/rotation/size of 0. Fixed Property Table popup not getting the correct value for some properties. Fixed Property Table popup not setting the unit value correctly. Fixed a bug with transparency in the view fog shader code. Included fixes listed in 21.0.10 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Table.sort() now uses the Variant comparison operators instead of handling number and string comparisons in a unique way. A* Fixed issue with objects rotating regardless of TE no-rotate setting. Removed Z mouse wheel scrolling functionality for dividers and their subclasses. FlexSim 22.0.0 (December 6, 2021) Added several new features to the Experimenter including: Experimenter can define and run multiple different jobs. Experimenter results are stored in a database file. Additional replications of a scenario can be run without needing to rerun previous replications. Improved visuals for status of replications. Added a Reinforcement Learning tool. Added Label charts . Added Tracked Variable charts . Standardized charts created by Pin buttons. Added sort options to table views. Updated MTBF/MTTR time fields to show unit conversion options. Added InObjectsInternal and OutObjectsInternal properties to the Visual Tool class. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Deprecated the optquest() command. It no longer executes any logic when called. The associated OPT_* macros have been removed. FlexSim now interacts with OptQuest through the Optimization Job object. Changed the default query handlers that deal with the Experimenter in MAIN:/project/exec/globals/serverinterface/queryhandlers. Custom applications that create web queries may need to be updated. Changed the Experimenter to ignore Calculated Tables if their Update Mode is set to Manual. Previously, Manual tables were updated at the end of each replication, causing different behavior in an experiment replication compared to an interactive run. To make sure a Calculated Table updates during an Experiment, use a different Update Mode. Process Flow Added Process Flow Activity Statistics charts . FlexSim 21.2.4 (October 20, 2021) Fixed an exception in the Labels properties panel. Fixed exception making a labels property table when not all objects had the label. Included fixes listed in 21.0.9 below. AGV Fixed naming of control points. People Fixed right clicking a People subflow activity. Fixed ReleaseEquipment's Equipment Resource field. FlexSim 21.2.3 (September 20, 2021) Fixed applying properties in Visuals to all selected objects. Fixed exceptions when using properties with dots (for example, Location.X). Fixed adding On State Change trigger not working correctly. Fixed the \"Add Model 's select objects\" option in dashboard add objects buttons not asserting a state table. Fixed exception when exiting full screen mode. Fixed Pull Strategy field not graying for combiners. Fixed non-ASCII characters in custommenu menu items not displaying correctly. AGV Fixed setting location of paths inside a container with Z height > 0. Conveyor Fixed setting location of conveyors inside a container with Z height > 0. Fixed dragging decision points on conveyors inside rotated planes. Fixed dragging a decision point onto a curved conveyor in a rotated plane. Fixed dragging decision points off of a curved conveyor. GIS Added more error handling in GIS server callbacks. People Fixed People DownBehavior checkboxes not updating correctly. Process Flow Fixed not being able to select current from dropdown menu of Wait for Event or Event-triggered Source activity. FlexSim 21.2.2 (August 27, 2021) Fixed labels created during a model event not being deleted on reset. Fixed setting a Task Executer's Navigator property. Process Flow Fixed the Token properties window not displaying data. FlexSim 21.2.1 (August 25, 2021) Fixed Separator's Separate Mode drop down. Fixed exception when unchecking the Frustum Culling checkbox. Fixed rotating object with right click on the axis mover handles also rotating in other axes. Fixed ResetPosition property for objects inside a template instance container. Fixed getPath() for nodes inside a container. Fixed the setdropcoords() command to correctly set the position when dropping into a rotated container. Fixed an exception in the HTTP API that was causing crashes using GIS maps. Fixed issues with deleting connections to a visual tool with internal connections. Added a button to open the FlowItemBin to replace the Go To FlowItem Bin... drop down option. Included fixes listed in 21.0.8 below. AGV Fixed the AGV Path switch directions button. Conveyor Fixed dropping decision points on a reversed conveyor. Fixed error changing conveyor belt texture when the belt color is set to Object Color. Process Flow Fixed activity statistics not working. FlexSim 21.2.0 (August 9, 2021) Added a Template system for inheriting properties from other objects. Added new manipulation handles for moving, rotating, scaling, and connecting objects in the 3D view. Added ability to delete connector lines. Added a StateTable object. Added a getstatetableutilization() command. Added a Pass-through parameter type . Added a checkbox so transporters can move their forks separate from traveling. Added more Task Executer shapes. Improved treenode.getPath() to return a relative path to nodes that aren't a direct ancestor. Added a Frustrum Culling checkbox in Visuals . Agent Added an AgentSystems property. AGV Allowed the user to define some basic routing cost multipliers , including: An option to divide by speed, allowing for fastest path routing (instead of shortest path) An option to define a custom path-based multiplier to the cost Added Path Conditions , which allow you to \"close\" certain paths, based on either model state or agv state, etc. Added a Prioritize Control Point Lookahead option. A* Added the capability to have oblong grid node sizes . Allowed barriers to be inside visual tools. Added the ability to add dynamic barriers to the A* system. This is done by calling AStar.navigator.addDynamicBarrier() , then AStar.navigator.removeDynamicBarrier() to remove those barriers. Added several triggers to A* objects: AStar.Navigator: OnGridChange: called when dynamic barriers are added or removed AStar.Traveler: OnCalculatePath: called just before a traveler's path is being calculated AStar.Traveler: OnNavigatePath: Called just before a traveler runs the algorithm to define kinematics and cell allocations for traveling its path. Also allows the ability to override the default behavior and define your own. Made several additions to AStar.Traveler API , AStar.Navigator API , etc. Added a TravelPatterns property. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Improved the deadlock recovery algorithm. Now it will add each traveler in the deadlock, as well as any travelers that are waiting on those travelers, as dynamic barriers. Then it will go through each traveler in the deadlock, remove it from the dynamic barriers, add any additional travelers that are adjacent to that traveler as barriers, then try to recalculate the path to the traveler's destination. If it finds a traveler that can still travel all the way to its destination, that traveler will be rerouted. Otherwise, if it finds a traveler that can travel at least on grid square, it will reroute that traveler. Otherwise, it will give a notification of unrecoverable deadlock. GIS Added the GIS module to the Flexsim Installer. Process Flow Added a ProcessFlows property. Added a ProcessFlowVariables property. Fixed error when CTRL dragging activities out of a stacked block and then undoing. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Removed instance object editing from Object Process Flows. FlexSim 21.1.5 (August 6, 2021) Included fixes listed in 21.0.7 below. AGV Fixed incorrect puller reference in AGV PF Templates. FlexSim 21.1.4 (June 14, 2021) Fixed Skip hotkey collision with code editor hotkey. Process Flow Fixed reset errors with resources in FlexSim Express. FlexSim 21.1.3 (May 26, 2021) Improved the Copy Property functionality of the Edit Selected Objects window. Fixed some UI workspace issues. Fixed an exception in the tab control list button for document windows. Fixed changing date time formats not updating run time display immediately. Included fixes listed in 21.0.6 below. FlexSim 21.1.2 (April 21, 2021) Included fixes listed in 21.0.5 below. FlexSim 21.1.1 (April 9, 2021) Fixed errors saving models with Quick Properties open in the view tree. Fixed error upgrading models with Quick Properties open in the view tree. Fixed setting times in the Table view of a date-based Time Table. FlexSim 21.1.0 (April 2, 2021) Added ability to define multiple Stop Times . Updated the stoptime() command so you can set multiple stop times. Added Fast Forward button to the Simulation Control Bar . Added Skip button to the Simulation Control Bar . Added ability to display both the current date time and the elapsed time in the Simulation Clock . Added Travel Distance chart templates . Improved calculation of totalTravelDistance stat. Added totalTravelDistance property to Object.stats . Added Object.stopCount property. Added a seconds() command. Improved performance of window docking system. Improved interface and functionality of Property Tables . Improved layout of TimeTable Table tab . Updated TimeTable calendar views to snap to the nearest 15 minute time by default. Added a combobox for changing Option parameters . Improved indirect lighting in RTX Mode . Added reflectivity to mesh overrides . Improved WebGL streaming of operator shapes. Added support for triggers to setProperty()/getProperty() methods. Added support for INSERT INTO SELECT in SQL. Replaced ... buttons with more applicable icons. Added a help button to the distribution chooser popup. AGV Added several simplified AGV Process Flows . Added AGV.recentCP property. Added labels to AGV paths. Conveyor Added bottle flowitem shapes. Added a Bottle Shapes by Label pickoption for Mass Flow Units . Added roller color to Conveyor Visualizations . Added the ability to have a visualization use the object's color for rollers, belt, and side skirt. Added the ability for users to define default groups . FlexSim 21.0.10 (January 21, 2022) Fixed pasting images into dashboards. Fixed issues with Scenario Charts not updating after adding or removing data from the chart. Fixed a bug with asynchronously loading embedded textures. Fixed some issues with saving bundle data on the hard drive. Fixed bind issue in SqlQuery class. AGV Fixed issue with no accumulating traversal notification. A* Fixed Preferred Paths breaking dividers they end next to but don't cross over. Conveyor Fixed the animation direction of new curved mass flow conveyors. Fixed conveyor animations not working properly after opening a model with conveyors from another model with conveyors. People Fixed Elevator.bank property not returning the ElevatorBank object. Process Flow Fixed labels cache not updating when you change the Operation column of the Label Assignment table in an Event-triggered Source or Wait for Event activity. FlexSim 21.0.9 (October 20, 2021) Fixed guid issues when copying dashboard widgets or duplicating dashboards. Fixed dashboard tables not displaying correctly in the webserver. Fixed dashboard checkboxes and radio buttons not updating correctly in the webserver. Fixed list of menu items in dashboard add objects buttons after clicking the second time. Fixed dashboard text widgets in the webserver not matching the display in FlexSim. Updated webserver tables to handle columns with the same name. People Fix save/load bugs for some charts. Fixed people resources not getting unique names when created. Fixed the normals of walls. Process Flow Fixed not being able to select current from dropdown menu of Wait for Event activity. FlexSim 21.0.8 (August 25, 2021) Fixed Object Format Depth not being applied when changed. Fixed Staytime table options checkboxes not applying. Updated support for latest version of PostgreSQL. Improved error messages for database connection issues. Conveyor Fixed dragging Decision Points inside a container. Process Flow Fixed Find Slot and Find Item activities creating too many events. FlexSim 21.0.7 (August 6, 2021) Fixed sorting in the Empirical Distribution. Fixed Left Join in SQL. Fixed the color of partition headers, equation buttons, and unit edit button text in dark mode. Fixed changing the Display Format of some chart templates. Fixed importtable() for csv files with unix-style endings. Fixed an issue with pulling backorders. Fixed duplicating groups. Fixed the Pass Input/Output To fields on the Visual Tool Properties panel. Fixed issues applying Parameter or Performance Measure code after closing the popup. Fixed time window settings for time plot and gantt charts. Fixed an issue with referencing certain warehousing adresses. AGV Fixed issues with AGV continue on pre-arrival. Fixed AGV battery tracking when the TE is set to use navigator for offset travel, but doesn't actually do offset travel. Fixed setting the Z height with AGV Path's StartLocation/EndLocation properties. Fixed a draw exception after deleting control points connected to AGVs. Fixed AGV Elevator process flow sometimes routing AGVs to the wrong control point. Conveyor Fixed creating conveyors at a modified grid z. Fixed the Z height of straight conveyors created by Join Conveyors. Fixed setting the Z height with Conveyor's StartLocation/EndLocation properties. People Fixed error with a Location's maintenance process being preempted and the process flow variable not being evaluated correctly. Process Flow Removed Start activity not being shown in list of activities to connect to. Fixed Exit Time field showing incorrect value for restored tokens. Fixed the color of various text in dark mode. Fixed Tokens popup not updating properly after opening a second time. Fixed Resource/Zone/etc By Name/Case popups not filling lists with their type of shared assets. Fixed incorrect header in the Find Item activity. Fixed activities dragged out by CTRL dragging being added to list of selected objects. Fixed token's icons being flipped in PF view vs. Legend definition. FlexSim 21.0.6 (May 26, 2021) Added Empirical() to the Set Label pickoption. Fixed exceptions with assigning SELECT labels on puller. Fixed exceptions with Table.query() with the performance profiler enabled. Fixed exceptions with Table.query() on a bundle table with an ordered index and a <= comparison in the query. Fixed bugs in a couple By Type chart templates. Agent Fixed a proximity detection bug when an agent was inside the bounding box of another agent. People Added paramater dashboards to Dashboards toolbar button in the Healthcare environment. Optimized waiting line performance without an open 3D view. Process Flow Fixed FindSlot and FindItem queries evaluating as false because items had not fully exited when evaluated. Fixed rowNumber and repeatCount not being passed in to the time node of the first Schedule Source event. Fixed change shape pickoptions. FlexSim 21.0.5 (April 21, 2021) Fixed colors not applying correctly on state charts. Fixed exceptions from hidden dashboard properties panels. Fixed an issue with loading textures from UNC paths. Conveyor Fixed issue with mass flow conveyor gap close speed calculation. Fixed model unit scaling for conveyor visualizations in length units other than meters. People Fixed People release activities being automatically filled out incorrectly. Fixed an issue with people getting off an elevator and then having their Z height set to slightly below the floor. Fixed exception when changing shape of a single sub location object. Process Flow Added an update script for the gap-optimizing merge controller process flow. Fixed object and event fields of Event-triggered sources / wait for event activities being hidden after docking/undocking the process flow window. FlexSim 21.0.4 (April 2, 2021) Fixed triggers disappearing in the Triggers properties panel. Updated Dispatcher and Task Executer triggers to define current as the correct object type. Fixed an issue with the pull from list pickoption for 3D objects moving the same item multiple times. Fixed a bug with streaming hidden shapes with the webserver. Updated 3D text to use the Names and Stats font if Arial Unicode MS is not available. Fixed a bug with quick properties popup positioning on non-main monitors with different task bar positions. Fixed a bug with the utilization column of some experimenter statistics table being blank. Fixed the start/stop animation popup. Fixed Automatically Reset Labels functionality for statistics collectors. Fixed an issue with list partitions being deleted twice. Fixed a bug with Kinetic Level cross events not being cleaned up correctly. Agent Fixed adding Fixed Resource barriers as static agents. Conveyor Fixed exceptions on reset with Mass Flow Conveyors. Fixed issue with stopping/resuming Mass Flow Conveyors. Fixed some properties in the Conveyor panel not updating correctly. Fixed Default Visualization dropdown in Conveyor System properties. Replaced references to conveyor types with getProperty() calls in gap optimizing merge controller process flow. Fixed curved conveyor belt texture moving backwards. Fixed Conveyor Catch Condition parameters. Emulation Fixed a threading bug in OPC UA controls. People Fixed Process activity not handling releasetoken() correctly. Fixed error with preempting an object that's in a preemtable shift schedule break. Fixed OnResume trigger getting duplicate values if multiple resources are resumed at once. Fixed patient keyword not working in Properties pane fields. Process Flow Fixed properties sometimes not applying correctly. Fixed properties positioning to always be on screen. Fixed source activities no longer creating tokens after certain exceptions are thrown. Fixed straight connector control points not being dragged when both activities were in the same container. Fixed acquiring from a global resource using a list when the flow has no instances at reset. Fixed remove from array pickoption. Fixed instanced flows getting \"- NULL\" appended to their names unnecessarily. Improved the TETask activity's releasetoken() logic so that stopping a token in the middle of a task works with task sequences that are waiting for a FinishTS activity. FlexSim 21.0.3 (March 3, 2021) Fixed numbering issue when naming created operators. Fixed Group filter in Property Table not being populated with list of groups. Fixed exceptions in the Name Panel of properties. Fixed exception when deleting static text widget in a dashboard. Fixed issues with conveyor and rack textures in RTX mode. Fixed an exception when copying certain objects from one FlexSim instance to another. Fixed a crash when debugging a table query containing an invalid column name. Fixed TrackedVariable.getTotalTimeAt() when using history. Fixed the web server dashboard spinner widget. Fixed ODBC connection exceptions. Fixed installed user manual not updating TOC after opening a help page. Fixed Optimizer Results tab going blank after exporting scenarios. Fixed exceptions when viewing experimenter dashboards that don't point at a valid table. AGV Fixed issues with infinite event looping on proximity resumes. Fixed AGV SweepAngle and Radius property handling. Fixed a control area deallocation issue. Conveyor Fixed Photo Eye and Station code headers. Fixed ConveyorHorizontalLength, ConveyorStartAngle, ConveyorSweepAngle, and ConveyorRadius properties not working for Mass Flow Conveyors. Fixed Conveyor SweepAngle and Radius property handling. Fixed power and free conveyors not working. Emulation Fixed a threading bug in OPC DA controls. People Fixed milestone to milestone chart properties not displaying second milestone dropdown. Fixed Model Limit window not showing in Healthcare environment. Fixed Bed location shape positioning patients too low so they appeared to be on a lower A* grid. Process Flow Fixed Travel to Location activity showing the wrong icon in properties. Fixed applying kinematics to subcomponents. FlexSim 21.0.2 (January 21, 2021) Fixed renaming chart template dashboard charts. Fixed parameter table and property table popup windows not showing on non-main monitors. Fixed unit conversion dropdown not working with the Periodic Rates pickoption. Fixed a crash in the distribution popup. Fixed table chart checkbox properties not immediately applying. Fixed state chart colors not using colors defined in the table. Fixed the duration field on the Video Recorder properties displaying the wrong duration. Updated Export to CSV pickoption in the End of Experiment trigger to work with new experiments. Reverted 21.0.1 change to SQL UPDATE. Added a model update script to upgrade existing experiments to use new parameters and performance measures. AGV Improved error message for offset travel tasks that don't have a valid destination set. Conveyor Fixed being unable to connect merge controllers to conveyors. Fixed help button for conveyor visualizations. Added a model update script to place conveyor objects in groups according to their old types to facilitate editing related objects in property tables. Process Flow Fixed Destroy Object activity not moving deleted object into the model before deleting if the object was the instance owner (Object or Person flow objects for example). FlexSim 21.0.1 (January 5, 2021) Fixed Stat variable labels displaying their path rather than their value. Fixed Model Documentation properties not applying. Fixed an error message when applying web pages. Fixed some unnecessary error messages when adding some chart templates. Fixed the help button in Properties not working for dashboard charts. Fixed SQL's UPDATE syntax for inner joins. Fixed Visual Tool internal connection properties not applying. AGV Fixed an issue with redirecting AGVs on pre arrival. Conveyor Fixed various issues with incorrect headers on several conveyor objects. Fixed issue with changing upstream output order on mass flow conveyors. Fixed item resuming incorrectly when an item stopped in the middle of a side transfer finishes the transfer. People Fixed utilization chart templates not correctly excluding time spent in excluded states. Fixed some chart templates not handling warm up time correctly. FlexSim 21.0.0 (December 4, 2020) Added a Model Parameter Table tool. Added a Performance Measure Table tool. Added an Empirical Distribution tool. Added a Web Page tool. Upgraded html views from WebKit to Chromium Embedded Framework. Added a Map FlexScript API . Added a JSON FlexScript API . Added Object.getProperty() and Object.setProperty() methods to the Object FlexScript API . Moved dashboard properties windows into the context sensitive Properties window. Included fixes listed in 20.0.10 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. The Experimenter and Optimizer now use Model Parameter and Performance Measure Tables. Existing experiments and optimizations are automatically updated by the model upgrade process, but may require some manual updates. Fixed the PowerPoint.Presentation.create() and PowerPoint.Presentation.open() method syntax. Due to Chromium's multi-process architecture, the FlexScript command callwebscriptmethod() and JavaScript function fireFlexsimEvent() are now asynchronous and do not return values directly. To get the return value of fireFlexsimEvent(), you can now pass a callback function as the last parameter: fireFlexsimEvent(\"myEvent\", param1, param2, function(result) { alert(\"result: \" + result); }); AStar Added a Strict Diagonals setting to make travelers travel better around corners. Fixed dynamically added members not allocating an initial cell. Conveyor Added a Mass Flow Conveyor . Fixed items sometimes becoming detached from their accumulation chain after the conveyor backs up. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Removed Conveyor Types. Removed Decision Point Types, Photo Eye Types, Station Types, Entry Transfer Types, and Exit Transfer Types. In doing this, we moved type triggers like OnArrival, OnContinue, OnBlock, OnClear, etc. directly to their owning object instances. This required a shift in parameter references. For example, a Decision Point Type OnArrival trigger's param(1) becomes ownerobject(c) on the object instance's trigger, param(2) becomes param(1), etc. We have implemented update scripts that translate the code properly for all pick list options and for all code headers. However, we have erred on the side of caution in translating param() references that are inside a user-defined code body. Thus if you have manually written code in one of these triggers, and this manually defined code includes param(), parval(), or parnode(), you will need to update that code manually on the object instance. People Added a Remove Statistically Only checkbox to the Remove Person activity. Updated the Statistics Properties panel to display HC states. Fixed an issue with preemption of elevators using A*. FlexSim 20.2.3 (October 14, 2020) Fixed the toolbox icon size on high DPI displays. Fixed menu bitmap sizes at high DPI settings. Fixed the positioning of icongrid right-aligned pictures at high DPI settings. Fixed an issue with upgrading chart templates. Fixed Properties window showing missing or wrong icons for some objects. Fixed Properties window not showing the name panel for flowitems and lights. Fixed long trigger names getting cut off in Triggers properties panel. Fixed the initial naming of light objects. Updated Triggers properties panel to apply all operations to all selected objects. Included fixes listed in 20.0.9 below. Agent Fixed some divide by zero errors. Improved the popup for the Create Agent pickoption. AStar Fixed heat map color interpolation. People Fixed Enter/Exit Instructions window not applying instruction fields. Fixed Process activity not resetting the object's state when the object is preempted. Fixed some location Exit Instructions setting the person's Z location too low such that the person was considered one floor down. Process Flow Fixed Tokens popup window not displaying correctly. Restored the Remove Label pickoption. Fixed using kinematics activities with flowitems. Fixed an issue with accessing properties on current in process flow fields. Fixed a crash when dragging out TaskSequence activities in some situations. Fixed issues with the FindSlot and FindItem activities. Changed the OnSuccess picklist for FindSlot. FlexSim 20.2.2 (September 1, 2020) Fixed error when adding OnStateChange trigger in trigger panel. Fixed exception when creating property table from Visuals panel. Fixed the Operator field's picklist in the Processor panel. Fixed Statistics panel sometimes showing Travel Distance when not appropriate. Fixed exceptions in Round Robin if Available pickoption. Added \"canSetPropsAsRValues\" flag that module developers can set on their custom classes. Agent Fixed the \"stop\" velocity update mechanism. AGV Fixed issue with deallocating control areas when reversing. FlexSim 20.2.1 (August 24, 2020) Updated the triggers popup to stay on the screen when it gets bigger. Fixed the separator's Separate Mode dropdown. Fixed Quick Properties window jumping to the left when opening panels on a monitor with the taskbar on the left. Fixed exceptions when right clicking on network nodes. Fixed a crashing issue with stats collectors. Fixed Automatically Reset Labels checkbox not applying to all selected. Fixed Name panel not showing for flowitems in the flowitem bin. Fixed Properties window not refreshing when selecting a saved view. Fixed exceptions when opening the Statistics pop out window when another view is open with the same objectfocus. Fixed the Storage System Visualization tab being invisible sometimes. Fixed the Edit Properties button on various fields showing at the wrong times. Fixed exceptions when choosing a filter in the property table filter popup. Included fixes listed in 20.0.8 below. AGV Fixed bug in transfer allocation at turn around point. People Updated Location flow to allow the location to be released when there's an empty transport inside the location or a patient exits the transport. Fixed CopyAll buttons for Enter and Exit Instructions. Fixed Last Acquired from People Resource menu not populating. Process Flow Fixed exceptions when clicking the View Entries button in List Properties. Fixed the scheduled source pick options so it displays parameters available in the code edit. Fixed a bug with label references in task sequence activities. FlexSim 20.2.0 (August 11, 2020) Updated the run speed slider so you can customize the ratio of display units to real seconds. Moved object properties windows into the context sensitive Properties window (formerly known as Quick Properties). Added a new Quick Properties window that appears next to your cursor when double clicking on an object. Added a pop-out button to the Labels panel of the Properties window. Added a Dark theme for FlexSim's UI. Removed help manual from the installer and linked help to docs.flexsim.com. Created a separate installer for a local help manual. Added Unit edit buttons to more edit fields. Updated the Quick Library to match the current state of collapsed and expanded panels in the main library. Removed the View Settings window and moved all its options into the Properties window. Improved performance of Properties window and various other UIs. Added Object Property tables. Added Object class properties and methods to the Variant class in FlexScript. This removes the need to use .as(Object) if you know the treenode pointed at by a Variant is an Object. Added Object.resetPosition property. Added capture groups to the string.replace() method. Enabled several SQL clauses - NOT, NOT IN, DELETE FROM, INSERT INTO, and LEFT JOIN/LEFT OUTER JOIN. Added ARRAY_VAL() sql function for accessing a value in an array. Added unit conversions to the convert() command - convert(4.5, \"ft/min\", MODEL_UNITS). Improved performance of loading media by making it multi-threaded. Updated the default web server 3D view to stream using WebGL data instead of video. Added Color.fromPalette options to several Set Color popups. Added a pickoption for the Source's On Creation trigger for attaching items to an Object process flow. Disabled the beeping noise when pressing Enter in edit fields. Fixed the Create Object edit mode sometimes not creating objects and just exiting (like when clicking on the library when the User Manual was active). Fixed a draw issue with tables drawing bold text sometimes. Fixed a bug with window docking. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed updatehotlinks() to only repaint the views if it applies a node with a viewsyncupdate attribute of 1. The keywords VALUES and DELETE were added to the sql parser. This means that previous models that use the term VALUES, Values, values, DELETE, etc. will get an error because sql now sees it as a special keyword. If you get this error, just wrap your term with square brackets: [Values] to tell the parser to not interpret it as a sql keyword. Agent Added the Agent module to the Flexsim Installer. Enabled A* walls as static agents. Added a neighbors() function to the Agent API. Fixed social forces for agents not in model space. Fixed bugs with using A* bridges. AGV The join tool now joins in all cases, defaulting to a straight path if it can't solve for a curved path. Conveyor The join tool now joins in all cases, defaulting to a straight conveyor if it can't solve for a curved conveyor. Emulation Added Allen-Bradley connections. People Improved performance of state history tables. Fixed listening to travel events on a person created with the Create Person activity. Updated maintenance to only happen if the location was occupied since the last time maintenance was performed. Process Flow Added new Kinematics activities. Added new Warehousing activities. Added an Enabled checkbox to the Source activities so that you can turn them off. Consolidated Fixed Resource and Task Executer process flow types into a single \"Object\" type. Added a right-click menu option to the 3D view so a user can right-click on an object and add an Object process flow directly. Added an Object Flow field to the Create Object activity and added a pickoption for attaching items to an instanced flow. Changed double clicking on an activity to be more consistent with the 3D view and now opens the activity's properties window. This window now has a name edit field so you can still easily rename the activity. You can also slow double click to only open the old name edit field. Improved performance of activity properties windows. FlexSim 20.1.3 (June 17, 2020) Fixed a bug with Travel to Home Location when using the AGV Navigator. Fixed a bug with the Warmup Time and several Output charts. Fixed an issue with the Statistics Collector UI not updating after setting the row value. Included fixes listed in 20.0.7 below. AGV Fixed issues with uncoupling trains. FlexSim 20.1.2 (May 8, 2020) Fixed a bug with Output per Hour vs Time chart templates. Fixed a bug with WIP by Type table charts templates. Updated the OnResourceAvailable header so that pickoptions using the Dispatcher class no longer throw exceptions. Included fixes listed in 20.0.6 below. AGV Fixed incorrect AGV load and unload times. Fixed an incorrect offset distance calculation when reversing. Fixed a bug with errors being shown when the Ignore Internal Destination Errors check box was checked. Fixed the Network Properties button not showing for straight paths. Fixed a bug when uncoupling trains. FlexSim 20.1.1 (April 17, 2020) Fixed chart templates increasing memory usage after saving the model. Fixed streaming the 3D view to the webserver with a Generic OpenGL context. Included fixes listed in 20.0.5 below. AGV Fixed AGVs getting routing errors when the ends of a travel path were off the end of the destination path. FlexSim 20.1.0 (April 10, 2020) Updated the Statistics Collector to be simpler and more user friendly. Added a PowerPoint FlexScript API . Added an HTTP FlexScript API . Added a sorting tab to various chart templates. Improved performance of chart templates. Replaced the code profiler with a new Performance Profiler . Added a Memory Profiler . Added OnEntry and OnExit events to TaskExecuter objects. Added an icon to library items that launch a pop-out library of choices. Reorganized the dashboard library using the pop-out library to consolidate charts with multiple visualizations. Updated the WebServer to use the Version Selector. Added a Find/Replace UI for global tables. Added support for Ctrl-F and Ctrl-H keyboard shortcuts for various windows. Added support for renaming objects using the F2 keyboard shortcut. Added a Vec3 overload to the Object.setRotation() method. Added a stop parameter to the userinput() command which will stop code execution until a value is entered. Added a default parameter to the realtime() command that returns realtime(1)+0.001*realtime(2). Updated various pickoptions to use the TaskSequence and TaskExecuter APIs. Added tutorials for the Statistics Collector. Added a Variant overload to the Table() constructor. Fixed some issues with the importtable() command. AGV Added new Train functionality . Added offset travel functionality to the AGV network. Added a time-based trailing option. Added a routing accessibility visualization feature to a control point's right-click menu. Brought the AGV Quick Properties behavior for applying to all selected objects inline with Quick Properties behavior in other modules. Adjusting the size of path direction arrows to be more visible. Fixed several spinners in Quick Properties not applying immediately. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed behavior for when a TaskExecuter is connected to an AGV network, and is set to use the navigator for its offset travel. Previously, the navigator was hard-coded to find the closest control point. Now, you instead need to add an OnAGVOffsetTravel trigger to the navigator, wherein you can direct the AGV how to offset. Changed the times when AGVs will go into the blocked state. Now they will become blocked as soon as they cannot allocate ahead. And they will become blocked as soon as the are proximity-interrupted on an accumulating path, instead of waiting until they are fully stopped. Several changes have been made to the AGV accumulation behavior, specifically in calculating when an AGV accumulation stop event should happen. This should not drastically change AGV behavior. However, minor timing differences may appear in existing models. People Added clipboard, test tube, and pill bottle flow items. Added a Max Speed property to Equipment objects. Updated Transport and Equipment objects to do low priority returns. Added the ability to install instanced People flows. Updated the LocationStaytimeHistory chart to handle people entering and exiting transports inside a location. Process Flow Added an AGV Travel activity. Updated the Sink to notify parent tokens on a Run Sub Flow activity that the child token finished the subflow. Updated the Wait for Event and Event-triggered Source activities to be able to display more than one link at a time. Updated the sampler for Universal Edit fields to display process flow variables and current labels when sampling white space. Added a pop-out library for choosing the shape of Container objects. Added a pop-out library for choosing the type of travel activity. A* Updated the Heat Map to use a Color Palette. FlexSim 20.0.10 (December 9, 2020) Fixed a bug with copy/pasting containers with connections. Fixed some issues with assigning datatypes in tables. Fixed an issue with models with large travel networks loading slowly. Fixed the server interface settablevalue query handler. Fixed hi-dpi issues with the optimizer chart. Fixed improper mesh color export. People Fixed some charts not displaying correctly. Fixed an issue where tokens sometimes try to acquire the wrong resource after the resource it's trying to acquire goes off schedule. FlexSim 20.0.9 (October 14, 2020) Fixed the Statistics properties panel incorrectly showing travel distance field for some objects. Fixed a bug with changing the layout of network nodes as part of an experiment. Fixed the SQL ON clause to work with UPDATE statements. Fixed a bug with the rack's default pull strategy. Fixed an optimizer chart issue. Fixed code not immediately being applied from a Code Editor window in some cases. AGV Fixed an inorrect setting in the AGV Elevator process flow. AStar Fixed issue with preempting while on a bridge. Process Flow Fixed Batch label aggregation table view not immediately updating. Fixed person.LabelName syntax not working in Assign To fields of a Person process flow. FlexSim 20.0.8 (August 24, 2020) Fixed popup window positioning when the taskbar is on the left or top of monitors. Fixed a crash when loading start page web content on some systems. Fixed an exception in the 3D importer. Fixed an exception when deleting warehousing visualization elements. Fixed initializing random streams to a particular replication the first time a model is opened. Fixed an issue with SQL statements with a GROUP BY and no aggregations. Fixed adding triggers to animation keyframes. Fixed some characters not being properly escaped when saving as fsx. Fixed pointers to tracked variables showing the variable's value instead of the path to the variable. Fixed nodes with pointer data that are pushed on a list displaying the value pointed at. Fixed exception in dispatcher's First Available Unless Preempting option. Fixed exceptions in warehousing entry/exit pickoptions. Fixed missing header variable in down behavior's OnDown and OnResume triggers. Updated Japanese month characters. Conveyor Fixed roller drawing issue with non default widths. Updated snap threshold to also apply to cardinal direction snapping. Fixed an issue with moving items between transfers. People Fixed issues with Milestone bar chart. Fixed Process activity's state dropdown growing each time the properties were opened. Fixed missing header variable in enter/exit instruction headers. Process Flow Fixed a bug with the releasewave() command. FlexSim 20.0.7 (June 17, 2020) Fixed experiments not completing when using the Restore original state after each replication option. Fixed TrackedVariable.getTotalTimeAt() always returning 0 when passing in the name of a state. Fixed Gantt charts not displaying in the experimenter. Fixed Chart Templates not showing up as Statistic Tables in Performance Measure Results. Fixed a crash with drawing Histogram charts. Fixed Slot Label Painter not recognizing strings properly. Fixed exceptions with charts in an experiment when using a Runtime license. Fixed obj material files not packing properly. AGV Fixed a bug with detaching a trailer previously loaded by another AGV. Updated detached trailers to reset their rotation back to 0. Conveyor Fixed a bug with items straddling 3 or more conveyors causing items to leave the conveyor system. Emulation Fixed a bug with reading uint_16 registers as a server. FlexSim 20.0.6 (May 8, 2020) Fixed the Storage System not properly updating its list of items in inventory when the last item left. Fixed the display of ampersands in table views. Fixed the override draw macros for setpickingdrawfocus(). Fixed pasting images into dashboards. Fixed a bug with adding animation keyframes with bone components. Fixed an issue where charts created with the pin button ignored values in some cases. Conveyor Fixed exit transfers from older models losing priority and preempt values. Emulation Fixed issues with the Emulation Modbus protocol. When FlexSim is set as a server, clients were unable to connect to, write to or poll FlexSim consistently. Updated Modbus variable's register # field to display the actual stored register number rather than a 1-based number to accurately reflect which registers are being used. People Fixed fields in the Enter Instuctions window losing headers. Process Flow Fixed the Batch and Join (Wave) info popups so you can look at the tokens while the model is running. Fixed an issue with having to click twice to get out of a universal edit in process flow properties. FlexSim 20.0.5 (April 17, 2020) Fixed dashboard widgets sometimes being deleted when closing a dashboard window. Fixed dashboard widgets not deleting their stats objects or chart templates when deleted. Fixed an exception with reevaluating backorders in the middle of pushing multiple things to a list with Allow Multiple Pushes Before Reevaluating Backorders enabled. Fixed not being able to click on the Robot's planner item. A* Fixed issues with listening to the OnAStarElevatorBankArrival event. Emulation Fixed script that generates self-signed certificates for OPC UA not working for directories with spaces in the name. Process Flow Made it easier to attach connectors to activities. Fixed Batch properties window not being able to be resized vertically when dragged. Fixed Batch properties window refreshing twice when opened. FlexSim 20.0.4 (April 10, 2020) Updated the Database Connection UI so you can define a full database connection string manually. Updated the model load process to not allow opening a model built in a newer version of FlexSim. Fixed a bug with accessing labels on a list back order when using unique pullers. Fixed not being able to run the experimenter locally after running an experimenter on distributed cpus. Fixed a crashing issue with lists in an unexpected state. Fixed an issue with the query builder not properly handling ORDER BY statements when there where multiple partitions. Fixed a bug with table subviews being resized improperly. Fixed a bug in the timeplot that caused duplicate tick labels on the Y axis. Fixed the rackgetlevelofitem() command. Fixed the gravity flow rack's tilt value not scaling with model units. Fixed rendering Unicode characters in performance measure results. Fixed the Pull From List popups not properly wrapping queries with just a SELECT statement with quotes. Fixed timeplots not drawing the Y axis when the min and max Y values were the same. Fixed a texture bug when undoing the creation of people shapes. Fixed processor item positioning. Fixed the Calendar graph for time tables allowing you to create negative duration events. Disabled the Drive-in Rack's specific pick/placing functionality for some Task Executer types. Fixed copying dashboards and dashboard widgets. Fixed the animator preview not adjusting for model units. Fixed the formatting of gantt chart labels. Fixed a bug with the scenario chart not being able to draw some bar charts. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Moved the Rack's On Exit trigger to be before the On Slot Exit trigger so that you could access the item's bay or level in the On Exit trigger. Updated the releaseitem() command to throw an exception if the object's container is not a Fixed Resource. AGV Fixed issues with applying several AGV visual properties. Conveyor Updated non-accumulating conveyors to set their state to STATE_EMPTY when empty. Fixed priority and preempt values not working on exit transfer types. Fixed inline conveyor transfers not correctly calculating the roller offset distance when going onto a skewed roller conveyor. Fixed issues transferring items from a curved conveyor to a rack. Fixed times when photo eyes would fire their On Cover event twice. Fixed motors not resuming conveyors when connected to two or more non-accumulating conveyors. Fixed conveyors always being named \"Conveyor\" when added to a user library. Fixed not being able to rename type objects in user libraries. Emulation Enabled generation of self-signed certificates for OPC UA. People Fixed elevators getting stuck in a loop for elevator banks at a non-zero height. Fixed a bug in the model update script when in the Healthcare environment. Process Flow Fixed activity icons disappearing after adding a lot of activity types. Fixed objects locked to a container not being deleted when the container was deleted. Fixed exceptions when you clicked on a container and then a text object. Fixed being able to copy activities into the 3D view. Fixed being able move activities into the 3D view or other objects with the Edit Selected Objects tool. Fixed the Date Time Source not adding its labels to the flow's label cache. Fixed an issue with batch stats recording negative values. Fixed being able to click on tokens when clicking on blank space in a container. Fixed the process flow view not being able to draw if activities were somehow in the model. Fixed Wait for Event when listening to multiple events that check for the initial value being met. Fixed resources in sub flows destroying objects from groups on reset. Fixed undoing changes to connector control points. Fixed exceptions in the Date Time Source window when doing an excel import. Fixed the token's shared asset Quick Properties panel not always showing. Fixed an object display bug in throughput templates. FlexSim 20.0.3 (March 3, 2020) Fixed a crashing issue involving back order reevaluation with lots of list entries. Fixed Database API not working with Unicode characters. Fixed dashboard widgets displayed in the webserver. Fixed an issue with the rackrestoreitem() command. Fixed an exception if certain 3D library objects were dragged into a Process Flow view. Updated the Model Background's scale to model unit button to include centimeters. Included fixes listed in 19.0.9 below. People Fixed a crashing bug when renaming people resources referencing another resource. FlexSim 20.0.2 (January 17, 2020) Fixed an exception when clicking on an Edit model input widget in a dashboard. Fixed an exception when getting the value of a categorical tracked variable. AGV Fixed various drop downs in AGV object's Quick Properties panels not populating correctly. People Fixed a bug with Census History tables not being ordered correctly. Updated the Waiting Line to use the person's WalkAnimation and WalkLoadedAnimation variables. Process Flow Improved the size of the Quick Library. FlexSim 20.0.1 (January 10, 2020) Fixed Vec2.angle() method giving incorrect values. Fixed Vec3 normalized and magnitude properties being overwritten by Vec2 properties. Fixed an exception when loading models with incorrect flag settings on a node. Fixed a bug sending items out of a Drive In rack. Replaced some splash screen images with images that are easier on the eyes. Fixed broken links in Task Logic Tutorial 1. Fixed Warehousing section showing up incorrectly in the Quick Library when A-connecting from a TE Updated the Grid Z view setting to allow negative values. Fixed the Run Speed popup not scaling the displayed run speed by the model time units. Fixed a bug with duration units in the Item Trace Gantt chart. Updated Optquest to not require .NET 3.5 and instead use .NET 4.6 which is included with windows. Added picklist options for the Rack's OnSlotEntry, OnSlotExit, and OnSlotAssign triggers. Fixed the Content pin button not showing Content vs Time option after popping out the Statistics panel from Quick Properties. Fixed copying and pasting racks not preserving their rack visualization. Fixed an exception when calling memberadd() on a Time Table during the model run. Included fixes listed in 19.0.8 below. People Updated and streamlined the Healthcare tutorial. Fixed a bug with elevators miscalculating which floors they could reach. Fixed the object field on People Resources not being reevaluated after the first acquire. Process Flow Fixed connectors not copying when you have multiple activities in a block. Fixed connector out ranks not showing when you have multiple activities in a block. Fixed an issue causing occasional exceptions in the Container Quick Properties panel. FlexSim 20.0.0 (December 6, 2019) Changed models to automatically open the environment in which they were saved. Added boy and girl shapes to people visuals. Improved keyboard interactions within table views. Improved tabbing between fields in certain windows. Updated the 3D names and stats text rendering to support more fonts and Unicode. Improved the 3D view's lighting capabilities by adding Light objects that can be arranged in the model. Improved lighting in RTX Mode, including support for soft shadows and a denoiser. Adjusted the Rack Dimensions tab to be able to specify slot padding. Added an optional parameter to TaskSequence.create() for waiting until TaskSequence.finish(). Added an OnValuePulled event to the List. Added methods for creating a DateTime using a string or component parts. Added support for in-place addition and subtraction of DateTimes. Fixed bugs with DateTime methods when using certain years or ranges of time. Improved the convert() command's capabilities with converting dates and times. Improved the exporting of null bundle values to Excel. Added an excelcreateworkbook() command. Added statistics collectors and calculated tables to the Excel Export. Added an option for creating sheets using the Excel Export. Fixed rotation issues with pasting certain objects. Added a Vec3.projectRotation() method. Added a Vec2 FlexScript class. Changed the License Activation window to be responsive during licensing operations. Added an index type to statistics collector columns for improving performance. Added a categorical combo type to tracked variables. Updated the query builder to handle CASE statements. Simplified certain queries written by the query builder. Changed the tree structure to simplify creating custom webserver interfaces. Added a repeat type to animations for remaining in the last frame after running the animation. Added a Go To Row/Column option in quick properties for tables. Improved time plots to be able to show durations as well as calendar times. Added an optional wire mesh rack visualization. Added more picklist options to the storage object slot assignment strategy. Updated the animator so that keyframes are updated using a right-click menu option instead of automatically. Added an option to duplicate an animation keyframe into another animation. Changed the default network node speed limit to 0 (no speed limit). Reorganized the Use Transport pick list and added a No Transport Reference option. Improved the Time Table Date Based GUI to draw past the last event and allow scrolling into the future. Added PushWheelchair and PushCart animations to Operators Fixed a bug with the rack's default pull requirement not reevaluating after becoming full. Fixed an issue with copy/pasting sub-locations. Fixed the dark patterns when zooming out in RTX Mode. Fixed a crash on certain hardware in RTX Mode when rendering too many transparent layers. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Time tables now combine consecutive down periods if using the same state and profile or the same down behavior. Fixed issues with pick/place offsets on drive in racks to improve usability with A*. Because of performance improvements to query(), the row order is not guaranteed unless using an ORDER BY statement. Fixed excelrangewrite() so that the correct overload is available in FlexScript. Improved the FlexScript hypertext preprocessor scoping mechanism used by the webserver. Fixed object color being applied incorrectly to ambient material color on certain meshes. Changed point source light attenuation. Changed TASKTYPE_NODEFUNCTION to pass variants in as parameters instead of interpreted legacy doubles. This fixes the types of arguments that are passed when calling treenode.evaluate() as part of a TASKTYPE_NODEFUNCTION task. This allows you to add TASKTYPE_NODEFUNCTION tasks with parameters that are not just numbers, (nodes, strings, arrays, etc.) and have those parameters be preserved in a type-safe manner and properly passed into the subsequent treenode.evaluate() call. However, this change may have some consequences for older models. The following guidelines apply: If you use the inserttask() command, and cast a node to a number with tonum() to pass it in as a task variable, then you should use parnode() to get those parameters out in the nodefunction. While this method will continue to work, this mechanism is nevertheless deprecated. The now-correct method for adding a TASKTYPE_NODEFUNCTION task to a task sequence is to use TaskSequence.addTask(). This method takes full Variants as its task variable parameters, so you do not need to use tonum(). When using this, you should use param() to get the parameters back out. Older models that use neither of these methods may need to be updated to use method 2 in order to work properly in this version. Process Flow Changed the default behavior of the Create Task Sequence activity to work easier with task sequences created outside of Process Flow. Added a Finish Task Sequence activity that works with the new Create Task Sequence features. Changed the default value of Task activities from token.resource to token.taskSequence. Improved the interface for connecting activities. Added a mechanism for connecting to and from containers and routing tokens between activities using those connections. Added an option to the Run Sub Flow activity to run tokens one at a time. Adjusted the size of containers and connections based on the zoom level when created. Removed the width attributes of themes. Improved the UI for entering times in the Date Time Source activity. Change Set Color By Case and Set Object Color pick options to enable setting the color of a token. Fixed the display of task parameters in the event log. People Improved people resource shared assets to be able to reference other people resources. Added Sort By and Filter By fields to people resources. Simplified and improved several activity sets. Improved the list of labels in drop-down menus to include People Settings labels. Added a Kiosk to the list of locations. Added an Observation Room multilocation. Added an option to the Toolbox to add all people tables to the Excel Export. Added more people tables and charts. Improved the performance of many existing people tables and charts. Updated preempted resources to be able to be reacquired with a higher priority. Updated Escort Patient and Tranpsort Patient activities to set the staff's TravelingWithPatient label when escorting or transporting a patient. Improved the query builder interface with support for adding group/individual subsets. Changed people acquire activities to have the default max wait timer trigger release the token out connector 2. Changed the Split activity default to creating child tokens in the Healthcare environment. Changed the repeat type of the LayDown and SitDown/SitDown2 animations to repeat the last frame. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed how labels are handled by People Settings. Improved animations and positioning of transports and equipment when staff move them. Emulation Added support for OPC UA connections. FlexSim 19.2.4 (November 13, 2019) Fixed animations being applied to the wrong object when dynamically hiding and showing the shapes of objects. Fixed a bug with preserving chart category order. Fixed parsing fixed-length numbers in slot address strings. Fixed the stats structure of the man and woman flowitems. Fixed the 3D stats display on rack objects. Fixed an exception in the calculated table properties window. Included fixes listed in 19.0.7 below. People Fixed a model unit scaling issue with transport placement in Transport Person and Move Equipment activities. Fixed not being able to sample Equipment objects in the Equipment field of the Move Equipment activity. Fixed the people state stats collectors to report null instead of zero if there is 0 non-excluded time. Fixed an bug with an elevator not updating its location after a moveToFloor() call. Fixed an issue with elevators not binding to the correct grids. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed an issue with travelers not using idle elevators in certain situations. A* Fixed conditional barriers to work across multiple grids. FlexSim 19.2.3 (October 16, 2019) Fixed a crash involving the FlexScript debugger. Fixed an issue with hover text on certain variables while debugging. Fixed a bug with pie and bar charts incorrectly handling null values. Fixed a bug with formatting the start and end date in gantt charts. Fixed an issue with recording null values in Statistics Collector pointer label columns. Conveyor Fixed an exception when creating traversal events in certain situations. AGV Fixed a bug with calculating an AGV's path in certain situations. Fixed a bug with deallocating control points when AGVs are preempted. A* Fixed issues with distancetotravel() when using elevators. FlexSim 19.2.2 (October 4, 2019) Fixed a bug with pulling from lists when comparing puller labels while using an AND operator. Fixed a bug with operators not animating correctly for their first travel task when created after time zero. Fixed a bug with Storage.Slot.hasSpace(). Fixed a bug with the calculated table detecting window functions in custom expressions. Fixed the scroll bars in various dashboard charts when using the webserver. Fixed issues with dashboard inputs when using the webserver. Fixed a bug with the user manual appearing erroneously in certain situations. Process Flow Fixed an issue with max wait timer fields missing their header code. People Fixed a UI issue with people visual colors. Fixed a bug with the default values in the Two Staff Meet activity set. A* Fixed an exception when a traveler is preempted while traveling to an elevator. FlexSim 19.2.1 (September 30, 2019) Changed operators to put their arms down by starting their stand animation when created. Fixed a bug with Variant.toString() not using the model precision. Fixed exceptions in the FlexScript debugger. Fixed bugs in charts related to certain region settings. Fixed an issue with copy/pasting certain objects in the 3D view. Fixed an issue with the Z position value on the General tab of Properties windows. Added exceptions for trying to query untracked labels on virtualized items. Included fixes listed in 19.0.6 below. Process Flow Fixed some issues with the event trigger popups. Fixed an issue with number precision in the Labels view. People Fixed model unit scaling issues with the glass and revolving doors. Fixed the patient keyword not working in the Assign Labels fields. Updated the Shift Schedule Process Flow to handle MultiLocations. Updated the Random Appearance code to set the object color and set the shirt to use it. Conveyor Fixed an issue with sending items from a curved conveyor to a rack. FlexSim 19.2.0 (September 5, 2019) Added a Storage System object to improve warehouse modeling. Improved the Rack object. Added more types of racks to the library. Updated the Sketchup SDK to load newer skp file versions. Added a ray tracing render mode. Added a Color Palette tool. Improved the color picker popup. Updated dashboard charts to use color palettes. Added options for showing column names to charts. Added options for showing multiple Y-axes on timeplots and histograms. Updated box plot options for categorizing and coloring data points. Added an option for reordering axis categories on timeplots, histograms, and box plots. Added additional line styles and visualization options to timeplots. Added Table methods for using indexed columns. Added a resetvalues attribute. Added Object getVariable() and setVariable() methods. Updated the SQL IS keyword to work with expressions. Improved performance of SQL queries on tables with indexed columns. Added an array parameter to Math.max() and Math.min(). Added a binary bundle field type. Added a button to Model Settings to export embedded media. Changed the default Person flowitem into separate Man and Woman flowitems. Added options for using the object's color to Person Visuals. Added a changepersonvisuals() command and pick options. Updated the Model Background properties window. Added a right-click option to show/hide model backgrounds from the Toolbox. Added pick options for using lists to the Pick Operator field on the processor. Updated various pick options to use generic label references. Added options to the List for special handling of SELECT values. Added Text options to Quick Properties. Added mean and standard deviation to the statistical distribution popup. Added icons to various pick option menus. Improved the Copy Variable function of Edit Selected Objects. Added the location coordinate system button to the General tab of object properties. Removed the Build menu; its options can still be added to the user toolbar. Changed the run speed slider to behave as a ratio of real time instead of model units per second. Changed the color of the selection box in the 3D view to be more visible. Fixed a bug with deleting array data from a node. Fixed an exception with cloning a table without rows. Fixed a bug with applying experimenter triggers. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Improved the rendering performance of some imported shapes by optimizing their meshes by material. Some mesh customizations may apply differently for some shapes. Charts now ignore null values instead of trying to categorize or plot them. Changed the FlexScript + operator to concatenate numbers with strings. Fixed some FlexScript math operations with numbers and null variants. Fixed an issue with FlexScript downcasting not always type checking properly in certain expressions. For example, \"Object obj = param(1);\" will now correctly throw an exception if param(1) is a treenode without Object data. Updated the Rack's place offset to be the actual location that the item will be placed. Fixed a bug with labels added during events at time 0 not being deleted on reset. Fixed a bug in Color.random(). Process Flow Changed the scroll wheel to zoom instead of panning the view up and down. Removed the extra outline around stacked blocks. Changed the default option for Release Batch on max wait timer and max idle timer to have Failed unchecked. Organized the ProcessFlow list on the toolbar based on the Toolbox folder structure. Changed Event-Triggered Source and Wait for Event panels to be collapsible. Added an edit field for the number of arrivals on the Scheduled Source. Added a getlastacquiredresource() command. Changed the color of the selection box to match the 3D view's. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated Move Object's Preserve Global Position checkbox to preserve location and rotation. People Added an experiment variable for changing the number of objects in a People group. Added a visual indicator to show when objects are acquired by the shift schedule. Added A* dividers to waiting lines and other objects. Added a custom window for People Down Behaviors. Added a Keep Person on Transport checkbox to the Transport Person activity. Changed the default Arrivals activities to randomize the created person's visuals. Added state history tables. Adjusted the Staff's walk back to reset position so that it is preempted if acquired by something else. Updated activity subflows so travelers synchronize their speeds when traveling together. Moved copying token labels to the created person to after the people settings labels are added so values aren't overwritten. Fixed a bug with getting the value of certain types of labels defined in People Settings. Walls are now created at the current Grid Z height. Conveyor Improved naming of various objects. Fixed a bug with the height of decision points when created with certain model units. Added a chain texture to conveyor belt visual options. AGV Updated curved path quick properties to be able to specify start and end points. Improved naming of control points and areas. A* Added the A* Navigator to the Toolbox. Updated the A* Navigator Properties window. FlexSim 19.1.2 (September 3, 2019) Fixed an exception with updating models with certain rack configurations. Fixed a linker error with trying to subclass the Rack class in a module. Fixed a bug with incorrectly resetting certain statistics collector columns at the warmup time. Fixed an issue in the statistics collector view. Fixed an issue with cell values executing when clicking in a table view. Included fixes listed in 19.0.5 below. People Fixed a crash involving elevators in certain situations. Fixed requests from timetables being redirected to the object's group if the object was unavailable. FlexSim 19.1.1 (June 17, 2019) Fixed Snap to Background to work with the new model background structure. Fixed a bug with sampling pointer labels from a properties window. Changed the person flowitem's shirt to use the object color. Included fixes listed in 19.0.4 below. People Fixed issues with certain People chart templates in experiments. Fixed a bug with deleting states in the People Settings view. Fixed an issue with an elevator bank with a non-zero z location. Added general events to the Elevator Bank. FlexSim 19.1.0 (April 29, 2019) Added a new graphical interface to the Calculated Table for building queries. Updated the UI for editing rack dimensions. Added more options for customizing people visuals. Moved operator shape options from the Operator tab to Quick Properties. Improved edit modes by using right-click to cancel the current action instead of immediately exiting the mode. Added global preferences for process flow and dashboard library options. Added the FlexScript API reference to the user manual and made it accessible outside of FlexSim. Added toolbar support for adding multiple model background drawings. Adjusted how the floor Z and grid Z settings work to improve multi-floor modeling. Updated the table view to show more helpful information for certain data types. Added support for pointer data in bundles. Added a pointer type to tracked variables. Added support for the NULLIF SQL keyword. Added support for linking combo boxes to nodes with pointer data. Improved the gantt chart. Updated how tree files are saved to improve saving certain datatypes. Updated pulling from lists to throw an exception when passing a bad query. Fixed a bug with the normal map lighting calculation. Fixed an issue with the picking focus when using drawsurrogate within a drawsurrogate object. Fixed exceptions on an array table that doesn't have column header information. Fixed an issue related to moving items that had not been released. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated the internal structure of the Rack object's variables. Removed the rackgetcontenttable() command. Removed support for running the simulation from a loaded state file. Process Flow Added an option to the container to center its title when the contents are hidden. Added a limit to the number of activity panels displayed in quick properties. Added a Milestone activity. People Added a Healthcare environment option. Added an Elevator Bank object. Added a Prop object and more options for object visuals. Added tables that automatically collect statistics for people models. Added people chart templates. Added a People Settings object to the toolbox for people models. Improved the names of people created with the Create Person activity. AGV Updated the distancetotravel() calculation to work with moving AGVs. A* Added support for multiple grids. Adjusted how conditions are defined to improve performance. FlexSim 19.0.9 (March 3, 2020) Fixed Object.message() not setting the event code for the event it creates when sending a delayed message. Fixed renaming various toolbox objects not updating open views of those objects. Fixed a bug in the Throughput Per Hour vs Time template charts. AGV Fixed issue with deallocating a control area too early (when exiting then immediately reentering). Process Flow Fixed a crash in the Date Time Source with lots of arrivals before the model start time. FlexSim 19.0.8 (January 10, 2020) Fixed an issue with high memory usage during an experiment run if the model called loadimage(). Fixed the Content pin button not working after popping out the Statistics panel from Quick Properties. Fixed a crash with the video recorder. Fixed a crash involving very long queries. Fixed an issue with the Pull Best Item popup. Fixed an issue with the Update Recipe popup. Fixed a bug with the Item Trace Gantt chart after items go through a separator. Fixed units not showing in Setup and Processing time fields. Process Flow Fixed a bug with copying a token's labels in Quick Properties. Fixed exceptions being thrown with custom themes. Fixed a bug in Wait for Event when listening to multiple objects while using Fire if Initial Value Meets Rule Fixed a bug causing the token's Shared Assets properties pane to not be shown in Quick Properties. AGV Fixed the code header of the Initialize Travel pick option. Fixed issues with the travel path travel distance getting off and causing errors on accumulating paths. Conveyor Fixed a bug in Set Conveyor Speed picklist options. FlexSim 19.0.7 (November 13, 2019) Fixed a bug with certain newer 3Dconnexion mice. Fixed an issue with the last keyframe of a scaled animation. Fixed snapping to a scaled dwg background. Fixed a bug with kinetic tracked variable level crossed events. Fixed issues with the OnChange event of certain types of tracked variables. Fixed some bugs with the table view. Fixed the stats structure of the person flowitem. Fixed a bug with certain composite staytime templates storing values as integers instead of doubles. Improved the usability of date and time picker controls. Process Flow Fixed an exception in the Date Time Source Arrivals window. Fixed the Assign To field of the Release activity not being searchable in the View Activities window. Fixed a bug in the Remove Value(s) from Array picklist option. Fixed the state flow collector to report null instead of zero if there is 0 non-excluded time. Fixed a bug with stats collectors listening to instances. AGV Fixed a bug with deallocating control points when AGVs are preempted. Fixed the calculation of the Z location of control areas in containers. A* Fixed issue with calling distancetotravel() on A* networks with elevators. Fixed an infinite loop when calling distancetotravel() before the A* network has been built. Emulation Fixed modbus not reconnecting properly after a reset. FlexSim 19.0.6 (September 30, 2019) Fixed a bug with saving large files. Fixed an issue with high memory usage with the FlexScript debugger. Fixed an issue with applying the Statistics Collector properties window with no columns. Fixed a bug with the duration shown in the Video Recorder window. Added support for Danish time formatting on charts. Changed getstream() to always return 0 in the Express version. Process Flow Fixed an exception related to containers and text. Fixed a bug with the display of the Schedule Source table. Improved error handling in OnDraw and several activity views. Changed the default partition constraint value from 10 to 1. A* Fixed a bug with displaying the heat map. Fixed a crash involving showing travel thresholds. Conveyor Fixed a bug with resetting conveyor traversal points. Fixed several issues caused by having a leg height <= 0. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Transfer Z locations will now be the conveyor's Z location if it has a negative leg height. FlexSim 19.0.5 (September 3, 2019) Fixed a bug with trying to use more than eight light sources. Fixed an issue with resizing objects getting stuck when the size goes to 0. Fixed resizing objects when the view focus is not the model. Fixed a crash caused by certain calculated table configurations. Fixed a bug where the Optimizer got stuck if there were more cores than possible solutions. Fixed Center in View when the view focus is not the model. Fixed a bug with adding Down Behaviors from a user library. Fixed a bug with getting the value of a statistics collector or calculated table using Table(). Fixed an issue with text fields in statistics collectors using incorrect format values. Fixed an issue with auto-complete for certain methods and properties. Fixed an exception in the calculated table properties window. Fixed a bug with time table events in certain circumstances. Fixed an overflow issue with the max content variable on queues and processors. Fixed copying FlexScript labels to selected objects from the Labels panel of Quick Properties. A* Fixed an issue with conditional barriers overwriting each other when too close together. Process Flow Fixed a bug in the Scheduled Source panel in Quick Properties when switching between source activities. FlexSim 19.0.4 (June 17, 2019) Fixed a bug with getqueryvalue() in certain situations. Fixed \"Optimize column for lookup\" option appearing for non-bundle tables. Fixed a positioning issue when adding objects using the quick library popup. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated the JT importer to account for measurement units. Objects using JT shapes may need to have their shape factors reset to draw at the correct scale. Process Flow Fixed an issue with tokens exiting a zone during the event they entered the zone. Fixed restoring a token to a synchronize activity after it moved through another connector. Conveyor Fixed a bug with roller skew kinematics. FlexSim 19.0.3 (April 24, 2019) Fixed an exception when getting the state of an object in certain conditions. Fixed a bug with using ?. syntax. Fixed a bug with box plots and sankey diagrams not updating their tables when drawn. Fixed a bug with exporting a single row with a database connector. Fixed an issue with unshift() and push(). Fixed a bug with GROUP BY in nested queries. Fixed a bug with multiple unions in a SQL query. Fixed a bug when finding objects in the tree view. Fixed a bug in the statistics collector with sorting and tracking. Fixed an exception in certain chart templates. Fixed a bug with bone animations not being applied correctly in certain situations. Fixed a bug in the dispatcher's pass to round robin if available picklist option. Fixed the Explore as Table option in certain views. Fixed undo issues in various views. Process Flow Fixed a bug with Resources creating extra objects when used in sub flows. Fixed the Assign Labels activity not allowing you to assign a reference to a group object. Fixed a Move Object activity field not allowing you to sample objects and get a direct reference. People Fixed a crash related to certain activities not being reset correctly. Fixed a bug with location reset positions. Fixed a bug with undoing the number of locations in a MultiLocation. Fixed some errors when rotating the view with a runtime license. Conveyor Fixed a bug with slug building for non-default orientations. Fixed an issue with non-accumulating conveyors stopping incorrectly under certain speed driver conditions. Fixed a draw exception when a conveyor is missing its type link. A* Fixed an issue with barrier creation mode. FlexSim 19.0.2 (February 27, 2019) Fixed a bug with saving module fsx files. Fixed a bug with calling Table.query() from within a dynamic list field. Process Flow Fixed creating user library objects linked to multiple process flow instances. A* Fixed moving multiple selected dividers. Fixed a bug with the grid size calculation. Fixed a bug with the location of bridge travelers within a container. Fixed a bug with sizing barrier cells. Fixed a bug with the A* help links. FlexSim 19.0.1 (February 20, 2019) Fixed a bug with SQL joins. Fixed improper grouping when using a UNION ALL. Fixed a bug with using big integers in SQL. Fixed a bug in the wrl importer when using LOD nodes. Fixed a bug with timer events in the Statistics Collector. Added support for the en-AU region on charts. Fixed selecting multiple objects from a group. Fixed a bug in Quick Properties with applying variables to selected objects of different classes. Fixed editing newly created events in the graphical Time Table view. Grayed out the Start and End date picker when in the Daily Repeat mode of the Time Table. Added a combobox with days of the week when in the Weekly Repeat mode of the Time Table. Included fixes listed in 18.0.10 below. Process Flow Fixed an issue with the Create Object activity assigning labels late. Fixed a bug with pointing Variable shared assets to global variables. Fixed a bug with the Request Content stats on a Resource under certain conditions. FlexSim 19.0.0 (January 3, 2019) Added support for importing JT files. Added a way to directly animate 3D shapes with bones. Added a way to parent subcomponents to a bone on a 3D shape. Updated calculated tables and chart templates to be able to save their data during an experiment. Added support for SQL keywords UNION, UNION ALL, INTERSECT, and EXCEPT. Updated the time table's weekly and daily modes to use a graphical display. Improved the time table's user interface. Added options for stacking bars on a histogram and added more bar modes. Added a Column Sets feature to statistics collectors. Added more options for event listening in statistics collectors. Added an option to statistics collectors and calculated tables for object path display depth. Added an option to statistics collectors to stop tracking row values after specified events. Added an option to milestone collectors to start new entries on the next milestone. Added options to record more data in additional columns on a milestone collector. Added enable/disable right-click menu options to statistics collectors in the toolbox. Improved the performance of calculated tables in certain configurations. Fixed a bug with Always Leave Entries on List when reevaluating multiple back orders. Fixed a bug with color spilling from one mesh to another when using shape data overrides. Fixed scaling issues and a crashing bug when loading certain STEP and IGES files. Process Flow Improved the Token.create() method to be able to create child tokens. Added a new Person Flow type of Process Flow. Fixed a bug with a resource connected to a global list deleting the list when the resource was in an instanced flow. People Added a Process activity. Added a Remove Person activity. Added various activity sets to quickly create common groups of activities. Added a priority value to resource objects that is used for acquiring and preempting resources. Added advanced options to the Process activity for handling preemption. Added functionality for simulating shift schedules with time tables and down behaviors. Improved the UI for how people objects are added to groups. AGV Improved control point selection on paths in the 3D view. A* Added a way to draw a heat map based on a node's percentage of total traversals. Added a Two Way option to preferred paths and dividers. Added a Condition option to A* objects to optionally disable them under certain circumstances. Added a Mandatory Path object used for defining sets of paths where certain connected objects can travel. Updated the Barrier object to be able to specify patterns to determine how it affects the grid. Added a FlexScript API for A* objects and data. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug with A* barriers blocking space larger than their actual size. FlexSim 18.2.3 (December 27, 2018) Fixed a bug with the dashboard model input link sampler. Fixed a bug with missing queue trigger pick options. Fixed a bug with the decrement option in the Set Tracked Variable popup. Fixed a bug with legacy conveyor triggers. Fixed a bug with exporting pie charts to html. Fixed an exception when clicking on the highlighted pillar while creating walls. Included fixes listed in 18.0.9 below. Process Flow Fixed a bug when using a query to acquire a resource from a global list. Fixed some issues with instanced lists. Fixed issues with sampling token labels. People Added pick options for the On Entry and On Exit triggers of location objects. Conveyor Fixed a bug with items' offset kinematic not being reset properly. Fixed an issue with popup distance being negative when the conveyor is reversed. AGV Fixed an exception in determining whether a path transfer can be allocated. Fixed an issue with AGVs running over each other on accumulating paths in certain conditions. Emulation Added pick options to the value field of control actions. FlexSim 18.2.2 (September 7, 2018) Fixed an exception with adding performance measures under certain conditions. Fixed a bug with duplicating milestones. Fixed a bug with the legacy chart global preferences. Process Flow Fixed an exception when creating zones caused by the instanced resource block change. FlexSim 18.2.1 (September 6, 2018) Fixed a bug in the milestone collector UI. Fixed a bug in the Stop Object and Call Operators MTBF MTTR down function pick option. Fixed an exception when loading media with misconfigured shapedata. Included fixes listed in 18.0.8 below. Process Flow Fixed a bug with listening to global instanced resource blocks. AGV Fixed a bug where AGVs were not properly firing way point triggers after being preempted. Emulation Fixed an exception on reset with binding statistics of internal emulation variables. FlexSim 18.2.0 (August 8, 2018) Added an interface for running experiments and optimizations on the cloud. Added a mechanism for adding new charts as experimenter performance measures. Added a Sankey Diagram to the dashboard charts. Added a Milestone Collector statistics tool and chart templates. Added a way to customize how objects draw their 3D shape meshes. Added {} syntax to specify FlexScript expressions in SQL queries. Added a Down Behavior tool that can be used by Time Tables and MTBF MTTR objects. Added a message() method to the Object class to replace sendmessage() and senddelayedmessage(). Added a varchar bundle field type for variable-length strings. Added status bar updates to the table view. Updated the bar and pie charts with more options and data formats. Added duration settings to the gantt chart. Added new task sequence classes to the FlexScript API. Added a getCategoryName() method to the TrackedVariable class. Added getEntryFromValue() and reevaluateBackOrders() methods to the List class. Added padStart() and padEnd() methods to the string class. Added an option to sort back orders independent of entries when reevaluating back orders. Added an option to configure a list to always leave its entries on the list. Added events to the Statistics Collector. Added options for sorting rows in statistics collectors. Added dot syntax label access to List.BackOrder. Added a backOrder keyword that is available in a list back order queue strategy. Added a new overload to List.pull() that takes both an array and a query. Updated user library functionality to better handle conveyor types and containers. Updated Move into Highlighted code to preserve global position and rotation. Improved sampler options in various places. Improved drop-down options with label values in several places. Updated the Ctrl+W keyboard shortcut so it correctly closes the window that has keyboard focus. Updated the query() command to re-throw exceptions. Fixed a bug with updating bundle indexes when using certain commands. Fixed a performance bug with pasting into bundle tables. Fixed a window docking bug. Fixed a bug with the robot not drawing collision spheres or its stopped indicator. Included fixes listed in 18.0.7 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed Variant math operations on non-numbers to throw exceptions. Updated the Source to automatically attach task executer flowitems to the DefaultNavigator. Updated dumpquery() to use bundle varchar fields. Fixed an issue with the Z-axis being inverted for screen-locked shapes in perspective 3D views. Process Flow Added stop() and resume() methods to the Token class. Updated Edit Mode so you can no longer move activities when it is off. Added a check box to quick properties to turn off all trace histories. Updated Wait for Event to handle listening to arrays of objects. Updated Pull from List so you can use it with a Resource shared asset. Updated the Resource so you can point it at a global List or a List shared asset. Added query options to the Acquire Resource and Pull From List activities for 'Same as Last Pulled/Aquired'. Added a way to sample shared assets in certain fields. Updated the naming convention for Resource object copies. Added an error message when trying to rename a shared asset the same name as another. Improved the performance of the Wait for Event activity. People Updated the multi-location to allow people to enter without an available sub-location. Conveyor Added a max count slug building property to the conveyor type. Added a catch condition to the power and free functionality to customize whether a given dog will actually catch an item. Added the capability to reverse conveyors under certain conditions. Changed the roller skew kinematics to be based on item travel distance instead of time. Changed the conveyor's belt repeat distance to sync to the adjusted dog interval. Fixed a bug with decision points snapping to grid when added with a conveyor from a user library. AGV Updated path transfers to prioritize their requests. Fixed an issue with accumulating path allocations causing AGVs to get stuck. Fixed various issues with AGVs having different deceleration values. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Improvements to AGV proximity detection on accumulating paths. Emulation Fixed Modbus polling for changes. Fixed the Modbus panels in the Variable shared asset so they show the associated object now. FlexSim 18.1.2 (June 26, 2018) Fixed a bug with the Rack's OnEndDwellTime trigger not appearing in its list of triggers. Fixed a bug with restoring original state in the experimenter. Fixed a bug with walls not drawing correctly inside containers. Included fixes listed in 18.0.6 below. Process Flow Fixed the match value for the Event-Triggered Source and Wait for Event so you can reference current. FlexSim 18.1.1 (May 4, 2018) Fixed a bug with getting a SQL Server field with nvarchar(max) data type. Changed Copy Variables From Highlighted so that it adds variables that don't exist. Fixed a bug with the triggers page not updating when using the properties window arrow buttons. Fixed a bug in the statistics collector interface. Fixed a bug in the time plot chart legend display. Fixed a bug with table queries in C++. Fixed an issue with listening to certain list events. Fixed a bug with the transportoutcomplete() and transportincomplete() commands. Fixed a bug with Process Flow templates not being updated by model update scripts. Fixed a bug with the Rack's On Entry trigger not showing picklist options. Fixed a bug with some triggers not working correctly on certain fluid objects. Included fixes listed in 18.0.5 below. Process Flow Fixed a bug in the zone token display window. Fixed an issue with listening to certain shared asset events. FlexSim 18.1.0 (April 9, 2018) Added a Database Connector tool and Database FlexScript API. Updated the Emulation module and added it to the toolbox. Updated object triggers to be dynamically added and executed to improve performance and flexibility. Added an option to store StatisticsCollector bundle data on the hard drive. Added a global preference for date and time formats, which will default to the system's locale settings. Updated the stick() command to be able to get information about the VR headset by passing -1 for the stick number. Added a Box Plot chart type. Added a visual Walls object, which can be connected to A* as a member. Added an option to reverse rows on a gantt chart. Updated how the gantt chart handles colors. Added a time window option to several charts. Improved axis title options on several charts. Added a y-axis range option to the time plot. Output, system, and compiler consoles now wrap lines. Added a binoculars button to the bottom of properties windows. Fixed a bug with using local variable \"a\" within FlexScript lambda commands, such as findmatch(). Included fixes listed in 18.0.4 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Removed FlowNode, Reservoir, WatchList, and other unused library class objects. Changed transportincomplete() to be more fail-safe so that it only affects the object when called correctly. Fixed an issue with the Rack sometimes receiving items out of order when the upstream object is using a transport. Process Flow Added a Variable shared asset. Updated the Event-Triggered Source and Wait for Event activities to be able to match values. People Added a Waiting Line object and a Wait in Line activity. AGV Fixed a bug with preempting an AGV during a pre-arrival event. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Improved AGV proximity detection for stop-space-based accumulation. Fixed an issue with reversing direction on accumulating paths. A* Added a routing mode for traveling at right angles only. Added an option for stopping and turning when changing directions. Added an option for routing by travel time. Improved the usability of creating and editing barriers and dividers. Added an option for snapping dividers between grid points. Fixed some visual issues with various components. Fixed a bug with distancetotravel(). Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Improved the accuracy of the calculation of which grid points are affected by dividers. The mechanism for recovering from deadlock has been changed. The path costing system was slightly changed to allow for travel-time-based routing. FlexSim 18.0.10 (February 19, 2019) Fixed an issue with spatial property fields not being updated when moving an object. Fixed an issue with pasting cells with no data in tables. Fixed using the .as() method in SQL. Fixed a bug with the COUNT function in SQL. Fixed a bug with SQL window functions. Improved rotating selected objects to work better with objects in containers. Fixed a bug with copy/paste when the 3D view focus isn't the model. Fixed a bug with Find Objects when the 3D view focus isn't the model. Fixed a bug with getmodelunit(CURRENT_TIME_STR) sometimes not working correctly. Process Flow Fixed an issue with trying to acquire zero quantity of a resource. Conveyor Fixed an exception in unloading to entry transfers under certain conditions. Fixed a bug with items getting stuck in time-based conveyor transfer situations. FlexSim 18.0.9 (December 27, 2018) Fixed a bug with stepping into a function while debugging FlexScript. Fixed a bug with disabling calculated tables. Fixed an inconsistent FlexScript bug with constructing variants within a conditional statement. Fixed a bug with delayeventsofobjects() deleting event parameters. Fixed a bug with the icon grid scroll bar. Fixed a bug with default animation durations using certain model units. Fixed a bug with the Excel export changing the workbook calculation setting to manual. Fixed a bug with TrackedVariable.getTotalTimeAt(). Fixed a FlexScript crash when calling splice() on an empty array. Fixed an exception related to list partitions. Fixed an exception with Table.cloneTo() when cloning duplicate column names to a bundle. Fixed several table copy/paste bugs. Fixed a bug with evaluating certain strings in watch variables. Fixed an issue with undos on array table views. Fixed a bug with statistics collectors listening to tracked variables. Fixed a FlexScript exception with the ?. operator. Fixed a bug with the legacy chart preferences. Fixed a performance bug with drawing racks in certain configurations. Fixed a bug with the state gantt chart listening to different profiles. Fixed a bug with specifying string literals in certain UI fields. Updated the chart template precision setting to affect precision, not significant digits. Fixed a bug in the BasicConveyor. Fixed selecting objects in a group with nested sub groups. Fixed performance measure pick options to support nested groups. Fixed bugs with the optimizer UI. Fixed a bug with the save dialog appearing when user libraries with process flows were open. Fixed a bug with applying code changes to multiple objects with quick properties. Fixed a bug with saving the state of queues. Fixed an exception when running models using the web server with a runtime license. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug with listening to rate changes of kinetic tracked variables. Process Flow Fixed draw errors when adding an activity in a container to a user library. Fixed a bug with setting a tracked variable label in a Create Object activity. Updated the Activities window and the Zone status window to show paths instead of names. Fixed a bug with acquiring sub group members on a resource. Fixed a bug with assigning the event object in some Wait for Event activities. Fixed issues with the Date Time Source when using model time units other than seconds. Fixed a bug in the Remove Value from Array picklist. Fixed some undo bugs. Conveyor Fixed a crash with loading the state of certain conveyor situations. Fixed a bug with creating items directly in entry transfers. Fixed a bug with the Translate Item pick option. People Adjusted the kinematics for the lay down / stand up animations for different model units. Fixed a bug with sub-locations being deleted on reset. AGV Fixed a bug with the AGV.currentCP property. Fixed an issue with redirecting and continuing on prearrival. Fixed a bug with path routing on accumulating paths under certain conditions. Fixed a bug with cpdeallocate() not reevaluating allocation requests. FlexSim 18.0.8 (September 6, 2018) Fixed an issue with the size of the 3D font when using Korean language settings. Fixed a bug in the checkdllconnection() command. Fixed a bug in the Pull From List pick option when current is passed into the function. Conveyor Fixed a bug with handling traversal events associated with traversals on upstream conveyors. Fixed a precision issue with power and free conveyors at extremely high speeds. FlexSim 18.0.7 (August 7, 2018) Fixed an exception in the stop time interface. Fixed a bug with rendering Japanese characters in object names in the 3D view. Fixed copying and pasting Unicode characters and multi-line cells between FlexSim and Excel. Fixed a bug with pasting blank cells changing string data to number data. Fixed a bug with exporting Unicode characters to Excel. Fixed a bug with listening to enumerated values in the Statistics Collector. Fixed a bug with rendering certain dashboard charts with a runtime license. Fixed a bug in the Event Log Settings window. Fixed a bug with renaming certain user library objects. Fixed an issue where statistics collectors were being duplicated on each reset in a child process. Fixed an issue where statistics collectors did not correctly store replication data from a child process. Process Flow Fixed a bug with date time source column names when sorting its table on reset. Fixed an issue with creating tracked variable labels in a create tokens activity. Conveyor Fixed a crash when transferring blocked items under certain conditions. Fixed a bug with syncing dog intervals in the experimenter. Fixed an issue with convey state inconsistencies on items straddling inline transfers. AGV Fixed an issue with On Arrival being executed twice for the same control point. A* Fixed a crash caused by showing the heat map. FlexSim 18.0.6 (June 26, 2018) Fixed a crash with printing long strings in the script console. Fixed a bug with the debug() command. Fixed a bug with the robot joint speeds table. Fixed a bug with the Use Legacy SQL Nulls checkbox in model settings. Fixed exceptions when pinning state charts. Fixed a bug with tree xml save when using split-points on a main node with object data, such as the model. Fixed a bug with running the optimizer in 32-bit. Fixed a bug with deleting performance measures. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed errors in SQL aggregation functions with non-numeric values. Fixed issues with the Queue's place offset calculation. Fixed bugs with preempting during offset travel operations using a navigator. Fixed a bug with passing 0 to sets() and setnodestr(). Process Flow Fixed an issue with fields interpreting properties as labels. Fixed a bug with 3D mouse movement stalling other views' draw when the model is running. Conveyor Fixed an issue with entry transfers not reopening inputs in certain situations. AGV Fixed a bug with adding AGV template objects to certain dashboard charts. Fixed an issue with copied AGVs not copying their AGV Type correctly. A* Fixed bugs with aborting travel. FlexSim 18.0.5 (May 4, 2018) Fixed the display of window titles with Unicode characters. Fixed a bug with removing breakpoints while debugging. Fixed a bug with boolean comparisons of Object.attrs nodes that do not exist. Fixed an issue with selecting experiment child replication port numbers. Fixed a bug with FlexScript stack overflow detection on certain systems. Fixed bugs with enumerated row modes in the Statistics Collector. Fixed a bug with the GUI Builder selection box on high DPI displays. Fixed some inconsistent exceptions in certain calculated tables. Fixed a bug with handling percent characters in exporttable(). Fixed a bug with using commented macros in node paths. Fixed an issue with loading models saved in full screen view. Fixed a bug that excluded conveyors from the item trace gantt chart. Fixed surrogate objects not respecting the no select flag of their parent object. Fixed a bug with pasting into table views from Google sheets. Fixed exceptions with opening chart templates while over the model limit. Fixed an exception in the experimenter performance measures code. Fixed a rendering issue with floor storage racks. Fixed the saved 3D views so they store the viewfocus correctly. Fixed an issue with losing unapplied code after opening and then closing another docked code editor. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug with string.split() incorrectly handling adjacent delimiters. Fixed the Queue's place offset calculation when using stack inside item placement. Fixed a precision error in the DefaultNavigator that caused it to sometimes create an extra event in nearly 0 time for a traveler's arrival. Process Flow Fixed a bug with releasing tokens from a task activity where the task sequence has been moved to another task executer. Updated the properties window ProcessFlow Properties button to handle multiple attached flows. Fixed a bug with Custom Task activities changing icons. Fixed an issue with certain fields incorrectly giving SQL parse errors. Fixed exceptions with creating conveyors within instance objects. Fixed exceptions caused by a bug with visually tracing tokens. Fixed a crash with displaying large arrays in token labels. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Reverted a change to the Move Object activity so that Preserve Global Locations sets the location after entering the object. Conveyor Updated the mechanism for connecting conveyors to other conveyors to use existing transfers when possible. Fixed an issue with calculating the proper travel distance of a conveyor traversal event. People Fixed a bug with a destination object in the Transport Person activity. Fixed an issue with some triggers not firing correctly. AGV Fixed an issue with pasted AGV paths not showing their transfers properly. Fixed a bug with redirecting AGVs to intermediate control points as their final destination. A* Fixed the travel threshold rendering so that it shows both the route and travel end nodes. FlexSim 18.0.4 (April 6, 2018) Fixed a bug with starting experiment replications in certain conditions. Fixed Table.cloneTo() not copying certain cells correctly. Fixed dragging multiple selected objects inside a drawsurrogate node. Fixed a bug with how chart templates handle warmup times. Fixed a bug with using SQL inner joins on statistics collector tables. Fixed some issues with how exporttable() handles commas, quotes, and line breaks. Fixed some issues caused by chart templates with the same name. Fixed a bug with the statistics quick properties panel not positioning its fields correctly. Fixed an issue with deleting a breakpoint while debugging. Fixed an issue with adding breakpoints in certain conditions. Fixed an issue with the stop time popup after opening a model. Fixed a bug with some tracked variable history nodes not being initialized correctly. Fixed the positioning of table view buttons for certain cell datatypes. Fixed several issues with the histogram, time, and pie charts. Improved the coloring and spacing of several charts. Fixed issues with the new charts in the experimenter report builder. Fixed a bug in the 3D view right-click Groups menu options. Fixed an exception in the properties window for animation components. Fixed errors caused by copying certain variables with Edit Selected Objects. Fixed an issue with the empirical distribution chooser UI. Fixed pinning state gantt charts from quick properties. Fixed a crash with inferred FlexScript datatypes in certain circumstances. Fixed an issue with back order queue strategies not working properly with a WHERE clause in the pull query. Fixed an issue with large integer literals in FlexScript. Fixed a bug with using a local variable name within a string in a debugger watch expression. Fixed excelreadcell() in FlexScript. Fixed a bug with calculating variance or standard deviation using getdatastat(). Fixed a bug in the experimenter with transferring pfm nodes. Fixed an issue with the labels page in object properties not repainting when using the arrow buttons. Process Flow Fixed the help links for several activities. Fixed an issue with listening to events on objects and activities with colons in their name. Fixed a bug with the Run Animation activity causing tokens to get stuck in the activity if the animation doesn't exist. Fixed a bug with the Date Time Source not properly using the calendar start time with Date Based schedules. Fixed the Select Object button in table views so it properly selects tokens. Fixed the flowchart shape type drop-down in quick properties showing the wrong type. Fixed an exception with the Processor with Operator template. Conveyor Fixed an issue with editing a conveyor's start or end Z coordinates. Fixed a bug with hidden conveyors in render mode. Fixed an exception with accessing the conveyor item in certain situations. People Fixed a bug with saving a People model immediately after the model update process. AGV Fixed a bug with AGV redirection/preemption when the AGV must immediately turn around. FlexSim 18.0.3 (February 28, 2018) Fixed a bug with new charts not displaying correctly with the web server. Fixed an exception in Table.query(). Fixed exceptions in Table.addRow(1) and Table.addCol(1). Updated 3D view selection code to improve graphics compatibility. Fixed a bug with task bar updates when FlexSim is open without a UI. Changed the Clear Reset Position option to disable the auto update of reset positions. Fixed a bug with preempting a traveler on a non-passing edge with a length equal to the traveler's size. Fixed a bug with deleting labels with no name. Fixed bugs with throughput chart templates. Included fixes listed in 17.0.13 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated list pulls to create a back order when using Allow Multiple Pushes and a back order fulfillment event is pending. People Fixed a bug with the ProcessFlow activity limit when using the People Module. AGV Fixed several bugs with the AGV elevator template. Changed AGV.currentCP to not be read-only. A* Fixed a repeatability issue with using the distancetotravel() command. FlexSim 18.0.2 (January 18, 2018) Fixed an issue with certain DWG files not rendering properly. Fixed a bug with adding tracked variables. Fixed a bug with the HTC Vive displaying incorrectly in the right eye when shadows are turned off. Fixed a bug with packing media for extra animations added to shapes that aren't packed, such as the default operator. Fixed a bug with setting column headers on a table with no rows. Fixed some bugs with the Groups window when it is docked. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed inconsistent behavior in Table.addRow() between node and bundle tables. Fixed a bug with Table.moveCol() not working correctly with bundle tables. Fixed a bug with Table.addRow() and Table.addCol() not setting the datatype correctly in certain cases. Fixed a bug with table headers not being updated correctly in certain cases. Fixed a bug with Table.cloneTo() when using nulls in a bundle table. Updated wheelchair, push, push2, and ascend stairs animations. Conveyor Fixed a bug with flowitems incorrectly leaving the conveyor system in certain situations. FlexSim 18.0.1 (December 20, 2017) Fixed a crashing issue with certain chart templates. Fixed the Rack's On Entry trigger code header and event definition. Included fixes listed in 17.2.5 below. Conveyor Fixed the On Process Finish event definition on the Station object. FlexSim 18.0.0 (December 15, 2017) Added a new People module. Added new dashboard chart templates to quickly collect and display statistics. Legacy charts are hidden by default in the Library and can be enabled through Global Preferences. Removed the basic Person flowitem and renamed the TaskExecuterFlowItem to Person. Added functionality to the List's pull method to allow you to pull an object/node directly (without writing SQL). Updated ODA to be compatible with DWG 2018 shapes. Updated Assimp to be compatible with the latest FBX file format. Added a RegExResult class for iterating over the matches in a regular expression. Lists can now use arrays as partition ids. Added a mechanism for automatically setting the reset position of objects after moving them by setting their resetposition variable to 1. Added a By Lazy Interval update mode to the calculated table. Improved calculated table performance by reducing the amount of table updates. Improved statistics collector performance by reducing the number of updates to Always columns. Table views can now be set as read-only using the grayed attribute. Added an Ignore Warmup option to statistics collectors. Updated OptQuest so that it can run more than 10,000 solutions. Added a pick option for restoring default values in the Global Table's On Reset trigger. The Query test field is now a multi-line text box. The Source now adds labels to items before calling the OnCreation trigger. Updated the table selection for the Excel Import/Export. Improved color options in various dashboard charts. Changed the model update dialog to be able to autosave the model with an incremented number. Added many new animations for the operator and the person flowitem. Updated many stochastic pick options to use getstream() as the default stream parameter. Updated the TaskExecuter to connect to the DefaultNavigator when created. Improved the Group UI. Updated the Library view to not change when clicking on the User Manual view. Changed the Tree view's Explore > As Code so that it closes the tree's edit view. Fixed a bug with list initial contents having old values in label fields. Fixed a bug with the statistics collector chart interface checkboxes. Fixed an OnDropWindow exception. Fixed some exceptions in the Table View when viewing an Array that no longer exists. Included fixes listed in 17.2.4 below. Process Flow Added a Date Time Source activity. Added a Wait for Simultaneous Arrivals Before Entry option to the Zone. Added autocomplete for instanced flow labels (current). Added a zoneistokeninsubset() command. Conveyor Added a Round Robin destination option to the Send Item pick option. A* Added a visual option to show the travel threshold for objects. Improved the draw performance and fixed the timing of some graphical updates. AGV Fixed a bug with redirecting AGVs at times other than On Pre-Arrival of way points. FlexSim 17.2.5 (December 20, 2017) Included fixes listed in 17.0.12 below. FlexSim 17.2.4 (December 13, 2017) Fixed a bug with the statistics collector so that global shared assets only get one row in the enumeration table. Fixed some issues with the FlexScript Table() constructor on statistics collectors and calculated tables. Fixed bugs with running experiments with statistics collectors in the runtime version. Fixed an issue with namespace FlexScript constructors no longer working. Fixed a bug with downcasting an Object to a Group. Fixed an issue with opening user libraries from a path that has Unicode characters. Fixed issues with using the Time Table's date-based calendar with model time units other than seconds. Fixed the new dashboard charts to work correctly with Export to CSV. Fixed a bug with following objects in views being recorded by the video recorder. Changed the charts to remove trailing zeros/decimals for categorical values. Changed timeplot charts to center rangeless data instead of putting it at the minimum. Fixed an issue with compiling C++ code. Fixed an issue with pinning labels to dashboards. Included fixes listed in 17.0.11 below. Process Flow Fixed a bug with zone subset calculations. A* Fixed a bug caused by using the distancetotravel() command in conjunction with collision avoidance. Fixed travelers jumping when inside an object and they get blocked. FlexSim 17.2.3 (November 7, 2017) Fixed a bug with using events and enumerated rows together in the stats collector. Fixed a bug with Quick Properties labels Explore > As Table. Fixed an exception in the Library window. Fixed a bug with the legend on some time plots and histograms. Fixed adding string data to the first label on a source. Included fixes listed in 17.0.10 below. Process Flow Fixed an issue with restoring the context of a token saved in a Pull from List when using the Assign To's Insert at Front option. Fixed issues with the Arrow not saving properly and its text not working properly. FlexSim 17.2.2 (September 26, 2017) Fixed a bug with certain large 3D shapes not importing correctly. Fixed VR scaling issues when using length units other than meters. Fixed bugs in the sound commands. Fixed an off-by-one error in the representation of month in DateTime.toString(). Fixed DateTime.fromExcelTime(). Fixed a bug with the Calculated Table not updating at time 0. Fixed a bug with casting a List.BackOrder to a treenode. Fixed a bug in stick(STICK_VR_HAND_WORLD_ROTATION). Fixed some Unicode UI issues in the Library view. Fixed a bug with the Statistics Collector repeat time events. Fixed an exception when using multiple Statistics Collectors with the same name. Fixed a bug with the event log export breaking FlexSim's locale settings. Fixed a bug with SQL UPDATE not working correctly in certain situations. Fixed a bug with user library auto-install components. Added a month property to the DateTime class. Removed the user library buttons from the Statistics Collector properties window. Process Flow Fixed a crash when connecting a Resource to an A* Navigator. Fixed issues with the Wait For Event, specifically listening to Groups or value change events with multiple tokens. Fixed a bug with the Arrow properties window. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug in the Statistics Collector. In enumerated row mode, if the row value was a ProcessFlow activity in a general flow, then data.processFlowInstance no longer returns the flow; it now returns null. AGV Fixed an issue with AGVs with trailers not properly finding their path after being preempted. FlexSim 17.2.1 (August 31, 2017) Included fixes listed in 17.1.6 below. FlexSim 17.2.0 (August 31, 2017) Reorganized the User Manual and updated its formatting. Added more topics, tutorials, and reference pages to the User Manual. Added new Statistics Collector and Calculated Table tools. Added new generic charts for plotting statistics gathered with Statistics Collectors and Calculated Tables. Updated the pin to dashboard buttons to create and use Statistics Collectors instead of the legacy charts. Added a Variant constructor and assignment operator to Vec3 and Color classes. Added functionality for copying dashboard charts as images, and pasting images into dashboards. Added new interfaces to FlexScript, such as Math, Group, and DateTime. Added toNum() and fromNum() methods to the string class. Added a setState() method to the Object class that will work correctly with listening to state changes. Improved handling of read-only model files. Keyboard shortcuts (Ctrl+PageUp and Ctrl+PageDown) and additional enhancements for switching tabs. Added the ability to have null values in a bundle. Added the ability to make kinematics exclude incline rotation when managing rotations. Improved the parenthesis and quote autocomplete functionality. Added autocomplete for curly and square brackets. Added a new print() command to write to the output console more easily. Added support for instanced meshes. Updated the animation system so a single shape can have multiple animators from different shape files. Changed the assimp 3D importer so that it can extract and load embedded textures. Added support for using specular maps and gloss maps. Added support for FlexScript dot syntax in SQL queries. Added the capability to specify a warmup time in the interactive model run. Added options for following objects with the view. Improved MTBF/MTTR state listening to use less events and be more precise. Updated the Network Navigator to work for an object that is inside a container that is connected to the network. Fixed a bug with global variable highlighting and autocomplete. Fixed an issue with destroying a TE on a network when it blocks space on the network. Included fixes listed in 17.1.5 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug with min() and max() when using distribution functions. Previously, getting the number of columns in a Global Table using Table.numCols or gettablecols() returned 0 when the number of rows was 0. Column headers and data types are preserved even when there is no row data. These commands now return the number of columns. Changed operators to not change their incline rotation when traveling on inclines. This will change location calculations if you have advanced logic based on internal operator locations. NodeListArrays like Object.outObjects can no longer be implicitly cast to an Array. Use the toArray() method instead. Fixed a bug with animations drawing their first frame instead of their last frame at times beyond the endtime. Added a special rule for ambient color {0, 0, 0} to not use the ambient color. This change will make shapes with ambient {0,0,0} to appear brighter. Change the ambient color to a dark gray, such as {1,1,1} if you want them to remain dark. Fixed a bug in the shader that dulled specular highlights with the diffuse texture. This may change how shapes look; they may appear shinier now. Added the IS NULL and IS NOT NULL clauses to SQL. Math and comparison operators on null values now return NULL. FlexSim's SQL execution engine is now more in line with the SQL ANSI standard regarding null values. Specifically, if you do comparisons or math operations on elements that have null values, this will return null values. This is different than in FlexScript, where a null value acts like 0 in math operations. Also, null values will be ignored in aggregation functions like AVG(). An option to use legacy SQL nulls was added to Model Settings to preserve backwards compatibility. Upgraded models will automatically enable this option, but new models will default to using the SQL ANSI standard for nulls. Added support for more SQL query operators, such as the case-when-then-else-end operator and window functions. This adds many new keywords to SQL, meaning that if you used these as column names in older queries, they will create syntax errors in the query parser in this version. To fix this, put square brackets [] around the column name. Changed accessing dynamic label properties to use evaluate() instead of value. For example, consider the following code sample: Variant value = current.MyLabel; In 17.1 and previous, this code was the same as: Variant value = current.labels[\"MyLabel\"].value; In 17.2 we changed it so that this code is now the same as: Variant value = current.labels[\"MyLabel\"].evaluate(); The difference is in how FlexScript-toggled node values are retrieved. In 17.1 and previous, current.MyLabel would have just given the text that is the FlexScript code. In 17.2, retrieving current.MyLabel will actually evaluate the FlexScript as code. This is consistent with how table values are accessed. If you have old code that explicitly tried to get the code text with current.MyLabel, you will need to update that code in 17.2 to use current.labels[\"MyLabel\"].value. Process Flow Added a Material Consumption and Replenishment template. Added functionality for pasting images into Process Flow views. Fixed all of the right click menu options under the View menu in the Process Flow View. Conveyor Added a Gap-Optimizing Merge Controller Process Flow template. Added instanced rendering to improve Render Mode performance. Changed Render Mode to be enabled by default. Added new visual options for conveyors. Improved run speed performance of the Conveyor Module. AGV Added unload-to-empty capability to the AGV Process Flow template. A* Added a bridge element to the A* network. Added functionality for collision avoidance. Improved heat maps for analyzing A* traffic. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed the path finding algorithm for the A* navigator. When you tell an A* traveler to travel to an object, now it will behave more like the default navigator. It will calculate a \"threshold radius\" around the object, based on the object's size. Then it will only travel to the edge of that radius. This makes it work better especially for loading/unloading to/from rack objects. The travel operation won't commit as much to traveling to the center of the object, because that can be left to the load/unload operation, which determines exactly where in the rack to pick/place the item. However, this change does affect how older models work because it changes the routes that travelers take. FlexSim 17.1.6 (August 31, 2017) Included fixes listed in 17.0.9 below. FlexSim 17.1.5 (August 30, 2017) Fixed another bug with loading 3D shapes with Unicode path characters. Fixed copying cells/data in bundle tables. Included fixes listed in 17.0.8 below. Process Flow Fixed bugs in the right-click View menu options. FlexSim 17.1.4 (July 14, 2017) Included fixes listed in 17.0.7 below. FlexSim 17.1.3 (July 11, 2017) Fixed a bug with Unicode characters not working in dashboard chart titles. Fixed a bug with disabled auto-parentheses. Fixed unshift() method showing up in autocomplete of inObjects, outObjects, etc. Fixed a bug with opening Excel workbooks with Unicode path characters. Fixed a bug with using the Video Recorder with Unicode path characters. Fixed a bug with loading 3D shapes with Unicode path characters. Fixed an uninitialized memory issue with aliased select columns. Fixed a reset error with listening to activities in some cases. Fixed a bug with list pull feature of using a SELECT clause on a tracked variable label. Fixed the string.slice() method. Fixed some webserver JavaScript bugs. Fixed a bug with models in subfolders in the new webserver. Included fixes listed in 17.0.6 below. FlexSim 17.1.2 (April 28, 2017) Fixed issues with the List's initial content. Fixed a bug with non-ASCII characters displaying incorrectly in the event list and event log. Fixed a bug with the SQL LIKE and UPDATE clauses not working correctly. Fixed an issue with using FlexScript commands in SQL statements. Fixed a performance issue with saving files. Fixed a bug with copy/paste from Excel not using the correct locale settings. Fixed a bug with the MultiProcessor's custom state profile. Fixed the Set Tracked Variable pick option. Fixed ItemList errors when items don't have a Type label. Removed deprecated commands from the code builder library. Included fixes listed in 17.0.5 below. Conveyor Fixed Entry Transfer Item Orientation header. Fixed Merge Controller Release Strategy pick option. FlexSim 17.1.1 (April 14, 2017) Changed the new \"type\" label to be \"Type\" to prevent confusion with the Variant's type property. Fixed an issue with Table.query() not properly taking $ syntax. Fixed a bug with the 3D view names displaying non-ASCII characters incorrectly. Fixed a bug with the Excel import not reading certain cells correctly. Fixed several locations where treenode was being improperly cast to Object. Fixed an issue with global variables and user commands showing errors during the model update process. FlexSim 17.1.0 (April 10, 2017) Changed FlexSim to store strings using UTF-8 encoding. Added support for Oculus Touch controllers. Implemented OpenVR for HTC Vive compatibility. Improved the shadow frustum calculation in VR so that shadows look better. Added a global preference for changing the resolution of the shadow map. Added support for nested queries in SQL. Added ROW_NUMBER as a SQL keyword. Implemented F2 and Esc functionality in tables. Updated the table view and labels tab to be more robust with different datatypes. Added Table(name) method for referencing Global Tables. Added more FlexScript classes, including List, AGV, Conveyor, and TrackedVariable. Added more properties and methods to existing FlexScript classes, including Object stats and additional string methods. Improved scientific notation for literals in FlexScript. Added a start value to tracked variables. All tracked variables in the model now reset on model reset. Changed itemtype references to referencing an item's type label instead. Improved the Person flowitem's 3D shape. Added repeating events to time tables. Added a short description field to user commands. Made the gantt charts and time charts scroll with a fixed time window. Removed the global table Clear on Reset checkbox and replaced it with a reset trigger. Added new visualization options for the Rack. Added duplicate buttons to the Excel Interface window. Added a duplicate option to the Toolbox's context menu. Taskbar now shows experimenter/optimizer status and runtime based upon stop time. Disabled deleting objects while the model is running. Fixed an issue with the undo history when pasting over nodes with pointer data. Fixed issues with using the ternary operator after properties. Fixed an issue with writing to Access databases with read-only fields. Included fixes listed in 17.0.3 below. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Removed the FlexSim WebServer application from the default installation and developed a new WebServer application using Node.js that streams the 3D view much faster. The new WebServer can be downloaded through FlexSim's Online Content. Existing models will continue to work with itemtype, but new models should be built using a type label instead of the itemtype attribute and commands. Process Flow Added an Assign Released Resource(s) To field on the Release Resource activity. Added functionality to allow you to Ctrl+Drag activities in an activity block. Added a right-click menu option and Alt+Click to open the Token View. Added a sampler to the assign labels Label Name field so you can sample other activities or tokens to get label names. Added a right-click menu option to open multiple views of a Process Flow. Added an Assign To property to the Create Tokens activity. Added a Make Array label aggregation type to the Batch. Added Center in View buttons for fields with pointer data. Added a name property to the Token FlexScript class. Fixed a bug with duplicating Process Flows using the Toolbox. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated the Pull From List activity so it does not assign a null label when nothing was pulled or the token was released early (manually). Previously, if you used a Max Wait Timer or Max Idle Timer (or some other mechanism) to release a token from a Pull from List prematurely, the label specified in the Assign To field would be created with a value of NULL. Now, the label will not be created. This may break other models that are checking to see if the label value exists. For example, saying objectexists(token.pulled) will throw an exception if the pulled label is never created. This can be easily remedied by changing the code to objectexists(token.pulled?). The ? will cause the value returned to be nullvar when the pulled label does not exist. Universal Edit fields are now more strict when accessing labels on a token. Previously, typing token.labelThatDoesNotExist would happily return NULL and move on. Now the Universal Edit will throw an exception if the label doesn't exist. This does not include Universal Edit fields that assert labels, for example the Assign To fields. FlexSim 17.0.13 (February 27, 2018) Fixed a bug with rendering extended ASCII characters in the 3D names and stats display. Process Flow Fixed a bug with saving and loading partition constraint exception tables. Fixed exceptions being thrown when deleting a connector. AGV Fixed a bug with updating the locations of trailers. FlexSim 17.0.12 (December 20, 2017) Fixed another off-by-one error with adding a column to a bundle table. FlexSim 17.0.11 (December 13, 2017) Fixed an issue with the FlexScript debugger after a break/continue. Fixed a bug with billboard text messing up the OpenGL state. Fixed a performance issue with loading embedded media. Fixed an issue with destroymessageevents() behaving incorrectly in the experimenter. Fixed a code window highlighting crash. Fixed an exception that could happen when clicking on another instance of FlexSim. Fixed an infinite loop when using startanimation() with an out-of-bounds index. Fixed the stop time so it displays correctly when a model is opened. Fixed a bug with trying to run a model directly after opening it without resetting. Fixed a bug with the web server not displaying a model correctly when unlicensed. Fixed a bug with refreshing the List Entries view after entering a test query. Fixed an exception in the start/stop animation popups. Fixed a bug with the Presentation Builder not focusing on flypaths correctly when opened. Fixed a crash in the Animations and Components view. Fixed a crash with the Video Recorder when specifying a file name without an extension. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed an off-by-one error with adding a column to a bundle table. Process Flow Fixed an issue with reevaluating back orders causing a max wait timer to still fire even when the back order is fulfilled. Fixed a timing issue with some of the zone's statistics. Fixed a bug with undoing the creation or deletion of certain activities. Fixed the color of the edit field text when editing names within the ProcessFlow view. Conveyor Fixed a bug with listening to OnStateChange on conveyors, which fixes an exception in the MTBF/MTTR object. Fixed an issue with transporting out of a range-based exit transfer. Fixed a bug with power and free conveyor events. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed an issue with conveyor virtual length preventing items from entering at the correct rate. AGV Fixed a bug with the Remove Member button in the A* Navigator Properties window. FlexSim 17.0.10 (November 7, 2017) Fixed bugs in the sound commands. Fixed a bug with the event log export breaking FlexSim's locale settings. Fixed the Distribution Chooser popup throwing exceptions when the parameters aren't numbers. Fixed a bug with the shape factors window adding offset size nodes set to zero. Fixed moving objects with the mouse wheel for units other than meters. Fixed a naming bug in the Toolbox. Fixed a bug in the Change 3D Shape pick option. Fixed Tracked Variable charts not overwriting exported csv files. Fixed a precision issue with various edit fields. Fixed some bugs in the Presentation Builder window. Process Flow Fixed a bug in the Set Label Table Value pick option. Fixed the Resource stats when a token is released early from an Acquire activity. Fixed an exception when pressing arrow keys while a connector is selected. Fixed an exception with certain undo operations. Conveyor Fixed connecting conveyors to the A* Navigator. Fixed bugs in the Aquire Area and Pull From List pick options. Fixed a bug caused when an entry transfer is set to block upstream items and the blocked upstream items are at an exit transfer waiting to leave. AGV Fixed an issue with AGVs with trailers not properly finding their path after being preempted. FlexSim 17.0.9 (August 31, 2017) Process Flow Fixed a situational bug in the Wait for Event activity uncovered by a recent bugfix. AGV Fixed a bug with AGV breakdowns on accumulating paths. FlexSim 17.0.8 (August 30, 2017) Fixed a bug with Reevaluate Sendto on Downstream Availability. Fixed the Color.byNumber() method. Fixed bugs in the serverreceive() and clientreceive() commands. Fixed a bug with the Object.getLocation(Vec3) command overload. Fixed a bug with animations losing their keyframe data when adding a new component. Fixed a bug with Xbox input movement speed when using length units other than meters. Fixed a bug in the xml tree load code that breaks on nodes with unexpected datatype values. Fixed a bug with the xml save code when parsing carriage returns without line feed characters. Fixed a performance bug in the getstat() command when querying state data. Fixed a bug with the user manual resetting its location when undocked or redocked. Fixed a bug in the Multiple Teams picklist option. Fixed a bug in the Start Page that wasn't correctly reading global preferences for dynamic content and updates. Process Flow Fixed a bug in the Zone dashboard chart. Fixed a bug in the dashboard chart option \"discard data\" so that it works with regular objects and activities. Fixed the Process Flow variables so the values are updated when changed from places like the dashboard. Fixed a bug in the Save/Restore Context Properties window. Fixed exceptions when you view a Wait for Event / Event Triggered Source while running the model. Fixed exceptions when using the Create Object activity in conjunction with the Task Executer as Flowitem picklist option. FlexSim 17.0.7 (July 14, 2017) Fixed a bug with SQL inner joins. Fixed the Tagged Resource pick options. Fixed the User Manual so it correctly syncs to the FlexScript Class Reference. Process Flow Fixed a bug in the Pull From List when a back order was fulfilled before the token's context was restored. Conveyor Improved the slow performance of conveyors in models with millimeter units. FlexSim 17.0.6 (July 11, 2017) Fixed a bug in the buildall() command compiling C++ instead of building FlexScript. Changed the 3D importer \"fstx.png\" comparison to be case-insensitive. Fixed an issue with certain properties not properly cleaning up after themselves in some scenarios. Fixed a bug with inner joins when the indexed column filters have 2 or more master/slave relationships associated with the same 2 joined tables. Fixed an issue with importing animation files with more than 42 bones per mesh. Fixed an issue with simple datatype nodes not being identical after saving or copying. Fixed a performance issue in scrolling large tables with large undo history. Fixed an exception with listening when the listener node is destroyed as part of the listening action. Fixed a bug with moving the FlexSim application window while another program is active. Fixed an issue with adding breakpoints while debugging. Fixed a bug with renaming user commands through the toolbox. Fixed an exception when selecting picklist options with slashes in their name. Fixed some FlexScript errors in various picklist options. Fixed an issue with the TaskExecuter Next/Prev Properties buttons changing the Navigator field. Fixed the Properties windows to resize subcomponents when you resize an object. Fixed the state dashboard charts so you can rename states from custom state profiles. Added support for Visual Studio 2017. Disabled DWG rendering in VR Mode to prevent view projection issues. Added an error message when a list's initial content entry is invalid. Added bundle support to the commands empirical(), dempirical(), and cempirical(). Added better detection of where a breakpoint is located when debugging. Changed Table.cloneTo() so that not-found columns will return nullvar. Updated conditional statements in picklists so they aren't put into ints. This allows you to use current.labels[\"labelname\"] directly in a picklist's condition field. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug with the Vec3 constructor casting to integers inappropriately. Changed the increment and decrement operators to cast nullvar into a number. Changed subnodes.assert() to not set the destroy-on-reset flag. Fixed some bugs with nullvar comparisons incorrectly returning true. Process Flow Fixed a couple of issues with the Event Triggers GUI. Fixed Create Object's properties panel so it resizes vertically. Fixed a bug with manually releasing tokens from Sink and Finish activities. Fixed a bug in the Run Animation activity that caused the Wait Until Complete to ignore the Speed Type option. Fixed editing list fields of internal lists so that the code is properly copied to all of the Process Flow instances. Fixed a crash that could occur when changing the Display Type of Process Flow dashboard charts. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed the Resource's statistics values when using queries on the Acquire activities or when specifying a queue strategy. Conveyor Fixed a bug with Merge Controller picklist headers. Fixed a link parity error that happens on FR entry transfers in certain situations. Fixed a bug with items jumping beyond the conveyor's length with certain speed driver settings. Fixed an exception being thrown when joining custom conveyors and a new conveyor can't be made. AGV Fixed a bug with accumulating paths not properly releasing AGVs when there are very small deceleration values. Fixed an exception when redirecting AGVs in certain cases. Fixed some exceptions that can occur when AGVs recreate their travel paths. Fixed an issue caused when control points are placed right on the junction between two paths. Fixed issues with redirecting AGVs without way points. Fixed a bug with the simulation time halting in certain situations during a proximity resume event. FlexSim 17.0.5 (April 28, 2017) Fixed some intermittent crashes caused by a bug in the FlexScript compiler with ternary operators, min(), and max(). Fixed the error handling when trying to open 17.1 models. Fixed pointer table cells not clearing when adding rows/columns. Fixed invalid Object downcast exceptions and global variables in custom charts. Fixed a bug with OnResume Wait for Event not firing for BasicFRs. Fixed FlexScript command overload definitions for initkinematics(), setvarnum(), setvarstr(), listpush(), destroyeventsofobject(), and dellabel(). Process Flow Fixed sampling labels of the Process Flow object from activities. Updated TS activity headers to use treenode executer and not Object executer. Fixed the Save Context label assignment so the label is always created on the respective token, not its parent. AGV Fixed a bug with dwg lines being drawn too thick when using the AGV Module. FlexSim 17.0.4 (April 10, 2017) Added better error message information on certain exceptions. Fixed an issue with the [] operator throwing an exception when the node doesn't exist. Fixed some autocomplete exceptions in the code editor view. Fixed a bug with autocomplete when identifiers have an underscore. Fixed a memory leak in the Table class. Fixed an issue with casting from a class type to a new object of the same class type. Fixed hanging issue with function-like macros that are instantiated with the same parameters as those passed. Fixed a bug with inObjects and outObjects not working properly with internal container connections. Improved the error message when executing a single-line script command that doesn't return a value. Fixed a bug with the menus not correctly graying in certain situations. Improved the error handling of watch variable evaluation. Fixed a bug with the query() command when using the debugger. Fixed an exception in the debugger. Fixed an issue with the ++ operator on label properties. Fixed a bug with the code headers for the TrafficControl triggers. Fixed a bug with the Passing drop-down list on the Network Properties window. Fixed a bug with the Command Helper view not updating correctly in certain cases. Fixed a crashing issue with a sampler in the Video Recorder window. Fixed an issue with the Processor's Use Operator error message not appearing correctly. Fixed a bug with tools deleting themselves on reset if created during a model run. Fixed a bug with the initial positioning of curved network edge spline points. Fixed an issue with the Script Console losing text when undocking a neighboring tab. Network Nodes now highlight when hovered over in the 3D view. Fixed a UI issue with units in dashboard chart Properties windows. Fixed an issue with the Custom Chart collecting data beyond its max time interval. Fixed Statistical Distributon popups not showing the submenu correctly. Fixed a bug with transporting batches of flowitems not working properly in certain situations. Fixed an issue with certain GUI Builder menu options not working properly. Added a global preference for disabling auto-insert parentheses and quotes. Process Flow Fixed a bug with assigning a label to a task sequence with the Assign Labels activity. Fixed a bug with adding Process Flow objects to user libraries. Fixed a bug with the Wait For Event properties window. Fixed a bug with tying an object with a TE/FR Process Flow to a Resource with a count greater than one. Updated the Conditional picklists so they no longer evaluate both the true and false statement. Fixed an issue on the List with having backorders with no pullers. Fixed a bug with copy/pasting Zones. Fixed a bug with chart time windows. Conveyor Fixed an issue with decision points and photo eyes not snapping to the conveyor in certain situations. Fixed a bug with transfer statistics. Fixed some drawing issues with invalid conveyors. Fixed an issue with dragging multiple selected conveyors and decision points. Fixed a bug with conveyor virtual length. Fixed a bug in the accumulation gap calculation algorithm. AGV Fixed curved paths being draggable when path draw mode was set to clickable only. FlexSim 17.0.3 (March 7, 2017) Fixed a bug when compiling with Visual Studio 2015. Fixed a bug with querying list partitions by their index. Fixed a crashing issue with large arrays in tables. Fixed an issue with fractions in the convert() command. Fixed some issues with autocomplete and code highlighting. Fixed bugs with certain FlexScript operations not working correctly with the Table's [][] operator. Fixed adding lists from a user library. Fixed an issue with exporting dashboards to html. Fixed a bug in the Export Results to CSV File pick option. Fixed some UI bugs in the Excel Interface window. Fixed an issue with combined dashboard stats used as a performance measure. Updated user libraries so that replaced time tables, mtbf/mttr, and lists retain their members and contents. Fixed some bugs in the legacy conveyor's normals and texture coordinates. Fixed a bug with saving/loading multi-dimensional arrays. Fixed a crashing bug with accessing certain arrays out-of-bounds. Process Flow Added a message when trying to sample a Global List from a Push/Pull from List activity. Fixed an issue that caused quick properties to sometimes update incorrectly. Fixed an issue that caused tokens to not move through activities in certain circumstances. Fixed the Assign Labels name fields so you can type in text that is the name of an object. Fixed the edit fields so they properly handle all of the Token's properties. Fixed the Token's instance property so it returns the correct object. Added right-click options for assigning number or string data to Schedule Source label columns. Conveyor Added an error message if the target fill percent is too large for slug build conveyors. AGV Fixed a routing error where AGVs couldn't find a path in certain situations. Fixed a bug with waypoints when using agredirect() to switch directions. Fixed a bug with AGVs running over each other on an accumulating path after a preempt. Fixed an exception in agvinfo(agv, AGV_ACCUM_AHEAD_AGV). Fixed an issue with adding cp connections, then removing them and adding a different type of connection. FlexSim 17.0.2 (February 2, 2017) Fixed a memory leak that caused the views to crash unexpectedly. Fixed assigning a table value directly to a property. Fixed a bug with parenthesis matching when using string literals containing parentheses. Fixed a bug with global table Clear on Reset not working properly in certain cases. Fixed default datatype value of settablesize() in C++. Fixed a bug with drawtext() default parameters in FlexScript. Fixed Travel to Location pick option. Fixed an issue with setting item state incorrectly when using lists in Send To Port. Included fixes listed in 16.0.9 below. Conveyor Fixed a crash that could happen when transporting items between an exit and entry transfer. AGV Fixed an exception when listening to OnAGVAllocationFailed. Fixed an issue involving AGVs with trailers not routing correctly in certain cases. FlexSim 17.0.1 (January 19, 2017) Fixed the updatekinematics() command. Fixed a memory leak in the Table class. Fixed a crash with executing certain switch cases, such as the Date/Time Text display. Fixed a bug with the tonode(Variant) overload. Fixed an issue with setting treenode properties in certain cases. Fixed an issue with setting label properties on a Variant in certain cases. Fixed some bugs with certain executetablecell() overloads. Fixed the lognormalmeanstdev() command parameters. Fixed the function_n() command definition. Fixed a crash when updating some user libraries. Fixed a bug with Navigator connections when adding TaskExecuters with the Experimenter. Fixed a bug with autocomplete for current labels within code editors. Updated the Event List view so it displays message parameters. Fixed an issue with the Experimenter's Performance Measure charts again not displaying correctly when bad data was passed in. Fixed issues with module dependencies not being asserted correctly. Fixed some picklists to use Objects instead of treenodes where applicable. Fixed the Precision field for Bar Charts. Fixed an issue with flowitems without windowtitle attributes. Fixed a bug in the Set Object Color pick option. Fixed a bug in the Travel to a Home Location pick option. Fixed event definitions for the Rack (Place In Bay/Level and Min Dwell Time). Included fixes listed in 16.0.8 below. Process Flow Fixed the State property for the Delay activity. Fixed the code headers for all the task sequence activity properties. Fixed the Sub Flow Instance Creation option from Quick Properties. Made the add button for attaching objects to instanced ProcessFlows more lenient. Fixed edit fields to properly display the code for labels with spaces in the name. Updated edit fields to more properly handle typing in token labels as opposed to code. FlexSim 17.0.0 (December 12, 2016) Improved FlexScript performance by compiling and executing it as machine code instead of interpreted bytecode. Added new syntax to FlexScript for accessing objects' methods and properties, including dynamic label access. Improved OpenGL compatibility by removing many deprecated function calls and adding support for the OpenGL Core Profile. Added a mechanism for loading DWG data into the tree using the Model Background object. Added a new Snap to Background setting on the 3D view for snapping to points loaded from a DWG file. Upgraded the licensing system to Flexnet Publisher 2016 R1 (11.14). Changed the network licensing system so that you can open multiple FlexSim instances using only one license seat. Added a Quick Library popup to Dashboard views. Added Travel to Location pick option to OnResourceAvailable. Added Export Results to CSV pick option to the End of Experiment trigger. Moved the Rank buttons in the General Properties panel of Quick Properties to the Node Properties panel. Fixed a crashing bug with settablesize() on tables with bundle data. Fixed some issues with auto-complete not displaying correctly. Process Flow Added functionality for snapping activities into the middle of a block. Improved the Activities window, including renaming activities, better filtering options, and locating label references. Added a Billboard setting for Text objects. Added a right-click Edit Activity Visuals option. Added an option to the Create Object activity for positioning an object at another object's location without moving into that object. Added a Preserve Global Position checkbox to the Move Object activity. Updated the Schedule Source table so that it can add labels. Updated the Release Token activity to allow numbers and strings. Added the ability to pass an object reference into the Resource(s) to Release property of the Release activity. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. The new version of Flexnet Publisher requires network license servers to be upgraded. They need to use the latest vendor daemon and update the Flexnet Licensing Service. More information can be found in the license upgrade instructions at https://www.flexsim.com/ftp/LicenseServer/ Updated the Separator's order of events (executing OnEntry before Setup Time) to be consistent with the Processor. Users of the mesh api should update usage of GL_QUADS to use GL_TRIANGLES instead. GL_QUADS is deprecated and will not work when using the OpenGL Core Profile. Since the new FlexScript parser compiles to machine code, the order in which parameters are evaluated has changed to be aligned with the x86/x64 calling convention. This means models containing code where parameter evaluation order is important may have changed results. For example, the following code will have different results: myusercommand(duniform(1, 5), duniform(1, 10)) In the x86/x64 calling convention, parameters are evaluated from last to first. In this case, the duniform(1, 10) call will be called first. Since this call changes the state of random stream 0, changing the order of parameter evaluation changes the result. The new parser has a stricter grammar for the == and != comparison operators. The types of the operands must be the same or related. For example, the following code will now give compile errors because it is comparing unrelated types: double x = 0; treenode y = model(); if (x == y) { } This version introduces a new Array type, which is an array of variants, enabling a more feature rich array usage. In doing this, we are deprecating the old array types of doublearray, intarray, stringarray, and treenodearray. Specifically, the old array types are now just aliases for the standard Array type. This means that you can now, technically, put a string into a doublearray and vice versa, because they are all just Arrays. Hence we encourage you to just use Array in your code instead of the old array types. This change has also introduced a problem regarding the Variant type. In previous versions, the Variant could hold each of the four types of arrays, and it had a type value associated with each type, which you could get with the getvartype() command, comparing that value to one of VAR_TYPE_INTARRAY, VAR_TYPE_DOUBLEARRAY, VAR_TYPE_STRINGARRAY, or VAR_TYPE_TREENODEARRAY. Now, however, since we've merged all of those types into one, all of those values would theoretically be the same value, introducing issues if you had code that switches on getvartype(), or in some cases if you had a series of if/else compares on that value. Depending on the specific nature of that code, it would be hard to predict exactly how that code would behave going forward. Thus, we have decided to get rid of those old macros for each array type. Now there is just the macro VAR_TYPE_ARRAY. If you have existing code that uses the older macros, you will get compile errors when you open your model in version 17.0. We do this specifically so that you will be notified of code that needs to be updated. There are also several pick list options in the process flow module that use these older macros. Version 17 includes update scripts that will hopefully update all of those pick options in existing models to use the new VAR_TYPE_ARRAY macro instead of the old macros. With the new FlexScript parser, there are now some differences with how the parser compares a null variant to 0. In the old parser, the following expressions applied: (nullvar == 0) is false (nullvar <= 0) is true (nullvar >= 0) is true In the new parser, the following expressions apply: (nullvar == 0) is false (nullvar <= 0) is false (nullvar >= 0) is false This brings the <= and >= operators inline with the == operator. However, old code will evaluate differently now. The following expressions apply in both the new and old parsers: (nullvar < 1) is true (nullvar > -1) is true The param() command will now return nullvar if the parameter number is greater than the number of parameters passed to the function (previously it returned 0). FlexSim 16.2.2 (November 8, 2016) Included fixes listed in 16.0.7 below. Process Flow Fixed a bug where all of a process flow's connections were sometimes being deleted. Fixed the TE Delay activity so it properly shows the delay progress in the view. Changed ProcessFlow charts to always store the tracked variable's full history. AGV Made multiple AGV process flows share the same AGV work list. Made the AGV path finder more adaptive on 90-degree turns. Fixed a bug where sometimes AGVs would flip orientation incorrectly at certain transfer points. FlexSim 16.2.1 (October 12, 2016) Fixed a bug with the Font dialog not opening in Global Preferences. Fixed an exception with using JOIN ON without a WHERE clause in SQL queries. Fixed a bug with the number of child processes spawned by the Optimizer. Fixed the Presentation Builder auto-keyframe button. Fixed a bug with the Model Limit view staying open in loaded models. Fixed a bug with undoing in the Global Table Quick Properties panel. Fixed a bug in the date-based Time Table UI. Fixed undo in the 3D View's Quick Library popup. Fixed a bug with priority fields not accepting negative numbers. Included fixes listed in 16.0.6 below. Process Flow Fixed a bug with not being able to click in the ProcessFlow view while debugging. Fixed bugs with selecting tokens in stacked blocks under a Batch activity. Fixed an issue with the text edit view not sizing correctly at certain zoom levels. Fixed an issue with Send To Front and Send To Back not working with containers. Fixed a bug with preemption in the Synchronize activity. Fixed a bug with Zone partitions sometimes not working properly when using the query() command. Fixed template instance objects resizing based upon the model units. Improved draw speed when drawing many tokens within a single activity. Fixed the Token(s) field on the Release Token activity to allow code. Fixed a bug with arrows not correctly following the theme color. Conveyor Fixed a bug with the Conveyor Station drawing its red stopped squares incorrectly. AGV Fixed some bugs with AGV orientation. Fixed a bug with AGVs sometimes stopping erroneously at a control point and not starting again. Fixed some issues with continuation from non-zero end speed when deceleration would take you across a control point. Fixed some bugs with the AGV template process flow. Fixed an issue with clicking control points. Fixed an issue with the navigator not rebuilding its routing information after deleting a path. Fixed a bug with copying paths in visual tools. FlexSim 16.2.0 (September 5, 2016) Added support for STEP and IGES 3D shapes. Added a Quick Library popup when you double-click on empty space or A/S Connect to empty space in the 3D view. Improved object rotation manipulation in the 3D view. Added sorting to toolbox for top level items. Added the ability to use the query() command with partitioned lists, using ListName.$1 or ListName.PartitionIDStr syntax. Added support for the ON clause in SQL queries using the query() command. Added support for the ARRAY_AGG() aggregation function in SQL queries using the query() command, in the manner of PostgreSQL. Added an \"Allow Multiple Pushes Before Back Order Fulfillment\" setting to lists. Added a \"Reevaluate All Values On Push\" setting to lists. Added a Date Based feature to gantt charts. Updated the auto-numbering mechanism when naming new objects. Updated file browse dialogs to remember the last used directory. Changed the default directory for opening and saving user libraries to be within documentsdir(). Added a colors tab to the tracked variable dashboard chart. Updated the Presentation Builder interface to make the timeline more useable. Updated the Animation Creator interface. Updated the Stop Time interface. Added range and type validation to many edit fields. Overhauled the FlexSim Web Server interface. Added functionality to the Webserver to restrict access to certain models using Windows Authentication. Fixed a bug with the window docking system that caused sizing to not work properly sometimes. Fixed TimeTable Excel Import bug not working with Daily/Weekly Repeat table. Fixed the Visual Studio project files so they don't give you the linker errors when you compile flexsimcontent.dll with Visual Studio. Fixed a bug with cell heights and widths when inserting and deleting table rows or columns. Fixed line charts continuing to collect data beyond their collect time. Fixed the query() command so that it can be called within List fields. Included fixes listed in 16.0.5 below. Process Flow Improved Process Flow view performance. Added Split, Join, and Synchronize activities. Added right-click options for re-ranking activities in a block and removing an activity from a block. Added tooltips to activities that show you the activity type. Added copy and paste options to the Process Flow right-click menu. Populated field names of lists for SQL drop-down menu options. Updated Text editing interface to be more user friendly. Added an \"Assign Event Object To\" option to the Wait For Event and Event-Triggered Source. Fixed a bug with Zone Partitions not being able to be graphed. Fixed an issue with connectors losing their ranks when clicking and dragging them. Fixed the List Back Order Reevaluation Events so you can listen to activity events. Fixed the Experimenter duplicating TEs/FRs attached to Process Flow objects not properly duplicating the Process Flow instance. Fixed Sub Flows that have Resources pointing to 3D objects in the model not properly creating/destroying copies of the 3D object. Fixed Resources in Fixed Resource and Task Executer Process Flows losing their references when being updated by a user library. Fixed a bug with the Pull from List where releasing the token and leaving the back order on the list would not give you all of the pulled results when using the 'Assign To' option. Fixed a bug with capturing ProcessFlow views at resolutions larger than the window size. AGV Added new agvinfo() command options. Updated paths so that they can be contained within visual tools. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed issues with routing through path junctions where 3 or more paths connect. Conveyor Fixed an issue with manually moving a waiting item off a conveyor with a restart delay. FlexSim 16.1.2 (August 5, 2016) Process Flow Fixed the Acquire Resource receiving a reference to the back order when acquiring using a query. FlexSim 16.1.1 (August 2, 2016) Included fixes listed in 16.0.3 below. Fixed color and sizing issues with recording Dashboards using the Video Recorder. Added a volume scale option to the FluidConveyor to adjust the visual display. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed several issues with the FluidConveyor. Conveyor Fixed an issue with manually moving a waiting item off a conveyor with a restart delay. Process Flow Fixed a bug with Zone Partitions not being able to be graphed. Fixed an issue with connectors losing their ranks when clicking and dragging them. Fixed the List Back Order Reevaluation Events so you can listen to activity events. Fixed the Experimenter duplicating TEs/FRs attached to Process Flow objects not properly duplicating the Process Flow instance. Fixed Sub Flows that have Resources pointing to 3D objects in the model not properly creating/destroying copies of the 3D object. Fixed a bug with capturing ProcessFlow views at resolutions larger than the window size. FlexSim 16.1.0 (June 22, 2016) Added group commands (groupaddmember(), groupmember(), groupnummembers(), groupremovemember()). Global Lists will now update their Initial Content on reset when connected to a Group if the group's members change. Added support for the UPDATE clause in SQL. Added support for the RAND expression in SQL (uses stream 0 and will always be the same for a given query/row selection combo). Improvements to speed and memory usage when performing SQL inner joins. Tracked variables with type Categorical can now store arbitrary states. Added a Kinetic Level tracked variable type (e.g. Battery Level). You can now hold down the Alt key while clicking and dragging in the 3D view to ignore all objects. You can now resize objects while maintain their aspect ratio by pressing both the left and right mouse buttons down on a sizer arrow. Updated dashboard charts to support x-axis scaling. Added OnStop and OnResume events to 3D objects for use with event listening objects (Wait for Event and Event-Triggered Source in Process Flow). Video Recorder can now record Dashboards. Time Tables, MTBF/MTTR and User Events can now be disabled. Experiment variables can be set to enable/disable these objects. Fixed an issue with the VideoRecorder not loading properly. Fixed issues with windows and popups not opening on the correct monitor when using a multiple monitor setup. Fixed Fluid Conveyor throwing exceptions on reset. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated to OpenGL 3.1. Deprecated OpenGL functions, such as glBegin(), glEnd(), glVertex(), glNormal(), and glTexCoord(), may no longer work correctly on some graphics cards. You should instead use the mesh api. Changed the way that fixed resources (except the Combiner) receive items when they are being transported in. Previously, when they were notified that an item was being transported in, they would close their inputs and create an event to receive the next item. This would cause problems if the upstream objects had multiple items to send because their routing strategy would work differently when transporting vs not transporting. We have fixed this so that routing strategies will work the same when transporting as when not transporting. This may change the way that old models work because it changes the events that are created, and, obviously, it fixes routing strategy logic. menumain(), menubelow() and getviewmenu() have changed. Instead of returning a double, they now return a var. Any calls to these commands will need to be updated to use var or the value returned will be 0. double myMenu = getviewmenu(); Changes to: var myMenu = getviewmenu(); Previously the Fluid Conveyor would stop conveying if no material was moved into it (ie inputs were closed). This was changed so that the Fluid Conveyor continues to convey the material in it whether any additional material is added or not. Set the conveyor speed to 0 in order to keep the same functionality that was in previous versions. Conveyor Added Ports to the Entry and Exit Transfers. Added a Restart Delay setting to Conveyor Types. Fixed the Join Conveyors Tool when connecting conveyors with a custom conveyor type. Various bug fixes and improvements specifically with regards to items moving between conveyors and transfers. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed the way stopping a non-accumulating conveyor works when propogating stops to straddled conveyors. When a conveyor is stopped, it will act the same as if an item on the conveyor were stopped. Process Flow Added Preemption activities (Save Token Context, Release Token and Restore Token Context). Added gettokens() and getbatch() commands. Added Templates for Fixed Resource and Task Executer Process Flows. Added a Token Data to Preserve option to the Sink and Finish activities. In the Tokens window you can view Dead tokens and explore their data. Token Trace History is now stored as a label on the token. Added a Speed Type and Repeat Type to the Run Animation activity. A lot of improvements to the Zone. Updated the evaluation of the Return Value from the Finish activity so that executesubflow() can get a return value from multiple Finish activities. Added Activity Profiles to the token trace histories. Fixed a bug causing the Wait for Event to evaluate its Max Wait Timer even if the token left the activity. Fixed issues with the releasetoken(), createtoken(), and releasebatch() commands working differently when running vs stepping. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Changed the way that a token manually released (preempted) from waiting in a task sequence activity manages the task that it's waiting on. Now the task will be removed, and the task executer preempted if currently working on it. This may change older models that release tokens in task sequence activities. AGV Added Event info to AGVs and Control Points for use with event listening objects (Wait for Event and Event-Triggered Source in Process Flow). Added AGV templates to Process Flow. Fixed bug with way points not firing their OnArrival for redirected AGVs. Fixed issue with arrival waypoints not firing correctly with non-zero end speed travel tasks. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed the order by which AGV trailers are attached to their AGV. This will affect old model trailer ordering. FlexSim 16.0.9 (February 2, 2017) Fixed issues with table commands not working in C++ when the table has bundle data. Fixed more bugs in time-scaled animations in various cases. FlexSim 16.0.8 (January 18, 2017) Fixed an issue with pushing an array to a list with static label fields. Fixed a crash when a bundle used by a chart is destroyed. Fixed a bug in time-scaled animations that was causing them to not update properly in some cases. Fixed images in static text not showing when aligned to center. Fixed a bug with the By Time of Day picklist on Send To Port. Fixed several By Percentage picklists so that they work properly with 0%. Fixed Global Variables being linked to Dashboard Radio Buttons. Fixed an issue with selecting weeks in the Date Based Time Table. Fixed module object context help options. Fixed an issue with the Experimenter updating state values when a run is finished. Fixed the event log not ignoring module events when you disabled them. Fixed copying and pasting presentation slides. Conveyor Fixed some issues with floating point precision errors. Fixed photo eyes not clearing when height > 0. Fixed an issue with an entry transfer's pull strategy pulling from a list. Fixed a bug in the Exit Area pickoption. Process Flow Fixed an issue where some charts didn't collect data if they weren't visible. Fixed the Zone so you can view its tokens in the global process flow view of instanced process flows. Updated some charts so they show the correct times when using a warmup time. Fixed a bug with the batch when releasing multiple batches due to overflow when the batch quantities differed from the current batch and the new batches. Fixed an issue with viewtofile() on the Process Flow view. AGV Fixed an issue with adding and removing different types of control point connections. A* Fixed the distancetotravel() command for A*. Fixed issues with creating and drawing barriers in models set to units other than meters. FlexSim 16.0.7 (November 8, 2016) Fixed a bug with clearglobaltable() not always clearing the entire table. Fixed bugs with addtablerow(), addtablecol(), movetablerow(), and movetablecol() on bundle tables. Fixed a UI bug with large Partition IDs displaying incorrectly. Fixed a UI bug with the user command code editor's default header. Fixed a bug with animation durations when deleting animation clips. Conveyor Fixed conveyorsenditem() so that it works with Station objects. Process Flow Fixed the Create Object activity so creating something on an AGV control point sets the location to the control point. Fixed referencing process flow variables so it throws an exception if the variable doesn't exist. Fixed the Run Animation Wait for Complete check box to work with bone animations. FlexSim 16.0.6 (October 12, 2016) Fixed an exception when calling updatelocations() on TaskExecuterFlowitems directly under the model node. Fixed a bug with multisorttable() not working correctly with string data. Fixed a bug with querying lists using the $ parameter syntax. Fixed a bug with state charts not properly accounting for the minimum collect time with the new stats structure. Fixed an intermittent exception in gettenetnode() in the Travel to Home Location pick option. Fixed an intermittent exception when pasting network nodes. Fixed a bug with eventget(num, 4) throwing exceptions. Fixed a bug with gettablecols(string) returning inconsistent values. Fixed issues with the Optimizer not exporting string variables correctly. Fixed a bug with the Optimizer not correctly running multiple replications with certain configurations. Fixed a bug with Copy Visuals and Shape Factors not copying the shape factors correctly. Fixed a UI bug in the MultiProcessor's Properties window that was renaming the first step. Fixed the State Pie Chart so it correctly shows Totals and Averages of combined groups. Fixed a bug in the State Pie Chart with \"Combine All into One Pie\" not showing the correct average totals. Fixed some UI issues with sampling global tables. Fixed the On Process Finish trigger for the MultiProcessor so Process Flow activities can listen to it. Conveyor Fixed a bug in the Entry Transfer's Pull Requirement code header that caused pull not to work correctly. Fixed a UI bug with the Station's Use Operator fields. Fixed the z-height of conveyors created in a container using click-click creation. Process Flow Greatly improved model run performance by removing some unnecessary destroyeventsofobject() function calls in the Sink activity. Fixed issues with being able to wait for events on Tracked Variables and Fields. Fixed the sampler in pick options in the Create Object activity properties. Fixed a UI bug with the Visually Trace checkbox. Fixed the token Labels view so you can select and copy label names. A* TaskExecuters that are travelling on the A* Network will now properly respond to stopobject() and resumeobject() calls and to preempting task sequences. FlexSim 16.0.5 (September 5, 2016) Fixed sin() command not displaying in the Command Helper. Fixed a bug when shift-selecting entire rows and columns of global tables. Fixed C++ Variant comparisons where the primitive is on the left side. Fixed the return values for CURRENT_MINUTE, CURRENT_SECOND, and CURRENT_MILLISECOND in getmodelunit(). Fixed a bug with SQL parsing of FlexScript functions returning doubles in 32-bit FlexSim. Fixed some pin buttons in the Stats window. Fixed a bug in a Pull From List pick option. Fixed Crane and Robot speeds not scaling with model units. Fixed a bug with the From/To Lookup Table popup not putting quotes around table names. Fixed a bug with exporting Custom Chart data as CSV sometimes not working. Fixed some UI issues with the Edit Name box for User Libraries. Fixed an exception in the Set Label trigger popup. Conveyor Fixed header for OnMessage trigger of Photo Eyes. Fixed decision point rotation in a rotated container. Fixed a bug with calculating the time that items will split off from each other when an ahead item speeds up. Fixed a rare crashing issue with accumulated items. Fixed an issue with resuming nonaccumulating conveyors that weren't stopped. Process Flow Fixed a UI bug with the process flow variable panel in Quick Properties when opening a model. Fixed some instance references from showing just the name to now showing the path to better distinguish objects in containers. Fixed an extra line being added in the token Shared Assets list when requesting a Zone. Fixed the Quick Library so you can collapse sections. AGV Fixed issue with click-creating AGV control points before creating paths. Fixed issue with calling stopobject() on an agv when it has arrived at a control point at (near) zero speed. FlexSim 16.0.4 (August 5, 2016) Process Flow Fixed the Acquire Resource receiving a reference to the back order when acquiring using a query. FlexSim 16.0.3 (August 2, 2016) Fixed a performance issue with settablenum() when referencing a table by rank. Fixed a bug in exporttable() not exporting the correct number of rows. Fixed a bug in query() with $iter(1) in certain cases when inner-joining tables. Fixed a rare crashing issue with the WRL importer. Fixed some glitches with editing Chinese characters in code edit fields. Fixed an issue with Chinese characters in some Dashboard charts. Added a flag to listpull() to fix an issue involving backorders when using Unique Pullers or Unique Values. Fixed a bug with custom state names in the State Chart. Fixed an infinite loop caused by using long object names with some Dashboard charts. Updated some picklist options to use more consistent default terms. Fixed an issue with Code Snippet popups not resizing vertically. Fixed a bug with adding all user commands to a user library. Fixed a bug with some startup and load install options not working properly with user libraries. Fixed a UI bug with the Excel progress bar. Fixed a UI bug with certain spin boxes not updating their text when holding the mouse on their arrow buttons. Fixed a bug with Excel Import starting row and starting column not always working correctly. Fixed an HTML Frame Load Error for user accounts with Unicode characters by changing programdatadir() to again use ProgramData instead of AppData. Fixed the convert() command to handle years after 2035. Fixed a bug with the experimenter displaying blank results due to invalid data. Fixed a bug with the experimenter not properly recording dashboard state charts with collect times defined. Fixed an issue with pushing an array of values to a list when there are back orders waiting. Process Flow Fixed a bug with Pull from List not setting the pulled label when nothing was pulled. Added conveyor pick options to the Custom Code activity. Fixed a timing issue with the Resource at time 0 that sometimes allowed too many tokens to allocate it. Fixed displaying Chinese characters in Text objects. Fixed a bug with Zones throwing SQL errors when also using the query() command. Fixed an infinite loop in the auto-naming of Split connectors. Fixed an issue with certain time-weighted charts not calculating the average correctly. A* Fixed a repeatability issue with path finding in large models. FlexSim 16.0.2 (June 28, 2016) Fixed a bug with nodetopath() sometimes returning a path that starts with / when it should start with >. Fixed a bug with exporting tables with bundle data as csv. Fixed an issue with reading current bound-statistic values. Fixed a bug with weight objectives in OptQuest. Fixed a bug showprogressbar() not updating the text properly. Fixed an issue with watch variables not working right with some arrays. Fixed an issue with popups closing when you hover over a tab when using the sampler. Fixed an exception with drawing connections and hidden objects in the 3D view. Fixed a bug with 'station' not being correctly passed into the Load Time and Unload Time triggers on Task Executers. Changed the number precision model setting so that it behaves in a more consistent manner. Fixed a UI bug with the Display Current State Only checkbox. Fixed Help Manual's Open in Browser button. Fixed a bug with the Code Profiler closing when undocked from a tab pane. Fixed a bug with opening the Properties window for some shapes in the Animator. Fixed an issue with using multiple replications with OptQuest. Fixed a UI bug in the Optimizer view. Fixed an issue with operators getting stuck when preempted while finishing an unload task. Fixed a bug with the Combiner components list sometimes not updating. Fixed the Time Table Dated Based GUI so it works with all model time units. Fixed some exceptions being thrown with dashboard state charts when setting an object to a state that is not listed on the state chart. Conveyor Fixed a UI bug with applying Decision Point and Photoeye triggers. Fixed a bug with an operator picking up an item when it has transfered partially to the next conveyor. Fixed an issue with an item exiting firing the accum stopped cleared event of upstream items. Fixed some errors with clearing photo eyes on item exit. Fixed a bug where items behind a side transfer were not notified of a speed driver change at a side transfer. Fixed an issue that caused exceptions when items are removed while straddling multiple conveyors. Fixed a binding issue with the OnSlugStart event. Fixed a bug where re-routing was not working on a conveyor with a virtual length. Process Flow Fixed some exceptions in Push to List. Fixed a Push to List bug where puller is not assigned to a label if the pushed value is not a token. Fixed the Tokens popup throwing exceptions when the token you're viewing leaves. Fixed a bug causing the Wait for Event to evaluate its Max Wait Timer even if the token left the activity. Fixed some issues in the releasetoken(), createtoken(), and releasebatch() commands so that they work the same when running or stepping. Changed Request and Require fields to not require integers. Fixed some bar chart color bugs. Fixed a precision issue in the Batch activity. Fixed a UI bug with ProcessFlow chart Display Names. AGV Fixed a bug with way points not firing their OnArrival for redirected AGVs. Fixed a bug with queryDistance(). Fixed an issue with arrival waypoints not firing correctly with non-zero end speed travel tasks. FlexSim 16.0.1 (April 1, 2016) Fixed a performance bug with stats_staytime() that was causing models to run slowly. Fixed a bug with Excel export not working for certain columns. Fixed some memory leaks in drawcylinder(), drawcolumn(), drawdisk(), and drawsphere(). Fixed an issue with dll nodes sometimes not binding properly. Fixed bugs with excelcreatesheet() and excelsaveas(). Fixed a bug with old-structure stateprofiles not resetting properly. Fixed a bug with group objects sometimes being added to charts twice. Fixed a bug with 3D stats not displaying correctly on some objects. Fixed dashboard buttons not saving their text color. Fixed a bug where the hover text for combined stats on Stat charts said average for total values. Conveyor Fixed a bug with decision points' current content stats. Fixed a bug where items were sometimes not routed to the correct location. Fixed a bug where exit transfers sometimes sent items to the wrong port when multiple items were released. Process Flow Fixed some statistics bugs in the Zone. Fixed some crashing issues when \"Assign To\" is given invalid data. Fixed a bug with Batch Label Aggregation to keep strings/arrays/etc. with the Last Value and First Value options. Fixed issues with the Run Animation not allowing you to pass in an array of objects. Fixed an issue with using the wrong instance when pushing/pulling from a List in another Process Flow. Improved 3D mouse performance in the ProcessFlow view. AGV Made the addMember method a dll function so Process Flow can connect travelers to any control point using the Create Object activity. You can now correctly get an AGV's current control point when it finishes OnPreArrival. Fixed an issue with AGV start speeds incorrectly being set to 0 in certain circumstances. FlexSim 16.0.0 (March 14, 2016) Added options to Global Preferences to define which libraries are visible in the Drag-Drop Library and what order they appear in. Restored the Media Files window (Main Menu > View > Media Files). Added the ability to assign unique random streams to objects in the model using the command getstream(). Added a Network Navigator Properties window. (Right-click a NetworkNode to access.) Added a Track Number Field Totals option to the List for stats collection. Added a 'Values Only' data distinction option to the Excel Importer. This data distinction reads number data and string data from excel cells without regard to the cell's formatting (i.e. dates and times are imported as Excel time values). Implemented the excelrangeread() command to import a range of cells using the 'Values Only' data distinction. Added the command convert() for converting model/Excel dates and times. You can now use keyboard shortcuts for debugging. Next Line -> F10, Step Into -> F11, Continue -> F5, Stop Simulation Clock -> Shift+F5 Updated object statistics to use Tracked Variables for collecting Content, Input, Output, and Staytime statistics. NOTE: These new statistics are only available for new objects. See the Object Statistics backwards compatibility note below for more information. Made the sql IN clause work if you compare it against a value that is an array. Added trackedvariable() and inittrackedvariable() commands. This allows tracked variables to be created on objects as labels, etc. Tracked Variables can now be accessed using the commands get(), set(), inc(), setnodenum(), getnodenum(), getlabel(), setlabel(). Tracked Variables now have a Type which can be Level, Cumulative, Time Series, or Categorical (see inittrackedvariable() documentation). Tracked Variables can now store profiles (similar to state profiles, the profile stores data on the amount of time the tracked variable was at each given value). Improved OpenGL compatibility with older graphics cards and Nvidia Optimus cards. Fixed an issue with copy and paste in the 3D view not maintaining the z position of the copied object. Fixed the Load From File button in the Edit Selected Objects window to call the firecreateevent on loaded objects. Fixed an issue with the dashboard Send To Back not always working. Fixed an issue with the Experimenter Default Reset Scenario combobox. Fixed dashboard snapping. Fixed issues with pasting a node onto another node of a different data type. Fixed an issue with FlexSim sometimes crashing when a dashboard widget was deleted. Fixed a memory leak in the query() command. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Updated the Combiner so that items can properly exit through port 0 (such as using a Process Flow Load activity). Fixed a bug in the Separator state management that was causing it to be idle when it should be blocked. Changed the max bones per mesh for bone-animated shapes from 60 to 42. Object Statistics: We have changed the default statistics structure for objects in the library. This will not change the structure of existing models, but will now be different for new objects that are created. Specifically, we have made the standard object statistics--namely input, output, content, staytime, and state--use tracked variables instead of the many different object attributes they used previously. This enables us to add new capabilities, such as a content-vs-time graph that exactly reflects the object content changes instead of an interval-based time graph (use the Tracked Variable vs Time chart or the pin button in the Quick Properties Statistics panel), and the ability for Process Flow Wait For Event activites to listen to object content, input, output changes, etc. Current FlexSim features will work for both the old and new statistics structures. If you have model or module code that is accessing statistical data directly (such as using commands like get(stats_contentavg(object)) or get(rank(state_profile(object), STATE_IDLE))), this code will continue to work on objects that have the older structure, but it will not work for new objects added to the model. If you want this access to work with objects having the new structure, you should use the getstat() command to get the desired data. The getstat() command will work on both the old structure and the new structure. Below is a list of examples of old statistical access commands vs new getstat() based access. OLD: get(stats_contentavg(object)) NEW: getstat(object, \"Content\", STAT_AVERAGE) (Note here that the getstat() command will return the weighted average that includes the time that the object has been at its current content, whereas with the old method, you had to add that on manually). OLD: get(stats_staytimemax(object)) NEW: getstat(object, \"Staytime\", STAT_MAX) OLD: get(rank(state_profile(object), STATE_IDLE)) NEW: getstat(object, \"State\", STAT_TIME_AT_VALUE, 0, STATE_IDLE) (Note here that the getstat() command will actually give you the total time in the idle state. This includes the time in its current state if the object is currently idle. With the old method you always had to manually add that in, i.e. get(rank(...)) + (getstatenum(object) == STATE_IDLE ? time() - get(state_since(object)) : 0); OLD: getstatenum(object) NEW: getstatenum(object) The getstatenum() command works on both structures, so you don't need to change it. Alternatively, you can use getstat(object, \"State\", STAT_CURRENT, 0) (0 is the state profile) OLD: getinput(object) NEW: getinput(object) The getinput() and getoutput() commands work on both structures, so you don't need to change them. Alternatively, you can use getstat(object, \"Input\", STAT_CURRENT) Conveyor Added Pull and Send To functionality to conveyors. This is done by connecting multiple objects to a single entry/exit transfer. Added reset position functionality to conveyors. Added additional events to conveyor objects that can be used in connection with the Wait for Event and Event-Triggered Source activites in Process Flow. You can now explicitly remove connections from an entry/exit transfer without it being deleted (using the right-click menu). This is useful when sending flowitems to a list where connections are not required. Straight and curved conveyors now have an optional Virtual Length. Added Priority and Preempt fields to the Exit Transfer. Added a Station object. The Station works much like a Decision Point but also allows you to specify a processing time and optionally call operators. Added States to conveyor objects. Added a CONV_INFO_GET_ACTIVE_ITEM option to the conveyorinfo() command to get a decision point or photo eye's covering item. Fixed decision points and photo eyes not saving to user libraries when adding a conveyor. Fixed conveyor widths not updating when changing conveyor types. Fixed issues not being able to snap decision points to the beginning or end of conveyors. Fixed the conveyor type so new conveyors use the default conveyor type rather than Custom. Fixed the name numbering of decision points and photo eyes. Fixed the Release Area pick option in decision points. Various other bug fixes and improvements to conveyors. Process Flow Added a label filter option for tokens in Quick Properties. Process Flow View now supports a 3D mouse. Updated activity snapping to allow activities to be snapped to the top of other activities. Updated the Release Resource activity to allow a reference to a Resource Shared Asset to be passed into the Resources to Release property. Blocks of activities and display objects can now be saved in User Libraries. Added aligning functionality to the Process Flow view. Added snap-to-grid functionality to the Process Flow view. Speed improvements to drawing. Assign To properties on the Create Object, Push To List, Pull From List and Create Task Sequence can now either overwrite the assigned label's data or insert the data at the front (creating an array). When tying the Resource shared asset to a Group, Dispatcher or Array, the Count property now allows you to utilize any number of those objects. This allows you or the experimenter to easily change the number of available resources without objects being added/removed from the model. Added a 'Do not remove entries from List' option to the Pull From List activity allowing you to utilize the Request and Require fields without removing entries. Tracked Variables can now be added as labels on objects. This allows you to track the history of its values as well as tie it to a Wait for Event activity as a value change listener. Fixed issues with the Finish/Sink activity not properly deallocating shared assets if they still had children in the model. Additional bug fixes and overall improvements. Fixed exceptions sometimes being thrown when dragging connectors around. Fixed the Priority field in the Create Task Sequence activity. Fixed some issues with listening to the OnStateChange of objects. Fixed an issue that caused large numbers of TE/FR instances to take a long time to reset. Fixed an issue with the Resource when using a Local type with each instance having a unique resource reference. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. The Assign Labels activity used to allow you to pass in a treenodearray or a Group so that it assigned labels to multiple objects at once. Now the Assign Labels only accepts one treenode at a time. Passing in a treenodearray will cause only the first entry in the array to have labels assigned to it. To update any old model utilizing this functionality, loop through each object in the array using the Object from Label Array pick option. AGV Updates to AGV travel tasks and preempting. Some minor bug fixes. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. AGVs will now read the end speed of the travel task and use it to determine when to finish the task. This means that if you have an existing model where you defined a non-zero end speed of a travel task, older versions would have ignored this, but now the end speed will be simulated properly. Please see the user manual topic on AGV Types for more information on how the end speed is simulated. We changed the AGV preemption mechanism so that: When you preempt an AGV, if you do not immediately give it a new travel task, it will decelerate to stop after the preemption occurs. In previous versions the preemption mechanism stopped the AGV immediately. If you preempt an AGV and then immediately give it a new travel task, it will start the new task at the speed it was at before it was preempted. In older versions, a preemption would cause the AGV to immediately stop and then start from speed 0. FlexSim 7.7.4 (January 28, 2016) Fixed an exception in the VideoRecorder. Fixed a bug with list back orders table sometimes not drawing. Fixed a bug with the BasicConveyor recycling itemtype nodes. Fixed a bug with coordinated task sequences. Fixed a bug with compiling using Visual Studio 2015. Fixed a bug with the Ticker component list table. Fixed an issue with getvarnum() returning treenodes when it shouldn't. Fixed an exception when debugging uninitialized treenode variables. Fixed a scaling issue with changing the operator's shape with different model units. Fixed a bug with some vrml textures not displaying correctly. Fixed bugs with certain configurations of drawcylinder(), drawcolumn(), drawcube(), and drawsphere(). Conveyor Fixed exceptions that were thrown when an item straddling multiple conveyors exits through an exit transfer and it is still taking the speed of the upstream (sending) conveyor. Process Flow Fixed the Resource Queue Strategy. Fixed a bug where FlexSim would crash when opening some models. Fixed issues with using the Create Object activity to TaskExecuter Flowitems on Network Nodes that were inside of Visual Tools. FlexSim 7.7.2 (January 8, 2016) Fixed Elevators, Cranes, and ASRS objects not resizing correctly for different model units. Fixed an issue with the List Entries debugging tool not allowing you to sample objects. Fixed the default header for the OnStateChange trigger. Fixed an issue with displaying variants in the local/watch variables windows of the debugger. Fixed a bug with drawtomodelscale() and drawtoobjectscale() commands. Improved the performance of XML loading and saving. Fixed the gettablestr() command when a Global Table is set to use a bundle. Fixed a bug with using global lists in the query() command. Fixed bugs that caused child experimenter processes to die unexpectedly. Fixed a bug where code windows would sometimes not show the text when multiple windows were open together. Fixed a bug with multisorttable() not working correctly with descending column sorts. Improvements to quick properties for faster updates and better scroll management. Added an Update Locations picklist to Enter/Exit triggers. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed drawtext()'s rotation parameters so that they match FlexSim object rotations. AGV Fixed issues with agvaddlistener and cpaddlistener not interpreting object references correctly. Conveyor Fixed a smooth transfer interpolation bug when an item is straddling three conveyors. Fixed an issue where an item merging onto a conveyor doesn't merge properly if it is blocked by an item that is diverting from the conveyor. Made various fixes for undo functionality. Fixed an issue with speed drivers not properly calculating accumulation block points in specific scenarios. Process Flow Fixed an issue with trace histories not displaying in FR/TE Process Flows. Fixed an issue with viewing List back orders for instanced Process Flows. Fixed the Wait for Event and Event Triggered Source to properly pass in the eventRank. Fixed an issue with containers sometimes not moving activities inside of them. Fixed an issue with entries on a List not properly being removed when a token was released manually from the Push to List activity. Fixed issues with using Process Flow Variables in the Experimenter. Fixed issues with saving Process Flow dashboards and using Process Flow dashboards as PFMs in the Experimenter. Fixed an issue with connectors not being renamed properly. Tokens are now destroyed when sitting in Sink/Finish activities once all of their shared assets are deallocated. Improvements to the Universal Edit fields (you can now select a portion of text in the field and use the sampler or select a label from the drop down). Improved zooming in the Process Flow view. Improvements to quick properties for faster updates and better scroll management. You can now manually release a token from a Run Sub Flow activity using the releasetoken() command. Updated the Custom Task Sequence activity to use an edit field for the task type to allow for user-defined custom tasks. Update the Delay Task Activity to display the delay time on the token. Updated the Process Flow dll to allow user-defined modules to extend Process Flow with custom activities. Added OnEntering, OnExiting, OnManualRelease, OnAssetAllocated, and OnAssetDeallocated events to the token. Added additional Array picklists for the Assign Labels activity. FlexSim 7.7.0 (November 23, 2015) Added a Process Flow module for handling complex logic using flowcharting. FlexScript now has a var type which can be any of the current variable types (number, string, treenode, intarray, doublearray, stringarray, treenodearray). Bone Animations - Animator can now import 3D models with bone animation data and set those to FlexSim animations. Added Global List objects to the Toolbox (see User Manual > Modeling Tools > Global List). Global Tables can now store their data in a bundle rather than in nodes. Arrays (int, double, string and treenode) can be stored on nodes such as labels. Arrays are now viewable/editable as tables. Labels can also store pointers to other objects using the setlabel() command. Deprecated parnode(), parval() and parstr() and replaced with param(). Added an arraysize() command. Added support for Oculus Rift. Added support for using Xbox 360 Controllers. Added a global preference for displaying the 3D view's frames per second. Added a Truck TaskExecuter Flowitem. Added a Custom Gantt Chart dashboard. Dashboards now have the ability to scroll. Added a precision property to dashboard stat widgets. Added a spinner object to the dashboard model input objects. Updated dashboard charts to rebuild their data if pointing to a group and the number of group members changes during the model run. Dashboard charts can now be copied and pasted. Removed the AVI Maker and replaced it with the new Video Recorder. Added an \"Available at Simulation Start\" option to TaskExecuters that causes the OnResourceAvailable trigger to fire at time 0. Changed many Quick Properties panels to apply to all selected objects. Improved the Rotated Selected and Flip Selected so you can click in the 3D view and select a rotation axis. Added a Model Layout option to the Experimenter Variables. Improved the Experimenter web viewer export so view can be customized. Task Sequences now have the ability to store their own labels. Improvements to FlexSim's display for non-standard DPI settings. Added a panel to Quick Properties that allows for saving high resolution images of the 3D view (this can also be done through the viewtofile() command). Updated TrackedVariables to be a simpledatatype object instead of a node with a bundle. Typing shift+enter in a table cell creates a new line rather than moving to the next cell. Changed the UI for flowitem packing methods so it makes more sense. Added a flowitem packing method - Layer Stacking By Item Size Added On State Change triggers to the BasicTE and BasicFR trigger pages. Got rid of the usage of FRLOAD and FRUNLOAD. USe LOAD and UNLOAD instead. Updated the updatelocations command so that if you pass an item in as the object parameter, it calls updatelocations on the parent object of the item. A lot of general improvements to drawing performance. Improvements to how model data is saved to remove differences in the xml files. Added a page to the User Manual about model repeatability (FlexSim Concepts > Model Repeatability). Deprecated the getmodelunitnum() and getmodelunitstr() command and replaced it with getmodelunit(). Deprecated Global Task Sequences. User Process Flow instead. Improved User Manual search results to display the most relevant results first. Improvements to the License Activation window. The middle mouse button can now be used to pan in the 3D view and scrolling with the mouse wheel now zooms relative to the mouse location. Added statisticaltime() command. Added rangemin and rangemax attributes to an Edit field to define a range of valid values that can be entered (options have also been added to the Dashboard). Added all FlexScript commands as sql scalar functions. Adding support for the HAVING clause in the query command. Added the == operator to the sql parser. Added an option to the Excel Importer to allow you to import cells formatted with Dates/Times as numbers when using the Automatic Data Distinction setting. Changed Copy to also put the path to the highlighted object onto the clipboard and removed Copy Path to Clipboard from the tree's right-click menu. Improvements to the Excel Importer's Automatic Data Distinction option. It now correctly determines if a cell has a number in it but is stored as text. In this case, instead of importing a numeric value of 0, it will import the text as a string. Fixed Time Plots in the dashboard so they clear their data after the warmup time is complete. Fixed a bug with the visual tool inner connections not surviving copy/paste correctly in certain cases. Fixed the visual tool so it can have multiple internal connections go through each other. Fixed the Elevator so the delivery platform properly lines up with wherever the item is being dropped off at. Fix for Task Executers so the endspeed works for offset travel. Fixed fly paths to run in real seconds when not running with the simulation time. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed resource item state variables are now stored with a custom data structure instead of being stored directly in the tree. This means that if you previously accessed an item's fixed resource state directly through the tree instead of using the commands getitemstate(), getitemsendto(), getitemvar(), etc. your model will need to be updated to use those commands. Previously, drawfont() would only change the font for one call of drawtext(). Now, calling drawfont() will change the font and leave it that way until it is changed again. Fixed the 50-flowitem receive limit on the combiner, processor, and rack. This will break old models if your model is dependent on this bug. Null Variants no longer equate with 0 (NULL). We have added the \"nullvar\" keyword that equates with null Variants. This could affect models that use getlabel() on a label that does not exist. For more information, see getlabel()'s documentation. The following commands now take/return Variants instead of doubles: nodefunction() sendmessage() function_s() function_n() userfunction_s() userfunction_n() nodefunctionlisten() delayednodefunction() addbundleentry() applicationcommand() The implications for these changes are as follows: nodefunction(x, tonum(current)); // BAD CODE nodefunction(x, current); // GOOD CODE The problem here is that if you cast it into a number, and on the other side someone wants a node, the Variant thinks it's a number so it won't give back a valid node. Additionally, all FlexScript and c++ code nodes now return a Variant instead of a double. This also has implications. return tonum(centerobject(current, 1)); // BAD CODE return centerobject(current, 1); // GOOD CODE Here again, if you put something into a number, and then on the other side it wants a node, the variant realizes it's holding a number and won't give back a valid node. We have implemented an update script that will search the model for this type of code and will update the code to not use tonum(). The update script logs any changes made, putting the log in the node MODEL:/Tools/CodeUpdateLog. The update script will make the following changes: return tonum(...); changes to: return (...); For each of the above mentioned commands, the update will search the model for calls to this command, and will update the parameters as follows: nodefunction(theNode, tonum(...), tonum(...)); changes to: nodefunction(theNode, (...), (...)); However, the update script will NOT catch the following: double myVal = tonum(...); return myVal; or, double myVal = tonum(...); nodefunction(theNode, myVal); In saying this, please realize that leaving number casts in these areas may continue to work properly, particularly if you the user control both sides of the pass-off, i.e. you have implemented both the caller side and the callee side. For example: Caller side: nodefunction(theNode, tonum(theObj)); Callee side: treenode myVal = parnode(1); This example should actually work properly. We have deprecated parnode(), parstr(), and parval() and replaced them with a single param() command that returns a type-safe Variant. However, the deprecated commands will essentially try their best to take whatever was passed in and put it into whatever you want. So parnode() will see a number, and try to get it into a treenode. This is the same for returns: Callee side: return tonum(myObj); Caller side: treenode myObj = tonode(nodefunction(theNode, ...)); Again, this should work, because tonode() and tonum() will essentially try to take whatever is there and put it into a number/node. Where this will break is where one side is using the type-safe method while the other is not. Caller side: nodefunction(theNode, tonum(theObj)); Callee side: treenode myVal = param(1); // WILL NOT WORK BECAUSE param(1) IS A NUMBER NOT A NODE On FlexSim's side we have moved all (or most) of our code over to using the type-safe method. Thus any calls that interact between FlexSim code and your code should use the type-safe method. We hope that the proactive update script will resolve this for 99.99% of cases. Conveyor Fixed a bug with exceptions throwing when an item is picked by an operator while straddling two conveyors. Fixed bug that was caused when you have skewed rollers and the item size is less than half the width of the conveyor and you go through a merging side transfer. Fixed a bug with side transfers when the item is already moving to an inline transfer. Fixes to rotate selected and flip selected for Conveyors. Bug fixes on drawing conveyors. Fixed entry/exit transfer connecting with network nodes. Added listenable events for Conveyors, Photo Eyes, and Decision Points, allowing Process Flow to listen for conveyor events. Fixed an issue with transfers being deleted when you click on a visual tool Fixed photo eye draw with offset angle. Added list push/pull pick options for Decision Points and Photo Eyes. Process Flow Released a new Process Flow module. FlexSim 7.5.4 (April 24, 2015) Fixed an issue with installing flowitems from user libraries. Fixed an issue with the undo history in the Global Variables window. Added a Delete Path option to the context menu of Network Node paths. Fixed the Match Whole Word option in the Tree Search panel. Fixed an issue with task sequences to allow for creating more than 65,535 tasks. Fixed an issue with visual tools as containers storing correct stats when a warmup time is used. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a bug with \"Do not travel offset and block space on networks\" where task executers started at their endspeed even after a load/unload or after an extended period of time. Fixed a bug with TEs jumping to their max speed when leaving a network to do offset travel. Conveyor Fixed a bug that was causing exceptions when you copy/paste conveyors from one FlexSim instance to another. Fixed a bug with sending to the correct exit transfer when there are multiple transfers at the end of a conveyor. Fixed an issue where a conveyor transfer's inline speed rule was not being followed when transferring from a previously blocked non-accumulating conveyor. Fixed a bug causing exceptions when you reset the model in certain power and free models. Fixed a bug where accumulation stop events weren't being created at the right times (bad calculation of gap close point). Fixed issues with calculating the accumulation split time. Fixes for acceleration/deceleration, accumulation stops and speed changes. Fixed bugs with connecting from an object inside a visual tool to a conveyor. Fixed bugs with the kinematics and finish time not working on side transfers. Fixed a bug that created two output port connections from a Decision Point to an exit transfer. Fixed issue with accumulation split events being created at time FLT_MAX. Fixed issues with place offset onto an entry transfer Fixed an issue that sometimes caused items to move beyond their conveyor and ignore other items when doing an inline merge that accumulates to the merge point. Fixed exceptions throwing when building conveyor models with code. Fixed issues with adding conveyor types and transfer types to models with scaled units. Fixed an issue with stopped decision points not being resumed on reset. FlexSim 7.5.2 (March 4, 2015) Several fixes to the conveyor module (See the conveyor module's release notes topic). Updated images for the custom user toolbar items. Fixed an issue with docking 3 tool windows on the left or right side (the third would docked above the others). Fixed issues with the help manual throwing exceptions when there was no internet connection. Made it so the Reports and Stats export can export all object types, including module classes. Made a time graph only update its stats at the timed intervals (not on repaint), so custom stats don't get called repeatedly. Fixed the DWG importer to properly show the layer colors. Fixed an issue with the model floor not drawing properly. Conveyor Added an optional \"force\" parameter to conveyorresumeitem(), which override the stop/resume counting mechanism and force the item to resume. Fixed issues caused by conveyors with invalid spatial properties messing up snapping and causing other conveyors to disappear when you drag them. Fixed an issue with not being able to connect network nodes to entry/exit transfers Fixed an issue with doing an inline divert at a point where items accumulate Fixed an issue with items still being rotated when they leave the conveyor system Fixed an issue with transfers from faster to slower non-accumulating sections and the item accumulation at the transfer point. Fixed a bug where items get off-center over time in a conveyor system. Fixed an issue with double-clicking on conveyor transfers. Fixed an issue with feeding items into a Combiner. Fixed a UI glitch where if you drop a Decision Point or Photo Eye onto a conveyor, it is placed inside the conveyor in the tree. Fixed a UI bug with defining the location of an Exit/Entry Transfer on a curved conveyor. Fixed an issue with slug building on an accumulating section where other things are done on the section such as stopping/starting items manually. Added off-network routing logic for exit-to-entry transfers directly between two conveyors, so a user can dispatch from one conveyor to another that's not connected to it, using conveyorsenditem(). Added a color property to Conveyor Types. If you defined them manually on the conveyors before, you'll need to redefine them on the conveyor types. Added an optional delay time for releasing and exiting a restricted area. This can be used to define variable gapping. Added Area Restriction examples to the documentation. Added a Conveyor Commands topic to the user manual, which links to the Conveyor command group in the command documentation. Added a message trigger to Photo Eye and Decision Point types. Fixed an issue with motors not properly syncing power and free dog positions across their member conveyors. Various other minor fixes. FlexSim 7.5.0 (January 28, 2015) Added a new conveyor module and deprecated the legacy conveyor set. Improvements to the User Manual's user interface. You can now use the windowtitle attribute for a User Library. Fixed a crash when you call stopobject() on a FluidToItem. Fixed an issue with Export All Dashboards to HTML not properly laying out the widgets. Fixed a bug with importing Chinese characters from Excel. Fixed an issue with the Rack never returning to an idle state after calling for a transporter. AGV Fixed a bug with preemption. A* Made Preferred Paths take priority over barriers, so that you can make a Preferred Path act as a \"bridge\" across an area where an object barrier would otherwise block it. Improved the object barrier implementation to better take into account rotated objects. Made a mechanism that allows object members to customize the way the grid is defined for them, specifically to allow objects like the curved conveyor in the new conveyor module to work as an object barrier. Fixed a bug that caused TaskExecuters attached to the A* Navigator to not reset their positions on model reset. Conveyor Released a new conveyor module. FlexSim 7.3.6 (October 9, 2014) Fixed negative events to go back to previous functionality of setting the event time to the current model time. Fixed drawRect command drawing dark when shaders were enabled. Fixed opening saved Default 3D Views. Fixed the Filter Field in the Library to work with User Library Objects. Fixed an infinite loop when resuming a Dispatcher with circular connections to it's team members. Fixed issues with adding Performance Measures from Dashboard Statistic Widgets with Groups and grouped objects. Fixed the double-click feature in the Performance Measures results window graph (to display the associated dashboard). Fixed issues with exporting Experimenter results to Web Viewer format. Fixed some issues with updating model libraries to the latest version of FlexSim. Added flow item packing method to items saved to model libraries. Fixed renaming User Commands from the Toolbox to no longer remove the user command code. Fixed number precision values on the Financial Analysis widget to correctly store high precision numbers. Fixed the Gantt Chart displaying erroneous data when using a collect time. Fixed the Duplicate button in Edit Selected Objects so it no longer copies objects inside themselves. Fixed the Draw Surrogate option for animation components. Fixed the code snippet popup in triggers to allow for multiple lines. Fixed grid snapping in the GUI Builder. Fixed undos with the sizing panel in the Quick Properties. Fixed FlexSim compiling with Visual Studio 2012. Updated Toolbox right click options. Updated commands documentation for bundle commands to include that they are base 0. SQL query columns will now first look for named sub-nodes and then for object labels. FlexSim 7.3.4 (September 2, 2014) Fixed exceptions being thrown when using the Debugger. FlexSim 7.3.2 (August 28, 2014) Fixed a bug in the MTBF/MTTR and TimeTable to allow for all Down States. Fixed a bug in the Optimizer GUI when checking Manual stop only. Fixed a bug on the merge sort not resetting its input table properly. Fixed Model Units for Gallons so it no longer displays as Fluid Ounces. Fixed an issue with older models not properly opening Global Tables from the toolbox. Fixed a bug in the queue when it has a non-integer maxcontent. Restored ExpertFit. FlexSim 7.3.0 (July 31, 2014) Added an autosave feature to global preferences. Took shaders/shadows out of beta and added preferences for hard and soft shadows. Improved support for stereoscopic 3D including shadow support. Add a floor object. Added an autosave feature (set in Global Preferences). Added alignment property to dashboard model input widgets. Added a dashboard GUI class model input widget. Added support for linking to groups in dashboard statistics widgets. Added support for selecting multiple dashboard widgets. Dashboard dynamic model input fields and edit fields can be tied to global variables. Improved support for Full Screen mode including stereoscopic 3D and multiple monitors (F11 to switch in and out of full screen). Improved 3D mouse support. Removed the Tools menu and added an organizable Toolbox. Added Date Based mode to TimeTables. Added optional stateprofile parameter to stopobject and resumeobject commands. Added Stop Date & Time to the Experimenter. Fixed the Reports and Statistics available classes GUI. Fixed an issue with adding/editing triggers in the dashboard causing FlexSim to crash. Fixed an issue with exporting multiple TrackedVariables statistics to CSV files. Fixed an issue with aligning model input objects to the left/top of the dashboard. Fixed Content vs Time graph not collecting data when defined for a time interval. Fixed an issue with setting long object names/paths in bundles and dashboard statistic objects. Fixed tabbing in Quick Properties causing FlexSim to crash. Added FlexScript commands for use with Stat::Fit. Added search results to Command Helper window. Added copy/paste functionality to Dashboard (Model Input Widgets only). Updated the Automatic Data Distinction in the Excel Importer to more correctly import numbers. Added sql query() support for LIKE, GROUP BY, and non-trivial expressions in the SELECT column clause. Update the Excel Import/Export to handle importing into bundles and export bundle data. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Expressions can now be used in select columns of an sql query. In order to do this we needed to change our sql grammar to be more compliant with standard SQL. This means you can no longer use the AS clause in a WHERE or ORDER BY statement. You can now only use AS in SELECT and FROM clauses. Some parameter types for the query command have changed in c++ for more flexible type definitions. This means if you use the query() command in a c++ dll, you'll need to update your dll's headers and recompile the dll. If you use straight c++ compiled code or FlexScript for your query() command, then this should just update. Removed expertfit. Use Stat::Fit. AGV Fixed incorrect travel distance calculation. Fixed an issue with shadow rendering while manipulating paths. Added help manual file AGV > Objects > Control Point. Fixed a bug that threw exceptions when diverting AGVs to an elevator. Fixed various tool tips. Fixed default proximity stop distance. A* Added a picklist to the Transport Ref for adding TaskExecuter FlowItems to the A* Navigator. Fixed an issue with attaching TaskExecuters to A* when they weren't already connected to a navigator. Updated barriers to draw resizing arrows. FlexSim 7.1.4 (April 15, 2014) Fixed an issue with the Excel Import not properly handling importing multiple sheets from the same file. Fixed Basic Conveyors and Merge Sorts not drawing with shaders on. Fixed loading SimpleDataType nodes in modules in the Experimenter. AGV Fixed a bug with preemption not working properly. Fixed an issue with exceptions being thrown when beginning a travel task. Added support for accumulating paths. Added a feature to explicitly force a defined AGV orientation on a path. Added a feature to allow you to attach a load to the AGV as a trailer/tug. Added a quick properties button to switch the primary direction of a path. Added better support for preemption. FlexSim 7.1.2 (March 27, 2014) Fixed a memory leak with the 3D view. Fixed GlobalTables so they save their cell width and cell height. Fixed a bug in the MTBF/MTTR that caused the downtime value in the down function to always be 0. Fixed a bug causing Keyframe triggers to not be fired in operator animations. Fixed Animation Editor > Draw Surrogate > Main Object Content. Fixed Animation Editor > Component > Rotational Centroid fields. Fixed issues with editing animations in models where units were not meters. Fixed an issue causing global variables to be renamed to NULL when creating multiple global variables at the same time. Fixed exceptions being thrown when you try to use shaders in compatibility mode. Fixed issues displaying skp files while using the A* Module. Fixed an issue with not being able to select views in the GUI builder. Fixed DLL loading to properly load DLLs from the model directory. FlexSim 7.1.0 (March 10, 2014) Added Financial Analysis Dashboard Widget. Added Custom Dashboard Widget to allow any numeric data to be displayed in the dashboard, including table data, bundle data, global variables, etc. Added State Gantt Chart Dashboard Widget. Added a FlowItem Trace Gantt Chart Dashboard Widget. Dashboard table data can display current state values as strings. Added functionality to export dashboards to HTML. Moved the statistics tab out of object properties windows and into the Quick Properties window. Labels, tables, statistics, global variables and tracked variables can be \"pinned\" to the dashboard. More options to customize Dashboard Widgets (font size, bar size, custom display names, etc). More Model Input objects in the Dashboard including Radio Buttons, Listboxes, Trackers and Tables. Added picklist options for starting and stopping animations. Added picklist option to display labels on FlowItems in the 3D view. Moved the User Manual into FlexSim as a dockable window. Redesigned Robot GUI. Animation variables can point to components in an animation for quick referencing, not just surrogates. Improved User Toolbar items for Dashboard, GlobalTables, TimeTables and MTBF/MTTR buttons to allow for opening the objects. Improvements to shadows, shaders and mesh drawing. Improvements to the SKP Reader. Removed Model Views utility and placed it in the Quick Properties window. Added a \"Headlight\" feature to light sources. Updated Excel Importer/Exporter to handle relative paths of workbooks to the model. Improved the Excel Import's excelreadstr() and Automatic Data Distinction to more accurately read in values from excel, including dates and times. Added double click to open colors panel to all color wells. Fixed model unit scaling with flowitems when creating new models. Fixed issues with copying network nodes in containers. Fixed a bug in the Excel Import on Reset not handling multiple workbooks. Fixed a bug in the timetables causing the duration passed in to picklists to sometimes be negative. Fixed issues with closing/reopening dashboard widgets. Fixed sizing issues with dashboard widgets. Fixed Rack shelf tilt. Fixed an issue with having TaskExecuters using navigator logic for offset travel. Updated Move into Highlighted object to move into the model if no object is highlighted. Fixed a bug with running flypaths using model run speed. Fixed issues with adding flowitems to User Libraries. Fixed sizing issues with the Crane. Fixed a problem where Global Variables were not being properly loaded using save/load state. Fixed an issue with saving views in Full Screen Mode. Fixes to the Conveyor's drawing. Fixed issues with the Shape Frame tab of the Quick Properties window. Fixed a bug with the Basic Conveyor causing flowitems to not always exit when they're supposed to. Removed FlexSim Chart and save full history. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. The order in which MTBF/MTTR triggers is fired has been changed to reflect the documentation. Now the down/up trigger fires AFTER the down/up function. This may cause problems in models that depend on the down/up triggers firing before the down/up functions. Excel Multi Table Import using Automatic Data Distinction will import empty cells as string data, rather than as the number 0. AGV Fixed a bug with cpaddlistener() where the control point wasn't passing the right values into the listener callback. Fixed a bug with custom control point allocations not being cleared on reset. Fixed a bug where an agv will \"jump\" if turning around at a path section that doesn't fit its full length. Fixed a floating point precision issue where the agv doesn't always deallocate a control area on arrival at the next control point and thus causes deadlock with himself when he needs to reallocate the area after turning around for the next task. Fixed a bug with deallocation events not being created at the correct time. A* Fixed calculations for total travel distance on TaskExecuter objects. Fixed an issue with using offset travel and traveltoloc tasks. Added Help Manual to FlexSim. Fixed an issue with TaskExecuter's being set to state TRAVEL_LOADED when the state should have been TRAVE_EMPTY. Added VisualTool to objects that can be added to the A* Navigator as barriers. Fixed issues with FixedResource and TaskExecuter objects that are inside container objects. Barriers created by FixedResource objects can now be rotated 90 degrees. Fixed bug with using A* in models using units other than meters. FlexSim 7.0.6 (January 8, 2014) Fixed an issue in the installer regarding Optquest dll registration. Added support for compiling with Visual Studio and Visual Studio Express 2013. Fixed the duration passed into the TimeTable down function when the last row is combined with the first row. Fixed a bug with time tables when the model start time is on a Sunday. Changed the Event List to save its filters when the model is saved. Fixed an issue with global variables when saving or loading state files. Fixed a bug in Display Date and Time pick option. Fixed a bug with exporting bundle string data. Fixed an exception when documenting user commands with improperly formatted descriptions. Some fixes to the query() command. FlexSim 7.0.4 (December 3, 2013) Fixed a bug with the refresh rate overlay showing for educational users. Fixed an issue with library installcomponents not getting installed. Fixed a bug with the model start time getting reset incorrectly. Fixed issues with Labels not showing up in Dashboard Properties window. Fixed issues with saving open properties windows and top level windows. Refactored TimeTables to minimize the number of events created. Fixed issues with recursive debugging hiding the debug toolbar. FlexSim 7.0.2 (November 12, 2013) Fixed a bug with the Pick Operator with Animation picklist. Added scroll bar to Labels page Tree View. Fixed bug in Processor that showed item conveying when stopped using STATE_BLOCKED. Added code to read texture repeats/offsets into the assimp importer so that .ac file textures render more accurately. Fixed some import and display issues with SKP files. Fixed a bug that was occasionally causing WebKit to crash. Fixed a bug in the Presentation Builder that was causing the first flypoint to jump beyond the second flypoint. Fixed issues with the TimeTable repeating daily. Fixed parqty() issue on nodefunction, user commands, function_s, etc. Fixed bug in Dashboard to display current content of Fluid Objects. OnCreate now gets fired for all objects inside a container when the container is copied. Fixed an exception in the Startup Page's OnPreLoad when there was an invalid recent models path. Updated Experimenter PFM graph to draw the box plot on top of replication points. Made it so foreign languages' dashboard statistic names will be properly associated with the visible name that they're dragged from. Fixed bug with changing the model start time and it not being reflected in the model stop time. Fixed reset exceptions on presentation slide. Fixed a bug that crashes FlexSim when you call startanimation with a rank that doesn't exist. Fixed bug causing FlexSim to crash when copying NetworkNodes. Fixed round() to work properly with negative numbers and large numbers. Fixed triangular distribution from dividing by 0. Fixed issue with debugging on a script window script when the first line is commented. Other various bug fixes from the development list. FlexSim 7.0.0 (October 14, 2013) New User Manual with a more usable structure. 64-bit version (enables FlexSim to use more RAM). Windowing interface overhaul to use a docked window paradigm. Created a Quick Properties docked window that is context sensitive. The window will display the most used properties based on the current selection or the active document window. Tree Find/Replace is now integrated with the Quick Properties window and has support for case-insensitive searches as well as searching for node names. Library Icon Grid enhancements to include filtering, collapsible groups and edit modes. Library Icon Grid is context sensitive and changes its display based on the current selection or the active document window. Added a sampler button that is placed throughout the software to allow users to sample images, 3D media, objects, nodes, numbers, strings and colors. The sampler helps to eliminate some need for writing code. Downloads page that gives functionality to download and install Modules, 3D Shapes, Images and Models. Added a Measure/Convert tool Improved script console allowing scripts to be saved both in individual models and to the user environment. You can also now debug your script console code. Improved Presentation Builder interface. Improved the Flowitem Bin interface including making packing modes for container flow items visible and editable. Flowitem shapes may be changed through a drag and drop from the Library Icon Grid. Flowitems can now have their own custom animations. Improved the employment of shape frames in FR objects and Flowitems. Added a No Select flag to all objects. Added a multi-table Excel export and overhauled the Excel interface to match the MTEI. The new MTEI includes an option to automatically reimport tables on reset. Improved Animation Creator, including dynamic animations using animation variables, more detailed editing of keyframes, and keyframe triggers. 3D shapes may be added to an animation through a drag and drop from the Library Icon Grid. Created a global model start date/time that is tied to TimeTables. A stop date/time may also be specified. Revamped TimeTable window. A daily or weekly schedule may now be imported through the MTEI. Added and updated several picklist popups removing all text based picklist options. Improvement in the Code Editor and other areas where logic is defined through draggable constructs in the library icon grid and sampler buttons throughout popups and picklist widgets to automatically add code, etc. FlexSim commands also display a short description when typing in the code editor. Picklist fields and many popup fields have code highlighting and autocomplete. Added some FlexScript implementations of lambda expressions. Better debugger that allows you to access the tree and other areas of FlexSim while in debug mode. Hovering over variables during debug mode will display their current value. Panel control GUI enhancements. Added dashboard constructs that will replace most need for the GUI builder: Users can now do model input through dashboards instead of having to use the GUI builder. Multiple dashboards may be created. You can now pick which navigator a TE is connected to through their properties page (allows you remove them from all navigators). New hot keys/accelerators. Ctrl+K and Ctrl+L to resize objects up or down by 5%. Ctrl+W to close the active document window or the active floating window. Updated Ctrl+Tab and Ctrl+Shift+Tab to moved between tabs in the active floating or document window. Added the FluidConveyor to the default fluid library. Can now view an object's events by right clicking an object in the 3D view and selecting View | View Object Events. Complete OptQuest overhaul (includes multi-core support and experimenter integration). Better support for importing 3D shapes. FlexSim now supports the following formats: *.wrl; *.3ds; *.dxf; *.stl; *.skp; *.dae; *.obj; *.ac; *.x; *.ase; *.ply; *.ms3d; *.cob;*.md5mesh; *.irr; *.irrmesh; *.ter; *.lxo; *.csm; *.scn; *.q3o; *.q3s; *.raw; *.off; *.mdl; *.hmp; *.scn; *.xgl; *.zgl; *.lvo; *.lvs; *.blend Added a new mesh class for drawing in OpenGL. Stereoscopic 3D rendering (requires workstation Quadro or FireGL card for frame-sequential rendering). Enhanced graphical compatibility with integrated Intel cards. Improved 3D rendering, including shadow rendering, specular highlights on 3ds objects, bump maps, parallax maps, etc. Module Development SDK, including: Added SimpleDataType data type, which is a low-overhead class for fast, memory-efficient aggregation of data and for better object-oriented module code, with an easy mechanism for saving in the tree. Updated visual studio wizards that work with VS 2012 A module sample tutorial. More Documentation. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Removed 2D Shapes from objects. Removed the Planar view. Many open gl commands have been deprecated. The model update mechanism tries to replace all old usages with the new graphics usages. Usually this should work, but in some cases it may not. Note that glBegin(), glEnd(), glVertex(), glNormal(), glTexCoord() have all been completely deprecated, and eventually will no longer work. Going forward you should use the mesh api. The spaceobject() command has been deprecated and no longer works. In optimizing the graphics engine we realized that a 5-20% refresh rate improvement can be attained simply by removing functionality that is solely there to make the spaceobject() command work. So we've deprecated this command. It is still in the command list so models will update, but updated models that use it will have weirdly drawn shapes. OnLoad is no longer dispatched by the engine when a project/tree is loaded. If you have custom objects that depend on this event, you will need to use some other mechanism to fire logic when the model loads, i.e. through the OnModelOpen, or through model libraries' OnModelOpen. Kinematics functionality has changed so that by default kinematics will automatically be pruned off as you pass their individual end times. Note this required a restructuring of the kinematics data, so if your models don't do it on reset anyway, you'll need to re-initialize kinematics in models that are updated from older versions. In previous versions, getdatastat() was documented incorrectly for the parameter p2 (degrees of freedom). It was actually interpreting p2 as the number of samples in the set, not degrees of freedom. We've fixed that by simply not using that parameter and inferring the number of samples/degrees of freedom from other parameters. This means if you used this command previously it will return different/better results in this version. Also we've changed the way the confidence interval \"clamps\" to percentages in order to be \"safer\". Again this affects the values that were returned in previous versions vs this version. See the command documentation on getdatastat() for more information. We changed the name of the class FlexsimObject to FlexSimObject in-line with our naming scheme going forward. We have implemented an update script that replaces all instances of \"FlexsimObject\" with \"FlexSimObject\" in updated models. This means if certain things in your model are dependent on the name \"FlexsimObject\" (I don't know what that could be, except for maybe dll code that uses the name FlexsimObject) there may be issues with the update. The assimp 3ds importer is translating some of the files (namely the robot clamps) in a way that is different than our old 3ds importer. It is possible that other 3ds files may need their offsets manually adjusted after updating. Fixed the per-event 50-flowitem receive limit on the queue. This will break old models if your model is dependent on this bug. Fixed a bug with deceleration on a network when the task executer is blocking space and is given two travel tasks in a row (this might change old models) Several attributes were removed, so if you use these attributes in your model you will need to update your model properly: Removed Attributes: assertshape, asserttexture, billboard, distcutoff, events, instances, OnCaptured, OnCollision, OnInterrupted, state_graph, state_histo, state_percent, stats_contenthisto, stats_customgraphs, stats_throughputgraph, stats_throughputgraphmaxpoints, stats_throughputhisto, tables, textureaxis_s, textureaxis_t, travelstarttime, traveldirection, travelendtime, traveltimealpha, traveltimebeta, travelvpeak, traveldistance, travelstartx, travelstarty, travelstartz, travelendx, travelendy, travelendz, travelvmax, travelacc, traveldec Removed Draw Attributes: ignoredraw, ignorezbuffer, nochildrotate, nochildscale, noondraw, nopredraw, shapetype, reflective, luminous Removed Commands: travelto, traveltoupdate, ntravelto, ntraveltoupdate FlexSim 6.0.2 (August 1, 2012) Fixed a bug with double-clicking experimenter results to drill down into the dashboard data that the point represents. Updated the tree version number; old FlexSim versions will now correctly give an error message when trying to open new tree files. Fixed a bug that was causing FlexSim to crash when the bundle field names' length exceeded 500 characters. Fixed a bug with automatic state naming in setstate(). Fixed a bug with the context menu's positioning on code windows. Fixed nodeinsertafter()'s return value. Fixed a speed issue when resetting a model in Windows XP. Stopping the model now updates the content statistics on objects. Fixed a bug with OnRunStop firing at incorrect times in experiment child processes. Fixed a bug with the tree's bundle display. Fixed some display issues with bar charts in the dashboard. Fixed \"Distanced Traveled\" statistics objects. Fixed the \"Down State\" combo box on the MTBF MTTR gui. Fixed a bug on the Fluid Ticker if you create a tick in 0 time. Changed several task sequence picklist options to default to using the priority and preempt values specified in the gui. Changed the recorder pie chart's colors to match the state chart. Fixed some user interface quirks with the new trigger editor popup. Fixed the task executer's Breaks page. Fixed a bug with setname() on subnodes of hashed-list nodes in C++. Fixed a bug with applying the user commands window. Fixed a bug with sizes/locations sometimes being set to 0 when applying a properties windows that was opened through the right-click menu. Fixed the logevent() for receivefromport. Fixed an issue with the code editor's OnClose not asking for Apply. Other minor bug fixes from the development list. FlexSim 6.0.0 (March 23, 2012) Enhanced the experimenter to use multiple cores. Added a new web browser GUI widget. Added a new Dashboard window with HTML5 canvas statistics graphs. Redesigned the experimenter interface to integrate the new statistics objects. Added new experiment variable options \"number of objects in group\" and \"number of task executers.\" Developed web accessibility: Opening, configuring, running, and viewing models over the web (using a web browser or handheld device). Added a new AutoCAD dwg importer. Added model units and conversion windows. When building a new model, a screen will ask you what model units you will be using. When updating an old model, a screen will ask you what model units were used to build the old model. These settings are stored in the Tools folder of the model. Modified the picklist and trigger gui widgets to be easier to use. Created a new node datatype (DATATYPE_BUNDLE) for storing large amount of information efficiently (see documentation of bundle commands). Implemented a way to package media (3D shapes and bitmaps) into the model file so that you only need to distribute one file instead of a whole directory of files. Added an embedded command documentation window that can be opened by highlighting a command and pressing F1 in the code window or tree view. Added a FlexScript call stack to the debugger. Added a step-in function for FlexScript user commands and nodefunctions in the debugger. Added a logic builder interface for writing FlexScript logic without writing code. (You can change the default editor back to Code by unchecking 'File > Global Preferences > Environment > Use Logic Builder by Default'.) Enhanced the flexibility of pull logic and added a new pullitem() command for use in the Pull Strategy trigger. Improved templates to allow for popup gui windows on picklist options. Added a mechanism for multiple state profiles. Changed tables to always show the headers despite scrolling. Fixed a bug that was messing up the save operation when out of memory. Toggled the large-address-aware switch so that FlexSim can allocate more memory. Added floor() and ceil() commands. Added a switch for hashing the node's subnodes' names for quick lookup. Added an option in the Labels tab so that labels' values can be automatically reset. Other various fixes from the development list. Backwards Compatibility Note: The following changes may slightly change the way updated models behave. Fixed a critical bug in curved network length calculations. Fixed issues with gettenetnode() and distancetotravel() on TEs that use \"do not travel offsets and block network space.\" Made a change to distancetotravel() to base the \"back-to-node\" distance on the center of the object instead of the object's location. Changed pulling to no longer override the send-to. Now both send-to and pull must check out to transfer a flowitem. Changed receiveitem() so that it doesn't behave as if it were pulling. Made the Rack's OnEntry trigger fire before evaluating the dwell time. Added a new random number generator to generate seeds based on the replication number for the existing random number generator. Email support if you need a script to initialize the streams of a particular model back to the values used in prior versions. Added a new overload to the command tonode() to handle large memory addresses. Dlls will need to be recompiled with updated headers to obtain this fix. Fixed a bug where an endspeed of 0 wasn't properly telling a task executer to continue at full speed at the end of a travel task. The behavior now correctly matches the documentation."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/GeneralModelSettings/ModelGeneralProperties/ModelGeneralProperties.html",
        "title": "Model Settings",
        "content": "Overview and Key Concepts You can access the model settings from the Edit menu on the main toolbar. Properties The model has the following settings: Decimal Precision This option controls the precision of editable values seen in the interface. Spline Tension This option controls how straight the lines in a curved network node path are. A value close to 0 will produce straight lines. A value close to 1 will produce curved lines. Random Number Streams This option controls the range (between 0 and the specified value) of random number streams that will be initialized by Flexsim when the model is reset. Length Units This displays the length units of the model. Time Units This displays the time units of the model. Fluid Units This displays the fluid units of the model. Time Format This specifies what format the time portion of model date times should be displayed in. The following is a list of characters or elements that may be used in a time format. Body text can be added to the format string by enclosing the text in single quotes. Element Description h The one- or two-digit hour in 12-hour format. hh The two-digit hour in 12-hour format. Single-digit values are preceded by a zero. H The one- or two-digit hour in 24-hour format. HH The two-digit hour in 24-hour format. Single-digit values are preceded by a zero. m The one- or two-digit minute. mm The two-digit minute. Single-digit values are preceded by a zero. s The one- or two-digit second. ss The two-digit second. Single-digit values are preceded by a zero. t The one-letter AM/PM abbreviation (that is, AM is displayed as \"A\"). tt The two-letter AM/PM abbreviation (that is, AM is displayed as \"AM\"). Date Format This specifies what format the date portion of model date times should be displayed in. The following is a list of characters or elements that may be used in a date format. Body text can be added to the format string by enclosing the text in single quotes. Element Description d The one- or two-digit day. dd The two-digit day. Single-digit day values are preceded by a zero. ddd The three-character weekday abbreviation. dddd The full weekday name. M The one- or two-digit month number MM The two-digit month number. Single-digit values are preceded by a zero. MMM The three-character month abbreviation. MMMM The full month name. yy The last two digits of the year (that is, 1996 would be displayed as \"96\"). yyyy The full year (that is, 1996 would be displayed as \"1996\"). Time and Date Formats Don't Mix Time formats and date formats are exclusive and may not be mixed. Embed media with model This option allows you to embed all of the 3D and image files associated with your model into the model file. Export Embedded Media This option allows you to export the embedded 3D shapes and image files to the current directory the model is saved in. Additional Files - Embedded Media Some 3D shape formats include support for referencing external files from the main file. When loading a shape with external file references, FlexSim's packed media feature only embeds the main file and referenced textures. Other externally referenced files will not be embedded into the fsm file. Disable AutoSave for this model This option allows you to disable the AutoSave feature as defined in Global Preferences. Use Legacy SQL Nulls This option enables legacy SQL nulls. Upgraded models will automatically enable this option, but new models will default to using the SQL ANSI standard for nulls. Encrypt Model This area allows you to set a password for your model, so that only those with the password can open it. There is no way to recover lost passwords. To set a password, click the Set Password button . Then enter the desired password and click the Enter Password button. Enter the password again and click the Confirm Password button. To remove a password, click the button."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/GeneralModelSettings/GlobalPreferences/GlobalPreferences.html",
        "title": "Global Preferences",
        "content": "Overview and Key Concepts The global preferences dialog window specifies default user preferences for FlexSim. These preferences are saved across several models and remembered when FlexSim is closed and reopened. The dialog window is split into seven tabs. These settings are accessed from the File menu. The Fonts and Colors Tab The Fonts and Colors tab specifies syntax highlighting and other settings used in FlexSim's implementation of the Scintilla code editor. You can also specify settings and colors for the template editor, as well as for unformatted text (which is used in multi-line unformatted text controls like the user description portion of the Properties window). For more information on the Scintilla code editor, go to www.scintilla.org . The Scintilla text editor is under copyright 1998-2003 by Neil Hodgson < [email protected] >. All Rights Reserved. The Environment Tab In this tab page you can specify various settings such as whether you want code to be C++ or FlexScript by default, various grid settings in the ortho and perspective view, excel DDE settings, etc. AutoSave will automatically save a backup model of your currently open model. This backup model will be named [modelname]_autosave.fsm and will be saved in the same directory as your model. AutoSave will only save your model if it is reset and not running. You can disable AutoSave for a specific model in the Model Settings window. For a list of valid time and date format options, see Model Settings . Cloud Computing You can use this area to specify a list of remote computers for the Experimenter. When the Experimenter runs a job using remote computers, it will send an HTTP request to the specified IP Address and Port . It assumes that the FlexSim Webserver will respond to those requests. The Experimenter will launch the number of FlexSim instances specified in the CPUs field on each remote machine. You can use the Test Connections button to ping each remote computers, and report whether the ping was recieved or not. For more information on using remote computers for Experiment Jobs, see Running Jobs on the Cloud for more information. The Libraries Tab This tab page lets you control what libraries are displayed in the Drag-Drop Library. User Libraries to Open on Startup This section lets you list user libraries that will be automatically loaded when FlexSim is opened. The paths specified in the list are relative to your project/libraries folder (for example, C:\\Users\\User1\\Documents\\FlexSim 2022 Projects\\libraries) or the libraries folder of the install directory (for example, C:/Program Files/FlexSim/libraries). Enabled Libraries Enabled Libraries allow you to specify which libraries are visible and which order they appear in. Once a User Library is loaded, it will be displayed in this list. The Dynamic Content Tab In this tab page you can specify various settings that send or pull content from the FlexSim server in order to give you a more dynamic experience or to help FlexSim better understand how to improve the software. The Customize Toolbar Tab In this tab page you can customize which menu commands are accessible easily through the customizable section of the top toolbar. The Graphics Tab This tab is used for customizing 3D graphics settings so that FlexSim will run the best on your hardware. Several of these options provide suggestions or hints to the graphics card as to the quality you would like. If the graphics card does not support the feature requested, such as Quad Buffered Stereo 3D or a 32 Bit Depth Buffer, it will fall back to using the next best option that it supports. If no graphics acceleration is available with your system configuration, FlexSim will automatically fall back to using a generic software OpenGL implementation and ignore the settings defined here. OpenGL Context This option controls which type of OpenGL rendering context FlexSim will request from the graphics driver on your computer. Recommended - A hardware-accelerated OpenGL rendering context that supports almost all features of OpenGL, including deprecated features. This setting will request the best OpenGL Compatibility Profile that the graphics driver supports. Core Profile (3.3) - A hardware-accelerated OpenGL rendering context that supports only OpenGL 3.3 features. Deprecated features have been removed. Some graphics driver implementations and system configurations (such as VMware virtual machines) only perform hardware graphics acceleration with an OpenGL Core Profile. Generic (No GPU Acceleration) - A generic software renderer by Microsoft that supports OpenGL 1.1 on any hardware. Graphics processing will be done on the CPU and not the graphics card (GPU). This type of rendering context is slow, and certain graphics features, such as bone animations and shadows, will not work with this context. This option was previously known as Compatibility Mode. Graphics Cards If drag-dropping objects, making connections, or navigating the 3D view is not working properly with the Recommended context, your graphics card may not be compatible with FlexSim. You should first try updating your graphics card driver from your computer's manufacturer. If that does not help, try updating the driver from the graphics card vendor (typically Nvidia, AMD, or Intel). If that doesn't work, you should try switching to the Core Profile (3.3) OpenGL Context. As a last resort, select the Generic OpenGL Context to use your CPU for graphics processing. Show FPS Counter If checked, FlexSim will display a counter showing how quickly the 3D view is rendering in frames per second. 3D Text Choose the font and size for the object names and stats rendered in the 3D view. The font choice will also affect the default font for rendered 3D text. Use Shadows This option controls whether shadows will be rendered in the 3D environment. Shadow Type This specifies whether shadows should be rendered with hard or soft edges. Shadow Texture Size This specifies the resolution of the shadow map. A higher resolution will improve shadow quality, but will require more graphics processing. Cascade Splits This specifies the number of cascaded shadow maps to use. More cascade splits will improve shadow quality, but will require more graphics processing. Softness This affects how much shadows are blurred around the edges when using soft shadows. Build Mipmaps If checked, FlexSim will generate multiple resized \"thumbnails\" of each texture it loads. This allows for faster and better texture rendering when zoomed out, but requires approximately double the graphics card memory to store the texture. Texture Magnification Select how the graphics card should resolve the color of each pixel when you are zoomed in close to a texture. GL_LINEAR - This will do a linear interpolation of the color values of multiple texture elements surrounding the pixel. While this looks much better when zoomed in, the linear interpolation calculation can be slower than the GL_NEAREST option. GL_NEAREST - This will just take the color value of the texture element closest to the pixel. While faster, this doesn't look as good when zoomed in. Texture Minification Select how the graphics card should resolve the color of each pixel when you are zoomed out from a texture. GL_LINEAR - This will do a linear interpolation of the color values of multiple texture elements near the pixel. This allows for a more smooth look when zooming out, but the linear interpolation calculation can be slower than the GL_NEAREST option. GL_NEAREST - This will just take the color value of the texture element closest to the pixel. While faster, can cause weird \"flicker\" artifacts when zooming out. The other options are more or less similar to the above options, but allow more flexibility in defining which mipmap \"thumbnail\" to use as well. Color Bit Depth Choose the format in which you want the graphics to store color data. Depth Buffer Bit Depth Choose the format in which you want the graphics to store depth buffer data. Depth buffer values span from a 3D view's near plane to its far plane, so the depth buffer bit depth defines the granularity by which the graphics card can distinguish which objects are in front of or behind other objects. Stereoscopic 3D This option controls how stereoscopic 3D should be rendered. No Stereoscopic 3D - Do not attempt to do any stereoscopic 3D rendering. Quad Buffered Stereo 3D (Frame-Sequential) - Certain system configurations can use this mode to sync the 3D display with active-shutter glasses using four OpenGL render buffers to display every other frame to each eye. This mode requires specialized hardware and software designed for 3D, such as Nvidia 3D Vision. Once your computer is properly configured with a 3D display, this mode will automatically render 3D views in stereoscopic 3D. If you are using an Nvidia Geforce graphics card, the view must be full-screen (F11) to trigger the effect. On Nvidia Quadro or AMD FirePro graphics cards, the effect will work with all 3D views. This mode only works with certain configurations of hardware and software. The graphics card, 3D display monitor, cable/port (DVI-D, DisplayPort, HDMI 1.4a), graphics driver, and operating system must all be compatible for this mode to work correctly. If any of those pieces are not compatible, then FlexSim will automatically fall back to rendering without stereoscopic 3D. Side-by-Side - This option will render each eye to one side of the screen. This can be used to record 3D screenshots or video to be later played with a stereoscopic 3D picture viewer or video player. It can also be used in full-screen mode with certain 3D TVs or monitors that support side-by-side stereo 3D input. Top-Bottom - This option works similarly to side-by-side, but one eye will be rendered at the top of the screen and the other will be rendered at the bottom. Separation This controls the difference in horizontal position between the right and left images, changing the depth of the stereo effect. Convergence This controls the focal point of the stereo effect. Increasing the convergence makes near objects appear to pop out of the screen. RTX Mode These settings are applied when enabling RTX Mode. After modifying these settings, restart RTX Mode to see the changes. Denoiser - The denoiser is an AI-accelerated post processing step that blurs noise in the scene caused by heuristics in the ray tracer. If the denoiser is installed, a checkbox will be available for enabling or disabling it. If the denoiser is not installed, then a button will be available for attempting to automatically download and install the denoiser. If the automatic install isn't working, then the denoiser can be manually downloaded and installed. Samples Per Pixel - This option controls the number of rays that are traced per pixel. The final pixel color will be the average color of the samples. Using more samples per pixel can improve the quality of certain ray tracing effects, such as soft shadows, but it requires more processing, which lowers the frame rate. Code This tab is used for configuring how FlexSim interacts with dlls or modules made by other languages: Python Version Used when executing a node configured to call a python module. The version you specify should match the major and minor version of python found on your path. You can check which version of python is installed by running the following command in a command prompt window: python --version Note that in FlexSim, you only need to specify the major and minor version numbers. For example, if python 3.12.6 is installed, you should specify 3.12 in this field. See Connecting to Python for instructions on configuring a node to call a python function. .NET Runtime Config Used when executing a node configured to call a .NET dll function. If left blank, FlexSim will load the runtime found in FlexSim's directory install directory: program/CSharp/default.runtimeconfig.json This runtime should work for most cases. If your dll needs a different runtime configuration, you can specify an absolute path to a different runtime file in this field. See Connecting to a C# DLL for instructions on configuring a node to call a .NET dll function. The remaining properties on this tab deal with compiling C++ code found in the tree, such as the code found in MAIN:/project/exec/globals/nodefunctions/byteblocktofile . In general, only the FlexSim developers need to modify and compile that code. If you want to write custom C++ code, you should follow the instructions for adding a dll to a module or building a dll with the DLL Maker . These properties have no effect on module DLLs or DLL Maker projects. Enable C++ Debugging If checked, code in the tree will be compiled with debug symbols to allow debugging with Visual Studio. Visual C++ Version Specifies the version of Visual Studio to use when compiling the tree. Choosing this property sets the Visual Studio Install Path and Platform SDK Install Path properties. Visual Studio Install Path Specifies the path to Visual Studio. Platform SDK Install Path Specifies the path to the current platform SDK."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/GeneralModelSettings/ProcessFlowGeneralProperties/ProcessFlowGeneralProperties.html",
        "title": "Process Flow General Properties",
        "content": "Overview and Key Concepts Each process flow that you create in FlexSim has several general properties (settings) that affect the behavior of its activities and tokens. You can access and edit a process flow's general properties by clicking on an empty area somewhere in the process flow (so that nothing else is selected). The general properties will appear in the Properties pane. Properties Panels Process Flow views use the following properties panels: Process Flow Process Flow Instances Views Labels Process Flow Variables Capture View Process Flow Visual Theme Properties The properties that are available in the Theme dialog box are shown in the following image: For your reference, each property will be explained in the following sections: Themes You can use this menu to create your own custom theme. Apply Theme To Objects This button that applies the theme to previously created objects within the Process Flow. Default Connector Properties These properties affect the way connections are drawn between activities. See Adding and Connecting Activities for more information about connectors. Type - You can select different arrow styles from this menu. In this version of FlexSim, the two available styles are straight and Bezier. Future FlexSim versions might have more styles. Style - You can select the connector's line style, such as single or double, and solid, dashed, or dotted line, from this menu. Start Cap - You can use this menu to select the visual style of the start of the connector. You can give the start of the line a shape such as a square, a circle, or another arrowhead. End Cap - Similar to the Start Cap menu, you can use this menu to select the visual shape at the end of the connector. Default Text Properties These properties affect the style of the text in a process flow. It will affect text such as the name of containers or any other display text that has been added. NOTE: Changing the text settings here will not affect the text in activities, which is affected by the Default Activity Properties. Font - The font menu has 13 common fonts available. Size - Changes the font size. Style - You can make the text bold, italicized, or underlined. Color - You can change the color of the text by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Color Alpha - This slider changes the transparency of the text. Outline - If you check the Outline checkbox, text objects will appear to have a border around them. There are a variety of properties you can use to change the border display: Style - Changes the line style of the border. Thickness - Changes the thickness of the border. Color Selector - You can change the color of the border by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Color Alpha - This slider changes the transparency of the border. Default Container Properties These properties affect the style for containers such as flowchart objects. Hide Contents at Magnification - You can specify a zoom level where when you zoom out further than that level the contents of this container will be hidden. Fill - When the Fill checkbox is cleared, you will only be able to select the flow chart by clicking on its edge. This setting allows you to prevent clicking and selecting the background flow chart on accident. If you want to be able to click anywhere inside the flow chart object, check the Fill box. When the box is checked, the following properties will become available: Color - Change the color of the flow chart object's background by using the color selector. Alternatively, you can use the Sampler button to select a color from any object in your simulation model or process flow. Alpha - This slider changes the transparency of the flow chart object. Outline - If you check this checkbox, the border of the Flow Chart object will be visible. There are a variety of properties you can use to change the border display: Single or Double - Use these options to switch to from a solid black line or a double line (which looks like it has a white stripe running through it). Style - Changes the line style of the border. Thickness - Changes the thickness of the border. Color - You can change the color of the border by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Alpha - This slider changes the transparency of the border. Default Activity Properties It has the following properties: Set Activity Size - If you check this property you will be able to specify the size of activities. When this box is checked, the following properties become available: X - Sets the default width of activities. Y - Sets the default height of activities. Activity Color - You can change the color of the activities by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Resource Color - You can change the color of the shared assets by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Alpha - Sets the transparency for resources. Font - These properties control the text on activities and resources: Font - The font menu has 13 common fonts available. Size - Changes the font size. Style - You can make the text bold, italicized, or underlined. Color - You can change the color of the text by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. The Process Flow Properties Window When you click the More Properties button on the process flow's general properties in Quick Properties, it opens a window with additional process flow properties. It has has four tabs with several properties: The Variables Tab - You will use this tab to create Process Flow Variables. See Process Flow Variables for more information. The Visualization Tab - Controls the appearance of tokens and activity links in a process flow. See The Visualization Tab in the following section for a full explanation of the properties on this tab. The Labels Tab - This tab is identical to the Labels panel in Properties. Any changes you make here will show up in Properties and vice versa. See Labels for more information. The Triggers Tab - Use this tab to add any triggers to the process flow. Only the On Reset and On Message triggers are available. The Visualization Tab The Visualization tab can control the visual appearance of tokens and activity links in a process flow, which can be helpful for trouble-shooting and visualizing logic. The properties that are available in the Visualization tab are shown in the following image: Each property will be explained in the following sections: Display Parent/Child Links Use the Display Parent/Child Links menu to control how links between parent and child tokens will be displayed in the process flow. (See Sub Process Flows for an explanation of parent and children tokens.) Use the color selector next to the menu to determine the color of the link that will be drawn between parent and children tokens. This menu has the following options: When selecting token: all generations - When you click on a token during a simulation run, you'll see a thin line between the parent and any of its children tokens, grandchildren tokens, etc. This option is the default. When selecting token: one generation - When you click on a token during a simulation run, you'll see a thin line between the parent and any of its children tokens but not its grandchildren tokens. Never display - The links between parent and children tokens will never be displayed. Always display - The links between parent and children tokens will always be displayed, even when a token is not selected. Display Inter-Activity Links Use this menu to control how links between activities will be displayed in the process flow. Links are different from connectors. Links are logical connections between activities that do not necessarily control how tokens flow from one activity to another. Any shared asset activities usually require an inter-activity link. For example, the Acquire Resource activity will usually be linked to a Resource activity so that it can get permission to access that resource if it is available. Any activities that initiate a sub flow will require an inter-activity link. For example, Create Tokens and Run Sub Flow activities are usually linked to activities on a sub flow. (See Sub Process Flows - Linking to Sub Flows for more information.) Use the color selector next to the menu to determine the color of the link that will be drawn between linked activities. This menu has the following options: When selecting activity block - When you click on a linked activity, you'll see a thin line between the linked activities. This option is the default. Allow Toggling - You can manually show or hide a thin line between the linked activities directly in your process flow. To show or hide the links, select the activity block and click on the Eye symbol to switch between hiding and showing. Never display - Inter-activity links will never be displayed. Always display - Inter-activity links will always be displayed. Token Text Use the Display menu in the Token Text group to determine what text will display inside tokens during a simulation. The menu has the following options: Number of Children - If a token has children tokens, it will display how many children it currently has, as shown in the following image: Label Value - The token will display the value of a label. Use the Label Name menu to select the label that the token will get the value from. Custom - The token will display custom information. Use the Custom box to select the information that will be displayed. Use the color selector to determine the color of the text that will display inside the token. Token Colors You can use these settings to dynamically change the color of tokens during a simulation run based on a label value. For example, in the following image, the tokens will each have a different color based on the value in the itemType label: The Label Name menu sets the label that you will use to define the color scheme for the tokens in the Process Flow. It will dynamically search for any labels that exist in the process flow. If the Define Legend checkbox is checked, you will be able to set the colors that will be associated with certain values on the label. Click the Add button to add a color. Click inside the newly added color to change the color or the value it should be associated with in the label. Token Shapes You can use these settings to dynamically change the shape of tokens during a simulation run based on a label value. For example, in the following image, the tokens will each have a different shape based on the value in the itemType label: The Label Name menu sets the label that you will use to define the shapes for the tokens in the Process Flow. It will dynamically search for any labels that exist in the process flow. If the Define Legend checkbox is checked, you will be able to set the shapes that will be associated with certain values on the label. Click the Add button to add a shape. Click inside the newly added shape to change the shape or the value it should be associated with in the label."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/GeneralModelSettings/ViewSettings/ViewSettings.html",
        "title": "View Settings",
        "content": "Properties Panels The 3D view uses the following properties panels: Views View Settings View Style Capture View Follow Object Light Source Editor This dialog can be accessed by opening the View Style panel and clicking the Edit button in the Light Sources group. Default Lighting Limitations FlexSim's default shaders are limited to eight lights. Additional lights will be ignored. FlexSim's default shadow mapping currently only works with the first light source and only as a directional light. This tool has the following properties: X Position This number is the position along the X axis of the model where this light source is located. Y Position This number is the position along the Y axis of the model where this light source is located. Z Position This number is the position along the Z axis of the model where this light source is located. Color This allows the user to choose the color of the light from this light source. As point source If this box is checked, the light generated by this light source appears to be coming from a specific point, relative to the camera. If it is not checked, the light appears to be coming from a given direction only. Headlight If this box is checked, the light light source will move with the camera acting as a headlight. Edit in 3D View If this box is checked, a lightbulb object will be displayed in the 3D view and allow you to move the light source to a desired position."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/GeneralModelSettings/TreeProperties/TreeProperties.html",
        "title": "Tree Properties",
        "content": "About the Tree The tree window helps you browse for a node in the tree. The purpose of selecting a node is dependent on the context of the situation. Sometimes you will use this window to select a start node for a find/replace operation. Sometimes you will use this window to select an experiment variable in the Experimenter. You may also select objects or nodes in the Global Variables window. Select the node you want by clicking on it in the tree view, then click on the Select button. The window will then close and return to the original calling window. FlexSim is completely designed around the concept of a tree structure. All information in FlexSim is contained within the FlexSim tree, including the library objects, commands, and all model information. This tree hierarchy is made of individual nodes that link together and hold information. Nodes A node is the building block of a FlexSim tree. All nodes have a text containing the name of the node. Nodes can simply be a container for other nodes, can be a keyword used to define an attribute of an object, or may have a data item. The data item types which may be attached to a node are: number, string, object, or pointer. To attach data to a node, right-click on the node and go to the Insert menu option. You will see the four options to add data to a node. There are also shortcut keys for adding number, string(text), object, or pointer data. These are the keys N, T, O, and P. To add data to a node using a shortcut key, click on the node, then press the appropriate key. Nodes can also hold executable code. To make a node executable, first add string data to the node, and then toggle the node as either a C++ or a FlexScript node. To toggle a node as one of these types, right-click on the node and go to the Build menu. The symbols for the different types of nodes are shown here: Icon Description Standard Object Attribute/Variable Function (FlexScript) Function (FlexScript, not built) Function (C++) DLL Linked Function Global C++ Function Simple Data Adding and Deleting Nodes Nodes can be added and deleted from the tree. To delete a node, simply click the node and then hit the delete key. To insert a node, right-click on an existing node and choose Edit > Insert. This will add a new node immediately after the node that was clicked on. The shortcut for this operation is to hit the spacebar after first highlighting a node. Nodes can also contain a sub list of nodes called the content branch. If a node contains sub nodes it can be expanded by pressing the button. To insert a node into the content of an existing node, choose the option Edit, then Insert Into (or hit the Enter key as a shortcut). A node that has object data may contain a second sub list of nodes that are contained in a separate branch of the tree. This sub list of nodes is called the object attribute tree, and contains data that describes the properties of the object. A node containing object data may typically be referred to as an object node. When you click on an object node you will see a greater than symbol to the left of the node. Clicking on this button will open the object attribute tree branch. The following picture shows an expanded object attribute tree for the Queue object in the library tree. For nodes with object data, the attribute tree can contain many special attribute nodes. If a node is inside an object and has the name of a key attribute, it will have a special meaning to the object. The actual meaning of the attribute depends on what the attribute is and the object type. As an example, there are attributes for an object's position: 'spatialx', 'spatialy', 'spatialz'. The list of available attributes in FlexSim is found in attribute hints. In addition to containing all model, library, and project information, the FlexSim tree also stores all windowing and interface information. All open windows, menus, toolbars and buttons have a corresponding representation in the FlexSim tree. We call these types of nodes view objects. General Organization Trees FlexSim's root tree structure is split up into two parts. These are the Main Tree and the View Tree. The main tree contains the Executive data, the Library, and the Model. The view tree contains information on windows, editors, and other user interfaces. It also manages active windows. Main Tree To view the main tree, click the Tree button on the main toolbar. A new tree window will appear. In Quick Properties you'll see a Tree Navigation section. Click on Main . The main tree holds many of the higher level functions in FlexSim. It also includes the following crucial sub trees: exec, library, model, undo, media. Exec - This tree contains simulation executive data. This includes the simulation time, the eventlist, as well as other information with running a model. Library - The library of objects used by the model. Model - The simulation model. userlibrary - All loaded custom user libraries. Media - Stores Images, 3D models and Sounds. Undo - Holds undo history. A numerical value for this node is the limit on the number of undo steps. If there is no numerical data, undo will be disabled. Undo functionality may also be globally disabled. View Tree To view the view tree, click the Tree button on the main toolbar. A new tree window will appear. In the Properties window you'll see a Tree Navigation section. Click View . The view tree contains data for creating, storing, and using graphical user interfaces for objects. Active - This stores all of the currently open windows for the interface. Standardviews - All of the non-property windows are stored here. Popups - Popups are used throughout FlexSim, mostly for trigger and picklist options as well as utility purposes. Pages - Stores all of the Object Property Windows. Picklists - Preset code for picklist options. Keyboard Shortcuts The following table explains the keyboard shortcuts available in the tree: Shortcut Explanation Spacebar Insert a new node after. Enter Insert a new node into. N Add number data to the highlighted node. T Add string (text) data to the highlighted node. O Add object data to the highlighted node. P Add pointer data to the highlighted node. Shift + Delete Delete all data from the highlighted node. Backspace and Delete Delete the node. Properties Panels The 3D view uses the following properties panels: Tree Navigation Tree Search Node"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/FixedResourcesConcepts/FixedResourcesConcepts.html",
        "title": "Fixed Resources Concepts",
        "content": "What are Fixed Resources? Fixed resources are objects that remain \"fixed\" or stationary in your model. Generally speaking, fixed resources interact with flow items in the business system in various ways, such as storing or modifying flow items. Fixed resources can represent various steps or processes in your model, such as processing stations or storage areas. Fixed resources are a superclass of the following 3D objects: Source Queue Processor Sink Combiner Separator MultiProcessor Storage Object This topic will give in-depth information about how fixed resources work. It is intended for advanced users who want to get a deeper understanding of how fixed resources function. Fixed Resource Logic All fixed resource have similar logic for pulling flow items into the station, as well as sending the object on. They receive flow items through their input ports, do something to those flow items, then release the flow items to be sent on through their output ports. While different types of fixed resources receive and release flow items at different times, the logic for receiving and releasing a flow item are the same for all fixed resources. For example, the Queue can receive several flow items at the same time. The Queue also releases each flow item as soon as it enters the Queue. The Processor on the other hand receives exactly one flow item, processes that flow item, then releases it and waits until the flow item has left before receiving the next flow item. Although the Queue and Processor receive and release flow items at different times, the processes of receiving and releasing the flow item are the same for both. Each goes through a certain set of steps for each flow item that it receives and releases. Some of these steps are automatically handled by the fixed resource, and some allow you as a modeler to define the way flow items are received and released. All of these modeler-defined inputs can be edited in the Input and Output sections of an object's Properties. The following diagram shows the steps that a fixed resource object goes through for each flow item that it receives and subsequently releases. The following steps explain the logic of each of the major steps in the previous diagram: 1. Open input ports and find a flow item to receive When the fixed resource becomes ready to receive a flow item, it checks first to see if it is in Pull mode. If it is in Pull mode, then it calls the Pull Strategy function. This function returns a value of the input port number to open. If 0 is returned, then it will open all input ports. When an upstream item is released, it calls the Pull Requirement field for that item. This field should return a true (1) or false (0). If true, then it receives the flow item. If false, then it tries calling the Pull Requirement function again for the next flow item that has been released, or waits until another flow item is released by an upstream fixed resource. It continues this loop until the Pull Requirement returns a yes (1) for a particular item, upon which it receives that item. If the object is not in Pull mode, however, then the fixed resource skips all of the pulling logic, and simply waits for the first flow item that becomes available. Pull Logic Example The above diagram shows two fixed Resources. The pulling fixed resource is set to pull from the upstream fixed resource. The upstream fixed resource has released 3 of its flow items (green), while 2 flow items are still being processed (red). When the pulling fixed resource is ready to receive one of the upstream fixed resource's flow items, it calls its Pull Requirement function for each of the 3 released flow items, until the Pull Requirement function returns a yes (1). As soon as a yes is returned, the pulling fixed resource will receive that item and finish its pulling logic, until it is ready to receive the next flow item. If all of the 3 calls to Pull Requirement return a no (0), then the pulling fixed resource will wait. When flow item 4 is released later in the simulation, the pulling fixed resource will then call Pull Requirement for item 4, and if it returns yes, item 4 will be received. If it returns no, this process will repeat until a flow item is found that meets the Pull Requirement. Waiting for an Upstream Flow Item to Be Released When an upstream flow item is released, the pulling fixed resource will only call the Pull Requirement on that specific flow item. It will not call the Pull Requirement on previously released flow items for which the Pull Requirement has already returned a no (0). After a flow item is selected, received, and released the pulling fixed resource is again ready to recieve one of the upstream fixed resource's flow items. The same process is repeated such that all the flow items are reevaluated, including the flow items that returned a no (0) before. Send to Port of Upstream Objects In FlexSim versions before 6: if an object was configured to pull from upstream objects, the Send To Port of those objects was nullified. In version 6, the Send To Port of upstream objects is evaluated in conjunction with the pull strategy. Both the send-to-port and the pull strategy must be true for the item to be pulled. 2. Process the flow item Once the flow item has entered the fixed resource, the item is \"processed\" according to the type of fixed resource, and then released. For example, if it is a Processor object, then the flow item will be processed for a certain amount of time. If it is a Queue object, then the product is released immediately. 3. Release the flow item and determine which output ports to open When the flow item is released, the fixed resource calls the Send To Port function. Like the Pull from Port function, this function returns a port number. The fixed resource then opens that port. If the port number is 0, then it will open all of its output ports. Once the ports are opened, the fixed resource waits until a downstream object becomes ready to receive the flow item. If the fixed resource is configured to reevaluate its Send To Port, then each time a downstream fixed resource becomes available to receive a new flow item, the upstream fixed resource will reevaluate the Send To Port for that flow item. It's important to note here that this is only executed when the downstream object becomes available. It does not continuously evaluate just because a downstream object is already available. If you want to manually force a re-evaluation at some other time than when a downstream object becomes available, then you can do so by calling the openoutput() command on the upstream object. Send to Port Value If the returned port is greater than 0, then that port will be opened. If the returned port is 0, then all ports will be opened. If the returned port is -1, the flow item will not be released, and should be released explicitly later on using the releaseitem() command, or should be moved out using the moveobject command. When it is released again, the Send To Port function will be called again. A -1 return value is more for advanced users. 4. Transfer the flow item to the next station Once the flow item is released, and a downstream object is ready to receive it, if the \"Use Transport\" checkbox is not checked, then the item will be passed immediately in to the downstream object. If the \"Use Transport\" checkbox is checked, then the fixed resource will call the Request Transport from function. This function should return a reference to a TaskExecuter or Dispatcher. If a valid reference is returned, then a default task sequence will automatically be created, and a TaskExecuter will eventually pick the flow item up and take it to its destination. You can also return a 0 value in the Request Transport From field. If a 0 value is returned, then the fixed resource will assume that a task sequence has been created explicitly by the user, and will not create the default task sequence himself. If you return a zero, then you will need to create the task sequence yourself. You can easily get started at doing this by selecting the \"Create task sequence manually\" pick option in the Request Transport Field picklist, then manually editing the code from there. Using a Transport If an object is configured to use a transport to transport flow items to downstream objects, then when the downstream object pulls the flow item or becomes ready to receive the flow item, instead of immediately moving the flow item into the next station, the object creates a task sequence for a Task Executer to travel to the object, pick up the flow item, travel to the downstream object, and drop it off there. This operation involves several important steps. First, when this happens, the object calls its Request Transport From function, and gets a reference of the object to give the task sequence to. Then the flow item goes into a \"Waiting For Transport\" state. This means that the destination for that flow item has been set in stone, and cannot be changed. Send To Port and pull screening has already finished and decided on sending the flow item out that port, and this decision will not change. Also, each fixed resource object keeps track of two numbers: the number of flow items that are in transit to the object, and the number of flow items that will be transported out of the object, but have not been picked up yet. These two variables are respectively called nroftransportsin and nroftransportsout. Once the object has called the Request Transport From field, it increments its own nroftransportsout variable, and notifies the downstream object, which subsequently increments its own nroftransportsin variable. The object then creates a task sequence of: Travel to the upstream object: Travel task. Load the item: FRLoad task. Break to other task sequences if appropriate: Break task. Travel to the downstream object: Travel task. Unload the item into the downstream object: FRUnload task. Frload/Frunload Tasks The fixed resource uses frload/frunload tasks instead of regular load/unload tasks. These tasks are just like regular load and unload tasks except that right before the TaskExecuter moves the flow item, it notifies the fixed resource of the operation being done, so that the fixed resource can appropriately decrement its nroftransportsin/nroftransportsout variable. In summary, the nroftransportsout of the upstream object and the nroftransportsin variable of the downstream object are both incremented at the same time that the Request Transport From function is called and the task sequence is created. The nroftransportsout variable is then decremented just before the TaskExecuter finishes the frload tasks and moves the flow item out of the upstream object. The nroftransportsin variable is decremented just before the TaskExecuter finishes an frunload task and moves the flow item into the downstream object. The integrity of the nroftransportsin and nroftransportsout variables is essential to the correct operation of the objects involved because each object may screen further input/output based on these variables. For example, consider a queue with capacity of 10. If the queue's current content is 5 and it also has 5 products that have not arrived yet, but are in transit to the queue, then the queue must close its input ports because it may possibly become full, even though at this point it only has 5 products. An incorrect nroftransportsin variable could cause serious problems for the queue's content. What does this mean for you? Two things. First, if an object has chosen to transport a flow item to a given downstream object, there is no turning back or redirecting the flow item to a different destination, because this would mess up the proper decrementing of nroftransportsin/out variables. Secondly, be very aware of when you use frload/frunload versus regular load/unload, because this can affect the input/output functionality of the objects. Simply put, each execution of a Request Transport From function should eventually (if not immediately) result in the creation of exactly one frload task to load the item from the upstream object and exactly one frunload task to unload the item to the downstream object. In all other cases, regular load and unload tasks should be used. Alternatives to Using Port Connections You can control the flow of items between fixed resources using a few different methods: Use standard port connections and standard send-to/pull logic as explained in the previous sections. Push and pull from a list , instead of connecting output/input ports. Initiate transport manually , bypassing port hand-shaking logic. The following sections describe these scenarios. Using Standard Port Connections It's important to first explain what the standard port connection mechanism is doing. Ports define the objects a fixed resource can send to and pull from When you connect fixed resource input and output ports together, you are defining the search patterns by which upstream fixed resources can find downstream fixed resources to send their items to, and/or the search patterns by which downstream fixed resources can find items to pull from upstream fixed resources. For example, when a downstream fixed resource is ready to receive its next item, it is limited in its search for receivable items to the objects that are connected to its input ports. Also it will search them in the order that the ports are connected (input port 1 first, then port 2, and so forth). Ports contain open/closed state to determine availability Input and output ports can be open or closed. Fixed resources use this open/closed state in deciding where items can go. When an item is released to port 1, for example, the object's output port 1 is made open (green). If the corresponding input port of the downstream object is also open (green), then that is a signal that the downstream object is ready to receive an item, so the item will be sent to that downstream object. Port rankings can be important If you are use routing rules based on defined values, i.e. itemtype or labels, port rankings can be important. For example, if you're sending by itemtype directly, then items with itemtype 1 will be sent to port 1. This means you must make sure your port rankings are ordered correctly. There are some situations that work well using port connections: One-to-One Routing - Port connections work well when you're just ending an item from one station to a single next station. Just connect the upstream station to the downstream station with an 'A' connection. One-to-Many Routing - Using port connections works well if you're sending an item from one station to one of many stations using a basic routing rule like round-robin, first available, random, or by some defined value like itemtype. Just connect the station to the set of downstream stations, then define the routing rule through the Send To Port field in the object's Flow tab. Many-to-One Routing - Using port connections can work well if you're send an item from one of many stations to a single downstream station using a basic pulling rule like round-robin, first available, longest waiting, random, or by some defined value like item type. Just connect each upstream station to the downstream station, then define the pulling rule through the Pull Strategy field in the object's Flow tab. Pushing and Pulling from a List Some scenarios can make the management of port connections difficult, such as many-to-many routing, or when prioritization is complex. In these cases, using Lists to define the search pattern for sending and receiving items can be easier than using ports. The connectionless routing example shows how to do this. In this example you use pick list options that push and pull from an item list. These pick list options override the default port connection mechanism. Here the upstream objects' Send To Port logic pushes items onto the list, while downstream objects' Pull Strategy pulls items from the list. The search pattern is thus defined by the items that are on the list at any given time, i.e. the items that have been released by upstream objects. Since the searching relies solely on the list, connecting ports is no longer necessary, so you can leave objects that use this mechanism unconnected. Initiating Transport Manually In some cases, you may want to initiate transport of items before the downstream object(s) are ready to receive them. As explained above, when using standard send-to/pull logic, transport defined by the Use Transport checkbox will only be initiated when the downstream object is ready to receive the item. To override this functionality you would need to bypass the send-to/pull mechanism altogether. To do this, leave the upstream and downstream object input and output ports unconnected. Then use triggers on the upstream object(s), such as OnEntry or OnProcessFinish, to manually create a task sequence to transport the items to their destinations. If you are using the Process Flow module, you could use an Event-Triggered Source to start a custom process when the desired event happens. You can use center ports for referencing between objects. Events The following sections explain important considerations related to fixed resource events. For information on events, see the Event Listening page. On Entry The on entry event will fire the object's on entry trigger. This event fires as soon as an item enters the object, before any other logic is executed. This means that you can change the object's variables, labels, etc., and have those changes be applied correctly within the event logic. However, executing commands that may affect further events of the object should not be executed in the entry/exit trigger, because some events have yet to be created in the event logic of the object, and functions which affect the object's events should wait until those events have been created. In such a case you should send the object a delayed message in 0 time (using the senddelayedmessage() command), and then execute the functionality from the message trigger. This allows the object to finish the rest of its event logic before your commands are executed. These include (but are not limited to), stopping an object, opening and closing input and output ports and in some cases the creating and dispatching of task sequences, depending on the types of tasks that are in them. It has the following parameters: Event Parameter Type Explanation Entering Item Object The flow item that entered the object. Input Port int The input port number the flow item entered through. On Exit The on exit event will fire the object's on exit trigger. This event fires as an item is leaving the object, before it has actually left the object. This means if you check the content of the object in the on exit trigger, the content will include the exiting item. As with the On Entry event, you should use the senddelayedmessage() command when execution certain functionality lie stopping the object or opening and closing ports. It has the following parameters: Event Parameter Type Explanation Exiting Item Object The flow item that is exiting the object. Output Port int The output port number flow item will exit through. On Message The on message event will fire the object's on message trigger. This event is fired when the object receives a message. It has the following parameters: Event Parameter Type Explanation Sending Object Object The object that sent the message. Message Param 1 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 2 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 3 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Pull Requirement The pull requirement event only fires if the object's Pull is enabled. This event fires whenever an input port becomes ready. An input port is ready when it is open AND the upstream output port that it is connected to is open. The connection becomes ready when either the input port is opened, OR the upstream output port is opened (assuming the paired port is already open). The pull requirement will be evaluated for each ready flow item within the object connected to the input port which just became ready. It has the following parameters: Event Parameter Type Explanation Item Object The ready flow item that is being checked to see if it should be pulled or not. Port int The port number that the ready flow item is trying to enter through. The object's pull requirement field must return either true (1) or false (0). If the expression returns a true (1), then the ready flow item will be pulled in through the ready input port. If the expression returns false (0), then pull requirement will be evaluated for the next ready flow item. Pull Strategy The pull strategy event only fires if the object's Pull is enabled. The object's pull strategy field should return the port number to pull flow items from. Returning 0 will pull from the first available port. This event fires when an input port becomes ready. See the Pull Requirement event above for what constitutes a ready port. This event has no parameters. Send to Port This event is fired once for each flow item at the time the flow item is ready to be sent to the next object. The time at which the flow item is ready will vary depending on the object. For example, a Processor is ready to send a flow item at the end of its processing time. A Queue is ready to send a flow item after its batch has accumulated and has been released. It has the following parameters: Event Parameter Type Explanation Releasing Item Object The flow item to release. If the return value of the send to port field is 0, the object will release the flow item to the first available downstream object. This will cause all output ports to be opened, and the flow item may leave through the first ready port. You can return the port number of a connected out object to release the item to a specific object. This will cause the output port to be opened, and the port number will be assigned to the flow item. The flow item will then be pushed (or pulled) when the port connection becomes ready (output port and connected downstream input port are open). If the return value is a -1, then the flow item will not be released at all, and should be released later on using the releaseitem() command, or should be moved out using the moveobject() command. Transport Reference The transport reference event allows you to define which task executer object will be used to transport the releasing flow item to a downstream object. This event is only fired if the Use Transport box is check on the object's properties under the Output section. This event fires after the send to port event if the downstream object is available to receive the releasing item. It has the following parameters: Event Parameter Type Explanation Item Object The flow item to transport. Port int The port number the flow item will exit through as specified by the Send To Port field. Destination Object The destination object the flow item will be transported to. Priority double The priority of the transport request as set by the object's properties. Preempt int The preemption option as set by the object's properties. The return value of the transport reference field is the reference to the task executer object that will be given the task sequence for transporting the releasing item. If the return value is 0, it is assumed that you created and dispatched your own task sequence in the transport reference field. In this case, the object will not dispatch its own task sequence. Pick Offset This event fires when the transporting object has moved to the fixed resource object and is ready to use offset travel in order to travel to the item's position to pick the item up. It has the following parameters: Event Parameter Type Explanation Item Object The item that is being transported from the fixed resource object. Loader Object The task executer object that is loading the item at the fixed resource object. Place Offset This event fires when the transporting object has moved to the fixed resource object and is ready to use offset travel in order to travel to the destination where the item will be placed. It has the following parameters: Event Parameter Type Explanation Item Object The item that is being transported to the fixed resource object. Unloader Object The task executer object that is unloading the item at the fixed resource object. On Stop This event fires when the object is stopped either through code using Object.stop() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has. This number includes the current stop request. State int The state the object will go into it while stopped. ID int The id or key for the stop request. Priority double The priority of the stop request. State Profile int The profile number of the new state. The default state profile is 0. On Resume This event fires when the object is resumed either through code using Object.resume() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has remaining. ID int The id or key for the resume request. State Profile int The profile number of the state that was used when the object was stopped. The default state profile is 0. On Content Change This event fires anytime the object's content changes. This occurs when a flow item enters or exits the object. This event has no parameters. On Input Change This event fires when a flow item enters the object. This event has no parameters. On Output Change This event fires when a flow item exits the object. This event has no parameters. On Staytime Change This event fires when a flow item exits the object, immediately after the On Output Change event. This event has no parameters. On State Change This event fires when the object's state changes. This event allows you to listen to the object's state being changed to a specific state, or to track the state's the object is in. It has the following parameters: Event Parameter Type Explanation State Profile Node treenode If the To State is in the default state profile, this parameter is NULL. Otherwise, this parameter is a reference to the state profile node (tracked variable) in the object's state_profiles attribute node. To State int The state number the object will be set to. From State int The state number the object was in before the new state is set. On State Value Change The on state value change event is associated with the tracked variable that stores the state statistics for the object. Listening to this event allows you to use the change rule. This event fires at the same time as the on state change event. This event has one requirement, the state profile number. If using the default state profile, this number is 0. On Reset The on reset event is fired for each object when the model is reset. This event has no parameters. On Draw The on draw event is fired each time the 3D view is repainted. This happens at different times depending on run speed and refresh rates. In order to ensure model repeatability, code used in the on draw trigger should not use the stochastics commands (distributions) that use FlexSim's random number generator. It has the following parameters: Event Parameter Type Explanation View treenode The view the object is being drawn in. Having multiple 3D views open will cause the on draw event to be fired for each view. Properties Below are the set of property names supported by fixed resources. Property Type MaxContent Number Pull Boolean PullRequirement Code PullStrategy Code SendToPort Code TransportPreempt Options TransportPriority Number TransportRef Code UseTransport Boolean States For information about collecting state statistics see the Statistics section below. Each fixed resource implements its own set of states. For information on a fixed resource's states, see the reference page for that fixed resource. Statistics The following sections explain important considerations related to fixed resource statistics. State A categorical tracked variable is used to collect state history for each object. This data can be used to get the total time at a each state, display the current state of the object on a dashboard or to display the state history for an entire model run. See the Dashboard , Statistics Collector and Tracked Variables pages for more information. Throughput Throughput is made up of the input statistic and the output statistic. For each flow item that enters the fixed resource, the input is incremented by one. When the flow item exits the fixed resource, the output is incremented by one. Throughout statistics always increase. Content The content statistic records how many flow items are inside of the fixed resource. An object's content can increase or decrease throughout the model run. Additional data can also be gathered from the content statistic to include the minimum, maximum and average value. This data is calculated from the entire model run. Container Flow Items A container flow item that contains other flow items will only increase the content of the fixed resource by one, not by each of the containing flow items. Staytime The staytime statistic is recorded for each flow item that exits the fixed resource. The staytime is equal to the exit time - entry time. Additional data can also be gathered from the staytime statistic to include the minimum, maximum and average value. This data is calculated from the entire model run."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/Source/Source.html",
        "title": "Source",
        "content": "Overview and Key Concepts The source is used to create the flow items that travel through a model. Each source creates one class of flow item and can then assign properties such as labels or color to the flow item it creates. Sources can create flow item per an inter-arrival rate, per a scheduled arrival list, or simply from a defined arrival sequence. The source is a fixed resource, although it does not receive flow items. Instead it creates the flow items and releases them. For that reason, it has no Input properties. The source can operate in one of three possible modes: Inter-Arrivaltime Mode: In inter-arrivaltime mode, the source uses its inter-arrivaltime function. This function's return value is the time to wait till the next arrival of a flow item. The source waits this amount of time, then creates a flow item and releases it. Once the flow item has exited, it calls the inter-arrivaltime function again and repeats the cycle. Note that the inter-arrivaltime is defined as the time between the exit of one item and arrival of the next item, not as the time between the arrival of one item and the arrival of the next item. If you would like to make the inter-arrivaltime be defined as the true time between arrivals, then use a downstream queue with a large capacity to make sure that the source immediately sends on flow items when they are created. You can also specify whether the inter-arrivaltime should be executed for the first arrival, or if the first flow item should be created at time 0. Arrival Schedule Mode: In arrival schedule mode, the source follows a schedule defined by the user in the schedule table. Each row of the table specifies an arrival of flow item(s) at a given time in the simulation. For each arrival entry, you can specify the arrival time, name, number of items to create, and additional item labels for that arrival. The arrival times should be ordered correctly in the schedule table, meaning each entry's arrival time should be greater than or equal to the previous entry's arrival time. If the source is set to repeat the schedule, then it will immediately loop back on the first arrival after the last arrival, causing the first entry's arrival to happen at the exact same time as the last entry's arrival. Note here that, when repeating the schedule, the first entry's arrival time only applies to the very first loop through the schedule. This allows you to have an initial arrival time that is executed once, but not repeated. If you would like the source to wait a given amount of time between the last arrival and the repeated first arrival, then add an extra entry to the end of the table, give it an arrival time greater than the previous entry's arrival time, but have 0 flow item arrive for that new entry. Arrival Sequence Mode: Arrival sequence mode is like arrival schedule mode, except that there is no time associated with the arrivals. The source will create the flow item for a given table row, and then as soon as the last flow item for that entry has exited, it will immediately go to the next row in the table. You can also repeat the arrival sequence. Events For information on events, see the Event Listening page. The source uses the standard events that are common to all fixed resources. See Fixed Resources - Events for an explanation of these events. The source has the following additional events: On Creation This event occurs once for each flow item at the time the item is created. The item is created inside the source, but without triggering the On Entry event. This is the first opportunity to get a reference to the created item. Any labels defined in columns in the Arrivals table have not yet been added to the item at this point. This event is immediately followed by the On Exit event unless the item's release is delayed by a downstream object. It has the following parameters: Event Parameter Type Explanation Created Item Object A reference to the flow item created by the source. Row Number int The row number of the row in the Arrivals table where this arrival was defined. This will be 0 when using the Inter-Arrival Time Mode. Inter Arrival Time This event only fires if the source's Arrival Style is set to Inter-Arrival Time. This event once for each flow item that is created. The inter arrival time event is fired immediately after the On Reset of the source and immediately before each On Exit event. This event has no parameters. The return value of the Inter-Arrival Time field is a number which is the model time until the next flow item is created. States For statistical purposes, the source will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Generating There are no flow items in the source. It is waiting until its next creation event to create flow item. Blocked Flow items have been created and are waiting to leave the source. Statistics The source tracks the following statistics. These can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Output The total number of items that have exited the source. Staytime If the source is blocked and items cannot immediately exit the source when they are created, the time the item remains in the source before exiting will be recorded. Properties Panels The Source object uses the following properties panels: Statistics Visuals Labels Source Output Ports Triggers Properties The Source object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Source object uses the following properties: Property Type ArrivalSchedule ArrivalSequence ArrivalStyle Options FlowItemClass Options InterArrivalTime Unit Code RepeatTable Boolean TimeZeroArrival Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/Queue/Queue.html",
        "title": "Queue",
        "content": "Overview and Key Concepts The queue is used to store flow items when a downstream object cannot accept them yet. By default, the queue works in a first-in-first-out manner, meaning that when the downstream object becomes available, the flow item that has been waiting for that object the longest will leave the queue first. The queue has options for accumulating flow items into a batch before releasing them. The queue is a fixed resource. It will continue to receive flow items until it reaches its maximum content. If batching is disabled, the queue will release the flow item as soon as it arrives in the queue, and the OnEndCollecting trigger will be called right before each flow item is released. Batching If batching is enabled, then the queue will wait until it receives its target batch of flow items, then it will release all the flow items in the batch at the same time. By default the maximum wait time is 0. A max wait time of 0 means that there is no max wait time, or the queue will wait indefinitely to collect its batch. If the max wait time is non-zero, then when the first flow item arrives, the queue will start a timer. If at the end of the timer the batch is still not met, the queue will finish collecting the batch and release all flow items it collected. The OnEndCollecting trigger is called just before the flow items are released, a reference to the first flow item in the batch is passed as item, and the number of items collected is passed as param(2). If the queue is configured to flush contents between batches, then it will close its input ports as soon as it ends collecting a batch, and will wait until the full batch has exited before opening the input ports again. If the queue doesn't flush contents between batches, then if will immediately start collecting another batch as soon as it finishes collecting each batch. This means that you can have several finished batches still in the queue at any given time, waiting to leave. Target Batch Size Setting a target batch size does NOT nullify the queue's maximum content value. This means if you set your target batch size to a value higher than the maximum content, the queue will never meet its batch because its maximum content is too small. Events For information on events, see the Event Listening page. The queue uses the standard events that are common to all fixed resources. See Fixed Resources - Events for an explanation of these events. The queue has the following additional events: On End Collecting This event occurs when the queue completes a batch of items, before the items leave the queue. It has the following parameters: Event Parameter Type Explanation Entering Item Object A reference to the last flow item in the batch. Batch Size int The number of flow items in the batch. States For statistical purposes, the queue will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Empty The queue is empty. Collecting The queue is collecting flow items for a batch. Releasing The queue has finished collecting its batch(es) and is releasing the flow items that it has. Also if the queue is not batching, and has flow items in its queue, it will be in this state. Waiting for Transport The queue has flow items that have been released and are ready to move downstream, but are waiting for a transport to come and pick them up. Statistics The queue uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties Panels The Queue object uses the following properties panels: Statistics Visuals Labels Queue Output Input Ports Triggers Properties The Queue object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Queue object uses the following properties: Property Type BatchSize DoBatching Boolean FlushContent Boolean ItemPlacement Options LIFO Boolean MaxBatchTime Unit StackBaseZ Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/Processor/Processor.html",
        "title": "Processor",
        "content": "Overview and Key Concepts The processor is used to simulate the processing of flow items in a model. The process is simply modeled as a forced time delay. The total time is split between a setup time and a process time. The processor can process more than one flow item at a time. Processors may call for operators during their setup and/or processing times. When a processor breaks down, all of the flow items that it is processing will be delayed. The processor is a fixed resource. It is also a super-class of the combiner and separator 3D objects. It continues to receive flow items until its maximum content is met. Each flow item that enters the processor goes through a setup time followed by a process time. After these two processes have finished, the flow item is released. If the maximum content value is greater than one, then flow items will be processed in parallel. Maximum Content Value Be very careful about setting a maximum content value greater than 1. The processor will not correctly request operators if you are processing more than one flow item at a time. MTBF/MTTR times will also not be calculated correctly if the maximum content is greater than one. Also, state statistics won't be recorded correctly. The maximum content value is only there to allow you to create multiple very simple processors in parallel without having to drag that many into your model. If you want to edit any properties other than the simple setup, process times and flow page properties, then you should drag several Processors out, and have each just receive one flow item at a time. Setup/Process Operators If the processor is set to use operators during its setup or process time, then at the beginning of the respective operation it will call the user-defined number of operators using the requestoperators command with the processor as the station, and the item as the involved object. This will cause the processor to be stopped until the operators have arrived. Be Aware of Relevant Commands Please be aware of how a requestoperators task sequence is constructed, as described in the requestoperators documentation in the Command Helper. Also know how the stopobject command works as explained in the Command Helper. Once all operators have arrived, the processor will resume its operation. Once the operation is finished, the processor will release the operators it called. If the processor is set to use the same operators for both setup and process time, then the processor won't release the operators until both the setup process times are finished. Events For information on events, see the Event Listening page. The processor uses the standard events that are common to all fixed resources. See Fixed Resources - Events for an explanation of these events. The processor has the following additional events: On Process Finish This event is fired when the process time has expired. When this event fires it will execute the on process finish trigger where you can execute custom logic using FlexScript or preconfigured pick options. It has the following parameters: Event Parameter Type Explanation Process Item Object The flow item being processed On Setup Finish This event is fired when the setup time has expired, right before the process time event fires. When this event fires it will execute the on setup finish trigger where you can execute custom logic using FlexScript or preconfigured pick options. It has the following parameters: Event Parameter Type Explanation Setup Item Object The flow item that is about to be processed Operator Reference The operator reference event will only fire if either the Use Operator(s) for Setup or Use Operator(s) for Process is checked. This event will fire after the item has entered the processor, before the setup or process time has begun. This event will evaluate the Pick Operator field. If the processor has a setup and process time and the Same as Setup checkbox on the processor's properties is unchecked, the operator reference event will fire twice. The first event will fire right after the setup time event. The second event will fire after the process time event. It has the following parameters: Event Parameter Type Explanation Item Object The flow item being processed Trigger int If the operator is being called for setup, the trigger value is 1. If the operator is being called for processing, the trigger value is 2. The Pick Operator field should return a reference to a task executer or dispatcher object that will be used to process the item. The processor will dispatch a task sequence to the associated object which will call the task executer to the processor then utilize them until the setup and/or process time is complete. Process Time This event fires after the setup is finished. It will evaluate the Process Time field. It has the following parameters: Event Parameter Type Explanation Item Object The flow item being processed The Process Time field should return a number which is the processing time for the item. Setup Time This event fires after the item has entered the object. It will evaluate the Setup Time field. It has the following parameters: Event Parameter Type Explanation Item Object The flow item being processed The Setup Time field should return a number which is the setup time for the item. States For statistical purposes, the processor will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Idle The object is empty. Setup The object is in its modeller-defined setup time. Processing The object is in its modeller-defined process time. Blocked The object has released its flow item(s), but downstream objects are not ready to receive them yet. Waiting for Operator The object is waiting for an operator to arrive, either to repair a breakdown, or to operate on a batch. Waiting for Transport The object has released a flow item and a downstream object is ready to receive it, but a transport object has not picked it up yet. Statistics The processor uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties Panels The Processor object uses the following properties panels: Statistics Visuals Labels Processor Output Input Ports Triggers Properties The Processor object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Processor object uses the following properties: Property Type AnimateItems Boolean NumProcessOperators Number NumSetupOperators Number OperatorPreempt Options OperatorPriority Number OperatorRef Code ProcessTime Unit Code SetupTime Unit Code UseProcessOperators Boolean UseSameNumOperators Boolean UseSetupOperators Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/Sink/Sink.html",
        "title": "Sink",
        "content": "Overview and Key Concepts The sink is used to destroy flow items that are finished in the model. Once a flow item has traveled into a sink, it cannot be recovered. Any data collection involving flow items that are about to leave the model should be done either before the flow item enters the sink or in the sink's OnEntry trigger. The sink is a fixed resource. Since it destroys all flow items it receives, the sink does not have any output logic. Events For information on events, see the Event Listening page. The sink uses some of the same standard events that are common to all fixed resources which include: On Entry On Message Place Offset Pull Strategy Pull Requirement On Stop On Resume On State Change On State Value Change On Input Change On Draw See Fixed Resources - Events for an explanation of these events. States The sink is always in the collecting state (unless the object is stopped and the state is set). Refer instead to its input statistics. Statistics The sink tracks the following statistics. These can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Input The total number of items that have entered the sink. Properties Panel The Sink object uses the following properties panels: Statistics Visuals Labels Input Ports Triggers Properties The Sink object shares several properties with all fixed resources: Fixed Resource Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/Combiner/Combiner.html",
        "title": "Combiner",
        "content": "Overview and Key Concepts The combiner is used to group multiple flow items together as they travel through the model. It can either join the flow items together permanently, or it can pack them so that they can be separated at a later point in time. The combiner will first accept a single flow item through input port number 1 before it will accepts the subsequent flow items through the remaining input ports. The user specifies the quantity of subsequent flow items to accept through input ports 2 and higher. Only after all subsequent flow items required by the user have arrived will the setup/process time begin. The combiner can be set to require operators during its setup, processing and repair times. The combiner is a sub-class of the processor, which is in turn a fixed resource. During operation, the combiner first receives exactly one flow item from its first input port. It will wait until a flow item has arrived through input port 1 before it allows other flow items in. Then it collects a batch of flow items using its component list. The component list specifies the number of flow items the combiner should receive from each other input port for each batch. Row 1 of the component list corresponds to the number of flow items that should be received from input port 2. Row 2 corresponds to input port 3, and so forth. The component list is updated automatically when you connect objects to its input ports. Once the combiner has collected a batch, it goes through a setup and process time, calling operators to the setup and process operations as defined by the processor functionality. See Processor for more information. The combiner can operate in one of three modes: pack, join, or batch. In pack mode the combiner moves all flow items that were received through ports 2 and higher into the flow item received through input port 1 and then releases this container flow item. In join mode the combiner destroys all flow items except the one received through input port 1. In batch mode, the combiner simply releases all the flow items once the batch is collected and the setup and process times have finished. The Pull Strategy field is not used for the combiner. The combiner handles this logic on its own. If you are transporting flow items into the combiner, then while it is receiving the container flow item, it will only allow one flow item to be in transit to itself at a given time, namely the container flow item. Once the container flow item has arrived, the combiner will allow all other flow items for the components list to be in transit at the same time. Receiving More Than One Flow Item Through Input Port 1 The combiner is configured to always receive exactly one flow item from input port 1. If you are in batch or join mode, you may want to receive more than one flow item from the upstream object that is connected to input port 1. Here you can do one of two things. The simplest option is to connect the upstream object to both input ports 1 and 2 of the combiner, then in the components list make the first row entry be one less than the number of flow items you want to collect. The combiner will receive one flow item through input port 1 and then the remaining number you want from input port 2. If this doesn't work in your scenario, then the other option is to add a source to your model, connect it to input port 1 of the combiner, and give the source a constant inter-arrival time of 0. Receiving Different Types of Flow Items If you have a single upstream object that can hold many different types of flow items, but you want to screen these different types separately in the combiner's component list, you can do this by connecting several output ports of the upstream object to several input ports of the Combiner. For example, a combiner receives item types 1 and 2 from a single upstream processor. You want to collect 4 of item type 1, and 6 of item type 2, and pack them onto a pallet. To do this, first connect the pallet's source to input port 1 of the combiner. Then connect the processor's output port 1 to the combiner's input port 2, and then connect the Processor's output port 2 to the combiner's input port 3. Have the processor's sendto strategy send by item type. Then in the combiner's component list, enter a 4 in the row corresponding to input port 2, and a 6 corresponding to input port 3. Manually Moving Flow Items Out of the Combiner If you manually move the container flow item out of the combiner, either using a task sequence or the moveobject command, make sure that you specify a non-zero port number for the item to exit through. When the combiner is packing, it moves packed flow items out of itself into the container flow item. This causes its exit trigger to fire, and the way that it distinguishes between a part moving into its container and the container exiting is by the port number of the exit trigger. If the port number is 0, it assumes it is a part being moved into the container, and does nothing. Thus, if you explicitly move the container flow item out of the combiner, and the port number is 0, it will assume it is a packed flow item, and will not receive the next container flow item. Events For information on events, see the Event Listening page. The combiner uses all of the same events as the processor. See Processor - Events for an explanation of these events. States The combiner uses all of the same states as the processor. See Processor - States for an explanation of these states. Statistics The combiner uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties The Combiner object uses the following properties panels: Statistics Visuals Labels Combiner Processor Output Input Ports Triggers Properties The Combiner object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Combiner object uses the following properties: Property Type CombineMode Options ComponentsList"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/Separator/Separator.html",
        "title": "Separator",
        "content": "Overview and Key Concepts The separator is used to separate a flow item into multiple parts. This can either be done by unpacking a flow item that has been packed by a combiner or by making multiple copies of the original flow item. The splitting/unpacking is done after the process time has completed. The separator can be set to require operators during its setup, processing and repair times. The combiner is a sub-class of the processor, which is in turn a fixed resource. It receives one flow item, then executes the setup and process times for that flow item. If the separator is in unpack mode, then once the setup and process times are finished, the separator moves the unpack quantity out of the flow item and into itself. Then it releases all flow items that it unpacked. Once all unpacked flow items have left the separator, it releases the container flow item. If the separator is in split mode, once the setup and process times are finished, the separator duplicates the flow item so that the resulting total number of flow items is the split quantity. Then it releases all of the flow items. For both unpack and split modes, once all flow items have left the separator, the separator immediately receives the next flow item. The Split/Unpack Quantity This quantity value has subtle differences for unpack mode versus split mode. When in unpack mode, the separator unpacks the exact number of flow items specified by this quantity. This means the total number of flow items that result is one more than the unpack quantity (the unpack quantity + the container flow item). When in split mode, however, the separator duplicates the flow item split quantity - 1 number of times. This means the total number of flow items that result is the exact same as the split quantity. Unpacking Order When the Separator is in unpack mode, it unpacks the container flow item from back-to-front, meaning it pulls the last item in the container out first, then the second to last, and so on. If you want flow items to be unpacked out in a certain order, then set their rank in the entry trigger. Events For information on events, see the Event Listening page. The separator uses all of the same events as the processor. See Processor - Events for an explanation of these events. The separator has the following additional events: Split Unpack Quantity This event fires after the on process finish event fires. It determines how to unpack or split the flow item. It has the following parameters: Event Parameter Type Explanation Item Object The flow item to be split or unpacked The Split/Unpack field should return a number which is either how many items to unpack from the container item, or how many items to split the item into. States The separator uses all of the same states as the processor. See Processor - States for an explanation of these states. Statistics The separator uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties Panels The Separator object uses the following properties panels: Statistics Visuals Labels Separator Processor Output Input Ports Triggers Properties The Separator object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Separator object uses the following properties: Property Type SeparateMode Options SeparateQty Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/MultiProcessor/MultiProcessor.html",
        "title": "MultiProcessor",
        "content": "Overview and Key Concepts The multiprocessor is used to simulate the processing of flow items in sequentially ordered operations. The user defines a set of processes for each multiprocessor object. Each flow item that enters will go through each process in sequence. Multiprocessors may call for operators during their process steps. The multiprocessor is a fixed resource. It receives one flow item, puts the flow item through its sequence of processes, then releases the flow item. Once the flow item has exited the multiprocessor, it receives another flow item and goes through the processes again. Only one flow item will ever be in the multiprocessor at one time. For each process that you define, you can specify a name for the process, a process time, a number of operators to use for that process, priority and preempting values for the tasks sent to the operators, and the operator or dispatcher to send operator tasks to. At the beginning of each process, the multiprocessor calls the process time field, sets its state to the name of the process, and calls operators if the number of operators value is greater than 0. When the process is finished, the multiprocessor releases all operators called for that process, and calls the process finish trigger. It also passes the process number into the process finish trigger as parval(2). When Should I Use a MultiProcessor? You would use the multiprocessor if you have one station that involves several operations with separate process times and/or different resources. You can also use the multiprocessor as a shared station for different types of operations. For example, itemtype 1 needs to go through operations A, B, C, and D, and itemtype 2 needs operations E, F, G, and H, but both itemtypes must share one station for their processes. Give the multiprocessor 8 processes: A - H, and for itemtype 1 have processes E - H have 0 process time, and for itemtype 2 have processes A - D have 0 process time. The Multiprocessor Does Not Accommodate Piping of Processes Piping happens if, once a flow item gets finished with process 1 and moves to process 2, another flow item can take up process 1. Thus several flow items can be \"flowing down the pipe\" at any given time. If you would like to simulate this, use several Processor objects connected in sequence. Events For information on events, see the Event Listening page. The queue uses the standard events that are common to all fixed resources. See Fixed Resources - Events for an explanation of these events. The combiner has no additional events. States For statistical purposes, the multiprocessor will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Idle There are no flow items being processed. User-defined States These are states defined by the user, one for each process. Getting Statistics for User-defined States The Multiprocessor state profile differs from the Default state profile. To view these individual User-defined states in a State Chart , create a custom State Table with the User-defined states in it and reference the Multiprocessor's state profile. Blocked The multiprocessor has finished all processes for a flow item, released it, but there is no downstream object ready to receive it. Waiting for Operator The multiprocessor is waiting for operator(s) to arrive in order to start a process. Waiting for Transport The multiprocessor has finished all processes for a flow item, released it, and there is a downstream object ready to receive it, but the flow item has not been picked up by a TaskExecuter yet. Statistics The multiprocessor uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties Panels The MultiProcessor object uses the following properties panels: Statistics Visuals Labels MultiProcessor Output Input Ports Triggers Properties The MultiProcessor object shares several properties with all fixed resources: Fixed Resource Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/FixedResources/BasicFR/BasicFR.html",
        "title": "Basic FR",
        "content": "Overview and Key Concepts The BasicFR object is a fixed resource (FR stands for fixed resource ) that is designed to be customized into a user library object. It passes almost all inheritable fixed resource logic to pick-list functions so that user library developers can specify virtually all fixed resource functionality for the object. The BasicFR allows you to specify logic for its reset, entry, exit, and message triggers, as well as advanced functionality like stop object/resume object, pick/place offset, transport in notify/complete, transport out notify/complete, and other advanced functions. In the entry, exit, reset, and message triggers of this object, you will need to implement logic that receives and releases flowitems using the receiveitem() and releaseitem() commands. There are also several more commands that you can use in processing items, such as setstate(), senddelayedmessage(), and all of the commands in the fixed resource category of the command list. This object is meant to be a bare-bones implementation of the fixed resource, where all logic is implemented by the modeller. Commands receiveitem() releaseitem() Extra Parameters for the Entry/Exit Triggers The BasicFR passes 2 extra parameters into its entry and exit triggers: param(3) - the current value of its nroftransportsin variable. parval(4) - the current value of its nroftransportsout variable. Events For information on events, see the Event Listening page. The BasicFR uses the standard events that are common to all fixed resources. See Fixed Resources - Events for an explanation of these events. The BasicFR has the following additional events: Advanced Functions This event is fired for various reasons. For the most part, you will not need to implement any logic for these notifications, but they are nonetheless made accessible to you. When the event is fired it will execute the Advanced Functions trigger. It has the following parameters: Event Parameter Type Explanation Message Type int The type of the notification. See below for more information. The different message types are listed as follows: ADV_FUNC_CLASSTYPE - This is a request to get the type of class of the object. The classtype should be returned as an integer with certain bits set high. You can construct this value using the bitwise OR operator | and several classtype macros. For example, a FixedResource's classtype is: CLASSTYPE_FLEXSIMOBJECT > CLASSTYPE_FIXEDRESOURCE. ADV_FUNC_DRAGCONNECTION - This function is called when a keyboard key is held down, and the user clicks and drags from this object to another object. In this case, the object to which the mouse was dragged is passed in as param(2), the ascii value of the key that was clicked is passed in as param(3), and the classtype value of the object is passed in as param(4). ADV_FUNC_CLICK - This function is called when the object is clicked on. Here a reference to the view in which it was clicked is passed in as param(2), and the click code is passed in as param(3). Possible click codes are: DOUBLE_CLICK, LEFT_PRESS, LEFT_RELEASE, RIGHT_PRESS, RIGHT_RELEASE. ADV_FUNC_KEYEDCLICK - This function is called when a key on the keyboard is held down and the object is clicked on. Here the view is passing as param(2), the click code is passed in as param(3), and the ascii value of the pressed key is passed in as param(4). Possible click codes are: DOUBLE_CLICK, LEFT_PRESS, LEFT_RELEASE, RIGHT_PRESS, RIGHT_RELEASE. The return value of the Advanced Functions trigger should either be a 1 or a 0. If 0, the object will execute the default functionality associated with the given notification. If 1, the object not do any default functionality, but assumes that the function has overridden the default. On State Change This event is fired when the object's state is changed with the Object.setState() command. It has the following parameters: Event Parameter Type Explanation State int The new state the BasicFR is changing to. State Profile int The profile number of the new state. The default state profile is 0. If the function returns a 0, the object will proceed to change its state. If the function returns -1, the object will do nothing, leaving it in its previous state. If the function returns a positive number, the state will be changed to this new state number. On Transport Out Notify Complete This event is fired at two different times. First is when the object is notified that a flow item is going to exit the object using a transport. This function is referred to as transport out notify. The second time it is fired is when the transport has arrived, finished its load time, and is about to move the flow item out. This is called transport out complete. A variable is passed into this function telling you which operation is applicable. In this field you can manage things like the nroftransportsout variable, as well as how to screen further output/input to the object. It has the following parameters: Event Parameter Type Explanation Operation int This is 1 or 0. 1 means it is a transport out notify operation, 0 means it is a transport out complete operation. Item Object The item that is going to leave this object. Port int The output port number through which the item will exit. Transporter Object For a transport out complete operation, this is the task executer that is picking the item up. Num Transports Out Node treenode The value of this node should be incremented by 1 at a notify operation, and decremented by 1 at a complete operation. You can also get the value of this node to know how many items are waiting for a transport to pick them up. If the return value is 0, the object will assume that nothing was done and will execute its own default logic. If this function returns a 1, the object will assume the proper variable management was done and will do nothing. If this function returns a -1 and the operation is a complete operation, the object will again assume proper variable management, but in addition, it will notify the transporter that it is not ready to receive the flow item. The transporter then must wait until it is notified that it can resume its operation. The reason you may need to use this is in case this object has been stopped using Object.stop(). If so, you may not want any flowitems going out. If this is the case, then you will need to save off a reference to the transporter using the savestoppedtransportout() function, and then return -1. Then, when it is ok for the transporter to resume its operation (usually from this object's resume object function) you will need to call resumetransportsout() to notify all stopped transports that they may resume their operation. On Transport In Notify Complete This event is fired at two different times. First is when the object is notified that a flow item is going to enter the object using a transport. This function is referred to as transport in notify. The second time it is fired is when the transport has arrived, finished its unload time, and is about to move the flow item into the object. This is called transport in complete. A variable is passed into this function telling you which operation is applicable. In this field you can manage things like the nroftransportsin variable, as well as how to screen further output/input to the object. For example, you may want to allow more than one flow item to be in transit to the object at the same time. In such a case, you could call receiveitem when you are notified of an upcoming entry within this field. It has the following parameters: Event Parameter Type Explanation Operation int This is 1 or 0. 1 means it is a transport in notify operation, 0 means it is a transport in complete operation. Item Object The item that is going to enter this object. Port int The input port number through which the item will enter. Transporter Object For a transport in complete operation, this is the task executer that is dropping the item off. Num Transports Out Node treenode The value of this node should be incremented by 1 at a notify operation, and decremented by 1 at a complete operation. You can also get the value of this node to know how many items are still in transit to this object. If the return value is 0, the object will assume that nothing was done and will execute its own default logic. If this function returns a 1, the object will assume the proper variable management was done and will do nothing. If this function returns a -1 and the operation is a complete operation, the object will again assume proper variable management, but in addition, it will notify the transporter that it is not ready to receive the flow item. The transporter then must wait until it is notified that it can resume its operation. The reason you may need to use this is in case this object has been stopped using Object.stop(). If so, you may not want any flowitems coming in. If this is the case, then you will need to save off a reference to the transporter using the savestoppedtransportin() function, and then return -1. Then, when it is ok for the transporter to resume its operation (usually from this object's resume object function) you will need to call resumetransportsin() to notify all stopped transports that they may resume their operation. Pick Place Offset The pick place offset event is fired at the same time as the task executer standard events, pick offset and place offset. The difference is in what parameters are available. For place offset, this event is fired when a transport object is attempting to place, or unload, a flow item into this object. For pick offset, this event is fired when a transport is about to pick, or load, an item from this object. It has the following parameters: Event Parameter Type Explanation Pick Operation int This is either a 1 or 0. 1 means it is a pick operation, 0 means it is a place operation. Item Object The item that is being picked or placed. Other Object Object The object that is picking or placing the item. X Value Node treenode The value of this node should be set in this function, and will represent the offset location returned by this function. For example, if I want the picking/placing object to offset 10 in the x direction, 0 in the y direction, and 5 in the z direction, I would set the X Value Node to 10 using xvalnode.value = 10, yvalnode.value = 0, and zvalnode.value = 5. Y Value Node treenode See X Value Node. Z Value Node treenode See X Value Node. For both operations, if you are implementing your own pick/place logic here and do not want the default logic to be executed, you must return 1 from this function. If a 0 is returned the object will assume that nothing was done and will execute its own default logic. Stop Resume The stop resume event is fired at the same time as the task executer standard events, on stop and on resume. The difference is in what parameters are available. For stop, this event will fire when the object is stopped through the Object.stop() command. For resume, this event will fire when the Object.resume() command is called. This event will execute the Stop Object - Resume Object trigger. This trigger should define a strategy for how the object will \"stop\", and how it will \"resume\". This field should also manage data for remembering how many stop requests have been made, what the state of the object was before it was stopped, etc. It has the following parameters: Event Parameter Type Explanation Stop Operation int This value is either a 1 or 0. 1 means the object is being stopped, 0 the object is being resume. Stop State int This value is only applicable for a stop operation. It specifies the requested state passed into the Object.stop() command. Num Stops Node treenode If this is a stop operation, the value of this node should be incremented by 1 within this function. If it is a resume operation, the value of this node should be decremented by 1 within this function. Also, you will get the value of this node to know how many stop commands have been called on this object. When the object is stopped for the first time (the value of the node goes from 0 to 1), you should execute logic specifying how to stop this object. When the object is resumed for the final time (the value of the node goes from 1 to 0), you should execute logic specifying how to resume this object. Last Stop Time Node treenode When this object is stopped for the first time, this node should be set to the current time, so you can know the amount of time the object was stopped when it is finally resumed. State Before Stop Node treenode When this object is stopped for the first time, this node should be set to the object's current state, so that you can know which state to go back to when the object is resumed. State Profile int The profile number of the stopped state. The default state profile is 0. If you are implementing your own stop/resume logic here and do not want the default logic to be executed, you must return 1 from this function. If the object gets a return value of 0 from this function, it will assume that nothing was done, and will execute its own default logic. States For statistical purposes, the BasicFR will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Idle The object is empty. Setup The object is in its modeller-defined setup time. Processing The object is in its modeller-defined process time. Blocked The object has released its flow item(s), but downstream objects are not ready to receive them yet. Waiting for Operator The object is waiting for an operator to arrive, either to repair a breakdown, or to operate on a batch. Waiting for Transport The object has released a flow item, and a downstream object is ready to receive it, but a transport object has not picked it up yet. Statistics The BasicFR uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties Panels The BasicFR object uses the following properties panels: Statistics Visuals Labels Output Input Ports Triggers Properties The BasicFR object shares several properties with all fixed resources: Fixed Resource Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/TaskExecuterConcepts/TaskExecuterConcepts.html",
        "title": "Task Executer Concepts",
        "content": "What are Task Executers? Task executer is the top level class for several objects in the library. Operators, Transporters, ASRSvehicles, Cranes and other mobile resources inherit from the task executer class. All of these objects can travel, load flow items, unload flow items, act as shared resources for processing stations, and perform many other simulation tasks. Task executers and their sub-classes are able to: Execute task sequences Execute offset travel The task executer is also a sub-class of the Dispatcher class, and thus a task executer can actually act as a team leader that dispatches task sequences to other team members. Its handling and dispatching logic have subtle differences from the Dispatcher, however. When the task executer receives a task sequence, it first checks to see if it already has an active task sequence. If there is no active task sequence, or if the newly received task sequence is preempting and has a priority greater than the currently active task sequence, then it will start executing the new task sequence, preempting the active one if needed. Otherwise it will go through the normal Dispatcher logic. If the task sequence is not passed on immediately, then it will queue up in the task executer's task sequence queue, and if the task sequence is still in the queue when the task executer finishes its active task sequence, the task executer will then execute the task sequence. You can view a task executer's active task sequence and task sequence queue during a model run by right-clicking on the task executer and selecting View Task Sequence Queue. User-Defined Properties All task executers have the following fields that can be defined by the modeler: Capacity - This parameter defines a value for the maximum content of the object. In default operation, the object will never load more flow items than this value specifies. Capacity Value This value can be deceiving if you create your own task sequences. Since the task executer's first and most important responsibility is to execute task sequences, if you give the object a task sequence to load more flow items than its maximum content, then it will load the flow items anyway. The only real instance in which the maximum content value is used is for the TASKTYPE_BREAK task. If the task executer comes to a break task, and it has reached its maximum content, then it will not perform the break, and will continue on its current task sequence instead of breaking to another task sequence. This works in the default case when task sequences are created automatically because each task sequence is responsible for the loading of just one flow item. Maximum Speed, Acceleration, Deceleration - These define the task executer's maximum speed, acceleration, and deceleration. Maximum speed is defined in units of length per unit of time, while acceleration and deceleration are defined in units of length per squared unit of time. If you are defining your model in meters and seconds, for example, the speed value is in m/s, etc. These values are used in defining the object's peak speed and change in speed while executing the task types such as TASKTYPE_TRAVEL, TASKTYPE_TRAVELTOLOC, etc. Travel Offsets for load/unload tasks - This value determines whether the task executer should execute offset travel to the load/unload location when it loads or unloads a flow item. For example, if this is not checked, and the task executer is traveling on a network, then it will only travel to the network node that is at the load/unload station. It will remain on that node while doing the load. Rotate while traveling - Here you can specify if you want the object to rotate in the direction that it is traveling. This will have no effect on model output. It is only for visual purposes. Load Time - See the Load Time event for more information. Unload Time - See the Unload Time event for more information. Break to Requirement - This field is executed when the task executer comes to a break task or callsubtasks task . The return value is a reference to a task sequence. The logic within this field should search the task executer's task sequence queue, and find a task sequence that is appropriate to break to. Offset Travel Offset travel is a mechanism by which different types of objects can travel differently, yet use the same interface for traveling. For example, an object wants to place an item into a given bay and level of a Rack. The way in which the object travels to the correct location to drop off the item depends on the type of object it is. An operator walks to the bay's location and places the item in the level. A Transporter travels to the bay, but must also lift its fork to the proper height of the level. It can travel in both the x and y direction, but only its fork can travel in the z direction. An ASRSvehicle will only travel along its own x axis, lifting its platform to the height of the level, and then pulling the item from the Rack. Hence, each object implements its travel differently, but the interface is the same: travel to the right spot to place the item in the Rack. Offset travel is essentially the only thing that distinguishes each sub-class of the task executer. For information on how each sub-class implements offset travel, refer to the \"Details\" section of an object's help page. Offset travel is used in the following tasks: load unload traveltoloc travelrelative pickoffset placeoffset The offset travel interface is very simple. Every type of offset request translates into an x,y, and z offset distance, and sometimes a reference to a flow item. For example, if an object is given a traveltoloc task for the location (5,0,0), and its current location is (4,0,0), then it automatically translates that task into an offset request for (1,0,0), meaning it needs to travel one unit in the x direction. A travelrelative task translates directly. For example, a travelrelative task for (5,0,0) tells the object to travel 5 units in the x direction. Load and unload tasks also use offset travel if the \"Travel Offsets for Load/Unload Tasks\" checkbox is checked. When an object needs to load a flow item from a station, it queries the station for the location of the item. Also, when it needs to unload an item, it queries the station for the location to unload the item. The station returns an offset x/y/z distance, and the task executer uses this distance to travel its offset. Also, for a load and unload task, the task executer has a reference to the item in its offset request. This may or may not affect the way the object travels, depending on the type of object. For example, the Transporter's offset travel mechanism is implemented so that if there is an item, or in other words, if the Transporter is loading or unloading an item, the Transporter will lift its fork in the z direction. If there is no item, or in other words, if theTransporter is doing a traveltoloc or travelrelative task, then it will actually travel in the z direction, instead of lifting its fork. Offset values should be calculated relative to the x/y center of the object, and the z base of the object. For example, a robot is positioned at location (0,0,0). It has a size of (2,2,1). From this the x/y center and z base can be calculated as the location (1,-1,0) (Note: y size extends along the negative y-axis). All offset calculations should be made from this (1,-1,0) location. While giving the robot a traveltoloc task will automatically make this calculation for you, sometimes it is necessary to calculate this location manually and use a travelrelative task. If the robot is given a travelrelative task of (1,0,0), this means that the correct position to travel to is one unit to the right of the robot's x/y center and z base. This translates to the location (2,-1,0). Note that this does not mean that the robot will travel such that its own location is (2,-1,0). Neither will it travel such that its x/y center and z base are at that location. Because it is a robot, it will rotate and extend its arm so that the end of the arm is at the location (2,-1,0). Its actual location will not change at all. Thus the calculation from the object's x/y center and z base allows you to specify a desired destination location which is the same for all objects, but which allows each type of object to handle that destination location differently. Events The following sections explain important considerations related to task executer events. For information on events, see the Event Listening page. On Entry The OnEntry event fires whenever the TaskExecuter receives a flowitem. This includes when the TaskExecuter loads an item, as well as when the item is moved into the TaskExecuter. It has the following parameters: Event Parameter Type Explanation Entering Item Object The flow item that entered the object. Input Port int The input port number the flow item entered through. On Exit The OnExit event fires whenever the TaskExecuter sends a flowitem. This includes when the TaskExecuter unloads an item, as well as when the item is moved out of the TaskExecuter. It has the following parameters: Event Parameter Type Explanation Exiting Item Object The flow item that is exiting the object. Output Port int The output port number flow item will exit through. On Load The on load event fires each time a flow item is loaded into the object, after the load time has completed. This event will execute the object's On Load trigger. It has the following parameters: Event Parameter Type Explanation Loaded Item Object The flow item that was loaded by the object. From Station Object The object that the task executer loaded from. Load Time The load time event fires at the beginning of each load task . Note that if the task executer is configured to travel offsets for load/unload tasks, then it will first travel the correct offset, and then start the load time. Thus the load time is added onto the end of the offset travel time; it is not part of the offset travel time. It has the following parameters: Event Parameter Type Explanation Item Object The flow item that will be loaded. Station Object The object the task executer will be loading from. The return value of the load time field is the delay time that the task executer will wait before loading the flow item and moving on to the next task. On Unload The on unload event fires each time a flow item is unloaded from the object, after the unload time has completed. This event will execute the object's On Unload trigger. It has the following parameters: Event Parameter Type Explanation Unloaded Item Object The flow item that will be unloaded. To Station Object The object that the task executer should unload to. Unload Time The unload time event fires at the beginning of each unload task . Note that if the task executer is configured to travel offsets for load/unload tasks, then it will first travel the correct offset, and then start the load time. Thus the load time is added onto the end of the offset travel time; it is not part of the offset travel time. It has the following parameters: Event Parameter Type Explanation Item Object The flow item that will be unloaded. Station Object The object the task executer will be unloading to. The return value of the unload time field is the delay time that the task executer will wait before unloading the flow item and moving on to the next task. On Receive Task Sequence The on receive task sequence event fires each time the task executer receives a new task sequence. This event executes the On Receive Task Sequence trigger. It has the following parameters: Event Parameter Type Explanation Task Sequence treenode The task sequence the task executer received. On Start Task The on start task event fires each time a new task is started by the task executer. It has the following parameters: Event Parameter Type Explanation Task Sequence treenode The task sequence that the task is part of. Task Rank int The rank within the task sequence of the task being started. Task Type int The type of the task being started (for example, TASKTYPE_LOAD). On Finish Task The on finish task event fires each time a task is completed by the task executer. It has the following parameters: Event Parameter Type Explanation Task Sequence treenode The task sequence that the task is part of. Task Rank int The rank within the task sequence of the task being finished. Task Type int The type of the task being finished (for example, TASKTYPE_LOAD). On Preempt The on preempt event fires when the task executer is preempted away from its active task sequence to work on another task sequence. It has the following parameters: Event Parameter Type Explanation Preempted Task Sequence treenode The active task sequence that is being preempted. Task Rank int The rank of the task that the task executer was working on when preempted. Task Type int The type of the task that the task executer was working on when preempted (for example, TASKTYPE_LOAD). Preempting Task Sequence treenode The task sequence that preempted the active task sequence. Break To The break to event will only be fired when the task executer performs a \"break\" task. A standard tasksequence is made up of a travel - load - break - travel - unload sequence of tasks. When the task executer receives a break task, this is a notification that it may now put the currently active task sequence back in its queue and see if there are any other task sequences that it might want to do before it finishes the current one. This allows for capabilities such as loading several items before dropping them off. In such a case, the task executer will first make a check to make sure it is currently capable of \"multitasking.\" This is done by asking \"is my content less than my capacity?\" If the check is true, then it will execute the break to field to find a task sequence to break to. When finished with new tasks, the task executer will return to the original task sequence. It has the following parameters: Event Parameter Type Explanation Active Task Sequence treenode The task sequence that the task executer is currently working on when the break task was started. If the break to returns NULL then the task executer will not break at all. If a valid task sequence is returned, then it will break to the new task sequence and begin executing it. On Resource Available This event behaves a little differently for a dispatcher and task executer. For a dispatcher, the event is fired whenever a downstream task executer becomes available. For a task executer, the event is fired whenever that task executer finishes a task sequence. If the task executer is also a dispatcher, meaning it has a team that it dispatches tasks to, then the event will be fired for both cases. It has the following parameters: Event Parameter Type Explanation Output Port int If this event is on a dispatcher, this is the output port number of the available task executer. Resource Object The task executer that has become available. Next Task Sequence treenode If the task executer has task sequences queued, this will be the next task sequence to be executed. Finished Task Sequence treenode The task sequence that was just completed. This task sequence will be destroyed once this event has completed. If the On Resource Available trigger returns a 0, the dispatcher/task executer will do its own dispatching logic. If the function returns a 1, the dispatcher/task executer will not do anything, and assumes all dispatching logic is done with this trigger using the TaskSequence.move () and TaskSequence.dispatch () methods. Pass To This function is fired when the Dispatcher receives a task sequence, and should return the output port that the Dispatcher will pass the tasksequence to. If 0 is returned, the tasksequence will automatically queue up according to the defined Queue Strategy until the tasksequence can be passed to an available dispatcher or task executer. If a value greater than 0 is returned, the tasksequence will be sent immediately to the returned port number. If a value of -1 is returned, then the Dispatcher does nothing, but rather assumes all dispatch logic is done within the passto function using the TaskSequence.move () and TaskSequence.dispatch () methods. This event has no parameters. Queue Strategy This event has no parameters. On Message The on message event will fire the object's on message trigger. This event is fired when the object receives a message. It has the following parameters: Event Parameter Type Explanation Sending Object Object The object that sent the message. Message Param 1 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 2 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 3 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. On Stop This event fires when the object is stopped either through code using Object.stop() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has. This number includes the current stop request. State int The state the object will go into it while stopped. ID int The id or key for the stop request. Priority double The priority of the stop request. State Profile int The profile number of the new state. The default state profile is 0. On Resume This event fires when the object is resumed either through code using Object.resume() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has remaining. ID int The id or key for the resume request. State Profile int The profile number of the state that was used when the object was stopped. The default state profile is 0. On Content Change This event fires anytime the object's content changes. This occurs when a flow item is loaded or unloaded from the object. This event has no parameters. On Input Change This event fires when a flow item is loaded into the object. This event has no parameters. On Output Change This event fires when a flow item is unloaded from object. This event has no parameters. On Staytime Change This event fires when a flow item is unloaded from the object, immediately after the On Output Change event. This event has no parameters. On State Change This event fires when the object's state changes. This event allows you to listen to the object's state being changed to a specific state, or to track the state's the object is in. It has the following parameters: Event Parameter Type Explanation State Profile Node treenode If the To State is in the default state profile, this parameter is NULL. Otherwise, this parameter is a reference to the state profile node (tracked variable) in the object's state_profiles attribute node. To State int The state number the object will be set to. From State int The state number the object was in before the new state is set. On State Value Change The on state value change event is associated with the tracked variable that stores the state statistics for the object. Listening to this event allows you to use the change rule. This event fires at the same time as the on state change event. This event has one requirement, the state profile number. If using the default state profile, this number is 0. On Reset The on reset event is fired for each object when the model is reset. This event has no parameters. On Draw The on draw event is fired each time the 3D view is repainted. This happens at different times depending on run speed and refresh rates. In order to ensure model repeatability, code used in the on draw trigger should not use the stochastics commands (distributions) that use FlexSim's random number generator. It has the following parameters: Event Parameter Type Explanation View treenode The view the object is being drawn in. Having multiple 3D views open will cause the on draw event to be fired for each view. Properties Below are documented the set of property names supported by task executers. Property Type Acceleration Unit AvailableOnStart Boolean BreakTo Code Capacity Number Deceleration Unit DoAnimations Boolean ExtensionSpeed Unit FlipThreshold Number LiftSpeed Unit LoadTime Unit Code MaxSpeed Unit Navigator Node OffsetTravel Options PassTo Code QueueStrategy Code RotateTraveling Boolean UnloadTime Unit Code States The task executer's states are purely dependent on the types of tasks that the task executer performs. Many tasks are associated with a hard-coded state, but with some tasks the modeler can specify an explicit state for the task executer to be in when executing that task. Here are some of the states that you will see often with a task executer. Task executer's states are as follows: Idle The object is not performing any tasks. Travel Empty The object is traveling to a destination object and doesn't contain any flow items. This state is exclusively associated with the TASKTYPE_TRAVEL task. Travel Loaded The object is traveling to a destination object and has load one or more flow items. This state is exclusively associated with the TASKTYPE_TRAVEL task. Offset Travel Empty The object is performing offset travel and doesn't contain any flow items. Offset Travel Loaded The object is performing offset travel and has loaded one or more flow items. Loading The object is loading a flow item. This state corresponds to the TASKTYPE_LOAD task and applies only to the time when the object has finished its offset travel and is waiting its modeler-defined load time before loading the item. Unloading The object is unloading a flow item. This state corresponds to the TASKTYPE_UNLOAD task and applies only to the time when the object has finished its offset travel and is waiting its modeler-defined unload time before unloading the item. Utilize The object is being utilized at a station. This state is usually used for an operator when the operator has arrived at the station and is being utilized for a process, setup, or repair time. The utilize state is usually associated with a TASKTYPE_UTILIZE task, but that task can also specify a different state. Other task types, like TASKTYPE_DELAY, can use the utilize state as well. Blocked The object is currently traveling, but is blocked on the network. Statistics The following sections explain important considerations related to task executer statistics. State A categorical tracked variable is used to collect state history for each object. This data can be used to get the total time at a each state, display the current state of the object on a dashboard or to display the state history for an entire model run. See the Dashboard , Statistics Collector and Tracked Variables pages for more information. Throughput Throughput is made up of the input statistic and the output statistic. For each flow item that is loaded by the task executer, the input is incremented by one. When the flow item is unloaded, the output is incremented by one. Throughput statistics always increase. Content The content statistic records how many flow items are inside of the task executer. An object's content can increase or decrease throughout the model run. Additional data can also be gathered from the content statistic to include the minimum, maximum and average value. This data is calculated from the entire model run. Container Flow Items A container flow item that contains other flow items will only increase the content of the task executer by one, not by each of the containing flow items. Staytime The staytime statistic is recorded for each flow item that the task executer unloads. The staytime is equal to the unload time - load time. Additional data can also be gathered from the staytime statistic to include the minimum, maximum and average value. This data is calculated from the entire model run. Travel Distance The total travel distance of the task executer is recorded as travel tasks are performed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/Dispatcher/Dispatcher.html",
        "title": "Dispatcher",
        "content": "Overview and Key Concepts The dispatcher is used to control a group of transporters or operators. Task sequences are sent to the dispatcher from an object and the dispatcher delegates them to the transports or operators that are connected to its output ports. The task sequence will be performed by the mobile resource that finally receives the request. The dispatcher object performs queueing and routing logic for task sequences. Depending on the modeler's logic, task sequences can be queued up or dispatched immediately once they are given to a dispatcher. You can view a dispatcher's task sequence queue during a model run by right-clicking on the dispatcher and selecting View Task Sequence Queue . Ports You use input and output ports to associate teams of task executers. When you connect the output ports of a dispatcher to the input ports of a task executer, this makes that task executer a member of the dispatcher's \"team\". When the dispatcher receives a task sequence, it will dispatch the task sequence to one of the task executers connected to its output ports, depending on logic you define. Dispatching Logic When a dispatcher receives a task sequence, triggered by the TaskSequence.dispatch () method, it first calls its Pass To function. This function returns the port number to pass the task sequence on to. The dispatcher will then immediately pass the task sequence on to the object connected to that port. If the function returns a 0 instead of a port number, then the task will be queued up in the dispatcher's task sequence queue. This is done by calling the queue strategy function for the task sequence. This queue strategy returns a value associated with the task sequence, and represents a priority to sort the task sequence in the queue. Higher priority values go to the front of the queue, and lower values go the back. Usually you will simply return the priority value of the task sequence, but the queue strategy function allows you to dynamically change the priority of a task sequence if needed. When ordering the task sequence in the queue, the dispatcher actually calls the queue strategy function several times, once for each task sequence in the queue, to get each priority value and compare it with the new task sequence's priority value. Once it has found the right location to put the task sequence, it ranks the new task sequence accordingly. A dispatcher is a super-class of all task executers, or in other words all task executers are also dispatchers. This means that an Operator or Transporter can also act as a dispatcher or team leader, giving task sequences to other members of its team, as well as executing task sequences itself. Events The dispatcher uses some of the standard events that are common to all task executers. These include: On Receive Task Sequence On Resource Available Pass To Queue Strategy On Draw On Reset On Message On Stop On Resume Pass To This function is fired when the dispatcher receives a task sequence. It has the following parameters: Event Parameter Type Explanation Task Sequence treenode The task sequence that was received by the dispatcher. The return value of the Pass To field should be the output port that the dispatcher will pass the task sequence to. If 0 is returned, the task sequence will automatically queue up according to the defined Queue Strategy until the task sequence can be passed to an available dispatcher or task executer. If a value greater than 0 is returned, the task sequence will be sent immediately to the returned port number. If a value of -1 is returned, then the dispatcher does nothing, but rather assumes all dispatch logic is done within the Pass To function using the TaskSequence.move () and TaskSequence.dispatch () methods. See Task Executer Concepts - Events for an explanation of these events. States The dispatcher does not implement any states. Statistics The dispatcher does not track any statistics. Properties Panels The Dispatcher object uses the following properties panels: Statistics Visuals Labels ASRS Dispatcher Ports Triggers Properties The Dispatcher object uses the following properties: Property Type PassTo Number QueueStrategy Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/TaskExecuterObject/TaskExecuterObject.html",
        "title": "TaskExecuter",
        "content": "Overview and Key Concepts The TaskExecuter object is a generic task executer. A TaskExecuter has some basic functionality that you can adapt to a variety of uses. This object's default shape is designed to look like an automatic guided vehicle (AGV). Don't Confuse the Object with the Class Task executers are a specific class or category of objects in FlexSim. The TaskExecuter object is a specific object that happens to belong to the task executer class. In this manual, the task executer class will be referred to using spaces in between the words. The TaskExecuter object will use camel case capitalization. Events The task executer uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The task executer uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The TaskExecuter object uses the following properties panels: Statistics Visuals Labels TaskExecuter Travel Dispatcher Ports Triggers Properties The TaskExecuter object shares several properties with all task executers: Task Executer Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/Operator/Operator.html",
        "title": "Operator",
        "content": "Overview and Key Concepts Operators can be called by objects to be utilized during setup, processing or repair time. They will stay with the object that called them until they are released. Once released, they can go work with a different object if they are called. They can also be used to carry flow items between objects. Operators can be placed on a network if they need to follow certain paths as they travel. The operator is a task executer. It implements offset travel depending on whether there's in an involved item for the offset. If there is no item, then it implements the offset exactly like the TaskExecuter object. It travels so that its x/y center and z base arrives at the destination location. If there is an involved item, then the operator only travels along the x/y plane. It also only travels up to the point where its front edge is at the edge of the flow item, instead of its x/y center. This done by decreasing the total travel distance by (xsize(operator) / 2 + xsize(item) / 2). The operator has animations in order to Walk, Walk Loaded, and Stand and more depending on the operator's shape. These animations can be viewed in the Animation Creator by right clicking an operator to open a menu. Point to Edit, then Animations. Context As mentioned above, the xsize of the item is queried to decrease the total offset distance. This may not work perfectly if you have flow items whose x size is very different from their y size, and the operator approaches from the y side of the flow item. If this is the case, and you want it to look more exact, you could try switching x and y sizes of the item and rotate it 90 degrees right before the operator picks it up, then undo those changes from the operator's load/unload trigger. Events The operator uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The operator uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Operator object uses the following properties panels: Statistics Visuals Labels Person Visuals Operator TaskExecuter Travel Dispatcher Ports Triggers Properties The Operator object shares several properties with all task executers: Task Executer Properties Additionally, the Operator object uses the following properties: Property Type IdleAnimation WalkAnimation WalkLoadedAnimation"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/Transporter/Transporter.html",
        "title": "Transporter",
        "content": "Overview and Key Concepts The transporter is used mainly to carry flow items from one object to another. It has a fork lift that will raise to the position of a flow item if it is picking up or dropping off to a rack. It can also carry several flow items at a time if needed. The transporter is a task executer. It implements offset travel in two ways. First, if there is an involved flow item for the travel operation, then it travels so that the front of the fork lift is positioned at the destination x/y location and raises its fork to the z height of the destination location. Second, if there is no involved flow item for the offset travel operation, then it travels so that its x/y center and z base arrive at the destination location. Events The transporter uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The transporter uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Transporter object uses the following properties panels: Statistics Visuals Labels Transporter TaskExecuter Travel Dispatcher Ports Triggers Properties The Transporter object shares several properties with all task executers: Task Executer Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/Elevator/Elevator.html",
        "title": "Elevator",
        "content": "Overview and Key Concepts The elevator is a special type of transport that moves flow items up and down. It will automatically travel to the level where flow items need to be picked up or dropped off. Flow items are animated as they enter and exit the elevator. This gives a better feel for the load and unload time of the elevator. The elevator is a task executer. It implements offset travel by only traveling the z portion of the offset location. If the offset travel is for a load or unload task, then once the offsetting is finished, it will use the user-specified load/unload time to convey the flow item onto its platform, or off of its platform to the destination location. When conveying the item onto or off of the elevator, the flow item moves directly along the elevator's x-axis. Conveying a Flow Item Onto an Elevator For a load task, the conveying of the item onto the platform may not work if the flow item is in an object that continuously refreshes the location of the flow item, like a conveyor for example. In this case, if you want the conveying of the item onto the platform to show up, then make sure that the elevator is ranked before the object it is picking up from in the model tree (the elevator must be higher up in the tree). Context Since the main distinction of an elevator is that it only moves along its z axis, this object can be used for any purpose in which you want the object to only travel along one axis. Events The elevator uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The elevator uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Elevator object uses the following properties panels: Statistics Visuals Labels TaskExecuter Travel Dispatcher Ports Triggers Properties The Elevator object shares several properties with all task executers: Task Executer Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/Robot/Robot.html",
        "title": "Robot",
        "content": "Overview and Key Concepts The robot is a special transport that lifts flow items from their starting locations and places them at their ending locations. Generally, the robot's base does not move. Instead, 6 joints rotate to move the flow items. The robot is a task executer. It implements offset travel by rotating its joints. Note that by default, the x/y/z location of the robot does not change at all when it does offset travel. If the destination location is further away than the robot's maximum arm extension, then the robot will only extend its arm up to its maximum extension. It does not use the standard task executer maximum speed, acceleration and deceleration values. The robot by default does not connect itself to a navigator, which means that it does not execute travel tasks unless you explicitly connect it to a network. Events The robot uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The robot uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Robot object uses the following properties panels: Statistics Visuals Labels Robot TaskExecuter Travel Dispatcher Ports Triggers Properties The Robot object shares several properties with all task executers: Task Executer Properties Additionally, the Robot object uses the following properties: Property Type JointSpeeds MotionMode Options MoveTime Unit Code YRotationSpeed Unit ZRotationSpeed Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/RobotMotionPaths/RobotMotionPaths.html",
        "title": "Robot Motion Paths",
        "content": "Robot Motion Paths This is the most advanced mode that allows the user to design paths for the robot to follow. By default, the Robot contains 2 paths (called Load and Unload) to demonstrate some of the parameter options. What is a Path? A Path is a set of movements as defined by a series of robot positions. The Robot stores robot positions in a tabular format where each row is a record of the 6 joint angles that make-up the given position. The default Load path for example contains 2 positions. When the Robot performs this path, it will move from its current position to Row1 position, followed by Row2 position. You can preview the motion of the robot for this path by pressing the button. You can also directly view an individual row's position by clicking on the row in the table and pressing the button to apply that row to the Robot's joints. What controls the timing of a Path movement? There are various options for controlling the time a path movement takes in the simulation. Note that the Gripper Action Times are added to the end of a movement. If Path Cycle Time > 0 - You can specify the length of time the Robot takes to complete the series of path movements. In this case, the MoveTime column in the Position Table affects the distribution of the Path Cycle Time delay time as follows: Without Weighting - Leave the MoveTime column in the Position Table all zeros or equal values and the Path Cycle Time will be divided evenly amongst the number of positions in the path. With Weighting - Adjust the values in the MoveTime column to represent the ratio of the Path Cycle Time you wish to assign to each position row. Example - A path contains 3 position rows with 1, 1, 2 respectively in the MoveTime column and the Path Cycle Time was 5.2s. The AR would take 1/(1+1+2) * 5.2s to move to the first position, an equal time to move from the first position to the second position, and 2/(1+1+2) * 5.2s to move from the second position to the third position. If Path Cycle Time = 0 and MoveTime column fields > 0 - When the Path Cycle Time field returns a 0, the Robot will use the sum of the values in the MoveTime column as the cycle time for the path. In this way you have precise control of the move time from each position to the next. This method can also be used to insert a stop delay in the movement; set 2 rows in sequence to the same position and use the MoveTime as the delay time. Negative Move Time affects animation only (Relative Speeds) - For a given movement within a path, if the MoveTime value is a negative value the Robot will still treat it as if it were positive, however the joint speeds will be adjusted such that they are proportional to the Relative Speeds entered in the Robot Geometry tab. Note that this is purely a change in the animation and does not affect the movement cycle time. Usually, entering the actual max speed of each joint (from manufacturer) into the Relative Speeds will give best results. How do I create my own Paths? Position and size the model view such that you can see the Robot Properties GUI and the robot in your model without overlap of windows. Click Add Path . This will create a duplicate of the currently selected path. In the path's name field type a descriptive name for the path. The name has no functional effect on the behavior of the Robot. Clear the Position Table by pressing until there is only one row remaining. Turn ON the Path Planner by clicking the Planner Item checkbox. A box named PlanningItem will appear in the 3D view in the Robot’s gripper. You can move and rotate the PlanningItem with your mouse and the robot will move accordingly. You should have the Resize and Rotate Objects feature checked (found under Flexsim’s Edit menu). Also, you might consider disabling Snap To Grid before proceeding further. Begin by recording the end position of your path as it is the most important position. In this case, I wish to record a second path for the Robot to follow before loading the FlowItem from the conveyor. Thus, the end position would have the robot gripped onto the FlowItem as it sits on the end of the conveyor. Press the model Step button (in the simulation run panel) to advance the model run forward by event until a FlowItem appears at the end of the conveyor ready for pickup. You may need to recheck the Planner Item checkbox if you reset the model since the robot hides the item when the model is reset. In the Robot properties window, click the Sync to Flow Item button next to the Planner Item check box. The cursor will change to a \"sampling\" cursor. Now click on the flow item in the model view. Choose an option from the Clamp Orientation drop-down to determine the orientation from which the clamp will grab the flow item. Make sure to choose the proper Close Width drop-down option for determining closed grip width associated with this path. (The open gripper width parameter is found in the Geometry tab) Now that the Robot is gripping the item as desired, save the Robot's joint positions to the row in the table. Click on the first row in the table, and press the button to save the Robot's current joint positions to that row. The recorded position is actually the end position the Robot must have at the end of a LOAD task (call it the pickup position). Technically this is all you need, however often you will want to insert position rows above this row that control how the Robot gets to the pickup position. For example you may want to have the Robot first go to a position above the flow item, then drop down to clamp it. To do this, add a new row by clicking on the first row and clicking the button. This will add a row before the selected row. Then click on the PlanningItem and use the scroll wheel on your mouse to change the Z location of the PlanningItem while staying directly above the pickup position. Then click on the newly created row in the table and press the button to update that row with the new position. If you were to reset and run the model, the Automatic Path Selection would likely not choose your new path to load the FlowItem because the original Load path still exists and is positioned higher in the Path Selector list. Choose the original Load path and delete it. Reset and Run the model. How are the Gripper Action Times applied? The Gripper Action Times are added to the Path movement time since a close or open clamp action is performed at the end of a LOAD or UNLOAD task respectively (after the path movement is complete). If you enter a positive value into the Close Time field, the Robot will close its clamp at the end of the Path movement and the value entered will be the delay time associated with the action. Note that if the Robot is responding to a task that does not involve a FlowItem, the closed clamp width will be 0. If you enter a positive value into the Open Time field, the Robot will open its clamp at the end of the Path movement and the value entered will be the delay time associated with the action. The clamp will open to the Open Gripper Width specified in the Geometry tab. If both the Close Time and Open Time fields are 0, the clamp will not move. If you enter a negative value into either the Close Time or the Open Time fields, the Robot will perform the action in 0 time. (as of FlexSim v5) How does the Robot choose which Path to use? By default, the robot searches for the path with an end position (last position row) which results in the smallest distance between the Robot’s end effector and x,y,z location as requested by the task it is responding to. Controlling the Path that the robot uses for a given task There are two ways to override the Robot’s automatic path selection. It is helpful to understand that the default task sequence that is generated when the Use Transport is checked on a Fixed Resource contains 2 tasks that the Robot responds to (FRLOAD and FRUNLOAD tasks). Specify directly on a custom Task Sequence - Knowledge of writing your own custom task sequences is assumed in this section. Specifying a negative end speed variable when writing the task sequence will tell the Robot to use the path number that matches this end speed (Path Number = end speed). The task types that the Robot responds to are listed below with the location of the end speed variable. See the Task Type Quick Reference found in the User Manual under Task Sequences. TASKTYPE_ Location of end speed variable LOAD and FRLOAD UNLOAD and FRUNLOAD var2 TRAVELRELATIVE TRAVELTOLOC (for movements that don’t involve FlowItems) var4 (As of FlexSim v5) When using a TRAVELRELATIVE task type with a negative endspeed to choose the path you can now use var1 (the x parameter) to tell the Robot which position row to stop at if you don’t want it to perform the entire path. Next Path Number (great for known path sequences such as palletizing) - Palletizing is simply a sequence of LoadPath1-UnloadPath1-LoadPath2-UnloadPath2… once the Robot unloads the last FlowItem on the Pallet, the sequence repeats. Every Path has a “Next Path Number” field in which you can specify the path number you want to be used following the currently selected path. When the Robot executes a path that has a non-zero Next Path Number specified, it will store this path number into memory until the next time in the model run it performs a task that requires automatic path selection (not specified on the task itself). Instead of searching for a suitable path, the Robot will choose the path number stored in memory. If during the model run you wish to clear the Robot’s Next Path Number memory, simply set its “nextpathselected” variable to zero and the Robot will return to conducting automatic path selection for a best-fit path (if not specified on the task). A combination of a custom task sequence and Next Path Number can save a lot of time! Take the example of a palletizing operation with 4 FlowItems per pallet. Make 1 load path and 4 unique unload paths to show the positioning of FlowItem on the pallet. The load path will be Path Number 1, and the unload paths will occupy Path Numbers 2 through 5. Don’t forget about the trick using the model “Step” and the “Match Highlighted Item” buttons we learned in “How do I create my own Paths?”. The path sequence we want is LoadPath1-UnloadPath1-LoadPath1-UnloadPath2- LoadPath1-UnloadPath3- LoadPath1-UnloadPath4 or Path Numbers 1-2-1-3-1-4-1-5. Since the LoadPath1 is always used for the FRLOAD task, we can specify var2 as -1 on this task. In the Path Planner, go to the load path (Path Number 1 in this example) and specify a Next Path Number = 2, as this is the first unload path of the cycle. Go to the first unload path (Path Number 2 in this example) and specify a Next Path Number = 3 (-3 will work as well). Path Number 3 should have a Next Path Number = 4, and Path Number 4 should have a Next Path Number = 5. Path Number 5 should have a Next Path Number = 2 to complete the cycle."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/Crane/Crane.html",
        "title": "Crane",
        "content": "Overview and Key Concepts The crane has similar functionality to the transporter but with a modified graphic. The crane works in a fixed space following rectangular x,y,z movements. It is designed to simulate rail-guided cranes such as gantry, overhead, or jib cranes. By default, the crane picker rises to the height of the crane object after picking up or dropping off a flow item before it will travel to the next location. To exercise more control over the movements of the picker from one pickup to the next, change the crane's travel sequence in its Properties window. The crane is a task executer. It implements offset travel according to a travel sequence that the user specifies. By default, this travel sequence is L > XY > D. The > character separates travel operations, L means lift the hoist, X means move the gantry, Y means move the trolley, and D means drop the hoist to the offset position. The default travel sequence tells the crane to first lift the hoist, then move the gantry and trolley simultaneously to the offset position, then drop the hoist. The crane travels so that its x/y center and z base arrive at the destination location. If there is an involved flow item for the offset travel task, then the crane travels so that its x/y center and z base arrive at the top of the flow item, or in other words, it increases the arrival z location by the z size of the flow item. Events The crane uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The crane uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Crane object uses the following properties panels: Statistics Visuals Labels Crane TaskExecuter Travel Dispatcher Ports Triggers Properties The Crane object shares several properties with all task executers: Task Executer Properties Additionally, the Crane object uses the following properties: Property Type CraneSpeeds FrameLocation Array(3) FrameSize Array(3) LiftHeight Unit LiftRadius Unit TravelSequence"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/ASRSvehicle/ASRSvehicle.html",
        "title": "ASRS Vehicle",
        "content": "Overview and Key Concepts The ASRS vehicle is a special type of transport specifically designed to work with racks. The ASRS vehicle will slide back and forth in an aisle between two racks picking up and dropping off flow items. The reach, lift, and travel motions are fully animated by the ASRS vehicle. The lift and travel motions will occur simultaneously, but the reach will only occur after the vehicle has come to a complete stop. The ASRS vehicle is task executer. It implements offset travel by only travelling along its own x-axis. It travels until it is perpendicular with the destination location, lifting its platform as well. If the offset travel is for a load or unload task, then once the offsetting is finished, it will use the user-specified load/unload time to convey the flow item onto its platform, or off of its platform to the destination location. The ASRS vehicle does not connect itself to a navigator by default. This means that travel tasks will not be performed. Instead, all traveling is done using offset travel. Conveying a Flow Item Onto an ASRS Vehicle For a load task, the conveying of the item onto the platform may not work if the flow item is in an object that continuously refreshes the location of the flow item, like a conveyor for example. In this case, if you want the conveying of the item onto the platform to show up, then make sure that the ASRS vehicle is ranked after the object it is picking up from in the model tree (the ASRS vehicle must be lower down in the tree). In addition to the standard task executer fields, the ASRS vehicle has a modeler-defined lift speed and initial lift position for the its platform. The platform will return to this position whenever the ASRS vehicle is idle or is not doing offset travel. Context Since the main distinction of an ASRS vehicle is that it only moves along its x and z axes and doesn't rotate, this object can be used for any purpose in which you don't want the object to turn, but rather just go forward and backward and up and down. In some models it has been used as a simple transfer car, or as a transfer conveyor between two or more conveyors. Events The ASRS vehicle uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States This object uses the task executer states. See Task Executer Concepts - States for more information. Statistics The ASRS vehicle uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The ASRS vehicle object uses the following properties panels: Statistics Visuals Labels ASRS TaskExecuter Travel Dispatcher Ports Triggers Properties The ASRS vehicle object shares several properties with all task executers: Task Executer Properties Additionally, the ASRS vehicle object uses the following properties: Property Type InitialLiftHeight Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TaskExecuters/BasicTE/BasicTE.html",
        "title": "Basic TE",
        "content": "Overview and Key Concepts The Basic TE object is a task executer that is meant for developers to create user libraries with. It passes almost all inheritable task executer logic to picklist functions, so that user library developers can specify virtually all functionality for the task executer. The Basic TE is a task executer. It allows you to specify logic for its offset travel functionality, as well as advanced functionality like stop object/resume object, pick/place offset, and other advanced functions. Events The Basic TE uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. The Basic TE has the following additional events: Advanced Functions This event is fired for various reasons. For the most part, you will not need to implement any logic for these notifications, but they are nonetheless made accessible to you. When the event is fired it will execute the Advanced Functions trigger. It has the following parameters: Event Parameter Type Explanation Message Type int The type of the notification. See below for more information. The different message types are listed as follows: ADV_FUNC_CLASSTYPE - This is a request to get the type of class of the object. The classtype should be returned as an integer with certain bits set high. You can construct this value using the bitwise OR operator | and several classtype macros. For example, a FixedResource's classtype is: CLASSTYPE_FLEXSIMOBJECT > CLASSTYPE_FIXEDRESOURCE. ADV_FUNC_DRAGCONNECTION - This function is called when a keyboard key is held down, and the user clicks and drags from this object to another object. In this case, the object to which the mouse was dragged is passed in as param(2), the ascii value of the key that was clicked is passed in as param(3), and the classtype value of the object is passed in as param(4). ADV_FUNC_CLICK - This function is called when the object is clicked on. Here a reference to the view in which it was clicked is passed in as param(2), and the click code is passed in as param(3). Possible click codes are: DOUBLE_CLICK, LEFT_PRESS, LEFT_RELEASE, RIGHT_PRESS, RIGHT_RELEASE. ADV_FUNC_KEYEDCLICK - This function is called when a key on the keyboard is held down and the object is clicked on. Here the view is passing as param(2), the click code is passed in as param(3), and the ascii value of the pressed key is passed in as param(4). Possible click codes are: DOUBLE_CLICK, LEFT_PRESS, LEFT_RELEASE, RIGHT_PRESS, RIGHT_RELEASE. The return value of the Advanced Functions trigger should either be a 1 or a 0. If 0, the object will execute the default functionality associated with the given notification. If 1, the object not do any default functionality, but assumes that the function has overridden the default. On Begin Offset The begin offset event is fired at the beginning of an offset travel operation. It will execute the On Begin Offset trigger. The event uses an x, y and z offset location. The object should figure out how it will travel the specified offset. It has the following parameters: Event Parameter Type Explanation X Location double The requested x offset. This is an offset distance from the x center of the object. Y Location double The requested y offset. This is an offset distance from the y center of the object. Z Location double The requested z offset. This is an offset distance from the z base of the object. Item Object If the offset operation has an involved item, this is a reference to the item. End Speed double The requested end speed for the offset travel operation. Max Speed double The value of this object's maximum speed variable. Acceleration double The value of this object's acceleration variable. Deceleration double The value of this object's deceleration variable. Last Update Speed double The end speed of the object's last travel operation. Rotate While Traveling int This is a 1 or 0, and specifies whether the user wants the object to rotate while traveling. This value is defined in the object's properties. The return value of the on begin offset is the amount of time it will take to make the travel operation. On Finish Offset The on finish offset event is fired when the object has finished its offset operation. This should update the location of the object to its final offset location. This event will fire the object's on finish offset trigger. It has the following parameters: Event Parameter Type Explanation Offsetting Now double If the object is currently doing an offset operation, this will be 1, otherwise 0. The offsetting now value is automatically set to 1 when On Begin Offset fires, and then set back to 0 when On Finish Offset fires. Offset Total Time double The total time this object returned from its On Begin Offset trigger. Max Speed double The value of this object's maximum speed variable. Acceleration double The value of this object's acceleration variable. Deceleration double The value of this object's deceleration variable. Last Update Speed double The end speed of the object's last travel operation. Rotate While Traveling double This is a 1 or 0, and specifies whether the user wants the object to rotate while traveling. This value is defined in the object's properties. Load/Unload Time double If the offset operation is a load or unload operation, then this value is the load/unload time for the operation. Non-Zero Load/Unload Time If there is a non-zero load/unload time, then this time will be executed before the On Finish Offset event is fired. This means that in your update offset function, you may need to query whether you're in the offset part of the operation, or in the load/unload part of the operation. Usually this will not matter though, because the travel operations will finish, and during the remaining load/unload time, the update function will automatically set the object's location to the final destination location. You will really only need to use this if you are going to do some animation/movement during the load/unload time, as the ASRSvehicle and Elevator objects do. On State Change This event is fired when the object's state is changed either through the Object.setState() command or through the process of executing task sequences. It has the following parameters: Event Parameter Type Explanation State int The new state the object is changing to. State Profile int The profile number of the new state. The default state profile is 0. If the function returns a 0, the object will proceed to change its state. If the function returns -1, the object will do nothing, leaving it in its previous state. If the function returns a positive number, the state will be changed to this new state number. On Update Offset The on update offset event is fired before the view is refreshed and the object is drawn. This is where the object updates its location based on its current offset operation. This event shares the same parameters as the On Finish Offset event. Pick Place Offset The pick place offset event is fired at the same time as the task executer standard events, pick offset and place offset. The difference is in what parameters are available. For place offset, this event is fired when another transport object is attempting to place, or unload, a flow item into this object. For pick offset this event is fired when a transport is about to pick, or load, an item from this object. It has the following parameters: Event Parameter Type Explanation Pick Operation int This is either a 1 or 0. 1 means it is a pick operation, 0 means it is a place operation. Item Object The item that is being picked or placed. Other Object Object The object that is picking or placing the item. X Value Node treenode The value of this node should be set in this function, and will represent the offset location returned by this function. For example, if I want the picking/placing object to offset 10 in the x direction, 0 in the y direction, and 5 in the z direction, I would set the X Value Node to 10 using xvalnode.value = 10, yvalnode.value = 0, and zvalnode.value = 5. Y Value Node treenode See X Value Node. Z Value Node treenode See X Value Node. For both operations, if you are implementing your own pick/place logic here and do not want the default logic to be executed, you must return 1 from this function. If a 0 is returned the object will assume that nothing was done and will execute its own default logic. Loading and Unloading Items This function does not fire when this object is attempting to load/unload to or from another object, but rather when another object is attempting to load/unload to or from this object. Stop Resume The stop resume event is fired at the same time as the task executer standard events, on stop and on resume. The difference is in what parameters are available. For stop, this event will fire when the object is stopped through the Object.stop() command. For resume, this event will fire when the Object.resume() command is called. This event will execute the Stop Object - Resume Object trigger. This trigger should define a strategy for how the object will \"stop\", and how it will \"resume\". This field should also manage data for remembering how many stop requests have been made, what the state of the object was before it was stopped, etc. It has the following parameters: Event Parameter Type Explanation Stop Operation int This value is either a 1 or 0. 1 means the object is being stopped, 0 the object is being resume. Stop State int This value is only applicable for a stop operation. It specifies the requested state passed into the Object.stop() command. Num Stops Node treenode If this is a stop operation, the value of this node should be incremented by 1 within this function. If it is a resume operation, the value of this node should be decremented by 1 within this function. Also, you will get the value of this node to know how many stop commands have been called on this object. When the object is stopped for the first time (the value of the node goes from 0 to 1), you should execute logic specifying how to stop this object. When the object is resumed for the final time (the value of the node goes from 1 to 0), you should execute logic specifying how to resume this object. Last Stop Time Node treenode When this object is stopped for the first time, this node should be set to the current time, so you can know the amount of time the object was stopped when it is finally resumed. State Before Stop Node treenode When this object is stopped for the first time, this node should be set to the object's current state, so that you can know which state to go back to when the object is resumed. State Profile int The profile number of the stopped state. The default state profile is 0. If you are implementing your own stop/resume logic here and do not want the default logic to be executed, you must return 1 from this function. If the object gets a return value of 0 from this function, it will assume that nothing was done, and will execute its own default logic. States The Basic TE uses the standard task executer states. See Task Executer Concepts - States for more information. Statistics The Basic TE uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Basic TE object uses the following properties panels: Statistics Visuals Labels TaskExecuter Travel Dispatcher Ports Triggers Properties The Basic TE object shares several properties with all task executers: Task Executer Properties"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TravelNetworks/NetworkNode/NetworkNode.html",
        "title": "Network Node",
        "content": "Overview and Key Concepts Network nodes are used to define a network of paths that transporters and operators follow. The paths can be modified using spline points to add curvature to the path. By default, objects travelling on a network will follow the shortest path between their origin and destination. Events For information on events, see the Event Listening page. The network node has the following events. Each time a task executer travels on the network, it fires the OnArrival and OnContinue for each network node involved in the travel operation. On Arrival On Arrival fires when a traveler arrives at a node. It has the following parameters: Event Parameter Type Explanation Traveler Object The object traversing the network To Edge int The rank of the edge the traveler will continue on From Edge int The rank of the edge the traveler arrived on For the first node in a travel operation, the From Edge will usually be 0. If the traveler is configured to block space on the network, the From Edge will be whatever edge it came from previously. If the On Arrival trigger returns a value greater than 0, then the traveler will reroute to the path returned. For example, if On Arrival returns 2, then the traveler will continue its travel to the second connection path out of the network node. On Continue On Continue fires right before a traveler leaves a node. It has the following parameters: Event Parameter Type Explanation Traveler Object The object traversing the network To Edge int The rank of the edge the traveler will continue on From Edge int The rank of the edge the traveler arrived on For the last node in a travel operation, the To Edge will be 0. States The network node does not implement any states. Statistics The network node does not track any statistics. Properties Panels The Network Node object uses the following properties panels: Statistics Visuals Labels Network Node Ports Triggers Properties The Network Node object uses the following properties: Property Type MaxTravelers Number SideOffset Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/TravelNetworks/TrafficControl/TrafficControl.html",
        "title": "Traffic Control",
        "content": "Overview and Key Concepts The traffic control object is used to control traffic in a given area of a travel network. You build a traffic controlled area by connecting network nodes to the traffic control object. These NetworkNodes then become members of the traffic controlled area. Any path between two nodes that are both members of the same traffic control object is designated as a traffic controlled path, and travelers are only allowed onto that path if given permission by the traffic control object. The traffic control object can be in a mutual exclusion mode, where it only lets a certain number of travelers into the area at any given time, or it can use un-timed traffic modes to only allow travelers onto certain path sections at once. Events For information on events, see the Event Listening page. The traffic control object has the following events: On Entry On Entry occurs when a traveller enters the area controlled by this traffic control. It has the following parameters: Event Parameter Type Explanation Traveler treenode The traveller (or task sequence) entering the control area Network Node treenode The traveller's node, an entry to the control area Next Output Port int The output port the traveller will use next On Entry Request On Entry Request occurs when a traveller attempts to enter an area controlled by the traffic control. It has the following parameters: Event Parameter Type Explanation Traveler treenode The traveller (or task sequence) requesting entry the control area Network Node treenode The traveller's node, an entry to the control area Next Output Port int The output port the traveller will use next OnExit On Exit occurs when a traveller leaves the control area. It has the following parameters: Event Parameter Type Explanation Traveler treenode The traveller (or task sequence) exiting the control area States The traffic control object does not implement states. Statistics The traffic control object does not track any statistics. Properties Panels The Traffic Control object uses the following properties panels: Statistics Visuals Labels Traffic Control Ports Triggers Properties The Traffic Control object uses the following properties: CenterObjects InObjects OutObjects"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/StraightCurvedConveyor/StraightCurvedConveyor.html",
        "title": "Straight and Curved Conveyors",
        "content": "Overview and Key Concepts The straight and curved conveyors can simulate conveyor belts or roller conveyors. Events For information on events, see the Event Listening page. The straight and curved conveyors have the following events: On Entry On Entry occurs whenever an item enters the conveyor. It has the following parameters: Event Parameter Type Explanation Entering Item treenode The item that entered the conveyor On Exit On Exit occurs whenever an item exits the conveyor. It has the following parameters: Event Parameter Type Explanation Exiting Item treenode The item that is exiting the conveyor On Item Bump This event occurs when an item or a slug is blocked by another item or slug, forming a single slug. It has the following parameters: Event Parameter Type Explanation Front Slug Array The set of items in the downstream slug Back Slug Array The set of items in the upstream slug States For statistical purposes, the conveyor will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Empty There are no items on the conveyor. Conveying There is at least one item on the conveyor. Stopped There is at least one item on the conveyor, but the conveyor's speed has is set to zero. The conveyor will go into this state immediately when its speed is set to zero (i.e. at the time it STARTS to decelerate to zero). Blocked Only used for non-accumulating conveyors. When an item on a non-accumulating conveyor is stopped or blocked, the conveyor will become blocked. Note again that accumulating conveyors do not use this state. If you want to get better blocked state statistics on accumulating conveyors, you should use photo eyes. Statistics The conveyor tracks of the following statistics. These can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Content The number of items in the conveyor. Input The total number of items that have entered the conveyor. Output The total number of items that have exited the conveyor. Staytime The durations that items are in the conveyor. Percent Full The percent that the conveyor is \"filled\" with items. This uses the following formula: 100 * (TotalStopSpace / ConveyorLength) where TotalStopSpace is the sum of the stop spaces of all the items currently on the conveyor. Note that this percentage may go above 100%, specifically when there are items straddling multiple conveyors. Properties Panels The straight and curved conveyors use the following properties panels: Statistics Labels Conveyor Conveyor Behavior Triggers Properties Both straight and curved conveyors support the following properties : Property Type CatchCondition Code Acceleration Unit Deceleration Unit EndLocation Array(3) Speed Unit StartLocation Array (3) UseVirtualLength Boolean VirtualLength Unit Visualization Node Options Width Unit EntrySpacePadding Unit EntrySpaceSizeFactor Number FixedIntervalItemEdge Options FixedIntervalPattern Custom IsAccumulating Boolean IsSlugBuilder Boolean IsSlugReadyByFillPercent Boolean IsSlugReadyByItemCount Boolean IsSlugReadyByTime Boolean MoveSpacePadding Unit MoveSpaceSizeFactor Number RestartDelay Unit Rise Unit RollerAngle Number SlugFillPercent Number SlugItemCount Number SlugMaxItemCount Number SlugReadyTime Unit SlugReleaseSpeed Unit StopSpacePadding Unit StopSpaceSizeFactor Number UseCatchCondition Boolean UseFixedIntervalMovement Boolean Straight conveyors use the following properties: Property Type HorizontalLength Unit Curved conveyors use the following properties: Property Type Radius Unit StartAngle Number SweepAngle Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/JoinConveyor/JoinConveyor.html",
        "title": "Join Conveyor",
        "content": "Join conveyors acts more like a tool than an object. Use it to create a curved conveyor connecting two conveyor sections. See Using the Join Conveyors Object for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/DecisionPoint/DecisionPoint.html",
        "title": "Decision Point",
        "content": "Overview and Key Concepts A Decision Point is a versatile object you can use to build logic into your conveyor system. Decision Points can also be linked to a Merge Controller to notify it when a released slug has cleared designated points in the system. Events For information on events, see the Event Listening page. The decision point has the following additional events: On Arrival On Arrival fires when an item arrives at the decision point. It has the following parameters: Event Parameter Type Explanation Arriving Item Object The item that just arrived Conveyor Item Conveyor The conveyor the decision point is on On Continue On Continue fires right before an item leaves the decision point. It has the following parameters: Event Parameter Type Explanation Continuing Item Object The item that is about to leave Conveyor Item Conveyor The conveyor the decision point is on States The decision point does not implement any states. Statistics The decision point tracks the following statistics. These can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Content The number of items that have arrived but not yet continued through the decision point. This will always be 0 or 1. Input Input The total number of items that have arrived at the decision point. Output The total number of items that have continued through the decision point. Properties Panels The Decision Point uses the following properties panels: Statistics Labels Decision Point Ports Triggers Properties The Decision Point object uses the following properties: Property Type DistAlongConveyor Unit ItemEdge Options"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/Station/Station.html",
        "title": "Station",
        "content": "Overview and Key Concepts A station is an object you can use to add processing points into the conveyor system. The station works very much like a standard Processor object, except that it is placed as a point in the conveyor system, instead of as an object outside of the conveyor system. Events For information on events, see the Event Listening page. The station has the events of a Decision Point and the following additional event: On Process Finish On Process Finish fires immediately after the station finished processing an item. States >For statistical purposes, the station will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics pane in Properties. Idle The station is not processing an item. Processing The station is processing an item. Waiting for Operator The station is waiting for an operator to come to process the item. Statistics The station tracks the following statistics. These can be viewed by clicking on a station and then viewing the Statistics pane in Properties. Content The number of items being processed by the station. This will always be either 0 or 1. Input The total number of items that have started being processed by the station. Note that this may be different than the total number of items that have conveyed over the station, depending on whether the Process Condition always processes items. Output The total number of items that have finished being processed by the station. Like input, this may be different than the total number of items that have conveyed over the station. Staytime The time from when an item arrives at the station to the time it is finished being processed. This is only recorded for items that are actually processed at the station. Properties Panels The Station uses the following properties panels: Statistics Labels Decision Point Station Ports Triggers Properties The Station object uses the following properties: Property Type NumOperators Number OperatorPreempt Options OperatorPriority Number OperatorRef Number ProcessCondition Number ProcessTime Unit Code UseOperators Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/PhotoEye/PhotoEye.html",
        "title": "Photo Eye",
        "content": "Overview and Key Concepts A photo eye is a versatile object you can use to build logic into your conveyor system. Photo eyes can also be linked to a merge controller to notify it when a released slug has cleared designated points in the system. A photo eye can be in one of four states while it is interacting with items on a conveyor: blocked, cleared, blocking and clearing. Triggers fire when the photo eye goes into the blocked and cleared states. The following image illustrates the various photo eye states and triggers while interacting with items on a conveyor: You can assign a photo eye custom behaviors or actions that it can perform when it enters either a blocked or cleared state. You can also define how long a photo eye must be in the \"blocking\" or \"clearing\" state before it moves to the \"blocked\" or \"cleared\" state. The colors for the \"blocking\", \"blocked\", and \"clearing\" states are defined on the properties of the Conveyor System . Events For information on events, see the Event Listening page. The photo eye has the following events: On Cover On Cover fires when an item covers the photo eye. It has the following parameters: Event Parameter Type Explanation Covering Item Object The item covering the photo eye Conveyor Conveyor The conveyor the photo eye is on On Block On Block fires after an item covers the photo eye and the Block Time elapses before the photo eye is uncovered. It has the following parameters: Event Parameter Type Explanation Blocking Item Object The item blocking the photo eye Conveyor Conveyor The conveyor the photo eye is on On Uncover On Uncover fires when an item moves out of the photo eye leaving it uncovered. It has the following parameters: Event Parameter Type Explanation Uncovering Item Object The item uncovering the photo eye Conveyor Conveyor The conveyor the photo eye is on On Clear On Clear fires after an item moves out of the photo eye and the Clear Time elapses before the photo eye is covered again. It has the following parameters: Event Parameter Type Explanation Clearing Item Object The item covering the photo eye Conveyor Conveyor The conveyor the photo eye is on States The photo eye implements state using two different state profiles, namely the default state profile, and a custom \"PhotoEye\" state profile. The custom profile uses the following states: Clear The photo eye is completely clear. Blocking The photo eye was covered from a clear state, but its block time has not yet expired. Blocked The photo eye is covered and its block time has expired. Clearing The photo eye was uncovered from a blocked state, but its clear time has not yet expired. The default state profile uses the following states. The current state can be viewed by clicking on the object and then viewing the Statistics pane in Properties. Idle The idle state corresponds to the clear plus blocking states in the photo eye's custom state profile. Blocked The blocked state corresponds to the blocked plus clearing states in the photo eye's custom state profile. Statistics The photo eye tracks the following statistics. These can be viewed by clicking on the object and then viewing the Statistics pane in Properties. Content The number of items that have covered the photo eye but have not yet cleared it. This is usually either 0 or 1, but if the photo eye has an offset angle, it may be greater than 1. Input The total number of items that have covered the photo eye. Output The total number of items that have cleared the photo eye. Properties Panels The Photo Eye uses the following properties panels: Statistics Labels Photo Eye Ports Triggers Properties The Photo Eye object uses the following properties: Property Type BlockTime Unit ClearTime Unit DensityThreshold Number MassFlowMode Options OffsetAngle Number Height Unit RequireGapToClear Boolean SpeedThreshold Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/Motor/Motor.html",
        "title": "Motor",
        "content": "Overview and Key Concepts Motors can be used to control whether the conveyor systems are on or off at a given time. The motor can also be used to sync dog gaps on a power and free chain loop when simulating a power and free conveyor system. Currently the motor only supports being on or off, and starts the simulation on. To turn the motor off, call Object.stop() . Turning the motor off will stop all conveyors connected to the motor. To turn the motor back on, call Object.resume() . Events For information on events, see the Event Listening page. The motor does not have any events specific to motor operation. States The motor does not implement any states. Statistics The motor does not track any statistics. Properties Panels The Motor uses the following properties panels: Statistics Visuals Labels Motor Ports Triggers Properties The Motor object uses the following properties: CenterObjects InObjects OutObjects"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/MergeController/MergeController.html",
        "title": "Merge Controller",
        "content": "Overview and Key Concepts The Merge Controller is an object that can control how different conveyor lanes merge together. Use the merge controller to define a lane release strategy for the merge. A merge controller is generally only used with slug-building conveyors. Events For information on events, see the Event Listening page. The merge controller has the following events: Event Name Explain the event. When does the event occur? It has the following parameters: Event Parameter Type Explanation Parameter Name Type Description Return value (if applicable) States The merge controller does not implement any states. Statistics The merge controller does not track any statistics. Properties Panels The Merge Controller uses the following properties panels: Statistics Visuals Labels Merge Controller Ports Triggers Properties The Merge Controller object uses the following properties: CenterObjects InObjects OutObjects"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/Transfers/Transfers.html",
        "title": "Transfers",
        "content": "Overview and Key Concepts Transfers are not available in the FlexSim Library. Rather, they are created whenever a conveyor is connected to another conveyor. There are three kinds of transfers: Transfers - Connections from one conveyor to another. They can affect how an item is transferred between conveyors. Entry Transfers - Connections from a non-conveyor object (such as a Source or other Fixed Resource) to a conveyor object. They can affect how an item is transferred to a conveyor. See Entry Transfers for more information. Exits Transfers - Connections from a conveyor to a non-conveyor object (such as a Sink or other Fixed Resource) to a conveyor object. Exit Transfers have the ability to send for a transport, or in other words, a Task Executer to pick up items and deliver them to another object. Task Executers can pick up items from a particular point on the Exit Transfer or a range of possible points along an Exit Transfer. See Exit Transfers for more information. Properties Panels The Conveyor Transfer uses the following properties panel: Conveyor Transfer Types Conveyor transfers use Conveyor Transfer Types"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/EntryTransfers/EntryTransfers.html",
        "title": "Entry Transfers",
        "content": "Overview and Key Concepts Entry transfers are Connections from a non-conveyor object (such as a Source or other Fixed Resource) to a conveyor object. They can affect how an item is transferred to a conveyor. They are represented by a white box on a conveyor in the simulation model. Be aware that entry transfers are different from transfers, (which connect conveyors to other conveyors) and exit transfers (which are connections from a conveyor object to a non-conveyor object). Entry transfers are not available in the FlexSim Library. Rather, they are created whenever a conveyor is connected to another object. Properties Panels The Entry Transfer uses the following properties panels: Statistics Labels Entry Transfer Input Ports Properties The Entry Transfer object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Entry Transfer object uses the following properties: Property Type EntryOrientation Number HoldTransports Boolean ItemInsertionMode Options MaxTransportsIn Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/ExitTransfers/ExitTransfers.html",
        "title": "Exit Transfers",
        "content": "Overview and Key Concepts Exits Transfers are connections from a conveyor to a non-conveyor object (such as a Sink or other Fixed Resource) to a conveyor object. They are represented by a white box on a conveyor in the simulation model. Exit transfer Be aware that Exit transfers are different from transfers (which connect conveyors to other conveyors) and entry transfers (which are connections from a non-conveyor object to a conveyor).Exit Transfers have the ability to send for a transport, or in other words, a Task Executer to pick up items and deliver them to another object. Task Executers can pick up items from a particular point on the Exit Transfer or a range of possible points along an Exit Transfer. Exit transfers are not available in the FlexSim Library. Rather, they are created whenever a conveyor is connected to another object. Properties Panels The Exit Transfer uses the following properties panels: Statistics Labels Exit Transfer Output Ports Properties The Exit Transfer object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Exit Transfer object uses the following properties: Property Type ContinuousPickPrediction Boolean IgnoreOnPredictLatePickup Boolean PickPredictionInterval Unit StopAtEnd Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/MassFlowConveyor/MassFlowConveyor.html",
        "title": "Mass Flow Conveyor",
        "content": "Overview and Key Concepts A mass flow conveyor can simulate the flow of high volumes of mass flow units . The conveyor uses fluid-like logic, as opposed to simulating each discrete unit. Instead of simulating thousands of bottles, cartons, or other small pieces individually, it deals with densities of product. In the above animation, while many \"units\" are being drawn, in reality this is merely a graphics trick. The rendering engine just draws bottles based on the density at a given point on the conveyor. It is not actually simulating each bottle. Rather, the movement of the orange lines, which represent density/rate changes on the conveyor, are the only elements that are actually simulated. This enables an incredible speed improvement over simulating individual bottles. The mass flow conveyor is especially useful in bottling, food production, and other high speed/high volume manufacturing settings, where the sheer volume of product makes it infeasible to simulate each piece individually. Behavior Generating Flow There are two ways to generate the flow of mass flow units on a conveyor. The easiest way is to define the conveyor's Generative Rate property. When this value is non-zero, the conveyor will act as a source for flow units. When the simulation starts, flow units will immediately start to travel down the conveyor. The second way to generate flow on the conveyor is to use a mass flow entry transfer . You can create this object by 'A' connecting from any fixed resource to the conveyor. Once created, you can define properties for how to translate from discrete flow items to flow units. Distributing Flow Downstream When a conveyor has multiple downstream conveyors, it must choose how to distribute flow that moves from it to those downstream conveyors. This is similar to the Send To Port logic that is fired when items are released from fixed resources. However, here there are no discrete items being simulated. Mass flow conveyors must instead use an algorithm that involves flow rate balancing calculations instead of discrete routing decisions. The mass flow conveyor uses the following algorithm to distribute flow to downstream conveyors. Sort Downstream Conveyors : The conveyor sorts the set of downstream conveyors by their Upstream Output Order property in ascending order. For example, an Upstream Output Order value of 1 will be sorted before an Upstream Output Order of 2. Distribute Flow Among Tied Downstream Conveyors : Starting with the lowest Upstream Output Order value, for each group of downstream conveyors with the same Upstream Output Order, the conveyor will evenly distribute its output flow among that group of conveyors. This distribution will be weighted by the width of the downstream conveyor. For example, let's say a conveyor has two downstream conveyors with an Upstream Output Order value of 1. One of those conveyors has a width of 0.5m, and the other conveyor has a width of 1m. Here the conveyor will attempt to send one third of its flow rate to the 0.5m conveyor, and two thirds of its flow rate to the 1m conveyor. If one or more of those conveyors cannot receive that amount, because of a slower speed for example, then the blocked amount will again be redistributed among conveyors in the group that can receive that amount, again weighted by their width. Proceed to the Next Upstream Output Order : If there is remaining flow that is not captured by the current group of downstream conveyors, then the conveyor will proceed to the group of conveyors with the next-higher Upstream Output Order value, again using the distribution calculation of step 2. This will proceed until all the conveyor's output flow rate is assigned to downstream conveyors, or until all downstream conveyors are receiving their maximum flow rate. Accumulate/Lose Excess : If there is remaining flow that is not assigned to downstream conveyors, the conveyor will either accumulate this extra amount, or track it as a loss (as if the product falls off the end of the conveyor), depending on the conveyor's Excess property setting. Events The mass flow conveyor does not have any events beyond the standard set of events. You can instead use photo eyes to define conveyor logic. For information on events, see the Event Listening page. States For statistical purposes, the conveyor will be in one of the following states at various points during a simulation run. The current state can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Empty There are no items on the conveyor. Conveying There is at least one item on the conveyor. Stopped There is at least one item on the conveyor, but the conveyor's speed has is set to zero. The conveyor will go into this state immediately when its speed is set to zero (i.e. at the time it STARTS to decelerate to zero). Statistics The conveyor tracks the following statistics. These can be viewed by clicking on the object and then viewing the Statistics panel in Properties. Content The number of flow units in the conveyor. Input The total number of flow units that have entered the conveyor. Output The total number of flow units that have exited the conveyor. Loss If you have set the Excess property to Track as Loss , then this statistic will track the amount of flow units that have run off the end of the conveyor without proceeding to a downstream conveyor. Properties Panels The mass flow conveyors use the following properties panels: Statistics Labels Conveyor Mass Flow Conveyor Behavior Triggers Properties The mass flow conveyors use the following properties: Property Type AlignToSide Options EndLocation Array(3) Speed Unit StartLocation Array (3) UseVirtualLength Boolean VirtualLength Unit Visualization Node Options Width Unit ExcessMode Options GenerativeFlowRate Number GenerativeFlowUnit Options UpstreamOutputOrder Number WidthRule Options WidthValue Number Straight mass flow conveyors use the following properties: Property Type HorizontalLength Unit Curved mass flow conveyors use the following properties: Property Type Radius Unit Start Angle Number Sweep Angle Number The Math Behind Mass Flow Conveyors Mass flow rates are determined based on three primary settings: Unit Dimensions ($U_x$, $U_y$) Conveyor Speed ($S$) Conveyor Width ($W$) Given these, a few basic equations are used to determine flow rates and densities: ${\\large F = D W S}$ ${\\large D_{max}} = \\Large{\\frac{R}{U_x U_y}}$ ${R = \\begin{cases}\\frac{2}{\\sqrt{3}} \\approx 1.15 \\ \\text{\\ \\ for round units} \\\\ 1 \\text{\\ \\ otherwise} \\end{cases}}$ $F$ - Flow rate in flow units per time, e.g. $\\frac{\\text{units}}{\\text{s}}$. $D$ - Density in flow units per area, e.g. $\\frac{\\text{units}}{\\text{m}^2}$. $R$ - 'Round Unit Factor': round bottles will settle into gaps, increasing max density Example Let's say a square individual carton takes up an area footprint of: ${\\large U_{x/y} = 0.05\\text{m} \\times 0.05\\text{m} = 0.0025 \\text{m}^2}$ For square units, $R = 1$, so we can ignore it in our calculations. The maximum possible carton density for such a carton can be calculated as: ${\\large D_{max} = \\frac{1}{U_x U_y} = \\frac{1}{0.0025} = 400 \\frac{\\text{cartons}}{\\text{m}^2}}$ Let's say our conveyor is 0.5 meters wide and travels at $0.1 \\frac{\\text{m}}{\\text{s}}$. We can calculate the maximum flow rate for such a conveyor. ${\\large F_{max} = D_{max} W S} = 400 \\times 0.5 \\times 0.1 = 20 \\frac{\\text{cartons}}{\\text{s}}$ Now let's say we want to send cartons down that conveyor at a rate of $10 \\frac{\\text{cartons}}{\\text{s}}$. Using the equations above, we can calculate the density of cartons flowing down that conveyor: ${\\large D = \\frac{F}{W S} = \\frac{10}{0.5 \\times 0.1} = 200 \\frac{\\text{cartons}}{\\text{m}^2}}$ Here the density of bottles traveling down the conveyor will be $200 \\frac{\\text{cartons}}{\\text{m}^2}$ which is half the maximum density for that carton. So when FlexSim displays these units flowing down the conveyor, it will render the conveyor, at the point(s) of flow where the flow rate is 10, to be half full. It basically uses graphics algorithms to display the conveyor to look half full. It does not track bottles individually. Why Does the Math Matter? While understanding this math may not be critical to getting a basic model up and running, in some cases it can be useful to understand how the calculations are being made under the hood in order to tweak your model for specific situations. It's essential to understand that, even though it may be drawing discrete units in the 3D view, under the hood it is only dealing in flow rates and densities. In this world, all quantities are 'fluid'. Fractional quantities are valid. Understanding these equations lets you adjust model properties to get the exact behavior you need. Notice that the quantities $U_x$, $U_y$, and $R$ are dependent only on the attributes you define in the mass flow unit and are thus the same across all conveyors in your model, given the same flow units traveling down those conveyors. On the other hand, the values $W$ and $S$ are conveyor-specific properties that you define on each conveyor. As such, you can adjust these values on each conveyor as needed. While the speed value $S$ may be something you'll want to define true to real life, the width value $W$ is a value that you can customize to get the exact behavior you need, and FlexSim provides a width rule property on the conveyor for this purpose. For example, you may want a conveyor to simulate a single lane, no matter what the actual conveyor's width is, or even define some 'gap' between bottles/cartons/etc. in a single lane. We can't literally force some gap between individual bottles because, in the mass flow conveyor, there is no such thing as individual bottles. Rather, we tweak the values in the flow rate equation above so as to get the flow rates that we desire. Specifically, we configure the $W$ value in the equations above to achieve the desired unit flow rates. The width rule includes several different options for defining the simulated width $W$, so you should be able to easily configure the behavior you need using that property. Example - Defective Bottles Let's say you want to implement some percentage of defective bottles being diverted to a different area of your facility. Let's say 0.1% of bottles get diverted to this separate area. To do this: Create a mass flow conveyor and attach it to the point where you would want it to divert bottles. Give the mass flow conveyor a Virtual Width that is 0.001 times the width of the main line conveyor. Give the mass flow conveyor the same Speed and Upstream Output Order as the main line conveyor. When you run this model, 0.1% of the flow rate from the upstream conveyor will be diverted to this offshoot conveyor. You can then collect units, discretize them, etc. from that point. Troubleshooting and Other Concepts Chunking Sometimes, when you are translating items into flow units using a mass flow entry transfer , you will run into an issue we call 'chunking'. This is caused when a conveyor's speed and width settings are such that it can receive mass flow units faster than the entry transfer is feeding it. Since the entry transfer will send flow to the conveyor as fast as the conveyor can receive it (see mass flow entry transfer documentation), the conveyor will finish receiving the quantity before the entry transfer has another item to send, so the conveyor's input flow will quickly go back to zero. When the chunking is such that an individual chunk is less than a single unit length, then the conveyor does not have enough room to draw a single unit. Here the conveyor will appear empty, but will have red lines drawn across it signifying the start of each chunk. If you see this in your model, it is an indication that the model is improperly configured. The way to fix it is by having some logic that will change the speed so that the maximum flow rate of the receiving conveyor matches the flow rate of the entry transfer feeding it. In mathematical terms, given the equations above, you're assuming maximum flow: $\\large{F_{max} = D_{max} W S} = \\Large{\\frac{W S R}{U_xU_y}}$ In this case, $F_{max}$ is known (the rate of flow into the entry transfer), and you solve for $S$ the speed of the conveyor. $\\large{S} = \\Large{\\frac{F_{max} U_x U_y}{W R}}$ Generally you would have one short conveyor whose speed you set using this formula, then that conveyor can feed other conveyors with different settings downstream. Side Transfers When working with mass flow conveyors, you can freely snap conveyors to the side as 'side transfers.' However, unlike with standard conveyors, a mass flow conveyor cannot have outflows or inflows in the middle of the conveyor. Mass flow conveyors will simulate flow as if units always enter at the front of a conveyor and always leave at the end of the conveyor. Thus 'side transfers' are just for model-building convenience, so you can snap them together in whatever way is most convenient for building the model, even though their placement along the conveyor does not affect inflow/outflow logic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/MassFlowEntryTransfer/MassFlowEntryTransfer.html",
        "title": "Mass Flow Entry Transfers",
        "content": "Overview and Key Concepts A mass flow entry transfer represents a conversion point when translating flow items into mass flow units . It is similar to regular entry transfers in that it allows you to connect fixed resources to the conveyor, sending items to it. In the mass flow case, though, when items enter a mass flow entry transfer, each item is translated into a quantity of mass flow units and then destroyed. The mass flow conveyor will create a \"burst\" of mass flow units, receiving those units using its full convey capacity (determined by width and speed). Once the quantity of units has all flowed onto the conveyor, the conveyor's entry flow rate will then go back to zero, and the mass flow entry transfer will become available to receive the next item. Properties Panels The Mass Flow Entry Transfer uses the following properties panels: Statistics Labels Mass Flow Entry Transfer Ports Properties The Mass Flow Entry Transfer object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Mass Flow Entry Transfer object uses the following properties: Property Type FlowUnit Number UnitsPerItem Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/MassFlowExitTransfer/MassFlowExitTransfer.html",
        "title": "Mass Flow Exit Transfers",
        "content": "Overview and Key Concepts A mass flow exit transfer represents a conversion point when translating mass flow units into flow items. It is similar to regular exit transfers in that it allows you to connect the mass flow conveyor to fixed resources, outputting flow items from the conveyor. In the mass flow case, though, it is performing a conversion calculation from mass flow units to each flow item. As different flow rates for units reach the end of the conveyor, it will use the Units per Package property in combination with the flow rate to determine an inter-arrival rate for flow items, and will create individual items at that rate. If downstream objects backup and cannot receive the generated items, the mass flow conveyor will begin to accumulate. Properties Panels The Mass Flow Exit Transfer uses the following properties panels: Statistics Labels Mass Flow Exit Transfer Ports Properties The Mass Flow Exit Transfer object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Mass Flow Exit Transfer object uses the following properties: Property Type PackageItem Number UnitsPerPackage Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Conveyors/MassFlowTransfer/MassFlowTransfer.html",
        "title": "Mass Flow Transfers",
        "content": "Overview and Key Concepts A mass flow transfer is created when you make an 'A' connection between two Mass Flow Conveyors. By default, mass flow transfers will cause the conveyors to behave as-if they were snapped together directly. In other words, if you create a mass flow transfer between two conveyors, the upstream conveyor will perform its flow distribution algorithm as if the downstream conveyor were attached directly to its end. You would use a mass flow transfer for the following reasons: The layout of various objects in the model makes it difficult or burdensome to snap the conveyors together directly. You want flow between the conveyors to convert from one unit to a different unit. Properties Panels The Mass Flow Transfer uses the following properties panels: Mass Flow Transfer - only shown on downstream transfers Labels Ports Properties The Mass Flow Transfer object shares several properties with all fixed resources: Fixed Resource Properties Additionally, downstream Mass Flow Transfer objects include the following properties: Property Type ConvertToUnit Code UnitsPerPackage Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/StorageObject/StorageObject.html",
        "title": "Storage Object",
        "content": "Overview and Key Concepts The Storage Object is a parent class of several objects that are used to store flow items in a two dimensional grid of storage locations, called slots. These slots are organized, first by bay, then by level, and finally by position/slot number. The Storage Object is an abstract class , meaning you do not create instances of this specific class directly. Rather, the Storage Object is a parent class of the Rack , Floor Storage , Gravity Flow Rack , Push Back Rack , and Drive In Rack classes. Thus, when you create an instance of one of these classes, you are inherently creating an instance of a Storage Object. The Storage Object is a Fixed Resource. However, fixed resource functionality is turned off by default. You can enable it through the Flow Panel , or merely by connecting other fixed resources to it using an 'A' connection. When fixed resource logic is enabled, the storage object receives flow items through its input ports until its maximum content value is met. When each flow item enters the rack, it executes the minimum dwell time function for that item. This function returns the minimum stay time for that flow item. The rack starts a timer for that amount of time. After the timer expires, the rack releases the flow item. Events For information on events, see the Event Listening page. The Storage Object is a Fixed Resource, and uses the standard events that are common to all fixed resources. See Fixed Resources - Events for an explanation of these events. The Storage Object has the following additional events: Minimum Dwell Time This event occurs when the Minimum Dwell Time field is evaluated. It is only evaluated if a storage object's Use as Fixed Resource checkbox is selected. It has the following parameters: Parameter Type Description Item Object The entering item, which will be assigned a dwell time Port int The input port number for the entering item This event returns the minimum dwell time for the specified item. On End Dwell Time This event occurs when an item has reached its minimum dwell time. After this event, the storage object will release the item. It is only evaluated if the storage object's Use as Fixed Resource checkbox is selected. It has the following parameters: Parameter Type Description Item Object The item that has just completed its dwell time On Slot Assign This event occurs when an item is assigned to a specific slot in this object, i.e. when the Storage.Item.assignedSlot property of the item is set. It has the following parameters: Parameter Type Description Slot Storage.Slot The assigned slot Item Object The assigned item On Slot Entry This event occurs when an item enters a specific slot. It occurs at essentially the same time as the On Entry event, however, it is executed after a slot has been assigned. The slot is therefore a parameter of the event. It has the following parameters: Parameter Type Description Slot Storage.Slot The associated slot Item Object The entering item On Slot Exit This event occurs when an item exits a specific slot. It occurs at essentially the same time as the On Exit event, however, it is executed specifically associated with the slot that is being exited. The slot is therefore a parameter of the event. It has the following parameters: Parameter Type Description Slot Storage.Slot The associated slot Item Object The exiting item Slot Assignment Strategy This event occurs when the respective Slot Assignment Strategy field is evaluated. It has the following parameters: Parameter Type Description Item treenode The entering item, which will be assigned a bay or level The execution of this field is responsible fore finding a proper slot to place the item into, and assigning the item to that slot by setting the Storage.Item.assignedSlot property. States The Storage Object does not implement any states. Instead, use the content graph to get statistics. Statistics The Storage Object uses the standard statistics that are common to all fixed resources. See Fixed Resources - Statistics for an explanation of these statistics. Properties Panels The Storage Object uses the following properties panels: Statistics Visuals Labels Storage Object Storage Options Address Mapping Flow Output (when Used as Fixed Resource ) Input (when Used as Fixed Resource ) Ports Triggers Properties The Storage Object shares several properties with all fixed resources: Fixed Resource Properties Additionally, the Storage Object uses the following properties : Property Type AddressScheme Options AisleID String BayProgression Options BayStride Number LevelProgression Options LevelStride Number MarkOutbound Boolean MinimumDwellTime Unit Code SlotAssignmentStrategy Code SlotProgression Options SlotStackingAxis1 Options SlotStackingAxis2 Options SlotStackingAxis3 Options SlotStride Number StartBay Number or String StartLevel Number or String StartSlot Number or String UseAsFixedResource Boolean Visualization Options ZoneID String VirtualizeItems Boolean Dimensions Properties The storage object also supports several properties associated with its dimensions . These properties define things like the number of bays, levels, and slots, their sizes, and padding. Here a property value can be represented as a single value if all slots/levels/bays in the object are homogeneous with respect to that property. But if there are differences across bays, levels, or slots, then the property's value becomes an array . For example, consider the NumLevels property. If the storage object contains 10 bays, and all bays have 5 levels, then the object's NumLevels property will be the single value 5 . However, if the first 5 bays have 3 levels, and the last 5 bays have 6 levels, then the NumLevels property becomes an array, with one element for each bay. In this example the NumLevels value would be [3, 3, 3, 3, 3, 6, 6, 6, 6, 6] . The NumLevels property can become at most a one-dimensional array. However, other properties ( LevelSize , NumSlots , SlotSize , etc.) may be two or three dimensional arrays, depending on the heterogeneity/homogeneity of the bays, levels, or slots. The storage object also supports a Dimensions property. This encompasses all of the other dimension-focused properties, aggregated into a Map . The dimension-focused properties are as follows Property BaySize Dimensions LevelSize NumBays NumLevels SlotPaddingBack SlotPaddingBottom SlotPaddingFront SlotPaddingLeft SlotPaddingRight SlotPaddingTop SlotSize SlotsPerBay StorableSlots"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/Rack/Rack.html",
        "title": "Rack",
        "content": "Overview and Key Concepts The Rack is a subclass of the Storage Object . Most logic for the Rack is implemented as part of the Storage Object class. The main specialization of the Rack is that it defines bays in the X direction, and levels in the Z direction, in contrast to the Floor Storage class, which defines a grid of storage locations on the floor. Pick Face All racks, including gravity flow racks, push back racks, and drive in racks, implement a pick face that is on their \"Y-\" side. This means that items are generally meant to be picked from the side of the rack that faces its local negative Y direction. When using default visualizations, a standard rack will render cell supports for the pick face as orange, whereas the \"back\" face will have cell supports that are gray. For gravity flow and push back racks, the slots will be tilted slightly toward the pick face, as items flow toward that face. Events See the Storage Object for information on events. States The Rack does not implement any states. Use the content graph to get statistics. Statistics See the Storage Object for information on statistics. Properties See the Storage Object for information on properties panels. Properties The Rack shares several properties with the Storage Object: Storage Object Properties Additionally, the Rack uses the following properties: Property Type ExtendColumns Boolean PickPlaceYOffset Unit ShelfTilt Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/FloorStorage/FloorStorage.html",
        "title": "Floor Storage",
        "content": "Overview and Key Concepts The Floor Storage class is a subclass of the Storage Object . Most logic for the Floor Storage is implemented as part of the Storage Object class. The main specialization of the Floor Storage is that it defines bays in the X direction, and levels in the Y direction, in contrast to the Rack class, which defines a vertical grid of storage locations. Events See the Storage Object for information on events. States The Floor Storage does not implement any states. Use the content graph to get statistics. Statistics See the Storage Object for information on statistics. Properties See the Storage Object for information on properties panels. Properties See the Storage Object for information on properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/GravityFlowRack/GravityFlowRack.html",
        "title": "Gravity Flow Rack",
        "content": "Overview and Key Concepts The Gravity Flow Rack is a subclass of the Rack , which is in turn a subclass of the Storage Object . Most logic for the Gravity Flow Rack is implemented as part of the Storage Object class. The main specializations of the Gravity Flow Rack are as follows: A gravity flow rack's \"place face\" is the opposite of its pick face . In other words, task executers will place items on the rack on the opposite side as the side they pick from. A gravity flow rack will animate the flow of items from the place face to the pick face, using the user-defined Flow Speed property. Events See the Storage Object for information on events. States The Gravity Flow Rack does not implement any states. Use the content graph to get statistics. Statistics See the Storage Object for information on statistics. Properties See the Storage Object for information on properties panels. Properties See the Storage Object for information on properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/PushBackRack/PushBackRack.html",
        "title": "Push Back Rack",
        "content": "Overview and Key Concepts The Push Back Rack is a subclass of the Gravity Flow Rack , which is in turn a subclass of the Rack , which is in turn a subclass of the Storage Object . Most logic for the Push Back Rack is implemented as part of its parent classes. The main specialization of the Push Back Rack is that, unlike the Gravity Flow Rack, its pick face is the same side as its \"place face.\" Additionally, placing an item into a slot displaces the other items in the slot, pushing them farther back into the rack. Events See the Storage Object for information on events. States The Push Back Rack does not implement any states. Use the content graph to get statistics. Statistics See the Storage Object for information on statistics. Properties See the Storage Object for information on properties panels. Properties See the Storage Object for information on properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/DriveInRack/DriveInRack.html",
        "title": "Drive In Rack",
        "content": "Overview and Key Concepts The Drive In Rack is a subclass of the Rack , which is in turn a subclass of the Storage Object . Most logic for the Drive In Rack is implemented as part of the Storage Object class. The main specialization of the Drive In Rack is that it defines customized picking/placing motion for those loading/unloading the rack. Task executers must first drive parallel to the pick face until they reach the assigned bay. Then they drive straight into the rack's bay. Once finished loading/unloading, they must finally drive straight out of the bay before continuing to a next task. Events See the Storage Object for information on events. States The Drive In Rack does not implement any states. Use the content graph to get statistics. Statistics See the Storage Object for information on statistics. Properties See the Storage Object for information on properties panels. Properties See the Storage Object for information on properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Warehousing/PaintSlotLabels/PaintSlotLabels.html",
        "title": "Paint Slot Labels",
        "content": "Paint Slot Labels acts more like a tool than an object. You can use it to set slot label values on a Storage Object. For more information about Storage Objects, see the Storage Object topic. Properties Once you have clicked on Paint Slot Labels in the 3D Library, you can see the Slot Label Painter panel in Properties: Slot Label Painter Painting Labels Once you have set the name and value of the label you wish to paint, you can begin painting. To use the paint tool, hold down the left mouse button and move the mouse over any slot you wish to paint. Any affected slot will change colors to match the color shown in Properties, and will be assigned a label with the specified name and value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AGV/StraightCurvedPath/StraightCurvedPath.html",
        "title": "Straight and Curved Path",
        "content": "Overview and Key Concepts AGV Paths define the routes that AGVs take to get to their destinations on the AGV network. Straight vs Curved A Path can either be a straight path: Or a curved path: One-Way vs Two-Way A Path can either be one-way: Or two-way: This shape shows you that the path is two-way, but also shows you the primary direction of the path. Most of the time the primary direction of the path does not matter. It is only needed if you give an AGV a travel task with an offset along the destination path, in which case the offset is a distance along the path's primary direction. AGV Orientation You can also force a single AGV orientation for a path. This defines how the AGV must face while on the path, irrespective of the AGV's travel direction. The default is any, meaning the AGV may face any direction while on this path. You can define it as forward-only: Or backward-only: Think of the half-square as an outline of the AGV's front end. Paths with a defined AGV orientation can be two-way, but the Forward/Backward-ness of the AGV Orientation is relative to the direction the Path would be if it were one-way. Usually you can enforce proper AGV orientation simply by building the path network correctly. However, in some cases this is not possible, hence you have the option to enforce it explicitly. Note that choosing an AGV orientation on any path in your network will cause a non-trivial amount of extra memory to be allocated to build routing tables for each AGV orientation, and if you haven't built your network properly it may cause routing failures because the network can't find a path that will get the AGV to the destination with the proper orientation. Hence it is advisable to only use this option if it is explicitly needed. Path Classes Path Classes allow you to break out AGV speeds by path. Accumulation Types Each path can have an Accumulation Type assigned to it. If defined (not No Accumulation), AGVs traveling on that path will detect proximity with each other and avoid collisions. You can define Accumulation Types in the AGV Network's Accumulation Types tab. Properties Panels The Curved Path object uses the following properties panel: Curved Path The Straight Path object uses the following properties panel: Straight Path Properties The path objects use the following properties: Property Type AGVOrientation Options AccumulationType Options IsTwoWay Boolean PathClass Options EndLocation Array(3) StartLocation Array(3) Additionally, the curved path objects use the following properties: Property Type Radius Unit StartAngle Unit SweepAngle Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AGV/JoinPaths/JoinPaths.html",
        "title": "Join Paths",
        "content": "Join paths acts more like a tool than an object. Use it to connect two paths."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AGV/ControlPoint/ControlPoint.html",
        "title": "Control Point",
        "content": "Overview and Key Concepts Control Points are points on the AGV network where various decision logic happens. A control point may be: A point where AGVs pick up and/or drop off flow items. A stopping point on the network where AGVs wait to enter an area or section of a path. A decision point on the network where the AGV looks for work to do. A decision point on the network where an AGV is dispatched to some other point on the network, dependent on network state/availability. A dynamic barrier that will cause AGVs to route around it when its routingConstraint property is set. An arbitrary point on an AGV path where you can execute custom logic. Control Point Allocation/Deallocation Control Points act as allocation/deallocation points on the network. AGVs automatically look ahead to their next 'waitable' control point and must allocate to that control point, including all allocatable objects up to that point, before proceeding on the network. Events For information on events, see the Event Listening page. The control point has the following events: On Allocated Fired when the control point is allocated by an AGV. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that allocated the control point. AGV AGV The AGV instance associated with the task executer. On Arrival Fired at an AGV's arrival at the control point, i.e. when the AGV has decelerated to stop at the control point, either because it could not allocate further ahead or if the control point is the final destination. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that arrived at the control point. AGV AGV The AGV instance associated with the task executer. Dest CP Object The AGV's destination. Path Offset double The AGV's destination path offset. AGV Body Offset double The AGV's destination body offset. On Deallocated Fired when the Control Point is deallocated by an AGV. If you return a reference to an AGV.AllocationPoint from this trigger (by searching the AGV.AllocatableObject 's requests array), then the object will allocate itself to that request. This allows you to implement custom prioritization strategies. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that deallocated the control point. AGV AGV The AGV instance associated with the task executer. On Entry Fired when an object (usually a flow item) is moved into the control point. It has the following parameters: Event Parameter Type Explanation Item Object The item that entered the control point. On Exit Fired when an object (usually a flow item) is moved out of the control point. It has the following parameters: Event Parameter Type Explanation Item Object The item that is exiting the control point. On Pre Arrival Fired at an AGV's pre-arrival to the control point, i.e. the point at which the AGV would start to decelerate to stop at the control point if needed. On Pre Arrival is fired prior the AGV allocating further ahead or when the AGV starts decelerating to its final destination. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer associated with the event. AGV AGV The AGV instance associated with the task executer. Dest CP Object The AGV's destination. On Request This event is fired when the control point receives a request to be allocated by an AGV. You can return an AGV.Request value from this trigger to force the request to either be allowed (i.e. allocate the object), or blocked, overriding the default allocation behavior. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that is requesting allocation. AGV AGV The AGV instance associated with the task executer. Point AGV.AllocationPoint The allocation point that is requesting allocation. States The control point does not implement any states. Statistics The control point tracks the following statistics: AllocationCount The total number of AGVs who have allocated the control point. Usually this will either be 0 or 1, unless you set the control point's Max Allocations to be greater than 1. Properties Panels The Control Point object uses the following properties panels: Control Point Labels Ports Properties The Control Point object uses the following properties: Property Type DeallocationType Options MaxAllocations Number IsAllocationWaitPoint Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AGV/ControlArea/ControlArea.html",
        "title": "Control Area",
        "content": "Overview and Key Concepts A control area is an object that enforces mutual exclusion on one or more paths in the AGV network. It can also act as a dynamic barrier that will cause AGVs to route around it when its routingConstraint property is set. In addition to being used within an AGV system, the control area can be integrated in an A* network to restrict the number of A* travelers in a certain area of your grid. You can also programmatically allocate and deallocate a control area. For example, using the OnArrival trigger of a conveyor decision point, you can have items in a conveyor system allocate the control area, so that AGVs are not allowed to travel certain paths while items are on a given section of conveyor. FlexSim provides pick list options for doing this automatically. Events For information on events, see the Event Listening page. The control area has the following events: On Allocated This event is fired when the control area is allocated. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that allocated the control area. AGV AGV The AGV instance associated with the task executer. On Deallocated This event is fired when the control area is deallocated by an AGV. If you return a reference to an AGV.AllocationPoint from this trigger (by searching the AGV.AllocatableObject 's requests array), then the object will allocate itself to that request. This allows you to implement custom prioritization strategies. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that deallocated the control area. AGV AGV The AGV instance associated with the task executer. On Request This event is fired when the control area receives a request to be allocated by an AGV. You can return an AGV.Request value from this trigger to force the request to either be allowed (i.e. allocate the object), or blocked, overriding the default allocation behavior. It has the following parameters: Event Parameter Type Explanation TE TaskExecuter The task executer that is requesting allocation. AGV AGV The AGV instance associated with the task executer. Point AGV.AllocationPoint The allocation point that is requesting allocation. On Allocation Count Change This event is fired both when an AGV allocates the control area, and when it deallocates the control area. This event has no parameters. States The control area does not implement any states. Statistics The control area tracks the same statistics as the control point . Properties Panels The Control Area object uses the following properties panels: Control Area Labels Ports Properties The Control Area object uses the following properties: Property Type DeallocationType Options MaxAllocations Number IsAGVMember Boolean IsAStarMember Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AGV/AGVTraveler/AGVTraveler.html",
        "title": "AGV Traveler",
        "content": "Overview and Key Concepts When you connect a task executer to an AGV path network , it becomes a traveler on the AGV network. Once connected, there are additional properties, events, and statistics that are available on that AGV. This topic explains these elements and shows how to access them. Properties An AGV Traveler object uses the following properties panel: AGV Traveler Events An AGV also has additional events that can be accessed either through the task executer's Triggers panel, or from a process flow. OnStartTravel - Fired when the AGV starts a travel task. OnFinishTravel - Fired when the AGV finishes a travel task. OnPreAllocate - Fired just before the AGV attempts to allocate forward. This will either be followed by one or more OnAllocate events or by an OnAllocationFailed event if it was not able to allocate forward. Allocation happens either on pre-arrival to a control point or when trying to allocate an intersection point on an accumulating path . OnAllocate - Fired when a control point, control area, or accumulating path intersection point is allocated. OnAllocationFailed - Fired when the AGV fails to allocate forward and hence must stop and wait. If you implement code for this and return 1, then the default behavior will be skipped. This is especially useful if you are defining your own deadlock recovery mechanism, and don't want the default behavior (stop the model and show an error message) to be executed. OnNavigationFailed - Fired when the AGV fails to find a valid path to a destination. If you implement code for this and return 1, then the traveler will try again. This means that, before returning 1, you should first make changes to the network so as to make the destination accessible from the traveler's location. If you return 2, then the traveler will finish its current travel task as if it arrived at the destination. OnDeallocate - Fired when the AGV deallocates a control point, control area, or accumulating path intersection point. If you return a reference to an AGV.AllocationPoint from this trigger (by searching the AGV.AllocatableObject 's requests array), then the object will allocate itself to that request. This allows you to implement custom prioritization strategies. Note that the allocatable object's own OnDeallocated trigger takes precedence if both triggers return an allocation point. OnAccumulationStop - Fired when the AGV hits its proximity stop threshold on an accumulating path and must stop. OnAccumulationResume - Fired when the AGV hits its proximity resume threshold on an accumulating path and can resume. OnPreArrival - Fired at an AGV's pre-arrival to a control point, i.e. the point at which the AGV would start to decelerate to stop at the control point if needed. OnPreArrival is fired prior the AGV allocating further ahead, or when the AGV starts decelerating to its final destination. OnArrival - Fired at an AGV's arrival at a control point, i.e. when the AGV has decelerated to stop at the control point, either because it could not allocate further ahead or if the control point is the final destination. Statistics AGVs can also track the following statistics: BatteryLevel - The AGV's battery level, as a percentage between 0 and 100."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/GIS/Map/Map.html",
        "title": "Map",
        "content": "Overview and Key Concepts Maps are used to show geographic information in latitude and longitude coordinates. They draw flat textured tiles using a Mercator projection. Map tile textures are downloaded from a tile server using the URL specified on the GIS Navigator . GIS points, routes, and travelers are drawn by maps. A model may contain multiple maps that may draw zero, one, or more representations of points, routes, and travelers in the model. The maps themselves do not contain the other objects; they simply draw lines and shapes representing the location of other objects in geographic coordinates. States The map does not implement any states. Statistics The map does not track any statistics. Properties Panels The Map object uses the following properties panels: Statistics Visuals Labels Map Ports Triggers Properties The Map object uses the following properties: Property Type EditMode Boolean Latitude Number Longitude Number Zoom Number DrawBorder Options ScaleFactor Number MinScale Number MaxScale Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/GIS/Point/Point.html",
        "title": "Point",
        "content": "Overview and Key Concepts Points are used to define locations in geographic coordinates. When connected, they create routes, which can be used by task executers to travel between points using the GIS Navigator. The actual point objects are hidden within the GIS Navigator. Map objects draw shapes representing these point objects. You modify the point's properties by clicking on its shape on a map. A point may be drawn by zero, one, or more maps. A point's size and rotation are used when drawn by a map. A point's cartesian location is not used when drawn by a map. Instead, it is positioned based on its geographic latitude and longitude properties. States The point does not implement states. Statistics The point does not track any statistics. Properties Panels The Point object uses the following properties panels: Statistics Visuals Labels Point Triggers Properties The Point object uses the following properties: Property Type DrawPoint Boolean Latitude Number Longitude Number"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/GIS/Route/Route.html",
        "title": "Route",
        "content": "Overview and Key Concepts Routes are created by connecting two points together. Task executers travel along routes when executing travel tasks using the GIS Navigator. States The route does not implement any states. Statistics The route does not track any statistics. Properties Panels The Route object uses the following properties panel: Route"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AStar/Barrier/Barrier.html",
        "title": "A* Barrier",
        "content": "Overview and Key Concepts An A* barrier is an object that blocks or constrains travel in the spatial area it covers. See Working with A* Navigation for more information on how to use A* barriers. States An A* barrier does not implement any automatic state logic. Properties An A* barrier uses the Barrier panel for defining its properties. Below are the set of property names supported by A* barriers. Property Type TravelPatterns Custom 3-Dimensional Array ConditionalRule Options"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/AStar/Divider/Divider.html",
        "title": "A* Divider",
        "content": "Overview and Key Concepts An A* divider is an object used to constrain travel on an A* grid. It is defined spatially as a set of connected lines. TaskExecuters are prevented from crossing these lines when traveling. See Working With A* Navigation for more information on how to use A* dividers. Preferred Paths, Bridges, and Mandatory Paths Preferred paths, bridges, and mandatory paths are subclasses of the divider. They share the commonality that they are all spatially defined as a set of connected lines, and can include a conditional rule, while each subclass defines its own behavior for how it affects TaskExecuter routing. See Working with A* Navigation for more information on adding these specific objects. States An A* divider does not implement any automatic state logic. Properties An A* divider uses the Divider/Path panel for defining its properties. Below are the set of property names supported by A* dividers. Property Type ConditionalRule Options TwoWay (all except Bridges) Boolean PathPoints Custom 2-Dimensional Array PathWeight (Preferred Paths only) Number UseVirtualDistance (Bridges only) Boolean VirtualDistance (Bridges only) Unit"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidTicker/FluidTicker.html",
        "title": "Fluid Ticker",
        "content": "Overview and Key Concepts The Ticker is responsible for breaking time into small, evenly spaced units called ticks . The modeller can define the length of a tick. The Ticker is the object that controls all of the Fluid Objects in a model. For this reason, in any model that uses Fluid Objects, there should always be exactly one Ticker. The modeller also uses the Ticker to define the global list of sub-components that make up the fluid material in the model. Any model that uses the Fluid Objects must have a Ticker. The Ticker must be named TheTicker . The modeller can create a Ticker by dragging it from the library icon grid to the model view window. However, this is an easy step to forget, so when the modeller drags any Fluid Object into a model, a Ticker is created if there is not one already in the model. If the modeller tries to create another Ticker, a warning message is given saying that a Ticker already exists and that the new Ticker should be deleted. The Ticker does not do much that the modeller can see, but it is very important behind-the-scenes. It is responsible for calculating how much material is transferred between Fluid Objects at the end of every tick. When the model is reset, the Ticker builds a list of all of the Fluid Objects in the model. This objects in this list are sorted based on how many fluid objects are upstream and downstream of them. At the end of each tick, the Ticker begins with the fluid object farthest downstream and calculates how much material it received during that tick. Then the Ticker calculates how much material moved into the object upstream of that starting object, and so on until it reaches the starting point of the fluid portion of the model. The Ticker only has a few values that the modeller can change. The most important of these is the tick time. This is the length of time that the Ticker will wait between updates to the Fluid Objects. A very small tick time will result in a large number of events firing as the model runs (at least one per tick) and may slow down the model. It will also, in many cases, increase the accuracy of the Fluid Objects' behavior. A longer tick time will generally result in a faster running model, but at a cost in accuracy. It is up to the modeller to find the appropriate balance of speed and accuracy for their model. The modeller can also use the Ticker to define a set of sub-components that will make up the fluid material in the model. Each of the sub-components should be given a name. These names are to help the modeller understand what is happening in the model, they have no affect on the objects' behavior or accuracy. All fluid material has the same list of sub-components. It is not required that any given fluid material use all the sub-components, however. The Fluid Objects keep track of the percentages of the sub-components that make up the material that they are currently processing. If fluid material from two different sources is mixed together, the sub-components' percentages are adjusted accordingly. There is no limit to the number of sub-components that can be defined. Just remember that the list applies to all fluids. States For statistical purposes, the fluid ticker will be in the following state at various points during a simulation run: Idle The Ticker is always in an idle state. Properties The fluid ticker object has four tabs with various properties. The last three tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Labels Tab The General Tab Only the Ticker tab is unique to the fluid ticker object. The properties on this tab will be explained in more detail in the following sections. Tick Time This is length of time in each tick. At the end of a tick, the Ticker calculates how much fluid moved between the fluid objects in the model. Optimize object list resorting The Ticker keeps an internal list of the order that the Fluid Objects should be evaluated. if this box is not checked, the order in which certain objects are evaluated may be different in different runs of the model. This can cause a model to give different results, even if nothing in the model has actually changed. Typically, this box should be checked. Product Components This is the number of sub-components available to all of the fluid objects in the model. All of the objects use the same list of sub-components, although they do not have to specify a value greater than 0 for all of the components. Update Pressing this button updates the list of component names so that there are the number that the modeler specified. Component Names This table lists the names of the sub-components that are available to all of the fluid objects in the model. Controlled Fluid Objects This table lists the names of the fluid objects that are controlled by this Ticker."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidTank/FluidTank.html",
        "title": "Fluid Tank",
        "content": "Overview and Key Concepts The FluidTank is a simple Fluid Object that can receive and send material at the same time. The modeller decides the maximum capacity of the Tank and up to three points (called \"marks\") that will cause triggers to fire when the content in the Tank reaches them. The FluidTank is the most generic of the Fluid Objects. It can receive and send material at the same time. The modeller has complete access to the variables that control the input and output rates. They are also given two functions that fire at the end of every tick. These functions are called \"AdjustOutputRates\" and \"AdjustInputRates\". They are used to changed the values of the input or output rates during a model run. The Tank can start a model with no content, or with a set amount. If the tank begins with content, that is all it will create during a run. It may continue to receive material from upstream, however. Starting with a fixed content value is very useful for models that have a fixed amount of material that will enter. If the modeller wants a constant or infinite stream of incoming material, they should use a FluidGenerator instead. The Tank has a maximum capacity that the modeller defines. The content of the Tank will never go above this value. If, at the end of a tick, the Ticker calculates that the Tank should receive more than it can currently hold, only the material required to fill the Tank will be transferred. The modeller can define three points that will cause triggers to fire when the content of the Tank reaches them. These points are called \"Marks\". Whenever the content of a Tank passes one of these marks (either rising or falling), a trigger is fired. The user can use that trigger to open or close ports, send messages, change rates, or many other things. If two or more marks are set for the same value, the trigger for only one of them will fire. For example, if the low mark and the mid mark are both set to 10, when the content in the Tank changes from 9 to 10 only the trigger for the low mark will fire. States For statistical purposes, the fluid tank will be in one of the following states at various points during a simulation run: Empty The Tank has no material in it. Not Empty The Tank has some material in it. Full The Tank's maximum capacity has been reached, it will not receive any material unless it can send some out. Properties The fluid tank object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The remaining two tabs, the Tank tab and the Marks tab are unique to the fluid tank object. The properties on these tabs will be explained in more detail in the next two sections. The Tank Tab The Tank tab has the following properties: Maximum Content The maximum amount of fluid material that this object can hold at any time. Initial Content The amount of material that is in the object when the model is reset. Initial Product This opens the Initial Product Window which that allows the modeler to define the Product ID and sub-component mix of the material that is in this object. Adjust Input Rates This function is called every tick and allows the user to change the input rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Adjust Output Rates This function is called every tick and allows the user to change the output rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects: Maximum Object Rate - The maximum rate that material will enter this object through all output ports combined. Maximum Port Rate - The maximum rate that material will enter this object through any one port. Input port scale factor - Each row of the table is the scale factor for a single input port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual input ports during a model run. Output Ports These properties affect how the object sends material to downstream objects. Maximum Object Rate - The maximum rate that material will leave this object through all output ports combined. Maximum Port Rate - The maximum rate that material will leave this object through any one port. Output port scale factor - Each row of the table is the scale factor for a single output port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run. The Marks Tab The Marks tab has the following properties: Low Mark If the content passes this value (while rising or falling), the PassingLowMark Trigger will fire. Mid Mark If the content passes this value (while rising or falling), the PassingMidMark Trigger will fire. High Mark If the content passes this value (while rising or falling), the PassingHighMark Trigger will fire. Passing Low Mark If the content passes the Low Mark, this trigger fires. Its common uses include opening and closing ports or sending messages. There is an access variable that informs the modeler if the fluid level is rising through the mark or falling. Passing Mid Mark If the content passes the Mid Mark, this trigger fires. Its common uses include opening and closing ports or sending messages. There is an access variable that informs the modeler if the fluid level is rising through the mark or falling. Passing High Mark If the content passes the High Mark, this trigger fires. Its common uses include opening and closing ports or sending messages. There is an access variable that informs the modeler if the fluid level is rising through the mark or falling."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidGenerator/FluidGenerator.html",
        "title": "Fluid Generator",
        "content": "Overview and Key Concepts The FluidGenerator provides an infinite supply of fluid material for a model. The Generator can be set to refill at a fixed rate (that can be faster or slower than the outgoing rate) or it can refill itself a set amount of time after it becomes empty. The FluidGenerator is used to create fluid material for a model. The modeller defines the capacity of the Generator, as well as the amount of material in it when the model is reset. They can also define the ProductID and sub-component mix for the initial product. The Generator creates material in two ways. The first is at a constant rate that the modeller defines. This rate can be faster or slower than the output rate of the object. If it is faster, then the Generator will always be full. If it is slower, then the Generator will eventually become empty. Even if the Generator becomes empty, it will make more material during the next tick, but the downstream objects may not be able to receive it at the full rate. The second way to create material is to fill the Generator to its maximum amount instantly, but only after a certain amount of time has elapsed since the Generator became empty. The modeller can define how long this wait time is. This is used to simulate situations where material is available on a regular basis, but is not available all of the time. For example, trucks full of raw materials that arrive once a day could be simulated with this technique. The modeller is given control over all of the rate variables that affect the Generator's output rate, as well as a function called \"AdjustOutputRates\". This function fires every tick and allows the modeller to change the output rates during a model run. The modeller is not given control over the variables controlling the input rate, as no material ever comes into a Generator. States For statistical purposes, the fluid generator will be in one of the following states at various points during a simulation run: Empty The Generator has no material in it. Not Empty The Generator has some material in it. Full The Generator's maximum capacity has been reached. Properties The fluid generator object has six tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. Only the Generator tab is unique to the fluid generator object. The properties on this tab will be explained in more detail in the following sections. Maximum Content The maximum amount of fluid material that this object can hold at any time. Initial Content The amount of material that is in the object when the model is reset. Initial Product This opens the Initial Product Window which allows the modeler to define the Product ID and sub-component mix of the material that is in this object. Adjust Output Rates This function is called every tick and allows the user to change the output rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Generator Refill These properties affect how the object refills itself as the model runs. Refill Mode This selects the type of refill the Generator performs. It can refill itself continuously (at a specified rate) or it can refill itself completely after it becomes empty. Refill Rate The rate at which the Generator refills itself. This is available if Continuous Refill is selected in the Refill Mode drop-down list. Delay Time The time that the Generator waits after becoming empty before it completely refills itself. This is available if Refill When Empty is selected in the Refill Mode drop-down list. Output Ports These properties affect how the object sends material to downstream objects. Maximum Object Rate The maximum rate that material will leave this object through all output ports combined. Maximum Port Rate The maximum rate that material will leave this object through any one port. Output port scale factor Each row of the table is the scale factor for a single output port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidTerminator/FluidTerminator.html",
        "title": "Fluid Terminator",
        "content": "Overview and Key Concepts The FluidTerminator is used to destroy fluid material once the model is done with it. The FluidTerminator is the object that modellers use when they want to remove fluid material from the model without turning it into flow items. The Terminator keeps track of how much of each different type of material it receives, with a few restrictions. It can only keep track of up to 14 different Product ID's. These should integers that are 1 or greater. The data it collects for each product id is displayed in the Class Statistics section of the Properties GUI's statistics tab. The user has complete control of the input rates of the Terminator. This includes a function called \"AdjustInputRates\" that fires every tick. This function is used to change the input rates and scale factors during a model run. The modeller is not given control over the output rate because the material the Terminator receives is destroyed and cannot be sent downstream. States For statistical purposes, the fluid terminator will be in one of the following states at various points during a simulation run: Collecting The Terminator is never full and is always able to receive material, so it is always in a collecting state. Properties The fluid terminator object has six tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. Only the Terminator tab is unique to the fluid terminator object. The properties on this tab will be explained in more detail in the following sections. Adjust Input Rates This function is called every tick and allows the user to change the input rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects. Maximum Object Rate The maximum rate that material will enter this object through all output ports combined. Maximum Port Rate The maximum rate that material will enter this object through any one port. Input port scale factor Each row of the table is the scale factor for a single input port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual input ports during a model run."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidMixer/FluidMixer.html",
        "title": "Fluid Mixer",
        "content": "Overview and Key Concepts The FluidMixer is used to combine products together into a single, new product. The different materials can either be pulled sequentially or in parallel. The Mixer always works in batches. It does not send any material until it has received and processed all the material that it was set to receive. The FluidMixer pulls material from one or more input ports and mixes it together. The modeller defines the ProductID of the material that is released by the Mixer. The sub-components of the mix will be a mixture of the sub-components of the material that was pulled in. The sub-component percentages are based on how much of each incoming product is mixed together. The modeller defines a series of steps that the Mixer will go through. These steps are defined in the Step Table. Each step can pull material from zero or more input ports at the same time. A delay time can also be defined that begins after all the material for the step has been collected. The next step will not begin until after the delay time is over. In addition, the modeller is given a trigger that fires before the delay at a step a trigger that fires after the delay (but before the next step starts). These triggers can be used for things like calling an operator to perform work during the delay. The modeller can assign a text description to each of the steps in the table. This description is displayed near the object's name in the model view window. It does not affect the behavior of the object. The modeller defines how much material comes in by using the Mixer's Recipe Table. Each row of the table represents material coming from a single input port during a single step. Each row has four columns: the ingredient name, the port number, the step number and the amount. The name is a string that describes the material being pulled in by that row. It is for the modeller's benefit only. The Mixer ignores the value. The port number is the input port that the material will be pulled from. The step number is the step in the Step Table the Mixer must be in to pull this material. Once the Mixer has pulled the correct amount for a given row, it will not pull any more material for that row, even if the other rows in the same step are not complete yet. The amount is the actual amount of material that will be pulled from the specified port during the specified step. Different materials will be pulled in parallel if they have the same step number. They will be pulled in series if they have different step numbers. It is possible (and often very useful) to have a recipe that calls for some ingredients to be pulled in parallel and others to be pulled in series. There is no limit on the number of steps or ingredients that can be defined. There is also no limit on the number of ingredients that can be pulled during any single step. If the modeller wishes to have material pulled from the same input port during multiple steps, they have to define multiple rows in the Recipe Table. Because the Mixer controls which ports it will pull from at any point in time, the modeller does not have access to the input port scale factors. They can, however, edit the object's maximum input rate and maximum port rate. It is very important that they make sure that the maximum object rate is high enough to allow input from multiple ports if their recipe requires that. Once the delay after the final step is complete, the user has control over the output rates and scale factors. They can change these values with the AdjustOutputRates function. This function is not called until the Mixer has finished collecting everything. Once the Mixer is finished collecting and processing a batch, the function is called during every tick. It is not called while the Mixer is still working through the Step Table. The Mixer provides a visual display of the material that has been received at any point in the process. The level indicator bar will not show the Mixer's color until the delay time of the last step is complete. Before that time, the level indicator is a series of layers of different colors. There is one layer for each ingredient in the Recipe. The colors of the layers are the colors of the upstream objects that the Mixer is receiving material from. The size of each layer is the percentage of the total batch that has been pulled for that ingredient. This multi-color bar is a good indicator of what is happening in a Mixer at any given time. States For statistical purposes, the fluid blender will be in one of the following states at various points during a simulation run: Empty The Mixer has nothing in it and is waiting to start step 1. Filling The Mixer is receiving material for its current step. Starved The Mixer has not completed its Step Table, but there is no material coming into it. Releasing The Mixer has completed the Step Table and is sending the finished product downstream. Blocked The Mixer has completed the Step Table, but is unable to send material downstream. Properties The fluid mixer object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The remaining two tabs, the Mixer tab and the Steps tab are unique to the fluid mixer object. The properties on these tabs will be explained in more detail in the next two sections. The Mixer Tab The Mixer tab has the following properties: Target Product ID The ProductID that will be assigned to the material that leaves this object. Adjust Output Rates This function is called every tick and allows the user to change the output rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects. Maximum Object Rate - The maximum rate that material will be allowed into this object through all input ports combined. The actual input rate is based on the amount of material available upstream and the space available in this object. Maximum Port Rate - The maximum rate that material will be allowed into this object through any single input port. Output Ports These properties affect how the object sends material to downstream objects. Maximum Object Rate - The maximum rate that material will leave this object through all output ports combined. Maximum Port Rate - The maximum rate that material will leave this object through any one port. Output port scale factor Each row of the table is the scale factor for a single output port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run. The Steps Tab The Steps tab has the following properties: Before Step Delay Trigger This trigger fires after all of the material for a step has been collected, but before the step's delay time begins. This gives the modeler a chance to do things like call an operator for the delay. After Step Delay Trigger This trigger fires after the delay for a step is complete. It gives the modeler a chance release an operator or send messages to other objects. Mixer Steps This group has the following properties: Number of Steps - This is the number of steps that the Mixer will go through for every batch of material that it makes. Update - Pressing this button updates the Step Table so that it has the number of rows specified by the modeler. Steps Table - The Step Table shows all of the steps that the Mixer must go through for each batch. Each step has two columns that the modeler must fill out: Description - This is a text description of the step. It is displayed by the Mixer's name in the model view window when the Mixer is on the step. Delay - This is the amount of time that the Mixer must wait after collected all of the ingredients for the step before it can go on to the next step. Mixer Recipe This group has the following properties: Number of Ingredients - This is the number of ingredients that the Mixer will pull as it goes through its Step Table. Update - Pressing this button updates the Ingredients Table so that it has the number of rows specified by the modeler. Ingredients Table - The Ingredients Table show all of the ingredients that the Mixer pulls as it goes through its Step Table. If a single ingredient needs to be pulled in more than one step, it should appear in more than one row in the table. The table has four columns that the modeler must fill out: Ingredient - This is a text description of the ingredient that the row represents. It is only to help the modeler document their model. It does not affect the Mixer's behavior. Port - This is the input port that the ingredient will be pulled from. Amount - This is the amount of the ingredient that will be pulled. Step - This is the step number that the Mixer must be in for this ingredient to be pulled."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidBlender/FluidBlender.html",
        "title": "Fluid Blender",
        "content": "Overview and Key Concepts The FluidBlender is used to mix materials from multiple input ports based on percentages the user defines (not fixed amounts). It is most commonly used for in-line blending where the mixing is not done in batches. The FluidBlender receives material from more than one input port based on a series of percentages that the modeller defines. Once the material has been pulled into the Blender it is ready to be pulled out immediately by downstream objects. The modeller defines the ProductID of the material that is released by the Blender. The sub-components of the mix will be a mixture of the sub-components of the material that was pulled in. The sub-component percentages are based on how much of each incoming product is mixed together. The percentages that the Blender uses are defined in a table called the Blender Recipe. There is one row in the table for each input port that the Blender has. The rows in the table are not visible in the Properties window until there are objects connected to the Blender's input ports. Each row has two columns: the ingredient name and the percentage. The name is a text string that the modeller uses to identify the material that is being pulled in. It is for the modeller's benefit only, it does not affect how the Blender will work. The percentage value is a number between 0 and 100, indicating what percentage of the incoming material will come from the port represented by the row. The Blender always makes sure it is pulling the correct percentages. Each tick, the Blender will calculate how much from each port it needs to either fill itself or pull at its maximum input rate. If there is not enough of a material to meet this demand, the amount it pulls from the other ports will be reduced to keep the percentages correct. If there is not enough empty space in the Blender to pull at the full input rate, the Blender will lower the input rate (while still maintaining the defined percentages) to fill itself. It recommended, therefore, that the maximum content of the Blender be at least twice the input rate. This will allow the Blender to receive at the maximum input rate, as long as material is flowing out at least as fast. Because the Blender controls how much it pulls from each port at any point in time, the modeller does not have access to the maximum port rate or the input port scale factors. They can, however, edit the object's maximum input rate. The user has complete control over the output rates and scale factors. They can change these values with the AdjustOutputRates function, which fires every tick. This allows them to update the output rates and scale factors as the model is running. States For statistical purposes, the fluid blender will be in one of the following states at various points during a simulation run: Empty The Blender has no material in it. Mixing The Blender has received material that it mixed together. Blocked The Blender has received material, but it cannot send it downstream. Properties The fluid blender object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The remaining two tabs, the Blender tab and the Recipe tab are unique to the fluid blender object. The properties on these tabs will be explained in more detail in the next two sections. The Fluid Blender Tab The Fluid Blender tab has the following properties: Maximum Content The maximum amount of fluid material that this object can hold at any time. Target Product ID The ProductID that will be assigned to the material that leaves this object. Adjust Output Rates This function is called every tick and allows the user to change the output rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects. Maximum Input Rate The maximum rate that material will be allowed into this object through all input ports combined. The actual input rate is based on the amount of material available upstream and the space available in this object. Output Ports These properties affect how the object sends material to downstream objects. Maximum Object Rate The maximum rate that material will leave this object through all output ports combined. Maximum Port Rate The maximum rate that material will leave this object through any one port. Outside Port Scale Factor Each row of the table is the scale factor for a single output port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run. The Recipe Tab The Recipe tab has the following properties: Blender Recipe Each row of this table represents a single input port. The rows do not appear in the table unless the object is already connected to upstream objects when the Properties GUI is opened. There are two columns that the modeler can change in the table: Ingredient - This is a text description of the ingredient coming from the port the row represents. This is for the modeler's use only, the Blender will ignore this value. Percent - This is a number between 0 and 100 that is the percentage of the total incoming material that should come from the port represented by the row. The Blender will adjust the actual amount of material pulled from each port to make sure these percentages are correct, even when there is not enough material or space available to pull at the maximum rate."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidSplitter/FluidSplitter.html",
        "title": "Fluid Splitter",
        "content": "Overview and Key Concepts The Splitter is used to send material to multiple output ports in percentages that the modeller specifies. These percentages are specified in a table called the Splitter Percents Table. Each row in the table corresponds to an output port. There are columns that allow the modeller to enter a description of each port (for the modeller's use only) and the percentage (from 0-100) of the outgoing material that will go to each port. When the Splitter sends material out, it will always send in the percentages specified. If the Splitter can not send all the material that it is trying to send, it will reduce the amount that it sends to the other ports to keep the percentages equal at all times. The modeller has complete control over the input rates and scale factors using the AdjustInputPorts function. They also have control over the total output rate. The port output rate and the scale factors will be adjusted by the object itself as needed. It should be noted that the FluidSplitter may not adjust the amount of material to go out correctly if the downstream objects are full, or nearly full. Due to the timing of the calculations, the Splitter may decide there is no room for material it is trying to send even if the downstream object will release enough material to make room for the Splitter's material. The FluidBlender receives material in a normal manner, but sends it out differently. It sends material out in percentages that the user specifies in a table called the Splitter Percents. The table is not visible in the Properties window until the Splitter is connected to downstream objects. Each row of the table corresponds to a single output port, and has two columns: a description and the percentage. The description is a text string that describes the material being sent to that port, it is not used by the object and is for the modeller's benefit only. The percentage is a number between 0 and 100 that indicates what percentage of the outgoing material should be sent to that port. Every tick, the Splitter calculates the amount of material that should be sent to each of the downstream objects, based on rates and capacities. If there is not enough room in one of the downstream objects to receive the amount the Splitter has calculated, the amount sent to each port is reduced to keep the percentages correct. Because the Splitter controls how much it sends to each port at any point in time, the modeller does not have access to the maximum port rate or the output port scale factors. They can, however, edit the object's maximum output rate. The user has complete control over the input rates and scale factors. They can change these values with the AdjustInputRates function, which fires every tick. This allows them to update the input rates and scale factors as the model is running. States For statistical purposes, the fluid splitter will be in one of the following states at various points during a simulation run: Empty The Splitter has nothing in it. Not Empty The Splitter has material in it that can be sent out. Properties The fluid splitter object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The remaining two tabs, the Splitter tab and the Percents tab are unique to the fluid splitter object. The properties on these tabs will be explained in more detail in the next two sections. The Splitter Tab The Splitter tab has the following properties: Maximum Content The maximum amount of fluid material that this object can hold at any time. Adjust Input Rates This function is called every tick and allows the user to change the input rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects: Maximum Object Rate - The maximum rate that material will enter this object through all output ports combined. Maximum Port Rate - The maximum rate that material will enter this object through any one port. Input port scale factor - Each row of the table is the scale factor for a single input port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual input ports during a model run. Output Ports These properties affect how the object sends material to downstream objects: Maximum Output Rate - The maximum rate that material will leave this object through all output ports combined. The Percents Tab The Percents tab has the following properties: Splitter Percents Each row of this table represents a single output port. The rows do not appear in the table unless the object is already connected to downstream objects when this window is opened. There are two columns that the modeler can change in the table: Ingredient - This is a text description of the material going to the port the row represents. This is for the modeler's use only, the Splitter will ignore this value. Percent - This is a number between 0 and 100 that is the percentage of the total outgoing material that should go to the port represented by the row. The Splitter will adjust the actual amount of material sent to each port to make sure these percentages are correct, even when there is not enough material or space available to send at the maximum rate."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidPipe/FluidPipe.html",
        "title": "Fluid Pipe",
        "content": "Overview and Key Concepts The Pipe is used to simulate the time required to move material from one object to another. It can appear as either a cylindrical pipe, or as a simple conveyor. The Pipe carries material from one point in the model to another. It is most often needed when the modeller has to take into account the time required to move material from one point to another. It is also used if the modeller needs to send material from multiple objects to a single input port on another object or when material from one output port needs to be split. The modeller specifies a maximum content and maximum flow rate for the Pipe. The amount of time that it takes material to travel through the Pipe is based on these two values. The maximum flow rate is used as the maximum input and output rate. The actual output rate is based on the rate that material came into the Pipe. The material will go out of the Pipe at the same rate it came in, unless the Pipe \"backs up\". If one of the output ports does not receive all of the material that the Pipe tries to send, the material in the Pipe \"backs up\" and more is available to be sent during the next tick. The modeller also selects an output flow mode. There are three modes available. The first flow mode is called \"Flow Evenly.\" In this mode, the Pipe attempts to divide the output rate evenly between the output ports. The second flow mode is called \"First Available.\" In this mode, the Pipe tries to send all of the material that is ready to be sent to the first output port. If that object can not receive it all, the Pipe tries to send it to the next port, and so on. The third mode is called \"User-Defined.\" This mode allows the modeller to edit the maximum port input and output rates, as well as the port scale factors. The modeller also has access to the AdjustInputRates and AdjustOutputRates functions. Unlike the other fluid objects, the modeller can read but can not change the object input and output rates using these two fields. The Pipe has no level indicator bar, but does have some visual indications of its state. When the Pipe is empty, it is shown as a solid gray color. When material is moving, the Pipe is shown in the color assigned to it, but that color is fading in and out. When the Pipe is blocked and unable to send, it is drawn in its assigned color and does not change. The modeller can change the look of the Pipe by editing the Pipe's Layout Table. Each row of the table represents a single, straight section of the Pipe. The modeller can define how long the section is and what its diameter is. They can also specify the angles around the Z and Y axis that the pipe will rotate for the next section. There is also a column that allows the modeller to state whether or not the joint between this section and the next one will be drawn. By editing this table, the modeller can make the Pipe look however they need. The modeller also has the option of displaying the Pipe as a simple conveyor. When the Pipe is drawn as a conveyor, the Layout Table is still followed, only the option to display the joints between sections is ignored. States For statistical purposes, the fluid blender will be in one of the following states at various points during a simulation run: Empty The Pipe has no material in it. Filling The Pipe received material, but no material has been sent out recently. Starved The Pipe has material, but has not sent or received any recently. Flowing The Pipe has material that is it currently sending downstream. Blocked The Pipe has material that it is unable to send downstream. The material in the Pipe is \"backing up\". Properties The fluid pipe object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The remaining two tabs, the Pipe tab and the Layout tab are unique to the fluid pipe object. The properties on these tabs will be explained in more detail in the next two sections. The Pipe Tab The Fluid Pipe tab has the following properties: Maximum Content The maximum amount of material that this object can hold. Flow Mode The Pipe has three different modes that can be used to define how fluid is sent downstream: Flow Evenly - The output ports are configured to have a maximum flow rate equal to the incoming flow rate divided by the number of output ports. The output ports may not send the same amount, depending on the content of the downstream objects. First Available - The output ports are configured to have a maximum flow rate equal to the incoming flow rate. Material will be sent to downstream objects in a first-come-first-served manner. User Defined - The modeler has control over the input rate (both for the object and the individual ports) and the output rate for individual ports. Input Ports These properties affect how the object receives material from upstream objects: Maximum Flow Rate - The maximum rate that material will be allowed into this object through all input ports combined. This value serves as both the maximum input and maximum output rates. The actual rate is based on the amount of material available upstream and the space available in this object. Material will attempt to leave the Pipe at the same rate that it came in. If there is not enough room downstream, the material will \"back up\" and more (up to the maximum rate) will be available to send in the next tick. Maximum Port Rate - The maximum rate that material will be allowed into this object through any single input port. Input port scale factor - Each row of the table is the scale factor for a single input port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run. Output Ports These properties affect how the object sends material to downstream objects: Maximum Port Rate - The maximum rate that material will leave this object through any one port. Output port scale factor - Each row of the table is the scale factor for a single output port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run. Adjust Input Rates This function is called every tick and allows the user to change the input rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors, getnodenum() and setnodenum() should be used in conjunction with the rank() command. Adjust Output Rates This function is called every tick and allows the user to change the output rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. The Layout Tab The Layout tab has the following properties: Editor View Displays the Pipe Layout editor view as shown above. Table View Displays the Pipe Layout table view as shown below. Initial Z Rotation This is the rotation around the Z axis that is applied to the starting point of the Pipe. This is used to orient the Pipe in a particular direction before sections are drawn. Conveyor View If this box is checked, the Pipe will be drawn as a simple conveyor. This does not change the functionality of the pipe. See the Fluid Conveyor object for conveyor functionality. Pipe Section Editor Icon Description Adds a new section to the table. Removes the selected section from the table, or if no sensor is selected, removes the last sensor in the table. Moves the selected section up or down in the list. Additional properties in this group are as follows: Section Table - Each row in the table represents a single section of the Pipe. The columns are described above. Section Name - The name of the pipe section. This is purely for the modeler's convenience and has no affect on the model. Length - The length of the section Diameter - The diameter of this section of the Pipe. If the Pipe is being shown as a conveyor, this is the width of the end of the section. The actual section will become wider or more narrow depending on the diameter value of the previous section. Z Rotation - The rotation around the Z Axis that is applied at the end of the section. Y Rotation - The rotation around the Y Axis that is applied at the end of the section. Show Joint - Specifies whether the pipe's joint will be drawn between the end of this section and the start of the next one. This value is ignored if the Pipe is being drawn as a Conveyor. Join Diameter - Specifies the diameter of the joint. Joint Length - Specifies the length of the joint. Auto Size Joint - Automatically adjusts the joint size based on the diameter and rotation of the pipe sections."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidProcessor/FluidProcessor.html",
        "title": "Fluid Processor",
        "content": "Overview and Key Concepts The FluidProcessor is used to simulate a processing step that continuously receives and sends fluid material (such as a continuous cooker). The FluidProcessor receives and sends material based on an over-all rate that the modeller specifies. The modeller specifies the maximum output rate of the Processor. This value is used to determine the input rate as well. The actual output rate is based on the rate that material came in. Material will leave at the same rate that it entered, unless the output is, for some reason, lowered (such as the downstream object closing its input ports or breaking down). If this happens, the material will \"back up\" in the Processor and more will be available to send when the downstream object can receive more again. Once the downstream object has received all of the \"backed up\" material, the output rate will go back to the input rate. The amount of time that material spends in the Processor is based on the Processor's maximum output rate and its maximum capacity. The modeller is also able to specify a loss value. This value is a number from 0-1 that represents the percentage of incoming material that is lost due to machine inefficiency, evaporation, or any other reason. Whenever any material enters the Processor, it is immediately reduced by this percentage. Unlike other objects, the Processor can only receive from one port and send to one port during each tick. The Processor has functions called \"Receive Port Number\" and \"Destination Port Number\" that the modeller uses to decide which ports will be used. If these functions returns 0, the first input or output port that has material or has available space will be used. If another value is returned it is the number of the input or output port that will be used. This is the more common use of these two fields. States For statistical purposes, the fluid processor will be in one of the following states at various points during a simulation run: Empty The Processor has no material in it. Processing The Processor has material in it that it is trying to send downstream, or that has not been in the Processor long enough to be sent. Blocked The Processor has material in it that it is unable to send downstream. Properties The fluid processor object has six tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. Only the FluidProcessor tab is unique to the fluid processor object. The properties on this tab will be explained in more detail in the following sections. Maximum Content The maximum amount of material that this object can hold. Loss Amount A value between 0 and 1 that represents the percentage of material that is lost going through the Processor. This loss could be due to evaporation, inefficiency or many other factors. A value of 0 means that there is no material lost, a value of 1 means that all material is lost. This loss is applied as soon as material is pulled into the Processor. Maximum Output Rate The maximum rate that material will leave this object through all of the output ports combined. The actual rate will be determined by the rate of material coming into the Processor. Receive Port If this field returns a 0, the Processor will receive material from all input ports. If it returns a number greater than zero, the Processor will only receive material from that input port. Destination Port If this field returns a 0, the Processor will allow material to leave from all of its output ports. If it returns a number greater than zero, the Processor will only allow material out that output port."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/ItemToFluid/ItemToFluid.html",
        "title": "Item to Fluid",
        "content": "Overview and Key Concepts The ItemToFluid is an object that is used to interface between the fluid objects and the discrete objects. It receives flow items and converts them to fluid material. The ItemToFluid is a Fixed Resource object that is designed to interface between the discrete objects and the fluid objects. When it receives a flow item, it destroys the flow item and creates fluid that can be sent to any of the other fluid objects. The amount of fluid created is based on two values that the modeller specifies. The first is the amount of fluid that each discrete unit creates. The second is the number of discrete units each flow item represents. Generally this value will be 1, but often the modeller will use a flow item to represent multiple physical objects. In that case, the number should be set to the number of objects represented by each flow item. The total number of fluid units that are created for each flow item that enters is found by multiplying these two values together. For example, a single flow item may represent 10 bags that each contain 25 pounds of a fluid material. The discrete units per flow item in this case is 10, and the fluid units per discrete unit is 25. Each time one of these flow items enters the ItemToFluid, 250 pounds of fluid are created. The ItemToFluid has a maximum capacity that the modeller defines. The object will not accept any flow items if there is not at least enough empty space in it to hold all of the material that flow item will create. The modeller can also define the ProductID, and sub-component mix of the fluid that is created and sent out. The flow items entering can be controlled using standard FixedResource pull logic. The output of fluid is completely controlled by the modeller. They can edit the maximum object rate, maximum port rate and the port scale factors using the GUI and the AdjustOutputRates function. States For statistical purposes, the fluid blender will be in one of the following states at various points during a simulation run: Empty The ItemToFluid has no material in it. Not Empty The ItemToFluid has fluid material in it that has not been pulled out yet. Full The ItemToFluid's maximum capacity has been reached. Properties The item to fluid object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The Flow tab is common to many fixed resources objects. See The Flow Tab for more information. Only the Fluid to Item tab is unique to the item to fluid object. The properties on this tab will be explained in more detail in the following sections. The Fluid to Item tab has the following properties: Maximum Content The maximum amount of fluid material that this object can hold at any time. Initial Product This opens the Initial Product Window which that allows the modeler to define the ProductID and sub-component mix of the material that is created by this object. Adjust Output Rates This function is called every tick and allows the user to change the output rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects: Fluid per Discrete Unit - This is the number of units of fluid material that are in a single discrete unit in the flow item. For example: 10 pounds per bag. Discrete Units per Flowitem - This is the number of discrete units of material that are in each flowitem. For example: 5 bags per pallet, where a flow item is a single pallet. Flowitem Recycling - The modeler uses this drop-down list to decide where to store flow items that need to be recycled. They should send flow items back to the section of the flow item bin that they originally came from. Output Ports These properties affect how the object sends material to downstream objects: Maximum Object Rate - The maximum rate that material will leave this object through all output ports combined. Maximum Port Rate - The maximum rate that material will leave this object through any one port. Output port scale factor - Each row of the table is the scale factor for a single output port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual output ports during a model run."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidToItem/FluidToItem.html",
        "title": "Fluid to Item",
        "content": "Overview and Key Concepts The FluidToItem is an object that is designed to interface between the fluid objects and the discrete objects. It receives fluid and converts it to flow items that it sends downstream. The FluidToItem is used to convert fluid to flow items that can be sent to any Fixed Resource. The modeller chooses the flow item class, the default itemtype and name for the flow items that are created. The modeller also has to specify the amount of fluid material that must be collected before a flow item can be created. This is done by editing two values. The first is the amount of fluid in each discrete unit. The second is the number of discrete units that each flow item represents. The total amount of fluid that will be collected before a flow item is created is found by multiplying these two values together. For example, if a single flow item represents 20 cans and each can holds 5 gallons of fluid, the number of discrete units per flow item is 20 and the number of fluid units per discrete unit is 5. Therefore, for each 100 gallons of fluid collected in the FluidToItem a single flow item will be sent out. Once a flow item is created, the standard Send To Port logic is used to send it downstream. This means that the FluidToItem can send flow items to any of the discrete objects and can call operators to do the transporting. The modeller can define how the input to the FluidToItem works by changing the maximum object input rate, maximum port input rate and the port scale factors using the GUI and the AdjustInputRates function. States For statistical purposes, the fluid blender will be in one of the following states at various points during a simulation run: Empty The FluidToItem has no material in it. Blocked The FluidToItem has material in it that it is unable to send downstream. Collecting The FluidToItem is collecting material. Properties The fluid to item object has seven tabs with various properties. The last five tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Fluid Level Display Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The Flow tab is common to many fixed resources objects. See The Flow Tab for more information. Only the Fluid to Item tab is unique to the fluid to item object. The properties on this tab will be explained in more detail in the following sections. The Fluid to Item tab has the following properties: Maximum Content The maximum amount of fluid material that this object can hold at any time. Flowitem This is the class of flow item that the FluidToItem will create. Adjust Input Rates This function is called every tick and allows the user to change the input rates and scale factors during a model run. There are access variables that are references to the nodes that hold the rates and scale factors. To read the current rate (object or port) the getnodenum() command should be used. To change the rate the setnodenum() should be used. To read or change the scale factors getnodenum() and setnodenum() should be used in conjunction with the rank() command. Input Ports These properties affect how the object receives material from upstream objects: Maximum Object Rate - The maximum rate that material will enter this object through all output ports combined. Maximum Port Rate - The maximum rate that material will enter this object through any one port. Input port scale factor - Each row of the table is the scale factor for a single input port. The value is multiplied by the maximum port rate to determine the actual maximum rate for that specific port. This allows the modeler to change the rate of individual input ports during a model run. Flowitem Output These properties define when the FluidToItem creates a flow item and some information that will be defined on the flow item when it is created: Fluid per Discrete Unit - This is the number of units of fluid material that are in a single discrete unit in the flow item. For example: 5 gallons per can. Discrete Units per Flowitem - This is the number of discrete units of material that are in each flow item. For example: 10 cans per case, where a flow item is a single case. Flowitem ItemType - This value will be assigned to the itemtype of the flow items as they are created. It can be changed using the OnCreation or OnExit triggers. Flowitem Name - This name will be assigned to the flow items that are created. It can be changed later using triggers."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidConveyor/FluidConveyor.html",
        "title": "Fluid Conveyor",
        "content": "Overview and Key Concepts The Fluid Conveyor is used to control fluid flow through the use of multiple input and output ports. Inputs and outputs may be placed anywhere along the length of the conveyor. The direction, speed, acceleration and angle of repose along with the length and width of the conveyor are all factors that will affect where material rests inside the conveyor and when and to which output port the material will be sent. Speed and Direction The Fluid Conveyor cannot have a negative speed. If the target direction is changed, the Fluid Conveyor will decelerate to 0 speed and then accelerate to the target speed. Slices In order to simulate a moving fluid material, the Fluid Conveyor breaks all of its content up into a series of slices defined by the user. The more slices in the conveyor, the higher the resolution. This also means there is more processing required to move and repose the material through all the slices. Inputs Inputs are defined over a range of slices. For every tick where material moved into the Fluid Conveyor from one of the input ports, the incoming material will be spread evenly through all of the slices that fall inside the input range. Outputs Outputs are defined at one point along the conveyor. Each output has a forward and reverse output percentape as well as a stopped rate. The forward and reverse percentages specify the total percentage of material that should exit through that output based on the current direction. If the output cannot handle all of the material, it is either spilled onto the floor (see Allow Spillage) or it will pass the output. The stopped rate will cause material to flow through the output when the conveyor is stopped. For example, if the stopped rate is 0.1 and the material sitting on top of an output is 0.5, the output will take 0.1 fluid units per tick, until there is no more fluid available to take. Angle of Repose The angle of repose defines the material's steepest angle of descent of the slope relative to the horizontal plane. This angle ranges between 0 and 90 degrees. For example, dirt has an angle of repose of 30-45°, dry sand 34°, wet sand 15-30°, and water is 0°. The fluid conveyor also has a repose rate. A value of 0 will cause the Angle of Repose to be ignored. Repose Rate The repose rate defines how quickly a reposing pile of material will reach its natural resting state (based on the angle of repose). The repose subroutine will be run the number of times specified in this field (the larger the number, the more processing time it will take each tick to repose). A value between 1 and 10 is usually sufficient. Allow Spillage If allow spillage is checked on the Inputs/Outputs page, the fluid conveyor will try to send the full percentage of material to each output. Any material that cannot be handled by the downstream object will be spilled onto the floor. Any material that is unable to leave the conveyor through on output port that reaches the end of the fluid conveyor will also spill onto the floor. The spillage amount is recorded an a total amount of material spilled. Sensors Similar to the Fluid Tank's Marks, sensors can be added anywhere along the length of the Fluid Conveyor. These sensors can be set up to be triggered based on the Peak Height of a section, or on the total Volume of the section. Each sensor has a Start and an End position. This marks the range over which the sensor will look for the specific values. You can also specify the low, mid, and high values for each sensor. When fluid passes one of these values, a Sensor Trigger is fired. States For statistical purposes, the fluid conveyor will be in one of the following states at various points during a simulation run: Idle The Fluid Conveyor is stopped and there is no material in it. Empty The Fluid Conveyor is conveying but has no material in it. Not Empty The Fluid Conveyor is stopped and no material is entering or leaving. Conveying The Fluid Conveyor has material that is currently being moved along the length of the trough at a speed > 0. Flowing The Fluid Conveyor has material but it is stopped. Material is settling and flowing through outputs. Releasing The Fluid Conveyor is sending material downstream and no material is entering. Collecting The Fluid Conveyor is collecting material and no material is leaving. Properties The fluid conveyor object has seven tabs with various properties. The last four tabs are the standard tabs that are common to most fluid objects. For more information about the properties on those tabs, see: The Triggers Tab The Labels Tab The General Tab The Statistics tab is obsolete and is not supported for this object any more. Use the Statistics group in the object's Quick Properties instead. The remaining three tabs--the Conveyor tab, the Inputs/Outputs tab, and the Sensors tab are unique to the fluid conveyor object. The properties on these tabs will be explained in more detail in the next three sections. The Conveyor Tab The Conveyor tab has the following properties: Maximum Content The maximum amount of fluid material that this object can hold at any time. Initial Content The amount of material that is in the object when the model is reset. Initial Product This opens the Initial Product Window which allows the modeler to define the Product ID and sub-component mix of the material that is in this object. Toggle Manual Control Toggles manual speed control. You can change the direction, target speed and acceleration while the model is running. The manual speed control is designed to help you understand more about how the conveyor will react to changes in speed or direction. Direction Specifies the initial direction of the conveyor. The current direction is also displayed while the model is running. Speed Specifies the initial speed of the conveyor in the given initial direction. Speed values for the fluid conveyor cannot be negative. The current speed is also displayed while the model is running. Acceleration Specifies the initial acceleration of the conveyor. Infinite acceleration is defined as 0. The current acceleration is also displayed while the model is running. Number of Slices The number of slices of fluid material that are placed along the length of the conveyor. The more slices, the better the resolution for displaying the volume of fluid. However, the more slices in the fluid conveyor, the more computations, causing your model to run slower. Angle of Repose Defines the material's steepest angle of descent of the slope relative to the horizontal plane. This angle ranges between 0 and 90 degrees. Repose Rate The repose rate defines how quickly a reposing pile of material will reach its natural resting state (based on the angle of repose). A value of 0 will cause the Angle of Repose to be ignored. The repose subroutine will be run the number of times specified in this field (the larger the number, the more processing time it well take each tick to repose). Layout Configuration The layout of the fluid conveyor affects the conveyor's behavior, so the model should be reset after the layout has been changed to apply the changes. Start Width Specifies the width of the start of the conveyor. End Width Specifies the width of the end of the conveyor. Length Specifies the length, or X dimension of the conveyor. Centerline Offset The centerline offset skews the conveyor's trough. The value specifies the distance and direction (can be positive or negative) that the centerline of the trough is offset from the standard centerline. Sidewall Height Specifies the sidewall height of the conveyor's trough. This value is purely visual and has no effect on the behavior of the fluid conveyor. Leg Height Specifies the leg height of the conveyor. This value is purely visual and has no effect on the behavior of the fluid conveyor. Conveyor Colors Use the or to Sample a color or press \"...\" to choose a color. Trough Sets the color of the trough and legs. You may also change the transparency of the trough (allowing you to see the material's height profile through the sidewall). Material Sets the color of the material. You may also change the transparency. Arrow Colors Set the color of the three directions of the fluid conveyor, Forward, Reverse, and Stopped. You may also change the transparency. The Inputs/Outputs Tab The Inputs/Outputs tab has the following properties: Input Ports Table Displays all of the objects currently connected to an input port of the Fluid Conveyor: In Object - Displays the name of the input object. Start Position - The start point of the input. This value is in the model's length units and must be greater than or equal to 0 and less than the end position. End Position - The end point of the input. This value is in the model's length units and must be less than or equal to the length of the Fluid Conveyor and greater than the start position. Allow Spillage - If this is checked, fluid will be allowed to spill at outputs if the downstream object cannot take as much fluid as the Fluid Conveyor is sending. Any extra fluid left at the end of the conveyor will also spill. Total spillage is tracked each tick. Output Ports Table Displays all of the objects currently connected to an output port of the Fluid Conveyor: Out Object - Displays the name of the output object. Exit Position - The exit point of the output. This value is in the model's length units and must be greater than or equal to 0 and less than the end position. Forward % - This specifies the percentage of fluid that should exit at this output when the Fluid Conveyor is moving forward. The Fluid Conveyor will attempt to send the specified percentage of fluid through the output. If the downstream object cannot handle the total amount of fluid, it will pass the output, unless spillage is allowed, then the excess will spill onto the floor. Reverse % - This specifies the percentage of fluid that should exit at this output when the Fluid Conveyor is moving forward. The Fluid Conveyor will attempt to send the specified percentage of fluid through the output. If the downstream object cannot handle the total amount of fluid, it will pass the output, unless spillage is allowed, then the excess will spill onto the floor. Stopped Rate - The stopped rate specifies how much fluid should leave through the output when the Fluid Conveyor is stopped. For example, if the stopped rate is 0.1 and the material sitting on top of an output is 0.5, the output will take 0.1 fluid units per tick, until there is no more fluid available to take. The Sensors Tab The Sensors tab has the following properties: Sensor Table Displays all of the sensors for the Fluid Conveyor: Icon Description Adds a new sensor to the table. Removes the selected sensor from the table, or if no sensor is selected, removes the last sensor in the table. Moves the selected sensor up or down in the list. This table has the following columns: Start - The starting point of the sensor. This value is in the model's length units and must be greater than or equal to 0 and less than the end point. End - The end point of the sensor. This value is in the model's length units and must be less than or equal to the total length of the conveyor and greater than the start point. Mode - The sensor has two modes, Volume(1) and Peak Height(2). Volume will look at the total volume between the starting and ending point. Peak Height will look at the highest point between the starting and ending point. Low, Mid, High Val - These values specify the low, mid, and high points for the volume or peak height that, when crossed, will trip the sensor. When the volume or peak height of material in a sensor range rises or falls through any of these three values, one of the three passing triggers will fire. Sensor Triggers The sensors have the following triggers: Passing Low Mark - This trigger is fired when fluid volume or peak height rises or palls through the defined Low Val. Passing Mid Mark - This trigger is fired when fluid volume or peak height rises or palls through the defined Mid Val. Passing High Mark - This trigger is fired when fluid volume or peak height rises or palls through the defined High Val."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/FluidLevelDisplay/FluidLevelDisplay.html",
        "title": "The Fluid Level Display Tab",
        "content": "The Fluid Level Display tab has the following properties: Draw Level Indicator If this is checked, the level indicator bar will be drawn on the object. Rectangular If this is selected, the level indicator bar will be drawn as a colored box. Cylindrical If this is selected, the level indicator bar will be drawn as a colored cylinder. Position, Rotation, and Size Here you can set the position, rotation, and size of the bar based on X, Y, and Z values. Icon Description Change the position of the object. Change the rotation of the object. Change the size of the object. Location and Size Values The location and size values are expressed as a percentage (1.0 being 100%) of the size of the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/InitialProduct/InitialProduct.html",
        "title": "Initial Product",
        "content": "This window is used to define the initial Product ID and sub-component list for fluid material that is created by the object. It is used by a few of the fluid objects. It has the following properties. Object Name The object that is creating this material. Product ID The Product ID that will be assigned to the material that is created. Sub-Component List Each row in the list is a different sub-component that is available for this material. The list is defined on the Fluid Ticker Properties tab. The values are percentages from 0 to 1. They should add up to 1. All of the available sub-components are listed here, but the material does not have to use them all. If there are any that it does not use, the values in those rows should be set to 0."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/Triggers/Triggers.html",
        "title": "The Triggers Tab",
        "content": "Triggers are called when events fire on the object. See Key Concepts About Events for general information about triggers. Each object may have a different set of triggers. See the Concepts page for that category of object for more information about each trigger under the Events section. Each trigger has the following options: Icon Description Add custom logic to the trigger using preconfigured pick options. Remove all logic from the trigger. Open the trigger's code editor to edit the FlexScript directly."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/Labels/Labels.html",
        "title": "The Labels Tab",
        "content": "About the Labels Tab Labels are custom variables that you can specify on the object. For example, if you want to keep track of the number of flow items of itemtype 3 that have entered an object, you can use a label to keep a record of this value. For information on using labels, see the Label Properties documentation. The main panel shows a list of the labels on this object. Icon Description Adds a new label with number or string data to the end of the list of labels. Duplicates the selected label(s). Deletes the selected label(s). Moves the selected label(s) up or down in the list. Pins the selected label(s) (or all labels if there is no selection) to a Dashboard as either a table of values, bar chart or line graph. Note: Pinning labels with string data will display 0 for its value. Label Types When you add a label, you can choose from one of the following kinds of labels: Number Label - a label that stores number data String Label - a label that stores text data Pointer Label - a label that stores a reference to another object Array Label - a label that stores an array of values FlexScript Label - a label that stores text, and is toggled as FlexScript Bundle Label - a label that stores a Bundle (a kind of table) Tracked Variable Label - a label that stores a Tracked Variable. Once you have added a label, you can change its type using the context menu. The way to edit the value of each label depends on the type of label. The following list describes how to edit the label's value, depending on its type: Number Label - Double click on the value, and enter a new value. String Label - Double click on the value, and enter a new value. Pointer Label - Click on the value. A Sampler button will appear, allowing you to sample an object, which will be referenced by this label. Array Label - Double click on the value. This opens a table view of the array. Add elements to the array by adding rows to the table. You can edit each value by double-clicking on the value in the table view. Close the table view when you are finished editing array values. FlexScript Label - Click on the value. A Code button will appear, allowing you to enter the FlexScript code for this label. Bundle Label - Double click on the value. This will open a table view, which will allow you to edit the table stored in the bundle. Tracked Variable Label - Click on the value. An Edit button will appear, which will allow you to configure the Tracked Variable stored on this label. Labels can also be edited in Quick Properties. Automatically Reset Labels If this option is checked, then the object will automatically reset its labels back to their initial values on reset. When you apply the window, the values shown will be saved as the reset values. The reset values will also be automatically set when directly editing the labels on this tab while the model is reset."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/General/General.html",
        "title": "The General Tab",
        "content": "About the General Tab The General tab affects the overall appearance and display of 3D objects. Appearance The Appearance group has the following properties: 3D Shapes This option specifies the 3D shape(s) for the object. The drop down contains all of the shape frames for the object. The number (0 -) is the shape frame index for use in the setframe() command. Icon Description Adds a Shape Frame to the object. Removes the current Shape Frame. Moves the selected Shape Frame up or down in the list. 3D shapes can either be referenced through the or loaded 3D shapes will display in the down arrow menu. You can also select Browse... from this menu to load a new shape. FlexSim can load many types of 3D files, including: .fbx, .jt, .skp, .3ds, .wrl, .stl, .stp, .igs, .dae, .obj, .ac, .x, .blend Shape Factors Click on this button to display the object's shape factors popup. 3D Texture This field specifies the object's 3D texture. If the 3D shape does not already have a texture defined within its 3D file, then this texture will be drawn on the face of the 3D shape. Note that if the object's 3D shape already has a texture defined, then this texture will not be used. Color This field specifies the color of the object. Note that if the object already has materials defined in its 3D shape's file, then this color will not show. This color shows through only if no materials are defined in the 3D file. Customize Shape The button opens a window to customize how this object draws the meshes in its 3D shape. Other objects using the same shape will not be affected. The mesh drop down contains a list of meshes imported from the 3D shape file. Select a mesh from the drop down and check the Override box to customize the mesh. Hide Mesh - Toggles displaying the mesh in the 3D view. Use Object Color - Toggles whether the mesh should use the main object's color as its diffuse color. Diffuse Color - Use a particular diffuse color for the mesh. Use Object Texture - Toggles whether the mesh should use the main object's texture as its texture. 3D Texture - Use a particular texture for the mesh. Visuals/Animations These buttons allow you to save/load visual information for objects. You can also access an object's animations through the 3D views right click menu. Load/Save These buttons load/save all of the Appearance settings of an object, allowing you to save shape, texture, color, and animations in a .t file to load into other objects you want to look the same. Edit This button opens the Animation Creator, which allows you to create animations for FlexSim Objects. Flags Here you can check different boxes to show/hide different parts of the object, such as the contents of the object, the name, the ports, etc. These flags can also be toggled through the Edit Selected Objects view. Show Name - Toggles displaying the object's name in the 3D view. Show Ports - Toggles displaying port connections in the 3D view. Show 3D Shape - Toggles displaying the object's 3D shape. Show Contents - Toggles displaying the object's contents. Scale Contents - If checked, any objects within the content of this object will be scaled according to the size of this object. Protected - If checked, this object will not allow the user to move, size, rotate, or delete the object. No Select - If checked, this object will not be able to be clicked on the 3D view. To gain access to an object with the No Select flag checked, find it in the Tree Window. Position, Rotation, and Size Here you can set the position, rotation, and size of the object based on X, Y, and Z values. Icon Description Change the position of the object. Change the rotation of the object. Change the size of the object. Ports This area lets you edit the object's connections. Select either Input Ports, Central Ports, or Output Ports from the combobox on the left. The list on the right shows the appropriate connections. Once you have finished editing an object's connections, you will need to reset the model before running it again. Rank ^ - This button will move the selected connection up in the list. Rank v - This button will move the selected connection down in the list. Delete - This button will delete the selected connection. Properties - This button will open a new Properties window for the selected object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Fluid/Flow/Flow.html",
        "title": "The Flow Tab",
        "content": "About the Flow Tab The Flow Tab is only available on Fixed Resources. Use the Flow tab to control the pushing and pulling logic for 3D objects. The following sections will explain the properties that are available on the Flow tab. Output These properties determine how the object sends flow items downstream: Send To Port This picklist returns the output port number connected to the object that the flow item should be moved to. If 0 is returned, all outputs are opened and the flow item is moved to the first downstream object that is able to receive it. Use Transport If this box is checked, the object will request a transport to move the flow item downstream. If it is not checked, the flow item will be moved automatically. When you check the Use Transport box, an additional field is enabled where you define to whom the generated transport task sequence should be dispatched. The default will give the task sequence to the task executer/dispatcher connected to the object's first center port (current.centerObjects[1]), but you can custom-define this as needed. Priority This parameter is only available if Use Transport is checked. This value sets the priority of the task sequence that will be sent to the transporter or dispatcher. Transporters and dispatchers generally sort task sequences so that sequences with higher priorities will be performed first. Task sequences with the same priority will be performed in the order that they were received. Preempt This parameter is only available if Use Transport is checked. If set to one of the preempting values, the task sequences sent to the transporter will automatically preempt whatever the transporter is doing at the time. This may cause the transporter to perform tasks that would normally not be allowed, such as carrying more flow items than its capacity. Reevaluate Sendto on Downstream Availability If checked, the Send To Port will be re-evaluated every time a downstream object becomes available. It's important to note that this is only executed when the downstream object becomes available. It does not continuously evaluate just because a downstream object is already available. If you want to manually force a re-evaluation at some other time than when a downstream object becomes available, then you can do so by calling the openoutput() command on this object. Input These properties define how an object pulls flow items from upstream objects. Pull If this box is checked, the object will pull flow items from upstream objects. The upstream objects should open all their output ports to allow the object to pull the flow items it needs. Pull Strategy This parameter is only visible if Pull is checked. This picklist returns the input port number connected to the object that the next flow item is to be pulled from. This field is evaluated only on reset of the model and when the pulling object becomes ready to receive its next flow item. For a Processor with a capacity of 1, this means that the Pull Strategy field will only be evaluated once right after each flow item exits the Processor. Pull Requirement This parameter is only accessible if Pull is checked. This picklist needs to return either a true or a false (1 or 0). This field is evaluated when considering whether or not to pull in a particular flow item from the upstream object that was defined by the \"Pull from port\" field. This field will only be evaluated for flow items that are in the \"ready\" state (i.e.FRSTATE_READY) meaning the flow items are ready to leave the upstream object. Basically, the \"Pull Requirement\" field is evaluated for every \"ready\" flow item immediately after the \"Pull from port\" field gets evaluated. The field is evaluated again for each new flow item that later becomes ready in the upstream object. Reevaluate Pull Requirement on All Items When Each Upstream Item is Released This parameter is only visible if Pull is checked. If checked, the object will re-evaluate the pull requirement for all released flow items upstream every time a new flow item is released. This is much like the Reevaluates Sendto on Downstream Availability check box, in that you may need to explicitly call openinput() if you want to manually trigger the re-evaluation of the pull requirement."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/Container/Container.html",
        "title": "Container",
        "content": "Overview and Key Concepts The Container class represents a 'composite' or 'assembly' of multiple objects. You can use it for example to organize your model into floors, or to treat multiple objects as a single object for model-building purposes. Containers contain other objects. See Using Containers as a Model Management Tool for more information on how you can use containers. States The container does not implement any automatic state logic. Properties Below are the set of property names supported by containers. Property Type EditInPlace Boolean ConnectContents Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/VisualTool/VisualTool.html",
        "title": "Visual Tool",
        "content": "Overview and Key Concepts The Visual Tool class enables several 3D visualization capabilities. While you won't see this class directly in the library, several of the objects in the library's Visual group are instances of this class, including the Text , Billboard , Plane , Slide , and Shape objects. Visual tools can be 3D \"props\" in your model. They can also display text information, etc. See Using Visual Objects for more information on how you can use visual tools. States The visual tool does not implement any automatic state logic. Properties Below are the set of property names supported by visual tools. Property Type BillboardMode Options Divisions Number InObjectsInternal Array of strings Luminous Boolean OutObjectsInternal Array of strings PassInputsTo String PassOutputsTo String PolygonOffsetFactor Number PolygonOffsetUnits Number TextDisplay Code String TextSize Unit TextThickness Unit Texture String TextureXRepeat Number TextureYRepeat Number VisualDisplay Options"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/USDStage/USDStage.html",
        "title": "USD Stage",
        "content": "Overview and Key Concepts The USD Stage class enables advanced USD workflows, such as: Connecting to Nvidia Omniverse usd stages Viewing prim hierarchy and properties Modifications of usd prim data Bi-directional collaborative editing of Nvidia Omniverse usd stages Adding FlexSim objects and data to imported stages Streaming simulation data updates for external rendering and video recording of animated simulation runs Live Connection When using the USD Stage object, a live connection is made to the specified usd stage. This connection is more than simply a one-time reading of the file. While connected, you can read and write changes to the file. The file must be available and connected for the USD Stage object to work. The 3D representation of the usd stage is not stored with other imported media shapes in FlexSim. It is dynamically generated based on the information within the connected usd stage. Limitations The USD format is large and extensible. Similarly, FlexSim's 3D graphics engine is also dynamic and flexible. As such, certain features of FlexSim and USD may not translate perfectly during these workflows. Additional development may be required to support particular features of FlexSim and USD in certain workflows. Connecting to USD Stages In the path field of the Stage Panel , browse to a usd file on disk or enter a destination path on an Omniverse Nucleus server. e.g., omniverse://127.0.0.1/Users/UserName/Folder/FileName.usd Viewing Prim Hierarchy and Properties After checking the Select Prims box on the Stage Panel , individual prims can be selected in the 3D view. Clicking on a prim in the 3D view will show the Prim Panel for that prim. Press the Prim Path tree button to open a tree view focused on the selected prim. This view enables you to see the usd stage prim hierarchy and the properties of each prim. Modifying Prim Data The Prim Panel enables modification of prim data. To save modifications to prim data, press the Save button on the Stage Panel . Press the Reload button to load any modifications to the stage made by other applications connected concurrently. Bi-directional Collaborative Editing When connected to a usd stage on an Omniverse Nucleus server, the Omniverse Live Panel can be used to create or join a live session with other users. While in a live session, changes you make to the stage will be sent to the other users, and changes made by other users will be received by FlexSim. Adding FlexSim Objects The USD Stage object can be used as a container for other FlexSim objects. When a stage containing FlexSim objects is saved, those objects will be exported to usd format. When loading a stage with exported FlexSim objects, the prims representing those objects will be marked as invisible for the associated FlexSim objects within the USD Stage object. Streaming Simulation Updates When connected to a usd stage on an Omniverse Nucleus server, the Omniverse Live Panel can be used to create or join a live session with other users. You can run the simulation model while in a live session. While the model is running, FlexSim objects and flowitems in the USD Stage object will stream transform updates to the other users in the session. In this way, you can record a running model from another application that also has live connectivity with Omniverse Nucleus usd stages. Using USD's layering and composition features, you may be able to modify the stage to render using more photorealistic materials and shaders in another application rather than just using FlexSim's default preview surface materials. Performance and Stability The simulation streaming workflow is still being developed, tested, and improved. Additional functionality, performance improvements, and documentation for this workflow may be added in future versions. States The USD Stage does not implement any automatic state logic. Properties Below are the set of property names supported by USD Stages. Property Type DrawPlane Boolean DrawAxisLines Boolean PolygonOffsetFactor Number PolygonOffsetUnits Number SelectPrims Boolean"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/StateList/StateList.html",
        "title": "State List",
        "content": "The following content is a list of state numbers and their respective macros. Whenever you write code that has to do with setting the state of objects, like using the Object.stop() command or the utilize task, you can substitute these macros in for the number. Refer to the reference topics for each of the 3D objects for more information about what each state means to each object. 1 - STATE_IDLE 2 - STATE_PROCESSING 3 - STATE_BUSY 4 - STATE_BLOCKED 5 - STATE_GENERATING 6 - STATE_EMPTY 7 - STATE_COLLECTING 8 - STATE_RELEASING 9 - STATE_WAITING_FOR_OPERATOR 10 - STATE_WAITING_FOR_TRANSPORTER 11 - STATE_BREAKDOWN 12 - STATE_SCHEDULED_DOWN 13 - STATE_CONVEYING 14 - STATE_TRAVEL_EMPTY 15 - STATE_TRAVEL_LOADED 16 - STATE_OFFSET_TRAVEL_EMPTY 17 - STATE_OFFSET_TRAVEL_LOADED 18 - STATE_LOADING 19 - STATE_UNLOADING 20 - STATE_DOWN 21 - STATE_SETUP 22 - STATE_UTILIZE 23 - STATE_FULL 24 - STATE_NOT_EMPTY 25 - STATE_FILLING 26 - STATE_STARVED 27 - STATE_MIXING 28 - STATE_FLOWING 29 - STATE_ALLOCATED_IDLE 30 - STATE_OFF_SHIFT 31 - STATE_CHANGE_OVER 32 - STATE_REPAIR 33 - STATE_MAINTENANCE 34 - STATE_LUNCH 35 - STATE_ON_BREAK 36 - STATE_SUSPEND 37 - STATE_AVAILABLE 38 - STATE_PREPROCESSING 39 - STATE_POSTPROCESSING 40 - STATE_INSPECTING 41 - STATE_OPERATING 42 - STATE_STANDBY 43 - STATE_PURGING 44 - STATE_CLEANING 45 - STATE_ACCELERATING 46 - STATE_MAXSPEED 47 - STATE_DECELERATING 48 - STATE_STOPPED 49 - STATE_WAITING 50 - STATE_ACCUMULATING"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/3DObjects/GeneralPropertyList/GeneralPropertyList.html",
        "title": "General Property List",
        "content": "Overview Each 3D object in FlexSim supports a set of properties that allow you to configure the behavior of that object. These properties, uniquely identified by their name, can be used in object property tables , for template inheritance , as well as by using the Object.setProperty() and Object.getProperty() methods. While different classes of objects support their own class-specific set of properties, this topic lists the set of valid general purpose FlexSim object property names, and their meanings. For information on setting individual object properties through FlexSim's interface, see Using Properties . General Property Type Explanation AllGroups Array of strings (read only) The set of groups of which the object is a member, either indirectly (through subgroups) or directly. See also Property Tables: AllGroups . CenterObjects Array of strings The array of paths, relative to the owning object, to the objects that are connected to the object's center ports. Classes Array of strings The set of class names of which the object is an instance. See also Property Tables: Classes . Class String The name of the class of which the object is an instance. Container Node The reference to the object's container. Groups Array of strings The set of groups of which the object is a direct member. This does not include the groups that the object is an indirect member of (through groups with subgroups). InObjects Array of strings The array of paths, relative to the owning object, to the objects that are connected to the object's input ports. IsSelected Boolean 1 if the object is selected (red-framed), 0 otherwise. See also Property Tables: IsSelected . Name String The name of the object. See also Property Tables: Name . Object Node The reference to the object. OutObjects Array of strings The array of paths, relative to the owning object, to the objects that are connected to the object's output ports. Shape String The path of the object's shape file. Template Node A reference to the object's template . TemplateInstances Array of nodes An array of references to the object's template instances. . TemplateOverrides Array of strings An array of property names that the template instance overrides. . Texture String The path of the object's 3D texture file. Visual Color Array (4) The red/green/blue/alpha color of the object. Each element is in the range [0, 1]. See also Property Tables: Color . Color.Red Number The red component of the object's color, in the range [0, 1]. Color.Green Number The green component of the object's color, in the range [0, 1]. Color.Blue Number The blue component of the object's color, in the range [0, 1]. Color.Alpha Number The alpha component of the object's color, in the range [0, 1]. Location Array (3) The x/y/z location of the object. Location.X Number The x location of the object. Location.Y Number The y location of the object. Location.Z Number The z location of the object. NoSelect Boolean 1 if the object should not be clickable in 3D views, 0 otherwise. Protected Boolean 1 if the object should be \"protected\" from deletion or manipulation, 0 otherwise. Rotation Array (3) The x/y/z rotation of the object. Rotation.X Number The x rotation of the object. Rotation.Y Number The y rotation of the object. Rotation.Z Number The z rotation of the object. ShowContents Boolean 1 if the object's contents are to be shown in 3D views, 0 otherwise. ShowName Boolean 1 if the object's name is to be shown in 3D views, 0 otherwise. ShowPorts Boolean 1 if the object's ports are to be shown in 3D views, 0 otherwise. ShowShape Boolean 1 if the object's shape is to be shown in 3D views, 0 otherwise. Size Array (3) The x/y/z size of the object. Size.X Number The x size of the object. Size.Y Number The y size of the object. Size.Z Number The z size of the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TokenCreation/InterArrivalSource/InterArrivalSource.html",
        "title": "Inter-Arrival Source",
        "content": "Overview and Key Concepts The Inter-Arrival Source activity creates new tokens according to a specific interval of time. Similar to the Inter-Arrival Time arrival style of FlexSim's standard Source, you can use a fixed number to set an exact interval of time between token creations or you can use a statistical distribution to randomly calculate the time between arrivals. Once a token is created it will be released to the next activity. Connectors The Inter-Arrival Source activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Inter-Arrival Source activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Enabled When unchecked, this activity will not schedule events or create any tokens. Arrival at time 0 If checked, a token will be created at time 0 when you start the model run. Inter-Arrival Time This defines the interval of model time between token creations. Token Name For debugging purposes, you can assign a name to the tokens created by this source. For example, if you used the name Token1 in this box, all of the tokens created by this source would be assigned this name. Token names are not required so the box is left empty by default."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TokenCreation/ScheduleSource/ScheduleSource.html",
        "title": "Schedule Source",
        "content": "Overview and Key Concepts The Schedule Source activity creates new tokens as specified in its Arrivals table. This table defines the time (in model units) that tokens should be created, the name that will be assigned to the new tokens and the number of tokens to create. These settings can either have a fixed value or the values can be calculated dynamically. Also, you can either enter the data into this table manually or import a table from an Excel spreadsheet using the Excel Interface. Overview of Arrival Schedules The following image shows an example of a possible arrival schedule on a Schedule Source activity: The Offset Time can be used to make a certain amount of time elapse before the Schedule Source activity will begin the arrival schedule. In the example used in the preceding image, the Offset Time is set to 100 , which means that schedule won't begin until the simulation clock reaches 100 during a simulation run. For now, skip over the Repeat Schedule checkbox, which will be discussed in a moment. Each Schedule Source activity has an Arrivals table, which controls the schedule for creating new tokens. Each row in the table represents a point in time that one or more new tokens will be created. The values for the cells under each column can be changed to customize the arrival schedule: Time - The time when one or more tokens will be created, relative to the simulation model clock and the offset time. In this example, if the offset time is set to 0, the first token will be created when the model clock reaches 5, the second set of tokens will be created when the clock reads 10, and so forth. However, since the offset time is currently set to 100 in this example, the first token will actually be created when the clock reads 105, the second set of tokens will be created when the clock reads 110, and so forth. Name - For debugging purposes, you can assign a name to the tokens created at this point in the schedule. In this example, the first token that is created will be named Token1 . Quantity - The number of tokens that will be created at this point in the schedule. In this example, only one token will be created when the model clock reaches 105, then five tokens will be created when the model clock reaches 110, and so forth. Labels - Additional columns can be added to the arrival table that define labels that will be added to the created tokens. The name of the label will be the name of the column. Labels can be numbers, strings, arrays, pointers, bundles or tracked variables. With that in mind, let's return to the Repeat Schedule checkbox. If the schedule is set to repeat, it will loop indefinitely. The offset time will NOT be repeated. In the example illustrated in the preceding image, the first token will be created at 105 (because of the offset of 100). Then five tokens will be created at 110 and two tokens at time 120. Then the schedule will repeat itself. One more token will be created at 125, five tokens at 130, and two tokens at time 140, and so forth. This process will last indefinitely until the simulation clock is stopped. If you want to create a gap between repeats, you can add an arrival at the end of the list with a quantity set to 0. This will cause no tokens to be created at that time. In this example, adding an arrival time of 40 with a quantity 0 will make the arrival times be: 105, 110 and 120 then after the first repeat the arrivals will be 145, 150 and 160. Dynamic Arrival Values In the above example, all of the arrival times, token names and quantities were defined as static values. However, each of the values in the arrival table may also be defined dynamically using picklists or code. This gives a greater amount of control on how an arrival schedule is defined. Keep in mind when calculating the time of an arrival, the value should be a number greater than the previous arrival where arrivalTime = time - previousTime + modelTime; . Entering Dynamic Time If the Time value is defined dynamically, it's important to ensure that the times returned increase for each arrival. Times that are less than or equal to previous arrival time will create items in 0 time. Using a Schedule Source in Instanced Flows There may be cases where you are dynamically creating instances of process flow objects during a model run. The Create Person activity creates a new person from the flowitem bin and allows you to define an Instanced Process Flow to attach to the created person. When this happens, any schedule source activities in the process flow will begin their schedule as if from time 0. This means that all times are relative to the creation time of the instance. For example, if a schedule source activity has a time of 50 for its first entry and a new instance of the object is created at time 200, then the first token will be created at time 250. If you require a set schedule that defines an absolute time, use the Date Time Source . Connectors The Schedule Source activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Schedule Source activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Enabled When unchecked, this activity will not schedule events or create any tokens. Offset Time Can be used to make a certain amount of time elapse before the Schedule Source activity will begin the arrival schedule. For example, if the first entry in the arrivals table has a time of 20, and the offset time is 10, the first token will be created at a simulation time of 30. Repeat Schedule If the Repeat Schedule box is checked, the schedule will repeat indefinitely during the simulation run. Note that the Offset Time will not be repeated each cycle, but will only be used in calculating the start of the schedule. For example, if the last entry in the Arrivals table is at time 50 and the offset time is 10, the first cycle will end at simulation time 60. The second cycle will end at simulation time 110. Arrivals This is where the arrival schedule is defined. (See Overview of Arrival Schedules for more information.) Rows can be added by clicking the button, deleted by clicking the , and reordered by clicking the and buttons. You can also set the table to the desired size through the edit fields. The table can also be added to the Excel Importer allowing you to import data from Excel. There are three columns in the table: Time - The time when one or more tokens will be created, relative to the simulation model clock and the offset time. (See Overview of Arrival Schedules for more information.) Name - For debugging purposes, you can assign a name to the tokens created at this point in the schedule. Quantity - The number of tokens that will be created at this point in the schedule. Labels - Label columns can be added or removed by changing the number in the Labels field. Each token will be given labels with names corresponding to the column headers and values corresponding to the value of the table cell. You may define static values through the table or dynamic values using the picklist field directly below the table. See Dynamic Arrival Values for more information. Select an arrival field to edit This field will change based upon which cell is currently selected in the Arrivals table. You can use this box and the pull-down arrow next to it to enter dynamic values for the Time, Name, Quantity or Label values in the table. You can select a picklist option from the pull-down menu or you can enter in custom code if you are comfortable with FlexScript. Assign Labels to Created Tokens Allows you to add labels to the created tokens based upon the arrival entry. For more information on assigning labels, see the Assign Labels activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TokenCreation/DateTimeSource/DateTimeSource.html",
        "title": "Date Time Source",
        "content": "Overview and Key Concepts The Date Time Source activity creates new tokens as specified in its Arrivals table. This table defines when and how many tokens should be created either through a date based interface, or a repeated table (daily or weekly schedules). The table also defines a name that will be assigned to the new tokens and label values, if desired. These settings can either have a fixed value or the values can be calculated dynamically. Also, you can either enter the data into this table manually or import a table from an Excel spreadsheet using the Excel Interface. Overview of Arrival Schedules The following image shows an example of a possible arrival schedule on a Date Time Source activity: This table has 20 tokens being created between the 8AM and 9AM hour, a random distribution of tokens being created between the 9AM and 10AM hour and 15 tokens being created between the 10AM and 11AM hour. Based upon the Arrival Spacing and Offset / Variability values you can define whether tokens are created at the start time, evenly spaced between the start and end time or randomly spaced between the start and end time. You can also specify the Time Mode of the schedule. This defines whether the start and end times in the arrival table are based upon your model start time, for instance 08:00 AM in the morning, or based off of time 0. If based off time 0, the times become an offset from 0. Each Date Time Source activity has an Arrivals table, which controls the schedule for creating new tokens. Each row in the table defines when tokens will be created. The values for the cells under each column can be changed to customize the arrival schedule: Start - The start column defines the start of the time interval when tokens will be created. See Arrival Spacing for defining when during the time interval the tokens will be created. End - The end column defines the end time of the time interval when tokens will be created. Name - For debugging purposes, you can assign a name to the tokens created at this point in the schedule. In this example, the first token that is created will be named Token 1 . Quantity - The number of tokens that will be created during the arrival's time interval. Labels - Additional columns can be added to the arrival table that define labels that will be added to the created tokens. The name of the label will be the name of the column. Labels can be numbers, strings, arrays, pointers, bundles or tracked variables. Time Mode The Date Time Source activity offers two Time Modes: From Time 0 - In this mode, the start and end time columns are offsets from time 0. For example, if the start field is set to 01:00, then the arrival start time will be 1 hour after the model starts. Use Model Start Date/Time - If this mode is selected, the model will jump into the table based upon the model start date and time. For example, if the model start time is Monday at 08:00 AM, then the first arrival will be 08:00 or 00:08:00. Or if the model start time is Tuesday at midnight, the first arrival will be 00:00 or 01:00:00. A note on times Notice that 00:00 is defined as midnight but does not specify a day of the week. If the schedule is set to repeat daily then the 00:00 arrival will be hit each day at midnight. If the schedule is not set to repeat or repeats weekly, then the day value of the times matters with regards to the model start date/time. Repeating Schedule Arrival schedules can be set to not repeat, repeat daily, weekly, hourly or a custom repeat interval. If a repeat interval is selected then you can define the Cycle Count meaning the schedule will continue to repeat throughout the model run. Defining the number of cycles for the schedule will determine how many times the schedule will run. For example, a cycle count of 1 will cause the schedule to run once. You can tie a dashboard Edit box to the Cycle Count box by creating a dashboard edit box and using the button next to the Link box in the quick properties to link to the cycle count. Dynamic Arrival Values With the exception of the start and end times and duration, the values in the arrival table may also be defined dynamically using picklists or code. This gives a greater amount of control on how an arrival schedule is defined. Each arrival table has a universal edit below the table that will change based upon the current table cell that is selected. Use the sampler or drop down button of the universal edit to define the value of the table cell. Using a Date Time Source in Instanced Flows There may be cases where you are dynamically creating instances of process flow objects during a model run. The Create Person activity creates a new person from the flowitem bin and allows you to define an Instanced Process Flow to attach to the created person. When this happens, any date time source activities in the process flow will begin their schedule based upon the Mode and the Time Mode . If the Mode is set to Date Based or the Time Mode is set to Use Model Start Date/Time , the schedule will begin based upon the current model time. This means that times are absolute, without regard to the creation time of the instance. For example, if a date time source activity has an arrival time of 10:00 for its first entry and a new instance of the object is created at time 09:00, then the first token will be created in 1 hour, at 10:00. If the Time Mode is set to From Time 0 , then the arrival times become relative to the creation time of the instance. For example, if a date time source activity has its first arrival at time 02:00 and a new instance of the object is created at time 01:00, then the first token will be created at time 03:00. The Schedule Source can also be used to create tokens using relative times. Connectors The Date Time Source activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Date Time Source activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Edit Arrivals Opens the date time source Arrivals Window . Enabled When unchecked, this activity will not schedule events or create any tokens. Assign Labels to Created Tokens Allows you to add labels to the created tokens. Each label entry is evaluated for every token that is created. For more information on assigning labels, see the Assign Labels activity. Arrivals Window The arrivals window is where the date time source's arrival schedule is defined. This window's properties will be explained in the following sections. Generate Table The generate table allows you to quickly generate a daily or weekly repeated table. Click the Generate Table button to display the following popup: Type - Choose a Daily or Weekly schedule. Division Length - Choose the division length of each arrival. If Daily was selected for the Type and 1 Hour was selected for Division Length then a schedule with 24 arrivals will be generated, one for each hour of the day. Generate - Generates a new arrival schedule based upon the type and division length. Note: Generating a table will remove any previously created arrival schedule. Mode The date time source offers two arrival modes: Repeated - An arrival schedule that can be based on model time 0 or the model start date/time. The schedule can be run once or repeated at any time interval. Date Based - An arrival schedule that is based upon the model start date/time. The calendar graph lets you graphically add arrivals for any days of the year. Individual arrivals can be repeated, but the entire schedule cannot. Excel Importer Click the to add the currently visible table to the Excel Interface. Import Data from Excel When you add the arrival schedule to the Excel interface, the data imported from Excel needs to match the table's data structure. This means if your table has a Start and End time that is defined as HH:MM, then the data in your Excel file should be text data of the same format. Rows Displays the number of rows in the arrival schedule. Add or remove rows at the end of the schedule by entering a new number in the box or using the up and down arrows. Labels Labels can be added to the created tokens by clicking the or typing a number directly into the box. Use the button to remove the last label. Weekly Repeat If your arrival schedule is set to be a weekly schedule, labels will not be visible in the table. To access the label columns switch to the Advanced view. Table / Advanced The arrival schedule can be viewed using two different methods: Table - This view displays the start and end times of each arrival in a more readable format (days, hours minutes, seconds). The default format is HH::MM. If the table is set to be a weekly schedule, the table will display the week's arrivals, where the table cells are the arrival quantities. Advanced - This view displays the start time and the duration of the arrival using model time units. Regardless of which table you view, the data is the same, meaning, if you edit the times, token name or label values in one table, that value will also be displayed in the other table. Arrival Table By default there are four columns in the arrival table. Any number of labels can also be added to the schedule. Start (HH::MM) - The start of the time interval when tokens will be created. This column's name will change based upon the arrival schedule. By default it displays HH:MM which specifies that the data in the column is of the format Hour:Minute. If the schedule spans multiple days the column will display DD:HH:MM (Day:Hour:Minute). If the start times require further precision to display seconds, you may see DD:HH:MM:SS (Day:Hour:Minute:Second) or HH:MM:SS (Hour:Minute:Second). Times will always be displayed in these time units regardless of the time units of the model. End (HH:MM) - The end of the time interval when tokens will be created. See Start above for information on how this column name changes. Quantity - The number of tokens that will be created at this point in the schedule. This can be a number, statistical distribution or code. For example, duniform(1, 10) or Table(\"MyTable\")[1][1] . Name - For debugging purposes, you can assign a name to the tokens created at this point in the schedule. Labels - Label columns can be added or removed by changing the number in the Labels field. Each token will be given labels with names corresponding to the column headers and values corresponding to the value of the table cell. You may define static values through the table or dynamic values using the picklist field directly below the table. See Dynamic Arrival Values for more information. Select an arrival field to edit This field will change based upon which cell is currently selected in the Arrivals table. You can use this box and the pull-down arrow next to it to enter dynamic values for the Name, Quantity or Label values in the table. You can select a picklist option from the pull-down menu or you can enter in custom code if you are comfortable with FlexScript. Arrival Spacing The arrival spacing defines when tokens will be created for each arrival. There are three arrival spacing modes: At scheduled time - Tokens will be created at the arrival's start time. In this mode the end time (or duration) of the arrival is not used. Evenly spaced - Tokens will be created at a set time interval starting at the start time. The first token will be created at the start time. The time interval is equal to (duration / quantity) . Randomly spaced - Tokens will be created at a random times between the start and end time using a uniform distribution. To use a different distribution, set the Arrival Spacing to At scheduled time and select the desired distribution from the Offset / Variability picklist. Offset / Variability The offset / variability will modify the creation time of each token. The value returned by this picklist can be negative or positive. This means you could have tokens created before the arrival's start time or after the arrival's end time. This can be especially helpful when dealing with scheduled appointments. This picklist will be fired once for each token in each arrival. Stream This option will be enabled only when the Arrival Spacing is set to 'Randomly spaced'. It is used to pass the stream parameter for uniform distribution used in random spacing. It accepts both numbers and custom code as input. The default value is set to getstream(activity) . Date Based If the Mode is set to Date Based , the Arrivals Window will change to look like this: Graphical / Advanced - Switch between the graphical view and the table view. The advanced view will display all of the arrivals with start time and duration values in model time units. Snap To - Specifies the time to snap arrivals to in the view. By default there is no snap to. You can specify the preset 10 min, 15 min, 30 min and 1 hour, or set your own custom snap to time. The custom time is in model time units. Calendar Start - Specifies the start date and time of the arrival schedule. Arrivals that occur before the start time will not create tokens, however, the data will remain. This allows you to temporarily turn off parts of your arrival schedule if needed. ... - Opens the model settings window. Color - Select a label to color the events by. The color of the event will be equal to Color.byNumber(labelValue) or color(labelValue) . Start - The start date and time of the selected arrival. End - The end date and time of the selected arrival. Duration - The duration of the selected arrival. Of form DD:HH:MM:SS. Repeating Event - If checked, the arrival will become a repeating event. Here you can define how often the repeat occurs and either how many times it repeats or until which date and time it repeats to. ... - Displays the properties of the repeating event. - If the selected arrival is part of a repeating event but is not the parent event, this will center the parent event in the view and select it. Arrival Properties - The arrival properties table will display the quantity, name and label columns of the arrival. Select an arrival field to edit - This field will change based upon which cell is currently selected in the Arrival Properties table. You can use this box and the pull-down arrow next to it to enter dynamic values for the Name, Quantity or Label values in the table. You can select a picklist option from the pull-down menu or you can enter in custom code if you are comfortable with FlexScript. Using the Graphical Table: Creating entries - Click and drag anywhere in the white space to create a new down time. Snaps to the Snap To time. Modifying entries - Click and drag in the middle of an entry to change the start time of the entry. Drag left or right to change the time along the week, or drag up or down to change weeks. Click and drag at the left or right edge of an entry to modify the duration. Snaps to the Snap To time. Start and end times as well as duration can also be modified through the property below the editor view. Selecting weeks - Click and drag along the left side of the view under the Date column to select a week of entries. Any entries with their start time in the selected week will be selected. Zoom - Hold the Ctrl key while using the scroll wheel to zoom in or out on the mouse location. Scroll - Use the scroll wheel to scroll up and down in the view. Horizontal Scroll - Hold the Shift key while using the scroll wheel to scroll left and right. Bottom Scrool Bar - Click and drag along the bottom scroll bar to zoom in/out and scroll left and right. Drag to Copy - Hold the Ctrl key and click and drag an entry to create a copy. Ctrl + C - Copy selected entries. Ctrl + X - Cut selected entries. Ctrl + V - Paste selected entries. If a single entry was copied, the pasted entry will be pasted below the cursor position. If an entire week was selected, the entries are pasted based upon the week that the cursor is positioned over, keeping start times relative to the start of the week. Arrow Keys - Select an entry or a week of entries and use the up, down, left and right arrow keys to adjust the entry start times based upon the Snap To time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TokenCreation/EventTriggeredSource/EventTriggeredSource.html",
        "title": "Event-Triggered Source",
        "content": "Overview and Key Concepts The Event-Triggered Source activity creates tokens in response to an event during a simulation run. When that event occurs, it will create a token. If the event has data associated with it like a flow item or port number, you have the option to save that data off as a label on the created token. If the data is an object like a flow item, a reference to that flow item will be saved on the token label for later use. You can also assign a name to the created token. To get a deeper understanding of how the Event-Triggered Source activity works, you might want to consider reading these topics first: Key Concepts About Events As a more advanced feature, the Event-Triggered Source also has the ability to override the return value of the event it is listening to. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to an event is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on an activity or object and selecting an event, or the reference may be set through the quick properties. Connectors The Event-Triggered Source activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Event-Triggered Source activity: Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Enabled When unchecked, this activity will not listen to events or create any tokens. Object Use the Object box to select the object that the Source activity will listen to. You can listen to events on: An object in the model. An activity in the Process Flow. The current instance object (See Process Flow Instances for more information.) A group of objects. In this case, the activity will listen to the defined event on all members of the group. Use the Sampler button to select the object and choose which event to listen to. When you hover over an object with valid events, a list of those events will be shown. Selecting an event this way will change both the Object box and the Event box and will cause the interface to change based upon the event type. Event Use the Event box to select the event that the Wait for Event activity will listen to. The Event box is connected to the object you selected in the Object box. When you use the Sampler button to select an object in the Object box, a menu will appear that lists all the different types of events that are available for that object. (This menu is created dynamically based on all the possible events related to that object.) The event that you select from this menu will automatically be listed in the Event box. You can change the event type by clicking the drop down arrow next to the Event box and selecting an event. Label Matching/Assignment and Change Rule The Label Matching/Assignment or Change Rule properties will appear after you've selected an object and event to listen to. See Label Matching/Assignment for more information about these sets of properties. Add Events You can listen to more than one event on an Event-Triggered Source. To add an event in addition to the original event, press the Add Event button . Additional events will have a Delete button button if you need to remove them. Assign Event Object To Assigns a reference to the event-firing object to the specified label or node. This is useful if you are listening to multiple objects (perhaps from a Group) and need to know which object fired the event. This box is not required and can be left empty. Token Name Use the Token Name box to determine the name that the newly created token will be given. Tokens are not required to have a name so this box is empty by default. You may give the token a static name like Token or it may be dynamic by using a picklist or through FlexScript. These names do not change the behavior of your Process Flow but can be useful for debugging purposes."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/AssignLabels/AssignLabels.html",
        "title": "Assign Labels",
        "content": "Overview and Key Concepts The Assign Labels activity creates or modifies labels on various objects. Labels can be used to store important data about various objects. You can assign labels to any object that owns labels which includes, but is not limited to: An incoming (entering) token A parent token Flow items 3D objects such as an Operator or Processor A process flow To define the labels to create/modify click the button under the Labels section. Labels may be numbers, strings, treenodes (objects) or arrays (intarray, doublearray, stringarray, treenodearray). If a label is set that does not currently exist on the Assign To object, the label will created. If the label already exists, then the value will be overwritten with the new value. Setting treenode and Array labels When setting a label to a treenode or an Array of treenodes (for example a Processor or Operator in the model), the value stored on the label is just a reference to the treenode or treenodes. The treenode is not physically being stored on the label. Non-Label Assignment The Assign Labels activity can also be used to add data to any node in the form of subnodes. If the Assign To is a label node or some other node in the model that is not an object with labels, then sub nodes will be added for each label entry. To reference a label node rather than the value, use the labels property: token.labels[\"labelName\"] This can be useful when storing large amounts of data that is not used to determine model logic. This functionality can be used to create a table on a token's label. To explore the table, right click on the label in Quick Properties and select Explore as Table . Tracked Variables as Labels It is often useful to be able to track the history of a value as it changes throughout the model run. Or perhaps you want to wait until a value gets above or below a certain point. One way of doing this is by creating and setting a global tracked variable . Alternatively, if you select the pick option Add Tracked Variable from the Value boxes, a tracked variable will be created on the assigned label. This label will have the apperance of a label with numeric data but you have both the ability to store a history of all of the values as well as listen to whenever that value changes through a Wait For Event activity. Once a tracked variable is added to a label, the value can be updated using standard picklist options or the setlabel() command. Connectors The Assign Labels activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Assign Labels activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Assign To The Assign To box determines which token or object will be assigned a label. By default this activity assigns labels to the entering token. Labels When you click the Add button , a new set of properties will appear: Name - The name of the label that will be created or modified on the Assign To object. Value - The new value of the label. You can enter a static number or string into this box or choose one of the picklist options from the drop down for a more dynamic value. Use the eye dropper to get references to objects, object labels or other data. Values entered here may be a number, string, treenode (object), array, or process flow variable. The value could also be defined using code."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/Delay/Delay.html",
        "title": "Delay",
        "content": "Overview and Key Concepts The Delay activity will hold the token for a certain length of time. You can use a fixed time or you can create the delay time dynamically using a label value on a token, a statistical distribution, etc. If you are planning to use the Delay activity as a breathe , use the Breathe Activity instead. Using Delays as Breathes A breathe , which is a delay time of 0, is similar to sending a delayed message in 0 time. Doing so will create an event in 0 time before releasing the token. Breathes can allow you to break up certain operations to ensure that things are happening in an appropriate order. This is like taking a breath before moving on. It may be difficult to know when this is needed, but if something in your model is not behaving properly, adding a breathe can potentially solve issues. Connectors The Delay activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Delay activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Delay Time The Delay Time defines the amount of time that the token will be delayed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/Breathe/Breathe.html",
        "title": "Breathe",
        "content": "Overview and Key Concepts The Breathe activity will hold the token for a delay time of 0, which is similar to sending a delayed message in 0 time. Doing so will create an event in 0 time before releasing the token. Breathes can allow you to break up certain operations to ensure that things are happening in an appropriate order. This is like taking a breath before moving on. It may be difficult to know when this is needed, but if something in your model is not behaving properly, adding a breathe can potentially solve issues. Connectors The Breathe activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Breathe activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/CustomCode/CustomCode.html",
        "title": "Custom Code",
        "content": "Overview and Key Concepts You can use the Custom Code activity to create custom behavior in the Process Flow module. You can select pre-defined picklist options or write your own code in FlexScript. When a token enters the Custom Code activity, it will evaluate the user-defined code and then immediately be released to the next activity without any model time passing. Connectors The Custom Code activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows the properties that are available for the Custom Code activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Custom Code Use the Custom Code box to choose the custom code that should be executed when a token enters this activity. You can use pre-defined code templates (picklists) or write your own custom code if you are comfortable with Flexscript. To use a picklist, click the Add button next to the Custom Code box to open a menu listing different picklists that are currently available for this object. Try clicking on this menu and exploring some of the different options to see what's available. Alternatively, if you are comfortable with Flexscript and want to enter in your own custom code, click the Code Editor button next to the Custom Code box to open the code editor. In the code editor, you would enter in the code you want the activity to execute every time a new token enters the activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/Decide/Decide.html",
        "title": "Decide",
        "content": "Overview and Key Concepts The Decide activity will send a token to one of two or more possible activities based on conditions that you define. In other words, the Decide activity can determine the next activity that a token should be diverted to. The Decide activity can use many different methods to determine which activity the token should go to next, such as: Sending the tokens to the next activities in round robin order Assigning the token to the activity that has the longest or shortest queue (based on the number of tokens that are waiting at that activity) Diverting a certain percentage of tokens to one activity while another percentage goes to a different activity Sending a token to various activities or outcomes based on a value in a label on the token Assigning tokens to one of the next activities at random You can also use the Decide activity to create looping functionality. After evaluating a condition or a label on a token, the Decide could send the token back to the top of the loop or cause a token to exit a loop. Connectors The Decide activity allows any number of connectors out. The Decide does not allow other activities to be snapped to it as doing so would remove all connectors from the Decide. See Adding and Connecting Activities for more information You will need to understand how connectors work in order to use a Decide activity. The following list explains a few important concepts to keep in mind: Each outgoing connector has a number (also sometimes called a rank ) based on the order in which you created them. When you create an outgoing connector from the Decide activity to another activity, this connector will automatically be assigned a number (rank). For example, the first outgoing connector you create will be assigned a rank of 1, the second will have a rank of 2, and so forth. You may have noticed that this is similar to how port connections work between objects in the 3D simulation model. You can re-rank outgoing connectors. You can use the properties in the Decide activity or on the connector to change the ranks of the outgoing connectors. You can also disconnect the connector from the Decide activity and then reconnect it to move that connector to the last rank. Connectors can have names. You can also assign a name to a connector for a more visual reference if needed.(Double-click a connector to create a name). If the Send Token To property returns a string (text), the Decide will search it's connectors for a connector with a name that matches the given string. Sending to a connector that doesn't exist. If the Send Token To property returns an invalid rank or a connector name that doesn't exist, the token will remain in the Decide activity and not be released. This can also be done by returning a negative number in the Send Token To property. Connectors are not required, but encouraged. Though visually it is easier to follow the flow of a token when connectors are leaving a Decide activity, they are not required. The Send Token To property can be given an activity to send to without being connected to it. This could be done by using the getactivity() command or storing a reference to an activity on a token label. Properties The following image shows the properties for the Decide activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Send Token To You will use the Send Token To field to determine the logic that the Decide activity will use to send tokens to the next activities. When you click the arrow next to the Send Token To field, it will display a menu of many possible options, such as: Conditional Decide - This option will test the token to see if it passes a simple test or not. If it passes, the token will be sent out one connector. If it fails, it will go out another connector. For example, you could test to see if the token has a particular value in one of its labels or not. If the label has that value, it passes. By Percentage - Sends a certain percentage of the tokens out one connector, a certain percentageout another connector, etc. Connector/Activity by Case - Sends tokens to a connector name/number or an activity based on certain variables, such as the value of a label. Random Connector - Sends the token to any of the outgoing connectors at random. Shortest/Longest Queue - Sends the token to the activity that has the longest or shortest queue (based on the number of tokens that are waiting at that activity) Round Robin - Each token will be sent to one of the outgoing connectors sequentially. For example, if there are 3 outgoing connectors, the first token will go to connector 1, the second to connector 2, and the third to connector 3. This will then repeat sending the next token out connector 1 and so forth. Valid Return Values Whatever logic you decide to use, keep in mind that the logic needs to have a valid return value. The return value tells the Decide activity where to send the token. The return value can only be valid if it is the index number for a connector, the name of a connector, or a reference to an activity. Returning a value of 0 is the same as returning a 1 and will go out the first connector. Returning any negative value will cause the token to not be released and remain in the Decide activity. Connectors Out You can use the Connectors Out properties to add, edit, or delete the Decide activity's outgoing connectors. The Connectors Out menu displays all the outgoing connectors that currently exist for the Decide activity. The connector will be listed by its connector rank and name. (If you haven't assigned a name to the connector, the menu will only display its connector rank.) If the Connectors Out menu is blank, that means that you have not created any outgoing connectors yet. Click the Add button to create a new connector to an activity. The Delete button will remove the connector that is currently selected in the Connectors Out menu. After selecting a connector from the Connectors Out menu, you can edit its following properties: Name - Use this box to give a name to the currently-selected connector. Connectors are not required to have names, but can help make your Process Flow chart more readable and allow you to reference connectors by name. To - This box displays the name of the activity that the currently-selected connector is connected to. NOTE: By default, identical activity types have the same name. For example, all Delay activities are called Delay by default. If you need to distinguish between the different activities, you might want to rename them for clarity. Rank - This box lists the rank (connector number) of the currently-selected connector. The ranks are assigned by the order in which you created the connector. You may change the rank by typing a new value into this box or by using the up and down arrows."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/Batch/Batch.html",
        "title": "Batch",
        "content": "Overview and Key Concepts In the Process Flow module, the Batch activity collects incoming tokens and sorts them into groups of tokens (batches). When a batch is ready, the Batch activity will release it to the next activity. The Batch activity basically functions similarly to Combiners and Separators in the 3D model in that it is capable of both combining and separating tokens. Using the Batch activity for simple grouping and releasing is relatively straightforward. However, the Batch activity has some additional features that allow you to collect, sort, and release batches in fairly complex ways. If you want to learn more about what the Batch activity is really capable of, consider reading the following topics: The rest of this topic is a reference page for the Batch activity and its properties. Organizing Batches The Batch activity can collect entering tokens and organize them into batches based on the criteria you specify. The following properties on the Batch activity are directly involved in how batches organize tokens: Batch Quantity - This property sets the target value for the batch. The batch will continue collecting tokens until this value is reached, after which the batch will be released. Quantifier - This property sets the criteria that will determine how the batch quantity is calculated. Group By - This property sets the criteria by which entering tokens will be organized and grouped into batches. Overflow - This property determines what will happen if an entering token will cause the batch to exceed its Batch Quantity. With that in mind, the Quantifier has two different methods for collecting and organizing tokens: Batch by number of tokens - If you select this option (which is the default), the Batch Quantity will be based upon the number of tokens that arrive at the Batch activity. Each entering token will increase the current quantity of the batch by one. When the number of tokens reaches the value specified in the Batch Quantity property, the batch will be released. Batch by a label on the tokens - If you select this option, the Batch Quantity will be based upon the value of a label on the entering tokens. In this case, a token can increase the batched quantity by any numeric value stored on the label. Each of these methods will be explained in the following sections. Batch by the Number of Tokens The simplest (and default) method of batching is to collect by the number of tokens. This means that entering tokens each take up one space in their batch with respect to the Batch Quantity. When the number of tokens reaches the value specified in the Batch Quantity property, the batch will be released. To set the Batch activity to collect by number of tokens: Click the Batch activity to select it. In Quick Properties, check that the Quantifier box says Number of Tokens . Click in the Batch Quantity box and type the number of tokens that should be collected in each batch. Batch by a Label on the Tokens If you select this option, the Batch Quantity will be based upon the value of a label on the entering tokens. In this case, a token can increase the batched quantity by any numeric value listed in the label. For example, if the Quantifier is set to token.Weight and the entering token has a label named Weight with a quantity of 200, the token will increase the current batch's quantity by 200 when it is added to the batch. To set the Batch to collect by label values: Make sure an Assign Labels activity or some other activity earlier in the process flow will create the label that will be used for batching. Click on the Batch activity in your process flow to select it. In Quick Properties, click the arrow next to the Quantifier box to open a menu. Point to Token Label , which will open up a submenu listing all the labels that currently exist in the process flow. Select the desired label from the menu by double-clicking it or using the arrow and Enter keys. The Quantifier box will now show the command token.YourLabelName . For example, if the label is named Weight , the box would read: token.Weight . Alternatively, you could type token.Weight into the box. You can also enter a string into this box using quotation marks: \"Weight\" . Click in the Batch Quantity box and type the target batch quantity. For example, if you wanted the Batch activity to collect tokens until it reaches a collective weight of 300 grams, you would type 300 here. Now each time a token enters the batch, the value of the specified label on each token will be added to the current batch quantity. When the batch quantity reaches the specified limit, the batch will be released. For example, imagine a Batch activity is using a label named Weight to collect tokens and it has a specified Batch Quantity of 300, meaning it needs to collect a total weight of 300 in order to get released. If the first token that enters the Batch activity has a Weight label with a value of 200 and the second token's Weight label has a value of 100, the batch would get released after the second token is added to the batch. That's because the total sum of the Weight label for both tokens would be 300, which was the target weight for each batch. What if the Label Value Exceeds the Batch Quantity? When batching by a label, it is possible that the batched quantity may be greater than the specified Batch Quantity, which will cause the batch to overflow. See Batch Overflow Options in the next section for more information about how to control overflows. Batch Overflow Options When batching by a label, it is possible that the batched quantity may be greater than the specified Batch Quantity, which will cause the batch to overflow. When that happens, it will trigger the Batch activity's overflow logic. Batching by Number of Tokens Won't Cause Overflows If you are batch by number of tokens, your batch will never exceed the specified Batch Quantity and therefore won't trigger the overflow logic. To illustrate what happens when a batch is going to overflow, let's return to the same example that was used in the previous section. As a reminder, in this example, the Batch activity is set to release the batch when the total sum of the Weight label is 300. If the first token's Weight label has a value of 200 and the second token's Weight label has a value of 150, the total sum of the Weight label for both tokens would be 350. 350 would exceed the target weight for that batch and it would therefore trigger the Batch's overflow logic. When overflow occurs the Batch activity's behavior is governed by the Overflow property. This property has a menu with the following options: Do Not Divide, Release Excess - The batch is released without modification. If this option is selected, the batch would be released including its excess quantity. For example, if the Batch Quantity is set to 300 and an entering token would cause the batch to overflow by 50, the batch would be released with a quantity of 350. No token labels will be modified by the batch when using this option. Use the Label Aggregation method for modifying labels. Do Not Divide, Release Partial - Rather than release an overflowed batch, the Batch activity will release a batch that is only partially full. The entering token that would have caused the batch to overflow is put in the next batch. This logic can be illustrated using the same example in which the Batch Quantity is set to 300 and the current batch has a quantity of 200. An entering token has a value of 150, which would cause the batch to overflow by 50. When this happens, the current batch would be released with a quantity of 200 and the entering token would be placed in a new batch with a quantity of 150. No token labels will be modified by the batch when using this option. Use the Label Aggregation method for modifying labels. Hold Excess Quantity - The current batch will be released with the exact required quantity. A new token is then created and placed in a new batch with a label containing the excess quantity. All labels and label values are copied from the last token (the one that caused the overflow) to the new token. For example, if the Batch Quantity is set to 300 and an entering token would cause the batch to overflow by 50, the batch would be released with a quantity of 300. Then, a new batch would be started with a new, nearly identical token containing a label with a quantity of 50. In this option, the batch will modify the quantifier label on tokens to move excess quantity into additional batches. Tokens that were already waiting in the first batch will not have any of their labels modified. Use the Label Aggregation method for modifying labels. Destroy Excess Quantity - The label value of the last token is reduced until the batch contains the exact amount specified by the Batch Quantity property. This essentially destroys the overflowed quantity. In this option, the batch will modify the quantifier label on the last token only. No other labels will be modified. Use the Label Aggregation method for modifying labels. New Batches Created from Excess Quantities If you choose the Do Not Divide, Release Partial or Hold Excess Quantity options, you have the possibility of creating new batches with the entering token. Be aware that if the next batch created from the entering token meets the batch quantity, it will be immediately released. If the new batch exceeds the batch quantity, it will trigger the overflow logic again. This will continue until the quantity is less than the Batch Quantity. The overflow logic only affects the label value that is specified by the Quantifier property. Other labels on the tokens will not be affected. Label Aggregation can also be affected if of a token is held over to be released in a new batch. See Assigning Labels to Outgoing Batches for more information. Grouping When a new token arrives at the Batch activity, it will evaluate the Group By property and place the token into the matching batch. If no matching batch is found, a new batch will be created. By default, Group By is set to None and only one batch will be created at a time. But you can use the Group By property if you want to sort your tokens based upon criteria you specify. For example, you could sort tokens into batches based on the token's label values, names, or the object to which the token is linked. Generally this will be a label on the entering token, but it may reference a global table or other value. The Group By can be numbers, strings, objects, or arrays, as explained in the following table: Type Description Example Number The tokens can be grouped into batches based on a number, such as a numerical value in a label on the token. The number can be an integer or floating point number and it may be negative or positive. Text The tokens can be grouped into batches based on a string (which is another word for text). For example, you could have an Assign Labels activity earlier in the process flow that assigns a new label to each token called Batch and it could assign the strings \"First Batch\" or \"Second Batch\" to a certain percentage of the tokens. Object The tokens can be grouped into batches based on an object. For example, the tokens might have a label called ProcessBy that references a processor in the 3D model that needs to process that particular batch of tokens (Processor1, Processor2, or Processor3). Array The tokens can be grouped into batches based on an array, which may contain multiple labels of various data types. Tokens being grouped by an array will only group together if all elements in the array match. For example, if items have a Size label of either 8 or 12 oz (number), and a Color label of either “Red” or “Blue” (string), you can group by the array [token.Size, token.Color]. This will create four groups, one for each possible outcome, as shown in this example. Batches displayed on the Batch activity will be displayed oldest to newest from top to bottom and from right to left. Releasing More than One Token and Destroying Tokens The Batch activity has a variety of different options you can use to control how batches are released. The following properties on the Batch activity are used when a batch is released: The Batch activity allows any number of tokens to be released when a batch is finished. This can be useful to simulate a process that collects materials, combines them together, and then divides the combined materials equally into a certain number of portions. For example, a Batch activity could be set to collect 5 tokens and release 3 tokens, almost as though it had mixed the original tokens together and divided them up into different portions. You can use the # Tokens to Release property to change how many tokens get released. This number can be the same number of tokens collected in the batch, greater than the number of tokens collected, or less than the number of tokens collected. It's important to understand what is happening inside the batch for each of these three scenarios. Release Order There are a number of references below to the order in which tokens are released from the batch. Though all of the tokens are released at the same model time (in 0 model time), the order in which they are released may impact the flow of your process flow. For instance, the first token released from the batch will enter an Acquire activity first and may acquire a resource before any other tokens from the same batch arrive. If # Tokens to Release is Equal to the # of Collected Tokens This is the simplest of the three scenarios. If three tokens are collected in the batch and the # Tokens to Release is set to three, then all three of the original tokens added to the batch will be released in the same order in which they arrived. This can be useful as a method of syncing a set of tokens. If the Quantifier is set to a label value, the number of tokens in each batch may vary. In order to release all of the tokens that were collected in the batch, you can select the option Number of Tokens Batched or return any number <= 0 in the # Tokens to Release box. If # Tokens to Release is Greater than the # of Collected Tokens If the number specified in the # Tokens to Release box is greater than the number of tokens collected in the batch, the Batch activity will create and release new tokens. These new tokens will have no initial labels. Labels may be created on these new tokens by using the Label Aggregation. See Assigning Labels to Outgoing Batches for more information. These new tokens will be the last to leave the Batch activity. If # Tokens to Release is Less than the # of Collected Tokens If the # Tokens to Release is less than the number of tokens collected in the batch, tokens will be destroyed until the correct number of tokens remains. In deciding which tokens to destroy and which to preserve, the Batch activity prioritizes tokens using the following rules, in order: Tokens that have children in the same batch should be preserved over their children. (See Sub Process Flows for more information about tokens with parent-child relationships.) Tokens with more children should be preserved over tokens with fewer children. Tokens with more allocated shared assets should be preserved over tokens with fewer allocated shared assets. Once the Batch activity has prioritized the tokens, it will destroy tokens with the lowest resulting priority. Be aware that when a Batch activity destroys tokens, it functions in a way that is similar to Finish activity: If the Batch activity destroys a token that has a parent that is in a Run Sub Flow activity, the parent activity will be notified that the child finished. Any shared assets that have been allocated by the token will be deallocated. If the token has children, the token will not be destroyed until all its children are destroyed (it will remain in the activity but will not be part of any subsequent batch). Extra tokens will be destroyed before any tokens are released from the Batch activity. Assigning Labels to Outgoing Batches By default, tokens that enter and leave the Batch activity will retain their labels and no new labels will be added to them. Newly created tokens will have no labels assigned to them. However, using the Label Aggregation, the Batch activity can assign new labels or aggregate the labels of the tokens that were included in the batch to all of the outgoing tokens. Label aggregation does not occur until the batch has collected all of its tokens as has reached the Batch Quantity value. One possible use of the label aggregation would be to calculate the total weight of all of the parts that are combined into a single part. If each token represented a single part and they each had a label named Weight , the label aggregation can be used to sum all of the weights of every token added to the batch and create a new label like BatchWeight that will be assigned to all of the outgoing tokens. To assign labels to outgoing batches: Click the Batch activity to select it. In Quick Properties, under the Label Aggregation group, click the Add button to add a new label. A new row will appear in the table. In the From Label column, double-click on the cell with the text that says labelName . Type the name of the label on the tokens in the batch that will be used as the source of the data. For example, if the incoming tokens all have a label named Weight , you would type that label name here. In the To Label column, double-click on the cell with the text that says labelName . Type the new name of the label that will be assigned to outgoing tokens. For example, the new name could be BatchWeight . In the Aggregation column, you'll select how the value of the new label will be calculated or assigned. Click on the cell with the text that says Batch ID to open a menu. Select the appropriate option from the menu. For example, if you wanted to calculate the total sum of all the batched token's Weight labels, you could select SUM from this menu. For your reference: From Label - The name of a label on the batched tokens that will be used as a source of data. The value of this label from each token will be used to calculate the aggregated value. If the label does not exist on a token, the returned value will be 0. NOTE: This entry is not used for the Batch ID and Token Count aggregation types. To Label - The name of the label that the new value will be written to. Each token in the outgoing batch will get a label with this name, and with the assigned value. Aggregation - The value that will be assigned to the To Label on all tokens released for the batch. The possible values are as follows: Batch ID - Starting at 1, each batch that is released from the Batch activity will increment the Batch ID by 1. The Batch ID is only guaranteed to be unique among batches produced by a given Batch activity. Token Count - The number of tokens collected in the batch. If the Quantifier property is set to Number of Tokens , this value will be equal to the Batch Quantity value. Last Value - This will get the label value of the From Label on the last token to enter the batch. First Value - This will get the label value of the From Label on the first token to enter the batch. Make Array - This will get the label value of every token collected in the batch and create an array of those values. If the label does not exist on a token, a NULL value will be set on the array. SUM - Sums the From Label values on all tokens in the batch. AVG - Gets the average of the From Label values on all tokens in the batch. MIN - Gets the minimum From Label value on all tokens in the batch. MAX - Gets the maximum From Label value on all tokens in the batch. STD - Gets the standard deviation of the From Label values on all tokens in the batch. VAR - Gets the variance of the From Label values on all tokens in the batch. COUNT - Gets the number of tokens in the batch that have a label named From Label. INDEX - Assigns the index of the token released from the batch activity per batch. Batch Modifying Labels In general, token labels are not modified by the Batch. There are some exceptions that can occur based upon the overflow type. See Batch Overflow Options for specific information. Aggregating the Quantifier Label when using Overflow If you are batching by a label on the tokens and your Overflow is set to Hold Excess Quantity or Destroy Excess Quantity then the quantifier label may be modified prior to performing the aggregation. For example, if you collect by the label Weight and if the Batch Quantity is set to 300 and the final batched quantity is 350, the SUM of the Weight label will be equal to 300, not 350. Releasing a Batch Early The Batch activity has both a Max Wait Time and Max Idle Time property. These properties allow you to define start criteria and the amount of time to wait before firing a trigger. If the batch reaches one of these times and calls either the OnWaitTimerFired or OnIdleTimerFired trigger, you have the option to release the batch early. However, this is not a requirement. If the batch is not released, the batch will continue to collect tokens until it reaches its Batch Quantity, after which the batch will be released as normal. The Max Wait Time and Max Idle Time properties give you a reference to the batch. The releasebatch() command can be called to release a batch prematurely from within the OnWaitTimerFired or OnIdleTimerFired triggers or from anywhere else in the model. If failed is 1, the batch will immediately release all tokens in the batch and not perform any label aggregation or evaluate the # of Tokens to Release property. If failed is 0, the batch will release normally and evaluate the # of Tokens to Release and perform all of the label aggregations on the tokens in the batch. The releasebatch() command also gives you the ability to send the released tokens out any connector of the Batch activity. The connector can be referenced by index or name. The releasebatch() command even allows you to release tokens to an activity that is not directly connected to the Batch activity by referencing the activity using getactivity() . See Max Wait Time and Max Idle Time for more information about these properties. Connectors The Batch activity allows for any number of connectors out. However, batches that complete will always exit out the first connector. Only manually released batches have the opportunity to exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Batch activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font This button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics This button opens the activity's statistics window. See Statistics for more information about this property. Batch Quantity The Batch Quantity box sets the target value for the batch. The batch will continue collecting tokens until this value is reached, after which the batch will be released. See Organizing Batches for more information. Quantifier The Quantifier box sets the criteria that will determine how the batch quantity is calculated. You can either collect by Number of Tokens or by a label on the incoming tokens. See Organizing Batches for more information. Valid Quantifier Values The Quantifier property must be either Number of Tokens , a string which will be interpreted as the label name on the entering tokens, or a pointer to the token label (using Label: aLabel or getlabel(token, \"aLabel\")). # Tokens to Release Specifies the quantity of tokens that the batch will release once it has finished collecting. Group By The Group By box sets the criteria by which incoming tokens will be grouped into batches. Overflow The Overflow setting controls what happens to values that exceed the Batch Quantity while collecting. This option is not available when collecting by the Number of Tokens Batch Overflow Options for more information. Label Aggregation Using this set of properties, you can create and modify labels on tokens when a batch is released. The operation performed, as set in the Aggregation column, will be done on every token that was added to the batch, even if the token is destroyed when the batch is released. Once the operation is performed, the resulting value will be set on every token being released by the batch. See Assigning Labels to Outgoing Batches for more information. Use Max Wait Timer The Max Wait Timer will be evaluated when a batch is first created. If a timer is not created because the Start Criteria evaluates to false, the max wait timer will be evaluated each time a token is added to the batch until the Start Criteria does evaluate to true. See Releasing a Batch Early for more information. Use Max Idle Timer The Max Idle Timer will be evaluated each time a token is added to a batch. See Releasing a Batch Early for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/WaitForEvent/WaitForEvent.html",
        "title": "Wait for Event",
        "content": "Overview and Key Concepts The Wait for Event activity will hold the token until a certain event is triggered. This activity will listen for that event to occur in the simulation model. When that event occurs, it will release the token. To get a deeper understanding of how the Wait for Event activity works, you might want to consider reading these topics first: Key Concepts About Events As a more advanced feature, the Wait For Event also has the ability to override the return value of the event it is listening to. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to an event is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on an activity or object and selecting an event, or the reference may be set through the quick properties. Connectors The Wait for Event activity allows multiple outgoing connectors. However, tokens automatically released from this activity will be released through the first connector. Only manually released tokens can exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Wait for Event activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Object Use the Object box to select the object that the Wait for Event activity will listen to. You could possibly listen to: An object in the model. An activity in the Process Flow. The current instance object (See Process Flow Instances for more information.) A group of objects. In this case, the activity will listen to the defined event on all members of the group. You could select the event you want to listen to by either using the pull-down arrow next to the Object box or using the Sampler button to select the object. Event Use the Event box to select the event that the Wait for Event activity will listen to. The Event box is connected to the object you selected in the Object box. When you use the Sampler button to select an object for the Object box, a menu will appear that lists all the different types of events that are available for that object. (This menu is created dynamically based on all the possible events related to that object.) The event that you select from this menu will automatically be listed in the Event box. You can listen to more than one event on an object. To add an event in addition to the original event, press the Add Event button . Additional events will have a Delete button button if you need to remove them. Label Matching/Assignment and Change Rule The Label Matching/Assignment or Change Rule properties will appear after you've selected an object and event to listen to. See Label Matching/Assignment for more information about these sets of properties. OnListenerInitialized This is a field that is evaluated after the event listening mechanism has been set up. You may want to use this field if, for example, in a Fixed Resource Process Flow you want to both release an item and wait for the item to leave the object. Here you would want to first set up the exit listening mechanism, and then release the item (since if you do it in the opposite order, the item may leave before you can set up the exit listening). You can use the Wait for Event to listen for the exit, and then once the listening is set up, release the item. Assign Event Object To Assigns a reference to the event-firing object to the specified label or node. This is useful if you are listening to multiple objects (perhaps from a Group) and need to know which object fired the event. This box is not required and can be left empty. Send Token To By default, the token is released to the next activity when the triggering event occurs in the simulation model. However, you can use the Send Token To field to build some more complex logic into the Wait for Event activity so that it acts more like a Decide activity. See the Decide activity for more information about the Send Token To field. Use Max Wait Timer If you check the Use Max Wait Timer to release the token after a certain amount of time has passed, regardless of whether the event it was waiting for occurred. You can also determine what should happen to this token if it is released because the wait timer expired. See Max Wait Timer for more information about this property."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/CreateTokens/CreateTokens.html",
        "title": "Create Tokens",
        "content": "Overview and Key Concepts When the Create Tokens activity receives an incoming token, it will create one or more new tokens and automatically send them to a different activity or sub flow (referred to here as the destination activity ). This activity is similar to the Run Sub Flow activity, except this activity does not hold on to the entering token once the created tokens are released. This activity is also not restricted to only sending tokens to a sub flow or Start activity. Tokens can be created in any activity to include activities in other General Process Flows. Consider reading Sub Process Flows for more in-depth information. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to another activity or Process Flow Sub Flow object is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on an activity or Sub Flow object, or the reference may be dynamic by setting the value for the Destination property. Connectors The Create Tokens activity can have any number of connectors out. Created tokens will exit this activity based upon the Destination . The entering token will always exit through the first connector out (or the next activity if part of a stacked block). See Adding and Connecting Activities for more information. Properties The following image shows the available properties for the Create Tokens activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Destination Indicates the destination activity that the newly created tokens will be automatically sent to. This can be the index of a connector, a connector name, or an activity. Unlike the Run Sub Flow activity, the destination is not restricted to being a Start activity or a Sub Flow. This activity can send the newly created tokens to any activity, whether it be in a sub flow, a General process flow, or any activity in the same process flow. See Linking to Sub Flows for information about linking to a sub flow from this property. Quantity The number of tokens that will be created every time the Create Tokens activity receives an entering token. Assign To Assigns a reference on the specified label/node to the created tokens. See the Assign To section of Common Properties for more information. Create As Defines the relationship of the original token to the created token(s): Independent Tokens - Created tokens will have no association with the original token. Child Tokens - Created tokens will be child tokens of the original token. Sibling Tokens - Created tokens will be sibling tokens of the original token. In other words, they will have the same parent as the original token. Label Access on Parent Only By default, this checkbox is cleared on the Create Tokens activity and checked on the Run Sub Flow activity. When it is cleared, any activity can create, modify, or read labels on either the parent or the child tokens. When you check the Label Access on Parent Only checkbox, access to the labels on the child tokens will be restricted. In other words, activities will only be able to create, modify, or read labels on the parent token. This restriction essentially causes your parent token to be in multiple activities at the same time because child tokens will just be duplicates of the parent token (as opposed to being independent tokens). Child Label Access This option is the only way a child token can add labels to its parent token. When the Label Access on Parent Only checkbox is checked, the next two properties will not be available. Parent Label Access This menu determines if and how child tokens may access labels owned by their parent. The menu has three available options: None - The child tokens have no access to their parent's labels. All reading, writing and adding of labels are done on the child. Select this option if you want the child to be a completely separate entity from the parent. Read - This option only allows child tokens to get information from labels on their parent; the child tokens will not be able the add or set the parent's labels. Select this option if you want to set and add labels on the child rather than the parent. If an activity in a sub flow tries to set a label on the child token that is owned by the parent token, the child will add a label to itself with the given label name and value. Read / Write - This option allows child tokens to read or set the parent's labels, but the child will not be able to add labels to the parent token. Setting labels that are not on the child or parent will cause a label to be added to the child with the given label name and value. Parent / Child Relationships When accessing labels on a token, the token will first look at labels owned by itself. If the label doesn't exist and the token has read access of its parent's labels, it will try and access the label on the parent. If the label doesn't exist on the parent, it will check the parent's label access and if able, look up to the next parent's labels, and so forth. Copy Labels to Tokens/Children on Create By default, the Copy Labels to Tokens/Children on Create is cleared. When this checkbox is checked, the entering or parent token will copy all of its labels to the created tokens/children. On a Create Tokens activity, if the Create As is set to Sibling Tokens, only labels owned by the entering token will be copied. Otherwise, all labels from all ancestors of the token will be copied (based upon each token's label access type). The copied labels can be read or written on the child regardless of the option you selected in the Parent Label Access menu. However, new labels added to the parent may still be read or written if the label access type allows it. Assign Labels to Created Tokens You can use this group of properties to set labels on the created tokens/children. Each label value will be evaluated for each created token/child. The functionality is identical to the Assign Labels activity. See the Assign Labels activity for more information about these properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/Milestone/Milestone.html",
        "title": "Milestone",
        "content": "Overview and Key Concepts The Milestone activity is used to signal that some object has acheived a milestone. You can place this activity at any important point in your Process Flow, and specify the object that has acheived a milestone. The Milestone activity is designed to work with Milestone Collectors. For more information on how to use milestones effectively in your model, see the Using Milestone Collectors topic. This activity allows you to specify the follwing things: The Milestone Collector should this activity reference, The name of the Milestone this activity will update, and The involved object. The referenced Milestone Collector will make sure there is a column for the specified milestone. When a token enters this activiy, the Milestone Collector will update the time in that milestone column. You can also specify whether future milestones should be recorded on a new row of the Milestone Collector's table. Connectors The Milestone activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Milestone activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Milestone Collector The Milestone Collector property determines which Milestone Collector this activity will affect. Milestone Name The Milestone Name property determines which milestone will be updated when a token crosses enters this activity. The referenced Milestone Collector will assert a column with this name. Involved This property indicates which object has acheived the current milestone. The Milestone collector will assert a row for that object, and update the time in the specified column. Start new entry on next milestone Check this box to indicate that if the involved object acheives any additional milestones, then the referenced Collector should use a new row to record the milestone time. This option can be used to prevent recirculating items from overwriting their milestone data."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Basic/Sink/Sink.html",
        "title": "Sink",
        "content": "Overview and Key Concepts The Sink activity destroys tokens, removing all data stored on those tokens. If a token has children, it will remain inside the Sink activity until all of its children have been destroyed, thus maintaining the links and data on the children. If Deallocated Shared Assets is unchecked and the token has allocated shared assets, the token will also remain inside the Sink activity until all shared assets have been deallocated. Best Practices for Destroying Tokens The Sink activity and the Finish activity are valid ways to destroy tokens. Do not use the destroyobject() command to destroy tokens. Connectors The Sink activity marks the end of a set of activities. No activity may be connected to the end of a Sink. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Sink activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Deallocate Shared Assets If the Deallocate Shared Assets box is checked, any Shared Assets that are allocated by the token will be deallocated when the Sink destroys the token. In other words, when a token is destroyed by the Sink, any resources that have been previously acquired by the token will be released and any entries or backorders on lists associated with the token will be deleted. If the token is in a zone, the zone will only update its content and not update any of its other statistics. If unchecked, the token will remain in the Sink activity until its shared assets have been deallocated. Exiting a Zone In order to properly remove a token from a zone and have the zone's output, staytime and custom statistics updated, send the token through an Exit Zone activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SubFlow/RunSubFlow/RunSubFlow.html",
        "title": "Run Sub Flow",
        "content": "Overview and Key Concepts The Run Sub Flow activity can be used to initiate a sub process flow. The entering token will remain in the Run Sub Flow activity until all of its child tokens have completed their sub flow (by exiting a Finish activity). Consider reading Sub Process Flows for more in-depth information. When this activity is first created, a red exclamation mark shows up to the right of the activity. This is notifying you that a link to the Run Sub Flow activity is required. This can be either to a Process Flow Sub Flow object that has a Start activity in it or to a Start activity in the same process flow. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a Sub Flow object or Start activity, or the reference may be dynamic by setting the value for the Destination property. Starting and Finishing a Sub Flow The Run Sub Flow activity requires a Start activity as the first activity in the sub flow and a Finish activity as the final activity. As child tokens enter the Finish activity, they notify the parent token (in the Run Sub Flow) that the child is complete. Once all children have completed the sub flow, the parent token will be released from the Run Sub Flow. If the Run Sub Flow references a Process Flow Sub Flow object, it will search the Sub Flow for the first Start activity and use that as the start of the sub flow. If your Sub Flow has multiple Start activities, you can use the Sampler to a specific Start activity or enter SubFlowName: StartName in the Destination box. By default, the token that enters the RunSubFlow activity will create all the children needed at the same time. You can optionally choose to have the token create its children one at a time. In this case, the parent token will one child token and wait for that token to arrive in the finish activity before creating the next child token. Connectors The Run Sub Flow activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Run Sub Flow activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Destination Use the Destination box to link to a sub flow. This can be a Process Flow Sub Flow object, or it can be a Start activity. See Linking to Sub Flows for more information. Quantity The number of child tokens that will be created in the sub flow. Run Tokens One at a Time Check this box to indicate that child tokens should run one at a time, rather than all at the same time. Label Access The Run Sub Flow activity's label-related properties are nearly identical to the Create Tokens activity with only two exceptions: 1) there is no Create Tokens As menu, and 2) the Copy Labels to Tokens on Create property is named Copy Labels to Children on Create instead. For information on the Label Access property, see the Create Tokens activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SubFlow/Start/Start.html",
        "title": "Start",
        "content": "Overview and Key Concepts The Start activity is usually the first activity in a sub flow. However, the Start activity only marks the beginning of a sub flow. It does not perform any other logic. After a token enters the Start activity, it will immediately move to the next connected activity in the sub flow. Consider reading Sub Process Flows for more in-depth information. Connectors The Start activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Start activity: Each of these properties will be explained in the following section. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SubFlow/Finish/Finish.html",
        "title": "Finish",
        "content": "Overview and Key Concepts The Finish activity marks the end of a sub flow. The Finish activity essentially acts the same as a Sink in that it destroys tokens that enter it. The Finish activity has a few additional functions depending on what kind of activity or event that triggered the sub flow to run: Run Sub Flow - If the sub flow is being run through a Run Sub Flow activity, each token entering the Finish will notify its parent token that is waiting in the Run Sub Flow that it has finished its sub flow. Once all tokens have finished for that parent, the parent will be released from the Run Sub Flow activity. In this case, the Return Value property is not used. Will Override Return Value - The Wait For Event and Event Triggered Source activities have a Will Override Return Value property. This property allows the token to give a new return value to the event that was triggered. For example, overriding the Process Time event of a processor would allow you to perform steps using process flow to define the process time of that processor. The processor will ignore whatever value was originally returned in the Process Time box. When overriding a return value, the token will move through the defined set of activities until it hits a Finish activity where it will evaluate the return value for the event. (A return value might be data from a calculation, a new label value, etc.) Execute Sub Flow command - If you are using any kind of code that uses the executesubflow() command to run a sub flow (some picklist options use this command), the Finish activity can return a value when the sub flow is finished being run such that double processTime = executesubflow(processFlow); will give you the value evaluated from the Return Value box. About Sub Flows Consider reading Sub Process Flows for more in-depth information. Overriding a Return Value Though Finish activities are generally thought of as the end of a sub flow, they are also used to mark the end of a Will Override Return Value option from the Wait For Event or Event Triggered Source activity or the end of an executesubflow() command. In both of these cases, one token will be used to execute a series of activities ending with a Finish activity. Upon arriving at the Finish activity, the Return Value box will be evaluated for the token and the result will be returned to the calling function. There are picklists available through standard FlexSim objects that execute sub flows in order to get return values for properties such as a processor's Processing Time. If the Finish marks the end of a sub flow, the Return Value will not be evaluated. Connectors The Finish activity marks the end of a set of activities. No activity may be connected to a Finish. Properties The following image shows properties for the Finish activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Return Value The Return Value property can be a static or dynamically-generated value. A return value can be anything you need it to be. For example, you could return a calculation based on data in a label on the token or you could return a reference to an object. See Overriding a Return Value for more information. Deallocate Shared Assets If checked, when a token is destroyed, any Shared Assets that are allocated by the token will be deallocated. This means, any resources that have been acquired by the token will be released and any entries or backorders on lists associated with the token will be deleted. If the token is in a zone, the zone will only update its content and not update any of its other statistics. If unchecked, the token will remain in the Finish activity until its shared assets have been deallocated. Exiting a Zone In order to properly remove a token from a zone and have the zone's output, staytime and custom statistics updated, send the token through an Exit Zone activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Visual/ChangeVisual/ChangeVisual.html",
        "title": "Change Visual",
        "content": "Overview and Key Concepts The Change Visual activity changes the appearance of an object in the 3D model. Generally this is used for changing a flow item's visuals, but it may also be used to adjust any 3D object's visual properties. Connectors The Change Visual activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Change Visual activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Change Visual By pressing the button, you can add a number of picklist options for changing an object's visual properties. You may also edit the code directly by clicking on the button. Pressing the will remove all code from the trigger, making it blank."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Visual/RunAnimation/RunAnimation.html",
        "title": "Run Animation",
        "content": "Overview and Key Concepts The Run Animation activity can trigger an animation on a 3D object in the simulation model. You can use any of the animations that come pre-programmed with the standard FlexSim objects or you can create your own custom animations. If desired, you can have the token wait in the Run Animation activity until the animation completes. This can be useful for syncing. See the Animation Creator for more information about creating custom animations. Connectors The Run Animation activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Run Animation activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Object(s) Use the Object(s) property to select the object that will be animated. To run animations on multiple objects at the same time, you can pass a treenodearray of objects into this property. Alternatively, you can create a group of the objects you want to animate. To reference a group in the Object(s) property, click the pull-down menu next to this property and select Groups to see a list of all the groups that have been created for this simulation model (or type Group: groupName directly into the box). Animation Use the Animation property to determine which animation on the object should be run. This should be either a number that is the index of the animation or a string that is the name of the animation on the object. To view the animations that are available for any 3D object: Right-click on the object in the 3D model to open a menu. Select Edit then Animations to open the Animation Creator. On the bottom panel, look for the Animation menu. Click the arrow on this menu to open the full list of the currently available animations. You can either type the name of the animation or its index number. The index number is the order in which the animation appears in the Animation menu. For example, an Operator object has three animations (listed in this order): Walk, WalkLoaded, and Stand. The Walk animation would be index 1, WalkLoaded would be index 2, and so forth. If entering the name of the animation directly, be sure to put quotes around the name so the Universal Edit will recognize it as a string. For example, \"WalkLoaded\" . Wait Until Complete If checked the token will remain in the Run Animation activity until the animation is finished. Repeat Indefinitely If you cause the token to wait until the animation is complete, the animation's Repeat Type must be set to Do Not Repeat or Repeat Set Number . Otherwise the animation will loop continuously and the token will never exit the Run Animation activity. To check or change an animation's Repeat Type setting: Right-click on the object in the 3D model to open a menu. Select Edit then Animations to open the Animation Creator. Select the desired animation from the Animations and Components pane. In Quick Properties, look for the Repeat Type menu. Click the menu and select Do Not Repeat or Repeat Set Number . If you selected the latter option, make sure you indicate how many times the animation should be repeated in the Repeat Value box. Speed Type If set to Default To Animation , the speed at which the animation will run is be defined by the animation. You can override the animation's speed by either specifying a duration or a multiplier. Use Duration Of - Enter the duration of the animation in the box below in model time units. Multiply Speed By - Enter a multiple in the box below to increase or decrease the animation's speed by the specified value. Repeat Type If set to Default To Animation , the repeat type of the animation will be defined by the animation. You can override the animation's repeat type with the following options: No Repeat - The animation will not repeat. Repeat Immediately - The animation will repeat as soon as it finishes. Repeat # Of Times - Enter the number of times the animation should repeat in the box below. Repeat After Time - Specify the time duration the animation should run before repeating. Enter the time in model units in the box below. You may specify a time that is less than the total animation time. Repeat After Time Once Ended - Once the animation is finished, specify how much time between animation repeats. Enter the time in model units in the box below. Repeat Last Frame - The animation will run just once, but then repeat the last frame of the animation indefinitely."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Visual/CreateKinematics/CreateKinematics.html",
        "title": "Create Kinematics",
        "content": "Overview and Key Concepts The Create Kinematics activity initializes a kinematics data node for moving objects around in 3D space. See Apply Kinematics for more information. Connectors The Create Kinematics activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Create Kinematics activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Data Node The Data Node property defines a node to store kinematics data on. This can be a token or object label or some other node. This data node will be referenced by the Apply Kinematics and Finish Kinematics activities. Flags The Flags property let's you change the default functionality of the kinematics. The following flags are availalbe: Manage Rotations - This flag will cause the object to always point in the direction of movement. Relative Locations - By default the kinematics coordinates are based on the object's container's coordinate system. This flag will cause the object to travel according to its local coordinate system, based on the rotation of the object at the time you create the kinematics. An example of this would be defining joint movement/rotations of an robot object. Do Not Prune - By default kinematics will be \"pruned\" as they go, meaning when you update the kinematics to a time that is after the end time of a given kinematic, then it will remove that kinematic from the kinematics list. Use this flag to cause kinematics to not be removed. Reset Buffer - By default, the kinematic's memory allocation is optimized for speed, i.e. it will only reallocate memory when it needs it, and it will not resize back down when you initialize the kinematic. When this flag is set, the kinematics will resize its data buffer to an initial size when initialized. Use Object's Position This property specifies how the initial location and rotation of the kinematics will be define. This can be defined by a 3D object or manually. This will be where the 3D object starts when kinematics are applied to the data node. Object If Use Object's Position is selected, this Object property will be display. This property is used to reference a 3D object that will define the initial location and rotation of the created kinematics. If Define an Initial Position is selected, a series of propertis will be display to manually enter each location and rotation component. X, Y, Z Location and Rotation If Define an Initial Position is selected, these properties will be displayed. These define the initial location and rotation of the created kinematics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Visual/ApplyKinematics/ApplyKinematics.html",
        "title": "Apply Kinematics",
        "content": "Overview and Key Concepts The Apply Kinematics activity adds and runs kinematics on a kinematics data node created by a Create Kinematics activity. These kinematics are used to move objects in 3D space. Objects can perform one or several movement operations at once by specifying speeds and accelerations/decelerations. The following time-based plot shows two kinematics being performed in sequence: This time-based plot shows two kinematics that overlap each other: There are 5 types of kinematics: Location - Used to move the location of object in the x, y and z coordinates. Speeds and accelerations/decelerations are defined in model units. Rotation - Used to rotate the object along the x, y and z axes. Rotation values are defined in degrees. Speeds are defined as degrees per unit of time. Accelerations/decelerations are defined as degrees per unit of time squared. u Turn XY - Used to turn the object a certain angle with a given radius. This turn type will turn the object around the z axis along the XY plane. Units are the same as the Rotation type. Turn YZ - Used to turn the object a certain angle with a given radius. This turn type will turn the object around the x axis along the YZ plane. Units are the same as the Rotation type. Turn ZX - Used to turn the object a certain angle with a given radius. This turn type will turn the object around the y axis along the ZX plane. Units are the same as the Rotation type. None - If none is chosen, no new kinematics will be applied. This will only cause the passed in object to be be updated by the kinematics. Connectors The Apply Kinematics activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Apply Kinematics activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Data Node The Data Node property needs to point to a node that has kinematics data on it. This data is created by a Create Kinematics activity. Object(s) The Object(s) property specifices which object(s) will be doing the movement. Specify an array of objects to have multiple objects can perform the same movement. activity. Type The Type property specifices what type of kinematics will be added to the data node. See Types above for more information. Offset X, Y, Z Location The offset location properties specify an offset in the x, y and z locations. This is an offset from the object's current location, not an absolute position. Offset X, Y, Z Rotation If the Type is set to Rotation, then the Offset Location properties will appear. These are rotational offset for the x, y and z axes. This is an offset from the object's current rotation, not an absolute rotation. In degrees. Start Angle X, Y, Z Axis If the Type is set to one of the Turn tyes, then one of the Start Angle X, Y, Z Axis properties will appear. The start angle of 0 will use the object's initial direction of motion. In degrees. Turn Angle X, Y, Z Axis If the Type is set to one of the Turn tyes, then one of the Turn Angle X, Y, Z Axis properties will appear. This is the number of degrees to turn about the axis of rotation. Turn Radius If the Type is set to one of the Turn tyes, then the Turn Radius property will appear. This is the radius or distance from the center of rotation to turn the object. In length units. Target Speed The Target Speed property specifies the target travel/rotation speed for the object. In length per time. Acceleration The object's acceleration. In length per time squared. Deceleration The object's deceleration. In length per time squared. Start Speed The object's starting speed of the kinematics. In length per time. End Speed The object's ending speed of the kinematics. In length per time. Start Time The model start time of the kinematics. Assign To Assigns the model finish time of the applied kinematics. See the Assign To section of Common Properties for more information. Wait For Finish If checked the token will remain in the Apply Kinematics activity until the kinematics are finished."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Visual/FinishKinematics/FinishKinematics.html",
        "title": "Finish Kinematics",
        "content": "Overview and Key Concepts The Finish Kinematics activity is used to remove object's from kinematics and deactivates kinematics nodes from being updated. A kinematics data node can reference multiple 3D objects in order to update their location and rotation. You can remove one or all of the 3D objects to stop their updates. If any 3D objects are still using the kinematics data node then the data node will remain active. When the model is reset all data nodes are deactivated. Finshing Kinematics Once kinematics are created and applied, the 3D object's position/rotation are updated continuously as the 3D view is drawn. In order to remove this update at the end of a set of kinematics, the kinematics node must be finished. Updating Kinematics If a 3D object is being updated by kinematics, you will not be able to drag the object in the 3D view. Connectors The Finish Kinematics activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Finish Kinematics activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Data Node The Data Node property needs to point to a node that has kinematics data on it. This data is created by a Create Kinematics activity. Object(s) The Object(s) property specifices which 3D object(s) will be doing the movement. Specify an array of objects to have multiple 3D objects can perform the same movement. activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Objects/CreateObject/CreateObject.html",
        "title": "Create Object",
        "content": "Overview and Key Concepts The Create Object activity creates one or more objects in the 3D simulation model. This activity can also create Task Executers and Task Executer flow items and connect them to a travel network using the Create In property. Once created, a reference to the created object(s) will be added to the label specified in the Assign To property. Connectors The Create Object activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Create Object activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Object Use the Object box to specify what type of object should be created. By default, it will create a flow item with a Box shape, but there are many other possibilities. If you click the arrow next to the Object box, the menu will list a variety of different objects that can be created. If needed, you can dynamically set this property as the rank of a flow item in the Flowitem Bin. You can also use the Sampler button to select an object in the model. When you select an object in the model, the Create Object activity will create a copy of this object. Quantity Use the Quantity box to determine how many objects will be created. This should be an integer value (a whole number). Create In Use the Create In box to determine where the object(s) will be located when created. By default, the object is created in the model, but it can be changed to be a different token label, object in the model or other destination. Some of the possible destinations can be: Object in the Model - The object will be created in an object in the model. For example, you could create a flowitem inside of a processor. Use the Sampler button to select an object in the 3D simulation model. If Create At is checked, the created object will be placed in the destination object's container at the destination object's location. Model - The object will be created inside the model with its X,Y,Z coordinates at 0,0,0. If you are creating a task executer object, it will be connected to the Default Navigator. To use this option, click the arrow next to the Destination box and select Model from the menu. Outside the Model - The object can be created outside of the model if you would prefer to move the object into the model manually later. Click the Remove button so that the Destination box will read None . Network Node - The object will be created on a network node. If you are creating a task executer object, it will be connected to the Default Network Navigator. Use the Sampler button to select the network node in the 3D simulation model. AGV Control Point - If you have the AGV module installed in FlexSim, you can set the destination to an AGV Control Point. If you are creating a task executer object, it will be created at the control point and will be connected to the AGV Network. A* Navigator - If you have the A* module installed in FlexSim, you can set the destination to an A* (or AStar) Navigator. If you are creating a task executer object, it will be automatically connected to the A* Navigator upon creation. Additional Activity Needed for the Model and A* Navigator Options If you use either the Model or the A* Navigator destination options, you might want to change the location to something other than the model origin. You can use the Set Location option in the Change Visual activity next in your process flow to fix this issue. See the Change Visual activity for more information. Assign To Assigns a reference on the specified label/node to the created object(s). See the Assign To section of Common Properties for more information. Object Flow If specified, the Object Flow defines the Object Process Flow that the object will be attached to after being created. Assign Labels to Created Objects Allows you to add labels to the created objects. For more information on assigning labels, see the Assign Labels activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Objects/MoveObject/MoveObject.html",
        "title": "Move Object",
        "content": "Overview and Key Concepts The Move Object activity moves an object or multiple objects to another place in a simulation model. When the object moves it will be instantaneous, meaning that it will instantly appear in its new location. It functions the same as calling the moveobject() command. Max Content Moving an object using this activity does not take into account Max Content on a task executer or fixed resource object. It will force the object(s) into the destination object regardless of that object's availability. Connectors The Move Object activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Move Object activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Object(s) Use the Object(s) box to specify the object you want to move. To move multiple objects at once, pass a treenodearray of object references into this property. Destination Use the Destination box to determine where the object or objects should move to. See Create Object - Destination for a list of possibilities. Preserve Global Position When checked the Preserve Global Position check box will preserve the object's global location and rotation. The object will be moved into the destination and then its local location and rotation will be adjusted so its global location and rotation are the same as before the move."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Objects/DestroyObject/DestroyObject.html",
        "title": "Destroy Object",
        "content": "Overview and Key Concepts The Destroy Object activity removes one or more objects in the 3D simulation model. Connectors The Destroy Object activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Destroy Object activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Object(s) Use the Object(s) box to define which objects to destroy. Asynchronous If checked, there will be a 0 time delay before the object is destroyed. This is important if this activity is triggered within the context of some other model event associated with the object. You don't want to destroy the object before that context finishes."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/Travel/Travel.html",
        "title": "Travel",
        "content": "Overview and Key Concepts Use the Travel activity to make a task executer (such as an Operator or Transporter) travel to a specific object (such as a fixed resource) in the 3D simulation model. If connected to a Travel Network, the task executer will use that network (such as AStar or Network Nodes) to travel to the specified object. The AGV Travel activity adds a task to a previously created task sequence . Alternately, when the Executer / Task Sequence field references a task executer directly, this activity will create a task sequence with a single travel task, and dispatch that task sequence to the task executer. Travel vs. Travel to Loc vs. AGV Travel Use the Travel task sequence activity if you want a task executer to go to a specific object in the 3D simulation model. Use the Travel to Loc task sequence activity if you want a task executer to go to specific X, Y, and Z coordinates in the 3D simulation model (such as a place where there is no object). Use the AGV Travel task sequence activity if the task executer is traveling on an AGV path network, and you specifically want to define a custom path offset or AGV body offset value. Connectors The Travel activity only allows one connector out. See Adding and Connecting Activities for more information. Properties Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Destination Use the Destination box to set the location to which the task executer will travel. The destination should be an object in the 3D model. End Speed This field defines the target end speed for the travel operation. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/Load/Load.html",
        "title": "Load",
        "content": "Overview and Key Concepts Use the Load activity to make a task executer (such as an Operator or Transporter) load an object in the 3D simulation model. For example, you can make a task executer pick up a flow item to transport it to another destination. The Load activity creates a load task sequence and dispatches it to a task executer. Optionally, the task may be appended onto an already existing task sequence. See Create Task Sequence activity for more information. Connectors The Load activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Load activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Item Use the Item box to determine which item or object should be loaded. Typically this is a flow item, however, other objects can be used. There are many different ways to reference flow items and objects in the model. Below are just a couple of examples: You can use a Create Object activity to create a flow item in the 3D model and assign the appropriate label to that object. You can create a Wait For Event or Event Triggered Source activity that listens for flow items arriving at a fixed resource and assigns a label to those entering flow items. Station By default the Station box is set to Item Container which is the object that the item is currently inside of. For information about why you might choose a station that is not the item container, see Task Type Load . Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/Unload/Unload.html",
        "title": "Unload",
        "content": "Overview and Key Concepts Use the Unload activity to make a task executer (such as an Operator or Transporter) unload an object in the 3D simulation model. For example, you can make a task executer drop off a flowitem at a processor or queue. The Unload activity creates an unload task sequence and dispatches it to a task executer. Optionally, the task may be appended onto an already existing task sequence. See Create Task Sequence activity for more information. Connectors The Unload activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Unload activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Item Use the Item box to determine which item or object should be unloaded. Typically this is a flow item, however, other objects can be used. There are many different ways to reference flow items and objects in the model. Below are just a couple of examples: You can use a Create Object activity to create a flow item in the 3D model and assign the appropriate label to that object. You can create a Wait For Event or Event Triggered Source activity that listens for flow items arriving at a fixed resource and assigns a label to those entering flow items. Station Use the Station box to select the object from which the task executer should unload the item to. Usually you will point to a fixed resource (such as a processor or queue) but you can also point it to another task executer. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/Delay/Delay.html",
        "title": "Delay (Task Sequence)",
        "content": "Overview and Key Concepts Use the Delay (task sequence) activity to make a task executer (such as an Operator or Transporter) delay for a specific period of time in the 3D simulation model. For example, a delay could represent a task that takes a specific amount of time to complete such as cleaning a machine, assembling a product, etc. The Delay activity creates a delay task sequence and dispatches it to a task executer. Optionally, the task may be appended onto an already existing task sequence. See Create Task Sequence activity for more information. Make Sure You're Using the Correct Delay Activity Don't confuse the Delay (task sequence) activity with the general Delay activity . Connectors The Delay activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Delay activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Delay Time The Delay Time defines the amount of time that the task executer will be delayed. State Use the State box to determine which state the task executer will be in during the delay task (such as idle, busy, on break, etc.). The task executer's state is useful if you want to record statistics about how long the task executer is in a particular state. Click the arrow next to the State box to see a menu of available states. You can also specify user defined states. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/TravelToLoc/TravelToLoc.html",
        "title": "Travel to Loc",
        "content": "Overview and Key Concepts Use the Travel to Location activity to make a task executer (such as an Operator or Transporter) travel to specific X, Y, and Z coordinates in the 3D simulation model. This will cause the task executer to perform offset travel (ignoring its navigator) to the location. The Travel to Location activity creates a travel task sequence and dispatches it to a task executer. Optionally, the task may be appended onto an already existing task sequence. See Create Task Sequence activity for more information. Travel vs. Travel to Loc Use the Travel task sequence activity if you want a task executer to go to a specific object in the 3D simulation model. Use the Travel to Loc task sequence activity if you want a task executer to go to specific X, Y, and Z coordinates in the 3D simulation model (such as a place where there is no object). Connectors The Travel To Loc activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Travel To Loc activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Relative When the Relative checkbox is checked, the X, Y, and Z coordinates will be relative to the current location of the task executer. If the Relative checkbox is cleared, the task executer will travel to the X, Y, and Z coordinates of the object containing the task executer, whether that be the model or a visual tool. X, Y, and Z Location The location coordinates to which the task executer will move. Finding the X, Y, and Z Coordinates in the Model Position your mouse over the location you want the task executer to travel to. The bottom left corner of the FlexSim window will display the current mouse position, such as in the following image: In this example, the X coordinate is 7.36, Y is 4.46, and Z is 0. End Speed This field defines the target end speed for the travel operation. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/AGVTravel/AGVTravel.html",
        "title": "AGV Travel",
        "content": "Overview and Key Concepts The AGV Travel activity is similar to the standard Travel task sequence activity, except it is specifically intended for task executers connected to an AGV network, and provides additional options specific to AGV functionality. The AGV Travel activity adds a task to a previously created task sequence . Alternately, when the Executer / Task Sequence field references a task executer directly, this activity will create a task sequence with a single travel task, and dispatch that task sequence to the task executer. Connectors The AGV Travel activity only allows one connector out. See Adding and Connecting Activities for more information. Properties Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Destination Use the Destination box to set the location to which the task executer will travel. The destination should be an object in the 3D model. Relative To Trailer This field optionally defines an AGV trailer that the target destination point should be relative to. See Customizing AGV Travel Tasks . End Speed This field defines the target end speed for the travel operation. Path Offset This field defines a target offset distance along the destination path. See Customizing AGV Travel Tasks . AGV Body Offset This field defines a target offset distance along the AGV's body. See Customizing AGV Travel Tasks . Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/TimedTravel/TimedTravel.html",
        "title": "Timed Travel",
        "content": "Overview and Key Concepts The Timed Travel activity is similar to the standard Travel task sequence activity, except it lets you define a target travel time for the travel task. The Timed Travel activity adds a task to a previously created task sequence . Alternately, when the Executer / Task Sequence field references a task executer directly, this activity will create a task sequence with a single travel task, and dispatch that task sequence to the task executer. Connectors The Timed Travel activity only allows one connector out. See Adding and Connecting Activities for more information. Properties Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Executer / Task Sequence for more information about this property. Destination Use the Destination box to set the location to which the task executer will travel. The destination should be an object in the 3D model. Target Time This field defines the target duration that the travel operation should take. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/CustomTask/CustomTask.html",
        "title": "Custom Task",
        "content": "Overview and Key Concepts If you need to give a task executer a task that isn't currently available in the process flow library, you can use the Custom Task activity to build your own custom task. The Custom Task activity has a Task Type menu with a complete list of other tasks that are available in addition to the common ones that are available in the library. The Custom Task activity creates a task sequence with a single task and dispatches it to a task executer. If the task executer already has a task sequence, the task will be added to the end of a task sequence. Optionally, the task may be appended onto an already existing task sequence. See Create Task Sequence activity for more information. Connectors The Custom Task activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for Custom Task Activities: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Executer / Task Sequence Use the Executer / Task Sequence box to determine which task executer or task sequence should receive the task. See Statistics for more information about this property. Task Type You can select one of the available task types from the Task Type menu. This menu lists all possible task types. See the Task Sequence Types reference if you would like more information about each of the task types listed in this menu. Custom Properties The custom properties are not available until after you select a task from the Task Type menu. The names of the properties will change based on the task you selected. Each box will represent one of the parameters that are required or optional for that task. See the Task Sequence Types reference for a description of the parameters for each task type. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/CreateTaskSequence/CreateTaskSequence.html",
        "title": "Create Task Sequence",
        "content": "Overview and Key Concepts The Create Task Sequence activity will create an empty task sequence and optionally dispatch it to a task executer. A task sequence is a series of actions (known as tasks, such as Travel, Load, or Unload) that can be assigned to a task executer (such as an Operator or Transporter). Each task executer has a list of task sequences that have been dispatched to them. When a task executer finishes a task sequence, they will immediately begin executing the next task sequence in their list. By default, this activity is configured to create a task sequence that uses a wait state. This means that once the Task Executer begins executing the task sequence, they will not move on to other task sequences until they are explicitly given a finish task. For this reason, this activity is meant to be paired with the Finish Task Sequence activity, which is used to give the finish task. Using a Wait State is Recommended By using a wait state and a Finish Task Sequence activity, you can more easily use task sequences from both 3D objects and from Process Flow. It also creates a natural acquire/release mechanism that can sometimes replace using Acquire/Release Resource activities. Connectors The Create Task Sequence activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Create Task Sequence activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Task Executer / Dispatcher Use the Task Executer / Dispatcher box to select the task executer or dispatcher that you want to assign the task sequence to. If you want to create a task sequence but not dispatch it, click the button so that this box now reads None . You'll also need to uncheck the Dispatch and Wait box. This can be used to do things like pushing the task sequence onto a list before dispatching it. Once you know who to dispatch the task sequence to, you'll need to use a Dispatch TS (Task Sequence) activity to assign the task sequence to a task executer later in your process flow. See Dispatch Task Sequence for more information about this activity. Priority The Priority box sets the priority level of the task sequence. By default, task executers will complete task sequences and activities in the order they were received (first in, first out). However, you might want a task executer to complete more important tasks first. You can use the Priority box to cause the task executer to work on higher priority tasks sequences before lower priority task sequences. By default, all task sequences are assigned a priority of 0, but you can enter in any number in the Priority box. By default, Task executers will prioritize task sequences to perform higher priority task sequences first through their Queue Strategy property. For example, imagine you create a task sequence with a priority number of 1 and another with a priority number of 2. If both task sequences are waiting in a task executer's queue to be performed next, the task executer will work on the task sequence with the priority number 2 first. Plan Out Your Priority Levels If you decide to prioritize your task sequences, you might want to plan out what your priority levels will be in advance to save editing time down the road. Or you could reference values in a Global Table to easily define and edit priority levels later. Preemption The Preemption menu sets the preemption value of the task sequence. Preemption is when a task executer stops its current task sequence to work on the preempting task sequence. You can use the Preemption menu to determine if and how preemption occurs. For example, Operator A's most important responsibility is to repair machines. When there are no machines to repair, however, it should also transport material throughout the model. If a machine breaks down while Operator A is in the middle of transporting a flow item somewhere, then the Operator should stop whatever it is doing and repair the machine, instead of finishing the transport operation. To simulate this behavior in your model, you'll have to make sure that the Operator's machine repair task sequence is set to preempt the task sequence for transporting flow items. The Preemption menu has the following options: no preempt - The current task sequence will not preempt any other task sequences. preempt - The current task sequence will preempt any active task sequences. The active task sequence (the one that is being preempted) will go back into the task executer's queue to be finished later. preempt, aborting active - The current task sequence will preempt any active task sequences. The active task sequence (the one that is being preempted) will be deleted and will not be finished later. preempt, aborting all - The current task sequence will preempt any active task sequences. The active task sequence and all other task sequences in the task executer's queue will be deleted and will not be finished later. Wait for Finish State The Wait for Finish State defines a state to go into when the task executer who is performing the task sequence has nothing left to do in the task sequence, but must wait because the task sequence has not been finished with a Finish Task Sequence activity. Assign To Assigns a reference on the specified label/node to the created task sequence. See the Assign To section of Common Properties for more information. Dispatch and Wait When this box is checked, the token will wait on this activity until a task executer begins executing this task sequence. Assign Task Executer To This field is only available if you check the Dispatch and Wait box. When the task executer begins executing the task sequence, this field will assign the task executer to a label. For example, if you dispatch the task sequence to a Dispatcher, then the task will eventually be given to a task executer. That task executer will be assigned to the label specified in this field."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/FinishTaskSequence/FinishTaskSequence.html",
        "title": "Finish Task Sequence",
        "content": "Overview and Key Concepts The Finish Task Sequence activity gives a finish task to a task sequence. You can use this activity to finish a task sequence created with a wait state. By default, the Create Task Sequence activity creates task sequences that use a wait state. Therefore, Create Task Sequence activities should usually be paired with a Finish Task Sequence activity. Connectors The Create Task Sequence activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Create Task Sequence activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Task Sequence Specifies the task sequence that will be given a finish task."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/TaskSequences/DispatchTaskSequence/DispatchTaskSequence.html",
        "title": "Dispatch Task Sequence",
        "content": "Overview and Key Concepts The Dispatch Task Sequence activity can dispatch a task sequence to a task executer (such as an Operator or Transporter). Generally you won't need to use the Dispatch Task Sequence activity with your task sequences because the Create Task Sequence activity and other task sequence activities will be dispatched immediately by default. However, you could use a Dispatch Task Sequence if you would prefer to build a series of task sequences first and dispatch them later. There are two different methods you can use to build a task sequence that is dispatched later: You could use a Task Sequence Global List. Using this method, fixed resources can push task sequences to the list or you can manually create the task sequences and push them to the list. When ready, you can pull a task sequence from that list and then dispatch it to the appropriate task executer using this activity. You could use a Create Task Sequence activity to create a task sequence but set the Task Executer / Dispatcher property to None . (See Create Task Sequence for more information about this property.) You can then build the entire task sequence without dispatching it to a task executer. When ready, you can dispatch the task sequence to the appropriate task executer using this activity. Connectors The Dispatch Task Sequence activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Dispatch Task Sequence activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Task Sequence(s) Use the Task Sequence(s) box to select the task sequence or array of task sequences that will be dispatched. Task sequences that have already been dispatched will not redispatch. Task Executer / Dispatcher Use the Task Executer / Dispatcher box to select the task executer or dispatcher that you want to assign the task sequence to. Wait Until Complete If the Wait Until Complete box is checked, the token will be held in the activity until this task has been completed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/List/List.html",
        "title": "List",
        "content": "Overview and Key Concepts The List is a shared asset that can represent a list of tokens, flow items, task executers, task sequences, numbers, strings, etc. Using the Push To List and Pull From List activities, the contents of a list can be dynamically updated during a simulation run. For example, a list could represent flow items or tokens that are waiting to go to the next available object or activity. When an object or activity becomes available, the flow item or token can be pulled from the list and sent to the downstream object or activity. Lists can be either be internal to a process flow or they can link to a Global List in the 3D simulation model. Why Use Lists in Process Flow Using Lists, you can: Sync tokens or objects Organize groups of objects Track custom statistics Use search concepts like filtering and prioritization for making choices in the model Lists have a lot of functional overlap with other shared assets. However, one of the unique advantages of using Lists within Process Flow is for token synchronization. Token synchronization means that tokens can wait for each other at defined points by having one activity push a token onto a List, while another activity pulls the token from the List. To give a real-world example of a business system that would need token synchronization, imagine you want to simulate the loading dock of an order picking warehouse. When the warehouse receives notice that a truck is on its way, the employees need to begin staging the orders that have already been picked for shipment. It's possible that the truck could arrive before the employees are finished staging the orders on pallets, in which case the truck will need to wait until the orders are ready. However, it's also possible that the employees might finish staging the orders before the truck arrives, in which case the orders will need to wait until the truck arrives. If you represent the truck as a single token and each order as a single token, then the problem is as simple as sending each order token to a Push To List activity that pushes the order token to a list and sending the truck token to a Pull From List activity that will pull all of the order tokens from the list. If the orders arrive first, the order tokens will remain in the Push To List activity until the truck arrives and pulls them from the list. If the truck arrives first, it will wait at its Pull From List activity until it has pulled all of the orders from the list. Creating, Linking, and Accessing Lists A List shared asset can be used to create either internal lists or link to global lists: Global List - Links to a Global List that has already been created in the 3D simulation model. Use a Global List if your list needs to be linked to a list used by objects in the 3D model. Internal List - The default method. A list that is created and owned by the List shared asset. Use an internal list if your list does not need to be accessible to objects in the 3D model. When using a local list, the list can either be defined globally or locally to the process flow. Debugging Lists in Process Flow Normally, when you need to debug code in one of your pick options, you would click in the far left column of the code editor to create a breakpoint: However, if you are using an Internal List in a List Shared Asset and you need to debug a field, you need to use the debug() command: This also applies to the Back Order Reevaluation Events. Connectors Only Push to List activities and Pull From List activities can be connected to a List. Properties The following image shows properties for the List shared asset: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. List Use the List box to link to a Global list or create an internal list. See Creating, Linking, and Accessing Lists for more information about the difference between a global list and an internal list. By default, all lists are internal, which means that this box should say Use Internal List . If you want to use an internal list and the box has text other than this in it, click the remove button to revert back to using an internal list. To link to a Global List, click the arrow next to this box to open a menu. Point to Global List and select the name of the list from the menu or use the sampler and sample the list from the Toolbox. Type The Type menu determines whether the list will be define locally or globally. This menu is only available if you have created an Internal list and the List shared asset is not contained in a General Process Flow. See Creating, Linking, and Accessing Lists for more information. View Entries... The View Entries... button will display all of the values currently on the list. This button functions the same as the View Entries... button on the General tab on the Global List Properties. View Back Orders... The View Back Orders... button will display all the back orders who are pulling from the list. This button functions the same as the View Back Orders... button on the General tab on the Global List Properties. Advanced The Advanced button opens the List properties page. Use this page to edit the list's properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/PushToList/PushToList.html",
        "title": "Push to List",
        "content": "Overview and Key Concepts This activity will add something (tokens, flow items, task executers, task sequences, numbers, strings, etc.) to a list. For detailed information on how Lists work, see the List shared asset and Global Lists. When this activity is first added to a process flow, a red exclamation mark shows up to the right of the activity notifying you that a link to a List is required for this activity to function correctly. To link this activity to a List, click the exclamation point and then click on a list object to select it. Alternatively, you can create a dynamic reference by setting the value for the List property (such as using a label value or looking up a value in a global table). By default, this activity does not finish until the entry is pulled from the list. This means that a token will remain at a Push to List activity until the Push Value has been pulled off the list. The default Push Value is the entering token. Pushing the entering token to a list and waiting for it to be pulled allows for easy token synchronization. (See Why Use Lists in Process Flow for more information about token synchronization.) Both tokens sync with each other through the pushing/pulling mechanism, and the pushing token gets access to the token that pulled it (through the Assign Puller To property), and vice versa (through the Pull From List 's Assign To property). You can use the Max Wait Timer to cause the token to push a value to a list and then move on to additional activities. Connectors The Push to List activity allows multiple connectors out. However, tokens automatically released from this activity will be released through the first connector. Only manually released tokens have the opportunity to exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Push to List activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. List The List box displays the name of the List to which this activity will push. If you linked to a List by clicking on the red exclamation mark next to the Push to List activity, then the name of the List you linked to will show up in this box. You can also manually type in the name of the List or create a dynamic reference here in this box. Push Value The object or value that is pushed to the list. By default, the entering token will be pushed to the list. But it is also possible to push an object, number, string, node, or array to the list when the token enters the activity instead. Assign Puller To Assigns a reference on the specified label/node to the object that pulled the entry from the list. See the Assign To section of Common Properties for more information. Partition ID This will push the value to a certain partition within the list. Use Max Wait Timer The max wait timer will be evaluated if the token has not pulled its required amount after the specified time. See Max Wait Timer for more information. Keep On List On Early Release If checked and the token is manually released before it's Push Value was pulled from the list, the pushed value will be kept on the list to be pulled at a later time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/PullFromList/PullFromList.html",
        "title": "Pull From List",
        "content": "Overview and Key Concepts The Pull From List activity will pull one or more values from a list. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to a List is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a List object, or the reference may be dynamic by setting the value for the List property. By default, this activity does not finish until the it has successfully pulled everything that it required from the list. This means that a token will remain at a Pull From List activity until the Require Number of values has been pulled off the list. You can use the Max Wait Timer to cause the token to attempt to pull a value from the list and then move on to additional activities. The process of pulling a value from a list does not cause that token or object to be physically moved. Instead, a reference to the pulled value can be stored on the pulling token. This reference can be used later in other activities. Pulling From a Resource The Pull From List activity can also be used with a Resource shared asset. The Resource must be using a list in order for a Pull From List activity to be able to connect to the Resource. This can be done by one of the following: Defining a Queue Strategy on the Resource shared asset. Defining a Default Query on the Resource shared asset. Linking the Resource shared asset to a Global List or a List shared asset. Using a Pull From List activity instead of an Acquire Resource activity will give you more options for what and how you want to acquire the resource(s). Use a Release Resource activity to released the resource that was pulled. Connectors The Pull From List activity allows multiple connectors out. However, tokens automatically released from this activity will be released through the first connector. Only manually released tokens can exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Pull From List activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. List Reference The reference to the List that this activity is pulling from. Request Number This defines how many values you want to pull. The request number must be greater than or equal to the Require Number . If more values than the require number are available when the token initially pulls, then the token will pull those additional values, up to the request number, and then immediately release the token. If the request number is zero, then the pull operation will become a mere querying operation. The pull will retrieve all objects on the list that meet the query filter, but it will not remove any values from the list. Require Number This defines the minimum number of values that you need to pull. If the list has insufficient values for the require number, a back order will be created and the token will wait in the activity until the required number of values is available. If the require number is zero then the activity will always finish immediately, returning the amount that it successfully pulled. In this case no back order will be created. Assign To Assigns a reference on the specified label/node to the value(s) were pulled from the list. See the Assign To section of Common Properties for more information. Query / Object / Array The conditions which specify which values to pull. This takes one of the following forms: SQL Query - You can use the button for help in constructing this query. Object - this will attempt to pull the specified 3D object. This can also be a reference to any other sort of treenode you wish to pull. Array - the array of possible values you are trying to pull. Only values explicitly listed in the Array will be pulled. Partition ID Defines which partition in the list to pull from. Puller Defines the puller object. This may be important if the query accesses fields that are dynamic and based upon the puller. All or Nothing If checked, no values will be pulled from the list until the entire Require Number of values can be pulled at one time. Otherwise, values will be pulled as they become available. Leave Entries On List If checked, all values that are 'pulled' from the list will remain on the list. The values will still be assigned to the Assign To label node. This can be useful for querying the list when specific data is added, or for using the list as an informational database. This option behaves like the All or Nothing in that no values will be 'pulled' until all values are available. Use Max Wait Timer The max wait timer will be evaluated if the token has not pulled its required amount after the specified time. See Max Wait Timer for more information. Use Max Idle Timer The max idle timer will be evaluated each time a value is pulled from the list by the token. See Max Idle Timer for more information. Keep Back Order On Early Release If checked and the token is manually released before it was able to pull its required amount, the back order will be kept on the list to be fulfilled at a later time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/Resource/Resource.html",
        "title": "Resource",
        "content": "Overview and Key Concepts This shared asset represents an asset with a limited supply that can be acquired and released. For example, three manufacturing stations might all share one tool. The tool is modeled here as a Resource. When a station uses the tool, it would be acquiring the Resource. Once the Resource has been acquired, nothing else can acquire it until the acquiring token has released it. Resources are useful for modeling timing constraints, where multiple tokens need to use a limited pool of assets. A Resource is acquired by an Acquire Resource activity and released by a Release Resource activity. Resource Operation Modes The Resource can operate in two modes, as follows: Numeric Mode When the Resource operates in numeric mode, it simply keeps track of a number in determining its availability. This number starts at zero. When activities acquire the Resource, it increments the number, and when activities release the Resource, it decrements the number. If an Acquire activity is requesting a quantity that is greater than the Resource has available as defined by the Count property, then the token will be unable to acquire the resource. To put the Resource into numeric mode, define its Reference property as Numeric . When in numeric mode, the Count property can dynamically change during the simulation. It will be reevaluated every time a token attempts to acquire a resource and whenever a resource is released. This can be useful if you want to simulate a resource that changes based upon the time of day or other model parameters. Even if the total resource's count drops below the number of resources that have been acquired, tokens will keep their acquired value until they release their resource in a Release activity. Numeric mode can also be used to simulate non-discrete resource quantities. For example, you can give the Resource a Count of 5.5, and acquire quantities like 1.5, etc. Object Mode When the Resource operates in object mode, it links to a discrete set of objects in the model. This may be a task executer, fixed resource or other 3D object, an array (objects, strings or numbers) or a Group of objects. When using a TE or FR object, the Count property can duplicate objects when needed. When using arrays, a Dispatcher or Groups, the Count property defines how many objects in the set can be used. When tokens acquire the Resource, the Resource gives them back a reference to specific acquired object(s), instead of just managing an availability number. In this mode, the Count is established at the start of the simulation and cannot change after that. Duplicating Objects If the Resource is in object mode and its Reference property references an object in the model, the Count property will be used to duplicate the object by count - 1 , where the referenced object is the first resource available. Once duplicated, the task executer or fixed resource objects may be moved in the 3D view and their properties may be individually modified. Properties set on the linked resource will NOT be pushed down to the duplicated objects once they have been created. To propagate changes from the referenced object to the duplicated objects (that is, labels), set the Count to 1, reset the model, then set the Count back to the original value. Alternatively, you can select all of the objects and modify values in Quick Properties or use the Edit Selected Objects window. It may be useful to tie the Count property to a Process Flow Variable so that the count may be changed through the Experimenter over multiple replications. The resource will add new objects to the model and remove unused objects as needed. Adding and Removing Resources If the Count is greater than the previous Count, the referenced object will be duplicated and the new object will be at the same location as the referenced object. If the Count is less than the previous Count, the last duplicated objects will be deleted. This means if you duplicated objects and then placed them throughout the model, the Experimenter should only remove resources not add them as doing so may cause your objects to be in incorrect locations. Using A List By default, acquire requests are processed in FIFO (first in first out) order, and in object mode the resource objects themselves are distributed in FIFO order. If a Default Query or a Queue Strategy is used on the Resource or if any Acquire Resource activity that references this Resource uses a Query , the Resource will switch over to using a List. This List will be internally owned by the Resource. This allows the Resource to utilize the built in SQL functionality of the List to determine which tokens to allocate resources to first and which resources should be allocated. Through the Advanced button, you can set up additional fields for the List that can be used in the Query and Queue Strategy properties. The Resource can also be used as a pass-through to a List shared asset by referencing the List in the Reference field. You can also reference a Global List. If a Resource is using a list then the Pull From List activity can be used like an Acquire activity. This gives you more options for what and how you will allocate resources. Connectors Only Acquire Resource and Release Resource activities can be connected to a Resource. If the Resource is using a List to manage its assets, then a Pull From List activity can also be connected to the Resource. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Resource shared asset: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Reference This box will only be evaluated on reset. It may be either Numeric , a reference to an object in the 3D model, a Group, an array (objects, strings or numbers) or any other object or node. Count The number of resources that are available to acquire. If the Reference property is set to a Group, a Dispatcher (team) or array (objects, strings or numbers), the count should be less than or equal to the number of objects in the Group/Team/array. If a Group/Team/array has 10 objects in it and the count is set to 5, only the first 5 objects in will be used. Reorder the objects to specify which 5 objects will be used. This can be a very useful features when implemented with the Experimenter. The Count can be set to a Process Flow Variable which is then set as an Experimenter variable which changes for each scenario. If Reference is not Numeric , this property will only be evaluated on reset. If Reference is a direct reference (that is, to a task executer or fixed resource), the object will be duplicated. See Duplicating Objects for more information. Type Resources can be defined globally or locally. If the Resource is in a General Process Flow or connected to a Group or an array, the Resource will be globally available and this property will be unavailable. Otherwise, it can be set to Local so only tokens in the same Process Flow instance will be competing for the same resources. If Type is set to Local and Reference is linked to a Dispatcher, Task Executer or Fixed Resource object, the object will be duplicated for each instance of the Process Flow. Queue Strategy If a number of activities are trying to acquire resources and no resources are available, their acquire requests will stack up in a queue. By default this is FIFO (first in first out or first come first serve). Defining a Queue Strategy gives you control of who is given resources first. The queue then becomes back orders on a list and a SQL command is used to determine the order of the queue. Using a Queue Strategy with Numbers If the Resource is set to Numeric , the Queue Strategy will be grayed out. If you want to use a Queue Strategy but you want to use numbers, or the value of the acquired resource is not important, you can use an array of numbers. In this case you would set the Reference field to an array. For example, [1, 2, 3, 4, 5] or [1, 1, 1, 1, 1] Then set the Count field to be either 5 (for this example) or choose the Array Size option from the drop down. Setting the Reference to an array of numbers will push each number to a list that is internal to the Resource. The Queue Strategy can then be used to specify which tokens have priortiy for acquiring the next resource. Default Query You can define a default query that will be used if no query is used by an Acquire activity. These queries allow you to define what resource should be allocated. View Entries Only valid if the Resource is using a list (see Using a List ) this will display all of the available resources. View Back Orders Only valid if the Resource is using a list (see Using a List ) this will display all of the tokens attempting to acquire resources. Advanced Only valid if the Resource is using a list (see Using a List ). Opens the List properties page."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/AcquireResource/AcquireResource.html",
        "title": "Acquire Resource",
        "content": "Overview and Key Concepts This activity acquires resources from a Resource shared asset. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to a Resource is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a Resource object, or the reference may be dynamic by setting the value for the Resource Reference field. When acquiring a resource, the acquired value (number, task executer, fixed resource, etc.) will be assigned to a label on the acquiring token. This value or reference can be used in other activities to affect the logic of the process flow. Acquiring Multiple Resources If multiple resources are acquired by a single activity or if multiple Acquire activities share the same Assign To Label , an array will be created on the label with references to all of the acquired resources. The most recent acquired resource will appear as the first index in the array (index 1) and previously acquired resources will be pushed to the end of the array in sequential order. Connectors The Acquire Resource activity allows multiple connectors out. However, tokens that successfully acquire a resource and are automatically released from this activity will be released through the first connector. Only manually released tokens have the opportunity to exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Acquire Resource activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Resource Reference The Resource shared asset this activity is linked to. Quantity The number of resources to acquire. If the Resource does not have sufficient resources available, the token will wait in this activity until the token is able to acquire the total number of resources returned by this field. If the Resource is in object mode then this field will be read as an integer. If Resource is operating in numeric mode then this field will be evaluated as a floating point or real number. Assign To Label Once the token has acquired from the resource, a reference to what was acquired will be added to the label on the token as defined by the Assign To Label box as either a single reference or an array of references. If data already exists on the label, the references will be prepended to the beginning of the array. This must be a token label as the label will be used to later release the resource using a Release Resource activity. However, it does not have to be a label on the entering token and could reference a parent, sibling or other token's label. If the Resource is in numeric mode , the label will be assigned the quantity acquired which will always be the same as the Quantity box. Query / Object / Array The conditions which specify which resources to acquire. This takes the form of an SQL query, which can be constructed from the drop down menu. Only the WHERE and ORDER BY SQL keywords are available. This is only applicable in object mode . For more information see the SQL Queries page. Use Max Wait Timer The max wait timer will be evaluated if the token has not acquired its resources after the specified time. See Max Wait Timer for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/ReleaseResource/ReleaseResource.html",
        "title": "Release Resource",
        "content": "Overview and Key Concepts This activity releases resources from a token that have been acquired by an Acquire Resource activity. The resources will automatically return to the Resource activity they were acquired from. If the Resource(s) Assigned To does not return a label that has a resource assigned to it, this activity will do nothing and the token will be immediately released to the next activity. Once a resource is released back to a Resource shared asset, the Resource will go through and check any tokens waiting in an Acquire activity, attempting to acquire a resource, and see if it's able to acquire it's requested resource. Releasing Resources When Multiple Were Acquired If multiple resources were acquired by a single Acquire activity while in object mode , a treenodearray of references to the acquired resources will be created. When releasing these resources using the Release Resource activity, not all of acquired resources will be released by default. By default, the Resource(s) to Release box is set to Last Acquired . If two Operators were acquired by one Acquire activity, the Last Acquired option will only release one of the operators. This can allow you to easily begin an operation with multiple resources and release them one at a time. You can acquire resources from multiple Resource shared assets and assign them to the same label. Doing so will create an array where the last acquired resource will be index 1 of the array. For example, a label with the resources {/Operator3, /Operator2, /Operator1} acquired Operator3 last and Operator1 first. Releasing the Last Acquired will release Operator3 leaving you with the array {/Operator2, /Operator1}. When Operator1 and Operator2 are released, the label storing these resources will be deleted. Accessing Resources from an Array As you acquire multiple resources on the same label, as in the example above, you may need to access those resources to give them tasks to complete. If your resources are assigned to the label resource with the value {/Operator3, /Operator2, /Operator1}, using Label: resource or getlabel(token, \"resource\") in a property like Executer / Task Sequence of one of the Task Sequence activities will return the reference to the resource at the first index of the array. In this case, Operator3. To access one of the other operators, you can use a Value/Object From Array pick option. Releasing Numeric Resources Multiple numeric resources can also be acquired and assigned to the same label. Doing so will create a double array on the label. For example, if three Acquire activities are used to acquire 1 resource from three different Resource shared assets, and each resource is assigned to the label resource , the resource label on the token will display an array of {1.00, 1.00, 1.00}. In this case where quantities are equal, it is not guaranteed that the resources will be released in the correct order when using pick options like First Acquired and Array/Range of Resources . To ensure the correct resource is released you can pass a reference to the Resource shared asset into the Resource(s) to Release property. However, if these same Acquire activities acquire different quantities, say 1, 2 and 3, the Release Resource activity will be able to correctly identify which resource is being released using the First Acquired and Array/Range of Resources pick options. Array Type Mismatch If you try to acquire a numeric resource on the same label as a previously acquired object resource, you'll get an Array Type Mismatch error. Resources must be of the same type to be acquired on the same label. This is due to the nature of arrays only handling one type each (treenodearray, intarray, doublearray, stringarray). Connectors The Release Resource activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Release Resource activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Resource(s) Assigned To Where the resource(s) to release are located. The return value of this field should be a label on a token where an Acquire Resource activity assigned the acquired resource to. Resource(s) to Release The conditions which specify which resources to release. If multiple resources were acquired and assigned to the same label, the label will display an array of all the acquired resources. To release a specific resource from the array, return the index of the array or an intarray of multiple indexes. You can also return a reference to the Resource shared asset that was acquired from. Doing so will search the array for resources acquired from the shared asset and release all of them. This can be useful when you are unsure of which index to release, or when releasing Numeric Resources as described above in Releasing Numeric Resources . Assign Released Resource(s) To Assigns a reference on the specified label/node to the released resource or resources. This can be helpful if you need to maintain a reference to a resource for use in a later Acquire activity. See the Assign To section of Common Properties for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/Variable/Variable.html",
        "title": "Variable",
        "content": "Overview and Key Concepts This shared asset allows you to store any kind of data and then read or change that data. The Variable is unlike the other shared assets in that it isn't a limited asset. Tokens can read and set a Variable freely without any delay or interruption. The Variable can be used just like a label on a token or other object but now you have a central reference to that value that can be easily accessed throughout your process flow. Additionally you get the added feature of being able to listen to the Variable being changed or even when it is read. A Variable is changed by a Set Variable activity and read by a Get Variable activity. Variable Values The Variable is very flexible in what it can point at or what its value can be. Here are some possibilities: Number - If a number is entered into the Variable or Value box, this will be the initial value of the variable on reset. The value of the Variable is stored internally. You can change the value to another number or even change the value to a string, object, array etc. String - Behaves the same as a Number. Array - Behaves the same as a Number. Object - Behaves the same as a Number. Node - If the Variable or Value box references a node with data on it, then the value will be the value of the node. When you set the Variable, the value of the node will be set. As with the number, you can set the Variable to a number, string, object etc. and then value of the node will reflect the new value. Tracked Variable - You can reference a Global Tracked Variable , a tracked variable stored on a node or table cell or you can create an Internal Tracked Variable. Internal Tracked Variables that have their Type set to Local will create a variable for each instance of the process flow. Table Cell - Behaves the same as a node. For example: Table(\"GlobalTable1\").cell(1, 1) Table Value - If you get the value from a table using Table(\"GlobalTable1\")[1][1] then the Variable will use this as the initial value and store it internally. This will behave just like a Number. Setting the Variable will only set the internal value and will not alter the value in the table. Global Variable - You can reference a Global Variable by using the and sampling the global variable from the Toolbox. This will give a reference to the Global Variable's definition in the MODEL:/Tools/GlobalVariables folder. Getting the value of the Variable will get the current value of the global variable. Setting the value will set the Global Variable. NOTE: Using a Wait for Event or Event-Triggered Source on a Variable that is referencing a Global Variable will not allow you to listen to the Global Variable being set using code. It will only listen to changes that occur using the Set Variable activity. Listening for Changes If you are using a Wait for Event or Event-Triggered Source to listen for changes to a Variable, the Variable must be either set using a Set Variable activity, or the node that is being referenced must have Tracked Variable data. For example, if the Variable or Value box contained Table(\"GlobalTable1\").cell(1, 1) and cell 1,1 had Tracked Variable data, then setting the value of that cell using Table(\"GlobalTable1\")[1][1] = 4; anywhere in your model will trigger the Wait for Event or Event-Triggered Source. Connectors Only Get Variable and Set Variable activities can be connected to a Variable. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Variable shared asset: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Variable or Value This box will only be evaluated on reset. See the Overview and Key Concepts section above for more information. Type Variables can be defined globally or locally. If the Variable is in a general process flow or connected to an object, table cell, global variable or other node, the Variable will be globally available and this property will be unavailable. Otherwise, it can be set to Local so only tokens in the same Process Flow instance will be using the same Variable. View Variable... Opens a viewer window displaying the current value of the Variable. Internal Variable Properties The following variables can set to Internal which will create a new variable for each instance of the process flow if its type is set to Local . Internal Tracked Variable If the option Internal Tracked Variable is selected from the drop down of the Variable or Value box , the properties will change to: These properties allow you to define what type of tracked variable is used, what its initial value is on reset, and various options for the tracked variable. The View Variable... will also display a different viewer:"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/GetVariable/GetVariable.html",
        "title": "Get Variable",
        "content": "Overview and Key Concepts This activity gets the value of a Variable shared asset. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to a Variable is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a Variable object, or the reference may be dynamic by setting the value for the Variable Reference property. When getting the value of a Variable, the value (number, string, node array, etc.) will be assigned to a label or node as defined by the Assign to property. This value can be used in other activities to affect the logic of the process flow. Connectors The Get Variable activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Get Variable activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Variable Reference The Variable shared asset this activity is linked to. Assign To Assigns the read value to the specified label/node. See the Assign To section of Common Properties for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/SetVariable/SetVariable.html",
        "title": "Set Variable",
        "content": "Overview and Key Concepts This activity sets the value of a Variable shared asset. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to a Variable is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a Variable object, or the reference may be dynamic by setting the value for the Variable Reference property. Variables can be set to many different types of data using the Value property. This includes numbers, strings, node references, arrays, etc. The Rate property is specific to kinetic tracked variables and is ignored for all other variable types. If you want to set the rate of a kinetic tracked variable but not change its current value, you can remove the value by clicking the Delete button to the right of the Value property. Connectors The Get Variable activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Get Variable activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Variable Reference The Variable shared asset this activity is linked to. Value The value to set the Variable shared asset to. Rate The rate to set the Variable shared asset's kinetic tracked variable to."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/Zone/Zone.html",
        "title": "Zone",
        "content": "Overview and Key Concepts The Zone keeps statistics for a group of activities within process flow. Optionally, it can restrict access to those activities, based on the tokens within those activities. Connectors Only Enter Zone and Exit Zone activities can be connected to a Zone. See Adding and Connecting Activities for more information. Properties The following image shows the property for the Zone shared asset: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Type Zones can be available globally or locally. The Zone keeps statistics and enforces its Max Content and Constraints per instance. Use Max Content The Use Max Content checkbox determines whether or not the Zone will use a maximum content. The Max Content box is enabled when this box is checked, and disabled when it is not. Max Content If Use Max Content is checked, the value specified in this box determines the maximum number of tokens that can be in the Zone at any given time. More Properties The More Properties button opens the Zone Properties Window. This window allows you to create and edit Subsets, Calculations, and Constraints. It also allows you to manage some of the Zone's advanced features. It has five tabs, which are explained in the following sections. The Subsets Tab The following image shows the Subsets tab: Each property is described in the following sections. Add Subset The Add Subset button adds a new Subset to the Zone. It is the topmost button on the tab. Subset Name The Subset Name box allows you to edit the name of the subset. Token Selection Criteria The Token Selection Criteria box allows you to edit the Token Selection Criteria for the Subset. Add Calculation The Add Calculation button allows you to add a new calculation to the current Subset. It is found inside the Subset Calculations area. Evaluate Calculations On Exit Turns on the Evaluate Calculations On Exit option for the Zone. Calculation Name You can edit the name of each Calculation by editing the text in this column. Label/expression to sum You can edit the expression to sum by edition the text in this column. The Subset Constraints Tab The following image shows the Subset Constraints tab: Each property is described in the following sections. Add Constraint Click the Add Constraint button to add a Constraint to a specific Subset. Calculation You can choose which Subset-related value to constrain using the Calculation drop-down list box. Value Enter a limit for the value specified in the Calculation drop-down list box. The Partitions Tab The following image shows the Partitions tab: Each property is described in the following sections. Partition By You can use this field to specify how the Zone should partition its tokens. Add Calculation The Add Calculation button allows you to add a new calculation to all Partitions. It is found inside the Partition Calculations area. Calculation name You can edit the name of each Calculation by editing the text in this column. Label/expression to sum You can edit the expression to sum by edition the text in this column. The Partition Constraints Tab The following image shows the Partition Constraints tab: Each property is described in the following sections. Add Partition Constraint The Add Partition Constraint button adds a new Partition Constraint to the Zone. It is the topmost button on the tab. Calculation You can choose which Partition-related value to constrain (for all Partitions) using the Calculation drop-down list box. Add Exception You can use the Add Exception button to add an exception to the Partition Constraint. Rows You can use this field to specify how many exceptions there are to this Partition Constraint. This is especially useful if you are copying the data from an Excel spreadsheet. Changing this field will add or remove exceptions as necessary. Partition This field specifies which particular partition will be affected by the exception. Note that this field accepts text or number data. Limit This field the limit for the partition involved in the exception. The Advanced Tab The following image shows the Advanced tab: Each property is described in the following sections. Queue Strategy The Queue Strategy box allows you to edit the expression for the Queue Strategy, which should be an ORDER BY expression. Enforce Queue Order Check the Enforce Queue Order box to have the Zone enforce the request queue order. Wait for Simultaneous Arrivals Before Entry Check the Wait for Simultaneous Arrivals Before Entry box to have the Zone allow multiple tokens to arrive in the same instant, before evaluating the Queue Strategy."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/EnterZone/EnterZone.html",
        "title": "Enter Zone",
        "content": "Overview and Key Concepts This activity allows tokens to enter a Zone shared asset. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to a Zone is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a Zone object, or the reference may be dynamic by setting the value for the Zone Reference field. Connectors The Enter Zone activity allows multiple connector out. However, tokens automatically released from this activity will be released through the first connector. Only manually released tokens have the opportunity to exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Enter Zone activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Zone Reference The reference to the Zone that the token is trying to enter. Enter For You can control which tokens will enter the Zone when the entering token arrives at this activity using the Enter For box. Use Max Wait Timer The max wait timer will be evaluated if the token has not entered the zone after the specified time. See Max Wait Timer for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedAssets/ExitZone/ExitZone.html",
        "title": "Exit Zone",
        "content": "Overview and Key Concepts This activity allows tokens to exit a Zone shared asset. When this activity is first created, a red exclamation mark shows up to the right of the activity notifying you that a link to a Zone is required for this activity to function. This link may be a direct pointer which can be created by clicking on the exclamation mark and then clicking on a Zone object, or the reference may be dynamic by setting the value for the Zone Reference field. Connectors The Exit Zone activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Exit Zone activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Zone Reference The reference to the Zone shared asset that the token is exiting. Exit For You can control which tokens will exit the Zone when the entering token arrives at this activity using the Exit For box. Non-Member Exit Define what should happen if the exiting token never entered the Zone. The possible options are: Do Not Allow - An error will be thrown and the model stopped. Ignore - The exiting token will be ignored. Update Statistics - The Zone will update its statistics to reflect a token exiting."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Warehousing/FindItem/FindItem.html",
        "title": "Find Item",
        "content": "Overview and Key Concepts The Find Item activity queries the model's Storage System for items stored in warehousing objects . Queries will be executed one at a time, in order from top to bottom. These queries use SQL syntax. Each query can have up to five dynamic parameters passed into it using the $ syntax. These five parameters are the same for all queries in this activity. They can refer to a token, 3D object or other values. For example a query might look like: WHERE item.slot.bayID == $1.bay With a $1 parameter of: token This query tries to match the item's current bay to the bay label on the token. If a query finds a matching item, the activity will stop evaluating queries and the On Success trigger code will fire. This can be used to determine which query was successful, set labels or perform other logic. The Find Item activity will then assign the found item to a label that can be used in later activities. This item referenced is the 3D flowitem. To get a reference to the Storage.Item , use the following code: Storage.Item storageItem = Storage.Item(token.item); It is not required to assign the item to a label. You may just want to find the item and mark it as ready to leave the storage object. This can be done with the Mark Item as Outbound property. By default, the token will wait in the Find Item activity until an item is found. The queries will be reevaluated each time a new item enters the storage system. You can specify a Max Wait Timer and release a token after a specified amount of time if it has not found an item. Connectors The Find Item activity allows multiple connectors out of the activity. However, tokens automatically released from this activity will be released through the first connector. Only manually released tokens can exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Find Item activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Query Define any number of queries to find an item in the model's Storage System . This takes the form of an SQL query. You can use the button for help in constructing this query. On Success The On Success trigger will be evaluated if its associated Query is successful in finding an item. Parameters The parameters panel is used to define dynamic values that are passed into the queries. Use $1, $2, $3, $4 and $5 in a query to reference the parameter value. Parameters are not required. Assign To Assigns a reference on the specified label/node to the item that was found in the Storage System . See the Assign To section of Common Properties for more information. FIFO If checked, the First In First Out rule will ensure that the order tokens arrive at the Find Item activity is the same order they will leave. Mark Item as Outbound If checked, the assigned slot of the found item is cleared, and its state becomes outbound, signaling that the item is about to exit the storage object. Items that are marked as outbound will be ignored in subsequent item queries, ensuring that two unassociated processes don't lock onto the same item. Use Max Wait Timer The max wait timer will be evaluated if the token has not found an item after the specified time. See Max Wait Timer for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Warehousing/FindSlot/FindSlot.html",
        "title": "Find Slot",
        "content": "Overview and Key Concepts The Find Slot activity queries the model's Storage System for slots in warehousing objects . Queries will be executed one at a time, in order from top to bottom. These queries use SQL syntax. Each query can have up to five dynamic parameters passed into it using the $ syntax. These five parameters are the same for all queries in this activity. They can refer to a token, 3D object or other values. For example a query might look like: WHERE Type == $1.Type With a $1 parameter of: token This query accesses the Type label from the queried slots and tries to match it to the Type label on the token. If a query finds a matching item, the activity will stop evaluating queries and the On Success trigger code will fire. This can be used to determine which query was successful, set labels or perform other logic. The Find Slot activity will then assign the found slot to a label that can be used in later activities. This slot is of type Storage.Slot . To get a reference to the Storage Object, use the following code: Storage.Object storageObject = token.slot.as(Storage.Slot).storageObject; Object rack = token.slot.as(Storage.Slot).storageObject; It is not required to assign the slot to a label. You may want to immediately assign an item to the slot. This can be done with the Assign Slot to Item property. This should be a reference to a 3D flowitem. This property is not required. By default, the token will wait in the Find Slot activity until a slot is found. The queries will be reevaluated each time an item exits the storage system, freeing up space in a slot. You can specify a Max Wait Timer and release a token after a specified amount of time if it has not found a slot. Connectors The Find Slot activity allows multiple connectors out of the activity. However, tokens automatically released from this activity will be released through the first connector. Only manually released tokens can exit out a different connector. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Find Slot activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Query Define any number of queries to find a slot in the model's Storage System . This takes the form of an SQL query. You can use the button for help in constructing this query. Alternatively you can define an address based upon the Storage System address schemes to find a specific slot. On Success The On Success trigger will be evaluated if its associated Query is successful. Parameters The parameters panel is used to define dynamic values that are passed into the queries. Use $1, $2, $3, $4 and $5 in a query to reference the parameter value. Parameters are not required. Assign To Assigns a reference on the specified label/node to the slot that was found from the Storage System . This slot is of class Storage.Slot . See the Assign To section of Common Properties for more information. This property is not required. Assign Slot to Item Assigns the found slot from the Storage System to the defined item's assignedSlot property. The item may then be moved into the slot's storage object either immediately or through some transit process. Once the item is moved into the storage object, its assigned slot will become its current slot . This property is not required. FIFO If checked, the First In First Out rule will ensure that the order tokens arrive at the Find Slot activity is the same order they will leave. Use Max Wait Timer The max wait timer will be evaluated if the token has not found a slot after the specified time. See Max Wait Timer for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Coordination/Split/Split.html",
        "title": "Split",
        "content": "Overview and Key Concepts The Split activity splits the token into multiple tokens and sends one out each outgoing connector. This activity is similar to the Create Tokens activity, except that the quantity of tokens to create and the destination of each token is determined by the number of outgoing connectors. A Split ID (a reference to the original token) can be added to a user-specified label on each token. This is useful for coordinating with the other split tokens. See Coordination for information on coordinating tokens. Connectors The Split activity allows any number of connectors out. The Split does not allow other activities to be snapped to it as doing so would remove all connectors from the Split. The number of outgoing connectors will affect the behavior of this activity. See Connectors and Coordination Activities for more about the unique behavior of connectors in Coordination activities. Properties The following image shows properties for the Split activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Assign Split ID To A reference to the original token will be stored on the label specified in the Assign Split ID To box on each token. Create As Defines the relationship of the original token to the created token(s). Independent Tokens - Created tokens will have no association with the original token. Child Tokens - Created tokens will be child tokens of the original token. Sibling Tokens - Created tokens will be sibling tokens of the original token. In other words, they will have the same parent as the original token. Label Access For information on Label Access, see the Label Access section of the Sub Process Flows page."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Coordination/Join/Join.html",
        "title": "Join",
        "content": "Overview and Key Concepts Tokens wait at the Join activity until one token arrives from each incoming connector. The token from the first connector (rank 1) is then released out the outgoing connector and the other tokens are destroyed. Specifying a Partition ID makes tokens wait only for other tokens in the same partition. This is useful for coordinating with other tokens of the same type. See Coordination for information on coordinating tokens. Connectors The Join activity only allows one connector out. The number of incoming connectors will affect the behavior of this activity. See Connectors and Coordination Activities for more about the unique behavior of connectors in Coordination activities. Properties The following image shows properties for the Join activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Partition ID Defines which partition tokens will use. Use Max Wait Timer The max wait timer will be evaluated if the token has not pulled its required amount after the specified time. See Max Wait Timer for more information. Use Max Idle Timer The max idle timer will be evaluated each time a value is pulled from the list by the token. See Max Idle Timer for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Coordination/Synchronize/Synchronize.html",
        "title": "Synchronize",
        "content": "Overview and Key Concepts Tokens wait at the Synchronize activity until one token arrives from each incoming connector. This activity is similar to the Join activity, except that there will be an outgoing connector corresponding to each incoming connector. The token from the first incoming connector is then released out the first outgoing connector, the token from the second incoming connector is released out the second outgoing connector, and so on. Specifying a Partition ID makes tokens wait only for other tokens in the same partition. This is useful for coordinating with other tokens of the same type. See Coordination for information on coordinating tokens. Connectors The Synchronize activity allows any number of connectors out as long as the number of outgoing connectors matches the number of incoming connectors. The Synchronize does not allow other activities to be snapped to it as doing so would remove all connectors from the Synchronize. The number of incoming and outgoing connectors will affect the behavior of this activity. See Connectors and Coordination Activities for more about the unique behavior of connectors in Coordination activities. Properties The following image shows properties for the Synchronize activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Partition ID Defines which partition tokens will use. Use Max Wait Timer The max wait timer will be evaluated if the token has not pulled its required amount after the specified time. See Max Wait Timer for more information. Use Max Idle Timer The max idle timer will be evaluated each time a value is pulled from the list by the token. See Max Idle Timer for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Preemption/SaveTokenContext/SaveTokenContext.html",
        "title": "Save Token Context",
        "content": "Overview and Key Concepts The Save Token Context activity saves the current activity context of one or more tokens to a user-defined label on those tokens. The saved context includes the token's current activity, as well as any activity-related data. For example, if a token is in a Delay activity, it will save off the total delay time as well as how far into the delay the token is currently. The Save Token Context activity is used for process flow preemption. See Preemption for information on how to implement preemption. Connectors The Save Token Context activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Save Token Context activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Token(s) Define the target token(s) whose context you want saved. See Connecting Preempting Process Flows for more information. Save To Label Name Here you enter the name of the label you want to save the context on. This label will be saved on the target token(s) (not necessarily the token executing the Save Token Context activity)."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Preemption/ReleaseToken/ReleaseToken.html",
        "title": "Release Token",
        "content": "Overview and Key Concepts The Release Token activity aborts the current activity of one or more tokens and sends them to a new activity. This activity is used in process flow preemption. See Preemption for information on how to implement preemption. Connectors The Release Token activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Release Token activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Token(s) Define the target token(s) who you want to release. This should usually match the Token(s) field of a Save Token Context activity. See Connecting Preempting Process Flows for more information. Release To Define the activity you want to release the token(s) to. Usually you will use the sampler button to directly choose the destination activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Preemption/RestoreTokenContext/RestoreTokenContext.html",
        "title": "Restore Token Context",
        "content": "Overview and Key Concepts The Restore Token Context activity restores one or more tokens to a saved activity context . The Restore Token Context activity is used in process flow preemption. See Preemption for information on how to implement preemption. Connectors The Restore Token Context activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Restore Token Context activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Token(s) Define the target token(s) whose saved context you want restored. This should usually match the Token(s) field of a Save Token Context activity. See Connecting Preempting Process Flows for more information. Saved Label Name Define the name of the label that has context information saved on it. This should match the label name defined in a previous Save Token Context activity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Display/Text/Text.html",
        "title": "Text",
        "content": "Overview and Key Concepts The Text object is a multiline custom text box that can be placed anywhere inside a process flow. The Text object is for display only, meaning that it doesn't have any other function or purpose other than visual display. Inserting Line Breaks You can insert a line break by pressing Ctrl-Enter. Connectors Text objects do not allow incoming or outgoing connectors. They are for visual use only. Properties The following image shows properties for Text Display Objects: Each of these settings will be explained in the following sections. Name You can use the Name box to change the name of the text object. Lock To You can use the Lock To box to attach the Text object to an activity in your process flow. When the Text is locked to an object, it will move when that activity is moved. Use the Sampler button to select the activity the Text object should be locked with. Rotation Using the Rotation box, you can set the angle (in degrees) at which the Text object will display. The base line is horizontal and the rotation is to the right. For example, a rotation value of 90 will result in the following image: Height, Width Adjust the size of the text object by setting the height or width of the box. Shrink Text on Overflow When checked, the font size of the text will automatically be decreased if the contents are too large to fit inside the text box. Billboard When checked, the text object will maintain its relative position in the process flow window and won't move when the view is scrolled. Dynamic Text When checked, it will cause the Text Object to display dynamic values during a simulation run. The Text object can, for example, be set to display the value of a process flow variable or label. You can possibly use these variables or labels to display relevant data or statistics during a simulation run. Font There are a variety of font properties you can use to change the text display: The font menu has 13 common fonts available. You can change the font size. You can make the text bold, italicized, or underlined. You can change the color of the text by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Display/Image/Image.html",
        "title": "Image",
        "content": "Overview and Key Concepts Use the Image object to add a custom image somewhere in your process flow. The Image object is a FlowChart object ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/Flowchart/Flowchart.html",
        "title": "Flowchart",
        "content": "Overview and Key Concepts There are many different Flowchart objects available in the Process Flow Library. You can use these shapes to build a classic flowchart in your process flow. You can also use them as visual containers that help organize, encapsulate, and visualize the activities in your process flow. When process flow activities are inside a flowchart container, they will move when the container is moved, as shown in the following animated image: You can also set the Flowchart object so that the activities disappear when you zoom out from the model. For example, in the following animated image, the flowchart objects are set to hide contents when the process flow is zoomed out by 75%: The Process Flow library has many different shapes available, including standard flowchart shapes: Connectors As shown in the animations above, flowchart objects can also be connected together using standard connectors. When flowchart containers have activities placed inside them, their connectors may include logic for determining token flow into and out of activities contained by the flowchart containers. Connectors Into a Flowchart Container When a flowchart container includes activity connectors directed into it, the container uses the following set of rules to determine which activity inside the container should be started when a token is sent through that connector. If you have defined the object's Start Activity property, tokens will be directed to that activity. When there is no Start Activity defined, the flowchart container will analyze the set of contained activities, looking for activities that have no input connectors. If there is a single Start activity with no input connectors, it will direct tokens to that start activity. If there is no single Start activity, then it will look for any single activity with no input connectors. If it finds such an activity, it will direct tokens to that activity. If there are no activities in the container at all, and the container has a single output connector, tokens will be immediately sent \"through\" the flowchart container, as if the container did not exist between its two connectors. If the flowchart object contains activitities, but it cannot find a single activity to start, then when a token is sent through a connector into the flowchart container, FlexSim will throw an error saying it could not determine which activity to start. There Must Be a Single Valid Start Activity In searching its contained activities, the flowchart container must be able to find a single activity that meets the desired criteria. If it finds more than one, or zero, sufficient activities according to a given rule, then it will throw an error, because it cannot determine which activity should be started. The Flowchart Container Does Not Search Activities Recursively In searching its contained activities, the flowchart container does not search activities inside of other flowchart containers. This can be useful if you have an activity that you specifically don't want to be resolved as a start activity in the container. Just put that activity into another internal flowchart container, and it will not be used as a start activity. Connectors Out of a Flowchart Container When a flowchart container includes output connectors, FlexSim will use the following logic to determine where to send tokens that finish a contained activity with no connectors going out of it. If the finishing activity is a Sink , then the token will be destroyed. If the activity is a Finish , and the token is a child token started as part of a Run Sub Flow , then the token will finish the subflow. In all other cases, if a token finishes an activity that has no output connectors, the flowchart container's output connections will become a surrogate for the activity's output connectors. In other words, the activity will behave as if its container's output connectors were its own connectors. Properties The following image shows the properties that are available for all Flowchart objects: Each of these properties will be explained in the following sections. Name You can change the name of the object using the Name box. See Name for more information about this property. Lock To You can use the Lock To box to attach the Image object to an activity in your process flow. When the Image is locked to an object, it will move when that activity is moved. Use the Sampler button to select the activity the Image object should be locked with. Rotation Using the Rotation box, you can set the angle (in degrees) at which the Flow Chart object will display. The base line is horizontal and the rotation is to the right. For example, a rotation value of 90 will result in the following image, which shows the object before and after rotation: Height The Height box the Flow Chart object's height. Width The Width box the Flow Chart object's width. Shape Type You can switch between the different kinds of flowcharting styles here. This will change the shape of the container accordingly. Hide Contents at Magnification You can specify a zoom level where when you zoom out further than that level the contents of this container will be hidden. Center Title When Contents Hidden When the Center Title When Contents Hidden checkbox is checked, the Container's title will be displayed in the center of the Container when the contents are hidden. Fill When the Fill checkbox is cleared, you will only be able to select the image by clicking on its edge. This setting allows you to prevent clicking and selecting the background image on accident. If you want to be able to click anywhere inside the Image object, check the Fill box. When the box is checked, the following properties will become available: Color - Change the color of the Flow chart object's background by using the color selector. Alternatively, you can use the Sampler button to select a color from any object in your simulation model or process flow. The Alpha slider changes the transparency of the Image object. Outline If you check the Outline checkbox, the border of the Flow Chart object will be visible. There are a variety of properties you can use to change the border display: Single or Double - Use these options to switch to from a solid black line or a double line (which looks like it has a white stripe running through it). Width - Sets the border's width. Style - Changes the line style of the border. Thickness - Changes the thickness of the border. Color - You can change the color of the border by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. The Alpha slider changes the transparency of the border. Image If you want to use a background image for your Flow Chart shape, use the Image box to choose the image. To browse for an image in your computer, click the arrow next to this box and select Browse from the menu. Start Activity The Start Activity property let's you expressly define which activity to start when a token is sent into a flowchart container's input connectors. If this property is not defined, then it will use default logic to determine which activity to start. Description The description property allows you to include a description of the flowchart object. This allows you to self-document your process flow."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/SharedProperties/SharedProperties.html",
        "title": "Shared Process Flow Properties",
        "content": "Introduction Some of the process flow objects have properties that they share in common. Each of these properties will be discussed in more detail in the following sections. Name All the activities and process flow objects have a Name box that you can use to edit its name. You can find this setting in Properties under the Activity Properties group. By default, the name of the activities and other process flow objects will be based on what kind of activity or object it is, as shown in the following image: In the example above, the activity is named Batch because it is a Batch activity. You can change the name of the activity by clicking inside the Name box and typing a new name. After you've changed the name, it will update the display name on the activity. Be aware that you can also change an activity's name by double-clicking the activity name in the process flow. Unique Activity Names? Activity names do not need to be unique. However, referencing an activity by name will return the first activity with the given name. Font Clicking the Font button opens a pop-up box where you can edit the activity's visual properties, as shown in the following image: This pop-up box has the following properties: Apply to Block - This button will cause the background color and font of the selected activity to be copied to all activities that are stacked together with this activity. Background Color - You can change the color of the activities by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Alpha - Sets the transparency of the activities. Font - These properties control the text on activities and resources: Font - The font menu has 13 common fonts available. Size - Changes the font size. Style - You can make the text bold, italicized, or underlined. Color - You can change the color of the text by using the color selector or using the Sampler button to select a color from any object in your simulation model or process flow. Statistics The Statistics button opens the activity's statistics dialog box. You can use this dialog box to turn recording for statistics on or off for this particular activity. See Process Flow Statistics for more information. Max Wait Timer Some activities have the Max Wait Timer properties, as shown in the following image: The Max Wait Timer properties are available for activities that might hold a token for a period of time until a specific condition or event occurs in the process flow or simulation model. You can use this timer to: Set a maximum wait time that the activity will hold the token for Determine when the wait time will begin Decide what will happen to the token if it reaches the maximum wait time For example, an Acquire Resource has a Max Wait Timer. Tokens that enter the Acquire Resource will request access to the resource and will wait in the Acquire Resource activity until the resource becomes available. You could set the Max Wait Timer to expire if the token is unable to get access to the resource after 5 minutes. Then, when timer goes off, you could possibly set the token to create a label named failed and then continue to the next downstream activity. The Max Wait Timer properties are available on the following activities: Batch Wait For Event Push To List Pull From List Acquire Resource Enter Zone Join Synchronize By default, only the Use Max Wait Timer checkbox is available at first. Then, when you check the Use Max Wait Timer checkbox, the other properties will become available: Start Criteria The Start Criteria box is only available for Batch, Join, and Synchronize activities. The Batch activity collects incoming tokens and sorts them into groups of tokens (batches). When a batch is ready, the Batch activity will release it to a downstream activity. If you decide to use the Max Wait Timer with a Batch activity, you can cause the Batch activity to release a batch early if a certain amount of time has passed. You'd also use the Start Criteria box to determine when the timer should begin running. By default, the timer is set to begin running as soon as a batch is created. You can change the value in this box if needed. For example, if you change the Start Criteria to collected > 3 , the timer will begin when the fourth token in the batch is collected. This behavior is similar for the Join and Synchronize activities, except that they form waves (a group representing one token from each incoming connector) instead of batches. You can similarly release the entire wave early with this timer. Time Use the Time box to set the length of time the Max Wait timer will run. The time is measured in simulation time units. You can enter in a fixed time or create a time dynamically using the menu next to the box. On Wait Timer Fired Use the On Wait Timer Fired settings to determine what should happen to the token if the Max Wait Timer expires. You can click the View Properties button to view and edit the default settings, as shown in the following image: By default, the Set Label operation will create a label on the token that is called failed and assign it a value of 1 (which will represent a value that is set to true ). The Release token operation will then release the token through connector 1. (See Adding and Connecting Activities - Number of Outgoing Connectors for more information about connector numbers.) You can edit these default operations or delete them using the Delete button next to each one. You can also add your own custom operations using the Add button to open a menu and select other operations. Batches If you are using a Batch activity, there is an option to release the entire batch. From the menu, select Code Snippet then type releasebatch . Waves If you are using a Join or Synchronize activity, there is an option to release the entire wave. From the menu, select Code Snippet then type releasewave . Max Idle Timer The Max Idle Timer works almost identically to the Max Wait Timer . It has many of the same available settings, as shown in the following image: The main difference is that it measures how long a token has been idle in the activity, meaning how long it has gone without receiving any tokens and/or values. See Max Wait Timer for more information about these properties. This property is available on the following activities: Batch Pull From List Join Synchronize Executer / Task Sequence The Executer / Task Sequence box is available on most of the Task Sequence activities. You can use this box to determine which task executer or task sequence should receive the task. If you choose to give this task to a task executer, a new task sequence will be automatically created with this task and then it will be sent to the task executer. You can: Assign a specific, fixed task executer in the 3D model Dynamically assign the task executer during a simulation run using labels Assign the task executer using the current command if you are in a task executer or sub flow process flow type Append this task to an existing task sequence Each of these different options will be explained in the following sections. Should I Assign a Task Executer or a Task Sequence? If you want to assign this task to a specific task executer and you're not concerned about whether that task executer may get pulled away to work on other tasks, assign the task to a task executer. However, if your task executer will receive task sequences from multiple sources (more than one Fixed Resource or Task Executer object in the 3D model or via multiple tokens in a process flow), your task executer could possibly get pulled away to work on other tasks it receives. In other words, the task executer might be working on a set of tasks it received from one object and then get interrupted and work on a task it receives from another object. If you want to prevent or control this interruption, you should use a Create Task Sequence activity and then assign tasks to this task sequence. See the Create Task Sequence activity for more reasons why you might want to use a Create Task Sequence activity. Fixed Task Executers To assign this task to a specific task executer, use the Sampler button to select a task executer in the 3D model. During the simulation run, the assigned task executer will always perform this task. Dynamic Task Executers - Labels If needed, you can make sure this task is assigned dynamically to a task executer during a simulation run. In other words, you can change these settings so that a different task executer might be assigned to the task based on different conditions during the simulation run. One way to dynamically assign a task executer is to use the task executer that is listed in a label on a token. To reference a label on a token, you can use the Label keyword: Click inside the Executer / Task Sequence box and type token. . Because the Executer / Task Sequence box uses the Universal Edit Feature, a menu will appear after you type token. in this box that will list all the available labels in the process flow. You can select a label from the menu to auto-complete the label name. Either double-click a label name or use the arrow keys and press the Enter key to select the label name. Alternatively, you can just finish typing the full label name after the colon. Be aware that the label name does not need to be in quotation marks (\" \") and it is case sensitive. The Current Keyword You can use the current keyword in Executer/Task Sequence box to dynamically assign the task to the task executer that is currently attached to a specific instance of the process flow. Be aware that this keyword can only be used for the Task Executer or Sub Flow process flow types. The keyword current will reference the task executer object attached to the process flow. See Process Flow Instances for more information. Adding the Task to an Existing Task Sequence If needed, you can add this task to an existing task sequence that was previously created by a Create Task Sequence activity. The Create Task Sequence activity will create a reference to the created task sequence and assign it to a label on the token. This label can then be used in the Executer / Task Sequence box to add the task to the end of that task sequence. If you add any of the task activities to the end of a Create Task Sequence activity or another task activity, the newly added task activity will automatically put the correct label name in the Executer / Task Sequence box. This can make creating task sequences more convenient. However, if you need to add it manually: Click inside the Executer/Task Sequence box and type token. . A menu will appear after you type token. in this box. Type the same name of the label used in the Create Task Sequence activity's Assign To property. Assign To The Assign To property creates a reference to a new value(s) or object(s) that is created by the activity. These references are usually assigned to a label on a token, but they may be assigned to other labels or nodes. When using the token.LabelName syntax, the label will be created on the token if it does not currently exist. Otherwise, you will need to ensure that the node you pass in to the Assign To already exists. This can be done by using the object.labels.assert(\"LabelName\") or aNode.subnodes.assert(\"NodeName\") commands. The reference may be to a single object or value, or it may be to multiple. For instance, pulling entries off of a list may result in one entry or multiple. If multiple entries are pulled, an array will be created with each entry in the array being one of the pulled values. Creating a reference point allows other activities to easily reference created objects, values pulled from a list, task sequences etc. However, an Assign To label/node is not required for and may be removed by clicking the Remove button . The value(s) will be set in one of two methods: Assign If the Assign box is checked, any data stored on the label or node that was passed into the Assign To box will be overwritten by the new value. Insert at Front If the Insert at Front box is checked, any data stored on the label or node that was passed into the Assign To box will remain and the new value(s) will be added to the front. This will cause the data to become an array with the most recent value as the first entry in the array. Label Matching/Assignment The Label Matching/Assignment table will become available on an event-listening activity when that activity is listening for a standard event. You can use this table to assign the value to a token label, match a token label's value, or match a value to. The Event-Triggered Source will assign the label to the token it creates; the Wait for Event activity will assign the label to the token that entered the activity and triggered the event-listening. You can leave this table blank if you don't need to do any operations. Parameter Rows The rows in the Label Assignment table will vary depending on the specific event that the activity is listening for. Each simulation event has a set of parameters (sets of information) that it uses. For example, the following image shows the Label Assignment table for the OnEntry event on a fixed resource: In this example, notice that the first row is the Entering Item . This row is a reference to the item that is entering the fixed resource. The second row is Input Port which is a reference to the port number from which the fixed resource received the flow item. Most of the time, the name of the row will be descriptive enough to give you a good idea of its reference point. Label Name or Value The text in the cells under the Label Name or Value column depends on the option set in the Operation column (as described below). If the operation is set to match , assign or insert at front then the text defines the name of the token label. When using a Wait for Event you can use dot syntax (periods), to separate label names to reference labels on objects that the token has a reference to. For example, if the entering token has a label called operator which references another token or a task executer object in the model you can enter operator.item to reference a label on the operator. If the operation is match value then the text defines the number, string or object reference. This value is evaluated on reset. To define an object reference use FlexScript. For example, Model.find(\"Processor1\") You can also define dynamic numbers or strings using FlexScript. For example, Table(\"GlobalTable1\")[1][1] or \"Text\" + string.fromNum(Table(\"GlobalTable1\")[1][1]) To use the previous example, you could create a label called item or itemID to refer to the entering item. You could also match the input port the item entered through to port 1, or 2. Operation If you click on any cell under the Operation column, it will open a menu. The option you choose will determine what operation will be performed when the event is triggered. The menu has the following options: none - The default value. Does nothing with the text in the Label Name or Value column. match - This will match the label's existing value to the parameter that is being referenced. The token will only finish the activity when the event fires AND the event's parameter matches the value of the token's label. For example, you may be tracking an item through the system. The token's item label points to the flow item in the model. You want to catch when that specific item enters a fixed resource (like a queue) in the model. To do that, you can subscribe to the OnEntry event of the fixed resource, and then for the Entering Item row of the table, enter item in the Label Name or Value column, and match as the operation. This option is not available for the Event-Triggered Source. match value - This will match the involved parameter value to the value in the Label Name or Value column. assign - This will assign the involved parameter value to the token's label value. insert at front - This operation is like the assign, except that if the label already has a value, it will make the label value into an array and push the new value to the front of the array. You can use this option if perhaps you are looping and you want to accumulate values into an array on the label. This option is not available for the Event-Triggered Source. Will Override Return Value Event-listening activities have the ability to override the return value of events they listen to. For example, you may want to perform some complex logic using Process Flow to define the Process Time of a Processor. To do this, first check the Will Override Return Value checkbox in the activity's properties. Next define the set of activities that determine the return value. Here you must make sure that none of these activities will cause any type of delay, such as a waiting operation or explicit Delay activity. Otherwise the return value will not be calculated properly. At the end of your block of activities place a Finish activity. The Finish activity allows you to define a return value for your overridden function and then destroys the token. In our example, the return value will become the Process Time of the Processor. No Delays When Overriding Return Values Using the Override Return Value functionality with activities that wait or create delays will cause the Finish activity to evaluate the return value before the token arrives at the Finish and may result in unexpected return values. Change Rule The Change Rule properties will become available on an event-listening activity when that activity is listening for a value change event. You can use these properties to determine the conditions that will trigger the event. Usually this will be a statistical change of some sort. When these conditions are in place, the Event-Triggered Source activity will create a token and release it to the next downstream activity; the Wait for Event activity will release the token to the next downstream activity. The following image shows the Change Rule properties: The following sections describe the different Change Rule properties: Change Rule You will use the Change Rule menu to determine the conditions that will trigger an event. The menu has the following options: Change - The event will be fired whenever the value changes at all. Increase - The event will be fired whenever the value increases. Decrease - The event will be fired whenever the value decreases. Arrive At Value - The event will be fired whenever the value changes to a specific user-defined value. Increase To Exact Value - The event will be fired whenever the value increases to a specific user-defined value. Decrease To Exact Value - The event will be fired whenever the value decreases to a specific user-defined value. Increase To Or Through Value - The event will be fired whenever the value changes from being less than a user-defined value, to being greater than or equal to that value. Decrease To Or Through Value - The event will be fired whenever the value changes from being greater than a user-defined value, to being less than or equal to that value. First Increase - The event will be fired whenever the value changes from decreasing to increasing. First Decrease - The event will be fired whenever the value changes from increasing to decreasing. Value Defines the user-defined value associated with the Change Rule . This is only needed for change rules with required values, such as Arrive at Value . Fire If Initial Value Meets Rule If checked, the event will fire immediately (finishing the activity) if when the token first arrives, the value already meets the defined rule. For example, if are listening to a Zone's OnContentChange event, and you've defined the Change Rule as Arrive At Value with a Value of 5 , then when the token arrives, if the Zone's content is already at 5, the event will immediately fire and the token will pass through the activity. This field is only applicable if the Change Rule uses an involved value, and if the activity is a Wait for Event . Additional Event Binding Requirements In some cases, depending on the event you subscribe to, there may be additional fields required in order to properly bind to the event. For example, if you bind to a List's OnContentChange event, you will need to provide the Partition ID that you want to listen to. Just enter the Partition ID in its corresponding field."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/ProcessFlowStatistics/ProcessFlowStatistics.html",
        "title": "Process Flow Statistics",
        "content": "Introduction to Process Flow Statistics The following topic is intended to be a reference page for all of the different possible statistics that are available in process flows. If you are unclear about what kind of information is collected by a particular statistic, you can reference it in this topic. It will also provide information about statistical values, different uses for statistics, and commands related to statistics. Activity Statistics All activities in process flow keep the following two statistics: Input - The number of tokens that have entered an activity Output - The number of tokens that have exited an activity In addition, any activity that might cause a token to wait keeps the following two statistics: Content - The number of tokens currently in an activity Staytime - The amount of time each token spends in the activity The Batch activity keeps many additional statistics. You can read about these statistics on the Batch Statistics page. Shared Asset Statistics Shared assets (the Resource, List, and Zone objects) keep a minimum of 8 statistics, as described below: Input - The number of tokens that have begun using the asset Output - The number of tokens that have finished using the asset Content - The number of tokens currently using the asset Staytime - The amount of time each token spends using the asset RequestInput - The number of tokens that requested to use the asset RequestOutput - The number of tokens that requested to use the asset, and have since either used the asset or failed RequestContent - The number of tokens waiting to use the asset RequestStaytime - The amount of time a token spends waiting to use the asset Using Shared Assets What it means to \"use the asset\" might vary depending on the type of shared asset it is. You can find more details about these statistics, along with information about any additional statistics, on each Shared Asset's reference page. About Statistics Values and Types Each statistic provides access to four values: Current - The current value of the statistic Minimum - The lowest recorded value of the statistic Maximum - The highest recorded value of the statistic Average - The average value of the statistic In addition, each statistic can be classified as one of three types: Incremental - These statistics always increase. Any statistic with Input or Output in its name is an incremental statistic. Because incremental statistics only increase, the minimum, maximum, and average values are meaningless. The current value can also be called the total value. Level - These statistics increase and decrease over time, like the level of fluid in a tank. Any statistic with Content in its name is a level statistic. Level statistics provide meaningful current, minimum, maximum, and average values; the average is time-weighted. Stream - These statistics represent values obtained from individual objects. Staytime, for example, is updated whenever a token leaves an activity. The current staytime is simply the last token's staytime, and so is not usually helpful. Stream statistics do provide helpful minimum, maximum, and time-weighted average values. Events For information on events, see the Event Listening page. Process Flow activities have the following events: On Entry On Entry fires when a token arrives at the activity. It has the following parameters: Event Parameter Type Explanation Instance Object The Process flow instance the token belongs to Activity treenode The activity the token arrived at Token Token The token that is entering the activity On Exit On Exit fires when a token leaves the activity. It has the following parameters: Event Parameter Type Explanation Instance Object The Process flow instance the token belongs to Activity treenode The activity the token is leaving Token Token The token that is leaving the activity On Manual Release On Manual Release fires when a token is forced to leave an activity early usually by using the Token class's release method or a Release Token activity. It has the following parameters: Event Parameter Type Explanation Instance Object The Process flow instance the token belongs to Activity treenode The activity the token is leaving Token Token The token that is leaving the activity Destination Variant The connection the token will be leaving out of On Content Change This event fires anytime the activity's content changes. This occurs when a token enters or exits the activity. Note that not all activities have this event. This event has no parameters. On Input Change This event fires when a token enters the activity. This event has no parameters. On Output Change This event fires when a token exits the activity. This event has no parameters. On Staytime Change This event fires when a token exits the activity, immediately after the On Output Change event. Note that not all activities have this event. This event has no parameters. Statistics as Events In process flow, you can listen to statistics in addition to listening to events. These events are called Value Change Events, and are fired whenever the value of the statistic changes. Commands You can use the getstat command to get data from an activity or shared asset in FlexScript. This command requires an object, a statistic name, and a value flag. The following example shows how to use this command: // This is the code header given by most process flow objects. // The comments are added here for clarification. treenode current = param(1); // This is the instance, meaning the object that owns the Process Flow treenode activity = param(2); // This is the activity or shared asset treenode token = param(3); treenode processFlow = ownerobject(activity); // Here is where you would put your code. The following code gets the average content double avgContent = getstat( // getstat requires between 4 and 6 parameters: activity, // 1. the object (shared asset or activity) that has the statistic \"Content\", // 2. the name of the statistic STAT_AVERAGE, // 3. the desired value from the statistic (could also be STAT_CURRENT, STAT_MIN, or STAT_MAX) // 4. an optional parameter the instance object (usually current) // 5. an additional parameter to help resolve which data to get // 6. an additional parameter to help resolve which data to get ); For example, to get the current content of a Delay activity, you could use the following command: getstat(delayActivity, \"Content\", STAT_CURRENT) To get the output of any Process Flow activity, you could use the following: getstat(activity, \"Input\", STAT_CURRENT) All statistics accessible through the getstat command use Tracked Variables, so you can access the current, minimum, maximum, and average values for any of the statistics. You specify which value you want using the third parameter, the flag. To get the average staytime of an activity, for example, you could use the following: getstat(activity, \"Staytime\", STAT_AVERAGE) Notice that the statistic name is very important. The name must match the name of a statistic kept by the object. Source activities, for example, do not keep a \"Content\" statistic; the getstat command will return 0 in this case. Statistics for Instanced Process Flows If you want to get statistics for an activity in a Task Executor or Fixed Resource Process Flow, then you have to give a fourth parameter to the getstat command. This fourth parameter is the name of the instance object. For example, if Processor3 is attached to a Process Flow, and you want to get a statistic from that flow, then you would need something like the following: getstat(activity, \"Output\", STAT_CURRENT, \"Processor3\") For general process flows, or for process flows with only one instance, this parameter is ignored. List Statistics The List activity keeps statistics for the list as a whole: Input - the total number of entries that have been pushed on the list Output - the total number of entries that have been pulled from the list Content - the total number of entries currently on the list Staytime - the staytime for entries on the list BackOrderInput - the total number of back orders that have been created by the list BackOrderOutput - the total number of back orders that have been fulfilled BackOrderContent - the current number of back orders on the list BackOrderStaytime - the amount of time each back order stays on the list These same statistics are kept for each partition on the list. Simply prefix the word \"Partition\" to the statistic name. For example, these two lines of code get the number of entries on a list, and on a specific partition: getstat(globallist(\"list\"), \"Content\", STAT_CURRENT); getstat(globallist(\"list\"), \"PartitionContent\", STAT_CURRENT, 0, 1); The fourth parameter, the 0, is the instance object parameter, ingored for the general process flow case. The fifth is the partition ID. The value returned is the statistic for that specific partition. Please note that when a partition is empty, the list destroys it by default. This also clears the statistics for that partition. You can avoid this by checking the \"Keep Dead Partitions\" box in the List Properties window. Be aware that for large numbers of partitions, using this option can use a lot of memory. Zone Statistics The Zone keeps the statics kept by the other shared assets. However, it also keeps those statistics for each subset. For example, if you have a subset within a zone called \"SmallItems\", you can get the content of that subset as follows: getstat(zone, \"SubsetContent\", STAT_CURRENT, 0, \"SmallItems\") Again, the fourth parameter is the instance parameter, which is ignored in general Process Flows. The fifth is the name of the subset for which you want the statistic. You can also get the data of a subset calculation. Simply provide the name of the desired calculation as the sixth parameter: getstat(zone, \"CalculationInput\", STAT_CURRENT, 0, \"SmallItems\", \"TotalWeight\")"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/ProcessFlowObjects/BatchStatistics/BatchStatistics.html",
        "title": "Batch Statistics",
        "content": "Introduction to Batch Statistics You can use statistics to get useful data from your Batch activities if needed. This topic will discuss how the statistics behave differently on Batch activities (as opposed to the statistics on other process flow objects). Batch Dialog Box The Batch dialog box can be opened by clicking on the batch displayed on the Batch activity. This dialog box gives information on the selected batch and lets you see which tokens are currently in the batch. Batch - This is the Group By value of the batch. If the Group By was set to None, this field will display 0. Collected - Displays the progress of the batch either as the # of tokens collected or the summed label value collected out of the total Batch Quantity. Start Time - The time the batch was created in model time units. Active Tokens - Displays all the tokens currently in the batch. Token Info - Displays the labels of the selected token and allows you to select and visually trace the token. Standard Statistics The standard statistics kept by the Batch activity (see Process Flow Statistics ) are unique because the Batch can create or destroy tokens. This makes the statistics a little less intuitive. The following list discusses the meaning of each statistic: Input - All tokens that arrive at a Batch activity increment the input. Tokens created by the Batch do not affect input. Output - All tokens that move on to another activity from the Batch increment the output. Tokens destroyed by the Batch do not affect output. Content - All tokens that arrive at the Batch activity increment the content. All tokens that leave the Batch activity decrement the content, including tokens that are destroyed by the Batch. Tokens created by the Batch do not affect content, unless they were created as part of overflow logic. The content is always equal to the number of tokens currently being collected. Staytime - All tokens that arrive at the Batch activity, or are created as part of overflow logic, will affect the staytime when they leave or when they are destroyed. The average staytime is the average time that tokens spend collecting on the Batch activity. Batch Statistics The Batch activity can also record statistics dealing with batches, rather than tokens. The following list describes these statistics; type of each statistic (Incremental, Level, or Stream) is listed with the title. Number of Batches (Level) - The number of batches presently being collected on the batch. Batches Created (Incremental) - The number of batches created by the Batch activity. Batches Released (Incremental) - The number of batches released by the Batch activity. Batch Staytime (Stream) - The amount of time each batch spent being collected. The Batch activity updates this statistic every time a batch is released (including manually releasing a batch early). Batch Quantity (Stream) - The quantity within a batch. The Batch activity updates this statistic every time the quantity of any batch changes, setting it to the quantity of the batch. This statistic is probably most useful as an event; for example, you could listen for any time a batch quantity exceeds a certain value. Tokens per Batch (Stream) - The number of tokens in each batch. The Batch activity updates this statistic every time a batch is released, setting it to the number of tokens in the most recently released batch. Quantity per Batch (Stream) - The quantity in each batch. If the Batch is collecting by Number of Tokens, this statistic will not be updated, since it would be identical to the Tokens per Batch statistic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/Location/Location.html",
        "title": "Location",
        "content": "Overview and Key Concepts The Location object represents objects, such as chairs and beds, that person flowitems and staff occupy and interact with. It is designed to work with the Acquire and Release Location activities. It also defines the behavior of people who enter and exit them. Events On Acquire The on acquire event fires when the location is acquired by an Acquire Location activity. It has the following parameters: Event Parameter Type Explanation Pulling Token Token The token in the Acquire Location activity. Puller Object The object acquiring the location. On Release The on release event fires when the location is released by a Release Location activity. It has the following parameters: Event Parameter Type Explanation Releasing Token Token The token in the Release Location activity. On Entry The on entry event will fire the object's on entry trigger. This event fires as soon as an item enters the object, before any other logic is executed. . It has the following parameters: Event Parameter Type Explanation Entering Item Object The flow item that entered the object. Input Port int Unused On Exit The on exit event will fire the object's on exit trigger. This event fires as an item is leaving the object, before it has actually left the object. This means if you check the content of the object in the on exit trigger, the content will include the exiting item. It has the following parameters: Event Parameter Type Explanation Exiting Item Object The flow item that is exiting the object. Output Port int Unused On Message The on message event will fire the object's on message trigger. This event is fired when the object receives a message. It has the following parameters: Event Parameter Type Explanation Sending Object Object The object that sent the message. Message Param 1 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 2 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 3 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. On Stop This event fires when the object is stopped either through code using Object.stop() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has. This number includes the current stop request. State int The state the object will go into it while stopped. ID int The id or key for the stop request. Priority double The priority of the stop request. State Profile int The profile number of the new state. The default state profile is 0. On Resume This event fires when the object is resumed either through code using Object.resume() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has remaining. ID int The id or key for the resume request. State Profile int The profile number of the state that was used when the object was stopped. The default state profile is 0. On Content Change This event fires anytime the object's content changes. This occurs when a flow item is loaded or unloaded from the object. This event has no parameters. On Input Change This event fires when a flow item is loaded into the object. This event has no parameters. On Output Change This event fires when a flow item is unloaded from object. This event has no parameters. On Staytime Change This event fires when a flow item is unloaded from the object, immediately after the On Output Change event. This event has no parameters. On State Change This event fires when the object's state changes. This event allows you to listen to the object's state being changed to a specific state, or to track the state's the object is in. It has the following parameters: Event Parameter Type Explanation State Profile Node treenode If the To State is in the default state profile, this parameter is NULL. Otherwise, this parameter is a reference to the state profile node (tracked variable) in the object's state_profiles attribute node. To State int The state number the object will be set to. From State int The state number the object was in before the new state is set. On State Value Change The on state value change event is associated with the tracked variable that stores the state statistics for the object. Listening to this event allows you to use the change rule. This event fires at the same time as the on state change event. This event has one requirement, the state profile number. If using the default state profile, this number is 0. On Reset The on reset event is fired for each object when the model is reset. This event has no parameters. On Draw The on draw event is fired each time the 3D view is repainted. This happens at different times depending on run speed and refresh rates. In order to ensure model repeatability, code used in the on draw trigger should not use the stochastics commands (distributions) that use FlexSim's random number generator. It has the following parameters: Event Parameter Type Explanation View treenode The view the object is being drawn in. Having multiple 3D views open will cause the on draw event to be fired for each view. States Idle The object is empty and not performing any tasks. Maintenance The object is having maintenance performed on it. Occupied The object is occupied by a person flowitem. Waiting for Maintenance The object is waiting for maintenance to be performed on it. Statistics The location uses the same statistics as a fixed resource. See Fixed Resource Concepts - Statistics for an explanation of these statistics. Properties Panels The Location object uses the following properties panels: Statistics Visuals Labels Location Enter/Exit Instructions Ports Triggers"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/Staff/Staff.html",
        "title": "Staff",
        "content": "Overview and Key Concepts The Staff object is a specialized Operator designed to work with the Acquire and Release Staff activities. Events The staff uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States On Acquire The on acquire event fires when the staff is acquired by an Acquire Staff activity. It has the following parameters: Event Parameter Type Explanation Pulling Token Token The token in the Acquire Staff activity. Puller Object The object acquiring the staff. On Release The on release event fires when the staff is released by a Release Staff activity. It has the following parameters: Event Parameter Type Explanation Releasing Token Token The token in the Release Staff activity. This object also uses the task executer states. See Task Executer Concepts - States for more information. Statistics The staff uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The staff uses the standard properties of an Operator. See Operator Properties for an explanation of these statistics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/Transport/Transport.html",
        "title": "Transport",
        "content": "Overview and Key Concepts The Transport object is a specialized Task Executer designed to work with the Acquire and Release Transport activities. It is moved around the model by staff and used to transport person flowitems. It also defines the behavior of people who enter and exit it. Events The transport uses the standard events that are common to all task executers. See Task Executer Concepts - Events for an explanation of these events. States On Acquire The on acquire event fires when the transport is acquired by an Acquire Transport activity. It has the following parameters: Event Parameter Type Explanation Pulling Token Token The token in the Acquire Transport activity. Puller Object The object acquiring the transport. On Release The on release event fires when the transport is released by a Release Transport activity. It has the following parameters: Event Parameter Type Explanation Releasing Token Token The token in the Release Transport activity. This object also uses the task executer states. See Task Executer Concepts - States for more information. Statistics The transport uses the standard statistics that are common to all task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Transport object uses the following properties panels: Statistics Visuals Labels Enter/Exit Instructions TaskExecuter Travel Dispatcher Ports Triggers"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/Equipment/Equipment.html",
        "title": "Equipment",
        "content": "Overview and Key Concepts The Equipment object represents objects, such as carts, that are moved around the model by staff. It is designed to work with the Acquire and Release Equipment activities. Events On Acquire The on acquire event fires when the equipment is acquired by an Acquire Equipment activity. It has the following parameters: Event Parameter Type Explanation Pulling Token Token The token in the Acquire Equipment activity. Puller Object The object acquiring the equipment. On Release The on release event fires when the equipment is released by a Release Equipment activity. It has the following parameters: Event Parameter Type Explanation Releasing Token Token The token in the Release Equipment activity. On Message The on message event will fire the object's on message trigger. This event is fired when the object receives a message. It has the following parameters: Event Parameter Type Explanation Sending Object Object The object that sent the message. Message Param 1 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 2 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 3 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. On Stop This event fires when the object is stopped either through code using Object.stop() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has. This number includes the current stop request. State int The state the object will go into it while stopped. ID int The id or key for the stop request. Priority double The priority of the stop request. State Profile int The profile number of the new state. The default state profile is 0. On Resume This event fires when the object is resumed either through code using Object.resume() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has remaining. ID int The id or key for the resume request. State Profile int The profile number of the state that was used when the object was stopped. The default state profile is 0. On Content Change This event fires anytime the object's content changes. This occurs when a flow item is loaded or unloaded from the object. This event has no parameters. On Input Change This event fires when a flow item is loaded into the object. This event has no parameters. On Output Change This event fires when a flow item is unloaded from object. This event has no parameters. On Staytime Change This event fires when a flow item is unloaded from the object, immediately after the On Output Change event. This event has no parameters. On State Change This event fires when the object's state changes. This event allows you to listen to the object's state being changed to a specific state, or to track the state's the object is in. It has the following parameters: Event Parameter Type Explanation State Profile Node treenode If the To State is in the default state profile, this parameter is NULL. Otherwise, this parameter is a reference to the state profile node (tracked variable) in the object's state_profiles attribute node. To State int The state number the object will be set to. From State int The state number the object was in before the new state is set. On State Value Change The on state value change event is associated with the tracked variable that stores the state statistics for the object. Listening to this event allows you to use the change rule. This event fires at the same time as the on state change event. This event has one requirement, the state profile number. If using the default state profile, this number is 0. On Reset The on reset event is fired for each object when the model is reset. This event has no parameters. On Draw The on draw event is fired each time the 3D view is repainted. This happens at different times depending on run speed and refresh rates. In order to ensure model repeatability, code used in the on draw trigger should not use the stochastics commands (distributions) that use FlexSim's random number generator. It has the following parameters: Event Parameter Type Explanation View treenode The view the object is being drawn in. Having multiple 3D views open will cause the on draw event to be fired for each view. States Idle The object is not performing any tasks. Statistics The equipment uses the same statistics as a task executers. See Task Executer Concepts - Statistics for an explanation of these statistics. Properties Panels The Equipment object uses the following properties panels: Statistics Visuals Labels Equipment Ports Triggers"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/MultiLocation/MultiLocation.html",
        "title": "MultiLocation",
        "content": "Overview and Key Concepts The MultiLocation object is a specialized Location object which contains other Location objects. This allows the object to represent a waiting room, a dining table, a park bench, or any other high capacity object. Usually, only the individual locations inside the multilocation will be acquired and released. However, if the Acquire As Single Unit option is used, only the multilocation itself will be acquired and released. Events The MultiLocation uses same events as a location object. See Location Events for an explanation of these events. States The MultiLocation uses same states as a location object. See Location States for an explanation of these states. Statistics The MultiLocation uses same statistics as a location object. See Location Statistics for an explanation of these statistics. In addition the MultiLocation totals some of the statistics of the MultiLocation and SubLocations. Throughput Total Input Total and Output total are the total Input and Output of the MultiLocation and SubLocations. Content Total Content Total is the total Content of the MultiLocation and SubLocations. Properties Panels The MultiLocation object uses the following properties panels: Statistics Visuals Labels MultiLocation Ports Triggers"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/WaitingLine/WaitingLine.html",
        "title": "Waiting Line",
        "content": "Overview and Key Concepts The Waiting Line object assists in modelling the behavior of people queuing. Events On Person Ready The on person ready event fires when a person reaches the end of the line and is ready to leave. It has the following parameters: Event Parameter Type Explanation Person Object The person who reached the end of the line. On Entry The on entry event will fire the object's on entry trigger. This event fires as soon as an item enters the object, before any other logic is executed. It has the following parameters: Event Parameter Type Explanation Entering Item Object The flow item that entered the object. Input Port int Unused On Exit The on exit event will fire the object's on exit trigger. This event fires as an item is leaving the object, before it has actually left the object. This means if you check the content of the object in the on exit trigger, the content will include the exiting item. It has the following parameters: Event Parameter Type Explanation Exiting Item Object The flow item that is exiting the object. Output Port int Unused On Message The on message event will fire the object's on message trigger. This event is fired when the object receives a message. It has the following parameters: Event Parameter Type Explanation Sending Object Object The object that sent the message. Message Param 1 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 2 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 3 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. On Stop This event fires when the object is stopped either through code using Object.stop() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has. This number includes the current stop request. State int The state the object will go into it while stopped. ID int The id or key for the stop request. Priority double The priority of the stop request. State Profile int The profile number of the new state. The default state profile is 0. On Resume This event fires when the object is resumed either through code using Object.resume() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has remaining. ID int The id or key for the resume request. State Profile int The profile number of the state that was used when the object was stopped. The default state profile is 0. On Content Change This event fires anytime the object's content changes. This occurs when a flow item is loaded or unloaded from the object. This event has no parameters. On Input Change This event fires when a flow item is loaded into the object. This event has no parameters. On Output Change This event fires when a flow item is unloaded from object. This event has no parameters. On Staytime Change This event fires when a flow item is unloaded from the object, immediately after the On Output Change event. This event has no parameters. On State Change This event fires when the object's state changes. This event allows you to listen to the object's state being changed to a specific state, or to track the state's the object is in. It has the following parameters: Event Parameter Type Explanation State Profile Node treenode If the To State is in the default state profile, this parameter is NULL. Otherwise, this parameter is a reference to the state profile node (tracked variable) in the object's state_profiles attribute node. To State int The state number the object will be set to. From State int The state number the object was in before the new state is set. On State Value Change The on state value change event is associated with the tracked variable that stores the state statistics for the object. Listening to this event allows you to use the change rule. This event fires at the same time as the on state change event. This event has one requirement, the state profile number. If using the default state profile, this number is 0. On Reset The on reset event is fired for each object when the model is reset. This event has no parameters. On Draw The on draw event is fired each time the 3D view is repainted. This happens at different times depending on run speed and refresh rates. In order to ensure model repeatability, code used in the on draw trigger should not use the stochastics commands (distributions) that use FlexSim's random number generator. It has the following parameters: Event Parameter Type Explanation View treenode The view the object is being drawn in. Having multiple 3D views open will cause the on draw event to be fired for each view. States Idle The object is not performing any tasks. Statistics The waiting line uses the same statistics as a fixed resource. See Fixed Resource Concepts - Statistics for an explanation of these statistics. Properties Panels The Waiting Line object uses the following properties panels: Statistics Visuals Labels WaitingLine Ports Triggers"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/ElevatorBank/ElevatorBank.html",
        "title": "Elevator Bank",
        "content": "Overview and Key Concepts An object representing a bank of elevators for transporting people between different floors (grids) in an A* network. The Elevator Bank is used to simulate elevators moving people between different floors of a facility. The Elevator Bank acts as a custom A* bridge between A* grids that are stacked on top of each other along a model's z-axis. Create an elevator bank by dragging it from the library. Then expand its x-axis size to define the desired number of elevators . See Working with A* Navigation for more instruction on adding an Elevator Bank to your model. Events On Traveler Arrival The OnTravelerArrival event fires when a traveler arrives at the elevator bank to transfer floors. It has the following parameters: Event Parameter Type Explanation Traveler TaskExecuter The traveler that is arriving at the elevator bank. DestFloorZ double The z location of the destination floor that the traveler is going to. On Traveler Continue The OnTravelerContinue event fires when a traveler is finished using the elevator bank and continues on the A* network. It has the following parameters: Event Parameter Type Explanation Traveler TaskExecuter The traveler that is arriving at the elevator bank. The elevator bank also relays events of the bank elevator . When listening to these events via the elevator bank (using Process Flow's Wait For Event or Event-Triggered Source activities), you need to define the rank of the target elevator that you want to listen to. States The Elevator Bank does not implement a state profile. Instead refer to Bank Elevator states. Statistics The Elevator Bank does not implement any of its own statistics. Instead refer to Bank Elevator statistics. Properties Panels The Elevator Bank object uses the following properties panels: Statistics Visuals Labels ElevatorBank Ports Triggers Bank Elevator A Bank Elevator, or simply an elevator , is an individual elevator within an elevator bank. You will primarily interface with elevators in an elevator bank through the ElevatorBank and ElevatorBank.Elevator FlexScript interfaces. However, you may also want to listen to an individual elevator's events, or collect state information on it. Elevator Events On Floor Arrival The OnFloorArrival event fires when the elevator arrives at a floor. It has the following parameters: Event Parameter Type Explanation Floor Z double The z location of the floor at which the elevator has arrived. On Floor Departure The OnFloorDeparture event fires when the elevator departs a floor. It has the following parameters: Event Parameter Type Explanation Next Floor Z double The z location of the next floor that the elevator is going to. Last Floor Z double The z location of the floor that the elevator is departing from. On Idle The OnIdle event fires when the elevator finishes at a floor and does not find another floor to go to. This event does not have any associated parameters On Traveler Entry The OnTravelerEntry event fires when a traveler enters the elevator. It has the following parameters: Event Parameter Type Explanation Traveler TaskExecuter The traveler that is entering the elevator. On Traveler Exit The OnTravelerExit event fires when a traveler exits the elevator. It has the following parameters: Event Parameter Type Explanation Traveler TaskExecuter The traveler that is exiting the elevator. Elevator General States The elevator's general state profile uses the following states. Idle The elevator is idle and stationary. Busy The elevator is currently opening or closing its door. Loading Travelers are entering the elevator. Unloading Travelers are exiting the elevator. Travel Empty The elevator is moving between floors and does not contain any travelers. Travel Loaded The elevator is moving between floors and contains one or more travelers. Elevator Custom Profile States The elevator includes a custom profile, profile 1, that uses the following states. Idle The elevator is idle and stationary. Opening Door The elevator is opening its doors. Closing Door The elevator is closing its doors. Exiting Travelers Travelers are exiting the elevator. Entering Travelers Travelers are entering the elevator. Moving The elevator is moving to a floor to fulfill a request. Idle Moving The elevator is moving to a floor but not to fulfill a request. This state will only be used if you expressly tell the elevator to move to a \"home\" location when it becomes idle. Elevator Statistics The elevator uses the same statistics as a task executer. See Task Executer Concepts - Statistics for an explanation of these statistics. Traveler Events A* Travelers that use the elevator bank will also have the following events that you can listen to. On Elevator Bank Arrival The OnElevatorBankArrival event fires when the traveler arrives at an elevator bank to move between floors. It is fired at the same time as the elevator bank's OnTravelerArrival event, but here the event is owned by the traveler, not the elevator bank. It has the following parameters: Event Parameter Type Explanation Elevator Bank ElevatorBank The elevator bank that the traveler is arriving at. Dest Floor Z double The z location of the traveler's destination floor. On Elevator Entry The OnElevatorEntry event fires when the traveler enters an elevator. It is fired at the same time as the elevator's OnTravelerEntry event, but here the event is owned by the traveler, not the elevator. It has the following parameters: Event Parameter Type Explanation Elevator ElevatorBank.Elevator The elevator that the traveler is entering. On Elevator Exit The OnElevatorExit event fires when the traveler enters an elevator. It is fired at the same time as the elevator's OnTravelerExit event, but here the event is owned by the traveler, not the elevator. It has the following parameters: Event Parameter Type Explanation Elevator ElevatorBank.Elevator The elevator that the traveler is exiting. On Elevator Bank Continue The OnElevatorBankContinue event fires when the traveler continues from an elevator bank, resuming normal A* travel. It is fired at the same time as the elevator bank's OnTravelerContinue event, but here the event is owned by the traveler, not the elevator bank. It has the following parameters: Event Parameter Type Explanation Elevator Bank ElevatorBank The elevator bank that the traveler is arriving at."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/3DObjects/Prop/Prop.html",
        "title": "Prop",
        "content": "Overview and Key Concepts The Prop object represents objects, such as doors, desks, tables, rooms and other shapes, that person flowitems and staff can occupy and interact with. Like Location objects, it defines the behavior of people who arrive at and leave them. Events On Message The on message event will fire the object's on message trigger. This event is fired when the object receives a message. It has the following parameters: Event Parameter Type Explanation Sending Object Object The object that sent the message. Message Param 1 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 2 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. Message Param 3 Variant This is a parameter that was passed through the message and could be a number, string, treenode or array. On Stop This event fires when the object is stopped either through code using Object.stop() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has. This number includes the current stop request. State int The state the object will go into it while stopped. ID int The id or key for the stop request. Priority double The priority of the stop request. State Profile int The profile number of the new state. The default state profile is 0. On Resume This event fires when the object is resumed either through code using Object.resume() or by using a Time Table or MTBF/MTTR tool. It has the following parameters: Event Parameter Type Explanation # Stop Requests int The number of stop requests the object has remaining. ID int The id or key for the resume request. State Profile int The profile number of the state that was used when the object was stopped. The default state profile is 0. On Content Change This event fires anytime the object's content changes. This occurs when a flow item is loaded or unloaded from the object. This event has no parameters. On Input Change This event fires when a flow item is loaded into the object. This event has no parameters. On Output Change This event fires when a flow item is unloaded from object. This event has no parameters. On Staytime Change This event fires when a flow item is unloaded from the object, immediately after the On Output Change event. This event has no parameters. On State Change This event fires when the object's state changes. This event allows you to listen to the object's state being changed to a specific state, or to track the state's the object is in. It has the following parameters: Event Parameter Type Explanation State Profile Node treenode If the To State is in the default state profile, this parameter is NULL. Otherwise, this parameter is a reference to the state profile node (tracked variable) in the object's state_profiles attribute node. To State int The state number the object will be set to. From State int The state number the object was in before the new state is set. On State Value Change The on state value change event is associated with the tracked variable that stores the state statistics for the object. Listening to this event allows you to use the change rule. This event fires at the same time as the on state change event. This event has one requirement, the state profile number. If using the default state profile, this number is 0. On Reset The on reset event is fired for each object when the model is reset. This event has no parameters. On Draw The on draw event is fired each time the 3D view is repainted. This happens at different times depending on run speed and refresh rates. In order to ensure model repeatability, code used in the on draw trigger should not use the stochastics commands (distributions) that use FlexSim's random number generator. It has the following parameters: Event Parameter Type Explanation View treenode The view the object is being drawn in. Having multiple 3D views open will cause the on draw event to be fired for each view. States Idle The object is not performing any tasks. Statistics The Prop uses the same statistics as a fixed resource. See Fixed Resource Concepts - Statistics for an explanation of these statistics. Properties Panels The Prop object uses the following properties panels: Statistics Visuals Labels Enter/Exit Instructions Ports Triggers"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/ActivitySets/ActivitySets.html",
        "title": "Activity Sets",
        "content": "Overview and Key Concepts Activity sets are a set of preconfigured activities bundled in a container that together model a basic people module task. The set contains all the activities necessary to perform a basic task; however, the set is intended to be a starting point for modeling the specific task in your model. You are encouraged to add, remove, and rearrange activities to better suit the task your model is simulating. Walk then Process This activity set models a person acquiring a location, traveling to it, spending some time there, and then releasing the location. This could represent, for example, someone signing in at a kiosk when entering a facility. The following is an overview of how each activity in the activity set functions: Activity or Shared Asset Explanation Location Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Acquire Location Tokens wait at this activity until a location can be acquired. Walk The person walks to the acquired location. Process The person delays an amount of time representing the time required to complete the current process. Release Location The location acquired at the start of the activity set is released. Wait in Line then Process This activity set models a person waiting their turn in line and then acquiring a location and staff, traveling to the location, spending some time there, and then releasing the staff and location. This could represent, for example, someone waiting in line at a registration desk and then registering. The following is an overview of how each activity in the activity set functions: Activity or Shared Asset Explanation Waiting Line Points at the waiting line object where the person will stand in line. Location Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Wait In Line The person walks to the waiting line and gets in line. The token stays here until the person reaches the front of the line. Acquire Location Tokens wait at this activity until a location can be acquired. Acquire Staff Tokens wait at this activity until a staff member can be acquired. Walk The person walks to the acquired location. Process The person delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Release Location The location acquired earlier in the the activity set is released. Escort then Process This activity set models a person acquiring a location and staff, being escorted to the location by the staff, spending some time there, and then releasing the staff and location. This could represent, for example, someone being called back by a nurse to check vitals. Activity or Shared Asset Explanation Location Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Acquire Location Tokens wait at this activity until a location can be acquired. Acquire Staff Tokens wait at this activity until a staff member can be acquired. Escort Person The acquired staff escorts the person to the acquired location. Process The person delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Release Location The location acquired earlier in the the activity set is released. Transport then Process This activity set models a person acquiring a location, transport, and staff, being transported on the transport to the location by the staff, spending some time there, and then releasing the staff, transport, and location. This could represent, for example, someone being placed on a gurney and taken back to a room in the Emergency Department. Activity or Shared Asset Explanation Location Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Transport Represents a transport object in the 3D model that the person will acquire and interact with in this activity set. Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Acquire Location Tokens wait at this activity until a location can be acquired. Acquire Transport Tokens wait at this activity until a transport can be acquired. Acquire Staff Tokens wait at this activity until a staff member can be acquired. Transport Person The acquired staff picks up the acquired transport, walks to the person and then transports the person to the acquired location. Process The person delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Release Transport The transport acquired earlier in the activity set is released. Release Location The location acquired earlier in the the activity set is released. Move Equipment then Process This activity set models a person acquiring an equipment and staff, the staff bringing the equipment to the person's current location and spending some time there, and then releasing the staff and equipment. This could represent, for example, someone being visited by a nurse to perform an EKG test. Activity or Shared Asset Explanation Equipment Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Acquire Equipment Tokens wait at this activity until a equipment can be acquired. Acquire Staff Tokens wait at this activity until a staff member can be acquired. Move Equipment The acquired staff moves the acquired equipment to the patient's location. Process The person delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Release Equipment The equipment acquired earlier in the the activity set is released. Walk or Wait Area This activity set models a person acquiring a location and staff, traveling to the location, spending some time there, and then releasing the staff and location. However, if either the location or staff is not immediately available they will wait in a waiting room until both are acquired. This could represent, for example, someone waiting at the DMV until their number is called. Activity or Shared Asset Explanation Location Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Wait Area Represents a waiting room chair in the 3D model that the person will possibly acquire and interact with in this activity set. Acquire Location The person attempts to acquire a location. If the location is available the token moves to the Acquire Staff activity. If the location is not available the token moves out the dashed connector to the Acquire Wait Area activity. Acquire Staff The person attempts to acquire a staff member. If the staff is available the token moves to the Escort Person activity. If the staff is not available the token moves out the dashed connector to the Acquire Wait Area activity. Walk The person walks to the acquired location. Process The person delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Release Location The location acquired earlier in the the activity set is released. Acquire Wait Area Tokens wait at this activity until a waiting room chair can be acquired. Walk to Wait Area The person walks to the acquired waiting room chair. Acquire Location The person will now be waiting in the wait area. Tokens wait at this activity until a location can be acquired. Acquire Staff The person will now be waiting in the wait area. Tokens wait at this activity until a staff can be acquired. Release Wait Area Now that the person has acquired the necessary location and staff, the waiting room chair acquired earlier in the the activity set is released. Escort or Wait Area This activity set works just like the Walk or Wait Area set detailed above except that the person will be escorted by the staff to the location instead of walking there alone. Activity or Shared Asset Explanation Location Represents a location object in the 3D model that the person will acquire and interact with in this activity set. Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Wait Area Represents a waiting room chair in the 3D model that the person will possibly acquire and interact with in this activity set. Acquire Location The person attempts to acquire a location. If the location is available the token moves to the Acquire Staff activity. If the location is not available the token moves out the dashed connector to the Acquire Wait Area activity. Acquire Staff The person attempts to acquire a staff member. If the staff is available the token moves to the Escort Person activity. If the staff is not available the token moves out the dashed connector to the Acquire Wait Area activity. Escort Person The acquired staff escorts the person to the acquired location. Process The person delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Release Location The location acquired earlier in the the activity set is released. Acquire Wait Area Tokens wait at this activity until a waiting room chair can be acquired. Walk to Wait Area The person walks to the acquired waiting room chair. Acquire Location The person will now be waiting in the wait area. Tokens wait at this activity until a location can be acquired. Acquire Staff The person will now be waiting in the wait area. Tokens wait at this activity until a staff can be acquired. Release Wait Area Now that the person has acquired the necessary location and staff, the waiting room chair acquired earlier in the the activity set is released. Process with Staff This activity set models a person acquiring a staff and then having the staff walk to a location and spend some time there before releasing the staff. This could represent, for example, a doctor coming to the patient's exam room or a nurse going into the other room to complete some charting. Activity or Shared Asset Explanation Staff Represents a staff member in the 3D model will be acquired and utilized in this activity set. Acquire Staff Tokens wait at this activity until a staff member can be acquired. Walk The acquired staff walks to the person's location or some other destination. Process The token delays an amount of time representing the time required to complete the current process. Release Staff The staff acquired earlier in the activity set is released. Two Staff Meet This activity set models a person acquiring two different staff and then having them meet and spend some time together there before releasing the staff. This could represent, for example, a doctor and nurse meeting in an office to discuss a patient's condition. Activity or Shared Asset Explanation Staff1 Represents a staff member in the 3D model will be acquired and utilized in this activity set. Staff2 Represents a second staff member in the 3D model will be acquired and utilized in this activity set. Office Points at an object in the 3D model where the staff members will meet up. Split Creates a second token. The first token will go out the bottom connector and the second will go out the connector to the right. Acquire Staff1 Tokens wait at this activity until the first staff member can be acquired. Staff1 to Office The acquired first staff walks to the Office object. Acquire Staff2 Tokens wait at this activity until the second staff member can be acquired. Staff2 to Office The acquired second staff walks to the Office object. Join Synchronizes the two tokens that came out of the Split activity. Once both tokens arrive, the token created by the Split activity is destroyed and the original token continues to the Process activity. Process The token delays an amount of time representing the time required to complete the current process. Release Staff1 The first staff acquired earlier in the activity set is released. Release Staff2 The second staff acquired earlier in the activity set is released. Escort to Exit This activity set models a person acquiring a staff to escort them to the exit and then releasing the staff before exiting the model. Activity or Shared Asset Explanation Staff Represents a staff member in the 3D model that the person will acquire and interact with in this activity set. Exit Points at an object in the 3D model where the person will exit the model. Acquire Staff Tokens wait at this activity until a staff member can be acquired. Escort Person The acquired staff escorts the person to the exit. Release Staff The staff acquired earlier in the activity set is released. Remove Person The person is removed from the model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Basic/CreatePerson/CreatePerson.html",
        "title": "Create Person",
        "content": "Overview and Key Concepts The Create Person activity creates a Person flowitem. This creates copies of a Person flowitem from the flowitem bin in the specified destination. The created person can optionally be attached to a Person Process Flow object. Connectors The Create Person activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Create Person activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Person The Person defines the flowitem in the Flowitem bin to be created. Assign To Assigns a reference on the specified label/node to the created person. See the Assign To section of Common Properties for more information. Destination The Destination defines the object where the created person will be placed. Label Set The Label Set specifies which label set will be applied to the created object. You can pick a Label Set from the picklist. You can also specify a Label Set by its rank, or by its name. For more information on Label Sets, see the People Settings topic. Person Flow If specified, the Person Flow defines the Person Process Flow that the object will be attached to after being created. Copy Token Labels If checked, all the labels currently on the token will be copied to the created person."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Basic/Process/Process.html",
        "title": "Process",
        "content": "Overview and Key Concepts The Process activity, like the Delay activity, will hold the token for a certain length of time. You can use a fixed time or you can create the delay time dynamically using a label value on a token, a statistical distribution, etc. Additionally, the Process activity manages the resources involved in the process. These resources will have their state set to the user-defined state. For those resources marked as preemptable, the resources will be made available to be acquired by requests in a higher priority tier. The Process activity also allows you to define what should happen if a resource is preempted away. Connectors The Process activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Process activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Process Time The Process Time defines the amount of time that the token will be delayed. Involved Resources The Involved Resources panel defines who and what is involved in the process. When you add an Involved Resource you have the option to add a Non-Preemptable or Preemptable resource. Both have the following properties: Object - The object(s) that make up this class of resource. State - The state that the objects defined above will be put into after starting the process. Preemptable Resources have the following additional properties. On Preempt - Here you define what to do if one of the objects defined above is preempted. On Resume - Here you define what to do when a preempted resource is reacquired or replaced."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Basic/RemovePerson/RemovePerson.html",
        "title": "Remove Person",
        "content": "Overview and Key Concepts The Remove Person activity removes a person flowitem from the 3D simulation model. Connectors The Remove Person activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Remove Person activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Person The Person defines the person flowitem in the 3D simulation model to be removed. Remove Statistically Only When checked, removes the person from the model statistically, but not physically. The person remains in the model, but is hidden and does not count towards the model census. Another Remove Person activity is needed to later remove the person from the model. This is useful when using a Person Flow and there are activities related to the person that happen after the person leaves the model. Checking this box allows the instance associated with the person to stay around while updating the statistics as if the person had left."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/ResourceActivities/ResourceActivities.html",
        "title": "People Resource Activities",
        "content": "Overview and Key Concepts The People Resource Activities facilitate acquiring and releasing resources in a people-based model. For each type of resource (Locations, Staff, Transports, and Equipments) there is a corresponding resources shared asset, acquire, and release activity. A shared asset block is used to represent an object in the 3D model to be acquired. The corresponding acquire activity is used to request the object and waits until the object is acquired. The object is used for a time and then the corresponding release activity is used to release the object. These activities use a List in the model to control the acquiring and releasing of resources. Each List in turn uses a Group in the model to define the objects that the List is populated with at the start of the model, and to define all the groups that each object is a member of. Resource Properties The following image shows properties for a Resource activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Location / Staff / Transport / Equipment Defines the object to be acquired. A specific object can be referenced using a label, code, or direct reference. Groups can be specified and the activity will attempt to acquire an object that is a member of that group. The object can also be defined using a query just like in a Pull From List activity. Alternatively, this field can be filled with a reference to another people resource of the same type. This makes the current resource a proxy for the referenced resource. Attempting to acquire the proxy resource will actually acquire the reference resource. If you reference another resource in this way the icon will update to a white version of the icon to indicate that it is a proxy resource. Priority Defines the priority of requests when attempting to acquire the specified object. When an object becomes available, it is acquired by the request with the highest priority. If an object is already acquired, but is currently preemptable, another request in a higher priority tier can preempt the resource. Priority tiers are defined as follows: Tier 1: 0 - 99 Tier 2: 100 - 199 Tier 3: 200 - 299 Tier 4: 300 - 399 ... For example, a priority 200 request would request an object that was acquired with priority 150 and that is currently preemptable. Objects are only made preemptable during a Process Activity and only if the object is designated as a preemptable resource in the properties of the Process Activity. Sort By Defines how to sort available objects. For example, entering travelDistance in this field will sort the available objects by the shortest travel distance. By default it sorts in an ascending manner (ASC) such that the object with the lowest value will be chosen first. You can swap the sort order by putting DESC after the sort criteria in order to use a descending sort. Filter By Defines how to filter available objects. For example, entering Gender = \"Female\" in this field will filter out any objects that don't have a Gender label with a value of \"Female.\" Acquire Properties Location / Staff / Transport / Equipment Resource Defines the resource shared asset to acquire from. The object acquired from the shared asset is based on the query value defined on the shared asset. Use Max Wait Timer The max wait timer will be evaluated if the token has not pulled its required amount after the specified time. See Max Wait Timer for more information. Assign To Assigns a reference on the specified label/node to the acquired object. See the Assign To section of Common Properties for more information. Puller Defines the puller object. This may be important if the query accesses fields that are dynamic and based upon the puller. Same as Last If checked and current token has acquired the shared asset previously, the activity will attempt to acquire the same object that was previously acquired instead of using the query defined on the shared asset. Same As Last Example There is a Staff Resource with the Staff field set to \"Any member of RNs\". The first time the token acquires an object it acquires RN_3 from the RNs group since it requests the first available staff member in the RNs group. The second time this token acquires from this same shared asset it will wait until it can acquire RN_3 and not try to acquire any of the other members of the RNs group. Release Properties The following image shows properties for a Release activity: Location / Staff / Transport / Equipment Resource Defines the resource shared asset from which you acquired the resource you now wish to release. Label Where the resource to release is located. The return value of this field should be a label on a token where an earlier Acquire Resource activity assigned the acquired resource to. Assign Released Resource(s) To Assigns a reference on the specified label/node to the released resource. This can be helpful if you need to maintain a reference to a resource for future use. See the Assign To section of Common Properties for more information. Connectors The People Resource Activities only allow one connector out. See Adding and Connecting Activities for more information. Groups When any people-based object is added to the model, four Groups are added to the toolbox. These Groups are tied to their corresponding List. The purpose of these Groups is to define what objects in the model are available for acquiring and releasing. Top level Groups In order to acquire an object using a People Resource Activity, the object must be added, at some level, as a member of the top level Group associated with that resource type. For example, a staff member must be a member of the Staff Group, or a member of a Group whose parent/grandparent/etc. Group is the Staff Group. Lists When any people-based object is added to the model, four Lists are added to the toolbox. Each set of acquire and release activities and resource shared asset interface with their corresponding list to manage requests for the objects on the list. For example, the Acquire Staff activity acquires from a Staff Resource shared asset which then pulls from the Staff List in order to acquire a staff. When a staff is acquired, its priority column in the list is updated so it is unavailable to other acquire requests unless the staff is in a preemptable state and the new request is of a higher, preempting tier. The Release Staff activity makes the released staff member available to other acquire activities. Each List is tied to one of the top level People Groups. This Group is automatically contained in the List's Initial Contents. When the model is reset all objects contained in the Group are pushed to the list and are then available to be acquired. The Automatically Add Group Fields checkbox is checked so that a Group field is added to the list for each Group containted in the top level Group."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/LocationResource/LocationResource.html",
        "title": "Location Resource",
        "content": "Overview and Key Concepts The Location Resource activity represents a Location asset that can be acquired and released. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/StaffResource/StaffResource.html",
        "title": "Staff Resource",
        "content": "Overview and Key Concepts The Staff Resource activity represents a Staff asset that can be acquired and released. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/TransportResource/TransportResource.html",
        "title": "Transport Resource",
        "content": "Overview and Key Concepts The Transport Resource activity represents a Transport asset that can be acquired and released. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/EquipmentResource/EquipmentResource.html",
        "title": "Equipment Resource",
        "content": "Overview and Key Concepts The Equipment Resource activity represents an Equipment asset that can be acquired and released. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/AcquireLocation/AcquireLocation.html",
        "title": "Acquire Location",
        "content": "Overview and Key Concepts The Acquire Location activity will acquire a Location object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/AcquireStaff/AcquireStaff.html",
        "title": "Acquire Staff",
        "content": "Overview and Key Concepts The Acquire Staff activity will acquire a Staff object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/AcquireTransport/AcquireTransport.html",
        "title": "Acquire Transport",
        "content": "Overview and Key Concepts The Acquire Transport activity will acquire a Transport object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/AcquireEquipment/AcquireEquipment.html",
        "title": "Acquire Equipment",
        "content": "Overview and Key Concepts The Acquire Equipment activity will acquire an Equipment object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/ReleaseLocation/ReleaseLocation.html",
        "title": "Release Location",
        "content": "Overview and Key Concepts The Release Location activity will release a Location object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/ReleaseStaff/ReleaseStaff.html",
        "title": "Release Staff",
        "content": "Overview and Key Concepts The Release Staff activity will release a Staff object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/ReleaseTransport/ReleaseTransport.html",
        "title": "Release Transport",
        "content": "Overview and Key Concepts The Release Transport activity will release a Transport object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/Resources/ReleaseEquipment/ReleaseEquipment.html",
        "title": "Release Equipment",
        "content": "Overview and Key Concepts The Release Equipment activity will release an Equipment object. See People Resource Activities for more details."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/SubFlows/SubFlows/SubFlows.html",
        "title": "People Sub Flows",
        "content": "Overview and Key Concepts People Sub Flow activities are tied to a pre-built Sub Flow Process Flow object. These activities create a new child token, assign new labels to this token, and then put the token in the Start activity of its associated Process Flow. The Process Flow tied to the activity is known as its Inner Flow and can be viewed by choosing the Inner Flow option from the activity's context menu. Inner Flow The Inner Flow is the Process Flow tied to the activity. It contains a set of activities that define the logic of the activity. The properties for these activities are evaluated and each value is stored on the new token as a label on the new token that is then used in the Process Flow. The Inner Flow of an activity can be viewed, but not modified. The intention is to allow users to view the logic of the activity so they can better understand the logic of the activity, debug unwanted behavior, and even copy the Inner Flow into a model where modifications can be made."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/SubFlows/Walk/Walk.html",
        "title": "Walk",
        "content": "Overview and Key Concepts The Walk activity will cause a person to walk to a destination. The person will exit their current location, travel to the destination, and enter the destination if it is an object. Sub Flow Activity The Walk activity is a Sub Flow Activity and its Inner Flow can be viewed if you wish to learn more about how it works, debug its behavior, or copy its logic. Connectors The Walk activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Walk activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Person The Person defines the person, or array of people, who will be walking. Destination The Destination defines the object or position to walk to."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/SubFlows/WaitInLine/WaitInLine.html",
        "title": "Wait in Line",
        "content": "Overview and Key Concepts The Wait in Line activity will cause a person to WaitInLine to a waiting line and wait in it until they reach the front of the line. The person will exit their current location, travel to the waiting line, and wait in line until they reach the front. Sub Flow Activity The WaitInLine activity is a Sub Flow Activity and its Inner Flow can be viewed if you wish to learn more about how it works, debug its behavior, or copy its logic. Connectors The WaitInLine activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the WaitInLine activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Person The Person defines the person who will wait in line. Waiting Line The Waiting Line defines the Waiting Line object the person will wait in."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/SubFlows/EscortPerson/EscortPerson.html",
        "title": "Escort Person",
        "content": "Overview and Key Concepts The Escort Person activity will cause a staff member to escort a person to a destination. The staff will exit their current location and walk to the person being escorted. The person will exit their current location and then the staff and person will walk together to the destination. If the destination is an object both the staff and person will enter it. Sub Flow Activity The Escort Person activity is a Sub Flow Activity and its Inner Flow can be viewed if you wish to learn more about how it works, debug its behavior, or copy its logic. Connectors The Escort Person activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Escort Person activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Person The Person defines the person, or array of people, who will be escorted. Destination The Destination defines the object, or position, the person will be escorted to. Staff The Staff defines the staff, or array of staff, who will be escorting the person."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/SubFlows/TransportPerson/TransportPerson.html",
        "title": "Transport Person",
        "content": "Overview and Key Concepts The Transport Person activity will cause a staff member to transport a person to a destination using a transport. The staff will exit their current location, walk to the transport, pick it up, and then walk to the person being transported. The person will exit their current location and enter the transport. The staff will then take the transport to the destination. Upon arriving at the destination, the person will exit the transport unless the Keep Person on Transport checkbox is checked. If the destination is an object, the person will enter the destination while the staff will drop off the transport and also enter the destination. Sub Flow Activity The Transport Person activity is a Sub Flow Activity and its Inner Flow can be viewed if you wish to learn more about how it works, debug its behavior, or copy its logic. Connectors The Transport Person activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Transport Person activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Person The Person defines the person who will be transported. If an array of people is specified, the first will be transported while the rest follow along. Destination The Destination defines the object, or position, the person will be transported to. Staff The Staff defines the staff who will be transporting the person. If an array of staff is specified, the first will push the transport while the rest follow along. Transport The Transport defines the transport which will be used to transport the person. Keep Person on Transport The Keep Person on Transport checkbox defines what the person does when the transport reaches the destination. By default the box is not checked and the person will exit the transport and then enter the destination if it is an object. If checked, the person will not exit the transport and if the destination is a location the transport (with the person still inside) will be moved inside the location."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/ProcessFlowActivities/SubFlows/MoveEquipment/MoveEquipment.html",
        "title": "Move Equipment",
        "content": "Overview and Key Concepts The Move Equipment activity will cause a staff to move an equipment or transport to a destination. The staff will exit their current location, travel to the equipment (or transport), pick it up, and then travel to the destination. If the destination is an object, the staff will drop off the equipment and enter the destination. Sub Flow Activity The Move Equipment activity is a Sub Flow Activity and its Inner Flow can be viewed if you wish to learn more about how it works, debug its behavior, or copy its logic. Connectors The Move Equipment activity only allows one connector out. See Adding and Connecting Activities for more information. Properties The following image shows properties for the Move Equipment activity: Each of these properties will be explained in the following sections. Name Used to change the name of the activity. See Name for more information about this property. Font The Font button opens a window to edit the activity's background color and font properties. See Font for more information about this property. Statistics The Statistics button opens the activity's statistics window. See Statistics for more information about this property. Equipment The Equipment defines the equipment or transport to be moved. Destination The Destination defines the object or position to walk to. Staff The Staff defines staff that will be moving the equipment. If an array of staff is specified, the first will move the equipment while the rest follow along."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PeopleTableConcepts/PeopleTableConcepts.html",
        "title": "People Statistics Tables",
        "content": "Overview and Key Concepts The People Statistics Tables are tables that are added to every model that uses activities or objects from the People module. They record data about the following objects: Flowitems created with the Create Person activity (usually a Person) Staff Locations (including Multi-Locations ) Transports Equipment Waiting Lines Meaningful statistics can be derived from each table individually. For example, the StaffTravelDistance activity records how far each Staff object travels during the model run. You could use this table to derive the average distance travelled by all staff. In addition, these tables are designed to work as a database, so that you can get more detailed statistics. For example, the StaffGroups table records which Staff objects belong in each Staff Group. By combining the information in this table with the information in the StaffTravelDistance table, you could determine the average distanced travelled by the staff in a certain group. The best way to visualize data from these tables is using a People Template. More information on these templates can be found in the People Templates topic. Some of these tables will grow longer as the model runs. Since not all users may be interested in all metrics, you can disable any of the People Statistics Tables, which will prevent it from collecting any data. History Tables If a table has the word \"History\" in its name, then that table is likely to grow longer and longer as the model runs. All People Statistics Tables have an internal Statistics Collector . You can duplicate this internal collector, either to learn how the data for that table is collected, or to create a modified version of the table. Time and Distance Units All People Statistics Tables record durations in seconds and distances in meters, regardless of model units. All time stamps are recorded as DateTime values, so that the difference between two time stamps is always in seconds. Person Tables The following tables record information about flowitems created with the Create Person activity: Person Labels Person States Person Milestones Person Travel Distance Person Wait Times Census History Staff Tables The following tables record information about Staff objects in the Staff Group: Staff Groups Staff States Staff State History Staff Travel Distance Person Wait for Staff History Location Tables The following tables record information about Location object in the Locations Group: Location Groups Location States Location State History Location Census History Location Staytime History Person Wait for Location Equipment Tables The following tables record information about Equipment in the Equipment Group: Equipment Groups Equipment States Equipment State History Equipment Travel Distance Person Wait for Equipment History Transport Tables The following tables record information about Transports in the Transport Group: Transport Groups Transport States Transport State History Transport Travel Distance Person Wait for Transport History Waiting Line Tables The following tables record information about Waiting Line objects: Line Census History Line Staytime History Properties Each People Statistics Table has the following properties: Enabled - Clear this box to disable this table. Note that People Templates that require this table will no longer function if the table is disabled. Data Table - Displays the data recorded by this table. Copy internal Statistics Collector - Click this button to have a copy of the internal statistics collector created and added to the toolbox. Store data on hard drive - Check this box to indicate that the data recorded by this table should be written to the hard drive to perserve RAM."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonLabels/PersonLabels.html",
        "title": "Person Labels",
        "content": "Overview The Person Labels table records the label values of each flowitem created with the Create Person activity. The labels that appear in the table are the labels specified with the People Settings object. For more general information on People Statistics Tables, see the People Statistics Tables topic. Label Column Ordering The order of columns in this table may not exactly match the order specified in the People Settings object. This table orders those columns first by type (number, string, or pointer), and then by the specified order. Rows Rows are added whenever a new flowitem is created with the Create Person activity. Columns PID - This column records the id of the flowitem that was created with Create Person. Number Columns - These columns appear if there are labels in the People Settings object that store number data. The column name matches the name of the label. String Columns - These columns appear if there are labels in the People Settings object that store string data. The column name matches the name of the label. Pointer Columns - These columns appear if there are labels in the People Settings object that store pointer (node) data. The column name matches the name of the label. Value Changes The PID column does not change once added. All other columns will reflect the current value of the flowitem's label, by listening for changes to the label value. When the flowitem leaves the model, these columns will contain the final value of each label. Warmup Behavior At the warmup time, this table will remove the rows corresponding to flowitems that are no longer in the model. The data in the remaining rows will remain unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonStates/PersonStates.html",
        "title": "Person States",
        "content": "Overview The Person States table records the time a flowitem, created with the Create Person activity, spends in one of the Person States, specified in the People Settings object. For more general information on People Statistics Tables, see the People Statistics Tables topic. Time Units All times are recorded in seconds, regardless of model units. This is true for all People Statistics Tables. Rows Rows are added whenever a new flowitem is created with the Create Person activity. Columns PID - This column records the id of the flowitem that was created with Create Person. Default States - These columns record the amount of time that the flowitem has spent in one of the default states. The name of the column is the Display Name specified by the People Settings object. Additional States - These columns record the amount of time that the flowitem has spent in one of the additional states. The name of the column is the name of the state specified in the People Settings object. UtilizedTime - This column records the total time spent in a state marked as Utilized in the People Settings object. TotalTime - This column records the total time spent in any state specified in the People Settings object. ExcludedTime - This column records the total time spent in a state marked as Excluded in the Peopl Settings object. Utilization - This column records the utilization as a percentage. The value is calculated as: UtilizedTime / (TotalTime - ExcludedTime). Value Changes Values in the PID column do not change. Values in all other columns always reflect the time spent in the various states. When the flowitem leaves the model, these columns will show the total time spent in each state, as well as the associated totals and utilization. Warmup Behavior At the warmup time, this table will remove the rows corresponding to flowitems that are no longer in the model. The data in the remaining rows will remain unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonMilestones/PersonMilestones.html",
        "title": "Person Milestones",
        "content": "Overview The PersonMilestones table records the time at which a flowitem created with the Create Person activity was created and removed. This table also records the times that the flowitem arrived at any other Milestone activities that are linked to this table. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a new row each time a flowitem is created with the Create Person activity. Columns LastMilestoneAcheivedColumn - This column is present for compatibility with Milestone Collectors . Created - This column records the time that the flowitem was created. Milestone Columns - These columns are defined by Milestone activities, like other Milestone Collectors. Removed - This column records the time that the flowitem was removed with the Remove Person activity. PID - This column records the id of the flowitem that was created with Create Person. Value Changes The LastMilestoneAcheivedColumn, Created, and PID columns are never updated once the row is added. All other columns are updated when the corresponding milestone is acheived. Warmup Behavior At the warmup time, this table will remove the rows corresponding to flowitems that are no longer in the model. The data in the remaining rows will remain unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonTravelDistance/PersonTravelDistance.html",
        "title": "Person Travel Distance",
        "content": "Overview This table records how far each flowitem created with the Create Person activity travels during its time in the model. For more general information on People Statistics Tables, see the People Statistics Tables topic. Distance Units Distance is recorded in meters, regardless of model units. This is true for all People Statistics Tables. Rows This table adds a new row each time a flowitem is created with the Create Person activity. Columns PID - This column records the id of the flowitem that was created with Create Person. Distance - This column records the distance that each flowitem travels while in the model. Value Changes The PID column is not updated once the row has been added. The Distance column is updated any time the flowitem is involved in one of the following activities: Walk Escort Person Transport Person Wait In Line Warmup Behavior At the warmup time, this table will remove the rows corresponding to flowitems that are no longer in the model. The data in the remaining rows will remain unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonWaitTimes/PersonWaitTimes.html",
        "title": "Person Wait Times",
        "content": "Overview The Person Wait Times table records the amount of time that each flowitem created with the Create Person activity spent waiting for each of the following resources: Location Resources Staff Resources Transport Resources Equipment Resources It is possible for a flowitem to wait for more than one kind of resource simultaneously. This means that the time spent waiting for all resources may exceed the total time the flowitem spent in the model. For more general information on People Statistics Tables, see the People Statistics Tables topic. Time Units All times are recorded in seconds, regardless of model units. This is true for all People Statistics Tables. Rows This table adds a new row each time a flowitem is created with the Create Person activity. Columns PID - This column records the id of the flowitem that was created with Create Person. Location - This column records the total time the flowitem waited for a Location Resource. Staff - This column records the total time the flowitem waited for a Staff Resource. Transport - This column records the total time the flowitem waited for a Transport Resource. Equipment - This column records the total time the flowitem waited for a Equipment Resource. Value Changes The PID column does not change, once the row is added. The other columns show the total time a flowitem has waited for a specific type of resource. This value continuously updates until the flowitem leaves the model. Warmup Behavior At the warmup time, this table will remove the rows corresponding to flowitems that are no longer in the model. The data in the remaining rows will remain unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/CensusHistory/CensusHistory.html",
        "title": "Census History",
        "content": "Overview The Census History table records the creation and removal events of every flowitem in the model. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row each time a flowitem is created with the Create Person activity, or when the flowitem is removed with the Remove Person activity. Columns PID - This column records the id of the flowitem that was created or removed. Time - This column records the time that the flowitem was created or removed. InOut - This column records a 1 if the flowitem was created, and a -1 if it was removed. Value Changes Once a row is added, none of the values in this table change. Warmup Behavior At the warmup time, this table removes all rows that correspond to flowitems that have left the model. The data in all remaining rows will not be changed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/StaffGroups/StaffGroups.html",
        "title": "Staff Groups",
        "content": "Overview The Staff Groups table shows each object and sub-group within the Staff Group. The table indicates whether an object is a member of a sub-group. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added per member of the Staff Group. Columns Staff - This column records the id of each member of the Staff group. Group Columns - These columns appear if there are sub-groups within the Staff Group. There is one column per sub-group. The value in these columns indicates whether the Staff object is a member of the sub-group. Value Changes After the initial time-zero event, the values in this table do not change. Warmup Behavior This table does not change at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/StaffStates/StaffStates.html",
        "title": "Staff States",
        "content": "Overview The Staff States table specifies how long each member of the Staff Group spends in one of the Staff States, specified in the People Settings object. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added for each member of the Staff Group. Columns Staff - This column records the id of the Staff object on this row. Default States - These columns record the amount of time that the Staff object has spent in one of the default states. The name of the column is the Display Name specified by the People Settings object. Additional States - These columns record the amount of time that the Staff object has spent in one of the additional states. The name of the column is the name of the state specified in the People Settings object. UtilizedTime - This column records the total time spent in a state marked as Utilized in the People Settings object. TotalTime - This column records the total time spent in any state specified in the People Settings object. ExcludedTime - This column records the total time spent in a state marked as Excluded in the Peopl Settings object. Utilization - This column records the utilization as a percentage. The value is calculated as: UtilizedTime / (TotalTime - ExcludedTime). Value Changes The Staff column does not change after time zero. All other columns update continuously at the model runs. Warmup Behavior At the warmup time, the state data on each Staff object is reset to zero. Consequently, this table will show zeros in all state-based columns at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/StaffStateHistory/StaffStateHistory.html",
        "title": "Staff State History",
        "content": "Overview The Staff State History table records time-in-state information for every member of the Staff group, for each 15-minute interval of time. This table includes time in each Staff state, time in each Availability State, and time in each combination of Staff/Availability state. For more information on the Staff states, see the People Settings topic. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds one row per member of the Staff group, every 15 minutes. Columns Staff - This column records the id of the Staff object on this row. StartTime - This column records the time at the start of each 15 minute interval. Staff States - The table contains one of these columns for each of the Staff States specified in the PeopleSettings object. Each column shows the total time (in seconds) the object has spent in that state since the interval began. Availability States - The table contains one of these columns for each of the Availability states (Available, Acquired, Unavailable). Each column shows the total time (in seconds) the object has spent in that state since the interval begain. Combined States - The table contains one of these columns for each unique combination of Staff state and Availability state. For example, Idle_Available is a different state than Idle_Acquired. Each column shows the total time (in seconds) the object has spent in that combination of states since the interval begain. Duration - This column records the total time spent in the interval to date. StateUtilization - This column shows the utilization of the object for the interval, based on the Staff states. AvailabilityUtilization - This column shows the utilization of the object for the interval, based on the Availability states. CombinedUtilization - This column shows the utilization of the object for the interval, based on the combination of Staff and Availability states. Value Changes The Staff and StartTime columns are set when the row is added. All other columns show the current value, if the interval has not ended, or the final value for the interval if it has ended. Warmup Behavior At the warmup time, this table will remove the rows corresponding to completed intervals. All columns (except the Staff column) are reset as if the interval started over. However, the interval timing will continue to be based on the model start time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/StaffTravelDistance/StaffTravelDistance.html",
        "title": "Staff Travel Distance",
        "content": "Overview The Staff Travel Distance table records how far each member of the Staff Group has travelled during the model run. For more general information on People Statistics Tables, see the People Statistics Tables topic. Distance Units Distance is recorded in meters, regardless of model units. This is true for all People Statistics Tables. Rows At model time zero, one row is added for each member of the Staff Group. Columns Staff - This column records the id of the Staff object. Distance - This column records the distance travelled by each Staff object during the model run. Value Changes The Staff column does not change after time zero. The Distance column updates whenever the Staff object is used in any of the following activities: Escort Person Transport Person Wait In Line Move Equipment Warmup Behavior At the warmup time, this table resets the Distance column to zero."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonWaitForStaffHistory/PersonWaitForStaffHistory.html",
        "title": "Person Wait for Staff History",
        "content": "Overview The Person Wait for Staff History table records information about each request for any Staff Resource . This information includes the time the request was made, as well as the time the request was fulfilled. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row any time a flowitem (created by the Create Person activity) attempts to acquire something from a Staff Resource. Columns PID - This column records the id of the flowitem that is requesting a resource. Flow - This column records the name of the Process Flow containing the Acquire Staff activity. Activity - This column records the name of activity used to make the request. Priority - This column records the priority of the request. RequestTime - This column records the time the request is made. AcquireTime - This column records the time the request is either fulfilled or cancelled. Staff - This column records the ID of the Staff that is acquired as a result of the request. If the request was cancelled, this column will contain a null value. Value Changes The AcquireTime and Staff columns are set once the request is either fulfilled or cancelled. All other columns are set when the request is created. Warmup Behavior At the warmup time, this table will remove the rows corresponding to complete requests. The data in the remaining rows will remain unchanged."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LocationGroups/LocationGroups.html",
        "title": "Location Groups",
        "content": "Overview The Location Groups table shows each object and sub-group within the Locations Group. The table indicates whether an object is a member of a sub-group. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, on row is added per member of the Locations Group. Columns Location - This column records the id of each member of the Locations Group. Group Columns - These columns appear if there are sub-groups within the Locations Group. There is one column per sub-group. The value in these columns indicates whether the Location object is a member of the sub-group. Value Changes After the initial time-zero event, the values in this table do not change. Warmup Behavior This table does not change at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LocationStates/LocationStates.html",
        "title": "Location States",
        "content": "Overview The Location States table specifies how long each member of the Locations Group spends in one of the Location States, specified in the People Settings object. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added for each member of the Locations Group. Columns Location - This column records the id Location object on this row. Default States - These columns record the amount of time that the Location object has spent in one of the default states. The name of the column is the Display Name specified by the People Settings object. Additional States - These columns record the amount of time that the Location object has spent in one of the additional states. The name of the column is the name of the state specified in the People Settings object. UtilizedTime - This column records the total time spent in a state marked as Utilized in the People Settings object. TotalTime - This column records the total time spent in any state specified in the People Settings object. ExcludedTime - This column records the total time spent in a state marked as Excluded in the Peopl Settings object. Utilization - This column records the utilization as a percentage. The value is calculated as: UtilizedTime / (TotalTime - ExcludedTime). Value Changes The Location column does not change after time zero. All other columns update continuously at the model runs. Warmup Behavior At the warmup time, the state data on each Location object is reset to zero. Consequently, this table will show zeros in all state-based columns at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LocationStateHistory/LocationStateHistory.html",
        "title": "Location State History",
        "content": "Overview The Location State History table records time-in-state information for every member of the Locations group, for each 15-minute interval of time. This table includes time in each Location state, time in each Availability State, and time in each combination of Location/Availability state. For more information on the Location states, see the People Settings topic. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds one row per member of the Locations group, every 15 minutes. Columns Location - This column records the id of the Location object on this row. StartTime - This column records the time at the start of each 15 minute interval. Location States - The table contains one of these columns for each of the Location States specified in the PeopleSettings object. Each column shows the total time (in seconds) the object has spent in that state since the interval began. Availability States - The table contains one of these columns for each of the Availability states (Available, Acquired, Unavailable). Each column shows the total time (in seconds) the object has spent in that state since the interval begain. Combined States - The table contains one of these columns for each unique combination of Location state and Availability state. For example, Idle_Available is a different state than Idle_Acquired. Each column shows the total time (in seconds) the object has spent in that combination of states since the interval begain. Duration - This column records the total time spent in the interval to date. StateUtilization - This column shows the utilization of the object for the interval, based on the Location states. AvailabilityUtilization - This column shows the utilization of the object for the interval, based on the Availability states. CombinedUtilization - This column shows the utilization of the object for the interval, based on the combination of Location and Availability states. Value Changes The Location and StartTime columns are set when the row is added. All other columns show the current value, if the interval has not ended, or the final value for the interval if it has ended. Warmup Behavior At the warmup time, this table will remove the rows corresponding to completed intervals. All columns (except the Location column) are reset as if the interval started over. However, the interval timing will continue to be based on the model start time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LocationCensusHistory/LocationCensusHistory.html",
        "title": "Location Census History",
        "content": "Overview The Location Census History table records the entry and exits events for every flowitem in the model as they enter and exit Location objects. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row every time a flowitem (created with the Create Person activity) enters or exits a Location in the Locations Group. Columns Time -This column records the time of the entry or exit. PID - This column records the id of the flowitem that entered or exited. Location - This column records the location that was entered or exited. InOut - This column records a 1 if the location was entered. If the location was exited, this column records a -1. Value Changes Once a row is added, the values in that row do not change. Warmup Behavior At the warmup time, this table will remove all rows except the rows that record a flowitem entering its current Location. The data on these rows remains unchanged."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LocationStaytimeHistory/LocationStaytimeHistory.html",
        "title": "Location Staytime History",
        "content": "Overview The Location Staytime History records the entry and exit times for each flowitem as they enter and exit Location objects. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a new row when a flowitem (created with the Create Person activity) enters a Location in the Locations Group. Columns PID - This column records the id of the flowitem that entered the Location. Location - This column records the id of the Location that the flowitem entered. EnterTime - This column records the time that the flowitem entered the location. Exit Time - This column records the time that the flowitem exited the location. Value Changes The ExitTime column is set to the current time when the flowitem exits the Location. All other values are set when the row is added. Warmup Behavior At the warmup time, this table removes all rows that have a value in the ExitTime column. The data in the remaining rows is unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonWaitForLocationHistory/PersonWaitForLocationHistory.html",
        "title": "Person Wait for Location History",
        "content": "Overview The Person Wait for Location History table records information about each request for any Staff Resource . This information includes the time the request was made, as well as the time the request was fulfilled. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row any time a flowitem (created by the Create Person activity) attempts to acquire something from a Location Resource. Columns PID - This column records the id of the flowitem that is requesting a resource. Flow - This column records the name of the Process Flow containing the Acquire Location activity. Activity - This column records the name of activity used to make the request. Priority - This column records the priority of the request. RequestTime - This column records the time the request is made. AcquireTime - This column records the time the request is either fulfilled or cancelled. Location - This column records the ID of the Location that is acquired as a result of the request. If the request was cancelled, this column will contain a null value. Value Changes The AcquireTime and Location columns are set once the request is either fulfilled or cancelled. All other columns are set when the request is created. Warmup Behavior At the warmup time, this table will remove the rows corresponding to complete requests. The data in the remaining rows will remain unchanged."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/TransportGroups/TransportGroups.html",
        "title": "Transport Groups",
        "content": "Overview The Transport Groups table shows each object and sub-group within the Transports Group. The table indicates whether an object is a member of a sub-group. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added per member of the Transports Group. Columns Transport - This column records the id of each member of the Transport group. Group Columns - These columns appear if there are sub-groups within the Transports Group. There is one column per sub-group. The value in these columns indicates whether the Transport object is a member of the sub-group. Value Changes After the initial time-zero event, the values in this table do not change. Warmup Behavior This table does not change at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/TransportStates/TransportStates.html",
        "title": "Transport States",
        "content": "Overview The Transport States table specifies how long each member of the Transports Group spends in one of the Transport States, specified in the People Settings object. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added for each member of the Transports Group. Columns Transport - This column records the id Transport object on this row. Default States - These columns record the amount of time that the Transport object has spent in one of the default states. The name of the column is the Display Name specified by the People Settings object. Additional States - These columns record the amount of time that the Transport object has spent in one of the additional states. The name of the column is the name of the state specified in the People Settings object. UtilizedTime - This column records the total time spent in a state marked as Utilized in the People Settings object. TotalTime - This column records the total time spent in any state specified in the People Settings object. ExcludedTime - This column records the total time spent in a state marked as Excluded in the Peopl Settings object. Utilization - This column records the utilization as a percentage. The value is calculated as: UtilizedTime / (TotalTime - ExcludedTime). Value Changes The Transport column does not change after time zero. All other columns update continuously at the model runs. Warmup Behavior At the warmup time, the state data on each Transport object is reset to zero. Consequently, this table will show zeros in all state-based columns at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/TransportStateHistory/TransportStateHistory.html",
        "title": "Transport State History",
        "content": "Overview The Transport State History table records time-in-state information for every member of the Transports group, for each 15-minute interval of time. This table includes time in each Transport state, time in each Availability State, and time in each combination of Transport/Availability state. For more information on the Transport states, see the People Settings topic. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds one row per member of the Transports group, every 15 minutes. Columns Transport - This column records the id of the Transport object on this row. StartTime - This column records the time at the start of each 15 minute interval. Transport States - The table contains one of these columns for each of the Transport States specified in the PeopleSettings object. Each column shows the total time (in seconds) the object has spent in that state since the interval began. Availability States - The table contains one of these columns for each of the Availability states (Available, Acquired, Unavailable). Each column shows the total time (in seconds) the object has spent in that state since the interval begain. Combined States - The table contains one of these columns for each unique combination of Transport state and Availability state. For example, Idle_Available is a different state than Idle_Acquired. Each column shows the total time (in seconds) the object has spent in that combination of states since the interval begain. Duration - This column records the total time spent in the interval to date. StateUtilization - This column shows the utilization of the object for the interval, based on the Transport states. AvailabilityUtilization - This column shows the utilization of the object for the interval, based on the Availability states. CombinedUtilization - This column shows the utilization of the object for the interval, based on the combination of Transport and Availability states. Value Changes The Transport and StartTime columns are set when the row is added. All other columns show the current value, if the interval has not ended, or the final value for the interval if it has ended. Warmup Behavior At the warmup time, this table will remove the rows corresponding to completed intervals. All columns (except the Transport column) are reset as if the interval started over. However, the interval timing will continue to be based on the model start time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/TransportTravelDistance/TransportTravelDistance.html",
        "title": "Transport Travel Distance",
        "content": "Overview The Transport Travel Distance table records how far each member of the Transports Group has travelled during the model run. For more general information on People Statistics Tables, see the People Statistics Tables topic. Distance Units Distance is recorded in meters, regardless of model units. This is true for all People Statistics Tables. Rows At model time zero, one row is added for each member of the Transports Group. Columns Transport - This column records the id of the Transport object. Distance - This column records the distance travelled by each Transport object during the model run. Value Changes The Transport column does not change after time zero. The Distance column updates whenever the Transport object is used in any of the following activities: Escort Person Transport Person Wait In Line Move Equipment Warmup Behavior At the warmup time, this table resets the Distance column to zero."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonWaitForTransportHistory/PersonWaitForTransportHistory.html",
        "title": "Person Wait for Transport History",
        "content": "Overview The Person Wait for Transport History table records information about each request for any Transport Resource . This information includes the time the request was made, as well as the time the request was fulfilled. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row any time a flowitem (created by the Create Person activity) attempts to acquire something from a Transport Resource. Columns PID - This column records the id of the flowitem that is requesting a resource. Flow - This column records the name of the Process Flow containing the Acquire Transport activity. Activity - This column records the name of activity used to make the request. Priority - This column records the priority of the request. RequestTime - This column records the time the request is made. AcquireTime - This column records the time the request is either fulfilled or cancelled. Transport - This column records the ID of the Transport that is acquired as a result of the request. If the request was cancelled, this column will contain a null value. Value Changes The AcquireTime and Transport columns are set once the request is either fulfilled or cancelled. All other columns are set when the request is created. Warmup Behavior At the warmup time, this table will remove the rows corresponding to complete requests. The data in the remaining rows will remain unchanged."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/EquipmentGroups/EquipmentGroups.html",
        "title": "Equipment Groups",
        "content": "Overview The Equipment Groups table shows each object and sub-group within the Equipment Group. The table indicates whether an object is a member of a sub-group. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added per member of the Equipments Group. Columns Equipment - This column records the id of each member of the Equipment group. Group Columns - These columns appear if there are sub-groups within the Equipments Group. There is one column per sub-group. The value in these columns indicates whether the Equipment object is a member of the sub-group. Value Changes After the initial time-zero event, the values in this table do not change. Warmup Behavior This table does not change at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/EquipmentStates/EquipmentStates.html",
        "title": "Equipment States",
        "content": "Overview The Equipment States table specifies how long each member of the Equipment Group spends in one of the Equipment States, specified in the People Settings object. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows At model time zero, one row is added for each member of the Equipment Group. Columns Equipment - This column records the id Equipment object on this row. Default States - These columns record the amount of time that the Equipment object has spent in one of the default states. The name of the column is the Display Name specified by the People Settings object. Additional States - These columns record the amount of time that the Equipment object has spent in one of the additional states. The name of the column is the name of the state specified in the People Settings object. UtilizedTime - This column records the total time spent in a state marked as Utilized in the People Settings object. TotalTime - This column records the total time spent in any state specified in the People Settings object. ExcludedTime - This column records the total time spent in a state marked as Excluded in the Peopl Settings object. Utilization - This column records the utilization as a percentage. The value is calculated as: UtilizedTime / (TotalTime - ExcludedTime). Value Changes The Equipment column does not change after time zero. All other columns update continuously at the model runs. Warmup Behavior At the warmup time, the state data on each Equipment object is reset to zero. Consequently, this table will show zeros in all state-based columns at the warmup time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/EquipmentTravelDistance/EquipmentTravelDistance.html",
        "title": "Equipment Travel Distance",
        "content": "Overview The Equipment Travel Distance table records how far each member of the Equipment Group has travelled during the model run. For more general information on People Statistics Tables, see the People Statistics Tables topic. Distance Units Distance is recorded in meters, regardless of model units. This is true for all People Statistics Tables. Rows At model time zero, one row is added for each member of the Equipment Group. Columns Equipment - This column records the id of the Equipment object. Distance - This column records the distance travelled by each Equipment object during the model run. Value Changes The Equipment column does not change after time zero. The Distance column updates whenever the Equipment object is used in any of the following activities: Escort Person Wait In Line Move Equipment Warmup Behavior At the warmup time, this table resets the Distance column to zero."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/PersonWaitForEquipmentHistory/PersonWaitForEquipmentHistory.html",
        "title": "Person Wait for Equipment History",
        "content": "Overview The Person Wait for Equipment History table records information about each request for any Equipment Resource . This information includes the time the request was made, as well as the time the request was fulfilled. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row any time a flowitem (created by the Create Person activity) attempts to acquire something from a Equipment Resource. Columns PID - This column records the id of the flowitem that is requesting a resource. Flow - This column records the name of the Process Flow containing the Acquire Equipment activity. Activity - This column records the name of activity used to make the request. Priority - This column records the priority of the request. RequestTime - This column records the time the request is made. AcquireTime - This column records the time the request is either fulfilled or cancelled. Equipment - This column records the ID of the Equipment that is acquired as a result of the request. If the request was cancelled, this column will contain a null value. Value Changes The AcquireTime and Equipment columns are set once the request is either fulfilled or cancelled. All other columns are set when the request is created. Warmup Behavior At the warmup time, this table will remove the rows corresponding to complete requests. The data in the remaining rows will remain unchanged."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LineCensusHistory/LineCensusHistory.html",
        "title": "Line Census History",
        "content": "Overview The Line Census History table records the entry and exits events for every flowitem in the model as they enter and exit Waiting Line objects. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a row every time a flowitem (created with the Create Person activity) enters or exits Waiting Line object. Columns Time -This column records the time of the entry or exit. PID - This column records the id of the flowitem that entered or exited. Line - This column records the Waiting Line that was entered or exited. InOut - This column records a 1 if the line was entered. If the Line was exited, this column records a -1. Value Changes Once a row is added, the values in that row do not change. Warmup Behavior At the warmup time, this table will remove all rows except the rows that record a flowitem entering its current Waiting Line. The data on these rows remains unchanged."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTables/LineStaytimeHistory/LineStaytimeHistory.html",
        "title": "Line Staytime History",
        "content": "Overview The Line Staytime History records the entry and exit times for each flowitem as they enter and exit Waiting Line objects. For more general information on People Statistics Tables, see the People Statistics Tables topic. Rows This table adds a new row when a flowitem (created with the Create Person activity) enters a Waiting Line object. Columns PID - This column records the id of the flowitem that entered the line. Line - This column records the id of the line that the flowitem entered. EnterTime - This column records the time that the flowitem entered the line. Exit Time - This column records the time that the flowitem exited the line. Value Changes The ExitTime column is set to the current time when the flowitem exits the Line. All other values are set when the row is added. Warmup Behavior At the warmup time, this table removes all rows that have a value in the ExitTime column. The data in the remaining rows is unaffected."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PeopleTemplateConcepts/PeopleTemplateConcepts.html",
        "title": "People Templates",
        "content": "Overview and Key Concepts People Templates provide a quick and easy way to create charts for People-based models. You can use People Templates to display data from a People Statistics Table in an intuitive way. The following charts are a few examples of the available templates: All People Templates are a special kind of Chart Template , in that they use standard FlexSim tools to gather the desired data. They are special because they consist solely of a Calculated Table that is configured to query one or more People Statistics Tables. People Templates provide very general data by default, such as average data for all Person flowitems. However, you will likely need get more specific data. The previous example charts show specific data, rather than the default general data. The first categorizes the original data by type. The second and third show examples of creating and comparing multiple subsets of the original data. In order to create these kind of specific charts, all People Templates expose the Subsets and Partitions tabs of the Query Builder interface for the internal Calculated Table. Subsets allow you to create subsets of the original data, and Partitions allow you to categorize the data. Subset Limits All People Templates have a Subsets panel. It is identical to the Subsets tab on the Calculated Table, with one exception: some People Templates will not allow you to make Subsets, if you have a certain number of partitions. Details about this exception are documented with each particular template. Partition Limits All People Templates have a Partitions panel. It is identical to the Partitions group box on the Calculated Table, with one exception: some templates will limit the number of Partitions you can have. Details about this exception are documented with each particular template."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgStaytimeBar/AvgStaytimeBar.html",
        "title": "Average Staytime Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time that flowitems (created with the Create Person activity) spend in the model. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/StaytimeBox/StaytimeBox.html",
        "title": "Staytime Box Plot People Template",
        "content": "Overview and Key Concepts This template calculates and displays the time between a flowitem (created with the Create Person activity) acheiving two milestones. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgMilestoneBar/AvgMilestoneBar.html",
        "title": "Average Milestone Times Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time span from when a flowitem (created with the Create Person activity) is created to when it acheives any other milestone. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgMilestoneMilestoneBar/AvgMilestoneMilestoneBar.html",
        "title": "Average Milestone-Milestone Times Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time between a flowitem (created with the Create Person activity) acheiving two milestones. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/MilestoneMilestoneBox/MilestoneMilestoneBox.html",
        "title": "Milestone-Milestone Times Box Plot People Template",
        "content": "Overview and Key Concepts This template calculates and displays how long each flowitem (created with the Create Person activity) spends in the model. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgStateTable/AvgStateTable.html",
        "title": "Average State Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays average the Utilization as well as the average time in each state of all flowitems (created with the Create Person activity). All values are calculated as percentages. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This templates does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgStatePie/AvgStatePie.html",
        "title": "Average State Pie People Template",
        "content": "Overview and Key Concepts This template calculates and displays average the Utilization as well as the average time in each state of all flowitems (created with the Create Person activity). All values are calculated as percentages. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgStateBar/AvgStateBar.html",
        "title": "Average State Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays average the Utilization as well as the average time in each state of all flowitems (created with the Create Person activity). All values are calculated as percentages. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgDistanceTable/AvgDistanceTable.html",
        "title": "Average Distance Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays average distance that flowitems (created with the Create Person activity) have travelled. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This templates does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgDistanceBar/AvgDistanceBar.html",
        "title": "Average Distance Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays average distance that flowitems (created with the Create Person activity) have travelled. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgWaitTimesTable/AvgWaitTimesTable.html",
        "title": "Average Wait Times Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays average time that flowitems (created with the Create Person activity) have waited for Locations, Staff, Equipment and Transports. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This templates does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/AvgWaitTimesBar/AvgWaitTimesBar.html",
        "title": "Average Wait Times Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays average time that flowitems (created with the Create Person activity) have waited for Locations, Staff, Equipment and Transports. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/CensusBar/CensusBar.html",
        "title": "Census Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that are currently in the model. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/CensusVsTime/CensusVsTime.html",
        "title": "Census vs Time People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that are in the model over time. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/ModelThroughputTable/ModelThroughputTable.html",
        "title": "Model Throughput Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that have exited the model using a Remove Person activity. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit subset or partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/PersonTemplates/ModelThroughputBar/ModelThroughputBar.html",
        "title": "Model Throughput Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that have exited the model using a Remove Person activity. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit subset or partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffTemplates/AvgStateTable/AvgStateTable.html",
        "title": "Average State Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays average the Utilization as well as the average time in each state of all Staff objects that are members of the Staff Group. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This templates does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffTemplates/AvgStatePie/AvgStatePie.html",
        "title": "Staff Average State Pie People Template",
        "content": "Overview and Key Concepts This template calculates and displays average the Utilization as well as the average time in each state of all Staff objects that are members of the Staff Group. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffTemplates/AvgStateBar/AvgStateBar.html",
        "title": "Staff Average State Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays average the Utilization as well as the average time in each state of all Staff objects that are members of the Staff Group. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of one Partition, and only if no Subsets are used. If Subsets are used, then no Partitions are allowed. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffTemplates/AvgDistanceTable/AvgDistanceTable.html",
        "title": "Staff Average Distance Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays average distance Staff objects in the Staff Group travel. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This templates does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffTemplates/AvgDistanceBar/AvgDistanceBar.html",
        "title": "Staff Average Distance Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays average distance Staff objects in the Staff Group travel. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffTemplates/AvgWaitForStaffBar/AvgWaitForStaffBar.html",
        "title": "Average Wait for Staff Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time a flowitem (created with the Create Person activity) waits to acquire a Staff Resource . For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateTable/StaffAvgStateTable.html",
        "title": "Staff Avg State Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStatePie/StaffAvgStatePie.html",
        "title": "Staff Avg State Table Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateBar/StaffAvgStateBar.html",
        "title": "Staff Avg State Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateAvailabilityTable/StaffAvgStateAvailabilityTable.html",
        "title": "Staff Avg State (Availability) Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart. The template calculates utilization based on availability status. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateAvailabilityPie/StaffAvgStateAvailabilityPie.html",
        "title": "Staff Avg State (Availability) Table Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateAvailabilityBar/StaffAvgStateAvailabilityBar.html",
        "title": "Staff Avg State (Availability) Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateCombinedTable/StaffAvgStateCombinedTable.html",
        "title": "Staff Avg State (Combined) Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart. The template calculates utilization based on time spent in combinations of state and availability status. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateCombinedPie/StaffAvgStateCombinedPie.html",
        "title": "Staff Avg State (Combined) Table Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffAvgStateCombinedBar/StaffAvgStateCombinedBar.html",
        "title": "Staff Avg State (Combined) Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/StaffStateTemplates/StaffUtilizationCombinedBox/StaffUtilizationCombinedBox.html",
        "title": "Staff Avg State (Combined) Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart. The template calculates utilization based on time spent in combinations of state and availability status. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationTemplates/CensusBar/CensusBar.html",
        "title": "Location Census Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that are currently in all Location objects. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationTemplates/CensusVsTime/CensusVsTime.html",
        "title": "Location Census vs Time People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that are in Location objects over time. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationTemplates/AvgStaytimeBar/AvgStaytimeBar.html",
        "title": "Average Location Staytime Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time that flowitems (created with the Create Person activity) spend in Location objects. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationTemplates/AvgWaitForLocationBar/AvgWaitForLocationBar.html",
        "title": "Average Wait for Location Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time a flowitem (created with the Create Person activity) waits to acquire a Location Resource . For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationTemplates/LocationThroughputTable/LocationThroughputTable.html",
        "title": "Location Throughput Table People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that have exited any of the Location objects. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit subset or partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationTemplates/LocationThroughputBar/LocationThroughputBar.html",
        "title": "Location Throughput Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that have exited any of the Location objects. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit subset or partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateTable/LocationAvgStateTable.html",
        "title": "Location Avg State Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStatePie/LocationAvgStatePie.html",
        "title": "Location Avg State Pie Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateBar/LocationAvgStateBar.html",
        "title": "Location Avg State Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateAvailabilityTable/LocationAvgStateAvailabilityTable.html",
        "title": "Location Avg State (Availability) Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart. The template calculates utilization based on availability status. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateAvailabilityPie/LocationAvgStateAvailabilityPie.html",
        "title": "Location Avg State (Availability) Pie Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateAvailabilityBar/LocationAvgStateAvailabilityBar.html",
        "title": "Location Avg State (Availability) Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateCombinedTable/LocationAvgStateCombinedTable.html",
        "title": "Location Avg State (Combined) Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart. The template calculates utilization based on time spent in combinations of state and availability status. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateCombinedPie/LocationAvgStateCombinedPie.html",
        "title": "Location Avg State (Combined) Pie Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationAvgStateCombinedBar/LocationAvgStateCombinedBar.html",
        "title": "Location Avg State (Combined) Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LocationStateTemplates/LocationUtilizationCombinedBox/LocationUtilizationCombinedBox.html",
        "title": "Location Avg State (Combined) Table Template",
        "content": "Overview and Key Concepts This chart template creates a table chart. The template calculates utilization based on time spent in combinations of state and availability status. Properties Panels This template uses the following properties panels: Data Options Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LineTemplates/AvgStaytimeBar/AvgStaytimeBar.html",
        "title": "Average Line Staytime Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays the average time that flowitems (created with the Create Person activity) spend in Waiting Line objects. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LineTemplates/CensusBar/CensusBar.html",
        "title": "Line Census Bar People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that are currently in all Waiting Line objects. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template allows a maximum of two Partitions. If you use any Subsets, then the template will only allow one Partition. If you have two Partitions, the template will not allow you to add any Subsets. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleTemplates/LineTemplates/CensusVsTime/CensusVsTime.html",
        "title": "Line Census vs Time People Template",
        "content": "Overview and Key Concepts This template calculates and displays total number of flowitems (created with the Create Person activity) that are in Waiting Line objects over time. For more information about People Templates, see the People Templates topic. Subset and Partition Limits This template does not limit the number of Subsets or Partitions. Properties Panels This template uses the following properties panels: Data Subsets Partitions Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/PeopleSettings/PeopleSettings.html",
        "title": "People Settings",
        "content": "Overview and Key Concepts The People Settings object allows you to specify the labels and states that are statistically meaningful in your model. Labels and Label Sets The labels you specify will be added to each object created with any Create Person activity. In addition, the label values for each object will be recorded in the Person Labels table. Specifying labels is optional; there are no required labels. The People Settings object also allows you to specify multiple Label Sets. A Label Set is a set of initial values for the labels you have specified. The Create Person activity can specify which label set you wish to use, which will determine the initial values of the labels on the created object. States The states enumerated in the People Settings object fall into two categories: Default states, and Additional states. FlexSim will set objects to the default states automatically. However, the Process activity, as well as the People Down Behaviors, can set the objects into any state. This allows you to have custom states specific to your process. For example, a restaurant model might have use a state called \"OrderingFood\", while a healthcare model might have a state called \"GettingXRay\". The various state tables (for example, the Person States table) will include one column for each state listed in the People Settings object. Enumerate any state you use If a Process activity sets an object in a state that is not listed in the People Settings object, then no statistics for that state will be recorded. Therefore, it is important to enumerate any state that you want to use. Person Labels The Person Labels tab has the following properties: Labels - The Labels property allows you to add, remove, or reorder columns of the table. The name of each column specifies the name of the label, and each row of the table specifies an initial value of the label. Label Sets - The Label Sets property allows you to add, remove, and reorder rows in the labels. Row defines a label set. The name of the row specifies the name of the label set, and each column specifies the initial value of the label for that set. Label Sets - The Label Sets property allows you to add, remove, and reorder rows in the labels. Row defines a label set. The name of the row specifies the name of the label set, and each column specifies the initial value of the label for that set. Label Type - The Label Type property shows the type of label in a given column. You can use this edit field to set the type of a label after you have added it. Code - The code button toggles whether the set of selected cells are FlexScript. If a cell is FlexScript, then that code is evaluated when the person is created. Note that the type of the label remains unchanged. If a number label is FlexScript, then the code should return a number. If a text label is FlexScript, then the code should return text. If a pointer label is FlexScript, then the code should return a pointer. Person States The Person States tab has the following properties: Default States - The Default States interface allows you to set the Utilization value for the default states, as well as choose a display name for them. The Utilization setting here is used by the PersonStates table to calculate the utilization of each person. Additional States - The Additional States interface allows you to add new states to the list of states that are statistically tracked. The interface also allows you to choose how those states affect utilization. Staff States The Staff States tab has the following properties: Default States - The Default States interface allows you to set the Utilization value for the default states, as well as choose a display name for them. The Utilization setting here is used by the StaffStates table to calculate the utilization of each Staff object. Additional States - The Additional States interface allows you to add new states to the list of states that are statistically tracked. The interface also allows you to choose how those states affect utilization. Equipment States The Equipment States tab has the following properties: Default States - The Default States interface allows you to set the Utilization value for the default states, as well as choose a display name for them. The Utilization setting here is used by the EquipmentStates table to calculate the utilization of each Equipment object. Additional States - The Additional States interface allows you to add new states to the list of states that are statistically tracked. The interface also allows you to choose how those states affect utilization. Transport States The Transport States tab has the following properties: Default States - The Default States interface allows you to set the Utilization value for the default states, as well as choose a display name for them. The Utilization setting here is used by the TransportStates table to calculate the utilization of each Transport object. Additional States - The Additional States interface allows you to add new states to the list of states that are statistically tracked. The interface also allows you to choose how those states affect utilization. Location States The Location States tab has the following properties: Default States - The Default States interface allows you to set the Utilization value for the default states, as well as choose a display name for them. The Utilization setting here is used by the LocationStates table to calculate the utilization of each Location object. Additional States - The Additional States interface allows you to add new states to the list of states that are statistically tracked. The interface also allows you to choose how those states affect utilization."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PeopleObjects/Tools/PeopleDownBehaviors/PeopleDownBehaviors.html",
        "title": "People Settings",
        "content": "Overview and Key Concepts People Down Behavior object are pre-configured Down Behavior objects that help provide Shift Schedule functionality. When a Time Table event occurs that uses this Down Behavior a token is created in the Shift Schedule process flow with label values based off the parameters set in the Parameters page. The token in the Shift Schedule flow will attempt to acquire the object going down in order to make them unavailable for acquiring by other things in the model. The parameters on this tab affect various aspects of how the resource is acquired and just how unavailable they are during the break. Parameters The Parameters tab has the following properties: Condition - The Condition property allows you to control if the break always happens or only happens under certain conditions. Priority - The Priority value is used when acquiring the resource to put them on break. Max Delay - The Max Delay defines the longest amount of time the break will attempt to acquire the resource for before cancelling the break. Break Location - The Break Location value is where a Staff member will go during a break. It is not used by other resource types. State - The state the resource object will be put into while on break. Variance - The Variance value is used to add some extra delay time before the break officially starts. Unavailable - The resource should be marked Unavailable during the break. This will cause requests for this specific object to be redirected to their group. Full Break - If the break is delayed should the break be its full length or should it end at the normal end time. Preemptable - If checked the break can be interrupted by requests in a higher priority tier. Finish Preempted Breaks - After an interrupted break, if checked the resource will return to taking a break or if unchecked the break will be over. Color - This color will be displayed in the time table for events using this Down Behavior. It will also be used to color the box drawn around the resource object while it is on break."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AGVPanels/AGVTraveler/AGVTraveler.html",
        "title": "AGV Traveler",
        "content": "The AGV Traveler panel defines how a traveler uses the AGV network. The following properties are on the AGV Traveler panel: AGV Type Define which of the user-defined AGV Types this AGV is one of. Initial Path Offset When the model is reset, AGVs go back to the control point that you originally connected them to. Specifying a non-zero value here will define an AGV's reset position as offset, by that distance, from this reset control point. Switch Initial Direction When the model is reset, AGVs go back to the control point that you originally connected them to. By default, they will reset to facing forward along that control point's path. Press this button to switch this initial direction."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AGVPanels/ControlArea/ControlArea.html",
        "title": "Control Area",
        "content": "The Control Area panel defines the position and type of the area. The following properties are on the Control Area panel: Position, Size, Rotation Specify the position, the X and Y size, and the Z rotation. Max Allocations The maximum number of AGVs that can simultaneously claim the Control Area. Deallocation Type The Control Area's assigned Deallocation Type. This defines the timing of when the object will be deallocated. Here you choose from a list of deallocation types that you can define in the AGV Network tool . AGV Member Defines whether or not the control area is recognized as part of the AGV path network. When checked, AGV paths that cross the geometric boundaries of the control area will recognize those crossing points, and AGVs that travel those paths will consequently allocate and deallocate the control area. Usually this box should be checked. Instances where you would uncheck it are if you want the control area to only be part of an A* network, or if you want to allocate the control area manually using AGV.AllocatableObject.allocate() , and want it to be otherwise ignored in the AGV path network geometry. A* Member Defines whether or not the control area is recognized as part of the A* network. When checked, A* grid nodes that are within the geometric boundaries of the control area will be flagged so that A* travelers who traverse those nodes will automatically allocate and deallocate the control area. Note that A* travelers deallocate the control area as soon as their center point leaves the control area. In other words, they do not reference the control area's Deallocation Type . Also, a control area will be allocated based only on the A* grid nodes that it encompasses, so you should make sure the control area properly surrounds the correct set of grid nodes."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AGVPanels/ControlPoint/ControlPoint.html",
        "title": "Control Point",
        "content": "The Control Point panel defines the location, type, and connections of the point. The following properties are on the Control Point panel: Position Specify the X, Y, and Z position. Max Allocations The maximum number of AGVs that can simultaneously claim the Control Point. If you set Max Allocations to 0, the Control Point will have no allocation limit . Deallocation Type The Control Point's assigned Deallocation Type. This defines the timing of when the object will be deallocated. Here you choose from a list of deallocation types that you can define in the AGV Network tool . Allocation Wait Point Indicates whether AGVs can stop at this point when waiting to allocate ahead. The default is checked, meaning AGVs will stop at this point if they cannot allocate ahead. Unchecking the Allocation Wait Point box will result in the following behaviors. The control point will behave more like a control area boundary. AGVs will not stop at the control point when waiting to allocate ahead. Instead, they will look further ahead to the next 'waitable' control point, and allocate to that point before proceeding from their previous 'waitable' point. This is done in an all-or-nothing manner. Until the AGV can allocate all the way to the next waitable point, it will not allocate any non-waitable points on its path. Once it can allocate all points to the next waitable point, it will then allocate all those points and proceed forward. The control point's OnPreArrival trigger will not fire. Since OnPreArrival is primarily associated with allocating ahead, and the AGV will not be making any allocations when pre-arriving to the control point, this trigger is no longer applicable. The control point will be displayed differently. Instead of showing a diamond with a 'plus' sign inside, it will only show the plus sign, without the diamond outline. This is to help you better distinguish these logic points from the stopping points on the network. By default, other control points will not consider this control point as a 'next control point' when choosing deallocation timing using the 'Deallocate at Next Control Point' deallocation type. This, however, can be configured in the Deallocation Types tab of the AGV network's properties. The primary advantage of making control points 'non-waitable' is that they can essentially become points where you can execute arbitrary logic when AGVs traverse over them, without adding more points where the AGVs will stop and wait to allocate ahead. You can use the OnAllocate and OnDeallocate events for these purposes, either by writing code in these triggers, or by listening for them in process flow. The OnAllocate can be used for logic that should happen when the AGV is looking ahead to where it is going, and the OnDeallocate can be used for logic when the AGV actually traverses over the point. You can use this in conjunction with the control point's Deallocation Type to define exactly at which point your logic should fire relative to where the AGV is on the path. You can also use non-waitable points as dynamic barriers for routing purposes by setting their routingConstraint property. Connections Here you can view, add, remove, and re-order Control Point Connections."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AGVPanels/CurvedPath/CurvedPath.html",
        "title": "Curved Path",
        "content": "The Curved Path panel defines the layout and logic of the path. The following properties are on the Curved Path panel: Start and End Position Specify the X, Y, and Z position of the start and end points of the path. Radius Define the radius of the path. The radius of the path relative to the midpoint of the hypothetical circle around which the path is drawn. Changing the radius will affect the length of the path because it makes this hypothetical circle larger. Start Angle Rotate the start point of the path to the specified angle. The angle of the start end of the path relative to the simulation model grid. For example, if the start angle is set to 90, the edge of the path's start direction will be perpendicular to the x-axis of the model. Sweep Angle Define the length of the curved path as an angle. The angle of the end of the path relative to the start angle. For example, if the start angle is set to 45 and the sweep angle is set to 90, the edge of the path's end direction will be 135 degrees offset from the x-axis of the model. Two Way Allow travelers to move along the path in both directions. Switch Direction Flip the direction of travel. Path Class Assign a path class to this path. Accumulation Assign an Accumulation Type to this path. AGV Orientation This defines how the AGV must face while on the path, irrespective of the AGV's travel direction. The default is any, meaning the AGV may face any direction while on this path."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AGVPanels/StraightPath/StraightPath.html",
        "title": "Straight Path",
        "content": "The Straight Path panel defines the layout and logic of the path. The following properties are on the Straight Path panel: Color Specify the path's color. Start, End, and Location Specify the X, Y, and Z position of the path's start and end points, or its origin point. You can also flip the direction of the path by pressing the swap button on the right. Two Way Allow travelers to move along the path in both directions. Path Class Assign a path class to this path. Accumulation Assign an Accumulation Type to this path. AGV Orientation This defines how the AGV must face while on the path, irrespective of the AGV's travel direction. The default is any, meaning the AGV may face any direction while on this path. Conditional Rule This defines a condition that must be true for an AGV to travel on the path. See Conditional Rules for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AStarPanels/AStarTraveler/AStarTraveler.html",
        "title": "A* Traveler",
        "content": "The A* Traveler panel defines how a traveler uses the A* network. The following properties are on the A* Traveler panel: Use Mandatory Paths When checked, the traveler will always and only travel on Mandatory Paths ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AStarPanels/Barrier/Barrier.html",
        "title": "Barrier",
        "content": "The Barrier panel defines the position of the barrier and lets you set a condition. The following properties are on the Barrier panel: Position and Size (Barriers) Specify the size and position of the barrier. Conditional Rule Define the condition that is required for the barrier to be applied. When a barrier is conditional, its condition is reevaluated at the beginning of every travel task. If the condition returns false (0), then the barrier will not be applied in the route calculation algorithm, and the traveler will travel as if the barrier did not exist. Conditional barriers let you define certain barriers as only applicable for certain travelers, or based on certain model conditions. You can add conditional rules through the A* Properties window."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/AStarPanels/DividerPath/DividerPath.html",
        "title": "Divider / Path",
        "content": "The Divider / Path panel defines layout and logic of the divider, path, or bridge. The following properties are on the Divider / Path panel: Conditional Rule Define the condition that is required for the divider to be applied. When a divider is conditional, its condition is reevaluated at the beginning of every travel task. If the condition returns false (0), then the divider will not be applied in the route calculation algorithm, and the traveler will travel as if the divider did not exist. Conditional rules let you define certain dividers as only applicable for certain travelers, or based on certain model conditions. You can add conditional rules through the A* Properties window. Two Way Check this box to make the divider/path apply in two directions instead of just one. Points (Dividers/One-Way Dividers/Preferred Paths) Define x,y positions of each point. Icon Description Add a point to the end. Remove the selected point. Reorder the selected point up or down in the list. Path Weight Preferred Paths only. This is the path weight added to the nodes associated with the path. Valid values are numbers between 0 and 1. However, setting the value to 0 will cause the path to use the Default Preferred Path Weight . Virtual Distance Bridges only. When checked, this is the distance that will use for traversing the Bridge instead of the actual distance."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/Conveyor/Conveyor.html",
        "title": "Conveyor",
        "content": "The Conveyor panel defines spatial properties of the conveyor . The following properties are on the Straight Conveyor panel: Start Defines the X , Y , and Z position of the start of the conveyor. End Defines the X , Y , and Z position of the end of the conveyor. Reversing Direction Press the button to switch the start and end locations, reversing the conveyor's direction. Width Defines the width of the conveyor. Horizontal Length Defines the total length of the conveyor. Changing this value will adjust the End property. Radius Defines the radius of a curved conveyor. Changing this value will adjust the Radius property. Start Angle Defines the start angle of a curved conveyor. Changing this value will adjust the StartAngle property. Sweep Angle Defines the sweep angle of a curved conveyor. Changing this value will adjust the SweepAngle property. Virtual Length A virtual length lets you specify a length to simulate, rather than using the conveyor's physical length. To use, check the box and enter a length. Visualization Defines the conveyor's Visualization . Roller Skew Angle Defines which way the conveyor's rollers are offset from straight. If this value is positive, items will align to the left side of the conveyor. If it is negative, items will align to the right side of the conveyor. Align To Side This property is only visible for mass flow conveyors. It defines the side of the conveyor that mass flow units will be drawn on."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/ConveyorBehavior/ConveyorBehavior.html",
        "title": "Conveyor Behavior",
        "content": "The Conveyor Behavior panel defines the behavior properties for a conveyor. The following properties are on this panel: Accumulating If this box is checked, items will accumulate on the conveyor, meaning they will collect together along the conveyor, similar to a roller conveyor. If this check box is cleared, items will move in lock-step with each other, like on a belt conveyor. By default, this box is checked. Speed The default speed of the conveyor. Acceleration The conveyor's rate of speed change as it moves when it first starts or when it changes from a slower speed to a faster speed. Deceleration The conveyor's speed as it slows down to a stop or when it changes from a faster speed to a slower speed. Acceleration and Deceleration Acceleration and deceleration are only applied when the conveyor's speed changes. They are not used when simulating per-item motion such as when an item is blocked by a downstream conveyor or by accumulation. Stopping Space The minimum amount of space between items while they travel along the conveyor of while they are accumulating. If the space between items is less than the specified space, the item will stop moving. Moving Space If items are stopped along a conveyor, this is the amount of space needed between items before they can resume movement. Restart Delay If you define a non-zero restart delay time, after items are stopped on a conveyor, this additional time will be applied before starting the items again after their move space has been cleared. Entry Space The amount of space that must be clear before an item will enter a conveyor. Spacing Rule: Stopping Space ≤ Moving Space A conveyor's moving space must be greater than or equal to its stopping space. If the moving space is equal to the stopping space, items will immediately follow behind items they accumulate against. If the moving space is greater than stopping space (or if the restart delay is greater than zero), items will stop in place when accumulating, and then resume when the moving space is cleared (and the restart delay timer has expired). This results in a caterpillar-like accumulation effect. Spacing Rule: Stopping Space ≤ Entry Space A conveyor's entry space must be greater than or equal to its stopping space. Each spacing setting has two different fields, as illustrated in the image below: The first editable number field, the Length Factor field, allows you to a percentage of space multiplied by the item's length. 1.00 is equivalent to 100%, or in other words the full length of the item. The value 0.5 would be equivalent to 50%, half the item's length. And 2.00 would be equivalent to 200%, twice the item's length. The second editable number field, the Additional Spacing field, allows you to add an additional amount of space based on the units of measurements you specify. Using these two fields, you can create a dynamic set of spacing rules that is either relative or absolute to the item's length. The following images show examples and explanations of different spacing settings: The default of 1.00 x Item Length + 0.00m defines spacing based purely on item length. Defining a spacing value of 1.00 x Item Length + 0.06m adds a gap of 6 centimeters from the trailing edge of one item to the leading edge of the item behind it. A spacing of 0.00 x Item Length + 0.5m defines a 0.5 meter spacing from the leading edge of one item, to the leading edge of the next item, independent of item length. Power and Free Settings The next group of settings is designed for use in simulating Power and Free conveyor systems. In these systems, dogs travel at fixed intervals along a looping chain. These dogs pick up carriers in the system as they pass them. In simulation terms, it is similar to having a moving space greater than stopping space (there is a caterpillar-like accumulation effect), except that the point at which an item can move on the conveyor is defined by the location of the next passing dog, instead of by the space between it and the item ahead of it. The available settings are: Fixed Interval Movement (Power and Free) - If checked, items can only move on the conveyor at fixed intervals, at the points where simulated dogs pass the item's position. Dog Interval - The spacing between each dog on the Power and Free chain. If you want to simulate a repeating irregular pattern of gaps between dogs, you can enter in a series of custom numbers separated by commas. Item Edge - Defines the associated item edge to be picked up by a dog. Catch Condition - Check this box to enable a custom condition defining whether a given dog will \"catch\" a given item. One example reason for using this feature might be to simulate randomly missed dogs. Another example would be in order to simulate a cross belt sorter with defined \"cells\". Larger items take up a full cell, while smaller items can fit two on a cell. Here you would define two dogs per cell, and larger items can only catch the even numbered dogs. Initial Dog Positions When Power and Free settings are enabled, by default the conveyor will assign the dog positions based on the first item that enters the conveyor. If you need more control over defining dog positions across multiple conveyors, you can use a motor object. Carriers Power and Free conveyors do not simulate carriers automatically. If you need to simulate carriers as limited resources in the simulation, you can simulate them explicitly by having items that are picked up by the dogs represent the carriers, and then use decision points to move other items into and out of those carrier items, representing the actual loads that are being moved by the carriers. Slug Building Settings The last group of settings allow conveyors to build slugs. Conveyors can build and release slugs as part of a saw-tooth merge.The Slug Building settings are as follows: Slug Builder - Enables slug building when checked. Ready Criteria - Defines when a slug lane can be considered ready for release. One or more of three options should be chosen. If any of the checked items is fulfilled, the slug will be marked as ready for release. The slug may continue to build while waiting for release. If the conveyor is not connected to a Merge Controller, it will release slugs as soon as they are ready for release. Fill Percent - Select this box and enter a value to define the percentage of the full conveyor length that is required for the slug to be ready for release. Item Count - Select this box and enter a value to define the number of items in a slug required to be ready for release. Max Count - This only applies if Item Count is also selected. Select this box and enter a value to define the maximum number of items in a slug. If this is defined, the conveyor will release no more than this number of items in a single slug. Time Elapsed - Select this box and enter a value to define a maximum elapsed slug-build time. The time starts when the first item is added to the slug. If the slug is still not ready when the timer finishes, the slug will be made ready for release. Release Speed - The speed at which a slug will be released."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/ConveyorTransfer/ConveyorTransfer.html",
        "title": "Conveyor Transfer",
        "content": "The Conveyor Transfer panel defines the position and type of the conveyor transfer. The following properties are on the Conveyor Transfer panel: From/To Displays the conveyors that this transfer connects together. Behavior Displays whether this transfer is being treated like an inline transfer or a side transfer. Distance Along Defines how far along the decision point's conveyor the decision point is positioned. Changing this value will update the Position . Transfer Type Changes the Type of the transfer. Use this menu to assign this transfer to a global type. If you select Custom , all the transfer's properties will be locally defined."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/DecisionPoint/DecisionPoint.html",
        "title": "Decision Point",
        "content": "The Decision Point panel defines the position and type of the Decision Point. The following properties are on the Decision Point panel: Position Defines the X , Y , and Z position of decision point. Distance Along Defines how far along the decision point's conveyor the decision point is positioned. Changing this value will update the Position . Item Edge The item edge that will trigger decision point events. Color The decision point's color."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/EntryTransfer/EntryTransfer.html",
        "title": "Entry Transfer",
        "content": "The Entry Transfer panel defines the position and type of the entry transfer. The following properties are on the Entry Transfer panel: Position X, Y, Z Changes the position of the entry transfer in the 3D model. Distance Along Defines how far along the decision point's conveyor the decision point is positioned. Changing this value will update the Position . Entry Orientation Defines how items should be oriented when they enter the conveyor. Max Transports In Defines the maximum number of items that can be \"in transit\" to the entry transfer at a time. In other words, it is the max number of task executer requests that can be simultaneously made to transport items into the entry transfer. Item Insertion Mode Determines how items entering the conveyor through the entry transfer will be inserted onto the conveyor. Options are: Simple - Items must wait until the entry location is clear. Items will be visually placed at the side of the conveyor until the space is available. Block Upstream Items - If the entry location is blocked when the item attempts to enter, upstream items will be stopped until the space is clear and the item can enter on. Clear Available Space - If the entry location is blocked when the item attempts to enter, upstream items will be pushed backward until the required space is available. The time to perform the push-back is based on the items being pushed back at twice the conveyor speed. Note that the push-back time is only important if transports are held when space is blocked. In this case, the transports are held for the push-back time, and then they finish the unload. Note also that if this option is chosen, there should be enough \"clear\" space on the conveyor to push items back. Behavior is undefined if items must be pushed back off the conveyor, or if they are pushed past conveyor transfers. If they are pushed back over decision points or photo eyes, the triggers for those objects will NOT be fired again. Hold Transports if Space is Blocked If checked, task executers dropping the item off to the entry transfer must wait until the entry point is available before finishing unloading the item onto the conveyor."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/ExitTransfer/ExitTransfer.html",
        "title": "Exit Transfer",
        "content": "The Exit Transfer panel defines the position and type of the exit transfer. The following properties are on the Exit Transfer panel: Position X, Y, Z Changes the position of the exit transfer in the 3D model. Distance Along Defines how far along the decision point's conveyor the decision point is positioned. Changing this value will update the Position . Stop at End If checked, the item will be stopped if it reaches the end of the exit transfer's range before exiting. Then it will wait until it exits. If this is not checked, the item will be \"unreleased\" at the end of the exit transfer (it will no longer exit through the exit transfer) and move on. Continuous Pick Prediction If checked, Task Executers who are picking up an item from the exit transfer will re-evaluate the estimated pick up point for the item at defined intervals. Adjustment Interval If Continuous Pickup Point Prediction is checked, this defines the time interval between pickup point prediction updates. Ignore Picks if Predicting Late Pickup This is only valid if Use Transport is checked, Stop Item at Transfer End is not checked, and the exit transfer has an expanded range along the conveyor. If checked, Task Executers who predict the pickup point to be after the item has passed the end of the exit transfer will abort their transport task sequence."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/MassFlowConveyorBehavior/MassFlowConveyorBehavior.html",
        "title": "Mass Flow Conveyor Behavior",
        "content": "The Mass Flow Conveyor Behavior panel defines the behavior properties for a mass flow conveyor. The following properties are on this panel: Speed Defines the speed of the conveyor. Generative Rate This is used if you want the conveyor to be a source that generates mass flow units . You define a rate, in units per model time unit, and the flow unit that is to be generated. For example, if you are simulating a bottling line, and your model is defined in minutes, then a generative rate of 100 means the conveyor will generate 100 bottles per minute. Upstream Output Order Defines the ordering by which this conveyor should be chosen by an upstream conveyor in distributing its output flow. This is only used when the conveyor is one of multiple downstream conveyors that is connected to a single upstream conveyor, in other words, when the conveyor upstream of this conveyor must choose between multiple downstream conveyors in sending flow units. See Distributing Flow Downstream for more information. You can also use a special value of 0 to cause upstream conveyors not to consider this conveyor at all in resolving flow distributions. This has the same effect as closing input on fixed resources, but for a mass flow conveyor. You can either enter 0 in the field, or do it programmatically: conveyor.setProperty(\"UpstreamOutputOrder\", 0); Excess Defines how the conveyor should handle excess flow that cannot be sent downstream. If Accumulate is chosen, then the excess will accumulate on the conveyor. If Track as Loss is chosen, then any excess flow will be tracked as loss, as if the product were to fall off the end of the conveyor. See Distributing Flow Downstream for more information. Width Rule Defines a rule for determining the simulated width of the conveyor. This is used in combination with the Width Value . For detailed information on how the simulated width affects conveyor behavior, see The Math Behind Mass Flow Conveyors . The width rule lets you customize how the $W$ value in those math equations is determined. Here we use the same notation, defining $W$ as the simulated width of the conveyor, and introducting $V$ as the user-defined width value . Conveyor Width - Uses the standard Width property. $W = \\text{conveyor width}$ Virtual Width - The simulated width is the Width Value . $W = V$ Number of Lanes - The simulated width is calculated so as to simulate a user-defined number of unit lanes traveling down the conveyor. Enter the desired number of lanes as the Width Value . $W = V \\cdot \\Large{\\frac{U_y}{R}}$ For intuition on this equation, note that the value $\\frac{U_y}{R}$ is essentially the width associated with a single lane of units flowing down the conveyor: $U_y$ is the width of a single unit, and $R$ is the round-bottle density factor. $V$ therefore serves to scale the conveyor width to be the number of lanes you want to simulate. It's important to remember that, for this and other rules, fractional values are perfectly valid. For example, if you were to enter 0.5 as the width value here, it would simulate 'one half' of a single lane of flow. This is essentially the same as a single lane of units with an 'air gap' of $U_x$ between each unit/carton/bottle/etc. This is similar to the Single Lane Flow Unit Distance rule described below, except that, in that rule, the inter-unit distance is fixed, while in this rule, the inter-unit distance scales with the unit's length. Bigger bottles/cartons/etc. would have larger distances between each other, and so forth. See Why Does the Math Matter? for more information. Single Lane Flow Unit Distance - The simulated width is calculated so as to simulate a single lane of units, where you can define the distance from the center of one unit/bottle/carton/etc. to the center of the next unit. Enter this distance as the Width Value . $W = \\Large{\\frac{U_x}{V} \\cdot \\frac{U_y}{R}}$ Again for intuition here, note that, if you were to enter the width value $V$ as the same as the unit length $U_x$, i.e. an inter-unit distance of $U_x$, the left term would cancel out and you would be left with $\\frac{U_y}{R}$, which again is the width associated with a single lane of back-to-back bottles. Increasing $V$ decreases $W$, meaning it extends the distance between bottles in the single lane. Single Lane Gap - The simulated width is calculated so as to simulate a single lane of units with a user-defined 'air gap' between units, i.e. the distance from the back of one unit to the front of the next. Enter this 'air gap' distance as the Width Value . $W = \\Large{\\frac{U_x}{U_x + V} \\cdot \\frac{U_y}{R}}$ Width Value Defines a value associated with the Width Rule ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/MassFlowEntryTransfer/MassFlowEntryTransfer.html",
        "title": "Mass Flow Entry Transfer",
        "content": "The Mass Flow Entry Transfer panel defines properties for a mass flow entry transfer. The following properties are on the Mass Flow Entry Transfer panel: Flow Unit Defines the mass flow unit that will be created from an entering item. Units per Item Defines the quantity of mass flow units that will be generated from a single entering flow item."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/MassFlowExitTransfer/MassFlowExitTransfer.html",
        "title": "Mass Flow Exit Transfer",
        "content": "The Mass Flow Exit Transfer panel defines properties for a mass flow exit transfer. The following properties are on the Mass Flow Exit Transfer panel: Package Item Defines the flow item that represents one \"package\" of mass flow units. Units per Package Defines the quantity of mass flow units that will generate a single package flow item."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/MassFlowTransfer/MassFlowTransfer.html",
        "title": "Mass Flow Transfer",
        "content": "The Mass Flow Transfer panel defines properties for a mass flow transfer. Properties Only Apply to Downstream Transfers This panel will only be visible on downstream mass flow transfers, namely the transfers with input ports. Upstream transfers that have output ports do not use these properties. The following properties are on the Mass Flow Transfer panel.: Convert To Unit This allows you to optionally convert from a given upstream flow unit to a different downstream unit. For example, you may have a cartonizer in your model that receives bottles and packs them into cartons. Traditionally you might 'discretize' at this point, i.e. use a Mass Flow Exit Transfer to translate flow into discrete flow items. However, depending on the required throughput rate of such a machine, simulating each carton as a discrete item could significantly slow your simulation run speed. So instead of discretizing at this point, you could let the flow remain 'fluid', continuing to use mass flow conveyors, but convert to a 'carton' flow unit. Conversion Scale Defines the 'scale' factor for converting from one flow unit to a different unit. This property is only used if you define the Convert To Unit property. It is the target number of output (downstream) units divided by the number of input (upstream) units. In the example cited above, if you pack 6 bottles into a single carton, then the Conversion Scale should be 1 / 6."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/MergeController/MergeController.html",
        "title": "Merge Controller",
        "content": "The Merge Controller panel defines how merges are handled. The following properties are on the Merge Controller panel: Release Strategy Use this box to determine the logic the merge controller will use to determine when it will release slugs. Edit Lane Clear Table Opens the Lane Clear Table window. The Lane Clear Table Window The The Lane Clear Table window has the following properties: Auto-Fill The Lane Clear Table will attempt to calculate the correct release strategy for the lanes based on the position of the conveyors and decision points it is connected to. Press this button to refresh the Lane Clear Table if needed. Lane Clear Table The X's in the Lane Clear table represent a specific decision point that must be cleared by a slug before this specific lane can be released. You can add and remove X's manually if you would like. Be aware that the Lane Clear Table treats any value that isn't null (empty) the same as an X."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/Motor/Motor.html",
        "title": "Motor",
        "content": "The Motor panel defines the conveyors the motor powers. The following properties are on the Motor panel: Sync Power and Free Dog Positions This checkbox is for use with power and free conveyor systems. If this box is checked, the motor will ensure that the initial dog positions will be aligned on all of the conveyors connected to it. For example, if the motor's first connected conveyor is 10.2 meters long, and the dog gap is 1.0 meters, then it will set the dog position to start at 0.0 on the first conveyor and at 0.8 on the second connected conveyor (the remaining distance to the next dog after the end of the first conveyor). If this box is unchecked, or if Power and Free conveyors do not have an associated motor, the dog positions will be defined automatically when the first item enters the conveyor. Motor Connection Order The order of connected conveyors is important when using Sync Power and Free Dog Positions. As mentioned in the above example, the first dog position on the second connected conveyor will be set to to 0.8. This is the second conveyor connected to the motor (as listed in the Conveyors Listbox of the Motor properties) and not necessarily the conveyor connected to the end of the first conveyor. Make sure that the conveyors are connected to the motor in the same order that the conveyors in the loop are connected or the dog positioning will be incorrect. You can adjust the order of connected conveyors by using the up and down arrows above the list of connected conveyors. Adjust Dog Gap for Continuous Loop When this box is checked, the motor will assume that the conveyors connected to it represent a looping Power and Free chain. The motor will calculate the total length of the loop based on the combined lengths of the connected Power and Free conveyors and will adjust the dog gap of each conveyor so that the total length of the loop divides evenly by the dog gap. For example, if the total length of a motor's conveyors adds up to 100.2 meters, and the dog gap is 1.0 meters, the motor will adjust the dog gap of each conveyor to be 1.002 meters (100.2 / 100), so that the full loop makes up exactly 100 dogs. The algorithm rounds to the nearest number of dogs. This checkbox is only available if the Sync Power and Free Dog Positions checkbox is also checked. Conveyors You can use this to add, remove, or reorder the conveyors that are connected to the motor."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/PhotoEye/PhotoEye.html",
        "title": "Photo Eye",
        "content": "The Photo Eye panel defines the position and type of the Photo Eye. The following properties are on the Photo Eye panel: Position Defines the X , Y , and Z position of photo eye. Height Defines the height of the photo eye. Distance Along Defines how far along the photo eye's conveyor the photo eye is positioned. Changing this value will update the Position . Block Time The amount of time a photo eye must be covered before it will change from a blocking state to a blocked state. Clear Time The amount of time a photo eye must be clear from items before changing from a clearing state to a cleared state. Standard Conveyor Properties The following properties are only applicable for photo eyes attached to standard conveyors (not mass flow conveyors ). Offset Angle The offset angle by which the photo eye beam crosses the conveyor plane. If 0, the beam crosses straight across the conveyor. Require Gap to Clear If checked (default), there must be a gap between items in order to clear the photo eye. You might uncheck this box if you want the On Clear trigger to fire on every item, no matter the spacing between items. Mass Flow Conveyor Properties The following properties are only applicable for photo eyes attached to mass flow conveyors (not standard conveyors ). Mass Flow Mode Defines the method for calculating whether the photo eye is \"covered\" on a mass flow conveyor. The following options are available. Density Ratio Threshold - The photo eye will block/clear when the density of flow units in front of the photo eye crosses a defined threshold. This threshold is expressed as a ratio of the maximum possible density for the flow unit. Speed Threshold - The photo eye will block/clear when the speed of flow units in front of the photo eye crosses a defined speed threshold. Density Threshold Defines the ratio of the maximum flow unit density that will trigger the blocking/ clearing of the photo. The value should be between 0 and 1. The value 0 means nothing is in front of the photo eye, and 1 means the conveyor is at full capacity in front of the photo eye. Speed Threshold Defines the speed threshold of flow units in front of the photo eye that will trigger blocking/clearing. Color Defines the photo eye's color. This is the color displayed when the photo eye is in the \"cleared\" state. The colors for the \"blocking\", \"blocked\", and \"clearing\" states are defined on the properties of the Conveyor System ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ConveyorPanels/Station/Station.html",
        "title": "Station",
        "content": "The Station panel defines properties associated with processing an item on the station. The following properties are on the Station panel: Process Condition Returns a value, 1 or 0, defining the condition by which a given item passing over the station should be processed. Return 1 to process the item. Return 0 to let the item pass without processing it. Process Time Defines the processing time for a given item at the station. Use Operator Defines settings for calling an operator to the station to process the item. Check the box and then define the reference to the operator or dispatcher to give the task to, as well as the # of Operators to request, and the priority and preemption values of the request task sequence."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Advanced/Advanced.html",
        "title": "Advanced",
        "content": "The Advanced panel contains advanced options for Chart Templates. The following properties are on the Advanced panel: View Table Opens a view of the data being drawn by the chart. This is usually the Statistics Collector table. However, if the template uses a Calculated Table, this button will open the Calculated Table's table view. Export Data... Exports the data being drawn by the chart to CSV. This is usually the data gathered by the Statistics Collector. However, if the template uses a Calculated Table, this button will open the Calculated Table's table view. Install Installs the chart template. All internal tools (Statistics Collectors, Calculated Tables, Process Flows, and/ or Groups) are moved to the toolbox, and the chart template itself is destroyed. Object Format Depth Edits how many parts of an object's path are displayed for object formatting. Enter 0 to show the full path. Axis/Color Usage Specifies how to visualize subsets and partitions. Only Chart Templates that rely on the Query Builder have this property. If this property is available, there are four possible options: Use colors only - All category values, whether the category is a Subset or Partition, will be represented using color. Use axis for subsets, use colors for partitions - Subsets will appear as separate axis values. Partitions will be represented with color. Use color for subsets, use colors for partitions - Subsets will appear as separate colors. Partitions will appear on separate axes. Use axis and color for subsets, use color for partitions - Subsets will be represented both by color and on separate axes. Partitions will also appear as color. Ignore subset This box is available only if there is a single subset and the Chart Template relies on the Query Builder. In that case, you might not want to show that subset on the chart. Check this box to ignore the subset. If checked, the options of the Axis/Color Usage will update to reflect the absence of subsets."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Colors/Colors.html",
        "title": "Colors",
        "content": "For all charts that use colors, the Colors panel allows you to choose which Color Palette the chart uses. In addition, you can configure the colors and values for that palette. For more information on Color Palettes, see the Color Palette topic. Color Ordering The time plot, histogram, box plot, sankey diagram, and gantt chart use the order of values in the palette to determine the order for items in the legend. Additionally, the time plot, histogram, and box plot use the order of values in the palette to determine the draw order of each color series."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/ComboboxOptions/ComboboxOptions.html",
        "title": "Combo Box Options",
        "content": "The Combo Box Options panel contains options for combo box and list box controls. The following properties are on the Combo Box Options panel: Options The list of name-value pairs that will be displayed in the combo box list. The name is shown in the combo box's list and the value is the value applied to the control's linked node when selected from the list. Values must be numeric. Linking to String Data If a combobox or listbox is linked to a node with string data like a label, selecting an option will set the value of the linked label or node to be the name of the option, rather than its numeric value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Dashboard/Dashboard.html",
        "title": "Dashboard",
        "content": "The Dashboard panel contains options for Dashboard views. The following properties are on the Dashboard panel: Edit Mode When checked dashboard widgets can be selected and edited. When cleared widgets cannot be selected. Export Dashboard Export the dashboard to various data files. Image Allows you to change the image displayed on the tab control and in the toolbox for this dashboard."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/DashboardControl/DashboardControl.html",
        "title": "Dashboard Control",
        "content": "The Dashboard Control panel contains options for dashboard controls. The following properties are on the Dashboard Control panel: Text The text to display on this control. Link Specify the path to a node in the model. If the widget is an Edit or Dynamic Text, the Link can also be to a Global Variable. Hover Hint Text The text that will be displayed when the cursor is hovered over the control. Image Displays an image instead of text for the control. Font Specifies the font name, size, properties and color of the control's text Triggers Some model input objects have triggers that fire, allowing you to execute your own custom code. It has the following properties: OnPress - Fires when a button, checkbox or radio button are pressed. OnApply - Fires when the enter key is pressed in an edit field and when you click off of an edit field (focus is removed). OnDrag - Fires as a tracker is clicked/dragged OnSelect - Fires when an item in the combobox/listbox is selected. ID A Dashboard Control's ID is a string that allows you to easily reference the control through code or picklist options. Use the getdashboardcontrol() command to get a reference to the model input object (the field, button, etc)."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Data/Data.html",
        "title": "Data",
        "content": "Overview The Data panel displays different chart options depending on the type of chart. Bar Chart Data The data panel for bar charts has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Data Format Choose a data format. For more information on data formats, see Bar Chart Overview . If the Data Format property is set to One bar group per row , then the data panel has these additional properties: Bar Title Choose a column from the data source that contains the values you want to use as the title of each row. If you select the first option, for None, then no text will be displayed on the Y axis. Bar Label Choose a column from the data source that contains the values you want to show as additional text on this row. Bar Columns Choose which columns will be included in the bar chart. If the bar chart is showing percentages, the percentage is calculated from the selected columns only. Each included column must not contain text. If the Data Format property is set to One bar per row , then the data panel has these additional properties: Bar Size Choose a column that determines the size of the bar. This column should contain number data. Bar Color Optional. Choose a column that determines the color of the bar. Bar Label Optional. Choose a column that displays data left of the bar. This column should contain the same value for all rows in the same bar group. Split By Optional. For each Split By column specified, the bar chart will make one bar group per unique combination of values in those columns. Box Plot Data The data panel for box plots has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Values Choose a column from the data source that contains the values you wish to analyze using the boxplot. This column should only contain numeric data. Color Split By Optional. These columns are used to categorize each data point by color. Each unique combination of values in the list becomes a new category, and each category is marked with a different color. X Split By Optional. These columns are used to categorize each data point by axis. Each unique combination of values in the list becomes a new category, and each category is shown on a different part of the x axis. Gantt Chart Data The data panel for gantt charts has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Row ID Choose a column from the data source that contains the values you want to use as the Row ID. Each unique value in this column will correspond to a new row. Start Time Choose a column from the data source that contains the start time for the box on the gantt chart. This column must have FlexSim time data in it. End Time Choose a column from the data source that contains the end time for the box on the gantt chart. This column must have FlexSim time data in it. Color Value Choose a column from the data source that contains the value for the box on the gantt chart. Each unique value is assigned a unique color. Label Value Optional. If selected, data from the specified column will be printed on each box, if the box is big enough. Group Value Optional. If selected, data from the specified column will be used to group the boxes. If you click on a box in the chart, all boxes with the same group value will be highlighted. Histogram Data The data panel for histograms has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Values Choose a column from the data source that contains the values you wish to be counted as part of the histogram. This column cannot contain text. Color Split By Optional. These columns are used to categorize each data point by color. Each unique combination of values in the list becomes a new category, and each category is marked with a different color. Y Split By Optional. These columns are used to categorize each data point by axis. Each unique combination of values in the list becomes a new category, and each category is shown on a different y axis. People Templates Data The data panel for people templates has the following properties: Tables The Tables section shows a list of the tables this template depends on. The first table in the list contains the data required for the metric. Any additional tables contain data that may be useful for creating Subsets or Partitions. Next to each table in the list, there is a View Table button. Click this button to open the properties window for that table. This view will allow you to see the data recorded in each table. For more information, see the People Statistics Table Properties topic. Disabling Tables may Disable Templates If you disable one of the People Statistics Tables, any template that uses that table may no longer work. Metric Options The Metric Options section will contain any options about the metric used by the current template. Some common options are: Display Name - Most templates allow you to edit the Display Name of the metric, which appears in various locations on the chart. Time Units - Metrics involving durations will usually allow you to change the time units of the metric. Units - Metrics involving distances will usually allow you to change the distance units of the metric. Edit Person/Location/Staff/etc. states - State templates will usually provide a button to that opens the People Settings properties so you can edit the Person/Location/Staff/etc. states. For more information, see the People Settings topic. Value Mode - Specifies how to display data for each state column. If the value mode is set to percentage, then the value displays the percent time spent in a given state. If the value mode is set to duration, the chart will show the average time spent in that state. Location Display - Specifies the name of the WaitForLocation column Staff Display - Specifies the name of the WaitForStaff column Equipment Display - Specifies the name of the WaitForEquipment column Transport Display - Specifies the name of the WaitForTransport column Milestones The Milestone people templates will display milestone options at the bottom of this panel. For Milestone Intervals see the Intervals section. The Average Milestone Times chart displays the following table: Use this table to determine whether or not to show each milestone, and what order to show the miltestones in. Pie Chart Data The data panel for pie charts has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Data Format Choose a data format. For more information on data formats, see the Pie Chart Overview . If the Data Format property is set to One pie per row , then the data panel has these additional properties: Pie Title Choose a column from the data source that contains the values you want to use as the title of each row. If you select the first option, for None, then no text will be displayed above the pie. Center Data Choose a column from the data source that contains the values you want to show in the center of each pie. If you select the first option, for None, then no text will be displayed in the center of each pie. Segment Columns Choose which columns will be included in the pie chart. The segment size is calculated relative to the selected columns only. Each included column must not contain text. If the Data Format property is set to One segment per row , then the data panel has these additional properties: Segment Size Choose a column that determines the size of the pie segment. This column should contain number data. Segment Color Optional. Choose a column that determines the color of the segment. Center Data Optional. Choose a column that displays data in the center of the pie. If there are multiple rows for the same pie, then the last value for that pie will be used. Split By Optional. For each Split By column specified, the pie chart will make one pie per unique combination of values in those columns. Sankey Diagram Data The data panel for sankey diagrams has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Source Column Choose a column from the data source that contains the source values you wish to use. This column can contain text or number data. If this column contains number data, the display format for that column should either be Raw or Object. Text data is also acceptable. The display format of the selected column should match the display format of the target column. For more information on number formats, see the discussion about Display formats in the Columns section of the Statistics Collector Columns Tab topic. Target Column Choose a column from the data source that contains the target values you wish to use. This column can contain text or number data. If this column contains number data, the display format for that column should either be Raw or Object. The display format of the selected column should match the display format of the source column. Weight Column Choose a column from the data source that contains the weight values you wish to use. This column should contain number data. The value in this column is used to determine the thickness of each link. Scenario Chart Data The data panel for scenario charts has the following properties: Chart Select which chart the Scenario Chart will be based on. You can select a chart from the list, or use the sampler. Scenarios Select which scenarios you would like to compare on the same chart. Additional properties may appear on the data tab, depending on the specified chart. These are described in the following sections: Time Plot If a time plot is specified, the following properties will appear: Interpolation - Select how the Scenario Chart will interpolate between replication values. There are three possible values: None - The Scenario chart does not calculated the mean; it displays all values from all replications, colored by scenario. Stair-Step - In order to calculate the mean value over time, the Scenario chart samples all replication values at specific points in time. If a given replication doesn't have a value recorded at that point in time, the scenario chart will use the newest value that is previous to the sample time. Linear - In order to calculate the mean value over time, the Scenario chart samples all replication values at specific points in time. If a given replication doesn't have a value recorded at that point in time, the scenario chart will linearly interpolate between existing data. Confidence - Specifies the value level of confidence to use if confidence is shown. Show Confidence - Check this box to have the Scenario Chart calculate and display the confidence interval vs. time. Show Range - Check this box to have the Scenario Chart calculate and display the min and max value vs. time. Table Chart If a table chart is specified, the following properties will appear: Aggregate Columns - Select which columns will be aggregated. The values in the other columns will be used to group rows together for aggregation. Show Mean - Check this box to display the mean value of the aggregated columns. Show Min - Check this box to display the minimum value of the aggregated columns. Show Max - Check this box to display the maximum value of the aggregated columns. Bar Chart If a bar chart is specified, the following properties will appear: Aggregate title value - Check this box if the text shown as the title value on the bar chart should be aggregated. Aggregate bar value - Check the box if the text shown as the bar value should be aggregated. Pie Chart If a pie chart is specified, the following properties will appear: Aggregate title value - Check this box if the text shown as the title value on the bar chart should be aggregated. Aggregate center value - Check the box if the text shown as the center value should be aggregated. Table Chart Data The data panel for table charts has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. Include Choose which columns will be included in the table. Time Plot Data The data panel for time plots has the following properties: Data Source Choose a valid data source from the drop down list. All Statistics Collectors and Calculated Tables are shown. You can also choose the last option to create a new Statistics Collector. You can click the accompanying button to open the properties window for the selected data source. X Values Choose a column from the data source that contains the x-axis values you wish to plot. This column cannot contain text. If this column is formatted as Date / Time, then the x axis will become a time axis. Y Values Choose a column from the data source that contains the y-axis values you wish to plot. This column cannot contain text. If this column is formatted as Date / Time, then the y axis will become a time axis. Color Split By Optional. These columns are used to categorize each data point by color. Each unique combination of values in the list becomes a new category, and each category is marked with a different color. Y Split By Optional. These columns are used to categorize each data point by axis. Each unique combination of values in thelist becomes a new category, and each category is shown on a different y axis."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Edit/Edit.html",
        "title": "Edit",
        "content": "The Edit panel contains options for edit controls. The following properties are on the Edit panel: Use Minimum Value Set a minimum value for this edit. Minimum Value The minimum value the control can be set to. Use Maximum Value Set a maximum value for this edit. Maximum Value The maximum value the control can be set to."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Options/Options.html",
        "title": "Options",
        "content": "Overview The Options panel displays different chart options depending on the type of chart. Content Options The options panel for Content charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. Object Display Specifies the name of the Object column. WIP Display Specifies the name of the WIP column. Composite Staytime Options The options panel for composite staytime charts has the following properties: Entrance Objects Specifies the objects that define where the composite object begins. See Adding Objects for more information. Exit Objects Specifies the objects that define where the composite object ends. See Adding Objects for more information. Average Staytime Use the checkbox to specify whether the Average Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Minimum Staytime Use the checkbox to specify whether the Minimum Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Maximum Staytime Use the checkbox to specify whether the Maximum Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Interval Sets the interval for the template. All staytime values are recorded during each interval. The template then computes the average of those staytimes. Time Units Specifies the time units that should be used on the chart. Composite WIP Options The options panel for composite WIP vs time charts has the following properties: Entrance Objects Specifies the objects that define where the composite object begins. See Adding Objects for more information. Exit Objects Specifies the objects that define where the composite object ends. See Adding Objects for more information. WIP Display Specifies the name of the WIP data in the legend. Date Time Display Options The options panel for date time displays has the following properties: No Format Displays the current elapsed model time from Day 1 at the time specified in the Model Settings window with the format: Day 1, 08:00:00 Use Default Format Displays the current model date and time as defined in the Model Settings window. Custom Format Displays the current model date and time using a custom format. Financial Analysis Options The options panel for date time displays has the following properties: Icon Description Adds objects/groups to the current list of objects. Objects and groups may be added multiple times. Removes objects/groups from the current list of objects. Moves the selected object up in the list Moves the selected object down in the list Sample an object in the model. There are five ways to add objects to this chart: Browse by Class - This method of adding objects sorts the objects by class. To select an entire class, click on the type icon. Click on an object to select or deselect it. Browse by Group - This method of adding objects sorts the objects by group. To select an entire group, click on the type icon. Click on an object to select or deselect it. Browse by Object - This method of adding objects lists all objects in the model. Click on an object to select or deselect it. Select by Dragging - This method of adding objects uses the 3D model view. Simply drag the target icon from the current window to an object in the model you would like to add. Display Name Enter text to display on the graph. Leave this field blank to display the object or group name. Fixed This value is added once when the model is reset. This value might represent the initial purchase price of a resource. Amount Per Time This value is continually added as the model runs. A value of 1.0 would mean at time 50.0 the total time value for the object would be 50.0. Use the Convert Units tool to convert units to model time units. Negative Values All object values can be negative or positive numbers. Negative numbers are shown in red and surrounded by parentheses. FlowItems Use the and to add or remove items from the table. Each item has an Label Name, Value(s), Amount Per Entry and Amount Per Time. To apply the values to all label values, leave the Value(s) field blank. To define multiple label values, separate numbers using commas and dashes. For example: 1,2,5,10-15,20 Amount Per Entry value is applied when a FlowItem with the specified label value enters the object. Amount Per Time value is applied continually while the flowitem with the specified label value is in the object. Use the Convert Units tool to convert units to model time units. States Use the and to add or remove items from the table. Each item has a State, Amount Per Entry and Amount Per Time. Amount Per Entry value is applied when the object enters the specified state. If an object is in the state for 0 time, the fixed value will NOT be applied. Amount Per Time value is applied continually while the object is in the specified state. Use the Convert Units tool to convert units to model time units. Item Trace Gantt Options The options panel for item trace gantt charts has the following properties: Entrance Objects Specifies the objects at which to begin tracking items. See Adding Objects for more information. Exit Objects Specifies the objects at which to stop tracking items. See Adding Objects for more information. Label Options The options panel for Label charts has the following properties: Objects Specifies the labels to include on the chart. See Adding Objects for more information. Name Display Specifies the name of the Name column. Value Display Specifies the name of the Value column. Interval Specifies the time interval for the chart. For time plots, the line will show the total output for the previous interval. Otherwise, the value displayed in the chart is Output divided by n , where n is the number of Intervals that have elapsed. Milestone Options The options panel for milestone charts has the following properties: Milestone Collector Specifies the Milestone Collector to use as a data source. Milestone Intervals Specifies one or more Intervals to display on the chart. For more information, see the Intervals section. Type Label, Value Type These properties are common to all By Type templates. For more information, see By Type Templates . Type Display Specifies how the chart should display the Type. Time Units Specifies the units to use for the interval duration value. Model Documentation Options The options panel for model documentation charts has the following properties: Icon Description This button makes the selected text bold. If the whole selection is already bold, this button removes the bold effect. This button italicizes the selected text. If the whole selection is already italicized, this button removes the italics. This button underlines the selected text. If the whole selection is already underlined, this button removes the underline. This button makes the text on the current line left justified. If multiple lines are selected, all lines are left justified. This button makes the text on the current line right justified. If multiple lines are selected, all lines are right justified. This button makes the text on the current line right justified. If multiple lines are selected, all lines are right justified. This button places the current line in an ordered list. If multiple lines are selected, all lines are placed in the list. This button places the current line in an unordered list. If multiple lines are selected, all lines are placed in the list. This button inserts a section of flexscript code, which can be used to dynamically update the model documentation based on the model itself. This button removes the current section of flexscript. This button changes the font of the current selection to be the specified size. This button highlights the selected text in the specified color. This button changes the font color of the selected text to the specified color. This button toggles the view between the visual editor and the html editor. Output Options The options panel for output charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. Object Display Specifies the name of the Object column. Throughput Display Specifies the name of the Throughput column. Interval Specifies the time interval for the chart. For time plots, the line will show the total output for the previous interval. Otherwise, the value displayed in the chart is Output divided by n , where n is the number of Intervals that have elapsed. Output By Type Options The options panel for output by type charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. Type Label, Value Type These properties are common to all By Type templates. For more information, see By Type Templates . Type Display Specifies the name of the Type column. Throughput Display Specifies the name of the Throughput column. Interval Specifies the time interval for the chart. For time plots, the line will show the total output for the previous interval. Otherwise, the value displayed in the chart is Output divided by n , where n is the number of Intervals that have elapsed. People Options The options panel for people charts has the following properties: Comparisons Choose what kind of comparisons you would like to see on this chart. There are four possible options: None - Show data for all Staff objects Compare Groups - Choose which groups you would like to compare in the table. Each selected group will appear in the table in the Subset column. Compare hours of the day - Compare utilization across different hours. Compare days of the week - Compare utilization across different days of the week. Include data for If comparing groups, specifies which data to include on the chart. There are three possible options: Each group as a whole - Shows data aggregated for each selected group. Each member of each group - Shows data for each individual in the selected groups. If an individual is in more than one group, they will be shown twice. Each group and each member - Shows data for a group followed by the individuals in that group for each selected group. Groups to compare If comparing groups, choose which groups you would like to compare in the table. Each selected group will appear in the table in the Subset column. Select all subgroups If comparing groups, click to select all groups except the top group. Clear all subgroups If comparing groups, click to clear the selection of all groups except the top group. Partition By Choose how to partition result data within the table. Partitions will be applied in addition to the group comparisons.There are three available options: None - No partition will be used. By Hour of Day - Data will be partitioned by the hour of day, up to 24 hours. By Day of Week - Data will be partitioned by week day, Sunday through Saturday. Process Flow Activity Statistics Options The options panel for Process Flow Activity Statistics charts has the following properties: Activities Specifies the activities to include on the chart. See Adding Objects for more information. Statistic Specifies the statistic to display - Input, Output, Content, or Staytime. Activity Display Specifies the name of the Activity column. Instance Display Specifies the name of the Instance column. Statistic Display Specifies the name of the Statistic column. Current Value Use the checkbox to specify whether the Current Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Minimum Value Use the checkbox to specify whether the Minimum Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Maximum Value Use the checkbox to specify whether the Maximum Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Average Value Use the checkbox to specify whether the Average Value column is shown on the chart. If shown, you can change the column name using the associated edit field. State Options The options panel for state charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. State Profile Specifies the state profile the chart will use. State Table Icon Description Select a state table to use. Open the properties window for the selected state table. Add a state table based off the selected objects and the selected state profile. See State Tables for more information on state tables. Show Excluded States Use the checkbox to show states specificed in the state table as excluded in the chart. Adjust colors for State Table If this box is checked, then the color palette for this chart will be reordered to match the order in the selected state table. In addition, colors associated with unutlized states will be made semi-transparent, while colors for utilized and excluded states will be made completely opaque. Match State Tables and Color Palettes If you have multiple charts referencing the same global Color Palette, then it is usually best to have those charts also reference the same State Table, and to only have one chart adjust the colors based on the state table. Utilization By Hour Options The options panel for state charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. Interval Specifies the time interval for the chart. For this time plot, the line will show the percentage of utilized time during the previous interval. State Profile Specifies the state profile the chart will use. State Table Icon Description Select a state table to use. Open the properties window for the selected state table. Add a state table based off the selected objects and the selected state profile. See State Tables for more information on state tables. State Gantt Options The options panel for state charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. State Profile Specifies the state profile the chart will use. State Table Icon Description Select a state table to use. Open the properties window for the selected state table. Add a state table based off the selected objects and the selected state profile. See State Tables for more information on state tables. Adjust colors for State Table If this box is checked, then the color palette for this chart will be reordered to match the order in the selected state table. In addition, colors associated with unutlized states will be made semi-transparent, while colors for utilized and excluded states will be made completely opaque. Excluded states will still appear on this chart. Staytime Options The options panel for staytime charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. Object Display Specifies the name of the Object column. Average Staytime Use the checkbox to specify whether the Average Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Minimum Staytime Use the checkbox to specify whether the Minimum Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Maximum Staytime Use the checkbox to specify whether the Maximum Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Interval Sets the interval for the template. All staytime values are recorded during each interval. The template then computes the average of those staytimes. Time Units Specifies the time units that should be used on the chart. Staytime By Type Options The options panel for staytime by type charts has the following properties: Entrance Objects Specifies the objects that define where the composite object begins. See Adding Objects for more information. Exit Objects Specifies the objects that define where the composite object ends. See Adding Objects for more information. Type Label, Value Type These properties are common to all By Type templates. For more information, see By Type Templates . Type Display Specifies the name of the Type column. Average Staytime Use the checkbox to specify whether the Average Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Minimum Staytime Use the checkbox to specify whether the Minimum Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Maximum Staytime Use the checkbox to specify whether the Maximum Staytime column is shown on the chart. If shown, you can change the column name using the associated edit field. Interval Sets the interval for the template. All staytime values are recorded during each interval. The template then computes the average of those staytimes. Time Units Specifies the time units that should be used on the chart. Tracked Variable Options The options panel for Tracked Variable charts has the following properties: Objects Specifies the Tracked Variables to include on the chart. See Adding Objects for more information. Name Display Specifies the name of the Name column. Current Value Use the checkbox to specify whether the Current Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Minimum Value Use the checkbox to specify whether the Minimum Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Maximum Value Use the checkbox to specify whether the Maximum Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Average Value Use the checkbox to specify whether the Average Value column is shown on the chart. If shown, you can change the column name using the associated edit field. Travel Distance Options The options panel for travel distance charts has the following properties: Objects Specifies the objects to include on the chart. See Adding Objects for more information. Object Display Specifies the name of the Object column. Distance Display Specifies the name of the distance traveled statistic in the legend. Interval Sets the interval for the template. Length Units Sets the units the distance will be measured by. WIP By Type Options The options panel for WIP by type charts has the following properties: Entrance Objects Specifies the objects that define where the composite object begins. See Adding Objects for more information. Exit Objects Specifies the objects that define where the composite object ends. See Adding Objects for more information. Type Label, Value Type These properties are common to all By Type templates. For more information, see By Type Templates . Type Display Specifies the name of the Type column. WIP Display Specifies the name of the WIP statistic in the legend. Zone Statistics Options The options panel for zone statistics charts has the following properties: Zone Specifies the Zone to use as a data source. Statistic Specifies which statistic to collect from the Zone. If you want to gather a Partition statistic, use the Zone Partition Statistics Table template, instead of this template. Subset/Calculation Specifies which Subset or Subset Calculation to gather statistics from, if required. If the chosen statistic does not require a Subset or Subset calculation, the only option will be \"None\". Otherwise, this combo box will contain a listof all Subsets, or Subset calculations, based on the chosen statistic. Instance Display Specifies the name of the Instance column, if the instance column is present. Current Specifies whether the Current column is present. If checked, you can edit the name of this column in the associated edit field. Minimum Specifies whether the Minimum column is present. If checked, you can edit the name of this column in the associated edit field. Maximum Specifies whether the Maximum column is present. If checked, you can edit the name of this column in the associated edit field. Average Specifies whether the Average column is present. If checked, you can edit the name of this column in the associated edit field. Zone Partition Statistics Options The options panel for zone partition statistics charts has the following properties: Zone Specifies the Zone to use as a data source. Statistic Specifies which statistic to collect from the Zone. If you want to gather a statistic besides a Partition statistic, use the Zone Statistics Table template, instead of this template. Calculation Specifies which Partition Calculation to gather statistics from, if required. If the chosen statistic does not require a Partition Calculation, the only option will be \"None\". Otherwise, this combo box will contain a list of all Partition Calculations. Partition Value Type Specifies whether the partition value is text, or if it is a number. Instance Display Specifies the name of the Instance column, if the instance column is present. Partition Display Specifies the name of the Partition column. Current Specifies whether the Current column is present. If checked, you can edit the name of this column in the associated edit field. Minimum Specifies whether the Minimum column is present. If checked, you can edit the name of this column in the associated edit field. Maximum Specifies whether the Maximum column is present. If checked, you can edit the name of this column in the associated edit field. Average Specifies whether the Average column is present. If checked, you can edit the name of this column in the associated edit field."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Partitions/Partitions.html",
        "title": "Partitions",
        "content": "The Partitions panel contains options for creating partitions. Partition Limits All People Templates have a Partitions panel. It is identical to the Partitions group box on the Calculated Table, with one exception: some templates will limit the number of Partitions you can have. Details about this exception are documented with each particular template. The following properties are on the Partitions panel: Partitions The Partitions area allows you to specify the way the result table should be partitioned, if at all. Each partition allows you to specify the Partition Name and the Sort Direction . Other properties depend on the kind of partition you have added."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/RadioButton/RadioButton.html",
        "title": "Radio Button",
        "content": "The Radio Button panel contains options for radio button controls. The following properties are on the Radio Button panel: Value The value associated with this radio button. This is used when linking to a node in the model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Settings/Settings.html",
        "title": "Settings",
        "content": "Overview The Settings panel displays different chart options depending on the type of chart. Bar Chart Settings The settings panel for bar charts has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Show Percentages Check this box to show the bar chart in percentage mode, rather than by raw value. If this box is cleared, then the x-axis will switch to raw value mode Stack Bars Check this box to display the bars stacked horizontally. Clear this box to show each bar side by side. Show Zero Columns Check this box to display legend items for all columns. Clear this box to show only columns where at least one row has data, which implies only showing legend items for visible bars. Minimum Specifies the minimum value for this chart. The value should be non-negative. Use Maximum If checked, the chart will use the supplied maximum value, rather than determining the maximum automatically. Box Plot Settings The settings panel for box plots has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Show Points Check this box to show the data points used to generate the box plot. If this box is checked, the points will be drawn in the category color, while the box plot will be drawn gray. Auto-size Boxes Check this box to adjust the width of each box, making it more proportional to the height. Clear this box to have all boxes be equally wide. Show Mean Check this box to show the mean of the values on the chart. Show Confidence Check this box to show the range of the confidence interval about the mean. You can use the combobox to choose the level of confidence. Financial Analysis Chart Settings The settings panel for financial analysis charts has the following properties: Currency This options changes the prefix of each value to be displayed. The Other option allows you to define a custom string value, or leave the field blank to display no prefix. Precision This defines how many numbers will be displayed right of the decimal point. Font Size This defines the font size of graph text. Only Collect Data for a Defined Time Interval This option creates a time period during which statistics for this graph will be recorded. From Time This defines when statistics will start being recorded. To Time This defines when statistics will no longer be recorded. Gantt Chart Settings The settings panel for gantt charts has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Reverse Rows When checked, the chart draws the most recent rows at the top. Duration Units Specifies the units for the duration shown in the hover information. Time Window When checked, the chart automatically adjusts the horizontal scroll to show only the most recent time period, which you must specify when using this option. Histogram Settings The settings panel for histograms has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Show Labels Check this box to show the value of each bar at the top of the bar.Clear the box to hide the value labels. Normalize Values Check this box to show each bar as a percentage of the total, rather than the raw count. Clear this box to show each bar as the count for that range. Stack Bars Check this box to show different data sets stacked. Bar Mode Choose how bucket boundaries are generated. There are several options for this property: By Number of Buckets - With this option, you must specify how many Buckets will exist on the chart. There will be one bar per bucket, per category. By Bucket Width - With this option, you must specify how wide each bucket will be, and where the buckets start from. Sturges' Rule - Uses Sturges' rule to determine the number of buckets. Scott's Rule - Uses Scott's rule to determine the number of buckets. Freedman-Diaconis Rule - Uses the Freedman-Diaconis rule to determine the number of buckets. The last three options are well-known methods for choosing the width of each bucket. More information on each can be found on sites such as Wikipedia . Pie Chart Settings The settings panel for pie charts has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Show Percentages Check this box to show the pie chart in percentage mode, rather than by raw value. This only changes the center text. If this box is cleared, then the center text will switch to raw value mode. Show Zero Columns Check this box to display legend items for all columns. Clear this box to show only columns where at least one row has data, which implies only showing legend items for visible colors. Segment Ordering Select how segments in the pie are ordered. The available options are: Biggest segment first - The pie chart will order the segments by size. Use order in table - The pie chart will order the segments as they are orderd in the table. Pie Sizing Choose how the pie will be sized. The available options are: Automatic - The size of each pie will be determined by the length of the center text, if any. Fixed values - The chart will use the specified values. Outer Radius If the Pie Sizing property is set to Fixed values, then this value specifies the distance from the center of the pie to the outermost part of the pie. Thickness If the Pie Sizing property is set to Fixed values, then this value specifies the distance from the outermost part of the pie to the innermost part of the pie. To fill the pie all the way to the center, make this value the same as the Outer Radius property. Sankey Diagram Settings The settings panel for sankey diagrams has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Show Percentage Check this box to display percentages in the tooltip when hovering over a link. The percentages show the ratio of the link's weight to both the source and destination node weights. Node Width Specify the width of each node (represented as a rectangle) in the diagram. This value should be greater than zero. Node Padding Specify the vertical space between nodes. This value should be greater than zero. Alignment Specify which alignment used for the chart layout. There are four possible options: Justified - Nodes without incoming links are pushed to the left edge. Nodes without outgoing links are pushed to the right edge. Left - Nodes without incoming links are pushed to the left edge. Nodes without outgoing links are moved as far to the left as possible. Right - Nodes without incoming links are pushed as far to the right as possible. Nodes without outgoing links are pushed to the right edge. Centered - Nodes without incoming links are pushed as far to the right as possible. Nodes without outgoing links are pushed as far to the left as possible. Time Plot Settings The settings panel for time plots has the following properties: Show Legend Check this box to show the legend. Clear the box to hide the legend. Y Axis Scope Select how the range for each Y axis is determined. There are two possible values: Range calculated using all data - Each Y axis will be calculated using all data from the entire table. This option ensures that all Y axeswill have the same scale and offset. Range calculated using data within axis - Each Y axis will be calculated using only the data that belongs to that axis. The option ensures that each Y axis will have the location and scale required to show only the data on that axis. Y Axis Range Select the desired range for the Y axis. There are three available options: Full Range - The range of the Y axis will always include the complete range of data. Adaptive Range - The range of the Y axis will adapt to the visible data. Fixed Range - The range of the Y axis is set according to the Minimum and Maximum values Time Window If checked, the chart will keep only the most recent time period in view. You can specify the desired time to keep in view. Time Axis Mode You can specify whether to show the exact calendar time, or the duration from the start of the model on the time axis. If you choose to show duration, you can specify the time units that the time axis will show. Draw Style Choose how data points are connected. There are five options for this property: Points - each x/y pair is drawn as a point on the chart. Line - each x/y pair is connected by a line. Lines and Points - each x/y pair is connected by a line, and is drawn as a point on the chart. Stair Step - each x/y pair is connected by a horizontal line, followed by a vertical line. Area - the sequence of x/y pairs is used to create a filled shape."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Sorting/Sorting.html",
        "title": "Sorting",
        "content": "The Sorting panel contains options for sorting the data displayed in the chart. Bar Chart - Sort the order of colors within each bar group. If displaying the Bar Title or Bar Label, you can choose to sort by those values as well. Pie Chart - Sort the order of colors within each pie. If displaying the Pie Title or Pie Label (Center Data), you can choose to sort by those values as well. Box Plot, Histogram, and Time Plot - Sort color categories, as well as X-axis categories. The following properties are on the Sorting panel: Sort Categories Check this box if you want to use a custom sort, rather than the order found in the table. Sort by Bar/Pie Title Check this box if you want to sort the bar groups / pies by the bar/pie title. If there is no bar/pie title this property is unavailable. Sort by Bar/Pie Label Check this box if you want to sort the bar groups / pies by the bar/pie label. If there is no bar/pie label this property is unavailable. Sort List Edit the sort elements for this chart in the Sort List area. For more information about how sorting works, see the Working With Charts topic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Spinner/Spinner.html",
        "title": "Spinner",
        "content": "The Spinner panel contains options for spinner controls. The following properties are on the Spinner panel: Minimum Value The minimum value the control can be set to. Maximum Value The maximum value the control can be set to. Step Size Amount to increase/decrease by."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Subsets/Subsets.html",
        "title": "Subsets",
        "content": "The Subsets panel contains options for creating subsets. Subset Limits All People Templates have a Subsets panel. It is identical to the Subsets tab on the Calculated Table, with one exception: some People Templates will not allow you to make Subsets, if you have a certain number of partitions. Details about this exception are documented with each particular template. The following properties are on the Subsets panel: Subset List Subset Number - Displays the rank of the subset currently being viewed Subset Name - Displays and allows you to edit the name of the selected subset - Adds a new subset. There are two possible options: Add subsets for People Groups or Objects - Adds a special kind of subset that makes it easy to compare group and individualstatistics for People/HC groups and objects. Add basic subset - Adds a general use subset. - Duplicates the selected subset - Moves the selected subset up in the list - Moves the selected subset down in the list - Deletes the selected subset From Group Allows you to specify which People/HC resource group to use. This field will be set to the correct value if the list of tables includes one of the resource group tables - StaffGroups , LocationGroups , TransportGroups , or EquipmentGroups . Include data for Select what kind of data for each selected group should be included. There are three possible options: Each group as a whole - creates one subset per selected group that only include rows that deal with objects from the whole group. Each member of each group - creates one subset per member of each selected group. Each created subset only includes rows that deal with the specific member. Each group and each member - creates one subset per group as well as one subset per member of the group. Subgroups Use the checkboxes to choose which groups to include in the final table. Select all subgroups Press this button to select all subgroups shown in the list except the overall group. Clear all subgroups Press this button to clear all subgroups shown in the list except the overall group. Additional Filters If you require filters in addition to showing only group or individual rows, you can use this section to add them. They will be combined with the group or individual filters using an AND statement."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Text/Text.html",
        "title": "Text",
        "content": "The Text panel contains options for displaying text on charts. The following properties are on the Text panel: Precision Specify the number of decimals to use on the chart. Note that this will only apply to text for floating point values. Font Size Set the font size for general text on this chart in pixels. Title Font Size Set the font size for the chart title in pixels. Axis Title Font Size Set the font size for the axis titles in pixels. X Axis Title Optional. Specify the text for the x-axis title. Y Axis Title Optional. Specify the text for the y-axis title. Custom Title If checked, the chart will show this property's value as the chart title. You can use this property to specify a title with special characters, or to specify that no title should be shown. Show Column Headers This list allows you to specify which values, if that value is written as text on the chart, should include the column header for that value. For example, if you have a Type column, you might want the chart to show \"Type: \" before any type values are written."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/DashboardPanels/Tracker/Tracker.html",
        "title": "Tracker",
        "content": "The Tracker panel contains options for tracker controls. The following properties are on the Tracker panel: Minimum Value The minimum value that the control can be set to. Maximum Value The maximum value that the control can be set to. Exponential Value The exponential rate that the value will increase by as the tracker is dragged to the right. If set to 1, the tracker value will increase linearly. Style Change the display style of the tracker gripper. Vertical Change the tracker to be vertical instead of horizontal."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Combiner/Combiner.html",
        "title": "Combiner",
        "content": "The Combiner panel defines how a Combiner object combines flow items. The following properties are on the Combiner panel: Combine Mode Selects the mode that the combiner is operating in. The container flow item is the item received through port 1. All other flow items are received through ports 2 and higher. It has the following modes: Pack - All other flow items are moved into the container flow item and then the container flow item is released. Join - All other flow items are destroyed and then the container flow item is released. Batch - All flow items are released when the batch is collected. Components List This table is used to define how many of each type of flow item the combiner will collect before sending the completed collection downstream. The combiner will use the flow item that arrives through input port one as the container object and will only accept one of them. Each row in the table represents arrivals from input ports numbered two and above. To update this list dynamically during a model run, use the Update Combiner Component List picklist option in the OnEntry trigger. Target Quantity The required number of flow items to be received through the associated input port for each operation."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Input/Input.html",
        "title": "Input",
        "content": "The Input panel defines how an object pulls flow items from upstream objects. The following properties are on the Input panel: Pull If this box is checked, the object will pull flow items from upstream objects. The upstream objects should open all their output ports to allow the object to pull the flow items it needs. Pull Strategy This parameter is only visible if Pull is checked. This picklist returns the input port number connected to the object that the next flow item is to be pulled from. This field is evaluated only on reset of the model and when the pulling object becomes ready to receive its next flow item. For a Processor with a capacity of 1, this means that the Pull Strategy field will only be evaluated once right after each flow item exits the Processor. See also Fixed Resource Concepts: Pull Strategy . Pull Requirement This parameter is only accessible if Pull is checked. This picklist needs to return either a true or a false (1 or 0). This field is evaluated when considering whether or not to pull in a particular flow item from the upstream object that was defined by the \"Pull from port\" field. This field will only be evaluated for flow items that are in the \"ready\" state (i.e.FRSTATE_READY) meaning the flow items are ready to leave the upstream object. Basically, the \"Pull Requirement\" field is evaluated for every \"ready\" flow item immediately after the \"Pull from port\" field gets evaluated. The field is evaluated again for each new flow item that later becomes ready in the upstream object. See also Fixed Resource Concepts: Pull Requirement ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/MultiProcessor/MultiProcessor.html",
        "title": "MultiProcessor",
        "content": "The MultiProcessor panel controls the object's processing logic. The following properties are on the MultiProcessor panel: Process List The process list contains each of the processes for this multiprocessor. To edit a process, select it in the list and change its name and edit its properties below. Icon Description Click this button to add a new process to the process list. Click this button to delete a process from the process list. Click these buttons to move the selected process up or down in the process list. Process Time This picklist determines how long a processor spends processing a single flow item. Number of Operators This number determines how many operators the object will use during its process time. Operator This picklist returns a reference to the operator or dispatcher that the object is using during the given process. Priority This value sets the priority of the task sequence that will be sent to the operator. Operators generally sort task sequences so that sequences with higher priorities will be performed first. Task sequences with the same priority will be performed in the order that they were received. Preemption Sets the preempt value for calling operators."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Output/Output.html",
        "title": "Output",
        "content": "The Output panel defines how the object sends flow items downstream. The following properties are on the Output panel: Send To Port This picklist returns the output port number connected to the object that the flow item should be moved to. If 0 is returned, all outputs are opened and the flow item is moved to the first downstream object that is able to receive it. Use Transport If this box is checked, the object will request a transport to move the flow item downstream. If it is not checked, the flow item will be moved automatically. When you check the Use Transport box, an additional field is enabled where you define to whom the generated transport task sequence should be dispatched. The default will give the task sequence to the task executer/dispatcher connected to the object's first center port (current.centerObjects[1]), but you can custom-define this as needed. Priority This parameter is only available if Use Transport is checked. This value sets the priority of the task sequence that will be sent to the transporter or dispatcher. Transporters and dispatchers generally sort task sequences so that sequences with higher priorities will be performed first. Task sequences with the same priority will be performed in the order that they were received. Preempt This parameter is only available if Use Transport is checked. If set to one of the preempting values, the task sequences sent to the transporter will automatically preempt whatever the transporter is doing at the time. This may cause the transporter to perform tasks that would normally not be allowed, such as carrying more flow items than its capacity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Processor/Processor.html",
        "title": "Processor",
        "content": "The Processor panel controls the object's setup and processing logic. The following properties are on the Processor panel: Max Content This number defines the number of flow items that the processor can hold at one time. Animate Items If this box is checked, flow items will be seen translating from one side of the processor to the other as their process time elapses. It is for visualization purposes only. If unchecked, entering flow items will be placed in the middle of the processor and remain until exiting. Setup Time This picklist defines the amount of time that the object waits after receiving a flow item to begin processing that flow item. Use Operator(s) If this box is checked the object will call for one or more operators during its setup time. The operator(s) will be released after the setup time has expired. The number determines how many operators the object will use during its setup time. Process Time This property determines how long a processor spends processing a single flow item. Use Operator(s) If this box is checked the object will call for one or more operators during its processing time. The operator(s) will be released after the process time has expired. The number determines how many operators the object will use during its process time. Same as Setup This property is only visible if both the Use Operator(s) boxes are checked. If this box is checked, the operators that were called for setup time will be utilized during process time. If this box is not checked, the operators used for the setup time will be released and new operators will be called for the process time. Different operators can be called using a special pick option in the Operator parameter. Operator This property returns a reference to the operator or dispatcher that the object is using during setup or process time. Priority This value sets the priority of the task sequence that will be sent to the operator. Operators generally sort task sequences so that sequences with higher priorities will be performed first. Task sequences with the same priority will be performed in the order that they were received. Preemption Sets the preempt value for calling operators. This may cause the operator to perform tasks that would normally not be allowed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Queue/Queue.html",
        "title": "Queue",
        "content": "The Queue panel defines how items are stored in the queue. The following properties are on the Queue panel: Maximum Content This is the maximum number of flow items the queue can hold at once. Item Placement This menu defines how the flow items are placed in the queue visually. It has the following options: Stack Vertically - The flow items are stacked on top of each other. The flow item at the bottom of the pile is the one that has been in the queue the longest. Horizontal Line - The flow items are lined up horizontally. The one closest to the output ports of the queue is the one that has been in the queue the longest. Stack inside Queue - The flow items are stacked in rows inside the queue. The flow items will move if a product ranked before them is taken out of the queue. If you would like the product positions to stay the same once they are in the queue, then have the queue be LIFO by having downstream objects pull only the last product in the queue. Do Nothing - Flow items are all placed at the same point in the queue. This may make it appear as if the queue is only holding one flow item. Stack Base Z This number defines the height where the queue begins placing flow items that are being stacked vertically or inside the queue. LIFO If this box is checked the queue will act as a \"last in first out\" (LIFO) queue, otherwise it will act as a first in first out (FIFO) queue. Perform Batching If this box is checked, the queue will accumulate flow items into a batch before releasing them downstream. Accumulation continues until either the target batch size is met or the max wait time expires. If this box is not checked, no batching will occur, and flow items may leave as soon as downstream objects are available. Target Batch Size This number defines the size of the batches that the queue will gather before sending the flow items downstream. Flow items are sent downstream individually. Max Wait Time This number is the maximum length of time that the queue will wait before sending the flow items downstream. If this time expires and the batch size has not been met, the currently collected batch will be released anyway. If 0 is specified in this field, then there is no maximum wait time, or in other words the queue will wait indefinitely. Flush contents between batches If this box is checked the queue will not allow new flow items to enter until the entire current batch has left."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Separator/Separator.html",
        "title": "Separator",
        "content": "The Separator panel defines how the separator separates flow items. The following properties are on the Separator panel: Separate Mode Unpack - If this option is chosen, the separator will assume that the flow item that entered contains other flow items that need to be removed. Split - If this option is chosen, the separator will make duplicate copies of the entering flow item. Quantity This picklist returns how many flow items will be unpacked or duplicated by the separator."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/FixedResourcePanels/Source/Source.html",
        "title": "Source",
        "content": "The Source panel defines what items the source creates and when they're created. The following properties are on the Source panel: FlowItem Class This is used to define what class of flow item the source will create. To view and edit flow item classes, press the Flowitem Bin button to the right of the field, or open the Flowitem Bin using the Toolbox. Arrival Style This menu specifies the way that the source creates flow items. It has the following options: Inter-Arrival time - After a set period of time, the source creates one flow item. This repeats until the model is stopped. Arrival Schedule - The source follows a table that defines when flow items are created, how many there are, and what labels are assigned to them. Arrival Sequence - The source follows a table that defines what order flow items are created in. Flow items are created as fast as the source can move them downstream. Inter-Arrival Time Properties The following properties only appear when Inter-Arrival Time is selected as the Arrival Style: Arrival at time 0 If this is checked, one flow item will be created at time 0. The next will be created at the end of the first inter-arrival time. Inter-Arrivaltime A function that returns the amount of time the source should wait before creating the next flow item. Arrival Schedule/Sequence Properties The following properties only appear when Arrival Schedule or Arrival Sequence is selected as the Arrival Style: Repeat Table If this box is checked, the schedule or sequence will continually repeat itself until the model is stopped. In the case of a schedule, the arrival defined in row 1 will occur 0 seconds after the time defined for the arrival in the last row. This means that the arrival time for the very first row of the table is only used once for a given simulation. Note that this initial delay can be used as a warm-up period. If you would like to specify an interval time between the arrival time of the last row and the arrival time of the first for when repeated, then add another row to the end of the table and specify a quantity of 0. Edit Table This opens the Arrivals window where you can edit the arrivals in a table view. The Arrivals Window The Arrivals window has the following properties: Arrivals This specifies how many rows are in the arrival table. Labels This specifies how many columns are in the arrival table. Additional columns will be added for labels and their initial values that will be added to the flow items when they are created. Add to Excel Importer - This button adds the table as a row in the Excel Importer. ArrivalTime This is the time in model time units that the arrival will occur (Arrival Schedule only). ItemName Specifies the name of the flow item when it's created. Quantity This number specifies how many flow items will be created during this arrival. Label Columns These columns specify the labels that will be added to created flow item and their initial values."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Groups/Groups.html",
        "title": "Groups",
        "content": "The Groups panel displays the groups the selected object is a member of. This panel only shows if the object is the member of at least one group. Group Dropdown Icon Description Select one of the object's groups. Add this object to a new group. Sample a group to add this object to. Open the properties of the selected group. Remove this object from the selected group. Duplicate Object Create a copy of the selected object. This copy will belong to all the same groups as the original."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Labels/Labels.html",
        "title": "Labels",
        "content": "The Labels panel lists the object's labels. Labels are custom variables that you can specify on the object. For example, if you want to keep track of the number of flow items of itemtype 3 that have entered an object, you can use a label to keep a record of this value. For information on using labels, see the Label Properties documentation. The main panel shows a list of the labels on this object. Icon Description Adds a new label with number or string data to the end of the list of labels. Duplicates the selected label(s). Deletes the selected label(s). Moves the selected label(s) up or down in the list. Pins the selected label(s) (or all labels if there is no selection) to a Dashboard as either a table of values, bar chart or line graph. Note: Pinning labels with string data will display 0 for its value. Label Types When you add a label, you can choose from one of the following kinds of labels: Number Label - a label that stores number data String Label - a label that stores text data Pointer Label - a label that stores a reference to another object Array Label - a label that stores an array of values FlexScript Label - a label that stores text, and is toggled as FlexScript Bundle Label - a label that stores a Bundle (a kind of table) Tracked Variable Label - a label that stores a Tracked Variable. Once you have added a label, you can change its type using the context menu. The way to edit the value of each label depends on the type of label. The following list describes how to edit the label's value, depending on its type: Number Label - Double click on the value, and enter a new value. String Label - Double click on the value, and enter a new value. Pointer Label - Click on the value. A Sampler button will appear, allowing you to sample an object, which will be referenced by this label. Array Label - Double click on the value. This opens a table view of the array. Add elements to the array by adding rows to the table. You can edit each value by double-clicking on the value in the table view. Close the table view when you are finished editing array values. FlexScript Label - Click on the value. A Code button will appear, allowing you to enter the FlexScript code for this label. Bundle Label - Double click on the value. This will open a table view, which will allow you to edit the table stored in the bundle. Tracked Variable Label - Click on the value. An Edit button will appear, which will allow you to configure the Tracked Variable stored on this label. Automatically Reset Labels If this option is checked, then the object will automatically reset its labels back to their initial values on reset. When you apply the window, the values shown will be saved as the reset values. The reset values will also be automatically set when directly editing the labels on this tab while the model is reset."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Ports/Ports.html",
        "title": "Ports",
        "content": "The Ports panel displays and allows you to edit port connections between objects. This area lets you edit the object's connections. Select either Input Ports, Central Ports, or Output Ports from down arrow on the right. The list on the left shows the appropriate connections. Once you have finished editing an object's connections, you will need to reset the model before running it again. Icon Description Change the list of displayed connections. Move the selected connection up in the list. Move the selected connection down in the list. Delete the selected connection. Center in view the object on the other side of the selected connection. Select the object on the other side of the selected connection."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Statistics/Statistics.html",
        "title": "Statistics",
        "content": "The Statistics panel displays various statistics about the object. See Task Executer Statistics for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Template/Template.html",
        "title": "Template",
        "content": "The Template panel lets you view and control template data associated with an object. See Using Object Templates for more information. Template Displays the object that is the template for this instance. If the object does not have a template, you can use the and buttons to bind the object as an instance of a template. Press to center the template in the view. Press to remove the template binding link. Overrides Displays the list of overridden properties. Press to open a popup that lets you add, remove and configure overrides. See Managing Instance Inheritance for more information. Instances Displays the object's set of template instances. Press to open a popup that lets you add, remove, and reorder instance binding links. Press to create a new template instance of the object. Press to explicitly apply all properties of the template to its instances. Global Template Select this checkbox to make the object into a global template. See Global Templates for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Triggers/Triggers.html",
        "title": "Triggers",
        "content": "The Triggers panel lists the object's triggers. Triggers are called when events fire on the object. See Key Concepts About Events for general information about triggers. Most 3D objects have triggers. This panel starts off blank. Click the Add button to open a menu of available triggers for that object. Each object may have a different set of triggers. See the Concepts page for that category of object for more information about each trigger under the Events section. After you've added the trigger, each trigger has the following options: Icon Description Add custom logic to the trigger using preconfigured pick options. Open a popup of the logic added to the trigger so far. Remove all logic from the trigger. Open the trigger's code editor to edit the FlexScript directly. Remove the trigger."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GeneralPanels/Visuals/Visuals.html",
        "title": "Visuals",
        "content": "The Visuals panel controls the appearance of objects. The following properties are on the Visuals panel: 3D Shape This specifies the 3D shape for the object. 3D shapes can either be referenced through the or loaded 3D shapes will display in the down arrow menu. You can also select Browse... from this menu to load a new shape. FlexSim can load many types of 3D files, including: .fbx, .usd, .jt, .skp, .3ds, .wrl, .stl, .stp, .igs, .dae, .obj, .ac, .x Color The color of the 3D object. Position, Rotation, and Size Here you can set the position, rotation, and size of the object based on X, Y, and Z values. See Moving objects with Properties for more in depth discussion. Icon Description Change the position of the object. By default, the object's position is determined by the coordinates of the object's bottom center. However, you can change this point of reference by clicking the Position button. See Changing the Location Point of Reference for more information. Change the rotation of the object. Change the size of the object. More Visuals Opens the Visuals window which has more options. The Visuals Window Appearance The Appearance group has the following properties: 3D Shapes This option specifies the 3D shape(s) for the object. The drop down contains all of the shape frames for the object. The number (0 -) is the shape frame index for use in the setframe() command. Icon Description Adds a Shape Frame to the object. Removes the current Shape Frame. Moves the selected Shape Frame up or down in the list. 3D shapes can either be referenced through the or loaded 3D shapes will display in the down arrow menu. You can also select Browse... from this menu to load a new shape. Shape Factors Click on this button to display the object's shape factors popup. 3D Texture This field specifies the object's 3D texture. If the 3D shape does not already have a texture defined within its 3D file, then this texture will be drawn on the face of the 3D shape. Note that if the object's 3D shape already has a texture defined, then this texture will not be used. Customize Shape The button opens a window to customize how this object draws the meshes in its 3D shape. Other objects using the same shape will not be affected. The mesh drop down contains a list of meshes imported from the 3D shape file. Select a mesh from the drop down and check the Override box to customize the mesh. Hide Mesh - Toggles displaying the mesh in the 3D view. Use Object Color - Toggles whether the mesh should use the main object's color as its diffuse color. Diffuse Color - Use a particular diffuse color for the mesh. Use Object Texture - Toggles whether the mesh should use the main object's texture as its texture. 3D Texture - Use a particular texture for the mesh. Reflectivity - Specify how reflective the mesh is rendered in RTX Mode. A value of 1.0 will completely mirror the environment. A value of 0.0 will not mirror the environment at all. A value between 0.0 and 1.0 will mix the mesh color with the environment. Visuals/Animations These buttons allow you to save/load visual information for objects. You can also access an object's animations through the 3D views right click menu. Load/Save These buttons load/save all of the Appearance settings of an object, allowing you to save shape, texture, color, and animations in a .t file to load into other objects you want to look the same. Edit This button opens the Animation Creator, which allows you to create animations for FlexSim Objects. Flags Here you can check different boxes to show/hide different parts of the object, such as the contents of the object, the name, the ports, etc. These flags can also be toggled through the Edit Selected Objects view. Show Name - Toggles displaying the object's name in the 3D view. Show Ports - Toggles displaying port connections in the 3D view. Show 3D Shape - Toggles displaying the object's 3D shape. Show Contents - Toggles displaying the object's contents. Scale Contents - If checked, any objects within the content of this object will be scaled according to the size of this object. Protected - If checked, this object will not allow the user to move, size, rotate, or delete the object. No Select - If checked, this object will not be able to be clicked on the 3D view. To gain access to an object with the No Select flag checked, find it in the Tree Window. Frustum Culling - If checked, this object will not draw its contents if the object is not being drawn by the view. For example, the contents of a Visual Tool will not be drawn if the Visual Tool's yellow box is not visible in the 3D view. If you organize your model into containers, you can use frustum culling to improve the framerate of the 3D view when those containers are not visible by entirely skipping the draw of the objects in those containers."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GISPanels/Map/Map.html",
        "title": "Map",
        "content": "The Map panel has options for controlling the Map's properties. The following properties are on the Map panel: Edit Mode Edit Mode enables the map to be panned and zoomed in the 3D view. If cleared, then dragging the map tile textures will pan the view instead of the map. This only affects the map tile textures. The border of the map is not affected by this property. Neither are points, routes, or travelers drawn by the map. Use the Protected flag on points to prevent them from being moved. Search Query the geocoding server for a location by name or address and set the map's latitude, longitude, and zoom based on the result. Latitude This number defines the latitude of the center of the map. Longitude This number defines the longitude of the center of the map. Zoom This number defines the zoom level of the map. Higher numbers are zoomed in. Draw Border This number defines how the border is drawn. If no border is drawn, the map can still be selected by clicking an edge. The size of the thick frame border is based on the Z size of the map. The scale of tile textures is also affected by the map's size. If you want to adjust the relative size of the thick frame border, first change the Z size of the map object and then adjust the zoom back to the desired level. Scale Factor This number defines an additional custom scale factor to be used when drawing traveler and point shapes. The zoom level of the view, map size, object size, and model units are also used to scale the size of traveler and point shapes. Min Scale This number defines the minimum scale value at which traveler and point shapes will stop being scaled down as the view is zoomed in. Specify 0 to not use a minimum scale. Use the << button to get the scale value of the map according to the view's current zoom level. Max Scale This number defines the maximum scale value at which traveler and point shapes will stop being scaled up as the view is zoomed out. Specify 0 to not use a maximum scale. Use the << button to get the scale value of the map according to the view's current zoom level."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GISPanels/Point/Point.html",
        "title": "Point",
        "content": "The Point panel has options for controlling the Point's properties. The following properties are on the Point panel: Draw Point If Draw Point is checked, then a 3D point will be drawn at the point's geographic location on a map. The point can still be selected in the 3D view whether the 3D point is drawn or not. Search Query the geocoding server for a location by name or address and set the point's latitude and longitude based on the result. Latitude This number defines the latitude of the point. Longitude This number defines the longitude of the point."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/GISPanels/Route/Route.html",
        "title": "Route",
        "content": "The Route panel has options for controlling the Route's properties. The following properties are on the Route panel: Point Names The names of the start point and end point of the route are shown at the top. Color The route lines will be drawn this color. Type The type affects how the route is drawn and how its duration, distance, and cost are calculated. Straight Rhumb Line The route is a straight line on a Mercator projection, crossing all meridians of longitude at the same angle with a constant bearing. Flight Path - The route is a curved line which is the shortest distance between the two points on the surface of the globe. Driving Roads - The route is a series of lines following driving roads between the two points. Custom Types (Freight Railways, etc.) - Additional custom route types using other routing servers as configured in the GIS Navigator Properties. Update When the Update button is pressed, the route's path lines, duration, distance, and cost will be recalculated based on the route's type. For driving roads, these values will be queried from a routing server using the URL specified on the GIS Navigator. For rhumb lines and flight paths, these values will be calculated mathematically based on the average air speed and cost settings on the GIS Navigator. For rhumb lines and flight paths, their values will also be automatically recalculated when moving the start or end point of the route. To update driving roads, press the Update button after moving the start or end point. Lock Check a Lock box to prevent a value from being changed when the route is updated. You can use these checkboxes to specify particular values for your routes without concern that they will be overwritten when the route is updated. Duration This number defines the duration that will be used when traveling this route. Distance This number defines the distance that will be tracked when traveling this route. Cost This number defines the weighted cost of using this route when calculating a trip. For example: To find the shortest trip, use distances for route cost. To find the fastest trip, use durations for route cost."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/PeoplePanels/EnterExitInstructions/EnterExitInstructions.html",
        "title": "Enter/Exit Instructions",
        "content": "The Enter/Exit Instructions panel defines what people do when they arrive at or leave this object. The following properties are on the Enter/Exit Instructions panel: Edit Enter Instructions Opens the Enter Instructions window where you define what people do when arriving at this location. Edit Exit Instructions Opens the Exit Instructions window where you define what people do when leaving this location. The Instructions Window This window is used for both Enter and Exit intructions. Template This dropdown specifies the set of instructions to be used for the object. All but the last item are pre-defined instruction sets for various location types. The last item is the Custom option which allows you to define custom instructions sets. Role This and all other options below become available if Template is set to Custom. The Role listbox defines the different roles an entering person may assume. For example, a person flowitem entering a bed could use a Patient role which details a list of instructions to make the person lay in the bed. Whereas a staff object could use a Staff role with a list of instructions to walk to the side of the bed and start a stethoscope animation. The list defines all the possible roles, with their associated instruction set, used by this object. When a person enters the location they will assume the first role from the top that they satisfy the condition for. Sub roles can also be defined inside a role. This allows a set of instructions to be executed for a role, and then the person will also assume the first sub role within that role to assume. Name The name of the role or subrole. Condition The condition the entering person must meet to assume this role or subrole. For example, a Doctor role might require the entering person to be a member of the MDs Group. The entering person will check the condition for each role from the top. The first condition that returns true is the role they will assume. Instructions Here you define the list of instructions for the currently selected role. New instructions can be added from the add button. Planner Person Adds a planner person visual inside the location. This can be used by some of the instruction panels with the Apply Planner Position button to more easily set position and rotation values of the entering person."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/PeoplePanels/ElevatorBank/ElevatorBank.html",
        "title": "Elevator Bank",
        "content": "The Elevator Bank panel defines the logic of the elevators in the bank. The following properties are on the Elevator Bank panel: Max Speed, Acceleration, Deceleration Define the speed settings of the elevators in the elevator bank. Door Open/Close Time Define the time it takes to open and close an elevator door. For opening, this is the duration applied from the time the elevator arrives at a floor, to the time that the first person starts to exit/enter the elevator. For closing, this is the duration applied from the time the last person finishes entering/exiting the elevator to the time the elevator starts moving to the next floor. Wait Time Define the minimum amount of time the elevator will remain on a floor with its door open. Max Entries/Exits Define the maximum number of people who can be entering/exiting the elevator simultaneously. This value is used in conjunction with the Entry/Exit Time property to determine the total time it takes for multiple people to enter/exit the elevator. Entry/Exit Algorithm The elevator bank uses a simple algorithm for sequencing the entries and exits of an elevator. If we represent e as the individual entry/exit time, and s as the number of simultaneous entries/exits, then e / s determines the duration from the time that one person may start to enter/exit the elevator to the time a next person may start to enter/exit the elevator. For example, if the entry/exit time is 5 seconds, and the number of simultaneous entries/exits is 2, then there will be a 2.5 second gap between each person starting to exit the elevator. If there are multiple people needing to exit the elevator, starting for example at time 100, then the first person will start to exit at time 100. The second person will start to exit at time 102.5. The third person will start to exit at time 105, when the first person finishes exiting, and so on. In this scenario, where there are for example 5 people needing to exit, the first person will start exiting at time 100, and the last person will finish exiting at time 115. When exiting/entering, elevators will first have all people exit who are to exit at that floor. Then once all people are finished exiting, people who need to enter will start to enter. In other words, people do not exit and enter simultaneously. Instead, people first exit, then people enter. Elevator Capacity Define the maximum capacity of an elevator. This is defined in whatever units of measure are used in the Traveler Capacity Usage property. Traveler Capacity Usage Define how much of an elevator's capacity a single traveler takes up. The default is to use the x/y footprint of the traveler plus the x/y footprint of anything the traveler is carrying. Entry/Exit Time Define the amount of time it takes for a person to enter/exit the elevator. This time is used in conjunction with the # Simultaneous Entries/Exits property to determine the total amount of time it takes for multiple people to enter/exit the elevator. Request List Pull Query Define the query used by an available elevator to determine the next floor to go to. The Elevator Bank manages a list of currently active requests. You might think of a specific request as corresponding to a pressed/lighted button at the entrance to an elevator bank, or a pressed/lighted button inside an elevator. When a person arrives at an Elevator Bank, the person will press a button to go either up or down. The pressing of the button creates a new request for an elevator to come to that floor. Also, when a person enters an elevator, s/he presses a button for the destination floor to go to. This creates another new request for that specific elevator to go to the target floor. The Elevator Bank internally contains a List that references all active requests. When an elevator needs to decide which floor to go to next, it pulls from this list, using the query you define here, and then moves to whichever floor is chosen from the pull operation. You can view the properties of the request list by pressing Request List Properties... Alternatively you can view the current list of requests by pressing View Request List... . The elevator bank's request list uses custom aliases in defining the request list pull query. Instead of using the default terms value and puller , this list uses the terms request and elevator , since the values of this list are associated with elevator requests, and the pullers of the list are the elevators. Additionally, the request term is of the FlexScript type ElevatorBank.Request and the elevator term is of the type ElevatorBank.Elevator . Thus your pull query can directly use any method or property associated with these interfaces. The Default Pull Query The default request list pull query is as follows WHERE (request.onElevator == 0 OR request.onElevator == elevator) AND elevator.canStop(request.floorZ, request.travelDirection) ORDER BY distance ASC In this default query, the WHERE clause has two criteria. First is the expression (request.onElevator == 0 OR request.onElevator == elevator) . Note that a request is like a pressed/lighted button, either inside an elevator or at a floor's entrance to an elevator bank. This expression means that the elevator should only go to a lighted button that is either not on any elevator ( request.onElevator == 0 , i.e. the button is at a floor, outside any specific elevator) or a button that is on that specific elevator ( request.onElevator == elevator ). In other words, the elevator should never go to a request that was pushed inside a different elevator. The second requirement of the where clause is elevator.canStop(request.floorZ, request.travelDirection) . This means that the elevator should only take requests that, first, are in the direction that the elevator is currently already going, and second, are far enough ahead of the elevator (if the elevator is currently moving) that the elevator can still stop at the floor, given its current speed and deceleration. The ORDER BY clause of the default query simply prioritizes the requests that are closest to the elevator. Request List Properties Opens the properties window of the internal request list. View Request List Opens the Entries window of the internal request list."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/PeoplePanels/Equipment/Equipment.html",
        "title": "Equipment",
        "content": "The Equipment panel defines the max speed of the object. The following properties are on the Location panel: Max Speed The max speed that this object can be pushed."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/PeoplePanels/Location/Location.html",
        "title": "Location",
        "content": "The Location panel defines what kind of location the object is. The following properties are on the Location panel: Shape Changes the location's shape and Enter and Exit instructions."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/PeoplePanels/MultiLocation/MultiLocation.html",
        "title": "MultiLocation",
        "content": "The MultiLocation panel primarily allows you to edit the number and placement of sub locations. The following properties are on the MultiLocation panel: Edit Mode Checking this box allows you to move individual sub locations within the object instead of the object as a whole. Locations Edits the number of sub locations within the object. Acquire As Single Unit When checked the object will be pushed to the list of acquireable locations, otherwise each sub location will be pushed to the list individually."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/PeoplePanels/WaitingLine/WaitingLine.html",
        "title": "Waiting Line",
        "content": "The Waiting Line panel defines what the line looks like and how it operates. Points The number of points on the line. Points Size The draw size of points on the line. Gap Size The distance each person should stand away from the person in front of them in line. Single Entry Point When checked, the line will behave like a line at an amusement park where you have to enter at the beginning and traverse the length of the line before reaching the end. If not checked, a person can walk in a straight line to the back of the line without following the layout of the line. The following properties are on the Waiting Line panel: Draw Floor If checked a rectangular floor will be drawn between each point in the line with the texture specified here. Width The width of the drawn floor. Width Repeat Distance The distance once instance of the texture should be drawn in the width. Length Repeat Distance The distance once instance of the texture should be drawn in the length. Color The color that will be applied to the texture of the drawn floor. Draw Stanchions If checked, vertical rectangular images will be drawn to either side of the floor between each point in the line with the texture specified here. Height The height of the drawn stanchion images. Repeat Distance The distance once instance of the texture should be drawn in the length. Color The color that will be applied to the texture of the stanchions."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ProcessFlowPanels/ProcessFlow/ProcessFlow.html",
        "title": "Process Flow",
        "content": "The Process Flow panel has general settings for Process Flows. The following properties are on the Process Flow panel: Image The Image box sets the icon image for the process flow. This icon is displayed on the tab of the process flow and in the Toolbox. By default, all process flows use the flowchart icon . To change the icon, you can click the Browse button to navigate to the icon file in your computer. Theme A theme is a group of visual settings that can be applied to an entire process flow. A theme can affect: The color of the background, activities, shared assets, tokens, etc. The styles of the connectors The font and style of the fonts The color and visual functionality of the containers (flow chart objects) See Changing Process Flow Visuals for more information. More Theme Settings Use the More Theme Settings button to open the Process Flow Visual Theme properties window. See Process Flow Visual Theme Properties for an explanation of its properties. Edit Mode The Edit Mode checkbox turns on and off the Edit Mode, which changes the Process Flow to be more user friendly for simply running a model. Turning Edit Mode off is mainly intended for use after creating a Process Flow. It will hide variables that are not set as User Accessible and it will make it so the default action when selecting a Process Flow is to open its properties window and not the model view window. Snap to Grid The Snap to Grid checkbox turns snapping to the grid on and off. By default, activities and display objects will automatically align to one another as they are being dragged. The grid offers an additional mechanism to neatly lay out objects. Show Grid The Show Grid checkbox displays or hides the grid. Always Stack Tokens If checked, tokens will always be displayed as a single stack of tokens with a number indicating how many tokens are in the stack. When not checked, tokens will be displayed side-by-side unless there is not enough room in the activity to display this way and then they will be displayed in a stack. Trace Histories Off If checked, trace histories for all activities will be turned off even if some activities are set to display them. Ticker-Based Event Management Check this box and define a tick interval to make the process flow use ticker-based event management instead of the standard event management. This can be useful in situations where there are many tokens (i.e. thousands+) that are processing events at a high rate. When there is a large population of tokens, and each token is creating events independently, sortation of the event queue can become very slow. Ticker-based event management can alleviate this issue. When using ticker-based event management, events that are created through the process flow will round their times up to the nearest \"tick\". Events in a given \"tick\" will be executed in the order that they were created. This can significantly save sorting time when there are a lot of events in the same tick. Ticker-based event management can be expecially useful in agent-based simulations, where there are large populations of agents, and the agents are updating their state, based on their environment, at regular time intervals. View Tokens You can click the View Tokens button to open a window where you can see an overview of all tokens during a simulation run. The View Tokens window shows the labels and details associated with all the tokens in the Process Flow. This is particularly useful for troubleshooting your process flow. See Troubleshooting Process Flows for more information. View Activities You can click the View Activities button to open window where you can see an overview of all the activities in your process flow. You can also use this window to change the statistics settings of the activities in the Process Flow and to set up tracing options, which can help with troubleshooting your process flow. See Troubleshooting Process Flows for more information. More Properties You can click the More Properties button to open additional general properties for this process flow. You can use this window to set the variables used in the Process Flow as well as visual settings, labels, and triggers."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ProcessFlowPanels/ProcessFlowInstances/ProcessFlowInstances.html",
        "title": "Process Flow Instances",
        "content": "The Process Flow Instances panel displays which objects are attached to this process flow. This properties panel is not available for General Process Flows. See Process Flow Instances for more information about instances and related concepts. The following properties are on the Process Flow Instances panel: Instance Creation The Instance Creation menu is only available on process flows that are using the Sub Flow type. This menu defines when the FlexSim system will create an instance of a sub flow. This can possibly affect whether shared assets (Resources, Lists, and Zones) are global or local to instances. The menu has the following options: Global - If this option is selected, there will only be one instance of a sub flow running at a time. All shared assets will be shared within that sub flow. Per Instance - In this context, an instance refers to an object that is running the sub flow. So, for example, if two processors are using the same sub flow, each processor would be considered a separate instance. By default, when you select this option all shared assets will be local to each instance, meaning they won't share assets. Per Block - You might have activity blocks that each have a Run Sub Flow activity in them. Each Run Sub Flow activity might be connected to the same sub flow. When this option is selected, each activity block that runs a sub flow would be considered a separate instance. By default, when you select this option all shared assets will be local to each instance, meaning they won't share assets. Per Token - When this option is selected, each token that runs inside the sub flow will be a separate instance. By default, when you select this option all shared assets will be local to each instance, meaning they won't share assets. Sharing Assets Between Instances Each shared asset (Resources, Lists, and Zones) has a Type menu in its Quick Properties. You can use this menu to control whether shared assets are global or local to instances. The menu has two options: Global - Shared assets will be globally accessible by all instances. For example, if you have a Resource with a count of 3, any instance that uses that Resource will deplete the total count. If one instance uses all three Resources, another instance won't be able to use it. Local - Shared assets will only be locally accessible to instances. For example, if you have a Resource with a count of 3, each instance will have a local copy of that Resource with a count of 3. When an instance uses a Resource will only deplete the local count. If one instance uses all three of its Resources, another instance will still have access to its three Resources as well. Attached Objects You will use the Attached Objects properties to add, remove, and display attached instance objects . These options are only available for the Sub Flow, Fixed Resource, and Task Executer types of process flows. See Types of Process Flows for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ProcessFlowPanels/ProcessFlowObject/ProcessFlowObject.html",
        "title": "Process Flow Object",
        "content": "The Process Flow Object panel displays which Object Process Flows an object is currently attached to. The following properties are on the Process Flow Object panel: Process Flow Class A dropdown of all the process flows the object is attached to. Button Explanation Attach the object to a new Object Process Flow. Detach the object from the flow currently selected in the dropdown list. Open Process Flow Properties Opens the properties window for the flow currently selected in the dropdown list. Open Process Flow View Opens a Process Flow view for the flow currently selected in the dropdown list."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/ProcessFlowPanels/ProcessFlowVariables/ProcessFlowVariables.html",
        "title": "Process Flow Variables",
        "content": "The Process Flow Variables panel displays a list of the flow's Process Flow Variables . The following properties are on the Process Flow Variables panel: Process Flow Variables The list of process flow variables defined for the flow. If this panel is showing on a flow's instance object then this list will only show user accessible variables."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/ASRS/ASRS.html",
        "title": "ASRS",
        "content": "The ASRS panel has options for controlling the ASRS's lift and extension. The following properties are on the ASRS panel: Lift Speed This number is how fast the lift on the ASRS vehicle moves up and down. Initial Lift Height This number defines the reset z location of the ASRS vehicle's platform. The platform returns to this height when the model resets. It also returns to this height when it is not traveling the offset of a load/unload task. Extension Speed This number controls how fast the extender of the ASRS vehicle moves when transporting flow items."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/Crane/Crane.html",
        "title": "Crane",
        "content": "The Crane panel has options for controlling the crane's lift and movement. The following properties are on the Crane panel: Travel Sequence Here you can specify the order in which the crane performs travel operations. Speeds Table Here you specify the max speed, acceleration and deceleration for each of the 4 operations the crane will do. Note that these operations only apply to offset travel. If the crane is connected to a network, then when it is on the network, only the normal maxspeed, acceleration and deceleration specified in the Task Executer tab will be used. Lift Height Here you define how high the crane will lift to get to its lift height. Lift Radius Specify a radius within which the crane will not do a lift operation. Frame X/Y/Z Location These numbers define the location of the crane's frame. Note that this is different than the cranes actual x/y/z location. The crane's x/y/z location describes the location of the moving part of the crane. The frame will be stationary throughout the simulation, while the actual x/y/z location of the crane changes as the crane travels. Frame X/Y/Z Size These numbers define the size of the crane's frame. Note that this is different than the cranes actual x/y/z size. The crane's x/y/z size describes the size of the moving part of the crane."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/Dispatcher/Dispatcher.html",
        "title": "Dispatcher",
        "content": "The Dispatcher panel controls how dispatchers handle task sequences. The following properties are on the Dispatcher panel: Pass To This property returns the output port number that the task sequence should be dispatched to. If 0 is returned, then the task sequence will be queued up using the below mentioned queue strategy, and then will be dispatched to the first available mobile resource. If -1 is returned, then the Dispatcher will do absolutely nothing. In such a case you would use the TaskSequence.dispatch () and TaskSequence.move () methods to execute dispatching logic yourself. Queue Strategy This property returns a \"priority\" value for the task sequence that is used to rank it in the object's task sequence queue. By default, it will simply return the priority value given to the task sequence when it was created, but the user can also customize task sequence priorities in this field."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/Operator/Operator.html",
        "title": "Operator",
        "content": "The Operator panel has options for controlling the operator's animations. The following properties are on the Operator panel: Do Animations When this box is checked, the operator object will use the default animations for this object. If you want to use your own custom animations, you should clear this box. Idle The animation that the operator will use when not performing a travel task. Walk The animation that the operator will use when performing a travel task and not carrying anything. Walk Loaded The animation that the operator will use when performing a travel task and carrying something."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/PersonVisuals/PersonVisuals.html",
        "title": "PersonVisuals",
        "content": "The Person Visuals panel has options for controlling the person's visual appearance. The following properties are on the Person Visuals panel: Randomize Randomize the person's appearance and clothing. Note that this will randomly change the person's shape, but will only pick between the two options: the current shape and the other shape of the same type. For example, if the person is currently using the Female Person/Staff shape it has a 50% chance of keeping that same shape and a 50% chance of changing to the Male Person/Staff shape. However, it won't randomly change to the Female Emergency shape. Copy To Selected This button is only available if the person is selected with a red box. Press the button to copy this person's visuals to all other selected person objects. Shape The base shape of the person. Generally this controls whether the person is an adult male, adult female, boy, or girl. However, the different adult shapes have different clothing options. Skin Texture The 2D texture file applied to the skin of the person. Most of these textures are based off scans of real people with a variety of skin tones. You can also apply a tint color to the texture image. Head The adult shapes (other than the two Operator shapes) each have two different heads to choose from. Hair / Hat Customize the hair or hat of the person. You can also apply a tint color to the hair or hat. Shirt Customize the shirt of the person. You can also apply a tint color to the hair or hat. If you want the shirt to match the person's object color click the drop down arrow and check the Object color checkbox. Pants Customize the pants of the person. Shoes Customize the shoes of the person. Facial Hair / Masks Customize the facial hair or mask of the person. Glasses Customize the glasses of the person. Gloves Customize the gloves of the person."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/Robot/Robot.html",
        "title": "Robot",
        "content": "The Robot panel has options for controlling the robot's movements. The following properties are on the Robot panel: Edit Geometry Pressing this button opens the Robot Geometry window. Motion Mode The robot responds to task sequences created by fixed resources much like the Crane object, more specifically the robot responds to FRLOAD, FRUNLOAD, TRAVELTOLOC and TRAVELRELATIVE task types. The robot has 4 modes of operation, each mode changes the way the robot responds to a task and more importantly how long it takes to perform the task. The properties that are below the Motion Mode menu will vary depending on which option you selected. Move Time - This is the default option. Here you define a move time explicitly with code. Simple Motion Method - This option allows you to provide a few basic speed inputs that determine the move time. Use Joint Speeds - Here you define a speed for each of the robot's joints. Define Motion Paths - The most flexible option, explained in the Robot Motion Paths topic. The Robot Geometry Window The Robot Geometry window has the following properties: Relative Speeds The options in this column control the relative speeds for each joint. Reset Position The options in the column control the position to which the robot will return on reset. Manual Positioning Trackers The sliders in this column control the current position of each joint. Open Gripper Width This option controls how far open the gripper is when it's open. Set Reset Position to current This option saves the current position of the robot as its reset position."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/TaskExecuter/TaskExecuter.html",
        "title": "TaskExecuter",
        "content": "The TaskExecuter panel controls how task executers handle flow items in the simulation model. The following properties are on the TaskExecuter panel: Capacity This number is the maximum number of flow items that the Task Executer can carry at a given time. Load Time This property returns how long it takes this Task Executer to load the flow item. Unload Time This property returns how long it takes this Task Executer to unload the flow item. Break to Requirement This field is executed when the Task Executer comes to a break task or callsubtasks task. The return value is a reference to a task sequence. The logic within this field should search the Task Executer's task sequence queue, and find a task sequence that is appropriate to break to. Fire OnResourceAvailable at Simulation Start If checked, the object's OnResourceAvailable trigger will be fired when the simulation starts."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/Transporter/Transporter.html",
        "title": "Transporter",
        "content": "The Transporter panel has options for controlling the transporter's lift speed and animations. The following properties are on the Transporter panel: Lift Speed This property determines how fast the lift raises and lowers. Allow Fork Movement During Travel When this box is checked, the transporter object will be allowed to move its forks while driving around. When this box is cleared, the transporter will wait to finish moving its forks before beginning driving. Do Animations When this box is checked, the transporter object will use the default animations for this object. If you want to use your own custom animations, you should clear this box."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TaskExecuterPanels/Travel/Travel.html",
        "title": "Travel",
        "content": "The Travel panel controls how task executers travel in the model. The following properties are on the Travel panel: Max Speed This is the fastest that the Task Executer can travel. Acceleration This number is how fast the Task Executer gains speed until it reaches its maximum speed or needs to slow down to reach its destination node. Deceleration This number is how fast the Task Executer loses speed as it approaches its destination. Flip Threshold When the angle between the Task Executer and the destination node meets or exceeds this value, the Task Executer will flip (mirror image) in order to be facing the correct direction. This option will not affect the statistics of the model if checked or unchecked. It is simply for visualization. Rotate If this box is checked, the Task Executer will rotate as needed in order to orient itself in the direction of travel. If the box is not checked, it will always face the same direction. This option will not affect the statistics of the model if checked or unchecked. It is simply for visualization. Navigator This specifies which Navigator the Task Executer object will use. If Navigator's are available in the model, they will be displayed in the drop down. To remove the Task Executer from using any Navigator, press the Remove button . Depending on what objects are in your model, various navigators may be available. Below is a list of those navigators and their purpose: None - When set to None, the Task Executer will do nothing during travel tasks. Some Task Executer classes will automatically connect to a different navigator on reset depending on their configuration and connections. For example, Operators will automatically connect to the DefaultNavigator if not connected to another navigator. DefaultNavigator - The Task Executer will execute travel tasks by moving in a straight line from their current position to the end position. They will also offset travel in a straight line to pickup flow items when necessary. DefaultNetworkNavigator - The DefaultNetworkNavigator is available when Network Nodes have been added to the model. Connecting a Task Executer to a NetworkNode using an A connection will automatically set their Navigator to be the DefaultNetworkNavigator. The DefaultNetworkNavigator will build a distance/routing table for all network nodes in the model. When a travel task is given to the Task Executer, the navigator will move the Task Executer from NetworkNode to NetworkNode along the shortest path to the final destination. AGVNetwork - The AGVNetwork is available if AGV paths have been added to the model. Task Executers using the AGVNetwork will travel along AGV paths based upon the properties setup in the AGV Network Properties. AStarNavigator - The AStarNavigator is available if the AStar Navigator has been added to the model. When connected to the AStarNavigator, the Task Executer will travel the shortest path from the current position to the final destination based upon any dividers or barriers that may be in the way. Travel offsets for load/unload tasks This box provides the following options: Travel offsets for load/unload tasks - If selected, the Task Executer will move to the exact point where the flow item is being picked up or dropped off. Do not travel offsets for load/unload tasks - If selected, the Task Executer will travel to the origin of the destination object and pick up or drop off the flow item there. In the case where the Task Executer is using networknodes to travel to the destination, it will travel to the networknode attached to the destination object and then stop there. Do not travel offsets and block space on network - This option only applies when the Task Executer is connected to a network of nonpassing paths. If selected, the Task Executer will arrive at the node, finish its travel, and while it is doing the load/unload operation, it will continue to take up space on the network, and block other transporters/operators traveling on the path. Use navigator for offset travel - If selected, the Task Executer will use the assigned Navigator for any offset travel tasks, such as travel-to-loc, travel-relative, and load/unload tasks."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/TravelNetworkPanels/TrafficControl/TrafficControl.html",
        "title": "Traffic Control",
        "content": "The Traffic Control panel has options for controlling the Traffic Control's connections. The following properties are on the Traffic Control panel: Mode This menu defines the method by which the object controls traffic. There are two options: Mutual Exclusion - Only allows a given number of travelers into the Traffic Control's area, regardless of which paths they are on. Untimed Traffic Modes - Used if you want to control traffic based on each individual path in the object's traffic control area. Click the Edit Traffic Modes button to open the Traffic Modes window. Max Travelers Mutual exclusion is used to only allow a given number of travelers into the Traffic Control's area, regardless of which paths they are on. Here you simply specify the maximum number value. Adjust Speeds as Content Increase If this option is checked, then the table will be used to adjust speeds of travelers within the traffic control object's area. Manipulating Speeds with Traffic Controls You can also use Traffic Controls to modify speeds of travelers as an area becomes more crowded. As the traffic control's content increases, entering travelers will modify their speeds based on the Traffic Control's speed table. For example, if you have entered a row in the table that is a 0.6 speed multiple for a content of 3, then as soon as the content of the traffic control's area becomes 3 or greater, all travelers' max speeds will be decreased to 60% of their normal max speed. Note that the speed change does not take effect until the traveler reaches its next node in the network. If you have an area with multiple traffic controls, then the minimum speed multiple of all of the traffic controls will be applied. Edit Network Nodes This button opens the Network Nodes window. The Traffic Modes Window Untimed traffic modes are used if you want to control traffic based on each individual path in the object's traffic control area. A mode is defined by one row in the modes table. For each mode you can define a set of paths between nodes in the traffic control area. When the traffic control is in a given mode, travelers are only allowed into the traffic control area if the path they are entering on is one of the paths defined in the current mode. The traffic control will stay in the same mode until there are no travelers left in the traffic control area, after which it will take the first traveler that arrives and find a mode that contains that traveler's requested entry path. This is why it is an un-timed mode. There is no limit on the amount of time that a traffic control may stay in the same mode. The Traffic Modes window has the following properties: Modes This is the number of modes, or rows in the table. Enter the number of modes you want, and click the Apply button, and the appropriate number of rows will be created. Entries This is the maximum number of From/To entries (or columns) that you will need for your modes. If some modes don't need all of the columns, just leave them blank. Search for Best Mode If this box is checked, then whenever the traffic control gets an entry request for an entry path that is not in its current mode, it will search through its modes to see if there are any other modes that include all paths already entered as well as the new path. If so, it will change to that new mode and allow the traveler's entry. Note that this may slow down the model, since the traffic control must search the table every time an entry request is made. Mode Table Entries The mode table has the following columns: Max_Nr - This value specifies a maximum number of travelers allowed in when the traffic control is in that given mode. It is much like the maximum number value in mutual exclusion mode. n_a - This value is reserved for future development, when timed traffic modes are implemented. From/To Entries - For each path of a mode, you specify the node from which the path extends, and the node to which the path extends. Enter the name of the nodes. Note that one entry describes only one direction of a node-to-node connection. Thus to specify both directions of a path, you will need to make two From/To entries, one in each direction. The Network Nodes Window The NetworkNode page of the traffic control object lets you edit a traffic control's connections to network nodes. The panel on the left shows all NetworkNodes that are connected to the traffic control object. Select one of these nodes, and the panel on the right will refresh to a new list of traffic controls. The panel on the right shows all traffic controls that are connected to the NetworkNode you have selected on the left. The traffic control you are editing will have an extra \" -- This TrafficControl\" text, letting you know how this traffic control is situated among other traffic controls. The ranking of traffic controls in the right panel can have a significant effect on the behavior of the network."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Light/Light.html",
        "title": "Light",
        "content": "The Light panel defines how the light shines. The following properties are on the Light panel: Type The type of light determines how the light affects the scene. Directional - Directional lights apply to each object from a single direction, like the sun. The rotation of the light affects the direction. The position and size of the light are unused. Point - Point lights emit from a specific point towards each object, like a lamp. The position of the light controls its origin. The rotation and size of the light are unused. Area - Area lights emit from a rectangular area in a specific direction. The position, rotation, and size of the light control its area of influence. In RTX Mode, the rectangular area is used directly. Out of RTX Mode, the center of the rectangle emits light in a radius influenced by the area of the rectangle. Range The range controls the distance that a point light influences. For an area light, this value is calculated based on the size of the light rather than directly edited. Directional lights have infinite range. Intensity The intensity controls the brightness of the light. The color of the light will be multiplied by the intensity value when calculating the influence of the light. Radius In RTX Mode, the source radius of a point light will affect the softness of shadows cast by the light. Greater values will make the shadows softer. A value of 0 will cast hard shadows. Angle In RTX Mode, the angular size (in degrees) of a directional light will affect the softness of shadows cast by the light. Greater values will make the shadows softer. A value of 0 will cast hard shadows."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/OmniverseLive/OmniverseLive.html",
        "title": "Omniverse Live",
        "content": "The Omniverse Live panel displays options for collaborative editing of USD stages on Nvidia Omniverse Nucleus servers. The following properties are on the Omniverse Live panel: Session Name Existing sessions can be chosen from the dropdown menu. To create a new session, type a session name into the field. Create If the specified session name doesn't exist, a Create button is available to create a new session with that name. Join If the specified session name does exist, a Join button is available to join the session with that name. Leave If you are currently connected to a session, a Leave button is available to leave the session and optionally apply changes from the live session to the original stage. Leave Session . This will leave the live session and reload the original stage, ignoring changes made in the live session. End and merge to root layer . This will leave the live session and apply any changes from the live session to the original stage's root layer. End and merge to new layer . This will leave the live session and apply any changes from the live session as a new layer within the original stage without modifying the original stage's root layer. Process Live Updates If you are currently connected to a session, live updates to the usd stage should automatically be sent to the server and received from the server. This button is available to explicitly send and receive those updates immediately. The Save button on the Stage Panel can be used to apply local changes from FlexSim to the stage and send those updates to the live stage."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Prim/Prim.html",
        "title": "Prim",
        "content": "The Prim panel displays options for working with prims within USD stages . To select individual prims, you must first check the Select Prims box on the Stage Panel . Clicking on a prim in the 3D view will then show this panel. The following properties are on the Prim panel: Name The prim's type and name as shown at the top of the panel. The name can be modified. Prim Path The prim's path in the usd hierarchy. To view the hierarchy in a tree view, press the tree button. Transform The prim's location, rotation, and size can be seen and modified. USD xforms A usd prim's transform is defined by a series of xform operations in a particular order. FlexSim reads those transformations as a single 4x4 transformation matrix, which it then decomposes into location, rotation, and size vectors. This may not work perfectly for all prims, depending on their configuration."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Stage/Stage.html",
        "title": "Stage",
        "content": "The Stage panel displays options for working with USD stages . The following properties are on the Stage panel: Path Browse to a usd file on disk or enter a destination path on an Omniverse Nucleus server. e.g., omniverse://127.0.0.1/Users/UserName/Folder/FileName.usd Save Save any modifications to the stage. Export As... Export the stage to a new usd file. Reload Reload the usd stage from its source file(s). This will overwrite any unsaved, local modifications to the stage and retrieve any changes made by other applications since the stage was loaded. Note: loaded textures are stored in FlexSim's media list, so if any textures used by the stage are unloaded from the media list, reloading the usd stage data will reload the textures into the media list again. Draw Plane To improve selecting and dropping objects onto a stage, a simple plane may be optionally drawn at the bottom of this object. Clear this box to stop drawing that plane. Factor . Define the polygon offset factor to use when drawing the plane. Units . Define the polygon offset units to use when drawing the plane. Draw Axis Lines A usd stage has defined coordinate axes and measurement units. Unless otherwise specified, a usd stage defaults to having a Y up axis and centimeter units. When this option is checked, axis lines will be drawn to show the scene's origin and direction. The red axis is X, green is Y, and blue is Z. Where the three axis lines cross is the origin of the usd stage. USD Stage Size and Location A usd stage's defined measurement units and the FlexSim model's length units are necessary for many of the advanced workflows of the USD Stage object. The USD Stage object cannot be arbitrarily scaled. Its prims will be rendered according to the actual size defined within the stage, based on the stage's units and the model's units. The FlexSim stage object's size does not affect how large the scene is drawn; it is drawn exactly the size defined in the stage. The USD Stage object's location will be the stage's origin point. If prims are defined far away from the stage's origin, then they will also be far away from the object's location in the model. If you want to adjust the scale of an imported usd shape, consider importing the usd shape on a regular object instead of using a USD Stage object. Alternatively, adjust the transforms of individual prims within the stage itself. Select Prims By default, the USD Stage object is treated as a single object. Check this box to be able to click individual prims drawn in the 3D view. Clear this box to interact with the stage itself as a single object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Text/Text.html",
        "title": "Text",
        "content": "The Text panel defines what text is displayed and how large it is. The following properties are on the Text panel: Text Display The text that will be displayed by the Text object. This can be a dynamic value like the current model time. Text Size The size of the text object. Thickness The thickness of the text object. Increasing this above zero will change the text object from a 2D display into a 3D text object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Texture/Texture.html",
        "title": "Texture",
        "content": "The Texture panel defines what texture is draw on the plane. The following properties are on the Texture panel: File Path The file path to a 2D image used to texture the plane. X Repeat The number of times the texture is repeated in the horizontal direction. Y Repeat The number of times the texture is repeated in the vertical direction. Divisions The number of sides to be drawn on a column or sphere shape."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Container/Container.html",
        "title": "Container",
        "content": "The Container panel includes properties for a Container object. The following properties are on the Container panel: Edit In Place Define whether to edit the container in place. When a container is set to edit in place, you can manipulate its individual contained objects as separate objects from the container. Editing Contents In a Separate View You can also edit the contents of a container by right-clicking on it and choosing View / Edit Contents . Connect Contents Select whether you can connect with individual contained objects. When this box is checked, connecting will allow you to select the individual contained objects to connect with. Fit Size To Contents Press this button to adjust sizes and locations so that the container properly surrounds its contained objects."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/VisualTool/VisualTool.html",
        "title": "Visual Tool",
        "content": "The Visual Tool panel defines what texture is draw on the plane. The following properties are on the Visual Tool panel: Visual Display Choose a shape for this visual tool. Plane Cube Column Sphere Imported Shape Text Presentation Slide Billboard Mode Select whether the object is in billboard mode. There are a few options: No Billboard - Turns off billboard mode. Vertical Billboard - The plane will rotate around the Z axis to always face towards the screen. All Around Billboard - The plane will rotate around 2 axes so that it is always facing directly towards the screen. Screen Locked Billboard - The object will not move when you navigate around the model and will instead stay locked to a certain position on the screen. Luminous Turns lighting effects off for this object which makes it appear to be emitting its own light. No Select The object will not be selectable in the model. Polygon Offset Factor/Units Only applicable in Plane mode (or as a model floor). This defines the polygon offset to use when drawing the plane. Polygon offset is used to resolve Z-fighting between objects. The Factor and Units values you specify are passed directly into glPolygonOffset() . Generally for a visual tool, you want to define a positive polygon offset. This means the depth buffer value will be increased, i.e. pushed away from the camera, allowing other geometry, like the floor grid, connectors, etc. to be drawn on top of the visual tool plane. This is why the default Factor/Units values are 1/1. If you want to fix z fighting across multiple visual tools, give them different offset values. For example, give one the default 1/1 value, and the other a 2/2 value. This will cause the 2/2 valued object to be drawn behind the 1/1 valued object. Pass Inputs/Outputs To If the object is used as a container for other objects, then the properties panel will show fields for passing the object's input/output connections to some contained object. Here you define the name of the target contained object. Then when you make input/output connections to/from the container, internal connections will also be created to the contained object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/VisualPanels/Wall/Wall.html",
        "title": "Wall",
        "content": "The Wall panel defines how the wall looks. The following properties are on the Wall panel: Color The color tint applied to the wall. Texture The file path to a 2D image used to texture the wall. X Pattern Repeat The number of times the texture is repeated in the horizontal direction. Y Pattern Repeat The number of times the texture is repeated in the vertical direction. Width The thickness of the wall. Height The height of the wall. Apply To All Walls Applies the current settings to all wall sections in the model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WarehousingPanels/AddressMapping/AddressMapping.html",
        "title": "Address Mapping",
        "content": "The Address Mapping panel defines how storage slots are addressed. The following properties are on the Address Mapping panel: Addressing Scheme The object's Addressing Scheme defines which of the Storage System's potentially multiple addressing schemes is applicable to this storage object. Note that you only need to define this property if your model accesses slots directly by their address, specifically using the Storage.system.getSlot() method. Start, Stride, and Progression For the object's bays, levels, and slots, you can define start, stride, and progression settings. These properties work in combination to enable unique addressing of the slots. The Start properties define the number (or letter) that is associated with the first bay/level/slot in the storage object. The Stride properties define how many addresses to skip over when progressing from a given bay/level/slot its next neighboring bay/level/slot. The Progression properties are used to define the direction in which the bays/levels/slots progress, relative to the storage object's local coordinate system. Below are some examples of how you might use these properties to properly define your addressing system. Distinguish Left and Right Side of an Aisle - In many warehouses, the left vs. right side of an aisle are distinguished by the even-odd-ness of the bay numbers. For example, even bay numbers may indicate that the shelf is on the left side of the aisle, while odd bay numbers indicate a shelf on the right side. To accomplish this, you give the storage object on the left side a Start Bay of 2, and a Bay Stride of 2. This means that the \"first\" bay in that object is numbered 2, the next bay is numbered 4, and so forth. For the object on the right side of the aisle, you give it a Start Bay of 1, and a Bay Stride of 2. This means that the \"first\" bay in that object is numbered 1, the next bay is numbered 3, and so forth. Thus you can define even bays on the left and odd bays on the right. Define Proper Bay Progression for Both Sides of an Aisle - The Bay Progression property allows you to make sure that bay numbers \"progess\" properly for storage objects on both sides of an aisle. As a picker travels down an aisle, the bay numbers on the right side should progress the same as those on the left side. However, if storage objects in an aisle are oriented so that their pick faces are directed into the aisle, the default Bay Progression setting (X+) causes their bay numbers to increase in opposite directions. Thus, by changing the Bay Progression of one of the storage objects in an aisle to X- , you can make the bay numbers increase in the same direction. Define Level \"1\" Above the Ground - In some warehouses, or in specific racks, you are not allowed to store items on the floor. Further, level \"1\" is the first level above the ground. In FlexSim, the \"first\" level of a storage object is at the base of the object, i.e. on the floor. Thus, to customize the object for this situation, first define all slots on this \"ground\" level as unstorable , then set the object's Start Level to 0. This means that the first level with storable slots, which is above ground, will be numbered 1. Zone ID The object's Zone ID defines the zone ID of the object, in relation to its address scheme. The Zone ID, in conjunction with the Aisle ID, allow you to uniquely address slots in a storage object. Aisle ID The object's Aisle ID defines the aisle ID of the object, in relation to its address scheme. The Aisle ID, in conjunction with the Zone ID, allow you to uniquely address slots in a storage object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WarehousingPanels/Flow/Flow.html",
        "title": "Flow",
        "content": "The Flow panel defines allows the storage object to be used as a Fixed Resource. The following properties are on the Flow panel: Use as Fixed Resource If checked, the object will perform fixed resource logic, receiving items through its input ports, and releasing items to exit through its output ports. The Input and Output panels will display when checked. Max Content This number defines how many flow items the rack will be allowed to hold at a given time. Minimum Dwell Time This field returns a value of how long a flow item must stay in the rack before it is released to continue downstream. You can also return a value of -1 from this function so the rack will not release the item at all, and then implement your own releasing strategy using the releaseitem() command."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WarehousingPanels/SlotLabelPainter/SlotLabelPainter.html",
        "title": "Slot Label Painter",
        "content": "The Slot Label Painter panel configures the label painter tool. The following properties are on the Slot Label Painter panel: Label Specify the name of the label to edit on each slot that is painted. Value Specify the value of the label to paint. The color block in this field indicates which color will be shown for this value. Mode Specify how big an area is painted while you paint labels. There are five options: Paint Individual Slots - Painting a slot will only affect that slot. Paint All Slots in Same Cell - Painting a slot will affect all slots that share the same cell. Paint All Slots at Same Level - Painting a slot will affect all slots that share the same level, across all bays of the Storage Object. Paint All Slots in Same Bay - Painting a slot will affect all slots that share the same bay, across all levels of the Storage Object. Paint All Slots in Same Object - Painting a slot will affect all slots that share the same Storage Object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WarehousingPanels/StorageObject/StorageObject.html",
        "title": "Storage Object",
        "content": "The Storage Object panel defines the look, layout, and filling logic of the storage object. The following properties are on the Storage Object panel: Edit Dimensions Opens the Dimensions window. Visualization The object's Visualization defines how a storage object should appear in the 3D view. Choose from a list of pre-defined (or custom-defined) visualizations that are defined on the Storage System in the toolbox. Slot Assignment Strategy The Slot Assign Strategy is evaluated when a flow item arrives in a storage object and must be assigned a slot. Note that the slot assignment strategy is evaluated only if a flow item is placed into the storage object without having been assigned a slot. If the flow item has already been assigned a slot, through setting the Storage.Item.assignedSlot property, then that assigned slot will take precedence and the slot assignment strategy will not be evaluated. Slot Stacking Order The Slot Stacking Order defines how items will be stacked within an individual slot. The user can define one or more axes by which to stack items. The items will be stacked in the order of the axes defined. Example settings are shown below. Slot Stacking Order Sample X+ >> Y+ >> Z+ Z+ >> X+ >> Y- Note that the slot stacking order is only visible on Racks and Floor Storage objects. For Gravity Flow Racks, Push Back Racks, and Drive-In Racks, the stacking order is inherent in the nature of the rack type. The Dimensions Window The Dimensions window lets you define the dimensions of the slots that make up the storage object. Bay, level, and slot sizes and counts can be defined individually or across the entire object. The main pane at the top of this tab displays the dimensions of the bays, levels, and slots as they appear when facing the object's pick face . There are also color-coded numbers showing bay, level and slot numbers. The set of color coded controls below the main pane display inputs for defining various widths, heights, and counts. If you have not selected any specific cells in the main pane, then any inputs you define will apply across the entire object. If, on the other hand, you select specific cells, then the inputs you define, if applicable, will apply to the specific cell(s) you have selected. To select a specific set of cells, just press the mouse button at the top corner of the target area, and drag the cursor to the bottom corner. This will select the set of cells contained within the encompassed area. The following properties are on the Dimensions window: Number of Bays/Levels/Slots Defining the number of bays/levels/slots will change how many bays/levels/slots should be in the selected set of cells, or in the entire object. Bay Width / Level Height / Slot Width You can also change the corresponding sizes of bays, levels, or slots through their corresponding input controls at the bottome of the window. Storable Slots You can also make a set of cells \"unstorable\" by clearing the Storable Slots checkbox. When a slot is not storable, the pane will show a red X over that slot. You cannot assign items to that slot, and it will be excluded by default from slot searches that are done with the Storage.system.findSlot() method. Slot Padding Pressing the Slot Padding button on the right will expand a pane of controls for defining the padding of slots. A slot's padding defines how much space on the edges of a slot cannot be used for item storage. You can individually define the amount of padding for all 6 sides of your slots."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WarehousingPanels/StorageOptions/StorageOptions.html",
        "title": "Storage Options",
        "content": "The Storage Options panel defines some extra options for the storage object. The following properties are on the Storage Options panel: Mark Slots with Outbound Items This checkbox will highlight slots that have outbound items in a red color. Virtualize Items If this box is checked, entering items will be virtualized . Essential label values and visual properties will be preserved, but the main item will be destroyed. The item will be recreated the next time it is accessed. Extend Columns If this box is checked, the object's support columns will be drawn extending above the top shelf. This property is not applicable with Floor Storage objects. Shelf Tilt Amount This number defines the amount of tilt of items placed in a given slot of the rack. This mostly used in Gravity Flow and Push Back Racks, products slide down from the back of the rack to the front. This property is not applicable with Floor Storage objects. Pick/Place Y Offset This value is used to configure how close transport objects come to the storage object when they drop off or pick up flow items from the rack. This is especially useful if operators are used to drop off and pick up from the rack, because often they will walk into the middle of the rack to get a flow item. Specify a value of 1, for example, and the operators will keep better distance from the rack when dropping off and picking up flow items. This property is not applicable with Floor Storage objects. Flow Speed Flow Speed is only visible on Gravity Flow or Push Back Racks. This property defines the speed by which items flow down the rack. Unless using fixed resource logic , this property is purely for animation purposes, and does not affect model results. Drive Through Drive Through is only visible on Drive In Racks. This checkbox will cause items to be filled from on side and picked on the other."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/CaptureView/CaptureView.html",
        "title": "Capture View",
        "content": "The Capture View panel allows you to save the currently displayed view with a specified resolution. The following properties are on the Capture View panel: Width Specify the desired resolution for the width of the screen capture. Height Specify the desired resolution for the height of the screen capture. Capture View Saves the currently displayed view with the specified resolution."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/Floors/Floors.html",
        "title": "Floors",
        "content": "The Floors panel allows you configure ranges of Z positions that represent a floor in order to make multifloor models more manageable. The following properties are on the Floors panel: Show/Hide Floors The top \"eye\" button will show/hide all objects on all floors. The other eye buttons will show/hide all objects on the corresponding floor. No Select Floors The top \"lock\" button will toggle the No Select flag of all objects on all floors. The other lock buttons will toggle the No Select flag of all objects on the corresponding floor. Add Floor Adds another floor. Floor Z Defines the bottom Z position of the current floor. This floor will contain all object between this Z position and the Z position of the floor above it. Set Grid Z Sets the view's Grid Z to the Floor Z of the corresponding floor. Remove Floor Removes the corresponding floor."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/FollowObject/FollowObject.html",
        "title": "Follow Object",
        "content": "The Follow Object panel allows you to set the 3D view to follow an object. The following properties are on the Follow Object panel: Object Set or clear the object to follow. Rotate with Object When checked, the view will rotate with the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/ModelParameterTable/ModelParameterTable.html",
        "title": "Model Parameter Table",
        "content": "The Parameter Table panel allows you to switch between different Parameter Tables in the model and toggle their Edit Mode. The following properties are on the Parameter Table panel: Name Combobox This contains the parameter table's name and has a list of all of the model's Parameter Tables. You can view other Parameter Tables in this window by clicking the dropdown arrow next to the name. Edit Mode The Edit Mode checkbox is checked by default. When checked, all data in the table can be selected and edited. When the checkbox is cleared, the Name, Display Units, and Description columns cannot be edited. Unchecking the Edit Mode box also disables the Row Edit options, and disables the dropdown in the value columns. When Edit Mode is disabled, only the values in the Value column can be edited."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/Node/Node.html",
        "title": "Node",
        "content": "When a node is highlighted in the tree, the Node panel will appear, displaying rank of the node. The following properties are on the Node panel: Rank This specifies the rank of the highlighted node in its parent's tree. Enter a new rank number or use the up and down arrows to rerank the node. Data If the node has coupling data, the Data field will display the coupling's associated node. Use the Sampler button to select the node to create a coupling with. Clear Contents Destroys all subnodes of the highlighted node. Execute Node Calls nodefunction or executefsnode on the node, executing its associated FlexScript, C++ or DLL code."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/ObjectCreation/ObjectCreation.html",
        "title": "Object Creation",
        "content": "The Object Creation panel allows you create new objects similar to other existing objects. The following properties are on the Object Creation panel: Use Same Properties As Choose the Object you want to copy properties from when creating a new object. This object must be of the same class as the one you're creating. You can either sample an object in the model or you can pick from a list of recently chosen objects. Create as Template Instance When checked, created object will be a template instance of the reference object chosen in the field above instead of just copying the values of that object's properties."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/Search/Search.html",
        "title": "Search",
        "content": "The Search panel allows you to search the model for specific objects. The following properties are on the Search panel: Name Filter the Objects list by name. Only those objects whose name contains the characters (case insensitive) in this field will be listed. Filter More filters can be added to narrow down the list of objects by pressing the button. Class - Filter by object class or by the group of classes in a library group. Only those objects that match the selected class will be shown in the list. Container - Only show objects that are inside the specified container. Includes all descendants. Group - Only show objects that are inside the specified group. Includes all descendants. Level - Only show objects that are inside the specified object. Does not include objects after the first layer of subnodes. Objects A list of objects in the model after applying any filters above. Selecting an object in the list will cause the view to center on that object. - Refreshes the list of objects. - Centers the view on the object, highlights it, and displays its properties. - Selects the object(s) in red."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/Table/Table.html",
        "title": "Table",
        "content": "The Table panel provides a graphical interface for editing Global Tables and other Tables and doing many of the things that can be done programatically through the Table FlexScript API . The following properties are on the Table panel: Name Combobox This is the table's name and has a list of all of the model's Global Tables. The name should be memorable and describe the table's function. The commands to read and write to global tables access them by name. You can view other Global Tables in this window by clicking the dropdown arrow next to the name. Rows Change the number of rows in the table. Columns Change the number of columns in the table. Use Bundle If this box is checked, the internal data type of the table will be changed to bundles. See Bundle Data . Buttons - This button adds the table as a row in the Excel Importer or Excel Exporter. - Pins the entire global table to a dashboard as either a table of values, bar chart or line graph. - This button lets you add this table to a user library as either a draggable icon or as a component for automatic install. On Reset Trigger The On Reset trigger gives you the ability to define what happens to the table's data when the model is reset. This could be clearing all cell data, delete all rows, or some other custom defined behavior. Go To Scrolls the table view to show the specified row and column. Description This text box allows you to document your model by writing a description of the table. Here you can explain the purpose and organization of your table. Other Tables When editing a table or array that is not a Global Table, some options in the panel will not be available."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/TestQueries/TestQueries.html",
        "title": "Test Queries",
        "content": "The Test Queries panel allows you to test out pull queries before implementing them in the simulation logic. The following properties are on the Test Queries panel: Query This field allows you to test out various queries on the list. Enter the query you want to use and click out of the text box to update the list view.Use the button on the right for help in forming the query. The table view will update based on the query you define, filtering and prioritizing the entries as dictated by the query. Puller Use this field to define who the puller is. Some of the fields in the view will show Puller Required , meaning that the value for that field is dependent on who is pulling from the list. Press the button on the right, then click on an object in the model to define the puller. Puller-dependent fields in the list will update to be based on the puller you define."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/TreeNavigation/TreeNavigation.html",
        "title": "Tree Navigation",
        "content": "The Tree Navigation panel allows you to navigate between sections in the FlexSim Tree and save shortcuts to frequently used parts of the tree for easy reference . The following properties are on the Tree Navigation panel: Views List Model - A subset of the main tree, this contains all of the objects used in the currently open model. Main - The main tree contains many of the higher level functions in FlexSim. View - The view tree contains all of the GUIs in the FlexSim interface. Button Explanation Captures the current view and adds that node to the list of preset views. Saving a view allows you to quickly jump back and forth between different sections of the tree. Updates the currently selected saved view to point to the current tree location. Removes the selected view from the list. Views that are saved are persistent even after FlexSim closes. Views that are added from the Model get saved into the Tools/TreeNavigation folder and will be available to anyone who loads that model. Views that are added from anywhere else in the main tree or from the view tree are saved in the User Prefs and will be available whenever FlexSim is open under your user. Rename the preset view by entering a new name in the name field. Name Width Controls the name width of nodes in the tree."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/TreeSearch/TreeSearch.html",
        "title": "Tree Search",
        "content": "The Tree Search panel allows you to search through text and node names in the FlexSim Tree . The search will begin at the highlighted node in the active tree window. If no node is highlighted, the search will begin at the top of the active tree window. The search recursively searches through all subnodes and object attribute nodes. Replace allows you to replace all occurrences of the found text. This can be applied to text and/or node names. The following properties are on the Tree Search panel: Find Finds the specified text (or press the Enter key in the field). Replace Finds the above text and replaces it with the specified text (or press the Enter key in the field). Search text Searches through all text under the selected node. Match Whole Word If checked, only finds whole word matches of the text (meaning characters immediately before and after the search text must be non-alphabetic characters). Search names Searches through all node names under the selected node. Match Whole Name If unchecked, the search will return any node name that contains the searched text. Match Case If unchecked, the search will find all text/names containing the search text, regardless of capitalization. For example, if you search for \"myvariablename\", the results will still return all nodes containing \"MyVariableName\". The Find Results Window Once a search is begun, the Find Results window will appear: Double-click on a result to view the text in a Code Editor window. You may also right click the result to Edit Code or explore the tree. Nodes toggled as FlexScript will have an S to the left of the node path. Nodes toggled as C++ will display a C and nodes toggled as DLL linked will display a D."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/Views/Views.html",
        "title": "Views",
        "content": "The Views panel allows you to save shortcuts to frequently used parts of the model for easy reference. The following properties are on the Views panel: View Name Rename the selected view by typing a new name in this field. View List Select a view from the list to rotate/move to that view. Buttons Button Explanation Captures the current view Updates the currently selected view to the camera's current position/rotation Removes the selected view from the list Other Ways to Access Views Views can also be accessed through the right-click menu."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/ViewSettings/ViewSettings.html",
        "title": "View Settings",
        "content": "The View Settings panel provides options for customizing the 3D view. The following properties are on the View Settings panel: Mode This option gives you two view setting presets. Switching to Presentation mode turns off Connections, the Grid, and Object Names. Perspective Projection This option toggles the 3D view from being a Perspective View, to displaying as an Orthographic View. The Perspective View looks more real-world. Where as the Orthographic view has no depth. Show Connections If this box is checked, the ports and port connection lines will be displayed in the view window. Hiding these connections often makes it easier to see what is happening in the model. If a model is slowing down, often un-checking this box can help speed it up. Show Grid If this box is checked, the grid will be drawn in the view window. Snap to Grid If this box is checked, objects will automatically move to the nearest grid line when they are moved in the model. This is useful for placing objects in precise locations. Resizing of objects will also snap to the grid if this is checked. Snap to Background If this box is checked, objects will automatically move to the nearest background snap point of the first model background object when they are moved or resized in the model. 1st Person If this box is checked, the view window's mouse controls will be in first person mode. This means that the view will rotate around the user's view point, and not around a point in the middle of the screen. This mode is most useful when navigating in fly-through mode. Ignore Objects If this box is checked, the user will not be able to click on any objects in the view window. This is useful for navigating around a model that is completed, as the user will not be able to accidentally move any objects. VR Mode Checking this box will cause the view to be rendered on a connected virtual reality headset. FlexSim works with Oculus Rift and HTC Vive VR headsets. The view will also render and handle inputs from VR motion controllers (Oculus Touch or HTC Vive controllers) if this box is checked. If you are using an Oculus Rift, ensure that Unknown Sources is checked in your Oculus Settings. RTX Mode Checking this box will cause the view to be rendered using Nvidia's OptiX ray tracing engine. This rendering mode is only available using 64-bit FlexSim on compatible Nvidia graphics cards and drivers. Nvidia RTX graphics cards (Turing architecture) have RT cores that improve the performance of RTX Mode. Some older Nvidia graphics cards (such as Maxwell, Pascal, and Volta architectures) can work with RTX Mode with lower performance. Stability RTX Mode uses graphics technology that is still being developed, tested, and improved. Save your work before enabling RTX Mode to avoiding losing progress in the event of a crash. Performance RTX Mode performance is primarily determined by the resolution of the 3D view. If you are using a large monitor resolution, you may want to make the 3D view smaller in order to improve the framerate of the view while you are testing your model in RTX Mode. Once your model looks good, you can use the Capture View or Video Recorder features to capture screenshots or video of your model at high resolutions in RTX Mode. RTX Benefits Improved shadows. All of the scene's light sources (including point source lights) can cast shadows, and the resolution of the shadows is not determined by rendering the scene multiple times into cascading shadow map textures. Each light can cast realistic hard or soft shadows depending on its settings. Unlimited light sources. RTX Mode can use any number of light sources, although performance will decrease as the number of lights increases. Order-independent transparency. Transparent meshes do not have to be drawn after other meshes when using RTX Mode, and the order of the triangles within a translucent mesh does not affect how it is rendered. Global illumination. In RTX Mode, indirect lighting is calculated based on light bouncing off surfaces rather than estimated with a global ambient light color. This provides for more realistic looking shadows on surfaces that are not directly lit by light sources. Reflections. Meshes can use reflectivity to mirror the environment around them. RTX Limitations Only triangles. RTX Mode currently only renders meshes drawn with GL_TRIANGLES. Other draw modes, such as lines and points, are not supported. Slow bone animations. In RTX Mode, bone animations are currently being calculated on the CPU rather than in a vertex shader on the GPU. This causes models with bone animations to run slower in RTX Mode than with the default shader rendering. RTX Future Improvements RTX Mode is currently using a material shading technique that is similar to FlexSim's default shaders. Future improvements could include physically based materials, refraction, and other ray tracing techniques. Sync Views If this box is checked, all open view windows will be updated at the same time. If it is not checked, some windows may not be updated until an action is completed in a different window. Checking this box may cause the program to run a little slower. Grid Z Changes the z position of the grid to more easily create multi-floor models. Objects added to the model will be placed at this z position."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/PropertiesPanels/WindowPanels/ViewStyle/ViewStyle.html",
        "title": "View Style",
        "content": "The View Style panel provides additional options for customizing the 3D view. The following properties are on the View Style panel: Name Style The first dropdown list allows you to choose whether names and stats are shown or hidden in the 3D view. The second dropdown list allows you to choose where the name of the object will be drawn. Choose either below the object or above the object. Color Scheme These presets modify the 3D view colors. Background Color This option lets you select the color of the view window's background from a standard Windows color-choosing dialog box. Connections Color This value sets the color of the connector lines in the view. Grid Line Color This value sets the color of the grid lines. Names Color This value sets the color of object names displayed in the 3D view. Connector Size This number sets how large the port connectors are on the object. Grid Fog This value lets you have the view's grid fade into the background color as it gets further from the viewpoint. Usually this is only useful on a perspective view. Set the value between 0 and 1, 0 meaning no fade, 1 meaning full fade. View Fog This value sets the view's fog value. View fog causes objects that are far away from the camera position to fade into the background color. Set the value between 0 and 1, 0 meaning no fog, and 1 meaning complete fog. This is usually only applicable to a perspective window. Ambient Light Color This value sets the color of light that is applied to all faces equally regardless of location. Light Sources The dropdown list contains all of the light sources that are currently in the view window. Button Explanation Creates a new light source in the view Opens the Light Source Editor for the light currently showing in the dropdown list. See Light Source Editor for more information on editing light sources Deletes the light source currently showing in the dropdown list. There must always be at least one light source in the model Save Settings as Default As described above, 3D View Settings are not saved and will be lost when the 3D view is closed. This will save your current View Settings as default for any new 3D views that are opened."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/TaskSequences/TaskSequenceConcepts/TaskSequenceConcepts.html",
        "title": "Task Sequence Concepts",
        "content": "Custom Built Task Sequences You can create custom task sequences using 3 simple commands: TaskSequence.create () TaskSequence.addTask () TaskSequence.dispatch () First, create a task sequence by using TaskSequence.create(). Then add tasks to the task sequence by successive addTask() commands. Finally dispatch the task sequence with dispatch(). The following example tells a forklift to travel to an object, referenced as \"station\", then load a flow item, referenced as \"item.\" TaskSequence ts = TaskSequence.create(forklift, 0, 0); ts.addTask(TASKTYPE_TRAVEL, station); ts.addTask(TASKTYPE_LOAD, item, station, 2); ts.dispatch(); The TaskSequence.create() command takes three parameters. The first parameter is the object that will handle the task sequence. This should be a dispatcher or task executer object. The second and third parameters are numbers, and specify the task sequence's priority and preempting values, respectively. The command returns a reference to the task sequence that was created. The addTask method add a task to the end of the task sequence. Each task that you add has several values associated with it. First, it has a type value, which defines what type of task it is. It also has a reference to two involved objects for the task, referred to as involved1 and involved2. These involved objects and what they mean depend upon the task type. For some task types both involved parameters are needed and have meaning, whereas for others, the involved objects are not used. Some task types may use one involved object, and some have involved objects which are optional. Refer to the documentation on task types for information on what a specific task type's involved objects represent. The task can also have up to four additional values. These are task variables, referred to as var1, var2, var3, and var4. Again, their meaning depends on the task type . For the load task below, notice that var1 was specified as 1. For a load task, this specifies the output port through which the item will leave the station. The addTask command takes two or more parameters, which specify the task's values. The first parameter is a reference to the task sequence into which the task is inserted. The second is the type of task. This can be chosen from an enumerated list of task types . The third and fourth parameters reference the two involved objects. If a specific involved object is not used or is optional for a task type, then you can simply pass NULL into the addTask method, or even leave that parameter out if there are no number variables that you need to specify either. The fifth through ninth parameters are optional, and define var1-var4. By default, these values are zero. Optional Parameters Even though many of the parameters of the addTask method are technically optional, depending on the task type, you will still need to specify them. Also, parameters need to still be specified in their correct order. If, for example, you want to specify var1 of the task, but don't care what involved1 or involved2 are, you will still need to pass the NULL value into parameters 3 and 4, even though they are optional, in order to correctly pass var1 in as parameter 5. Task Sequence Preempting Every task sequence has a preempting value. Preempting is used to break a task executer away from its current operation to execute a more important operation. For example, operator A's most important responsibility is to repair machines. When there are no machines to repair, however, it should also transport material throughout the model. If a machine breaks down while operator A is in the middle of transporting a flowitem somewhere, then the operator should stop whatever he is doing and repair the machine, instead of finishing the transport operation. To do this, you will need to use a preempting task sequence to break the operator away from his current operation. To create a preempting task sequence, specify a non-zero value in the preempt parameter of the TaskSequence.create() command. TaskSequence.create(operator, 0, PREEMPT_ONLY); There are four possible preempt values. These values tell the task executer what to do with the original task sequence(s) that have been preempted. 0 - PREEMPT_NOT - This value is non-preempting. 1 - PREEMPT_ONLY - If a task sequence has this value, then the task executer will preempt the currently active task sequence and put it back in its task sequence queue to be finished later. When a task sequence is preempted, it is automatically placed at the front of the task sequence queue. When the task executer eventually comes back to the original task sequence, the current task in that task sequence will be done over again, since it was not finished. Also, you can specify a series of tasks to do over again when it comes back to the task sequence using the TASKTYPE_MILESTONE task. This preempt value is the most common used. 2 - PREEMPT_AND_ABORT_ACTIVE - If a task sequence has this value, then the task executer will stop the currently active task sequence and destroy it, so that it will never come back to that original task sequence. 3 - PREEMPT_AND_ABORT_ALL - If a task sequence has this value, then the task executer will stop the currently active task sequence, destroy it, and destroy all task sequences in its task sequence queue. To query or change the preempting and/or priority values of a task sequence, you can use the getpreempt(), setpreempt(), getpriority(), and setpriority() commands. For more information on these commands, refer to the Commands Helper. Interaction Between Multiple Preempting Task Sequences If a task executer is currently working on a preempting task sequence, and it receives a new task sequence that is also preempting, it will use the priority value of the task sequence to determine which task sequence to do. If the priority value of the new task sequence is higher than the priority value of the one it is currently working on, the task executer will preempt its current task sequence and execute the new one. If the priority value of the new task sequence is less than or equal to the priority of the task sequence it is currently working on, then the task executer will not preempt the active task sequence, but will queue up the new task sequence just like any other task sequence it receives. If it must queue up the task sequence, it will not take the preempt value into account for its queueing logic unless you explicitly tell it to in the queue strategy. Queueing a Preempting Task Sequence If a preempting task sequence does not actually preempt a task executer, then it will be queued up like any other task sequence. If you want to have preempting task sequence be brought to the front of the queue, then either make your preempting task sequences have higher priority than all other task sequences, or take preempting into account in the queue strategy. Preempting Travel Tasks on Networks with Traffic Controls Preemption can have some undesirable side effects if a task executer is traveling along a network with TrafficControls when the preemption happens. If preemption occurs when a task executer is traveling along a network edge, then the task executer will be \"taken off\" that edge and connected in an \"inactive\" travel state (the red line) to the next network node he would have arrived at had he finished traveling the edge. If the network node is a member of a traffic control whose area starts at that node (in other words, the task executer wasn't in the area yet when he was preempted), then the task executer will be \"forced\" into the traffic control area, meaning this may cause the number of objects in the area to exceed the maximum for that traffic control area. To avoid this, special logic has been added to the task executer's preemption mechanism, so that if he is preempted from a travel task directly to another travel task, then instead of being taken off the edge and connected to the next node, the preemption will call redirectnetworktraveler(), which will essentially keep him traveling as he was before on the edge, but his final destination will be changed so that when he arrives at the end of the edge, he will continue on a new path to the new destination. Note that this will only happen if the preemption mechanism can detect that the first durative task that the task executer will perform after the preemption is another travel task. By durative we mean any task that will take some amount of time to perform. The following tasks are durative: TASKTYPE_TRAVEL TASKTYPE_LOAD TASKTYPE_UTILIZE TASKTYPE_DELAY Whereas the following are not: TASKTYPE_SETNODENUM TASKTYPE_TAG TASKTYPE_MOVEOBJECT TASKTYPE_SENDMESSAGE TASKTYPE_NODEFUNCTION If the preemption detects that the next durative task is not a travel task, then it will take the task executer off the edge as described above, in which case the task executer may be forced into a traffic control area. Preempting With Dispatchers If a preempting task sequence is given to a dispatcher, the dispatcher will not consider the preempt value of the task sequence unless you explicitly tell it to. If the dispatcher is set to dispatch to the first available task executer, then it will do just that, and not send the preempting task sequence immediately to a task executer. If you want the dispatcher to dispatch preempting task sequences immediately, then you will need to specify such logic in its Pass To function. A task executer may be connected back to a dispatcher by dragging an A-connect from the task executer to the dispatcher. If this is done, then when the TaskExecuter receives a preempting task it will pass its current task back to the dispatcher. The dispatcher will then redistribute that task according to its dispatching logic. Tasks returned to the dispatcher in this manner are returned in their current state so that the next task executer will begin where the previous task executer left off. This may cause some odd behavior that you should take into consideration when assigning preempting tasks. For example, if a task executer is traveling with an item when it is preempted, the task executer that receives this task will perform the travel and unload tasks without ever picking up the item from the first task executer. Instead, the item will \"magically\" appear at the right location when the unload completes. In order to prevent these odd behaviors you may want to query the task executer's state to determine if it is in a \"preemptable\" state (as you define it) before assigning the new task. Coordinated Task Sequences Coordinated task sequences are a deprecated feature of FlexSim. We advise that you use Process Flow for the coordination of multiple task executers. The documentation below is included for legacy support. Coordinated task sequences are used for operations which require sophisticated coordination between two or more task executers. These task sequences implement concepts like allocation and de-allocation of task executers, as well as synchronizing several operations being done in parallel. Commands Coordinated task sequences are built and dispatched using a set of commands which are mutually exclusive from the default task sequence commands. The commands for coordinated task sequences are as follows. createcoordinatedtasksequence() insertallocatetask() insertdeallocatetask() insertsynctask() insertproxytask() dispatchcoordinatedtasksequence() createcoordinatedtasksequence The createcoordinatedtasksequence command takes one parameter, namely a reference to an object. This object is designated as the task coordinator who holds the task sequence, as well as coordinates the tasks. The task coordinator can also be one of the objects that is allocated within the task sequence. It can be any dispatcher or task executer object. Note that selecting a task coordinator doesn't mean allocating that task coordinator. A task coordinator can be coordinating any number of coordinated task sequences at any one time. Also, unlike regular task sequences, coordinated task sequences are not queued up. The task coordinator will start executing the coordinated task sequence immediately when you dispatch it, no matter how many other coordinated task sequences it is coordinating. insertallocatetask The insertallocatetask command takes four parameters. The first is the task sequence. Second is the task executer or dispatcher to give an allocated task to. When the task coordinator gets to an allocate task, it will actually create a separate task sequence with an allocated task in it, and pass that task sequence to the specified task executer or dispatcher. In the case that it is a dispatcher, meaning you want to allocate any one of several task executers, then you can use the return value of this command as a key to reference the specific one that gets allocated, since you don't know exactly which one it is at the time that you build the task sequence. The third and fourth parameters are the priority and preempting values of the separate task sequence that will be created. The fifth parameter is optional, and specifies whether the task is blocking. By default (0), the task is blocking. If 1 is passed in, then the task will not be blocking. insertproxytask The insertproxytask command is similar to the addTask method, with one parameter, the second, added. The second parameter specifies which allocated object you want to do the task. As the task coordinator is the one actually executing the task sequence, once he gets to a proxy task, he will instruct the allocated object to do the task by proxy. Notice that for involved1 and involved2, you can either pass in a key or a straight reference to an object. insertsynctask The insertsync task halts execution of the task sequence until a specified task, referenced by its key, is finished. It takes two parameters: the task sequence, and a key value of a given proxy task. It is important to note that proxy tasks which are specified for different task executers, by default, will be done in parallel, unless a sync task is specified, whereas proxy tasks given to the same task executer will automatically be done in sequential order, without the need for a sync task. insertdeallocatetask The insertdeallocatetask command de-allocates a specific task executer, referenced by its key. The first parameter references the coordinated task sequence. The second parameter is the allocation key for the resource you want to de-allocate. The third parameter is optional, and specifies whether the task is blocking. By default (0), the task is blocking. If 1 is passed in, then the task will not be blocking. The above code creates a coordinated task sequence that organizes the two task sequences, as shown in the diagram below. Coordinated Task Sequence Example A team of three operators share two forklifts. An operation needs one operator and one forklift. The operator should travel to the forklift, and the forklift should then move the operator into itself. Then the forklift should travel to the load location, pick an item, then travel to an unload location and drop off the item. Then the forklift should travel to its parking location, and unload the operator. Doing this using simple task sequences would be very difficult, because it deals with two different resources that work in a very coordinated fashion. Coordinated task sequences make this example much easier to simulate. The diagram below illustrates the two task sequences that need to be done for the forklift and operator. Notice that there are some parts where one resource needs to wait and do nothing while the other operates. Code The code to build the task sequence would be written as follows. It is assumed that references called operatorteam and forkliftteam have been established. These reference dispatchers to three Operator objects, and two Transporter objects, respectively. References have also been established for a loadstation from which to load, an unloadstation to unload to, and the item. treenode ts = createcoordinatedtasksequence(operatorteam); int opkey = insertallocatetask(ts, operatorteam, 0, 0); int forkliftkey = insertallocatetask(ts, forkliftteam, 0,0); int traveltask = insertproxytask(ts, opkey, TASKTYPE_TRAVEL, forkliftkey, NULL); insertsynctask(ts, traveltask); insertproxytask(ts, forkliftkey, TASKTYPE_MOVEOBJECT, opkey, forkliftkey); insertproxytask(ts, forkliftkey, TASKTYPE_TRAVEL, loadstation, NULL); insertproxytask(ts, forkliftkey, TASKTYPE_LOAD, item, loadstation); insertproxytask(ts, forkliftkey, TASKTYPE_TRAVEL, unloadstation, NULL); insertproxytask(ts, forkliftkey, TASKTYPE_UNLOAD, item, unloadstation); insertproxytask(ts, forkliftkey, TASKTYPE_TRAVEL, forkliftteam, NULL); insertproxytask(ts, forkliftkey, TASKTYPE_MOVEOBJECT, opkey, model()); insertdeallocatetask(ts, forkliftkey); insertdeallocatetask(ts, opkey); dispatchcoordinatedtasksequence(ts); About the Above Example There are some model maintenance issues involved here. For example, if you happen to stop and reset the model while the operator is inside of the forklift, you will need to move the operator out of the forklift and back into the model from a reset trigger. Also, whenever you move the operator back into the model, you will need to set its location appropriately, since it is transferring between two different coordinate spaces. Things to Remember The first thing you must do before giving any resource proxy tasks is to allocate that resource. You must get the key back from each allocate task, because you will use it later. The insertproxytask command takes a key for the executer of the proxy task. This is the key that the allocation task returns. You also will use this key when de-allocating the object. While all proxy tasks for the same allocated resource are executed in sequence, proxy tasks for different allocated resources are executed in parallel, unless you explicitly put blocking tasks in the coordinated task sequence. Blocking tasks are ones that block the parallel execution of the coordinated task sequence. The task coordinator goes straight through the task sequence, giving proxy tasks to the appropriate allocated resources, until a blocking task is encountered. It will then wait until that task's blocking requirement is met before continuing the task sequence. In other words, execution of all tasks occurring after that blocking task (regardless of which resource they apply to) will be stopped until the blocking task's requirement is met . The blocking tasks and their blocking requirements are as follows: Allocation Task: By default this task will block until the specified resource has been allocated. However, if the fifth parameter of insertallocatetask is 1, then the allocate task will not block. Sync Task: This task will block until the proxy task specified by its key is finished. De-allocation Task: By default this task will block until the specified resource has finished all its proxy tasks and is de-allocated. However, if the third parameter of insertdeallocatetask is 1, then the de-allocate task will not block. The order in which you insert your tasks can have subtle yet important implications. This is especially true for placing your proxy tasks in relation to blocking tasks. Proxy tasks placed after certain blocking tasks can be executed very differently than if those proxy tasks were inserted before the blocking tasks. Make sure that you de-allocate all objects that you allocate, or the task sequence won't properly release the objects it has allocated. Once you have de-allocated a resource, do not give it any more proxy tasks. Non-blocking De-allocate and Allocate Tasks The functionality for allowing these tasks to be non-blocking is still in the beta state. Although we encourage you to use this feature, and there are no known bugs at the time of writing, know that you may run into some problems because this functionality hasn't yet been used extensively."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/TaskSequences/QuickReference/QuickReference.html",
        "title": "Task Types (Quick Reference)",
        "content": "Task Type involved1 involved2 var1 var2 var3 var4 TASKTYPE_TRAVEL destination navigator-specific end speed navigator-specific navigator-specific target travel time TASKTYPE_LOAD item to load station output port end speed TASKTYPE_UNLOAD item to unload station input port end speed TASKTYPE_UTILIZE involved station state TASKTYPE_DELAY NULL NULL time state TASKTYPE_BREAK send message to task sequence check content check receive pv(5)* msgp(3)** pv(6)* TASKTYPE_CALLSUBTASKS send message to task sequence pv(3)* msgp(1)** pv(4)* msgp(2)** pv(5)* msgp(3)** pv(6)* TASKTYPE_STOPREQUESTBEGIN object to stop NULL state repeat id priority TASKTYPE_STOPREQUESTFINISH object to resume NULL repeat id already executed TASKTYPE_SENDMESSAGE (Deprecated) to object from object msgp(1)** msgp(2)** msgp(3)** delay time TASKTYPE_MESSAGE to object from object delay time msgp(1)** msgp(2)** msgp(3)** TASKTYPE_TRAVELTOLOC NULL NULL x y z end speed TASKTYPE_TRAVELRELATIVE NULL NULL x y z end speed TASKTYPE_PICKOFFSET item station x y z end speed TASKTYPE_PLACEOFFSET item station x y z end speed TASKTYPE_MOVEOBJECT object to move container output port TASKTYPE_DESTROYOBJECT object to destroy NULL TASKTYPE_SETNODENUM node to set NULL value increment y/n TASKTYPE_TAG user-defined user-defined user-defined user-defined user-defined user-defined TASKTYPE_MILESTONE NULL NULL range N/A N/A N/A TASKTYPE_NODEFUNCTION node parnode(1) pv(2)* pv(3)* pv(4)* pv(5)* TASKTYPE_STARTANIMATION object NULL animationnr durationtype durationvalue TASKTYPE_STOPANIMATION object NULL animationnr TASKTYPE_FREEOPERATORS object involved TASKTYPE_WAITFORTASK NULL NULL state * pv = parval ** msgp = msgparam The following table explains non-user tasks: Task Type involved1 involved2 var1 var2 var3 var4 TASKTYPE_TE_STOP NULL NULL state TASKTYPE_TE_RETURN task sequence task TASKTYPE_TE_ALLOCATED coordinator task sequence TASKTYPE_CT_ALLOCATE dispatcher allocated object priority preempt front-most proxy task blocking, (0)yes,(1)no TASKTYPE_CT_SYNC NULL NULL key or task rank TASKTYPE_CT_DEALLOCATE NULL NULL key or task rank blocking, (0)yes,(1)no"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/TaskSequences/TaskTypes/TaskTypes.html",
        "title": "Task Types",
        "content": "Introduction to Task Types You can also refer to the task type reference guide for quick reference. The following sections give detailed explanations of each task type. TASKTYPE_TRAVEL Here the task executer travels to the object specified. This is done by making a travel request to the navigator that it is connected to. The navigator then takes over control of the task executer, and pushes it like a pawn on a chessboard, according to the navigator's own logic, until the task executer reaches the destination and the navigator notifies the task executer that the travel task is finished. How the task executer is pushed is dependent on the type of navigator. If the task executer is connected to a network, then its associated navigator is a network navigator and will push the task executer along network paths. Task Executers and Navigators Some objects by default are not connected to a navigator at all. If the task executer is not connected to a navigator, then it will do nothing for the travel task. The following objects do not connect to any navigators by default: ASRSvehicle, Elevator, Robot, Crane. involved1 - The object to travel to. involved2 - This value's meaning is only applicable to AGV travel. If the task executer is using an AGV network for travel, then involved2 defines the AGV trailer relative to whom the AGV should arrive at its destination. See Customizing AGV Travel Tasks for more information. var1 - This specifies the desired end speed for the travel operation. If 0, then the desired end speed will be the maximum speed of the task executer. A positive value will use that value directly as the end speed. If the end speed is negative, then the functionality is dependent on the navigator's logic. The standard navigators, i.e. the default navigator and the network navigator will interpret negative end speeds as an end speed of 0. Other non-standard navigators may however use a negative end speed value to customize the logic for how to get the task executer to the destination, allowing the modeler to use different negative end speeds on travel tasks to effect customized travel logic. var2 - This value's meaning is specific to the navigator that is handling the travel task. Network Navigator - If the task executer is using a normal node network for travel, then the value determines whether to \"force\" the traveler back to its current network node. If this value is 1, then the object will travel to the destination node even he is already connected to it. AGV Navigator - If the task executer is using an AGV network for travel, then var2 defines a target offset distance, along the path of the destination control point, for the traveler to arrive at. See Customizing AGV Travel Tasks for more information. var3 - This value's meaning is only applicable to AGV travel. If the task executer is using an AGV network for travel, then var3 defines a target AGV body offset, i.e. where along the AGV's trailer body it should arrive at its destination. See Customizing AGV Travel Tasks for more information. var4 - If this value is greater than 0, it represents a target travel time for the travel task. The navigator will determine the travel distance for the travel task, and will set the task executer's speed to be the travel distance divided by the target travel time, with acceleration and deceleration of 0. It will then send the traveler to the destination as it would normally. If the task executer is able to travel unimpeded to the destination, then the travel task will take the defined time to finish. Note here that the travel time is a target . If the traveler cannot travel unimpeded, then the actual travel time will be higher than the travel time defined by this variable. Consequently, if you want your traveler to take exactly the time defined in this variable, you should design your travel network to avoid travel delays. To do this you may need to: Set the Max Allocations properties of all AGV Control Points and Control Areas on the traveler's path to 0, meaning unlimited allocations. Make all AGV paths the traveler travels on use No Accumulation . Make all network travel paths passing. Do not use traffic controls in a node network. Uncheck Collision Avoidance in the A* network properties. Note also that this will not work properly when using elevators in the A* network. Since it can't pre-determine the exact time it will take to move between floows on an elevator, the total travel time cannot be pre-determined. Here you should use bridges instead of elevators. Example ts.addTask(TASKTYPE_TRAVEL, outobject(current,1)) TASKTYPE_LOAD This task causes the task executer to load an item from a station. If the task executer's \"Travel Offsets for Load/Unload Tasks\" checkbox is checked in its Properties page, then it will travel to the location of the given flow item by querying the location from the station and using offset travel. Then the task executer will figure out the load time. At the end of the load time, the task executer will move the item into itself. If loading into a fixed resource, it will notify the fixed resource right before it moves the item, so that the fixed resource can update its own tracking data. involved1 - the object to load (usually a flow item). involved2 - the object to load from. var1 - this is the output port through which the object will exit the station. Usually a 0 is fine. var2 - The requested end speed for the task. var3 - N/A var4 - N/A Example ts.addTask(TASKTYPE_LOAD, item, current) TASKTYPE_UNLOAD This task causes the task executer to unload an item to a station. If the task executer's \"Travel Offsets for Load/Unload Tasks\" checkbox is checked in its Properties page, then it will travel to a drop-off location by querying the station and using offset travel. Then the task executer will figure out the unload time. At the end of the unload time, the task executer will move the item into the station. If unloading from a fixed resource, it will notify the fixed resource right before it moves the item, so that the fixed resource can update its own tracking data. involved1 - the object to unload (usually a flow item). involved2 - the object to unload to. var1 - this is the input port through which the object will enter the station. Usually a 0 is fine, unless you are unloading to a Combiner or a Separator. The Combiner needs to know which input port the item is coming through in order to update its input table. The Separator just needs a value that is greater than 0. var2 - The requested end speed for the task. var3 - N/A var4 - N/A Example ts.addTask(TASKTYPE_UNLOAD, item, outobject(current, 1)) TASKTYPE_BREAK This task causes the task executer to \"break\" from its currently active task sequence to a new task sequence as the diagram below illustrates. The involved objects and variables allow you to customize how to find the task sequence to break to. In the default case, the task executer will call its \"Break To Requirement\" function. This function should return a reference to the task sequence that you want the task executer to break to. In your break logic you may search through the task executer's task sequence queue by using task sequence query commands, or you can create the task sequence explicitly using createemptytasksequence. If you don't want the task executer to break at all, then return NULL. involved1 - If involved1 is specified, then it should be a reference to some object in the model. Instead of calling the \"Break To Requirement\" the task executer will send a message to this object. The only difference here is the place in which you place your logic for finding a task sequence to break to. By default, the logic executes in the Break To Requirement, but if this parameter is specified, then you will write your logic in a message trigger. Again, the return value of the message should be a reference to the task sequence. You would most likely use this feature if you want to centralize your logic through messages to a central \"Model Control Center.\" involved2 - If involved2 is specified, then it is interpreted as a straight reference to the task sequence that the task executer should break to. This would only be used if you know exactly which task sequence you want to break to at the time that you create the task sequence with the break in it. This parameter is not used very often, because if you know exactly which task sequence to break to when you create a task sequence, then you can just add the tasks into the original task sequence when you create it. Using Both Involved Parameters If the involved1 parameter of this task is specified, then involved2 should be NULL. Likewise, if involved2 is specified, then involved1 should be NULL. These parameters are mutually exclusive. You can also just use the default case by specifying both of the involved parameters as NULL. var1 - This parameter specifies whether or not the content of the task executer should be screened before performing the break task. By default (0), the task executer will only perform a break task if its current content is less than the maximum content specified in its Properties page. If var1 is not 0, however, then the task executer will ignore its current content, and perform the break task anyway. This parameter is also passed in as parval(3) if it is to call its Break To Requirement function, and as msgparam(1) if it is to send a message. var2 - This parameter specifies whether or not the task executer should check to receive task sequences from an upstream Dispatcher. By default (0), the task executer will see if it has any task sequences in its queue. If the queue is empty, or if all of the task sequences in its queue are task sequences that have already been started and broken out of, then it will open its input ports and receive a task sequence from an upstream dispatcher. However, if var2 is not zero, then the task executer will not receive anything from an upstream dispatcher before calling its break logic. This parameter is also passed in as parval(4) if it is to call its Break To Requirement function, and as msgparam(2) if it is to send a message. var3 - These parameters are passed into the Break To Requirement as parval(5) and parval(6), and var 3 is passed into the message as msgparam(3) if the task is to send a message. var4 - Same as var3 Example ts.addTask(TASKTYPE_BREAK, NULL, NULL) //a basic break. the \"Break To\" Requirement on the task executer tab will fire ts.addTask(TASKTYPE_BREAK, centerobect(current, 1), NULL) //Sends a message to the referenced object, where your logic will be written in the OnMessage trigger of the object ts.addTask(TASKTYPE_BREAK, NULL, specificTaskSequence) //breaks to a specified task sequence TASKTYPE_CALLSUBTASKS This task is just like the break task, except that it ensures that as soon as the second task sequence is finished, it will return immediately to the next task of the original task sequence. The following illustration shows how this works. As the diagram shows, Task Sequence A comes to a call sub tasks type, upon which it breaks to Task Sequence B. Immediately after Task Sequence B is finished, it returns to the next task of Task Sequence A. Often Task Sequence B won't be created until Task Sequence A actually gets to the call sub tasks task. This is because often when you create Task Sequence A, you don't know exactly what you want the task executer to do when he gets to the point of the call sub tasks task, or you don't have an up-front reference to the objects you need. For example, what if you want the task executer to travel to one part of the model, then load an item, then travel to another part of the model and unload the item, but you won't have a reference to the item that you want to load until the task executer arrives at the other side of the model. In this case, you want the task executer to travel to that portion of the model, then figure out which item to load. Here you would use call sub tasks so that you can resolve the reference to the item at the time the task executer arrives at the load location. Call sub tasks can also be hierarchical. This means that Task Sequence B can also have a call sub tasks type in it. If you decide to create a task sequence when the task executer gets to the call sub tasks task, then the involved object you call sub tasks on will receive a message. In that object's OnMessage trigger, you will need to create a new task sequence using createemptytasksequence(), and insert tasks using inserttask(), but DO NOT dispatch the task sequence, instead, simply return the reference to your newly created task sequence. The Break To Requirement Function When the task executer comes to this task type, by default, he will call his \"Break To Requirement\" function. He will pass in a 1 as parval(2), so that within the function you can tell that it is a call sub tasks instead of the usual break task. Coordinated Task Sequences Using the diagram above, if Task Sequence B is a coordinated task sequence, then the task executer that executes the call sub tasks task from Task Sequence A must be the first object to be allocated in the Task Sequence B. involved1 - If involved1 is specified, then it should be a reference to some object in the model. Instead of calling the \"Break To Requirement\" the task executer will do one of two things. If involved1 is a reference to an object (a node with object data) then the task executer will send a message from itself to the object specified by the involved1 parameter. If involved1 is a reference to a dll, flexscript, or c++ node (a node with string data) then it will call nodefunction on that node, and it will pass a reference to itself as parnode(1). The only difference here vs. the default case is the place in which you put your logic for finding a task sequence to break to. By default, the logic executes in the Break To Requirement, but if this parameter is specified, then you will write your logic in a message trigger or nodefunction. Again, the return value of the message/nodefunction should be a reference to the task sequence. You would most likely use this feature if you want to centralize your logic through messages to a central \"Model Control Center.\" involved2 - If involved2 is specified, then it is interpreted as a straight reference to the task sequence that the task executer should break to. This would only be used if you know exactly which task sequence you want to break to at the time that you create the task sequence with the break in it. This parameter is not used very often, because if you know exactly which task sequence to break to when you create the original task sequence, then you should just add the tasks into the task sequence when you create it. It does, however, allow you to specify different priority and preempting values for different portions of your task sequence, so that if you don't want a certain portion of your task sequence to be preempted, then you can have that portion be a sub-routine task sequence with a different priority than the original task sequence. Using Both Involved Parameters If the involved1 parameter of this task is specified, then involved2 should be NULL. Likewise, if involved2 is specified, then involved1 should be NULL. These parameters are mutually exclusive. You can also just use the default case by specifying both of the involved parameters as NULL. var1 - var4 - These parameters are passed into the Break To Requirement as parval(3), parval(4), parval(5) and parval(6). When sending a message, var1, var2, and var3 are passed into the message as msgparam(1), msgparam(2) and msgparam(3) respectively. When calling a nodefunction, var1, var2, var3 and var4 are passed in as parval(2), parval(3), parval(4), and parval(5). In this task type, these parameters are interpreted as legacy doubles, so you will need to use the tonum() command to pass treenodes. Example ts.addTask(TASKTYPE_CALLSUBTASKS, NULL, NULL) // The \"Break To\" Requirement on the task executer tab will fire ts.addTask(TASKTYPE_CALLSUBTASKS, centerobect(current, 1), NULL) // Sends a message to the referenced object, where your logic will be written in the OnMessage trigger of the object ts.addTask(TASKTYPE_CALLSUBTASKS, NULL, specificTaskSequence) // breaks to a specified task sequence TASKTYPE_UTILIZE This task causes the task executer to go into a given state, and then wait until it is freed from that state with the freeoperators() command. This task is used frequently when you want an operator to \"do something\" at a station, but at the time you create the task sequence you don't know how long it will take to finish whatever the operator is doing. In such a case, use this task type to cause the operator to go into the state you specify, and then free him when he is finished, using the freeoperators() command. This can be done from a trigger like OnProcessFinish or OnSetupFinish, etc. If you know from the outset how long the operator will have to be \"doing something\", then you can use the delay task instead. involved1 - Often this parameter will be a reference to a flow item, if the operator's job has to do with processing a flow item. Sometimes it references a station, for example in the case that a station goes down, and an operator is called. Here, the operator is working on the station, and not a flow item, so the station would be the involved1 parameter. You can even specify this parameter to be NULL if you like. In more specific terms, this parameter is a key for matching with the freeoperators command. For example, if this parameter is a flowitem, then when the freeoperators command is called, the same flowitem must be passed into the second parameter of the freeoperators command in order for the operator to be freed properly. Often you will use a team of operators, any one of which can do the job you want. In such a case you would give the task sequence to a dispatcher, and the dispatcher would give it to a member of the team. At the time you call freeoperators, you really don't know exactly which operator finally came and worked on your job, so you send the freeoperators command to the dispatcher, and in the freeoperators command, you make the second parameter match the involved1 parameter that you specified for this task. This allows the dispatcher to basically say to his team, \"Any of you who are doing a Utilize task whose involved1 parameter is this can now finish that task\". This makes it so that the dispatcher can free certain operators from the right tasks without freeing other operators from the wrong tasks. involved2 - This parameter only needs to be specified if it is possible for the operator to be preempted away from his operation. An operator can be preempted away from an operation by a preempting task sequence, or by a stopobject() command, or by a global TimeTable or global MTBF table. If the operator is preempted away from a utilize task, then problems can be caused if the freeoperators command is called before he comes back to the utilize task. If freeoperators is called while he is doing something else, then the operator will simply ignore it, thinking it doesn't apply to him. Then, once he comes back to the operation, he will never be freed because the modeling logic thinks that he's already been freed. This involved2 parameter can be used to help alleviate this problem. If involved2 is specified, then it should point to an object in the model that is responsible for freeing the operator. When the operator is preempted, he will call stopobject() on the specified object, which stop the object, and in most cases thus stop the object from calling freeoperators. Once the operator comes back to the utilize task, he will call resumeobject() on the station, and things will resume as normal, and the operator will eventually be freed. If you would like to know more about preempting, refer to its corresponding help section. var1 - This is the state into which the operator will go during the utilize task. If it is 0, then the task executer will go into STATE_UTILIZE. var2 - N/A var4 - N/A Example ts.addTask(TASKTYPE_UTILIZE, item, NULL, STATE_UTILIZE) TASKTYPE_STOPREQUESTBEGIN This task causes the task executer to call stopobject() on the involved1 object. Refer to the stopobject() command documentation for more information. involved1 - This parameter specifies the object to call stopobject() on. If NULL, then the task executer will call stopobject on himself. involved2 - Not used. Use NULL for this parameter. var1 - This is the state to request the stopped object to go into. var2 - This variable is necessary only if the task executer that executes this task may be preempted. It is also only needed if you are using milestone tasks. If this variable is set to 0, then the task will only be executed once, even if it is within a milestone task's range and the object is preempted within that range. If this variable is set to 1 and the task is within a milestone task's range, then the task will be executed again each time the object is preempted and needs to do the task over again. By default, the value is 0, meaning the task will only be executed once. Note that if it is 0, on the first execution of the command, the task executer will change the variable to 2 as a flag to not execute it again. var3 - This is the id for the stopobject command var4 - This is the priority of the stopobject command Example ts.addTask(TASKTYPE_STOPREQUESTBEGIN, current) TASKTYPE_STOPREQUESTFINISH This task causes the task executer to call resumeobject() on the involved1 object. Refer to the resumeobject() command documentation for more information. involved1 - This parameter specifies the object to call resumeobject() on. involved2 - N/A var1 - This variable is necessary only if the task executer that executes this task may be preempted. It is also only needed if you are using milestone tasks. If this variable is set to 0, then the task will only be executed once, even if it is within a milestone task's range and the object is preempted within that range. If this variable is set to 1 and the task is within a milestone task's range, then the task will be executed again each time the object is preempted and needs to do the task over again. By default, the value is 0, meaning the task will only be executed once. var2 - This is the id for the resumeobject() command. var3 - N/A var4 - This variable is managed by the task executer, and tells whether this task has already been executed once. Example ts.addTask(TASKTYPE_STOPREQUESTFINISH, current) TASKTYPE_SENDMESSAGE This task is deprecated. Use TASKTYPE_MESSAGE instead. This task causes the task executer to send a message to the involved1 object. involved1 - Involved1 is the object that the message is sent to. If NULL, then a message is sent to the task executer himself. involved2 - Involved2 specifies msgsendingobject in the message trigger. If NULL, then msgsendingobject is the task executer himself. Usually this will be NULL, because it is the only way that you can access the task executer within the message trigger. However, you may want the message to be sent \"from\" a different object, so you have the option here. var1 - This parameter is passed in as msgparam(1) in the message trigger. var2 - This parameter is passed in as msgparam(2) in the message trigger. var3 - This parameter is passed in as msgparam(3) in the message trigger. var4 - This parameter tells whether the message sent is to be a delayed message. If 0, then the message is sent immediately. If -1, then the message is sent delayed in zero time. Otherwise, the message is sent in the specified number of seconds. Example ts.addTask(TASKTYPE_SENDMESSAGE, current, NULL, p1,p2,p3, delay) TASKTYPE_MESSAGE This task causes the task executer to send a message to the involved1 object. involved1 - Involved1 is the object that the message is sent to. If NULL, then a message is sent to the task executer himself. involved2 - Involved2 specifies msgsendingobject in the message trigger. If NULL, then msgsendingobject is the task executer himself. Usually this will be NULL, because it is the only way that you can access the task executer within the message trigger. However, you may want the message to be sent \"from\" a different object, so you have the option here. var1 - This parameter tells whether the message sent is to be a delayed message. If -1, then the message is sent immediately. If 0, then the message is sent delayed in zero time. Otherwise, the message is sent in the specified number of seconds. You might think that delayed message sending is a bit redundant, because if you want to send a delayed message, why not insert a delay task followed by a regular send message task. There is a subtle difference. Say, for example, you want the task executer to wait until a certain number of requirements are met, and the only way you can check those requirements is by executing code. The way that you would do this is, when the task executer gets to the point where he needs to wait for the requirements to be met, he sends a message to some object, and then either does a utilize task or a stop request begin task. When the other object gets the message, he is responsible for checking if the requirements are met. If they are already met, then he is to immediately call resumeobject() or freeoperators() on the task executer. Otherwise he must wait until the requirements are met, and then call resumeobject() or freeoperators(). A problem arises, however, when the requirements are already met and he can immediately allow the task executer to continue. If the message has been sent immediately, then the task executer hasn't started the utilize of stoprequestbegin task yet. He is still working on the send message task. So the other object can't immediately call freeoperators() or resumeobject() because he must wait until the task executer finishes the send message task, and goes on to the utilize or stop request begin. Sending a delayed message in 0 time allows the task executer to do exactly that, and thus allows the other object to immediately free him if the requirements are met. var2 - This parameter is passed in as msgparam(1) in the message trigger. var3 - This parameter is passed in as msgparam(2) in the message trigger. var4 - This parameter is passed in as msgparam(3) in the message trigger. Example ts.addTask(TASKTYPE_MESSAGE, current, NULL, delay, p1,p2,p3) TASKTYPE_DELAY This task causes the task executer to go into a given state, and then simply wait for a specified amount of time. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - This is the amount of time that the task executer will wait in the specified state. var2 - This is the state into which the operator will go during the delay task. If it is 0, then the task executer will remain in the previous state it was in. var3 - This variable is reserved by the task executer. Do not set this variable yourself, or at least don't expect it to stay the same as what you specified it to be. var4 - N/A Example ts.addTask(TASKTYPE_DELAY, NULL, NULL, time, STATE_NUMBER) TASKTYPE_MOVEOBJECT This task tells the task executer to move a specified object into a specified container. This would be used if you want the task executer to load/unload a flow item without going through the offset travel or the load/unload time. Also, this could be used if you want a flow item to be moved, but not into or out of the task executer. involved1 - The object to move. involved2 - The object to move involved1 into. var1 - The output port of the object that involved1 will exit. 0 is usually fine. var2 - N/A var4 - N/A Example ts.addTask(TASKTYPE_MOVEOBJECT, item, outobject(current, 1)) TASKTYPE_DESTROYOBJECT This task tells the task executer to destroy the specified object. Usually this will be done if a flow item is finished in a model, and is ready to go to a sink. You can destroy the flow item explicitly here. You could also use this to destroy labels. Say for example you have a label that acts as a queue of requests. Once a request has been completed, or is ready to be taken out of the queue, you can destroy it. involved1 - The object to destroy. involved2 - Not used. Use NULL for this parameter. var1 - N/A var4 - N/A Example ts.addTask(TASKTYPE_DESTROYOBJECT, item, NULL) TASKTYPE_SETNODENUM This task causes the task executer to set the value on a specified node. This would be used if you want to set a variable or label on the object. involved1 - The node to set the value on. This can be something like label(current, \"mylabel\") or var_s(current, \"maxcontent\") involved2 - Not used. Use NULL for this parameter. var1 - The value to set the node to. var2 - This parameter allows you to either set the value on the node, or increment the value on the node. By default (0), it will set the value of the node. If 1, then it will increment the value on the node by var1. var3 - N/A var4 - N/A Example ts.addTask(TASKTYPE_SETNODENUM, theNode, NULL, 42) TASKTYPE_TRAVELTOLOC This task causes the task executer to travel to a specified location using offset travel. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - This is the x location to travel to. var2 - This is the y location to travel to. var3 - This is the z location to travel to. var4 - This is the desired end speed. Example ts.addTask(TASKTYPE_TRAVELTOLOC, NULL, NULL, 3,3,3) TASKTYPE_TRAVELRELATIVE This task causes the task executer to travel a specified offset using offset travel. This is like the TravelToLoc task, except that instead of traveling to a location, the task executer offsets from his current location. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - This is the x offset to travel. var2 - This is the y offset to travel. var3 - This is the z offset to travel. var4 - This is the desired end speed. Example ts.addTask(TASKTYPE_TRAVELRELATIVE, NULL, NULL, 1,0,0) TASKTYPE_PICKOFFSET This task causes the task executer to execute part or all of the travel offset involved in a load task. This also allows you to sequence the travel operation that the task executer does before doing a load. Let's say, for example, that you have a floor storage area that the task executer is going to pick an item from. The items are organize in bays (x) and rows (y) on the floor. When the task executer arrives at the floor storage area, instead of traveling straight to the product to load it, you want him to first travel in the x direction to the right bay, then travel the y and z offsets to the location of the item. This task type allows you to do this. When the task executer arrives at the floor storage area, you can give him a pick offset task in which you tell to only travel the x portion of the offset. Then you can give him the usual load task, and he will do the y and z offsets once he's finished with the x offset. If you give an object a pick offset task to travel all of the offsets, the effect will be to do the complete travel operation of a load task, without actually loading the object at the end. involved1 - Just like in a load task this is the reference to the item that would be loaded. involved2 - Just like in a load task, this is the reference to the station from which the item would be loaded. var1 - These parameters are usually either a 0 or 1. They correspond respectively to the x, y, and z portions of the offset travel. If 0, then the task executer will travel none of the corresponding offset. If 1, then the task executer will travel all of the corresponding offset. You can also have these values be between 0 and 1. A 0.9 would mean that the task executer would travel 90% of the corresponding offset. var3 - Same as var1 var4 - This is the desired end speed. Example ts.addTask(TASKTYPE_PICKOFFSET, item, current, 1,0,0) TASKTYPE_PLACEOFFSET This task is just like the pick offset task, except that it does part of all of the offset travel involved with an unload task. involved1 - Just like in an unload task, this is the reference to the item that would be loaded. involved2 - Just like in an unload task, this is the reference to the station to which the item would be unloaded. var1 - Same as pick offset task var4 - Same as pick offset task Example ts.addTask(TASKTYPE_PLACEOFFSET, item, outobject(current, 1), 1,0,0) TASKTYPE_TAG This task is exclusively for you to use to \"tag\" your task sequences. Say for example, that you create 5 general types of task sequences in your model. At certain points in the simulation you need to know which general type a certain task sequence is. By inserting a \"tag\" task as the first task of all task sequences you create, you can then query that task by using the gettaskinvolved() and gettaskvariable() commands. involved1 - For your use. involved2 - For your use. var1 - For your use. var4 - For your use. Example ts.addTask(TASKTYPE_TAG, current, centerobject(current, 1), 1) TASKTYPE_MILESTONE This task type is only useful for task sequences that may be preempted. It defines a \"bookmark\" in the task sequence that the task executer can revert back to if it is preempted away from the task sequence. Normally when a task executer is preempted away from a task sequence, it will resume at the same spot it was at once it comes back to the task sequence. The milestone task allows you to tell the task executer to repeat a whole section of tasks if preemption occurs. The task has a defined range of subsequent tasks for which it is responsible. If the task executer is within that range and is preempted, then it will revert back to the milestone task. If it has passed the milestone's range, then it will go back to the default preemption functionality. Coordinated Task Sequences The milestone task will not work as a proxy task in a coordinated task sequence. If you want to set bookmarks in a coordinated task sequence, then you should insert a CALLSUBTASKS proxy task, and within the subsequent sub-task sequence, you can insert milestone tasks as needed. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - This parameter is the range of the milestone task, defined in number of tasks. For example, if var1 is set to 3, and the milestone task is the 5th task in the task sequence, then if the task executer is preempted while executing any one of tasks 6, 7 or 8, then it will revert back to the milestone task. var2 - N/A var4 - N/A Example ts.addTask(TASKTYPE_MILESTONE, NULL, NULL, 3) TASKTYPE_NODEFUNCTION This task type will call nodefunction() on the specified node. involved1 - The node to call nodefunction() on. involved2 - Passed in as parnode(1). If specified as NULL, then when the task executer executes the task, it will pass a reference to itself as parnode(1). var1 - var4 - These parameters are passed in as parval(2), parval(3), parval(4), and parval(5) in the nodefunction. Example ts.addTask(TASKTYPE_NODEFUNCTION, node, NULL, 1) TASKTYPE_STARTANIMATION This task type will call startanimation(). involved1 - Passed as parameter 1 to startanimation(). If NULL, the task executer will pass a reference to itself. involved2 - Not used. Pass NULL. var1 - Passed as the animation parameter into startanimation(). Defines the rank of the animation to start. var2 - Passed as the durationtype parameter into startanimation(). var3 - Passed as the durationvalue parameter into startanimation(). var4 - Not used. Pass 0. Example ts.addTask(TASKTYPE_STARTANIMATION, NULL, NULL, 1) TASKTYPE_STOPANIMATION This task type will call stopanimation(). involved1 - Passed as parameter 1 to stopanimation(). If NULL, the task executer will pass a reference to itself. involved2 - Not used. Pass NULL. var1 - Passed as the animation parameter into stopanimation(). Defines the rank of the animation to stop. var2-var4 - Not used. Pass 0. Example ts.addTask(TASKTYPE_STOPANIMATION, NULL, NULL, 1) TASKTYPE_FREEOPERATORS This task type will call freeoperators(). This might be used as an alternative or as a supplement to the coordinated task sequence mechanism. It allows you, as part of one task executer's task sequence, to free another task executer from a utilize task. involved1 - Passed as parameter 1 to freeoperators(). involved2 - Passed as parameter 2 to freeoperators(). If NULL, the task executer will pass a reference to itself. var1-var4 - Not used. Pass 0. Example ts.addTask(TASKTYPE_FREEOPERATORS, centerobject(current, NULL, 1), NULL); TASKTYPE_WAITFORTASK This task type is used if you don't yet have any new tasks to give the object, but you want to disallow the object from finishing the task sequence until you do have tasks to give it. The object will simply wait until the next task is added to the task sequence, and then will finish this task. involved1 - Should be NULL. involved2 - Should be NULL. var1 - Here you can optionally pass a state that you want the object to go into. If 0, STATE_IDLE will be used. var2-var4 - Not used. Pass 0. Example ts.addTask(TASKTYPE_WAITFORTASK, NULL, NULL); TASKTYPE_TE_STOP Never Insert This Task Explicitly This task type is for reference purposes only. You should never insert one of these task types explicitly. This task is created when you call stopobject on a task executer. The task executer creates a preempting task sequence of priority 100000, and inserts this stop task into it. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - The state that the task executer should go into when he is down. var2 - N/A var4 - N/A TASKTYPE_TE_RETURN Never Insert This Task Explicitly This task type is for reference purposes only. You should never insert one of these task types explicitly. This task is added onto the end of a task sequence that is returned by a call sub tasks task. It ensures that once the task sequence is finished, it will return to the original task sequence involved1 - This parameter points to the original task sequence to return to. If the original task sequence is a coordinated task sequence, then this will point to the task sequence with the TE_ALLOCATED task in it. involved2 - This parameter points to the actual call sub tasks task as a node. var1- var4 - N/A TASKTYPE_TE_ALLOCATED Never Insert This Task Explicitly This task type is for reference purposes only. You should never insert one of these task types explicitly. This is a special task specifically used for coordinated task sequences. The task tells the task executer to be allocated meaning when the object comes to this task, it will notify the object coordinating the task sequence, and then simply wait until it is told to do something by that coordinator. involved1 - The object coordinating the task sequence. involved2 - This is a reference to the coordinated task sequence being executed. var1 - var4 - N/A TASKTYPE_CT_ALLOCATE Never Insert This Task Explicitly This task type is a coordinated task types. You should never insert one of these task types explicitly. You should instead insert them using the insertallocatetask(), insertsynctask(), and insertdeallocatetask() commands. Here the task coordinator will try to allocate some task executer. It is by done by creating a regular task sequence with one TASKTYPE_TE_ALLOCATED task in it, and giving the task sequence to a specified object. This task blocks the continuation of the task sequence until an object has been allocated. involved1 - This is a reference to a dispatcher to give the task sequence to. It may be a specific task executer, or, if the object to allocate can one of several possible objects, then it can reference a dispatcher that dispatches to those task executers. involved2 - This is not specified when the task is created, but will be set once the object has been allocated and will reference that object. var1 - The priority value for the allocation var2 - The preempt value for the allocation var3 - This is changed as the task sequence is executed, and is the rank of the front most proxy task that has been given to the allocated resource var4 - This tells whether the task sequence is blocking. Default (0) is blocking, 1 is non-blocking TASKTYPE_CT_SYNC Never Insert This Task Explicitly This task type is a coordinated task types. You should never insert one of these task types explicitly. You should instead insert them using the insertallocatetask(), insertsynctask(), and insertdeallocatetask() commands. Here the task coordinator blocks the continuation of the task sequence until some previously specified task (referenced by rank), is finished. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - The rank of the task to sync to. var2 - N/A var4 - N/A TASKTYPE_CT_DEALLOCATE Never Insert This Task Explicitly This task type is a coordinated task types. You should never insert one of these task types explicitly. You should instead insert them using the insertallocatetask(), insertsynctask(), and insertdeallocatetask() commands. Here the task coordinator notifies an object that it can finished its allocated task, and resume to other tasks. The object is specified by the rank of the allocation task that allocated it. involved1 - Not used. Use NULL for this parameter. involved2 - Not used. Use NULL for this parameter. var1 - The rank of the allocation task that allocated the object. var2 - This variable specifies whether the deallocation task is blocking. Default (0) is blocking. 1 is non-blocking. var3 - N/A var4 - N/A"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AgentSystem/AgentSystemOverview/AgentSystemOverview.html",
        "title": "Agent System",
        "content": "Overview and Key Concepts An agent system is composed primarily of two things: A set of objects, or agents A set of behaviors The agent system maintains ongoing proximity relationships between the agents, and each agent can have one or more behaviors activated at any time. These behaviors allow the agents to make decisions based on other agents in their vicinity. Agent System vs. Agent-Based Modeling FlexSim's Agent System relates closely, but not exactly, to the well-known concept of agent-based modeling. While a universally accepted definition of agent-based modeling is hard to come by, agent-based models often have one or more of the following aspects. An agent-based model is made up of a set of autonomous agents - From an object-oriented perspective, these agents are essentially objects. Agents behave according to some set of rules or decision-making logic - Sometimes these rules may be simple, but they are not required to be. The behavior mapping may also be heterogeneous and dynamic. Each agent may have a different set of rules/behaviors than its neighbor agents, and may also dynamically acquire and relinquish behaviors. Agents are aware of their environment - This may be a spatial awareness — an agent is aware of other agents that are spatially close — or it may be some other type of inter-agent awareness, such as familial or occupational relationships. These agent awareness environments are often referred to as agent topologies . Agent behavior is generally defined from the perspective of the agent - In other words, agent-based modeling is inherently object-oriented. Agent-based modeling can involve a very large number of agents - Agent-based models often analyze population dynamics, where lots of agents are interacting with lots of other agents. Before FlexSim's Agent module was introduced, FlexSim already had strong capabilities for many of the aspects of agent-based modeling. For example, using an object process flow , you can easily define logic using an object-oriented, or agent-based, perspective. Further, you can easily define non-spatial topologies using labels that point from one object or token, to other objects or tokens. FlexSim also provides incredible scalability to simulate large numbers of agents. This is especially true if you use process flow's lightweight tokens to represent agents, instead of full 3D objects. And finally, FlexSim's AGV , Conveyor , and A* travel mechanisms all provided high-fidelity proximity-dependent behavior within specific problem domains, such as conveyor systems or AGV travel systems. What FlexSim's new Agent System provides, beyond what was previously available, is a scalable, general purpose, spatial component to an agent's environmental awareness. An agent system maintains a bounding volume hierarchy of all of its agents' locations. This is a data structure that allows for more scalable detection of neighbors within an object's spatial proximity. Previously, in order to detect spatial proximity, one would have to compare an object's location with every other object in the entire model. This becomes computationally infeasible when the number of agents reaches into the thousands. Using a bounding volume hierarchy, however, spatial proximity can be detected much more efficiently, allowing the number of agents to be scaled up more easily. Calculating Proximity The proximity detection mechanism calculates proximity distance by measuring the distance from the center of the agent to the closest point on the bounding box of a neighbor agent. Each agent makes its own proximity calculation with each of its neighbor agents. In other words, since the proximity calculation is between an agent's center and the neighbor's bounding box, the agent's proximity calculation with that neighbor may be slightly different than the neighbor's proximity calculation with the agent. The proximity calculation also works for 'static' neighbor agents. Static agents are agents that have no behavior assigned to them. The most common examples of this are A* walls and barriers. These are technically agents in that they make up the detectable environment of other agents, but they are static in that they do not themselves have behaviors. In other words, active agents calculate proximity with walls and barriers as part of their behaviors, but not the other way around, because those barriers do not themselves have any behaviors. The Behaviors Tab As mentioned above, an agent system is composed of a set of agents and a set of behaviors. An individual agent can have one or more behaviors active at any time, and those behaviors can be activated and deactivated dynamically. You define which behaviors make up the agent system using the Behaviors tab. Adding, Removing, and Renaming Behaviors The field at the top and the controls next to it allow you to select, create, remove, rename, and reorder behaviors that are part of the system. Clicking the button will add a new behavior. Click in the text field box to rename the behavior. The Up and Down arrows will rearrange the behavior in the list. The button will delete the behavior. There are two types of agent behaviors in FlexSim: proximity behaviors, and social force behaviors. Proximity Behavior A proximity behavior is a simple behavior that detects proximity between an agent and its neighbor agents. See Proximity Behavior for more information on proximity behaviors. Social Force Behavior A social force behavior defines a set of forces that 'push' the agent in various directions, based on the neighbors in its environment. This behavior follows a methodology called social force modeling . See Social Force Behavior for more information on social force behaviors: The Agents Tab The Agents Tab has a list of all the current agents that are part of that system, as well as a setting, for each behavior, whether that behavior should be activated on that agent when the simulation starts. Agent Column The Agent column displays the path name to the 3D object agent. Behavior Columns For each behavior in the system, the table will display a column showing whether that behavior should be activated when the simulation starts. By clicking on a cell in this column, a menu selection arrow will appear next to the column. Either on or off can be selected. The General Tab The General Tab has the following properties: Show Bounding Volume Hierarchy When checked this will display the bounding volume hierarchy wireframes of the agents in the proximity system. Show Agent State Info When checked, the system will draw a bounding box wireframe around the agent 3D objects, as well as a circle around the agents indicating the proximity radius that was defined. Resolve Distances and Forces on the X/Y Plane Only When checked, this will resolve proximity measurements along the X and Y axis only. In this case, the proximity bounding volume of an agent will resemble a cylinder that is the height of the agent, with the behavior's defined radius. Further, forces of a social force behavior will be clamped to the XY plane. When the box is unchecked, an agent's proximity bounding volume is a sphere around its center with the behavior's radius. This is checked by default. Integrating with Other FlexSim Logic You can integrate agent system functionality with other elements of a FlexSim model, like Process Flow or statistics collection , through event listening . As of the initial release of the Agent System, the best way to listen to agent and behavior events is by sampling them in the tree view . Listening to Agent Events You can listen to individual agent proximity events if those agents have a proximity behavior enabled. This is especially useful if you are defining the logic of an agent in Process Flow. To listen to a proximity behavior event of a specific agent: Add an Event Triggered Source or Wait For Event activity to your process flow. To define the event's target object, call the Agent() constructor in the Object field, passing in the agent object. In an object process flow , this would likely be current , or it may be a token label value. To define the target event, first open a tree view, and find the agent system in the model, then expand to the list of agents at >variables/agents relative to the agent system. Once you have the list expanded, press the button in the process flow activity properties, and then click on one of the agents in the list. You should get a list of events like On Enter Proximity . Choose the desired event. Listening to Behavior Events You can also listen to an event for an entire proximity behavior. This is often useful specifically for statistics collection. To listen to a proximity behavior event in a statistics collector: Add an Statistics Collector to your toolbox. To define the target event, first open a tree view, and find the agent system in the model, then expand to the list of behaviors at >variables/behaviors relative to the agent system. Once you have the list expanded, press the button in the statistics collector's properties, and then click on one of the behaviors in the list. You should get a list of events like On Enter Proximity . Choose the desired event. This will listen to an event associated with an entire proximity behavior."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AgentSystem/ProximityBehavior/ProximityBehavior.html",
        "title": "Proximity Behavior",
        "content": "Overview and Key Concepts A proximity behavior is a behavior that can be activated on agents in an agent system . This behavior measures proximity distances between each agent and its neighbors, and then fires triggers when user-defined proximity distances are breached and subsequently re-established. See Calculating Proximity for more information on how the behavior calculates proximity between agents. Behavior Settings The Behaviors Tab has the following Properties: Update Interval Defines how often the system will check to see if agents are within the defined proximity to each other based on the selected time unit. Proximity Radius This number defines the amount of distance that will trigger a proximity detection in the selected measurement unit. Threading There are two options: Single-Threaded - When the behavior is single-threaded, it will update each agent in order, on a single CPU thread. Multi-Threaded (Experimental) - When the behavior is multi-threaded, it will use multiple CPU threads to update each agent. Using multi-threading can be beneficial if there are many agents that must be updated. Active Rules Active Rules are rules that can be selected to apply the behavior during specific circumstances or conditions. For example, you might want the behavior to only detect proximity with certain types of agents, or with agents that have a certain state or behavior activated. Clicking the button will create a new active rule. Once an active rule is selected, the name of the rule will be displayed in the Active Rules field. The rule can be removed by clicking the X button next to the name of the rule. The rules and categories are as follows: Self-based active rules rules apply to the agent based upon its own properties. There are the following options: Only When Traveling - This option will only apply the proximity detection when the agent is a Task Executer that is currently performing a travel task. Only When Idle - This option will only apply the proximity detection when the agent is a Task Executer that is not performing a travel task. Label Value - This option will only apply the proximity detection when an agent has a certain label with a certain value. When you select this option, it will bring up a field for the Label Name , and a field for the Value of the label that it needs to match. Neighbor-based active rules apply based upon certain neighbors. There are the following options: Neighbors with Behavior - This option will only perform proximity detection for neighbors with the defined behavior, or no behavior at all. Neighbors with Matching Label - This option will only perform proximity detection for neighbors who have a label that matches the agent's label value. Neighbors with Label Value - This option will only perform proximity detection for neighbors who have the selected label with the defined value. Triggers Triggers for the proximity behavior are defined here. Clicking the button will open a menu of the available triggers. The set of triggers you can add correspond with the set of events that the behavior supports. Events Below are the set of events that a proximity behavior supports. See Agent System : Integrating with Other FlexSim Logic for more information on listening to proximity behavior events. On Enter Proximity This event fires when a neighbor agent is first detected within the proximity radius. Narrow Phase Proximity Detection and Aborting Proximity Entry If you return 1 from the On Enter Proximity trigger, then the proximity entry will be aborted, meaning the system will treat the agent as if it is still not in proximity with the neighbor. This can be used to write more finely-tuned narrow phase proximity detection logic, and abort proximity entry when it is determined that the neighbor is not in the more narrowly-defined proximity. On Exit Proximity This event fires when a neighbor agent is first detected as having left the proximity radius. On In Proximity This event fires on each update interval, for every neighbor agent that is currently in proximity with the agent."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AgentSystem/SocialForceBehavior/SocialForceBehavior.html",
        "title": "Social Force Behavior",
        "content": "Overview and Key Concepts A social force behavior is a behavior that can be activated on agents in an agent system . Social force behaviors apply sets of forces on agents within a system to 'push' the agents in different directions based on various factors. A social force behavior is made up of one or more forces. Forces are calculated individually, and then aggregated into a cumulative force affecting the agent. Example forces include things like attractive forces, which motivate an agent to 'stay in the group', or repulsive forces, which motivate an agent to not get too close to its neighbors. You may have an alignment force that motivates the agent to move in the same direction as other agents. You also may have a goal-based force that motivates the agent to move toward a destination or along an A* path. When each force of an agent is calculated and aggregated, the cumulative force will effectively cause the agent to accelerate in the direction of the force. If the agent is a task executer, then the acceleration will be bounded by the task executer's acceleration or deceleration property, depending on whether the force is aligned with, or against, the agent's current direction of motion. The speed of the agent will also be bounded by the max speed of the task executer. Behavior Settings The Behaviors Tab has the following Properties: Update Interval Defines how often the system will update the force equations based on the selected time unit. Forces as Speeds If this box is checked, then instead of applying the cumulative force as an acceleration on the agent, the behavior will instead immediately set the agent's speed to the result force. In other words, when the box is checked, the cumulatively calculated force is not technically a force, but a resultant agent speed. Thus, 'momentum' of the agent, i.e. its previous speed, is disregarded, and the agent gets a newly calculated speed on each update interval. Threading There are two options: Single-Threaded - When the behavior is single-threaded, it will update each agent's forces in order, on a single CPU thread. Multi-Threaded (Experimental) - When the behavior is multi-threaded, it will use multiple CPU threads to update agent forces. Using multi-threading can be beneficial if there are many agents that must be updated. Note, however, that as of the initial release of the Agent System, if a random force is part of the set of forces, then the model will not be repeatable. If you need repeatability, you will need to use single-threading, at least for now. Forces Clicking the button will open a menu that will allow the selection and application of a new force to the system. For a reference on the various forces available: Social Forces . Active Rules Active Rules can be used to define criteria for applying a force. For example, you might want a force to only be applied relative to certain types of neighbors, such neighbors who have the same behavior activated. Clicking the button will create a new active rule. Once an active rule is selected, the name of the rule will be displayed in the Active Rules field. The rule can be removed by clicking the X button next to the name of the rule. The rules and categories are as follows: Self-based active rules rules apply to the agent based upon its own properties. There are the following options: Only When Traveling - This option will only apply a force when the agent is a Task Executer that is currently performing a travel task. Only When Idle - This option will only apply a force when the agent is a Task Executer that is not performing a travel task. Label Value - This option will only apply a force when an agent has a certain label with a certain value. When you select this option, it will bring up a field for the Label Name , and a field for the Value of the label that it needs to match. Neighbor-based active rules apply based upon certain neighbors. There are the following options: Neighbors with Behavior - This option will only apply a force for neighbors with the defined behavior, or no behavior at all. Neighbors with Matching Label - This option will only apply a force for neighbors who have a label that matches the agent's label value. Neighbors with Label Value - This option will only apply a force for neighbors who have the selected label with the defined value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AgentSystem/SocialForces/SocialForces.html",
        "title": "Social Forces",
        "content": "Overview and Key Concepts Social forces are calculated directional forces that are applied to agents who have a social force behavior active. These forces make up the individual components that, when added together, effect a cumulative force that accelerates the agent in a certain direction. Equations The user interface for forces will often display an equation that represents how the force is being calculated. You can get hints as to what each of the components of the equation means by clicking on the equation. Equations are usually composed of a user-defined scale factor, which is multiplied by some directional unit vector. Then the result is subsequently multiplied by a factor that is dependent on the distance from the agent. You enter an exponent value to define how the distance from the neighbor agent affects the overall force calculation. Let's take for example an attractive force, which attracts an agent towards its neighbors. The symbol ûₙ represents the normalized (unit) vector directed at the neighbor, i.e. from the agent's center to the nearest point on the neighbor's bounding box. This unit vector is scaled by a scale factor that you can define. Then the result is again scaled by a factor that is dependent on the distance from the agent, represented by the symbol ‖uₙ‖ . As an example, let's say that ûₙ is the vector [0.97, 0.24] , and that ‖uₙ‖ is 0.5 , which is a rough estimate of the picture shown above. You have defined a scale factor of 0.1 and a distance exponent of -1 . First the equation scales ûₙ by 0.1, resulting in the vector [0.097, 0.024] , then it multiplies that vector by 0.5 -1 , or 2. Thus the resulting force, for that neighbor, is [0.194, 0.048]. f n = 0.1 · [0.97, 0.24] · 0.5 -1 = [0.194, 0.048] In this scenario, if no other forces are affecting the agent, then the agent will take on a directional acceleration of [0.194, 0.048]. Note the effects of the two user-defined values in the equation. The scale factor — in this case 0.1 — serves to generally scale the force. You use this scale factor to adjust the strength of the force in relation to other forces that make up the social force behavior. The exponent value — in this case -1 — scales the force dependent on the distance from the agent. A value of -1 means that, as the distance gets larger, the force gets smaller, and as the distance gets smaller, the force gets larger. For an exponent value of -2 , the inverse relationship between distance and force is even stronger, and would be synonymous with a gravity-like force. You could also give the exponent a value of 0, which means that distance has no effect on the force's magnitude. Alternately, if you give the exponent a positive value, then there will be a positive correlation between distance and force magnitude. As distance gets bigger, the force gets bigger. A neighbor-based force, such as an attractive force, will sum all of the forces calculated for each of an agent's near neighbors. This summation is represented in the display of the equation with the Σ symbol. Neighbor-based Forces The neighbor-based forces are the following: Attractive Force As described above, the attractive force is a force that attracts an agent to its near neighbors. It calculates the force for each neighbor that is within the maximum distance, and then sums the individual forces together. In addition to the scale value and exponent, the attractive force has the following properties: Max Distance – This defines the maximum detection distance for the force. The force will be applied only for neighbors that are within this distance. Per Neighbor Magnitude – This checkbox affects how the forces are summed together. When checked, forces will be calculated individually, and then summed together. Thus, if an agent has more neighbors, the force will be greater. On the other hand, if the box is unchecked, each neighbor force is first multiplied by the distance factor. Then forces are summed together. Finally, the sum force is normalized and multiplied by the scale factor. In this configuration, you are essentially defining a static force magnitude, in the direction of the center of mass of the agent's neighbors. In other words, the force will be the same magnitude — namely the scale factor you enter — no matter how many near neighbors there are. This configuration is what is called a cohesive force . Active Rules - See Social Force System: Behavior Tab for more information about Active Rules. Repulsive Force A repulsive force is similar to an attractive force but applied in the opposite direction, namely away from neighbor agents. In addition to standard attractive force properties, it has the following: Hard Limit – This is an added field for repulsive forces. It determines a minimum distance that an agent must keep from its near neighbors. Cohesive Force The cohesive force attracts the agent to the 'center of mass' of its neighbor agents. The cohesive is an attractive force where the Per Neighbor Magnitude is unchecked. Transverse Force A transverse force is applied when neighbors of the agent are traveling toward the agent. This force will push the agent to move to the right. The first field is the scale factor, its value will determine the direction: a positive value will cause the agent to move to the right, a negative value will cause the agent to move to the left. The second value is the exponent value. Field of View – This field determines the range in degrees that the agent will look for neighbors when applying this force. Travel Direction Threshold - The agent will only apply the force to neighbors whose travel direction is at least this many degrees offset from the agent’s travel direction. Max Distance – This defines the maximum detection distance for the force. The force will be applied only for neighbors that are within this distance. Alignment Force An alignment force is a force that motivates the agent to align its velocity with the velocity of its neighbors. For this force, the vector Δvₙ is calculated as the difference between the neighbor's velocity and the agent's velocity. In other words it is the force which, if applied to the agent, will change the agent's velocity to be the same as the neighbor's velocity. Max Distance – This marks a finite distance from the agent where the force can be applied. Self-based Forces These are the following Self-based forces: Friction Force A friction force is applied in the opposite direction of an agent's travel. Static Friction – This is applied to the agent when stopped. Generally, this value is larger than the kinetic friction element. It acts as a threshold that means that the sum of other forces must exceed this value to get the agent to move. Kinetic Friction – This is applied to the agent that is moving, causing the agent to slow and stop when no other forces are pushing the agent. The exponent field will affect how the force is applied considering the velocity of the agent. A positive number means that the force is stronger as the velocity increases. Momentum Force A momentum force is the opposite of a friction force. It will push an agent to continue along its travel path. The first field is the scale factor, the second field is the exponent. Goal-based Forces A goal-based force will motivate the agent to move toward a goal. There are two possible forces here: a travel destination force, and an A* travel path force. If you define a goal-based force, you should choose one of these but not both. Travel Destination A travel destination force will take any travel tasks the agent is given and use the final destination location as a pulling force upon the agent, causing the agent to move towards its goal. As with other forces the first field is the scale factor, and there is an exponent field as well. Completion Threshold – This value defines how near the agent needs to be to the destination in order to designate the goal as finished, i.e. finish its travel task. A* Travel Path The A* travel path force will use elements from A* navigation to calculate forces. The agent system will communicate with the A* system to determine a path. Once the path is calculated, the agent will be motivated, through this force, to move along the path to its destination. As an agent moves along its path, it will have a current target node that acts as its current anchor to the path. The agent's path attraction is made of two primary forces associated with its current target node. The Node Attract Force attracts the agent directly to the node, whereas the Path Align Force motivates the agent to travel in the direction that the path is headed at the current target node. Node Attract Force – This force is directed from the agent directly to its current target node. Again you can enter a scale factor and a distance-based exponent. Often a positive exponent is used, meaning that the farther the agent is from the path, the stronger the force will compel the agent to return to the path. Path Align Force – This force pushes the agent to move in the same direction as the path at its current node. The force is the vector location of the current target node on the path, minus the location of the last target node, normalized. Again you can enter a scale factor and a distance-based exponent. By default the exponent for the path align force is negative, meaning that the farther from the path the agent is, the more the node attract force will push the agent to return to the path first before aligning with it. Goal Force – This force pushes the agent to move towards the final goal. The first field is the scale factor for the vector, the second field is the exponent of the equation. The exponent by default is negative, meaning that the closer the agent approaches the goal the larger the force will compel the agent. Path Progression Angle – As the agent progresses on a travel path it updates its target node as it goes. This field defines a threshold for when to update the current target node. If the vector difference of the Node Attract Force and the Path Align Force are ever greater than this defined angle then the system will trigger a progression of the current target node. Position Difference Factor – This is field defines and second possible threshold for progressing the current target node. This is used in comparing the distance to the current target node, vs. the distance to the next target node. For example, if this value is 1.0, then the agent will progress its current target node when the distance to the next target node becomes less than the distance to its current target node. Usually this value will be in the range from 0 to 1. If it is 0.5, then the agent will progress its current target node if the distance to the next target node is less than half the distance to its current target node. Path Recalc Timeout – If an agent has been unable to progress along a travel path after the defined amount of time, the system will force the agent to recalculate a new path. This will keep agents from getting stuck in a deadlock. Completion Threshold – This determines the amount of distance the agent needs to be within to consider the goal task completed. Add Barriers as Static Agents – This box when checked makes barriers act as agents for determining forces. For example, repulsive forces will be used by the agent in regards to the barrier. Enforce A* Node Direction Limits – This will enforce hard limits on A* barriers, walls, dividers, etc. This will prevent agents from walking through walls, even if forces push them into them. Custom Force A Custom Force allows a force to be defined through custom code. Per Neighbor Force – This will cause the force to be applied to each neighbor. Max Distance – This will define a max distance for the force to be applied. Random Force This will apply a force compelling the Agent toward a random direction based on the defined magnitude. Magnitude - This defines the magnitude of the random force."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AGVNetworkTool/AGVNetwork/AGVNetwork.html",
        "title": "AGV Network",
        "content": "Overview and Key Concepts The AGV Network helps you to create travel paths while simulating automatic guided vehicles (AGVs) and other task executers. The AGV module does not add its own AGV object type to the library. Instead you can attach any task executer ( TaskExecuter , Operator , Transporter , etc.) to a control point on an AGV network, and that task executer will travel using AGV-defined logic. The AGV Types Tab For information on the AGV Types tab, see AGV Types . The Control Point Connections Tab For information on the Control Point Connections tab, see Control Point Connections . The Accumulation Types Tab For information on the Accumulation Types tab, see Accumulation Types . The Deallocation Types Tab For information on the Deallocation Types tab, see Deallocation Types . The Conditional Rules Tab The Conditional Rules tab lets you define boolean conditions for routing on various paths. For example, some paths may only be designated for certain types of AGVs. If you only want AGVs with a certain label value to be able to traverse the path, you can define a conditional rule that checks that the AGV label value matches. Then set the Conditional Rule property of a path to reference that rule. Once configured, only AGVs with matching label values will travel on that path. Each time an AGV starts a travel task, it evaluates each conditional rule, creating a tuple that acts as a key into a cached map of routes to the desired destination. The AGV network maintains this cache for speed reasons, so that it does not need to recalculate the route every time an AGV needs to travel. Routing tables will be built and cached as needed during the simulation run. It's important to note that AGVs only evaluate conditional rules at the beginning of their travel operations. This means that if a conditional rule's value changes in the middle of a travel operation, you must preempt the AGV so it will restart its travel operation, re-evaluating the conditional rules and the consequent route. The General Tab The General tab has the following properties: You can get to the General page by right-clicking on a Path or Control Point and choosing AGV Network Properties. Check for Deadlock If checked, the Control Point/Control Area allocation logic will continuously check for deadlock cycles. If it finds one, it will stop the model and notify you of the issue. Note that deadlock detection does require additional calculations and may slow your simulation down. You should hence turn it on while debugging, and once all deadlock issues are resolved, turn it back off. Zero Travel End Speed Means Max Speed If checked, AGV's will interpret travel tasks with end speed of 0 to mean: end at the AGV's max speed. This behavior is the default with other FlexSim travel mechanisms, such as standard travel networks that use network nodes. However, with AGVs this is not always the desired behavior, so it is an explicit setting that you define here. For more information, see Customizing AGV Travel Tasks . Ignore Internal Destination Errors If checked, travel destination errors caused when using AGV.BodyOffset.TrainLeadingEdge or AGV.BodyOffset.TrainTrailingEdge for a destination internal to the train body will not be printed to the system console. The AGV will instead immediately finish the travel task. This error happens in a very specific case. If you want an AGV train's \"leading edge\" to travel to a destination on the AGV path network that is internal to the AGV train, then there is technically no way to successfully perform that operation, because whatever edge of the train travels to that destination will be the \"trailing edge\" not the \"leading edge.\" Thus, giving the AGV such a task is technically an error. However, in some models it would be onerous to try to detect and avoid this error. Thus, you can check this box and the AGV will simply finish the travel task without moving at all. Create Transfers at Crossings Defines whether you want transfers to be created when you lay down straight paths that cross each other. The default (unchecked) will only create a transfer if the junction point is at the end of at least one of the paths. Check this and it will create transfers even when they are in the middle of both crossing paths. Line Width Defines a baseline width, in pixels, by which Paths and Control Points will be drawn in the model. Draw Scale Defines a baseline size by which to scale drawing of Control Points and Path direction arrows. Snap Threshold The distance by which objects will snap together in the user interface. Path Drawing, Control Point Drawing, Control Area Drawing Defines how the respective objects can be manipulated in the model. As you finish certain parts of your model you may want to restrict what you can change about the objects in it. Options are: Full Manipulation - You can click on and move these objects around as needed. Clickable Only - You can click on these object but you cannot move them around. Not Clickable - You can see the objects in the 3D view but you cannot click on them. Do Not Draw - You cannot see the objects in the 3D view. Show Control Point/Area Allocations Used primarily for debugging. If checked, the AGV network will draw each AGV's current and requested allocations in the 3D view. This includes allocations of control points, control areas, as well as path transfers. Current allocations are drawn in orange, whereas requested allocations are drawn in red. Show Accumulation Associations Used primarily for debugging. If checked, the AGV network will draw a lines between AGVs that are currently traveling on accumulating paths . It will draw a blue line from each AGV to the AGV ahead of it, and to the AGV behind it. Route Cost This group of controls lets you customize how travel costs are calculated when resolving routes along the AGV path network. The AGV network uses dijkstra's algorithm to determine the best route of travel. As the algorithm traverses the network, it calculates the \"costs\" associated with traveling on each section of path. The AGV will then follow the route with the least total cost to get to the destination. By default, the cost to travel a section of path is equal to the distance of that section. Alternately, if you select Divide By Speed , it will divide the distance by the speed a given AGV will travel along that path. The result is that the AGV will travel the fastest route instead of the shortest route. You can also select Multiply By Custom Path Cost and enter a path-dependent expression. The algorithm will then multiply the cost by the result of the expression. The most common use for this would be to put labels on various paths in your network that give certain paths priority over other paths. The algorithm will then favor traveling on certain paths over others. Here, an expression result of 1 would use the standard cost, an expression of 3 would triple the cost, and so forth. Note that, if the expression result is 0, it will use the standard cost. Also, if you use A* mode , the path multiplier should always be greater than or equal to 1. This is required for the A* heuristic to guide the algorithm properly to the destination. Path-based costing is assumed to be static. When the system needs a routing table to a destination, it will only build it once and cache it off. Subsequent routing will use the cached table. This means that you can't simply change path-dependent costs during a simulation run and assume they will work. It will use whatever the path-based costs were the first time the table was built, not on subsequenct changes. However, you can use path-dependent costing, in conjunction with conditional rules , to achieve this goal. The system creates a tuple by evaluating each conditional rule at the beginning of a travel task. The tuple is a key into a map of routing tables . The system will use a cached table if the table for the given tuple key already exists. If the table does not yet exist, the system will build and cache a new route. Thus, if you want your path costs to be dynamic, you can associate a given path cost configuration with a conditional rule. To use that configuration, set all the path cost values to the configuration, then turn on the conditional rule. Then once the routing table has been calculated, reset the path costs back to their default values, and turn the conditional rule off. Debugging Route Costs The AGV system also provides tools to get information on dijkstra's algorithm results. You can right-click on a destination control point and select Show Routing Accessibility . Then hover the cursor over other control points and path transfers in the model. It will show the various costs associated with traveling from the hovered point to the destination. See Showing AGV Routing Accessibility for more information. Way Points Way Points are used to define AGV control logic that will happen when an AGV passes over a control point. However, going forward we advise you to use process flow instead of Way Points for AGV control. FlexSim provides a template AGV control process flow, which can be used as a starting point for defining AGV control logic.. The Way Points tab has the following properties: You can get to the Way Points page by right-clicking on a Path or Control Point and choosing AGV Network Properties. Way Points List Here you can add, remove, re-order, and rename each Way Point. Trigger Point This defines when to fire the Way Point Logic. Options are: On Pre-Arrival - The Way Point Logic will be fired at the point when the AGV would otherwise start to decelerate to stop at the Way Point. On Arrival - The Way Point Logic will be fired when the AGV arrives at the Way Point. Note that if the Trigger Requirement is met and this Trigger Point is chosen, the AGV will slow to a stop at this Way Point and then fire the Way Point, even if the Way Point is not the AGV's final destination. Hence if you don't want the AGV to slow to a stop, you should use On Pre-Arrival. Trigger Requirement A field that should return 1 if the Way Point should be fired, 0 if not. Way Point Logic The code for the Way Point. Way Point Members The list of Control Points that are part of this Way Point. Here you can add, remove and re-order the members list. AGV Customization Delegate In addition to the standard features provided through FlexSim's user interface, the AGV module provides a mechanism for advanced users to customize AGV travel at a much more detailed level. The AGV network uses an \"AGV Customization Delegate\", which allows for hooks to be placed at certain points in the AGV navigation logic. There is a default, internally defined customization delegate that the AGV network uses, but you can override the logic of this default delegate by adding and configuring a special node at MODEL:/AGVNetwork>variables/customizationDelegate, as follows: Navigate in the tree to MODEL:/AGVNetwork>variables/customizationDelegate Right click on that node, and choose Edit > Designate this Node (so) In a script window execute the script: nodeadddata(so(), DATATYPE_SIMPLE) Add a subnode to that node named sdt::attributetree and give it the text: AGV::UserAGVCustomizationDelegate. Copy the node and then paste it onto itself. This will instantiate a \"UserAGVCustomizationDelegate\" class, which has hooks where you can implement customizations in FlexScript. The various customization hooks are best described within the context of an AGV's overall travel operation. An AGV performs several sequential operations as part of configuring and completing a travel task. They are: Resolve Routing The AGV system uses a \"lazy\" dijkstra's algorithm to cache routing tables, stored by destination. Whenever a change is made to the AGV path network, all cached routing tables are cleared. Then when an AGV must travel to a certain destination, if that destination does not have a cached routing table, it will build a table on-the-fly using dijkstra's algorithm, and then store it off for later reuse. This table defines 'cost' and 'next' routing values for getting from every point in the AGV path network to that destination point. A destination may actually have multiple routing tables, where each table is uniquely addressed by a tuple key based on conditional rules . The AGV system also allows for more dynamically built tables, where a route to a destination is resolved using the A* algorithm and is completely recalculated on every travel operation. This mode is enabled either when the shouldBuildCustomRoute hook returns 1, or when you have defined dynamic routing constraints in the system. In both dijkstra's and A* mode, the AGV will call the getPathTravelWeight hook to resolve the 'cost' of traveling on a given section of path. Build Travel Path In this step, the AGV uses the routing table to build a locally-stored travel path to the destination. Here the AGV resolves things like the orientation of the AGV while traveling on each path section in the route, and also builds a list of lookahead allocation points that the AGV must acquire while traveling the path. Set Travel Path Speed Profile In this step, the AGV goes through its travel path and sets maximum travel speeds, acceleration, and deceleration values for each travel path section. It first traverses the travel path forward, calling the customization delegate setSpeedProfile hook. Then it traverses backwards, resolving points where the AGV must start decelerating in order to meet path section speed requirements. Lookahead Allocation/Kinematics In this step, the AGV repeatedly allocates ahead to its next allocation point, calling the addKinematics and addRotation hooks to add kinematics that traverse the travel path sections up to the next allocation point. It adds kinematics as-if it will not immediately allocate ahead at the next lookahead point, and then schedules a pre-arrival event for the next point at which it needs to allocate ahead. If, at that time, it cannot immediately allocate ahead, then it simply lets the kinematics finish, coming to a stop at the lookahead point. If, on the other hand, the AGV does immediately allocate ahead, then it resets the kinematics to start at the current position and speed, then repeats the process again, adding kinematics to travel to the next lookahead point. Customization Hooks Adding the user customization delegate creates empty hook nodes for you to fill out. If you leave a hook unimplemented, then it will simply perform the default logic for that hook. To implement a hook, add text data to the corresponding node, toggle it as FlexScript, implement the proper customization code, and return the required value from the function. The customization delegate hooks are as follows: shouldBuildCustomRoute This hook is executed at the beginning of an AGV's route resolution step. It should return 1 if you want to use a customized travel route, and 0 otherwise. If you return 1, then you must also implement a custom getPathTravelWeight hook. Note that more recent versions of FlexSim have added route cost features that are part of the user interface and use AGV's route caching mechanism. These newer features make this and the getPathTravelWeight hook mostly obsolete, and we advise using those features for customized routing instead of this feature. The code header for this hook should be as follows: AGV agv = param(1); // the traveling AGV AGV.AllocatableObject currentCP; // the Control Point (if any) that the AGV is currently at Object destination; // the destination object (if any) getPathTravelWeight This is executed repeatedly as part of the AGV's route resolution step. As it encounters path sections in traversing the path network, it calls this hook to determine a \"cost\" of traveling on this section. Generally this hook would return the distance of the path section, or the time to travel the path section, but you can customize it as needed. Note that more recent versions of FlexSim have added route cost features that are part of the user interface and use AGV's route caching mechanism. These newer features make this and the shouldBuildCustomRoute hook mostly obsolete, and we advise using those features for customized routing instead of this feature. The code header for this hook should be as follows: AGV agv = param(1); // the traveling AGV Object path = param(2); // the path whose travel weight is being queried double fromDist = param(3); // the 'start distance' on the path double toDist = param(4); // the 'end distance' on the path setSpeedProfile This hook is called as part of the speed profile setting step. It allows you to define the max speed, acceleration and deceleration attributes of a travel path section. If you implement this hook, you should return 1. The code header for this hook should be as follows: AGV agv = param(1); // the traveling AGV Object path = param(2); // the path whose travel weight is being queried double fromDist = param(3); // the 'start distance' on the path double toDist = param(4); // the 'end distance' on the path Unfortunately, as of version 22.2, the FlexScript API does not provide a mechanism for setting these attributes directly on a travel path section (perhaps check the API directly to see if this has changed in future releases). However, you can call setsdtvalue() on the travel path section, with the values \"peakSpeed\", \"acc\", and \"dec\" to set these attributes. addKinematics This hook is called repeatedly as part of the lookahead allocation/kinematics step. It is called once for each travel path section up to the next lookahead point. The code header for this hook should be as follows: treenode kinematics = param(1); // the kinematics node to add kinematics to AGV.TravelPathSection section = param(2); // the travel path section the AGV is to travel on double atTravelDist = param(3); // the travel distance at which this kinematic will start double dist = param(4); // the total distance that should be added to the kinematics, i.e. the distance to travel on that section double startTime = param(5); // the start time for adding the kinematics double startSpeed = param(6); // the speed the AGV will be traveling at startTime double endSpeed = param(7); // the target end speed, i.e. the speed the AGV should be at when finished traveling the distance on the section int reason = param(8); // 0: OnBuildKinematics, 1: OnAbort/OnPreempt, 2: OnProximityInterrupt treenode endSpeedOut = param(9); // set the value of this node if the resulting endSpeed != original endSpeed double peakSpeed = param(10); // the peak speed of the section double acc = param(11); // the acceleration for the section double dec = param(12); // the deceleration for the section AGV agv = section.agv; The default implementation of this hook is: return addkinematic(kinematics, dist, 0, 0, peakSpeed, acc, dec, startSpeed, endSpeed, startTime, KINEMATIC_TRAVEL); If you implement this hook, your code must satisfy the following: You must add kinematics with the addkinematic() command using KINEMATIC_TRAVEL. Distances defined with addkinematic() should be exclusively defined on the x axis, i.e. the 3rd and 4th parameters of addkinematic() should always be 0. The cumulative distances of the x parameters of all addkinematic() calls should be exactly dist (param(4)). The earliest start time for any addkinematic() call must be no earlier than startTime (param(5)). If adding multiple kinematics with addkinematic(), then those kinematics should not overlap in time. The final end speed must be less than or equal to the passed endSpeed (param(7)). If your kinematics result in an end speed that is less than the passed endSpeed, then you must set endSpeedOut->value to the resulting end speed. You must return from this hook the final end time at which the AGV has traveled the full distance. addRotation This hook is called as part of the lookahead allocation/kinematics step. It is only called when the AGV must stop and rotate to a new direction, based on its rotate threshold . The code header for this hook should be as follows: treenode kinematics = param(1); // the kinematics node to add kinematics to double rotation = param(2); // the angle, in degrees, that the AGV must rotate double rotSpeed = param(3); // the AGV's rotation speed double startTime = param(4); // the time at which the AGV has come to a stop and can start rotating AGV.TravelPathSection fromSection = param(5); // the path section that the AGV is transitioning from AGV.TravelPathSection toSection = param(6); // the path section that the AGV is transitioning to The default implementation of this hook is: return addkinematic(kinematics, 0, 0, rotation, rotSpeed, 0, 0, 0, 0, startTime, KINEMATIC_ROTATE); If you implement this hook, your code must satisfy the following: You must add kinematics with the addkinematic() command using KINEMATIC_ROTATE. Distances defined with addkinematic() should be exclusively defined on the z axis, i.e. the 2nd and 3rd parameters of addkinematic() should always be 0. The cumulative distances of the z parameters of all addkinematic() calls should be exactly rotation (param(2)). The earliest start time for any addkinematic() call must be no earlier than startTime (param(4)). You must return from this hook the final end time at which the AGV has rotated the full rotation."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AGVNetworkTool/AGVTypes/AGVTypes.html",
        "title": "AGV Types",
        "content": "Overview and Key Concepts Within FlexSim's AGV system, AGV Types allow you to define one or more types of AGVs. This usually correlates with a specific make and model of AGV. Each AGV type defines the following behaviors for AGVs of that type. Acceleration Deceleration Forward Max Speed Reverse Max Speed Battery Capacity Battery Depletion Rate Battery Recharge Rate Rotation Behavior Trailer Attachment Behavior You use a table to enter these different values. In this table, max speed attributes are broken out by both path class and load type , whereas acceleration, deceleration, and battery depletion attributes are broken out by load type . When you define multiple AGV Types, you need to specify which AGVs are associated with which AGV Type. You do this by clicking on the AGV in the 3D view, and then specifying the AGV Type in the AGV Traveler Properties panel. The AGV Types Tab The AGV Types tab has the following properties: You can get to the AGV Types page by right-clicking on a Path or Control Point and choosing AGV Network Properties. Path Classes Here you can add, remove, reorder and rename the set of Path Classes for the model. Path Classes are specifically used for breaking out AGV max speeds by path. When you add a Path Class, a new speed row associated with that Path Class will be added to each AGV Type table for both forward and reverse speed. Load Types Here you can add, remove, re-order and rename the set of Load Types for the model. Load Types are a user-defined list defining categories for what an AGV is carrying. This allows you to break out AGV speeds by the AGV's current load. The load type is resolved at the beginning of each travel operation, via the Initialize Travel field. Initialize Travel This is a trigger that is fired at the beginning of each travel operation. The primary objective of this trigger is to set the AGV's current Load Type. AGV Types List Here you can add, remove, re-order and rename the list of AGV Types for the model. AGV Type Spec Table In the AGV Type Spec Table you define max speeds by Path Class, Load Type and AGV direction, as well as acceleration, deceleration, non-idle battery usage, and rotation speed. Battery Levels and Usage Each AGV Type has a defined Battery Capacity (in Amp Hours), Idle Battery Usage (in Amps), and Recharge Rate (in Amps). Additionally, each AGV Type has a non-idle Battery Usage (in Amps) broken out by Load Type. Each AGV starts the simulation at its maximum battery capacity, and then will track its battery usage over the course of the simulation. Whenever it is idle, its Idle Battery Usage applies. Whenever it is doing a travel operation, its battery usage is based on its current Load Type. If you set the AGV to recharge, it will recharge at its recharge rate until it is full or it starts its next travel operation, whichever comes first. To query battery level, start a recharge, or manually set the battery level, etc., see the documentation for the agvinfo() command. Stop and Rotate Threshold The stop-and-rotate threshold lets you define a threshold by which the AGV will stop and rotate to the direction of a path it is transferring to, using the rotation speed defined in the table above. If the difference in direction is greater than the threshold then the agv will stop and rotate. Otherwise it will simply travel onto the path without stopping. If your AGVs can turn 'on a dime', as many modern Autonomous Mobile Robots (AMRs) can do, then this value should be less than 180. Otherwise you should leave this value at 180 degrees, and define paths that do not require in-place turning. Switch to Reverse/Forward Threshold Defines an angle threshold, in degrees, by which AGVs will reverse their travel direction. When an AGV travels from one path to another, it will check the difference in travel direction for the respective paths, and if it must change direction by more than this amount in transferring to the new path, then it will stop and reverse its direction before continuing onto the path. If this threshold is above 180 degrees, then an AGV will always travel oriented forward, even when it would normally reverse direction from a previous stop. This should be used in conjunction with the rotate threshold to make the AGV turn with a rotation speed to get oriented in the direction it is going. You can specify two different thresholds here: one for switching to the reverse direction, and another for switching to the forward direction. If they are different, then the AGV will 'prefer' traveling in one direction over another. If you want your AGV to prefer traveling forward, then make the Switch to Forward threshold less than the Switch to Reverse threshold. Then the AGV will more readily switch back to traveling forward after traveling in reverse. Attaching Trailers You can also make the AGV attach loaded items as trailers to the AGV. This will make the loaded items trail behind the AGV on its path, instead of being carried on the AGV. Check the box Attach Loads as Trailer , and then define the Trailer Gap , which is the distance of the gap between the back of the AGV and the front of the trailing item."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AGVNetworkTool/ControlPointConnections/ControlPointConnections.html",
        "title": "Control Point Connections",
        "content": "Overview and Key Concepts Control point connections are logical named connections between control points. They associate control points with each other logically (as opposed to paths, which associate control points navigationally ). While control point connections have \"best-practice\" names and meanings, the specific meaning of control point connections (i.e. how specific control connections drive the logical execution of a model), are not hard-coded into the internal AGV navigation logic. Their meanings are ultimately dependent on how you, or the process flow you decide to use, imbue these control point connections with meaning. The result is an incredibly flexible and powerful way to define AGV logic in FlexSim. See Building AGV Network Logic > Control Point Connections for more information. The Control Point Connections Tab The Control Point Connections tab has the following properties: You can get to the Control Point Connections page by right-clicking on a Path or Control Point and choosing AGV Network Properties . For each Control Point Connection, you can define whether or not its visible in the 3D view, and its color. You can also add, remove, and rename connections as needed. Using Lists If you check the List box for a connection, all of those connections in the model will be added to a global partitioned list. This allows you to easily define AGV control logic with a process flow. When an AGV arrives at a given destination, you can decide what to do by pulling from various list partitions associated with the AGV's current control point, such as, find a control point near here that has work that the AGV can do, or find a parking spot to go to, or continue to the next point to look for work. These operations can be done by pulling from the current control point's partition of the global list. Connection Types A Control Point Connection has one of three possible connection types: Control Point One-Way - This connection type means the connection is a one-way connection from one Control Point to another Control Point. In other words, when you make one of these connections from Control Point A to Control Point B, Control Point B will not have a connection back to Control Point A. Control Point Two-Way - This connection type means the connection is a two-way connection from one Control Point to another Control Point. In other words, when you add one of these connections from Control Point A to Control Point B, a connection from Control Point B back to Control Point A will automatically be created as well. When you add one of these connection types, you can make it so that the reverse connection (B back to A) connects back using the same connection type (the To Self option), or using a new connection type. Technically the two-way connection doesn't give you any added capability over the one-way because you can do this same functionality using one-way connections by manually adding one-way connections in both directions. However, this can save time in creating the connections if needed. Object Two-Way - This connection type represents a two-way connection from a Control Point to a model object. When you add one of these connections, the Control Point can accesss the object through that connection, and the object can access the control point through the same connection."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AGVNetworkTool/AccumulationTypes/AccumulationTypes.html",
        "title": "AGV Accumulation Types",
        "content": "Overview and Key Concepts Accumulation Types let you define parameters for accumulating paths, i.e. paths on which AGVs will detect proximity and avoid collisions with each other. You can get to the AGV Accumulation Types page by right-clicking on a Path or Control Point and choosing AGV Network Properties. The Accumulation Types Tab The Accumulation Types tab has the following properties: Add, remove, rename and re-order Accumulation Types through the combobox and buttons at the top of the page. To assign a path an Accumulation Type, click on the path, and in its Quick Properties on the right, choose the desired type from the Accumulation Type drop-down. Allocation AGV Accumulation is separate and distinct from the AGV Control Point allocation mechanism. AGVs will continue to allocate ahead to Control Points while on accumulating paths. Thus if you want to allow more than one AGV between Control Points on an accumulating path, you should increase the Max Allocations value for the Control Points on that path. Proximity Detection These properties define how two AGVs will detect proximity with each other while on a common accumulating path. From Front AGV Edge To Behind AGV Edge - This defines the AGV edges used to determine proximity. Usually this will be the default: Front AGV <Trailing Edge> to Behind AGV <Leading Edge>. This will evaluate the distance from the back of the AGV ahead to the front of the AGV behind. You could also choose something like Front AGV <Center> to Behind AGV <Center>, which would evaluate the distance from center to center. Stop Threshold - This is the proximity distance at which an AGV will go into a \"proximity stop\" state, and slow down to a stop. Use as Target Stop Spacing - If checked, then if an ahead AGV is stopped, the stop threshold defines the target stop spacing. Stopped AGVs will thus accumulate with this stop spacing. In other words, an AGV approaching a stopped AGV will begin decelerating to stop BEFORE the stop threshold (as a proximity distance) is breached. The AGV will instead start decelerating such that it comes to a stop with the stop threshold as its spacing behind the ahead AGV. In situations where both AGVs are still moving, the stop threshold will continue to be used in regular proximity detection. Added Trailing Time - In addition to direct distance-based proximity detection, you can also include time-based proximity detection. In other words, you may want AGVs to follow n seconds behind each other, in addition to (or instead of) following m meters behind each other. When you add time-based trailing, AGVs will enforce more spacing between themselves as they travel faster. For example, an added trailing time of 5 seconds means that, when the AGV is traveling 1 meter per second, it must stay 5 meters behind the AGV in front of it, whereas when it is traveling at 2 meters per second, it must stay 10 meters behind, etc. Resume Threshold - The proximity distance at which an AGV can resume its travel after going into a \"proximity stop\" state. The resume threshold must be greater than the stop threshold. Plus Time - An optional additional time, started when the Resume Threshold is reached, that the AGV will wait before resuming from a \"proximity stop\" state. Intersections When you define an Accumulation Type for a path, the AGV network will treat intersections on that path as allocations. Similar to the way AGVs must allocate Control Points and Control Areas, AGVs must allocate the intersection points on an accumulating path before proceeding past those intersection points. In the Accumulation Types page you define stop distances, which are distances before the intersection where the AGV must stop before an intersection point if the AGV cannot allocate it, as well as clear distances, which are distances after passing the intersection point where AGVs will release the intersection and allow other AGVs to claim it. Each of these distances are split out by whether the AGV is entering, exiting, or on the path. If already on a path or staying on a path, the distances are split out by the path geometry, i.e. whether or not the intersection branches out away from the AGV or toward it. Intersection Stop Point Here you define the stop distances for an intersection. For each distance, you define the distance itself as well as an AGV edge, which determine what part of the AGV should stop at the stop distance. Usually stop distances will be based on the leading edge of the AGV. When you click in a given field, the diagram on the right will display the distance / edge that you are defining, to help you figure out what exactly the field defines. Path Entry - This defines the stop distance and agv edge associated with entering a path. On Path Long - This defines the stop distance and agv edge associated with approaching an intersection when already on a path. It is the \"long\" stop distance because it will be applied to intersections that branch out toward the AGV, and thus require the AGV to stop farther away from the intersection point in order to provide room for merging AGVs. On Path Short - This defines the stop distance and agv edge associated with approaching an intersection when already on a path. It is the \"short\" stop distance because it will be applied to intersections that branch out away from the AGV, hence the AGV can stop closer to the intersection without causing issues. Prioritize Control Point Lookahead - If checked, the stop point / allocation point for path transfers will be adjusted when there is a control point before an intersection, to ensure that the control point lookahead mechanism will happen before allocation of path transfers. This can prevent gridlock in some situations. As an example of using this, let's say you have configured the stop points so that the AGV's lead edge will stop 1 meter short of a given intersection if it can't allocate the path transfer. Then you place a control point closer to the intersection point, let's say at a point where the AGV's lead edge will be 0.5 meters from the intersection. If you have checked the \"Prioritize\" box, then the point of allocation for the path transfers will be adjusted forward, so that, instead of stopping 1 meter short to allocate path transfers, the AGV will travel to the control point, then lookahead to allocate the next control point, BEFORE attempting the path transfer allocation. This can resolve potential gridlock issues, especially since you can manually adjust things by placing control points and control areas in certain locations, and blocking will always happen as part of control point/area mutual exclusion. Intersection Clear Point Here you define the clear distances for an intersection. Like with stop distance, you define the distance itself as well as an AGV edge. Usually clear distances will be based on the trailing edge of the AGV. When you click in a given field, the diagram on the right will display the distance / edge that you are defining, to help you figure out what exactly the field defines. On Path Long - This defines the clear distance and agv edge associated with clearing an intersection when still on the path (not exiting). It is the \"long\" clear distance because it will be applied to intersections that branch out toward the clear point, and thus require the AGV to travel farther away from the intersection point before clearing it. On Path Short - This defines the clear distance and agv edge associated with clearing an intersection when still on the path (not exiting). It is the \"short\" clear distance because it will be applied to intersections that branch out away from the clear point, hence the AGV can clear it closer to the intersection point without causing issues. Path Exit - This defines the clear distance and agv edge associated with exiting a path. Special Rules There are a few special rules that apply to allocating intersection points. Pure On-Path Allocations - The AGV network tries to make basic proximity detection take precedence over intersection stop and clear points. Thus, if an AGV is already on a path and already has an AGV ahead of it for which it is detecting proximity, and if it is not exiting the path at that intersection, then the AGV will be allowed to allocate the intersection point before the ahead AGV has cleared it. Since it is already detecting proximity on the ahead AGV, it is OK to have a simultaneous allocation of the intersection point because the basic proximity detection will already avoid proximity errors. End-To-End Path Transfers - When transferring from the end of one path to the beginning of another path, the network still treats that as an \"intersection\" between two paths, i.e. it still requires an allocation of the intersection point. However, again if it can detect that, in transferring to the new path, the AGV will still be detecting proximity with the same AGV that it was detecting before the transfer, then it will go ahead and allow the intersection point to be allocated simultaneously by both AGVs, since the basic proximity detection will already prevent proximity errors. Note that this only applies to transfers between two paths of the same Accumulation Type. If the Accumulation Type is different, it will treat it like a regular intersection allocation. Troubleshooting AGV Accumulation When you use accumulation in an AGV system, you may run into deadlock issues. See Troubleshooting AGV Accumulation for more information on how to remedy these problems."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AGVNetworkTool/DeallocationTypes/DeallocationTypes.html",
        "title": "AGV Deallocation Types",
        "content": "Overview and Key Concepts Deallocation Types let you define at what point AGVs should deallocate the Control Points and Control Areas that they have allocated. These settings let you customize AGV allocation mechanism to your specific needs. The Deallocation Types Tab You can get to the Deallocation Types page by right-clicking on a Path or Control Point and choosing AGV Network Properties. The Deallocation Types tab has the following properties: Deallocation Types List Here you can add, remove, re-order and rename each Deallocation Type. Edge Definition This defines which \"edge\" of the AGV will determine the deallocation time. Options are: Center - Deallocation will be triggered when the AGV's center passes the given point. Trailing Edge - Deallocation will be triggered when the AGV's trailing edge passes the given point. Leading Edge - Deallocation will be triggered when the AGV's leading edge passes the given point. Travel Point Definition Defines the associated point on the path that determines deallocation time. Options are: Arrives at Next Control Point - Deallocation will be triggered when the AGV's defined edge arrives at the next Control Point. For Control Areas, this is the next Control Point after the path exits the Control Area. Passes Current Point - Deallocation will be triggered when the AGV's defined edge passes the current point. For Control Points this is the Control Point itself. For Control Areas, this is the point on the path where the AGV's defined edge exits the Control Area. Allocation Wait Points Only This property is only relevant when you have chosen Arrives at Next Control Point above. When checked, it will only consider as a 'next control point' control points whose Allocation Wait Point property has been checked. This is checked by default, meaning it will ignore non-waitable control points on its path in determining what the 'next' control point is. Plus Distance This is an additional distance that will be added onto travel before deallocating the object. Plus Time This is an additional time to delay deallocation, after the defined edge has reached the travel point plus the distance."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/AStar/AStar.html",
        "title": "A* Navigation",
        "content": "Overview and Key Concepts A* (pronounced \"A Star\") is a well-known search algorithm used to find optimals paths between points. The algorithm uses a grid of nodes that Task Executer objects (travel members) travel through. Each node specifies in which direction travel members can move. The algorithm will look at nodes in the direction of travel and determine which direction is the fastest, including traveling diagonally between nodes. The grid of nodes are modified by creating barriers restricting where the travel members can move or even influencing them to travel along certain paths. The General Tab The General tab has the following properties: Surround Depth This number specifies the number of nodes that are placed around the outside of the navigator's outer most barriers. This number must be an integer and be greater than 0. Smooth Rotations When checked, travelers will smoothly rotate when turning. Snap Dividers to Grid When checked, dividers will snap between points of the A* grid. Cache Paths When checked, the A* Navigator will cache paths to be reused in order to save processing time. Note that the A* Navigator can only cache paths if you are not using dynamic barriers . If you need path caching, you should use conditional rules if possible. Members The box on the left selects which members lists to view. Clicking the Properties button opens the properties window of the selected member. The box on the right displays all of the objects at the currently selected status. Icon Description Click to sample an object in the model to add as a member. Click to open an object selection window and choose objects to add as members. Remove the selected member. The Behavior Tab Path Routing Defines how nodes in the travel grid will be searched. Options are as follows: Right Angles Only - The A* path search will only find paths that travel vertically or horizontally. No diagonal travel will be used. Diagonals - The A* path search will allow for diagonal travel. Travelers can simultaneously travel one unit vertically and one unit horizontally. Deep Diagonals - The A* path search will allow for deep diagonal travel. Travelers can simultaneously travel two units vertically and one unit horizontally, or vice versa. Strict Diagonals If checked, the traveler will only travel diagonals if the grid travel directions allow the traveler to travel using both direction orderings, namely both \"x then y\" and \"y then x\", to get to the diagonal destination. Checking this box will ensure that travelers don't overshorten their path when going around corners. Collision Avoidance When checked, travelers will allocate nodes in their path and deallocate them once passed. This prevents two travelers from traveling through the same nodes at the same time. Ignore Inactive Memebers When checked, the collision avoidance algorithm will ignore allocations made by inactive travelers. After a traveler has arrived at its destination and ended active travel, the traveler will be essentially invisible to the collision detection algorithm. This means that travelers will run over other travelers that are not actively traveling. While travelers running over each other is not desirable, it is somewhat complex to figure out what a traveler should do when it is idle to get out of the way of other travelers who need to go to the same spot. In a humans-as-travelers situation, generally people just figure out how to make space for each other without much delay penalty. From this perspective of delay penalties, letting idle travelers ignore each other essentially simulates the same desired behavior as humans naturally getting out of each other's way. Deallocation Time Offset Defines an additional time to wait before deallocating a grid node that a traveler is leaving. By default (0.00) a traveler will release its node as soon as it begins to travel to the next node. When this value is greater than zero, the traveler will wait this additional time before releasing the node. Stop for Turns When checked, travelers who need to turn to a new direction will stop and rotate to the new direction. Turn Speed Defines the turn speed to use when travelers stop and rotate for turns. Turn Delay Defines an additional time delay associated with stopping for turns. When the traveler must stop and turn, it will add this delay time to the time it takes to the turn to the new direction. Route By Travel Time If checked, the A* search algorithm will use travel time instead of travel distance as the cost function in assessing path desirability. The primary difference in using this is that, when travelers stop for turns, it will calculate the time it takes to turn, and apply that to the cost function. Default Preferred Path Weight This is the default path weight for any preferred paths without a custom weight. Valid values are numbers between 0 and 1. Setting a path to have a path weight of 0 will revert the path to using this default value. The Visual Tab Use these properties to turn on or off the visiblilty of A* features. Barriers When checked, Barriers will be visible. Grid Bounds When checked, a blue box is drawn indicating the bounds of the grid. Grid Nodes When checked, displays the individual nodes of the grid. These are yellow lines that indicate the directions a traveler can move from that node. Members When checked, displays a blue circle under travelers and a blue rectangle under Fixed Resources connected to the A* Navigator. Allocations When checked, lines are drawn from travelers to the nodes they have allocated. Heat Map When checked, a heat map is generated based on the option selected in the dropdown. The Max Heat Value corresponds with the selected dropdown option and defines the threshold for coloring the heatmap. Travel Threshold When checked, red and blue diamonds will be displayed around the highlighted object in the 3D view. When a traveler is given a travel task to travel to this object, the A* Navigator will compute the shortest path between the traveler and any of the nodes marked by a red diamond. The traveler will then begin traveling following this shortest path. As soon as the traveler reaches any of the nodes marked by a blue diamond the traveler has arrived at the object and the travel task is complete. Debug/Show Routing Algorithm This checkbox is used primarily for debugging purposes. When checked, the A* search algorithm will save additional data that tracks each traveler's last path finding operation. To see this information: Check the Debug/Show Routing Algorithm box. Press the Apply button. Run the model. Click or shift-select a traveler. When you select the traveler, you'll see a set of dots on the A* grid that are associated with that traveler's last path finding operation: Green dots represent nodes that are in the A* open set. Red dots represent nodes in the closed set. The blue dot shows the node that is being resolved from the open set to the closed set. Text also appears beside each node showing the formula g + h = f, where g is the cost to get to a node, h is the heuristic calculation to get from the node to the destination, and f is the sum of the two. Adjust the Completion Percent tracker to see the routing algorithm as it progresses. The Conditional Rules Tab Use this tab to define conditional rules by which barriers, dividers, preferred paths, or bridges will be applied in the routing algorithm. A* Grids A*'s path search uses grids to resolve travel paths. A grid is a two-dimensional plane that encompasses a travel area. After you've dragged barriers, dividers, etc. into a model, if you reset the model, you will see a grid represented by a blue rectangular border surrounding those objects. The grid is a two-dimensional array of nodes, with a user-defined distance between each node. A* travelers move by traveling from one node in the grid to another. Barriers and dividers determine which adjacent nodes may or may not be traveled to from a given node. Every A* model has at least one grid. That grid will automatically grow to encompass all the barriers, dividers, preferred paths, etc. that are part of your A* model. Also, you can add additional grids by dragging them from the library on the left. You can move and resize grids in the 3D view as you would any other object. You can also define the node spacing of a grid, as well as its z position, through its Properties pane. The Grid object uses the following properties panel: Grid Divider/Path Properties Panels The Divider and Path objects use the following properties panel: Divider/Path Barrier Properties Panels The Barrier object uses the following properties panel: Barrier Node Allocation / Collision Avoidance If you have checked the Collision Avoidance checkbox, the A* module will use a node allocation mechanism to ensure objects do not collide with each other. When a traveler begins a task to travel to a new destination, it will perform the following high-level logic: Calculate the Path - The logic will first use the standard A* search algorithm to resolve a path from the traveler's current location to the destination, via adjacent nodes in the A* grid . Build Kinematics / Schedule Node Allocations - Next the algorithm will build kinematics to travel that path. As the algorithm builds kinematics, it 'schedules' node allocations along the path. Essentially it will store data saying, 'Task Executer Y needs to allocate node X from time A to time B'. So every node will have data on it saying: from time A to time B, I'll be allocated by TE Y, from time C to time D I'll be allocated by TE Z, etc. Create Next Event - As long as it doesn't find any allocation time 'collisions' in building out these kinematics (and there are no bridges on the path), then it will just build the kinematics for the full path, schedule the allocation timings, and create the final event for when it arrives at the destination. However, if it finds a time collision as it schedules the allocations, the TE that allocates the node later will create an onBlock event for the time that the node would need to be allocated. When this block event happens, the object will go into a blocked state, wait until the node is released, and then start the whole process over from its current point. The node allocation mechanism only allocates nodes that are on the traveler's path, as well as nodes that are between diagonally adjacent nodes if you have configured travelers to travel diagonally. This means that if you want this allocation algorithm to properly avoid collisions between travelers, your node size must be large enough to fit an entire traveler. If your grid node size is too small, then travelers will overlap. Alternatively, you can disable the A* node allocation mechanism, and implement your own collision avoidance scheme using the A* network in conjunction with the Agent module . Acceleration / Deceleration The A* network also supports acceleration and deceleration for objects traveling on the network. Generally this is intended to enable simulation of free-roaming autonomous mobile robots, not necessarily people. If you are simulating people, such as in the people module, some of the effects of using acceleration / deceleration may be disadvantageous for that scenario (see below), so it may be better to just set their acceleration and deceleration properties to 0. The Create Person activity automatically does this when attaching a created person to the A* network. Things to consider when using acceleration / deceleration: Node Allocation Timing - When travelers have non-zero deceleration, it changes the timing of node allocation . Travelers will allocate a node at the point in time when, if the allocation fails, the traveler will still have space to decelerate to stop one grid node short of the failed allocation node. The result is that, for smaller non-zero decelerations, the travelers will allocate much farther ahead, blocking the path for others. Non-Zero End Speeds - When a travel/offset/load/unload task has a non-zero end speed, the traveler will actually finish the task early, before the traveler has fully arrived at the destination. This is to prevent the objects from 'hitting a wall', i.e. being forced to instantaneously stop when they are not immediately given a subsequent task or are blocked from moving forward. Instead they allocate farther ahead, and then finish the task early so they can decelerate to arrive at the destination. If they are immediately given a new task, they'll start it from the shortened point where they finished the previous task. The default end speed of a TASKTYPE_TRAVEL task is to end at the traveler's max speed. This is because travel tasks are often followed immediately by offset/load/unload tasks, and thus you often want to finish this task at max speed so they can continue straight into the next task without decelerating. When using A*, this means they will end their task early. If you want the traveler to always travel all the way to the destination, then either give it a deceleration of 0, or make the end speed of the task 0. A* Traveler Events When you attach a Task Executer to the A* network, the object will acquire several additional events: On AStar Block Fired when the traveler is the later allocator of a grid node allocation time collision , at the point when the traveler would otherwise need to allocate the node. On AStar Reroute Fired when a traveler has blocked, and the blockage has created a deadlock cycle of allocation requests. Here the A* module runs logic to divert one of the members of the deadlock cycle to go around the deadlock. On AStar Continue Fired when a traveler may continue from a blocked state, i.e. when the node it is attempting to allocate has been released. On AStar Bridge Arrival Fired when a traveler arrives at an A* bridge . On AStar Bridge Continue Fired when a traveler continues from an A* bridge . On AStar Calculate Path Fired when a new path is calculated to a destination. On AStar Navigate Path Fired when a traveler has built its kinematics and scheduled its node allocations, either to the final destination or to its next 'event' point, e.g. a block point or a bridge arrival point."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/CalculatedTable/CalculatedTable.html",
        "title": "The Calculated Table",
        "content": "Overview and Key Concepts The Calculated Table is used to analyze data found in other tables. Its primary component is a SQL query, which can be used to filter, sort, aggregate, or generate additional data. The result of that query is dumped to a bundle, called the result table. From there, the data can be exported or charted. The other options in the Calculated Table deal with how often to run the query and how to format the results for display purposes. By default, the Calculated Table interface is meant to help you build a SQL query. This interface is called the Query Builder. The Query Builder allows you to think about the query you want from a conceptual standpoint, without worrying about exact SQL syntax. The Calculated Table can also be used without the query builder, where you can write a custom query. For more information on writing SQL queries, see the SQL Queries page. The Calculated Table can be accessed from the Toolbox. The Query Builder Interface The Query Builder Interface builds queries by considering five inputs: Tables Metrics Subsets Partitions Sorting Required Inputs The simplest query requires one Table and one Metric; all other inputs are optional. The following sections describe the concepts represented by each kind of input. Tables A SQL query operates on one or more input tables. The Query Builder allows you to specify which table (or tables) you want to use as input. You must specify at least one input table, or the Query Builder won't try to build a query. If you specify more than one table, then you will need to also specify how to join the extra tables. The Query Builder will allow you to build queries involving the following kinds of tables: Global Tables Statistics Collectors Calculated Tables Chart Templates Experiment Result Tables The Query Builder will use the input tables you specify to build the FROM statement in the final query. Metrics A metric specifies the data you want to retrieve from one of the input tables. Metrics look at data in a column. For example, you could use a metric to get the average of the values in a particular column. You could also use a metric to retrieve all the values from a particular column. You must specify at least one metric; otherwise, the Query Builder won't try to build a query. The Query Builder will use the metrics you specify to build the SELECT statement. If the Metric Layout is set to add a new column for this metric, then the Query Builder adds a single expression for this query. If the layout is set to use shared name/value columns, then the Query Builder will create a query that runs one per metric with this layout. The Metric Name will be put in a column called Metric Name, and the value will be put in a column called Metric Value. When all the sub-queries are concatenated, the name and value columns will be shared across all sub-queries. Incompatible Metrics There are three kinds of metrics: non-aggregating metrics, aggregating metrics, and window function metrics. Aggregating metrics have a form of the word \"aggregate\" in their name. Currently, the only window function metric is the Running Total metric. All other metrics are non-aggregating metrics. Be sure that a given query only contains one kind of metric; otherwise, the query builder may not work. Subsets Subsets allow you to specify filters for your data. A filter is a test for whether or not to include a table row in the final result. You can have mutliple filters as part of a subset. Only rows that pass all the filters will be included in the result table. The Query Builder uses each subset to build a WHERE statement. If you have more than one subset, then the query will be written once for each subset (the same query, but with different WHERE statements), and the resulting queries will be concatenated with UNION ALL. If you have any subsets, the QueryBuilder will add a column called Subset to the result table, with the name of the subset as a value. Subsets Without Filters You can create a subset without filters. This makes it easy to compare the results of all data points with the results from other subsets. Subsets and People/HC Groups In many queries, you may want to compare values between resource groups. There is a special kind of subset that helps you do this, described in the Subsets section. Partitions A partition categorizes each data point. The result table will then show the category of each result row. If you have aggregation (or window function) metrics, then the aggregation will be performed for each value in the partition. The Query Builder uses partitions to build a GROUP BY statement. If a metric is a window function, then partitions are used in the PARTITION BY statement of the metric's SELECT expression. The Query Builder also adds a column for each partition to the SELECT statement. Sorting Sorting applies only to the result table. If you choose to sort, then the resulting query will be sorted by subset (if any), and then by each partition (if any). If there are no partitions, the final query will not be sorted. The Query Builder will build an ORDER BY statement, if sorting will occur. If there are subsets and partitions, then the query builder will form a nested query. Example 1 - Averaging Data with a Metric This example will cover how to use the Query Builder interface to build a query that averages data in a column in a Global Table. You will need to re-create the Global Table and create a new Calculated Table to complete this example. For more information on Global Tables, see the Global Tables topic. Global Table This example assumes that the following Global Table exists in the model: Configuring the Tables In the Tables group box, lick the button, choose Global Tables, then choose GlobalTable1. Doing this tells the Query Builder that you want to get data from GlobalTable1. Configuring the Metrics In the Metrics group box, click the button, and choose Aggregation of column Set the Metric Name to AvgCycleTime Set the Aggregation to Average Doing this tells the Query Builder that you want to get the average of the CycleTime column as a metric. Build and Run the Query Go to the Calculations tab, and click the Update button: On this tab, you can view the query made by the Query Builder, as well as the result of that query. In this case, the result table has a single row and column, showing the average of the CycleTime column. Example 2 - Filtering and Comparing Data with Subsets This example will cover how to use the Query Builder interface to build a query that averages data in a column in a Global Table. You will need to re-create the Global Table and create a new Calculated Table to complete this example. For more information on Global Tables, see the Global Tables topic. Global Table This example assumes that the following Global Table exists in the model: Configuring the Tables In the Tables group box, click the button, choose Global Tables, then choose GlobalTable1. Configuring the Metrics In the Metrics group box, click the button, and choose Aggregation of column Set the Metric Name to Orders Set the Aggregation to Count Doing this tells the Query Builder that you want to count the number of rows where the OrderNum is not null. Configuring the Subsets At the top of the Subsets tab, click the button to add a new Subset. Set the Subset Name to Total Use the same button to add another new Subset. Set the Subset Name to High Priority In the Subset Filters group box, click the button to add a filter to the current subset. Choose \"Compare column and value\" Set first dropdown to \"IsHighPriority\" Set the second dropdown to \"=\" Adding two subsets tells the query that you want to run the query twice, once with all the rows from the global table, and once only with rows that have a 1 in the IsHighPriority column, and that you would like both queries to be shown in the same table. Build and Run the Query Go to the Calculations tab, and click the Update button: On this tab, you can view the query made by the Query Builder, as well as the result of that query. In this case, the result table has two rows and two columns. The first row comes from the first subset, so it shows that the total number of orders is 10. The second row comes from the second subset, which only considers high priority orders. The count of those orders is only 4. Properties The Calculated Table has five tabs with various properties. These properties will be explained in more detail in next five sections. The Tables/Metrics Tab The Tables/Metrics tab provides an interface that allows you to specify the tables and metrics used by the Query Builder. The Tables/Metrics tab has the following properties: Tables The Tables area allows you to specify the list of tables to use in the Query Builder. If more than one table is specified, the interface will provide dropdowns that enable you to specify which columns to use in the join statement. If the table is accessible only by name (such as the Experiment result tables), then first field in the table's panel will allow you to edit the name. Metrics The Metrics area allows you to specify the list of metrics to use in the Query Builder. Each metric will allow you to edit the Metric Name property, as well as the Metric Layout property. Additional options will vary, depending on what kind of metric is chosen. Most will involve picking at least one column from a dropdown list. Unique Metric Names Make sure each metric has a unique name. The Query Builder will not be able to build the query if there are duplicate names. The Subsets Tab The Subsets tab provides an interface that allows you to specify the subsets used by the Query Builder. The Subsets tab has the following properties: Subset List The Subset List area is the area above the Subset Filters group box. This area allows you to specify each of the Subsets you would like to create. The following list explains each of the properties in this area: - Adds a new subset. There are two possible options: Add subsets for People Groups or Objects - Adds a special kind of subset that makes it easy to compare group and individual statistics for People/HC groups and objects. Add basic subset - Adds a general use subset. - Duplicates the selected subset - Moves the selected subset up in the list - Moves the selected subset down in the list - Deletes the selected subset Subset Name - Displays and allows you to edit the name of the selected subset Subset Filters The Subset Filters area shows the list of filters for the selected subset, if it is a basic subset. You can add a new filter with the button. Depending on which kind of filter you add, the panel for that filter will have properties for configuring that filter. Options and Addtional Filters If the selected Subset is a People/HC Group subset, the following interface will appear: This interface allows you to choose which groups you would like to compare in a table. If this Query Builder is part of a Chart Template, then those groups will appear on the chart associated with the template. It has the following properties: From Group - Allows you to specify which People/HC resource group to use. This field will be set to the correct value if the list of tables includes one of the resource group tables - StaffGroups , LocationGroups , TransportGroups , or EquipmentGroups . Include data for - Select what kind of data for each selected group should be included. There are three possible options: Each group as a whole - creates one subset per selected group that only include rows that deal with objects from the whole group. Each member of each group - creates one subset per member of each selected group. Each created subset only includes rows that deal with the specific member. Each group and each member - creates one subset per group as well as one subset per member of the group. Subgroups - Use the checkboxes to choose which groups to include in the final table. Select all subgroups - Press this button to select all subgroups shown in the list except the overall group. Clear all subgroups - Press this button to clear all subgroups shown in the list except the overall group. Additional Filters - If you require filters in addition to showing only group or individual rows, you can use this section to add them. They will be combined with the group or individual filters using an AND statement. The Partitions/Sorting Tab The Partitions/Sorting tab provides an interface that allows you to specify the partitions used by the Query Builder, and whether or not the results should be sorted. The Partitions/Sorting tab has the following properties: Partitions The Partitions area allows you to specify the way the result table should be partitioned, if at all. Each partition allows you to specify the Partition Name and the Sort Direction . Other properties depend on the kind of partition you have added. Sort Results Check this box to indicate that the result table should be sorted. If there are no partitions, this checkbox will be unavailable. The Calculations Tab The Calculations Tab provides and interface for the two main inputs of the Calculated Table: a SQL query and information about when to update that query. The Calculations tab has the following properties: Update Mode Change this option to choose how often the Calculated Table will update, which means running the query and dumping the results. There are three possible update modes: Manual - Use this option to only allow the Calculated Table to update by clicking the Update button. By Lazy Interval - Use this option to allow the Calculated Table to update on model reset and then at most once per interval (according to the Update Interval specified), and only if necessary. By Interval - Use this option to allow the Calculated Table to update on model reset and then in regular intervals according to the Update Interval specified Always - Use this option to allow the Calculated Table to update as often as neccessary so that the value always appears to be up to date. Update Interval Use this box to set the duration between updates for the By Interval and By Lazy Interval update modes. Query This box contains the query built by the query builder. If you enable direct editing, you can use this box to edit your own custom query. Enable direct editing Use this button if you want to remove the Query Builder interface from the Calculated Table. If you do so, you will be able to write your own query using the Query property. When writing your own query, you can reference any of your model's built-in tables, including Global Tables, Global Lists, Statistics Collectors, other Calculated Tables, and experiment data in this query. However, since the result is dumped into a bundle, each column in the SELECT statement should yield either a number, string, or node value. For more information on writing a valid SQL statement, see SQL Queries . Update Use this button to update the Calculated Table at any time, reguardless of the Update Mode. If the Update Mode is set to Manual, this is the only way the table can be updated. Clicking this button will cause the query to be rebuilt, and the table to be updated. Pop-out Use this button to open a dockable view of the result table for this Calculated Table. Result This table shows the most recent result of the SQL query. The Display Format Tab The Display Format Tab specifies the display format for each column of the result table for the Calculated Table. The Display Format tab has the following properties: Column Display Format Use this table to specify the format for each column in the result table. The list of columns is auto-generated based on the current result table. Object Format Depth This property affects columns that use the Object display format. In this display format, the full path to the object is shown. You can control how many nodes to display in the path with this value. If the value is 0, the full path will be used. If the value is 1, only the name of the node will be used. If it is 2, the path will include the name of the parent node as well as the current node. The General Tab The General tab has the following properties: View Table... Use this button to open a dockable view of the result table. Export Table... Use this button to export the table to a .CSV file. Connected Dashboard Charts Like the Statistics Collector, the Calculated Table shows a list of all Dashboard Charts that reference this table. The Properties button below this list opens the properties of the selected chart (if any)."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/CodeEditor/CodeEditor.html",
        "title": "Code Editor",
        "content": "FlexScript API Reference For information on FlexScript classes, see the FlexScript Class Reference . Overview and Key Concepts The Code Editor window allows you to edit code for picklists and triggers throughout FlexSim. The window can be used as a floating window (default), or it can be docked into the main FlexSim window in any configuration. Just click the tab or the title bar and drag it over the Dock Windows icon. Throughout FlexSim you will see buttons. Clicking this icon will open the Code Edit window and allow you to edit that picklist or trigger's code. Alternatively, many right click menus (like in the Tree Window) have the option to select Explore, then As Code that will also open a Code Edit window. When you open up the Code Editor, you'll likely see some header statements that will look something like this: treenode current = ownerobject(c); treenode item = parnode(1); Within the code window, you can specify whether you want your code to be interpreted as FlexScript or externally linked. You can also check the FlexScript syntax by pressing the button. Code Builders When you are editing code in the Code Editor, or entering values in a picklist field, the Library (left pane) changes to display a list of Code Builders. These Code Builders can be dragged into your Code Editor or picklist field to give you the correctly formatted command. Use the tab key to select each commented section of the template code. i.e., /*\"title\"*/ You can also filter the Code Builder list by typing in the field. Externally Linked Code You can also specify the given field as accessing a function from externally linked code, such as a C++ DLL or Python. In this case you would not provide the code as the text, but would provide the path to the external file as well as the name of the function to call. To create a C++ DLL, you use a special DLL Maker Visual C++ project that is available to download from the FlexSim website. See Connecting to External Code for more information. Properties The Code Editor has the following properties: The tab bar displays the current object and trigger/picklist being edited. Icon Description Displays this help page. Removes all template code. Template code may be found in picklists and triggers and takes the form of: /***popup:Conditional*/ and /** \\nCondition: *//***tag:expression*//**/ Checks syntax for compile errors. Toggles the current code as Flexscript. Toggles the current code as externally linked. The Sampler allows you to insert code into your code editor to reference objects, set labels, get values, etc."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ColorPalette/ColorPalette.html",
        "title": "Color Palette",
        "content": "Overview and Key Concepts A Color Palette is a list of colors. Each color can be associated with a value. You can then look up a color using the value associated with that color, using the Color . fromPalette () method. You can access Color Palettes in the toolbox. Assigning Values to Colors In order to access a color from a Color Palette, you must first assign a value to that color. The value can one of the following types of values: number text node an array containing number, text, or node values Accessing Colors You can access a palette's colors through the Color . fromPalette () method. The most common way to use this method is to pass in a value and the name of a palette. The palette will look up the color associated with the given value, and return that color. If the palette does not have a color assigned to the given value, then the palette will look for any colors that don't have a value assigned yet. If one exists, then the palette will assign the color to the given value and return the color. If there are no unused colors, then the color palette will generate a color, assign the given value to the new color, and return the new color. Using a Gradient A gradient allows you to assign colors to continuous values: The gradient is defined by the set of colors that are assigned to number values. Each of these colors becomes a color stop in the gradient. If you call Color.fromPalette(), passing in a number value and a gradient palette, then that palette will interpolate between assigned colors to return the correct color. The following table shows the colors that would be returned from the palette shown above: Code Returned Color Color.fromPalette(5.5, \"GradientPalette\") Color.fromPalette(18, \"GradientPalette\") Color.fromPalette(32.3, \"GradientPalette\") Color.fromPalette(102, \"GradientPalette\") Color.fromPalette(88, \"GradientPalette\") Color.fromPalette(-5, \"GradientPalette\") When a palette interpolates to find a color, it does not assign that value to the interpolated color. This way, the list of colors remains constant. Gradients apply to all number values If you use a gradient on a palette, all number values will be involved in that gradient. All non-number values will behave as if there is no gradient being used. Properties The Color Palette has the following properties: Name You can use this property to edit the name of the palette. You can also use this property to change which palette you are viewing. Use Gradient If you check this box, the color palette will use the assigned number values to form a gradient. A gradient editor field will appear, allowing you to change the locations of the color stops. Edit Values This button opens a menu. The menu contains options to edit many or all colors and values simultaneously. Color List This property shows the list of colors known to the palette, and also which value is assigned to each color. This list allows you to perform the following operations: You can edit the value assigned to each color. You can edit the given color. You can remove a color. You can reorder the colors. This has no effect on the Color Palette's logic, but it can sometimes be helpful to group certain colors/values together."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ConveyorSystemTool/ConveyorSystem/ConveyorSystem.html",
        "title": "Conveyor System Properties",
        "content": "Overview and Key Concepts The Conveyor System properties window can be used to set the default properties for all conveyor objects in your simulation model. It has two tabs with various properties, which will be explained in the following sections. Accessing Conveyor System Properties To access the Conveyor System Settings dialog box, you must first ensure that there is at least one straight or curved conveyor in your model. Otherwise, the Conveyor System tool will not appear in your toolbox. Once you have a conveyor in your model: Click View on the main menu, then click Toolbox to open the Toolbox. Alternatively, you could access the Toolbox by clicking the Tools button on the toolbar. You'll see several different tools listed in the toolbox. Double-click Conveyor System to open the Conveyor System Settings dialog box. The General Tab The General tab has the following properties: Draw Render Mode When checked, straight or curved conveyors will visually appear to have rollers (for accumulating conveyors) or belts (for non-accumulating conveyors). See Conveyor Visualizations for visual options for simulating roller conveyors. Generic OpenGL Context Render Mode uses modern graphics card features that are not compatible with a Generic OpenGL Context. When using a Generic OpenGL Context, Render Mode will not be enabled. Show Decision Points When checked, decision points will appear as a diamond icon on a conveyor. Show Photo Eyes When checked, photo eyes will appear as a green or red line across a conveyor. Show Transfers When checked, transfers will appear as a square icon on a conveyor. Show Fixed Intervals When checked, conveyors will show a line on a conveyor indicating where the dogs are in a Power and Free conveyor system. See Conveyor Types - Power and Free Settings for more information. Show Mass Flow Rate Change Points When checked, mass flow conveyors will show the lines that separate different densities on the conveyor. See Mass Flow Conveyor for more information. Snap Threshold Conveyors will snap and join together when they are within range of the value indicated in this field. Decision Point Draw Size Determines what size decision points should be drawn visually. Propogate Non-Accumulating Stops to Straddled Conveyors If checked, stopping/blocking items that are straddling multiple non-accumulating conveyors will also stop all upstream conveyors they are straddling (instead of just the conveyor that is driving the item's speed). Photo Eye State Colors These three color panels let you define the colors with which to draw photo eyes that are in the Blocking, Blocked, and Clearing states respectively. The Defaults Tab The Defaults tab has the following properties: You'll notice there are two fields with pull-down menus. From each pull-down menu you can select the default types that are assigned to various conveyor objects when they are first added to the simulation model. For more information about the Type Properties dialog box and different settings for each object, see: Conveyor Visualizations Transfer Types There are also several fields for defining default groups. Here you can enter a name of a group. When objects are added to the model, they will be automatically added as members of the defined group. This is especially useful for categorizing your objects as you build your model, in order to subsequently filter or sort by their group membership when using Property Tables ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ConveyorSystemTool/ConveyorVisualizations/ConveyorVisualizations.html",
        "title": "Conveyor Visualizations",
        "content": "Overview and Key Concepts Conveyor visualizations are global settings that are referenced by model conveyors. They define how the conveyors should look. Properties Visual settings mostly define how conveyors look when drawing in render mode. Render mode can be enabled in Conveyor System Properties . The properties window has the following properties: Surface The surface pane allows you to define visual properties associated with the convey surface. Draw Rollers Check this box to enable the drawing of rollers on the conveyor surface. Diameter The diameter to draw rollers when in render mode. Only used in render mode. Spacing The distance from the center of one roller to the center of the next roller. Should be greater than Roller Diameter. Only used in render mode. Roller Color The color to apply when drawing the rollers. Can be set to use the object's color. Draw Belt Check this box to enable the drawing of a belt on the conveyor surface. Then you can define the texture to be drawn. There are several automatic options, or you can browse for the file. X Repeat The distance between each repeat of the conveyor belt texture, along the conveyor's forward axis. Y Repeat The repeat value for the conveyor belt texture, along the conveyor's left-right axis. You also define a mode for repeating, either Stretch or Tile . In Stretch mode, the repeat value represents the number of times the texture will repeat, independent of the conveyor width. For Tile , the repeat value represents a repeat distance, just like the X Repeat. Belt Color The color to apply when drawing the belt texture. Can be set to use the object's color. Side Skirt The side skirt pane allows you to define visual properties associated with drawing the conveyor's side skirts. Height The height of the conveyor's side skirt. Width The width of the side skirt. Only used in render mode. Vertical Offset Defines the position of the side skirt relative to the conveyor plane. This is defined as a ratio of the Side Skirt Height. Usually the value will be between -0.5 and 0.5. For a value of -0.5, the side skirt will extend down from the conveyor plane. For a value of 0.0, the side skirt's center will follow the conveyor plane. For a value of 0.5, the side skirt will extend up from the conveyor plane. Draw Texture Check this box to draw a texture for the side skirt, instead of drawing a pre-defined shape. Then you can define what texture to use. There are some pre-defined options, or you can browse for an image. Repeat Distance Check this box to define repeat distance associated with the side skirt. This applies both if you are using a side skirt texture, or if you want the conveyor to draw its pre-defined side skirt shape. Side Skirt Color Defines the color to apply when drawing the side skirt. When in non-render mode, this applies to both the side skirt and the conveyor surface. Can be set to use the object's color. Legs The legs pane allows you to define visual properties associated with drawing the conveyor's legs. Repeat Distance The distance between each leg of the conveyor. Only used in render mode. Height Rule Defines how the height of each leg will be determined. Only used in render mode. Leg Height Following Conveyor Height - Legs will be a set height no matter how the conveyor rises or falls. If the conveyor rises, leg bases will rise with it. Leg Height from Lowest Point on Conveyor - Leg height is determined from the lowest point on the conveyor. For example, if the conveyor plane goes from z = 1.00 to z = 5.00, and the Leg Height is defined as 1.00, the leg base will be at z = 0.00 all along the conveyor (lowest point (1.0) minus leg height (1.0)). Leg Base Relative to Model - Legs will extend to a fixed model z position, defined by the Leg Base, no matter how high the conveyor is. Height The conveyor leg height. Only used in render mode when Leg Height Rule equals Leg Height Following Conveyor Height or Leg Height From Lowest Point on Conveyor. Base The leg base z-point. Only used in render mode when Leg Height Rule equals Leg Base Relative to Model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ConveyorSystemTool/TransferTypes/TransferTypes.html",
        "title": "Transfer Types",
        "content": "Overview and Key Concepts Transfers are connections between conveyor objects, represented by a white box on a conveyor in the simulation model. Transfer types are global settings that you can import to any transfer that connects one conveyor to another conveyor. Conveyor-to-conveyor transfers are different from entry transfer types or exit transfer types, which are for transfers to non-conveyor objects. Before using the Transfer Type Properties dialog box, you need to be aware of the differences between a Side Transfer and an Inline Transfer: Side Transfer Inline Transfer Default Definition Any transfer angle that is greater than 45 will be treated like a side transfer by default. Any angle that is less than 45 will be treated as an inline transfer by default. Item Orientation The orientation of the flow items will change after the transfer. The item's leading edge in the upstream conveyor becomes the side edge on the downstream conveyor and vice versa. The orientation of flow items remain the same after the transfer. Gapping When a conveyor is transferring items from the side of the conveyor, it will add gaps between flow items. The width (transverse size) of an item on the upstream conveyor becomes the length (inline size) of the item on the downstream conveyor. No gaps will be added between flow items. Items will transfer more smoothly from one conveyor to another because the angle of entry is smaller and more closely matches the direction of the merging conveyor. Movement While the item is being transferred, its movement is in-line with one of the conveyors, but is stopped relative to the other conveyor. On an inline transfer, the movement of the item is in-line with both the upstream conveyor and the downstream conveyor throughout the transfer of the item. You will need to define the angles at which transferring conveyors will be considered an Inline Transfer or a Side Transfer, as discussed below. Properties The Transfer Type Properties window has the following properties: Max Angle This setting determines the maximum angle the incoming conveyor must be relative to the receiving conveyor in order to be considered an Inline Transfer. For example, if you enter 45 as the max angle and the incoming conveyor is greater than a 45 degree angle relative to the receiving conveyor, it will act like a Side Transfer rather than an Inline Transfer. Use Speed of Defines which conveyor's speed the item will take as it crosses the transfer. Options include: Receiving Conveyor - The item will take the speed of the destination conveyor. Sending Conveyor - The item will take the speed of the origin conveyor. Faster Conveyor - The item will take the speed of the faster conveyor. Slower Conveyor - The item will take the speed of the slower conveyor. Conveyor Under Item Center - The item will take the speed of the origin conveyor for the first half of its length, and then take the speed of the destination conveyor for the second half of its length. Side Transfer Settings When an item moves over a side transfer, it will go through the following steps. If the transfer type has a non-zero Start Time , the item will stop and wait for the Start Time at the point where the transfer begins. The item will move across the transfer. Use the Transfer Time field to define the time it will take. Defined Speed - If selected, the item will use the Defined Speed to move across the transfer. Defined Time - If selected, the item will use the Defined Time to move across the transfer. Motion-Aligned Conveyor Speed - If selected, the item will take the speed of the conveyor whose motion is aligned with the transfer motion of the item. For a diverting side transfer, this is the speed of the destination conveyor, or the conveyor that the item is being diverted to. For a merging side transfer, it is the speed of the origin conveyor, or the conveyor pushing the item onto the destination merge conveyor. If the transfer type has a non-zero Finish Time , the item will stop and wait for the Finish Time at the point where the transfer ends. Pop-Up Distance If non-zero, the item will move this distance vertically during the start and finish times. It will move up for the start time, and back down for the finish time. Do Smooth Transitions Check this box if you want an item to gradually change its orientation and position so that it matches the angle of the receiving conveyor as it moves across the transfer. This is most applicable for inline transfers that are not exactly inline (they have a transfer angle not equal to zero), for Inline Transfers where the location of the transfer is not in the center of the conveyor, or for Side Transfers where the transfer is not an exact 90-degree transfer."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ConveyorSystemTool/MassFlowUnits/MassFlowUnits.html",
        "title": "Mass Flow Units",
        "content": "Overview and Key Concepts Mass flow units, or just flow units , are the elements whose flow is simulated by mass flow conveyors . In FlexSim, mass flow conveyors use a fluid-like algorithm for calculating product flow. Using this algorithm enables significant simulation performance improvements. Whereas the algorithm represents a computational simplification, in real life, mass flow conveyors convey actual discrete objects like bottles, cans, crackers, cookies, cartons, etc. The flow unit in FlexSim provides the data necessary to translate between these discrete objects and the fluid-like algorithm that simulates their flow in FlexSim. The primary simulation-defining properties of the flow unit are its Length , Width , and Round Shape . Using these attributes, the simulation can resolve the maximum possible density of units on a conveyor. These densities are the actual things that flow down conveyors, instead of individual units. Using the calculated max density, each conveyor can calculate flow rates based on the conveyor's width and speed. The other attributes of the flow unit are for rendering purposes. They define how the units should be drawn on the conveyor. Properties The Mass Flow Unit Properties window has the following properties: Length The length of a unit. This corresponds to the space taken up by a single unit, along the conveyor's forward axis. If you are simulating bottles, this would be the diameter of the bottle. If you are simulating a non-symmetric object like, say, crackers, this should be the amount of forward-axis space the cracker takes up when accumulated on the conveyor. Width The width of a unit. This corresponds to the space taken up by a single unit, along the conveyor's left-right axis. If you are simulating bottles, this would be the diameter of the bottle. If you are simulating a non-symmetric object like, say, crackers, this should be the amount of left-right-axis space the cracker takes up. Height The height of a unit. This is only used for drawing purposes, and defines the height at which units, bars, etc. are drawn on the conveyor. Round Shape Defines whether the unit's shape is round. When this is checked, the maximum density of the unit will be calculated higher, as round shapes like bottles will pack together using a hexagonal, as opposed to a square, pattern. This also causes units to be drawn on the conveyor using this hexagonal pattern. Draw Mode Defines how the various densities will be drawn on the conveyor. One of the following values is possible: Shapes - The units will be drawn as individual shapes. Note that it does not actually simulate/track individual units. It merely draws a number of units based on the unit density at a given point on the conveyor. This setting is also further configured with the Fill Order property, explained below. Bars - The densities will be drawn as bars that flow along the conveyor. This setting is also further configured with the Fill Order property, described below. Shape Item When Draw Mode is defined as Shapes , this defines the shape to be drawn. You can statically define one of the flow items, or you can dynamically define different shapes based on things like densities, etc. This uses just the basic 3D shape of the flowitem and not the full composite flowitem visuals. Fill Order Defines how different densities will \"fill up\" the conveyor when drawn. This is dependent on the Draw Mode . The following table demonstrates the different property combinations, and how they will be drawn. Shapes Bars Length then Width Width then Length Randomized The Randomized setting is intended to render units in a more realistic randomly distributed way. This is only a visual approximation. There may be overlapping units in high densities, and individual bottles may disappear and reappear when moving across conveyors in very low densities."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/DatabaseConnectors/DatabaseConnectors.html",
        "title": "Database Connectors",
        "content": "Overview and Key Concepts Database connectors allow you to connect to a database, and then import data from the database, or export data to it. Database connectors are accessed from the Toolbox. To add a database connector, click the Add button in the Toolbox. Point to Connectivity , then select Database Connector . Setting Up a Database Connection You define settings associated with connecting to the database, including the address, user name, database name, etc., in the Connection tab of a database connector's properties window. Database Type - This defines the type of database you are connecting to. Support for Different Database Types FlexSim provides several options for connecting to different types of databases. At the time of initial release (18.1), SQL Server, MySQL, PostgreSQL, and SQLite have been tested. If you have trouble connecting to a certain database, contact FlexSim Customer Support for assistance. SQLite Concurrency SQLite is an embedded SQL database that locks the entire file when updating. Client/server database engines (such as SQL Server, MySQL, or PostgreSQL) usually support a high level of concurrency and allow multiple processes to be writing to the same database at the same time. If you are performing database operations from an experimenter or optimizer replication, then you should use a client/server database engine, not a SQLite database. Enter Full Connection String - If you select this checkbox, you can define the full database connection string yourself, instead of entering just the Database Address and Database Name fields. Database Address - This defines the IP address of the database server. If the local computer is the database server, you can put \"localhost\" here, or explicitly define the IP address if it is not local. Database Name - This is the name of the database to connect to. Connection String - This field is visible when you've selected the Enter Full Connection String checkbox. Here you enter the full database connection string. Defining Connection Strings Some database configurations require you to enter the full database connection string. FlexSim uses the SQLAPI++ database library for connecting to SQL databases. When you define the full connection string, this string is passed into the sDBString parameter of the SAConnection::Connect() method. The SQLAPI++ documentation provides thorough documentation for connecting to various database types. For example: Oracle SQL Server MySQL / MariaDB PostgreSQL SQLite ODBC Login ID - This is the user name to login with. Login Password - This is the password to login with. Test Connection - Once you've defined the database connection settings, you can press this button to test that the database connection is successful. DLL Dependencies Certain database types, such as Oracle and MySQL, require additional libraries for communicating with those databases. If your computer is missing those dependencies, you may get an error about missing dll modules. To resolve the error, install the missing files by downloading them from their appropriate sources and ensure FlexSim can access them. For example, libmySQL.dll can be downloaded as part of MySQL Community Server , which installs libmysql.dll to a directory such as \"C:\\Program Files\\MySQL\\MySQL Server 8.0\\lib\" by default. Once the missing files are on your system, either copy them to FlexSim's program directory or add their directory's path to your system's PATH environment variable. Then close and reopen FlexSim to test the connection again. Importing Data Once you've set up the connection settings, you can configure automatic imports from the database. This is done through the Import tab. The list on the left shows the set of imports that have been defined. You can configure this list using several buttons above the list. Icon Description Opens a menu listing available global tables. The selected table will receive the imported data. You can also select the option to create a new global table. Samples some table, or node in the tree, in FlexSim. This will add an entry to the list for the chosen node or table. Removes the selected import item from the list. Reorders the selected import item in the list. When you select a specific import item, several properties appear in the pane on the right. Import All Now - Performs a one-time import of all items in the list. Query - Defines the query that will be executed, whose result will be imported into the designated table in FlexSim. Use the arrow on the right to select from a list of available database tables. Alternately you can define the SQL query manually. Import Now - Performs a one-time import of the currently selected import item. Import Automatically On Reset - If this check box is selected, FlexSim will automatically perform an import of this item every time the model is reset. Exporting Data You can also configure automatic exports to the database. This is done through the Export tab. The list on the left shows the set of exports that have been defined. You can configure this list using several buttons above the list. Icon Description Opens a menu listing available global tables and statistics collectors to export from. Samples some table, or node in the tree, in FlexSim. This will add an entry to the list for the chosen node or table. Removes the selected export item from the list. Reorders the selected export item in the list. When you select a specific export item, several properties appear in the pane on the right. Export All Now - Performs a one-time export of all items in the list. To Table - Defines what table in the database to export to. Use the arrow on the right to choose from a list of tables to export to. Append to Table - Select this check box if you want the export operation to append to the table, instead of clearing the table before exporting. Columns to Export - Define the number of columns that will be exported to the database table. When you choose a table in the To Table field, it will attempt to auto-populate the set of columns for export. However, you can customize this. The Columns to Export field lets you define how many columns to export. From FlexSim Column / To Database Field Table - Define here a mapping of FlexSim columns to database table columns. On the left you define the FlexSim column name. On the right you define the database field name. Export Now - Performs a one-time export of the currently selected export item. Using FlexScript Expressions in the Left Column The values in the left column of the table, named From FlexSim Column, use FlexSim's SQL parser to evaluate the value that should be exported to the database. This means that FlexScript expressions can be used in combination with simple column names. This can be very helpful in converting FlexSim-specific values into useful database values. For example, statistics collectors will usually store object values in an internal format that is not useful anywhere other than in FlexSim. Thus, when exporting an object column of a statistics collector to a database, some conversion should be done, such as to a path associated with that object. As shown in the picture above, you can use a regular FlexScript expression to make that conversion: StatisticsCollector.getPathFromID(Object) This takes the value in the \"Object\" column of the statistics collector table (this is usually a number value), and converts it into a readable object path. Communicating with a Database Programmatically In addition to performing imports and exports automatically, FlexSim provides a FlexScript API that allows you to communicate with a database on your own. The following FlexScript classes are defined. Database.Connection Database.PreparedStatement Database.ResultSet Database.DataType See the FlexScript API Reference for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/DownBehavior/DownBehavior.html",
        "title": "Down Behavior",
        "content": "Overview and Key Concepts Down Behaviors represent a specific kind of down event. They can be called by Time Tables and MtbfMttrs. For example, you might want to add a down event representing what an operator should do when they take their lunch. You would add a new Down Behavior and configure its functions and labels so that the operators go to lunch. Then in the Time Tables the operators are members of, you would tell the lunch down event to use the new Down Behavior's functions instead of the Time Table's. Down Behavior objects are accessed from the Toolbox. General Properties The Down Behavior tool has the following general properties: Icon Description Adds the Down Behavior to a User Library as either a Draggable Icon or an Auto-Install Component. Name The name of the Down Behavior. The Functions Tab The Functions tab has the following properties: Down Function This picklist is executed when the objects in the member list go down. It is executed once for each object in the member list. This is where you specify what to do to stop the object. Resume Function This picklist is executed when the objects in the member list resume their operation. It is executed once for each object in the member list. This is where you specify what to do to resume the object. On Down This picklist is fired immediately after the Down Function has been fired for all objects, but it is only executed once, instead of once for each object in the member list. On Resume This picklist is fired immediately after the Resume Function has been fired for all objects, but it is only executed once, instead of once for each object in the member list. The Labels Tab The The Labels Tab is where you add labels to the Down Behavior. This allows you to further customize the behavior of the down event. Events Down Function This event is fired once for each member of a Time Table or MTBF when it breaks down. It has the following parameters: Event Parameter Type Explanation Time Table Object The Time Table or MTBF/MTTR that triggered the down event Down Object Object The object going down State int The state the object will go into Duration double The duration of the down time State Profile int The state profile on the object that will be updated Table Row int The row corresponding to this down time in the table (Time Table only) Member Coupling treenode The member node of the MTBF that is coupled with the down object (MTBF only) Resume Function This event is fired once for each member of a Time Table or MTBF when it is repaired. It has the following parameters: Event Parameter Type Explanation Time Table Object The Time Table or MTBF/MTTR that triggered the down event Down Object Object The object that was down and is now resuming State int The state the object was in State Profile int The state profile on the object that will be updated Table Row int The row corresponding to this down time in the table (Time Table only) On Down This event is fired after the Down Function has fired. It has the following parameters: Event Parameter Type Explanation Time Table Object The Time Table or MTBF/MTTR that triggered the down event Table Row int The row corresponding to this down time in the table (Time Table only) Involved Object The object going down On Resume This event is fired after the Resume Function has fired. It has the following parameters: Event Parameter Type Explanation Time Table Object The Time Table or MTBF/MTTR that triggered the down event Table Row int The row corresponding to this down time in the table (Time Table only) Involved Object The object being resumed"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/EditSelected/EditSelected.html",
        "title": "Edit Selected Objects Tool",
        "content": "Overview and Key Concepts You can use the Edit Selected Objects tool to quickly copy properties from one object to several objects at the same time. Be aware that you need to copy properties from objects that are the same kind. For example, you can only copy properties from one processor to another processor. See Copying and Pasting Objects and Properties for more information. This window can be accessed through the Quick Properties menu. It appears when there are selected objects in the view and the user highlights one of those selected objects. It offers several options that are performed on the currently selected set of objects in that view window. To select a group of objects, hold the shift or control key down and drag a selection box around a group of objects. Objects in the selection set will have a red box drawn around them. The view's currently highlighted object (the last object you clicked on) will have a yellow box drawn around it. Properties The Edit Selected Objects tool has the following properties: Move into Highlighted This option moves the selected objects (the ones with the red box) into the highlighted object (the one with the yellow box). This allows the highlighted object to be used as a container. Move into Model This option moves the selected objects (the ones with the red box) into the model directory. Save to file The selected objects will be saved to a file with a .t extension that can later be reopened in FlexSim. This allows users to save and import parts of models as needed. Load from file This object loads a .t file into the currently highlighted object. The highlighted object then becomes a container for the imported objects. Duplicate This option creates an identical copy in the model of the selection set. All port connections are kept intact. Delete This option deletes the selected objects. This can also be done by highlighting one of the selected objects in a view and pressing the Delete or Backspace key. Select All This option adds all objects in the model to the selection set. Deselect All This option takes all objects in the model out of the selection set. Set Reset Position This option sets the reset position of each object in the selection set to its current position. When the model is reset, all objects with recorded reset positions will be moved, rotated, and sized to that position. Clear Reset Position This option removes the reset position of each object in the selection set. Copy All Variables This option will copy the value of all variables the highlighted object has onto each object in the selection set. If a selected object does not have a particular variable, the variable is not created and the object is simply skipped for that variable. Copy This option will copy the value of the selected variable of the highlighted object has onto each object in the selection set. If a selected object does not have that particular variable, the variable is not created and the object is simply skipped. Rotate Selected This option will rotate the selection set around the z-axis at a user-defined axis point. Upon clicking this button, the cursor will change and the user will be prompted to pick a point in the model view. Flip Selected This option will flip the selection set across a line in the x-y plane defined by the user. Upon clicking this button, the cursor will change and the user will be prompted to pick two points in the model view, which become the endpoints of the flip line. Duplicate HO's Inputs This option destroys all the selected objects' input ports and creates copies of the highlighted object's input port connections to all objects in the selection set. Duplicate HO's Centers This option destroys all the selected objects' center ports and creates copies of the highlighted object's center port connections to all objects in the selection set. Duplicate HO's Outputs This option destroys all the selected objects' output ports and creates copies of the highlighted object's output port connections to all objects in the selection set. Add HO's Inputs This option adds copies of the highlighted object's input port connections to all objects in the selection set. Add HO's Centers This option adds copies of the highlighted object's center port connections to all objects in the selection set. Add HO's Outputs This option adds copies of the highlighted object's output port connections to all objects in the selection set."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/EmpiricalDistribution/EmpiricalDistribution.html",
        "title": "Empirical Distribution",
        "content": "Overview and Key Concepts The Empirical Distribution tool is used to generate random values given a table of empirical data: The Empirical Distribution tool provides a table. This table is an input to the tool. The table should contain historical or typical values. You can then treat the Empirical Distribution tool as a random distribution function. It will generate random values based on the input data so that the random values will match the same distribution as the input values. The Empirical Distribution tool is accessed from the Toolbox. Data Types The Empirical Distribution tool supports either Number or String (text) values. If you use text values, the tool will automatically set the Distribution Type to Discrete. Value Weights If you check the Weighted box, you'll be able to supply weights for each value. If you don't check the box, all values will be given an identical default weight. n either case, the Empirical Distribution tool sorts the input values and combines duplicate values and their weights. The end result is that you can increase the likelihood of a value (or, for Continuous data, nearby values) by increasing the total weight of a given value. You can increase total weight by specifying weight directly or by adding more instances of the value to the table. Data Input You can set values in the input table either manually or through the Excel Interface. Data does not have to be in any order. For more information about importing data from Excel, see the Excel Interface topic. Sample Generation The Sample Generation pane lets you define how random samples will be generated from the empirical data. See Empirical Distribution API for more information on how to generate a random variate from the Empirical Distribution tool. If a field accepts random distributions, there is usually a picklist option available to use an Empirical Distribution too. Selecting Distribution Type You can set the Distribution Type to one of the following values: Continuous Empirical Discrete Empirical Fitted Distribution Continuous Empirical When set to Continuous Empirical, the tool assumes the values in the table come from a continuous distribution, such as a process time. When sampling from the tool, it can return any value between the minimum and maximum values. The tool is unlikely to return any particular input value. However, the distribution of returned values will match the distribution of input values. Using a Continuous distribution is a good choice for process time data. You can use the Generate Samples button to display a histogram showing both the input data and sampled random data. Discrete Empirical When set to Discrete Empirical, the tool assumes that the values in the table form the complete set of possible values. When sampling from the tool, it will return one of the values given in the table. The likelihood of a given value is determined by its frequency or weight in the input data. Using a Discrete distribution is a good choice for discrete values, such as the number of items in an order, or for choosing a random SKU. You can use the Generate Samples button to display a bar chart showing both the input data and sampled random data. Fitted Distribution When set to Fitted Distribution, the tool shows additional buttons and controls that let you fit the data to existing distributions. When sampling from the tool, it will generate random samples from the fitted distribution you choose. Press the button to generate distribution fits. This will generate a list of distribution fits. You can then click on each distribution, review the fit graph, view/change the parameters of the distribution, etc. Each fit shows the name of the distribution, its fitted parameters, and a Prediction Error (ω) . This is a score, between 0 and 1, that tells how good the fit is to the data. Lower numbers are better. There are also controls below the fit graph that let you show either a probability density function or a cumulative distribution function, a number of buckets, etc. Defining Min and Max Since many distributions have long tails or may not always return positive values, the tool also allows you to define a Min and Max value. This lets you define a specific range of values within which generated samples must remain. Check the appropriate box and enter the desired min or max value for sampling. When these are defined, the tool will repeatedly resample from the fitted distribution until the sample falls within the min/max range. Curve Fitting Algorithm FlexSim uses a relatively simple curve fitting algorithm for fitting data to parameterized probability distributions. Note that FlexSim's curve fitter is not intended to be used for full statistical analysis of various curve fits. For that, there are several off-the-shelf distribution fitters that you can purchase, such as ExpertFit , Stat::Fit , scipy.optimize.curve_fit , etc. In our experience many datasets do not fit well to any known distributions, so we advise users to resample the data directly using the Continuous Empirical option, which is the default option for the Empirical Distribution tool. Nevertheless, FlexSim's curve fitting features can be helpful in some scenarios. In the interest of transparency, we document here the algorithms that are used for fitting data to various distributions. FlexSim's curve fitter mixes using generally known maximum likelihood estimators (MLEs) with optimization principles to find distribution parameters that best fit the data. For each distribution family, there are usually some known maximum likelihood estimators for the parameters. For example, the MLE for the normal distribution's μ parameter is the sample mean, and the MLE for its σ parameter is the sample standard deviation. Where these MLEs are known, we simply calculate the MLE and use that as the 'best fit' for the data. We have primarily used Simulation Modeling & Analysis, 5th Edition by Averill Law to find known MLE calculations. For some distribution families, there are parameters which do not have known (at least to us) MLE calculations. Sometimes these are additional parameters to the random number generation functions, such as location , which are not part of the standard definitions for these distribution families, or sometimes their MLE calculations are simply not documented. We refer to these as the non-MLE parameters. For the non-MLE parameters, FlexSim's curve fitter makes an initial guess at the value, and then runs an iterative gradient descent algorithm to find values that best fit the curve. Gradient Descent As the objective function for the gradient descent algorithm, the fitter performs a Cramér-von Mises goodness of fit test, and uses the resulting ω value as the objective for minimization. Whenever the objective function is needed, the fitter will first recalculate the MLE parameters, given the current values of the non-MLE parameters. Then it will use the cumulative distribution function F of the distribution with those MLE and non-MLE parameters, to perform the Cramér–von Mises goodness of fit test: $\\large{T} = \\large{n \\omega^2} = \\Large{\\frac{1}{12 n} + \\sum\\limits_{i=1}^{n}[\\frac{2i - 1}{2n} - F(x_i)]^2 }$ The minimization objective, and the value that is shown as a 'fit score' in the UI, is ω . $\\large{\\omega} = \\Large{\\sqrt{\\frac{T}{n}}}$ ω will always be a value between 0 and 1, with lower values signifying a better fit. At each iteration, the gradient descent algorithm first gets the objective with the current parameters. It then calculates a partial gradient for each non-MLE parameter by slightly adjusting that parameter and reevaluating the objective. Then it combines the partial gradients into a cumulative gradient, steps in the direction of the gradient, and then repeats the process. The step size of the gradient descent is adjusted as the algorithm progresses. The step size starts at a value of 1, and the algorithm keeps track of the gradient of the last iteration. At each iteration, after determining the new gradient, it calculates the dot product of the current gradient with the last gradient, which represents the cosine of the angle between the two vectors. If this value is near 1 — the current gradient is close to the same as the last gradient — then the step size is increased. If the value is close to zero — the gradient has changed significantly — then the step size decreases. The end effect is that the algorithm will gain momentum as it travels in the same direction, but will slow down as it begins to circle around a minimum. The algorithm proceeds until either a maximum number of iterations is executed, or the step size decreases to a minimum threshold. Disclaimers FlexSim's curve fitter does not perform hypothesis testing on whether the data came from the fitted distribution. It only performs the gradient descent that minimizes ω , and then shows the parameters and the resulting ω . It also lets you see graphs that compare either a histogram of the data with the distribution's probability density function , or the data's empirical distribution function with the distribution's cumulative distribution function . We also assume that the data that is being fitted is continuous, and thus only fit to continuous distributions. Further, the curve fitter will naturally suffer the standard deficiencies associated with gradient descent: solutions may resolve to local minima. Again, for robust full-featured curve fitting there are many third-party solutions available."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/EventList/EventList.html",
        "title": "Event List",
        "content": "Overview and Key Concepts The Event List shows all the pending events for the model. It is useful for seeing when different events will occur in order to debug modeling issues. If you have a problem that happens during a particular event, the Event List is useful for seeing information about that event to help track down the source of the problem. You can access the Event List from the Debug menu on the main toolbar. If you want to only view the events for a particular object, you can right-click on the 3D object, point to View, then select View Object Events. Properties The Event List has the following properties: Time This is the time that the event occurs. The time value is displayed using the model's precision. Fast Forwarding to an Event Time You can fast forward the simulation to a specific event's time. Click in the time cell of the desired event, and press the arrow button that appears on the right side of that cell. Object This is the path to the object, relative to the model, that the event affects. Event Type This is the type of event. It is the event code and will show a number value for event codes without registered names. You can use the \"seteventlistlegendentry\" application command to register a name for custom event types. For example: applicationcommand(\"seteventlistlegendentry\", 102, \"My Event Type\", 0); will set event code 102 to show \"My Event Type\" as its name in the list. Involved This is the path to the involved object for the event. Event Data This value's use depends on the event and may not be used for all event types. Filters The Event List can be filtered based on any column. Columns with an active filter will display a . To add/edit a filter, hover over the column header and click the button. Time Each time filter has a begin (left) and an end (right) field. Only events that occurred within those two times will be displayed. If multiple time filters are present, events that occurred within any time range will be shown. To add a filter, click the icon. To remove a filter, click the icon. Text All other columns can be filtered by text values. If the the cell's value contains any of the filter values, that cell will be shown. To add a filter, click the icon. To remove a filter, click the icon."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/EventLog/EventLog.html",
        "title": "Event Log",
        "content": "Overview and Key Concepts When Enable Logging is checked, the Event Log will create a record of events that occur in the model. It is useful for seeing the order in which certain events took place. For each event that happens in the model, multiple entries may be made in the Event Log to explain what happened during that event. These multiple entries will all have the same time and all be logged simultaneously when you press the Step button. The event log will be cleared when the model is reset. Some exceptions will be recorded in the event log. The entry immediately preceeding the exception entry will give you a clue as to where the code is that caused the exception to happen. This is particularly useful if the exception was caused by improper code in an object's trigger. Any exceptions reported in the System Console will also be reported in the Event Log. The Event Log is accessed from the Debug menu on the main toolbar. Enable Logging from the Command Line In some cases, such as when FlexSim runs in the background, it can be useful to create an event log. You can enable an event log from the command line. This kind of log is sometimes called a system log . The system log is controled by the following switches: Switch Value Example /logevents An absolute path to a target file. The directory must exist. If the file doesn't exist, a new file with the given name will be created. This switch enables the system log. The other event log switched require this switch to be present. /logevents \"C:\\Documents\\FlexSim 2024 Projects\\SystemLog.sqlite\" /logname The name of the event log within the given file. The default is \"__system\". /logname \"MyEventLog\" /loglevel One of the following words: INFO, WARN, ERROR, or FATAL. Events lower than the specified level will not be logged. The default is INFO. /loglevel ERROR /eventcachesize A positive integer. For performance reasons, events are not written to the file immediately. FlexSim caches events in memory until the given number is reached and then writes all cached events in one write operation. The default is 10000. The minimum is 1, meaning each event would be written to the file immediately. This is very slow, but useful if debugging a crash, as the event previous to the crash will be written to the file. /eventcachesize 100 The system log is separate from the model log. The system log (specified on the command line) is separate from the log specified in the model. Each log has its own settings. It is possible to log events into either or both logs. The system log is not cleared when the model is reset. Viewing a System Log The Event Log object in the model has a variable specifying the event log name. By default, this value is set to \"EventLog1\". To view a system log, you can either change that variable or you can set the system log name to \"EventLog1\" with the /logname switch. Then you can open the system log from within FlexSim. Properties The Event Log has the following properties: Enable Logging This will enable or disable event logging. The model will run much slower when logging is enabled so you should disable logging when you are finished using the event log. Log File Path The Event Log stores its data in a file on the hard drive. By default, the path shown is a relative path. The path is relative to the model's directory ( modeldir() ). For new models, the path is relative to the Documents directory ( documentsdir() ) until the model is saved. You can change the path using the the accompanying browse button . If you choose a destination outside the model directory, the absolute path to the destination is shown. Settings... Within the settings window, you can set up which events should be recorded in the event log in three ways. First, you can filter by model time. You can adjust the start time and optionally the end time. Only events that occur between these times will be recorded. In addition, you can filter by event type. Events that have already been recorded will not be affected by changing these settings. Events that occur after changing these settings will only be recorded if they are enabled here. Finally, you can filter by level. Only events that have the same or higher level will be logged. The start and end time are explained in the following sections. Start Time If you only want to log a specific time period, you can enter a start time for when the logging will begin. End Time Optionally, you can specify an end time for when you want the logging to stop. If the end time is less than or equal to the start time, it will be ignored. Export... This will export the Event Log as a csv file. If will only export valid events, ignoring any events that have been filtered out. The Table The table has the following properties: Time - This is the time that the event happened. The entries happened in order from top to bottom. Entries recorded with the same time happened in the order shown and may have happened during the same model event. Increasing Precision in the Time Column Event times are stored as 64-bit floating point values. To increase the precision in the view, you can change the Decimal Precision in the Model Settings window. Event - This is the type of event. You can enable or disable logging for certain event types in the Settings window. Object - This is the path to the event's object. Involved - This is the path to the involved object for the event. P1 - P4 - These values depend on the event and may not be used for all event types. Usually they give you information about what parameters were passed into the event or more information about the event type. This is useful for debugging if parameter values are not what you expect them to be. If you use the EventLog API to log custom events, you can set these values to any arbitrary value. Filters The Event Log can be filtered based on the Time, Event, Object and Involved columns. Columns with an active filter will display a . To add/edit a filter, left-click on the header name for the desired filter. Event log entries that are no longer displayed because they have been filtered will not be exported with the Export button. It has the following properties: Time - Each time filter has a begin (left) and an end (right) field. Only events that occurred within those two times will be displayed. To add a filter, click the icon. To remove a filter, click the icon. Level - This list allows you to filter the list by the level of each event. To include or exclude a level from the list, check or uncheck the box next to its name. Event - This list allows you to filter the list by which event or trigger the event was associated with. To include or exclude an event from the list, check or uncheck the box next to its name. Object - This list allows you to filter the list by which object generated the event. To include or exclude an object in the list, check or uncheck the box next to its name. Involved - This list allows you to filter the list by which object is involved in the event. To include or exclude an object in the list, check or uncheck the box next to its name."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ExcelInterface/ExcelInterface.html",
        "title": "Excel Interface",
        "content": "Overview and Key Concepts The Excel Interface was designed to make importing and exporting multiple worksheets from more than one workbook very fast and easy to do. You can also create your own custom Import/Export code. You can access the Excel Interface from the Toolbox. Excel Import The Excel Importer is capable of automating much of the import process in terms of the table size and cell data type. If you allow the Excel Importer to be more automated in its implementation, it is extremely useful for importing data that will change over time. Excel Export The Excel Exporter allows you to export multiple tables to multiple different Excel workbooks. The controls and features of this page are the same as the Excel Importer page. See the documentation above for more information on this page. Custom Import/Export The custom Import/Export page allows you to write your own custom code to import and export to Excel workbooks. There is sample code in the picklists on importing and exporting from Excel. The Import Tab The Import tab has the following properties: Import Lines (list) Displays all of the import lines for the Excel Importer. You can use the Add and Duplicate buttons to add additional lines. You may also rearrange lines to group import lines that are importing from the same Excel workbook (this will improve speeds greatly as opposed to trying to switch back and forth between the same workbooks). Import Tables The Excel Importer will go in order (from the top) through each checked line of the Import Lines window and execute the import based on its properties specified on the right side. Alternative Methods The Excel Importer and Excel Exporter may also be started by calling excelmultitableimport() or excelmultitableexport() respectively in a flexscript node. Excel Workbook The Excel Workbook is where you define the name of the Excel workbook file that contains the information that you want to import. There are four ways to enter information into this column: Unknown workbook name or location (\"NEW\") - If the name or location of the workbook that you want to use are unknown or will change over time then you can select the \"NEW\" option. Using \"NEW\" in this field will cause the browse window to open, prompting the user to find the Excel file they want to use when executing the import. This is an extremely useful option when the input data will change with different runs or users. Same as the previous location (Blank) - If you want to continue to use the same workbook as the previous import line then you can leave this field blank. This is the recommended option when you are importing information from multiple sheets in the same workbook. You can reorder import lines using the arrows on the left side of the window in order to group imports that use the same workbook. Absolute Path (ABSOLUTE) - If the location and the name of the workbook will not change for the entire use of the model then you can enter the absolute path of the Excel workbook. For example C:\\tempdirectory\\myfile.xls . If the file is unable to be found, the import will be stopped and you'll have the option to skip the file or manually select a file to import. The .xls Extension The .xls extension is essential in order for FlexSim to find the right Excel spreadsheets. You can also use .xlsx to import Excel 2007 or newer spreadsheets. Relative Path (RELATIVE) - If your Excel file is in the same directory as your model, or in a sub directory, you can enter the relative path of the Excel file, or browsing for the file will give the relative path to the file. Alternatively, you can enter the relative path with respect to the install directory of FlexSim. For example userprojects\\myproject\\myfile.xls . If the file is unable to be found, the import will be stopped and you will have the option to skip the file or manually select a file to import. Excel Sheet Name The name of the Excel sheet that contains the import information. For example Sheet1 . If the Excel Importer does not find the name of the sheet because it does not exist in the workbook or has been entered incorrectly, the import will pause and alert you of the problem. You will then be given the option to exit the import completely or skip the offending import row and continue with the next one. If a Sheet Name Does Not Exist Look for spaces at the beginning and end of the name if you are alerted that a sheet name does not exist. Table Data Use the or to select the table in FlexSim that should receive the data from the import. Alternatively, there are buttons located throughout the software that will automatically select the table. Data Preview A preview of the current table data in FlexSim will be displayed here. To open the data in a table editor, click on the ... button. Headers Implementing headers will cause the Excel Importer to import the column and or row names for the table. This is useful for helping you to identify the columns and rows later in FlexSim. The row or column for the header information is automatically calculated. The header information should always come before any data distinction information or actual data. Starting Row and Starting Column The starting row and starting column fields determine where the Excel Importer will look on the Excel sheet for the data it needs to import. Enter the starting location for your data in these cells not the location of the headers or data distinction information. If you leave the values for these cells at 0, the Excel Importer will automatically adjust where it imports the data from. If you always leave your data at the top left of the worksheet you will never need to enter a value other than 0 in these cells regardless of whether or not you have headers or data distinction information in front of the data. Total Rows and Total Columns The Total Rows and Total Columns fields determine the amount of rows and columns that the Excel Importer will import. If you set these entries to 0 the Excel Importer will automatically calculate the number of rows or columns for you. Letting the Excel Importer calculate the number of rows or columns for you is a great way to allow the developer and or user of the model to add or delete rows and/or columns from the table as necessary without having to worry about changing any other values. Automatic Resizing The Excel Importer automatically sizes the FlexSim table that it is importing into to fit the size of the table that it is importing. Data Distinction Data distinction determines how the Excel Importer will extract values from the Excel workbook. There are three commands that the Excel Importer can use to read Excel data: excelreadnum() - If the specified cell contains number data, this command returns the number. Otherwise, it returns 0. excelreadstr() - If the specified cell contains text data, this command returns the text. Otherwise, it returns the value displayed in the cell as text. excelrangeread() - This command reads all cells in a specified range. If a cell in that range contains text data, this command extracts the text. Otherwise, it extracts the value as a number. When you import a spreadsheet, you must choose a data distinction mode. The mode you choose will tell the Excel Importer which of the three commands (or what combination) it should use to extract data from a spreadsheet. The modes are described in the following list: Numeric - The Excel Importer uses the excelreadnum() command to extract each cell's value. Automatic (default) - The Excel Importer uses both excelreadnum() and excelreadstr() to extract each cell's value. It then analyzes both results to determine whether the cell contains string or number data, and based on that, which result to put in the table. Per Column - For all the cells in a given column, the Excel Importer gets the value in the first non-header row (the beginning of the column), which must be a number. Depending on that value, the Excel Importer will use excelreadnum() or excelreadstr() to extract the data in that column. The cell containing this value is excluded from the final table in FlexSim. Per Row - For all the cells in a given row, the Excel Importer gets the value in the first non-header column (the beginning of the row), which must be a number. Depending on that value, the Excel Importer will use excelreadnum() or excelreadstr() to extract the data in that row. The cell containing this value is excluded from the final table in FlexSim. Text - The Excel Importer uses the excelreadstr() command to extract each cell's value. Values Only (very fast) - The Excel Importer will use the excelrangeread() command to read in all values of the table. Importing Headers with Values Only If you are importing column and/or row headers in Values Only mode, you will need to adjust the location of the starting cell and the total number of columns/rows so that the import range encompasses both the data and the headers you would like to import. (In other words, the starting cell will be directly above and/or to the left of your data.) For the Automatic mode, the Excel Importer will attempt to determine whether the cell contains text or number data. While this process works fairly well, the Excel Importer will occasionally be wrong. For example, a cell with number data, formatted as a fraction, will be imported as text like \"1/5\" rather than a number like 0.20 . Empty cells will be read in as a string. In order to correctly import a worksheet, you may need to change the formatting in Excel or the data distinction mode. For the Per Column and Per Row modes, the Excel Importer reads the first value in a row or column and uses that value to determine how to extract the remaining values in that row or column. The Excel Importer recognizes four possible values: Numeric Data - The Excel Importer will extract the data in this row/column using excelreadnum() Text Data - The Excel Importer will extract the data in this row/column using excelreadstr() Flexscript Data - The Excel Importer will extract the data in this row/column using excelreadstr() . If importing into a table, the Excel Importer will toggle this cell's node as FlexScript. C++ Data - The Excel Importer will extract the data in this row/column using excelreadstr() . If importing into a table, the Excel Importer will toggle this cell's node as C++. If this occurs, you will be prompted to compile the model after the import is complete. The Values Only mode uses the excelrangeread() command. This command imports text cells the same way excelreadstr() does. However, all other values, including dates and times, are interpreted as raw numbers. You can use the VALUE() function in Excel to see the raw number for any non-text cell. The following table shows some examples of how an Excel cell might be extracted with each of the three commands: Cell Value Cell Format excelreadnum() excelreadstr() excelrangeread() 1.54 Number 1.54 \"1.54\" 1.54 10 Number 10.0 \"10\" 10.0 2/8/2016 Date 42408.0 \"2/8/2016\" 42408.0 some text Text 0 \"some text\" \"some text\" 1/5 Fraction 0.20 \"1/5\" 0.20 Excel Import Performance For small tables, the data distinction mode has very little effect on the import speed; small tables are usually imported very quickly. For larger tables, however, the data distinction mode can have a dramatic effect on import speed. To ensure the fastest speed possible, choose a data distinction mode that only uses excelreadstr() to read cells with text data. For example, if you have a column of text data and a column of number data in a spreadsheet, use the Per Column distinction mode (with the correct data distinction values), or the Values Only mode. The Import Dates and Times as Numbers option is only available for the Automatic Data Distinction setting. When checked, the importer will import cells from Excel that are formatted as dates and times as numbers. It will also convert the number to be useable by FlexSim which is the number of seconds since Jan 1 1601. Import Table on Model Reset If checked, FlexSim will re-import this table when the model is reset. This will ONLY occur if the Excel file has been changed since the last time the table was imported. Post Import Code After all the import lines are executed, the Excel Importer can execute Post Import Code. You can write custom code in this trigger to do any additional operations after all tables have been imported. Execute Post Import Code If checked, the Post Import Code will be executed once all tables have been imported. Importing to a Bundle Global Tables may be set to use a bundle to store their data. Or, when using the Other table type, you can select a node in the tree that has bundle data. In these cases the import will create the correct fields in the bundle for the imported data. Due to the way bundles work, there are a few restrictions when importing to a bundle: Automatic Data Distinction - When automatic data distinction is used, the importer will only look at the datatype of the first cell in a column and set the entire column's data type to that type. This is because rows in a bundle column may not have differing data types. Column Data Distinction - Selecting Column will cause the importer to behave as if using Automatic Data Distinction. This is because rows in a bundle column may not have differing data types. Row Headers - As bundles do not have row headers, checking Use Row Headers has no affect on the import. Column Headers - Bundles must have a Column (or field) name. Therefore, Use Column Headers is always used whether checked or unchecked. Flexscript/C++ Data - Bundles cell cannot be toggled as FlexScript/C++. The Export Tab The Export tab has the following properties: Unlike the Excel Importer, the Excel Exporter does not use any data distinction when writing to the Excel file. The data type is taken from the FlexSim node data type. Create sheet if it doesn't exist Check this box to have the Excel Export tool create the specified sheet if that sheet doesn't exist in the workbook. Table Data Use the or to select the table in FlexSim that will be exported to Excel. Starting Row and Starting Column The starting row and starting column fields specify which cell in Excel the data from FlexSim will start being exported to. There is no Number of Rows or Number of Columns fields. The export will take the entire table. Exporting Tables Without Row Headers If you are exporting a table that doesn't have row headers (including Global Tables that store their data in a Bundle), then selecting Use Row Headers has no effect. The Custom Tab The Custom tab has the following properties: Description This field has no impact on the custom import/export. It is purely for the user's information. Code Enter your own code to import/export from Excel. To execute your custom import or export code through a flexscript node or trigger, call the following: treenode excelauto = Model.find(\"Tools/ExcelAuto\"); executefsnode(getvarnode(excelauto, \"CustomImport\"),NULL); // or executefsnode(getvarnode(excelauto, \"CustomExport\"),NULL);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Experimenter/Experimenter.html",
        "title": "The Experimenter",
        "content": "Overview and Key Concepts The Experimenter is a tool that automates running a model with different inputs and collecting the results. To use the Experimenter, you'll configure one or more Jobs. A Job defines a strategy for generating Scenarios (a set of model inputs) and for determining how many Replications of each Scenario to run. When a Job runs, it runs the model once for each Replication of each Scenario, and records the results in a Results Database File. You can then view and explore the results in the Performance Measures Window. There are several types of Jobs: Job Description Experiment Specify a set of Scenarios, and how many Replications to run of each Scenario. Optimization Specify an Objective, and it will automatically generate Scenarios attempting to optimize that Objective Range Based Specify a set of parameters, and a range of values for each parameter and it will automatically generate Scenarios for each permutation of parameter values. You can have multiple Jobs of any type, although only one Job is required to use the Experimenter. For more information, see the Key Concepts About Experiments topic, as well as the Running Jobs topic. Once you have run at least one Job, you can view the data in the Results Database File using the Performance Measures Results Window . The File Area The File Area is above each of the tabs in the Experimenter window. You can view and edit the path for the Results Database File, as well as delete the file. The File Area has the following properties: Results Database File This field displays the path to the Results Database File. If the file specified does not exist, it will be created when the next Job runs. If the Use Default Path box is cleared, you can use this field to specify a custom path for the Results Database File. Use Default Path Clear this box to specify a custom path for the Results Database File. If this box is checked, the path will match the model's file path and name. Delete Results File Click this button to delete the Results Database File, if it exists. Deleting the file is a common task, and should be done if the model has changed since the last Job was run, to prevent mixing results from different models. Use Auto Increment Save and the Default Path If you change the model, you can use Auto Increment Save to save the model with a new name. If you are using the Default Path, then the file path will automatically update to match the model name. This naturally prevents mixing results from different models. View Results If you have run one or more Jobs, click this button to open the Performance Measure Results Window and view the results. If you have defined one or more filters, a menu will appear allowing you to choose which filter to apply to the Performance Measure Results window. The Jobs Tab The Jobs Tab allows you to add, remove, reorder, and edit the Jobs in the Experimenter. The left side of the tab allows you to view and edit the list of Jobs. The right side of the view allows you to edit the selected Job. The left side of the Jobs tab has the following properties: Jobs Icon Description Add a Job. You can configure the Job once it has been added. Duplicate a Job. Remove the selected Job. Move the selected Job up or down in the list. Experimenter Job Properties If you select an Experiment Job, the right side of the Jobs tab has the following properties: Name Use the Name field to update the name fo the current Job. Warmup Time Use the Warmup Time field to set the Warmup Time for each Scenario. Stop Time Use the Stop Time field to set the Stop Time for each Scenario. Replications Per Scenario Use this field to set the number of Replications to run for each Scenario. Parameters Use the Parameters tree to select which Parameters you want to see in the Scenarios table. All other Parameters are left at their current values for all Scenarios. Check a box in the tree to add a Parameter as a column to the Scenarios table. Scenario Count You can use the Scenario Count field, above the Scenarios Table, to specify the number of Scenarios defined by this Job. Adding or removing a Scenarios adds or removes rows in the Scenarios Table. Remove/Up/Down The Remove/Up/Down buttons remove or reorder the selected Scenarios in the Scenarios table. Set model to selected scenario This button becomes available when you have selected a single row in the table. When you click this button, the parameters in the model are set to the values in that column. Scenario Table Use the table to set the values for each Parameter in each Scenario. Optimization Job Properties If you select an Optimization Job, the right side of the Jobs tab has the following properties: Name Use the Name field to update the name fo the current Job. Warmup Time Use the Warmup Time field to set the Warmup Time for each Scenario. Stop Time Use the Stop Time field to set the Stop Time for each Scenario. Parameters Use the Parameters tree to select which Parameters the Optimizer can change. All other Parameter are left at their current values during the Optimization. Initial Scenarios Similar to an Experiment Job, you can define Scenarios for the Job to run. These Scenarios are optional. You can define these Scenarios to give the Optimizer a starting point for its search. If you don't define them, the Optimizer will use its own algorithm for starting the search. Defining these Scenarios is identical to defining Scenarios in an Experiment Job. For more information, see the Experiment Job section. Wall Time This property specifies the approximate number of seconds that the Optimization Job will run for. To automatically stop the Optimization after 10 minutes, use the value 600. To allow the Optimization Job to run until some other stop condition occurs, use the value 0. Max Iterations This property specifies the maximum number of Scenarios to try before ending the search. To allow the Optimization Job to run util some other stop condition occurs, use the value0. Iterations and Scenarios As the Optimization job runs, it will generate Scenarios to run. The first Scenario it generates is considered Iteration 1. The second Scenario is considered Iteration 2, and so on. Replication Mode This property determines how the Optimization Job will run replications. There are three options for this mode: Fixed number of replications - indicates that the job will run the same number of Replications for every Scenario it generates. When you use this mode, you'll specify how many Replications to run of each Scenario. Objective Confidence Met - indicates that the job should run Replications for every Scenario until a certain confidence level is achieved for all Objectives. If one Scenario is more sensitive to random variation, then that Scenario will require more replications. When you use this mode, you'll specify a confidence level to reach. Best Outside Confidence - similar to Objective Confidence Met , except that the Job will stop running Replications of a Scenario as soon as it becomes clear that it is statistically different from the best Scenario. Repeatable Search Check this box to make the search repeatable. A repeatable search generates the same sequence of Scenarios. This can make the Optimization take longer. If this box is cleared, the sequence of Scenarios will depend on how long each Replication takes to run. Constraints You can use this table to specify any Constraints. A Constraint is an expression that must be true; the Optimization Job will try to avoid generating Scenarios that violate the constraints. Expressions can include any Parameter or Performance Measure name. Valid examples might include: [PerformanceMeasure1] <= 1000 [PerformanceMeasure2] >= 50 [Param1] + [Param2] <= 10 You can use the row header to set the name of the Constraint. Objectives You can use this table to define one or more Objectives for your Job. An Objective has four components: An Active flag - Only Active objectives will be used in the Optimization. A Function - The function is an expression that computes a value. Often, the function is just a Performance Measure value. The function's purpose is to produce a score for the model. Any Parameter or Performance Measure can be used. A Direction - The direction indicates some meaning for the function. If the direction is Maximize, the Optimization will seek Scenarios that produce high function values. If the direction is Minimize, the Optimization will seek Scenarios that produce low function values. An Aggregation - The Aggregation determines how the function values from each Replication are combined to compute the Scenario's function value. You need at least one active Objective to run an Optimization Job. Range-Based Job Properties If an Range-Based Job is selected, the following properties are available: Name Use the Name field to update the name fo the current Job. Warmup Time Use the Warmup Time field to set the Warmup Time for each Scenario. Stop Time Use the Stop Time field to set the Stop Time for each Scenario. Replications Per Scenario Use this field to set the number of Replications to run for each Scenario. Total Tasks This field displays the total number of tasks specified by the job. This value is the product of the number of possible values for each parameter (the number of scenarios) and the number of replications. Parameters The Parameters table displays the Model Parameters involved in the job, and the set of possible values for each parameter. You can use the Add button to add additional parameters to the job. You can use the Up and Down buttons to reorder the selected parameters. You can also use the Remove button to remove parameters from the job. The following properties are only visible if you select a parameter in the Parameters table. Range Type Use this property to choose how you'll specify the set of values for each parameter. Ordering Use this property to choose how the set of values will be ordered. Minimum Specify the minimum value of the set of values. Only available for Continuous, Integer, Discrete, Option, and Pass-Through parameters, and when the Range Type is Iterable. Maximum Specify the maximum value of the set of values. Only available for Continuous, Integer, Discrete, Option, and Pass-Through parameters, and when the Range Type is Iterable. Step Size Specify the step size of the set of values. Only available for Continuous, Integer, Discrete, Option, and Pass-Through parameters, and when the Range Type is Iterable. Values Table If the selected parameter is an Expression parameter, or if the Range Type is set to Specific Values, the Values Table is available. Use this interface to specify each value in the set. The Run Tab The Run tab is where you run one or more Jobs. It has the following properties: Job Select a Job. This is the Job that will run when you press the Run button. The type of Job you select also determines the properties shown below this property. Run Runs the selected Job. Run Many Opens a popup where you can select multiple jobs to run. When you run multiple jobs, they are run squentially, in the order shown in the popup. Job Status The Job Status chart shows the status of the selected Job. If the selected Job is running, the chart will update as the Job runs. Optimization Job Properties If an Optimization Job is selected, the following properties are available: Job Status The Job Status chart for an Optimization shows one point per iteration as a scatter plot. An iteration represents a Scenario, as well as some additional information about that Scenario, including: The iteration number All objective values The iteration rank (rank 1 is the best Scenario) Which (if any) constraints were broken Two Optimizations may generate the same Scenario, but they will likely have different iteration data associated with that Scenario. Run Selects which run to display in the Job Status chart. X Axis Selects a value to use as the horizontal X axis. Y Axis Selects a value to use as the vertical Y axis. Color Axis Selects a value for the color axis. The color of each point on the chart comes from a gradient of colors. The highest value has a yellow color, while the lowest value has a dark purple color. Show Legend Check this box to show the legend on the Job Status chart. Show Best Iterations Check this box to mark the best iterations with a gold star. If you have a single objective, only one iteration will be marked. If you have multiple objectives, each iteration on the trade-off curve will be marked. Point Size Sets the size of the points for each Scenario on the Job Status chart. Point Color If you choose None for the color axis, you can use this property to specify a color for the iteration. Export as Experiment Job You can select Scenarios by clicking on a point in the chart. If you have selected Scenarios, you can create an Experiment Job that defines those Scenarios. Export to CSV Saves a CSV file containing the data used to generate the Job Status chart. Export PNG Saves an image file showing the current Job Status chart. Range-Based Job Properties Run Choose which run to display on the Job Status chart. The Filters Tab In the Experimenter, a Filter is a sorted subset of Scenarios found in the Results Database File. Defining a Filter is optional. The purpose of a Filter is to help you focus on the most important or interesting Scenarios. A Filter has two components: a name and a query. The name is arbitrary but in general it should be related to the purpose of the filter. A Filter's query determines which Scenarios are included in the Filter and how they are sorted. Valid Filter Queries A Filter's query can only contain the following parts of a SQL statement: WHERE ORDER BY LIMIT To find the set of Scenarios that belong in the filter, FlexSim runs the following query: SELECT ID FROM Experiment.ScenarioProperties [filter query] The Experiment.ScenarioProperties table has the following columns: Column Description ID The Scenario's ID as found in the Results Database File Name The Scenario's name as found in the Results Database File. Jobs The set of jobs that submitted at least one replication of the Scenario. OptimalJobs The set of Optimization jobs that consider this Scenario to be optimal in at least one run. RepCount The total number of replications of this Scenario that have been completed. StopTime The stop time defined by this Scenario. WarmupTime The warmup time defined by this Scenario. OutReps An array of all Replications that printed something to the output console. SysReps An array of all Replications that printed something to the system console. Parameters A column for every parameter containing the value of that parameter for the Scenario. Performance Measures A column for every performance measure containing the average value of that performance measure for the Scenario. You can reference any column of the Experiment.ScenarioProperties table in a Filter's query. Filter Query Examples One common task is to filter based on a Performance Measure: WHERE [PerformanceMeasure1] >= 100 In a WHERE statement, you can combine multiple criteria with the keywords AND or OR . The following query only keeps Scenarios where PerformanceMeasure1 is above 50 and they are marked as optimal: WHERE [PerformanceMeasure1] >= 50 AND OptimalJobs.length In a WHERE statement, you can also use the keyword BETWEEN to filter based on a range: WHERE [Parameter3] BETWEEN 50 AND 100 Another common task is to filter, sort, and limit the results. The following query keeps all Scenarios where the scenario was submitted by the job Experiment1, sorted with the largest value of PerformanceMeasure1 at the top, and only keeping the first five scenarios: WHERE \"Experiment1\" IN Jobs ORDER BY [PerformanceMeasure1] DESC LIMIT 5 Where Filters are Used Once you have defined a filter, there are several places you can use them: The Performance Measure Results window can use a Filter to determine which Scenarios to display. A Scenario Chart can use a Filter to determine which Scenarios to display. Any FlexQL query that queries an Experiment table can use a filter, using the # symbol. For example, the following is a valid query, assuming you have a Filter called MyFilter and a Result Table called Summary: SELECT * FROM Experiment.[Summary#MyFilter] Note the use of square brackets. Using the # character requires the use of square brackets. Properties The Filters Tab has the following properties: Filter List Displays a list of all filters. Use this area to add, duplicate, remove, and reorder filters. Name Specify the name of the filter. Query Specify the query that defines the filter. Use the button to add helpful query snippets. Result This table displays the Experiment.ScenarioProperties table with the query applied. As you update the query, this table updates to show scenarios included in the filter. Export as Experiment Job Press this button to export the current filter's scenarios as a new Basic Experiment Job. The Advanced Tab The Advanced tab allows you to configure some additional settings that apply to all Jobs. It has the following properties: Repeat Streams of Replication Specify a replication to set the manual model runs (not experimenter replications) to use the same random number streams. You must be repeating random streams for this to take effect. Max Cores Specify the maximum number of cores for the experimenter to use. The value 0 indicates that all available cores should be used. This property is ignored if using distributed CPUs. Save charts and output tables for each replication If checked then at the end of each replication, the Experimenter will save the data for each dashboard statistic, Statistics Collector, and Calculated Table in the model so they can later be viewed as part of the results. Chart and Output Data is Important If you clear this box, many features won't work correctly, including Scenario Charts, querying Experiment tables, and viewing Dashboards and Statistics Tables in the Performance Measures window. If this box is cleared, then less data is transferred from each Replication to the Results Database File. In addition, it may require less memory to run a Job. However, it is usually better to change how much data is gathered by the model than to clear this box. Save state after each replication If checked, each replication's full simulation state will be saved in the Results Database File at the end of the model run. You can later extract the state file from the database and view the final state of every replication. Restore original state after each replication If checked, FlexSim will completely reload the model between execution of each model. You might check this box if your model doesn't properly reset to the same exact state every time you reset, and you don't want that \"spill-over\" state affecting subsequent replication results. However, because it is completely reloading the tree, it may increase the time it takes to run each replication. Original State is Restored Between Scenarios Whether or not this box is checked, if a FlexSim process switches Scenarios, it will restore the original state before running another replication. Use Distributed CPUs Check this box to use CPUs available on the network or internet, rather than the local machine's CPUs. If checked, the Experimenter will attempt to use the machines specified in your Global Preferences. See Running Jobs on the Cloud for more information. Configure Cloud Nodes... Click this button to open your Global Preferences window, where you can edit the list of cloud nodes available to the Experimenter. Triggers The Experimenter fires triggers at various times during each Job. The following trigger describes each trigger: Name Timing On Start of Job Fired just after the user clicks the Run button. On Start of Replication Fired in the child process right before the model starts running. On End of Warmup Fired in the child process at the warmup time. On End of Replication Fired in the child process when the run finishes. Fired in the main process when results have been returned from the child process. If param(3) exists, the trigger is being fired on the parent process. Otherwise, it is being fired on the child process. On End of Job Fired when the Job finishes."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GIS/GIS.html",
        "title": "GIS Navigator",
        "content": "Overview and Key Concepts The GIS Navigator is used to calculate the geographic position of travelers as they travel along routes between points on maps. The GIS Navigator has settings that affect how map tiles are rendered and how routes are calculated. Properties The GIS Navigator has the following properties: Tile Server URL The URL for an OpenStreetMap tile server that is used to download raster map tiles. See https://wiki.openstreetmap.org/wiki/Tile_servers Usage Policies Ensure that you consult and follow the usage policies of the specified server. FlexSim Tile Server Usage Policy The FlexSim server usage is restricted to reasonable use-cases from within the FlexSim software. We provide no guarantees with regard to uptime, latency, or data updates. Map data © OpenStreetMap contributors. Tile Data Directory Tile files are saved to this directory. Delete existing files in this directory to download new versions of those files. Tile File Prefix Specify an optional prefix to be added to tile filenames when saved on the hard drive. Use different prefixes to distinguish between tiles when using different tile styles from different tile servers. Default Route Type Define the default type for newly created routes. Air Route Calculation Average Speed When calculating straight rhumb line and flight paths, use this average speed to calculate the route duration. Air Route Calculation Cost By When calculating straight rhumb line and flight paths, use the calculated duration (Fastest Route) or distance (Shortest Route) for the route cost. Air Route Calculations These settings are used when air routes are updated. Existing routes will not be affected by simply changing these values. To update existing routes after changing these values, select multiple routes in red on a map and then press the Update button in the Route Properties panel. Routing Server URLs Specify the URLs for OSRM servers to download routing information. In addition to the Driving Roads Route Type, you can add more route types and URLs for other routing servers. e.g., http://router.project-osrm.org/route/v1/driving/ Usage Policies Ensure that you consult and follow the usage policies of the specified server. e.g., https://github.com/Project-OSRM/osrm-backend/wiki/Demo-server FlexSim Routing Server Usage Policy The FlexSim server usage is restricted to reasonable use-cases from within the FlexSim software. We provide no guarantees with regard to uptime, latency, or data updates. Clear Routing Cache Delete all cached routing server responses in the GIS Navigator."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalLists/FunctionalReference/FunctionalReference.html",
        "title": "Lists Functional Reference",
        "content": "Overview and Key Concepts Lists (which are also sometimes referred to as global lists) are a tool that can be used to create more complex flows between 3D objects and process flows. Values and Pullers In this and other documentation, we often use the terms value or value object and puller or puller object. These terms have special meaning in relation to the list. Whenever you push something onto a list, an entry is created on the list that contains a primary value, which is the value that was pushed onto the list. For example, you push flow items onto an Item List. Each item pushed onto the list will have its own entry. The primary \"value\" of each entry is therefore the item that is associated with that entry. Values may be strings or numbers, but more often they are objects like flow items. Thus when we say value object we are assuming that the primary value of an entry is in fact an object reference, like a flow item. Likewise, each back order has a primary \"value\" associated with it, although in order to avoid confusion, we call this the \"puller\". Like with list entry values, back order pullers can be either numbers or strings, but usually they are object references, so we use the term puller object when we assume that a puller is an object. In the example of an Item List, fixed resources are usually the \"puller objects\" who are pulling from an item list trying to find which item to receive next. Pulling When you pull from a list, you query the list for entries. The most basic pull defines only a number of entries to pull with out regard to what the values of those entries are. SQL queries can be added to your pull in orderto pull specific values from the list, possibly in a specific order. See the Query Syntax section below for information on how to write queries. Often you want to pull a specific object or node from the list. This can be accomplished using two different methods. The first is by using a WHERE clause. For example: WHERE value = Model.find(\"MyObject\") List(\"List1\").pull(\"WHERE value = Model.find(\\\"MyObject\\\")\") The second method is to skip the SQL and pass a reference to the object directly. List(\"List1\").pull(Model.find(\"MyObject\")) This method of pulling can be especially useful when pulling flow items and other objects that move through the model. If a back order is created, a path to the object/node will be displayed under the query column. Query Syntax In a pull request you may include an SQL query that filters and prioritizes what you want to pull from the List. The query usually will include a WHERE, and/or ORDER BY clause. In some special cases you may use the SELECT clause. It has a special meaning that will be explained later in this topic. WHERE queueSize < 5 ORDER BY age ASC This reference documents only information specific to FlexSim's SQL implementation. Refer to commonly available documentation for more general information on the language. Using List Fields By default, when you reference a field in a WHERE or ORDER BY clause, it will refer to one of the defined fields on the List. ORDER BY pushTime Here, the ORDER BY clause will prioritize by the List's pushTime field in ascending order (in SQL the default is ascending), assuming the pushTime field is a defined field on the List. Accessing Labels If a field that you define in your SQL query is not a defined field on the List, then the query will retrieve the label value of the same name on the entry's value object. WHERE SKU = \"05692AQD\" In this example, if SKU has not been defined as a field on the List, and let's say it is an Item List, the query will retrieve the label named \"SKU\" on the items that have been added to the List, and compare it against \"05692AQD\". Puller and Value Table Specifiers You can also access labels on the puller object using a keyword \"Puller\" table specifier, followed by a dot. WHERE step = Puller.step Here the step field (either a defined List field or a label on the value object) is compared with the step label on the puller object. Here we use \"table specifier\" in reference to SQL's syntax for accessing a database table. You might conceptualize the List as a database table with the name \"Value\", and you are kind of doing an inner join with a table with one row in it called Puller, where the labels on the puller object are like fields of the Puller table. By default if you leave a table specifier out, it assumes it is a defined field on the List or a label on the value object. However you can use a keyword \"Value\" table specifier explicitly for better readability. WHERE Value.step = Puller.step Here you can either use lower case value or upper case Value, and lower case puller or upper case Puller, according to your preference. Here at FlexSim we usually capitalize the table and lower-camel-case the fields. Using FlexScript Commands in SQL Queries You can also use FlexScript Commands in your SQL queries. ORDER BY round(distance / 100) ASC, age DESC This ORDER BY clause takes the distance field and categorizes it into distance ranges 100 units wide, so that a distance of 130 would be tied with a distance of 95 (round(130 / 100) == round(95 / 100) , but would get higher priority than a distance of 200 (round(130 / 100) < round(200 / 100)) . Ties would then use the second priority clause and be prioritized by highest age. Using the SELECT clause When pulling from lists with a query, the SELECT clause takes on a special meaning. It allows you to pull things from the list using fluid-like request quantities, instead of discrete entries on the list. Take for example the following listpull() command usage. listpull(\"DoughBins\", \"SELECT kg\", 4.5, 4.5) And assume that the entries on the DoughBins list look like the following when pulled. Here, instead of trying to pull a number of discrete entries from the list, the listpull() command is trying to pull 4.5 total kg units from the list, no matter how many discrete entries it requires. In this case, the pull operation will pull the full 3.7 kg from Bin1672. Next, it will pull the remaining 0.8 kg from Bin3105. The listpull() command will then return back an array consisting of both Bin1672 and Bin3105. Overflow Management This example naturally leads to the question of how the list manages left over amounts, namely the remaining 5.4 kg on Bin3105. And what does the list do about removing entries from the list? Obviously it should remove Bin1672 from the list because it has pulled its full kg amount. But what should it do about Bin3105, which technically has some \"overflow\" that hasn't been pulled off the list. Should it remove Bin3105 from the list or leave it on? The answer to that depends on the nature of the fields that you are querying in the SELECT clause. Trackable Overflow The list will track overflow amounts if the field defined in the SELECT clause meets one of the following requirements. The clause references a dynamic label field. The clause references a label that is not explicitly defined as a field on the list. The clause references a non-dynamic field. If one of these requirements is met, the list will track the values of the fields, decreasing them until they are 0, at which point it will remove the entries from the list. If labels are used (options 1 or 2), then as the pull operation finds valid entries to pull, it will decrement the value of the label by the amount that is pulled. So in this example, the kg label on Bin1672 will be decremented to 0 and Bin1672 will thus be removed from the list. Then the kg label on Bin3105 will be decremented to 5.4, and since it is still greater than 0, it will remain on the list. Subsequent pull operations will pull from the list with Bin3105's kg quantity properly decreased. When non-dynamic fields are used (option 3), the list stores its own cached value for the field, so the pull operation will decrement its own cached value as quantities are pulled from the list. Admittedly this makes the term \"non-dynamic\" a bit of a misnomer because the values do change while on the list. In this case, think of the fields instead as \"cached\" or \"non-reevaluated\" fields. Untrackable Overflow SELECT clauses where the list does not manage overflow amounts include the following: The clause references a dynamic non-label field. The clause is an SQL expression that does not reduce to a single field, i.e. SELECT length * width . When SELECT clauses with untrackable overflow are used, any entries containing overflow amounts will be removed from the list when they are returned. This means that in the above example, Bin3105 will be removed from the list, even though it technically has 5.4 kg left over. SELECT Clause Constraints In list pull operations, the SELECT clause should reference only one \"column\". In other words, it should not be a comma-separated list of columns like normal SQL queries. Additional columns will be ignored. Using Lists in the query() Command You can also integrate global lists in sql queries in the query() command. Just include the List as a table named in the FROM clause, and then access its fields normally. Note that here you should not use puller-dependent fields. If it is a partitioned list, then you should encode the table name as ListName.$1, and then pass the partition ID as the first additional parameter to query(). Or, if the partition ID is a string, you can encode the string directly into the table name. For example, the table named ListName.Partition1 means it will use the global list named \"ListName\", and the partition with ID \"Partition1\". Events You can listen to values being pushed an pulled from the list with the OnPush and OnPull events. On Push On Push occurs whenever a value is pushed on the list. It has the following parameters: Event Parameter Type Explanation Value Variant The value that was pushed on to the list Partition ID Variant The partition the value was pushed on to Result Variant The list entry entity, if the value was not immediately pulled. On Pull On Pull occurs whenever an object attempts to pull a value from the list. It has the following parameters: Event Parameter Type Explanation Query string The query passed in to the listpull command Request Num double The request number passed in to the listpull command Require Num double The require num passed in to the listpull command Puller Variant The object passed in to the listpull command Partition ID Variant The partition passed in to the listpull command Flags int The pull flags passed in to the listpull command Result Variant The list backorder, if the backorder was not immediately fulfilled On Value Pulled On Value Pulled occurs when a value on the list fulfills a request. It has the following parameters: Event Parameter Type Explanation Value Variant The value that was pulled from the list. Quantity Pulled double If using a SELECT statement to pull values, this will be the quantity pulled from the label on this entry. Otherwise, this value is 1. Partition ID Variant The partition ID for the entry. Puller Variant The object passed in to the listpull command Entry treenode The List.Entry that matched the pull request. Is Leaving int Specifies whether the entry will be removed from the list as a result of the pull. Statistics The list keeps the following statistics: Statistic Description Updated Input The total number of values pushed to the list Push Output The total number of values pulled from the list Pull Content The total number of values currently on the list Push/Pull Staytime The total time each value spent on the list Pull Backorder Input The total number of backorders created on this list Pull (if the value cannot be pulled immediately) Backorder Output The total number of fulfilled backorders Push (if the push fulfills a backorder) Backorder Content The current number of backorders that have not been fullfilled Push/Pull (if a backorder is created or fulfilled Backorder Staytime The time each backorder spends waiting to be fulfilled Push (if the push fulfills a backorder) In addtion, the list keeps the above 8 statistics for each individual partition. The name of the statistic simply has the word \"Partition\" appended to the front (Partition Input, Partition Staytime, Partition Backorder Output, etc.). List Partition Statistics The default behavior of the list is to destroy partitions when they become empty. This, in turn, destroys the statistics for that partition. To get accurate partition statitics, be sure to check the Keep Empty Partitions box on the general tab."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalLists/Fields/Fields.html",
        "title": "The Fields Tab",
        "content": "About the Fields Tab The Fields tab is where you define the set of fields that can be used in a pull query or back order queue strategy. To get to the Fields tab of a List, double-click on the desired List in the Toolbox. Then select the Fields tab. Depending on the type of list you create, a default set of fields will be added. You can easily remove these fields by pressing the next to the field, and/or add your own if needed. The following image shows the default set of fields available for an item list. Adding Fields Click on the button for a list of available fields to add. The available add options will include, at a minimum, the following set of options. Expression - An expression field will evaluate a FlexScript function to retrieve the field's value. Enter the name you want to call the field in Expression Field . Then enter the expression directly in Expression , or use the buttons to the right of the edit to choose various options, sample for the desired value, or edit the code in a code window. Label - A label field will retrieve its value from the same-named label on the entry's value object. Enter the name of the label in Label Field . Note that this will only work if a list entry's value is an object reference, not a number or string. Push Argument - A push argument field is only used if you are manually pushing values onto the list using the listpush() command. The listpush() command allows you define additional arguments after the partition ID argument. In the Fields tab you add a Push Argument field, define its name and the number of the additional argument associated with the field. For example, if your listpush() call were: listpush(\"ItemList1\", item, partitionID, up(item)); , you could then add a push argument field, in Push Argument Field give it the name parentObject, and under Argument , enter 1, meaning the first additional argument after the partition ID of the listpush() command. age - The age field is a dynamic customized expression field that returns the amount of simulation time that has elapsed since the entry was added to the list. pushTime - The pushTime field is a customized expression field that returns the simulation time when the entry was added to the list. Fields for Specific List Types In addition to the standard set of fields, pressing the Add Field button will provide options specific to the type of list you are using. Note that all of these are just customized Expression fields. This means that if the given set of automatic fields don't fit your needs, you can easily view and customize the code associated with each field. Available add options may include the following: Item List Fields itemType - The item type of the item. distance - This is the straight-line distance from the item to the puller object. Using in the case of item lists, the puller will be a fixed resource that is pulling from the list, trying to determine which item to receive next. queueSize - The size of the object that containers the item. For example, if the item is in a queue, this is the total number of items currently in the queue. ageInQueue - The time that has elapsed since the item first entered the object that currently contains it. totalAge - The time that has elapsed since the item was first created. meetsPullRequirement - Used in fixed resource pulling. This evaluates to 1 if the item satisfies the puller object's pull requirement. Fixed Resource List Fields queueSize - The number of items currently in the fixed resource. distance - The straight-line distance from the fixed resource value to a puller object (usually an item). throughput - The throughput of the fixed resource. isIdle - 1 if the fixed resource's state is STATE_IDLE, 0 otherwise. Note that you may need to adjust this field based on the state profile of the objects that will be on the list. For example, queues don't use STATE_IDLE as part of their state profile, so if queues will be on the list, the expression may need to be adjusted. Task Sequence List Fields priority - The priority value of the task sequence. preempt - The preempt value of the task sequence. distance - The travel distance from the puller task executer to the task sequence's first travel destination. isTransportTS - 1 if the task sequence is a standard transportation task sequence to move an item from one fixed resource to another, 0 otherwise. isUtilizeTS - 1 if the task sequence is a utilization task sequence, in other words, a task sequence to go and be utilized at a Processor object, 0 otherwise. loadToUnloadDistance - For transport task sequences, the straight-line distance from the point where item will be picked up to the point where the item will be dropped off. loadStation - For transport task sequences, the object that the item will be loaded from. unloadStation - For transport task sequences, the object that the item will be unloaded to. transportItem - For transport task sequences, the item that will transported. Task Executer List Fields utilization - The non-idle state percentage of the task executer. totalTravel - The total travel distance of the task executer. distance - Assuming the puller is a task sequence, the travel distance from the task executer to the Task Sequence's first travel destination. queueSize - The number of items currently in the task executer. throughput - The task executer's current output. isIdle - 1 if the task executer's current state is idle, 0 otherwise. isPullerPreempting - Assuming the puller is a task sequence, 1 if the task sequence is preempting, 0 otherwise. pullerPriority - Assuming the puller is a task sequence, the priority value of the task sequence. Dynamic Fields Each field you add (except push arguments) can be a dynamic field by checking the Dynamic checkbox. A dynamic field is a field whose source value may change while an entry is on the List. While a non-dynamic field's value will be evaluated only once when the entry is added to the List, a dynamic field's value will be re-evaluated every time the list is queried with a pull request. For this reason, non-dynamic fields are faster in execution, but dynamic fields offer more power in querying lists whose source values may change. Also, all puller-dependent fields must be designated as dynamic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalLists/BackOrders/BackOrders.html",
        "title": "The Back Orders Tab",
        "content": "The Back Orders tab is where you define List properties associated with back orders. To get to the Fields tab of a List, double-click on the desired List in the Toolbox. Then select the Back Orders tab. This tab has the following properties: Back Order Queue Strategy The Back Order Queue Strategy defines how back orders will be prioritized for a given value. When a value is pushed onto the List, outstanding back orders are processed for that value in the order defined by this queue strategy. It should be an SQL ORDER BY statement that references at least one puller-dependent field. This is because the back order queue strategy is used to prioritize back orders against a single entry. An ORDER BY statement that gets data only associated with the entry value would consequently have the same result value for all back orders, and would thus be unable to properly prioritize the back orders. A few examples: ORDER BY Puller.priority DESC - This will prioritize the pullers who have the \"priority\" label with the highest value. ORDER BY pullerPriority DESC - This example is essentially the same as the previous example, except that here you would need to explicitly add a dynamic puller-dependent expression field named pullerPriority, and give it the expression: puller.priority . This expression tells FlexSim to check the value of a label named \"priority\" on the puller. ORDER BY distance ASC - This example will prioritize the back orders with the lowest distance value, which usually defines a distance between the value and the puller. When defining a back order queue strategy, you can also store label values on back orders, and then use a special BackOrder keyword in the SQL ORDER BY clause. This allows you to define queue strategies that depend on specific values of back orders. To do this, you first need to store values in back order labels. The following code stores a label named \"priority\" on a pull result's back order with a value of 4. List list = List(\"List1\"); List.PullResult result = list.pull(\"\", 1, 1); if (result.backOrder) result.backOrder.priority = 4; Once you have stored label values on back orders, you can access them in the back order queue strategy: ORDER BY BackOrder.priority DESC Generally this is not needed since you can store labels on the puller object, and then access them in the back order queue strategy. However, storing and accessing labels on back orders can be useful if the same puller object may have multiple pull requests at the same time, and you want to distinguish between them in the queue strategy. Unique Pullers Only Check this box to disallow multiple back orders with the same puller. If this is checked and a pull request is made with the same puller as an existing back order, then that pull request will replace the previous pull request. Overwriting Back Orders If a back order is replaced by a new pull request using the same puller, the query, request number and require number will also be replaced by the new pull request. Objects that were previously listening for the back order to be fulfilled will continue listening. Allow Multiple Pushes Before Back Order Fulfillment If this box is checked, the list will wait effectively zero seconds after a push before processing back orders for the pushed value(s). This means that if multiple values are pushed onto the list at the same simulation time, all those values will get on the list before back orders are fulfilled. This setting is useful in several cases. First, if you are pulling from the list with an ORDER BY clause in your pull query, then you will likely want to allow all values onto the list before evaluating the query, so it can consider all values pushed, instead of just pulling as soon as the first one gets on. Second, if you are pulling from the list with a required number less than the requested number, then allowing multiple pushed values onto the list before fulfilling the back orders can get you closer to your requested number. To allow multiple pushes, the list creates an event in effectively zero time after a value is pushed to the list to process back orders. This is \"effectively\" zero time because the event is not created at exactly the same time as the time the value is pushed. Rather, the event's time will be incremented by the smallest amount representable by a double precision floating point value. This means that all events created at the exact same time as the original push will be executed before the back order fulfillment event, even if those events are created after the original value is pushed. And while the back order fulfillment time is not exactly the same as the push time, it is effectively the same. When this box is checked, the listpush() command will always return null. In other words, since back orders are no longer fulfilled synchronously with pushes, they will never be fulfilled in time for the listpush() command to return a valid value telling who pulled the pushed value. Reevaluate All Values On Pushes By default, back orders on the list will only evaluate new values that are pushed to the list. Check this box to cause all values (those already on the list and those being pushed to the list) to be evaluated for every back order whenever a new value is pushed to the list. This can be important if there are dynamic fields that may change and cause a value already on the list to be pulled when another value is pushed onto the list. Sort Back Orders Before Evaluating Entries This setting determines how back orders will be sorted when they are reevaluated for all entries on the list. The default is not checked. Here the list will iterate through each entry on the list, sort back orders associated with that specific entry, then match the highest priority back order to that entry. Alternately, when this box is checked, the list will sort the back orders once, then iterate through each back order and fulfill that back order based on its pull query. Leave this Box Unchecked If the Back Order Queue Strategy Relies on Entry-Dependent Fields When this box is checked you are not allowed to include anything in the back order queue strategy that accesses data associated with a list entry. Since the list sorts back orders first for all entries, there is no single entry to compare back orders against. As an example, let's say you are simulating a list of nurses, and back orders for nurses represent the patients who are requesting them. When one or more nurses become available, they may want to sort the requesting patients based on the distance from the nurse to the patient. Such a back order queue strategy might be: ORDER BY distance. In this case the distance field needs both a nurse (an entry) and a patient (a back order) in order to calculate the distance between the two. Here you want the list to go through each newly available nurse, and sort back orders (the requesting patients) by the distance from the nurse to the patient. This desired functionality is enabled when this checkbox is unchecked. Check this Box If the Pull Query ORDER BY Clause Should Still Be Used When Multiple Entries Become Available at the Same Time When this box is checked, the list will sort the set of back orders once, then go through each back order and attempt to fulfill it based on its pull query. This scenario allows for the back order's pull query to still be in effect when multiple entries become available at the same time. In going through each back order, the list will evaluate the back order against all of the available entries, meaning the back order pull query's ORDER BY clause will take effect, and available entries will be sorted accordingly. Back Order Reevaluation Events This pane lets you define when back orders should be reevaluated. This is usually only needed if in your pull request you have a WHERE clause whose result may change while the back order is active. For example, consider the following query: WHERE queueSize <= 5 . If the pull request is made at a point when queueSize is greater than 5, then you may want to reevaluate that pull request when queueSize becomes less than 5. FlexSim doesn't automatically know when this condition may change, so you need to define events that will trigger reevaluation. To add a reevaluation event, click on the button, and choose an event to add. Then choose the Event Type you want to listen for. There are several categories of reevaluation events, as follows: Puller Event - A puller event is an event that happens on the puller. Here the puller must be an object (not a number or string). When a back order is created, the List will listen for the defined event on the puller object, and when the event fires, the back order will be reprocessed for all values in the list. Value Event - A value event is an event that happens on the value, i.e. the primary value of an entry. Here the value must be an object (not a number or string). When the value is pushed to the List, the List will listen for the defined event on the value object, and when the event fires, all back orders will be reprocessed for that entry. Global Event - A global event is some event that is not associated with either values or back orders. The List will listen for this event and will reprocess all back orders whenever the event happens. Time Interval - A timer interval event will cause the List to repeatedly reevaluate back orders at a set time interval. When the first back order is added, the List starts the timer loop and reevaluates back orders after the given time elapses. The timer loop ends when the back order queue is emptied."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalLists/General/General.html",
        "title": "The General Tab",
        "content": "The General tab is where you define general properties for a List. To get to the General tab, double-click on the desired List in the Toolbox. Then select the General tab. This tab has the following properties: Cache Queries If checked, the List will cache parsed queries. This means that if you use the same query multiple times, the query will only be parsed once instead of each time the pull request is made. This can increase simulation run speed, but does require some small memory overhead, depending on how many unique queries are made in a simulation. Keep Empty Partitions If checked, the list will never remove partitions, even if they are empty. This is useful if you want to keep statistics on a specific partition. However, depending on how many unique partitions are created on the list, this can use significant amounts of memory. Unique Values Only If checked, the List will disallow multiple entries with the same value. If a value is pushed when there is already an entry with that value, it will replace that value. Track Number Field Totals If checked, the list will keep statistics on the total (sum) field values of all entries for non-dynamic number fields. This can be used if you want to either listen for changes to a field's total, usually using Process Flow, or if you want to use it to gather model statistical results. Automatically Add Group Fields If checked, the list will add a field for each group that is part of the list's Initial Content , as well as for every group contained by those groups. Entries will have a corresponding field value of 1 if the object is a member of a given group, and 0 if it is not a member of the group. This allows you to easily define pull queries that are based on an object's membership in a group. Always Leave Entries on List If checked, pushed entries will never be removed from the list, even when pulled. Assign SELECT Values to Puller Labels If checked, pull queries with a SELECT clause will cause the list to assign the corresponding values to the puller's labels. Use First SELECT Value as Quantifier If checked, the first expression in the SELECT clause has a special meaning that defines a field/label that quantifies the request and require numbers for pull requests. View Entries... Press View Entries to open list's entry viewer. View Back Orders... Press View Back Orders to open list's Back Order Viewer. Initial Content The set of controls under Initial Content allow you to define a set of values to be pushed onto the List when the simulation starts. Use the buttons above to add, remove and reorder these values. You can add objects individually, or you can associate the initial content with a model group, so that the List's initial content will always be synced with the objects you specify in the model group."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalLists/EntryViewer/EntryViewer.html",
        "title": "Entry Viewer",
        "content": "The Entry Viewer shows you a live list of the entries currently on a list. To open this window, go to the General tab of a list's properties, and press View Entries... Columns The table's first column shows the value for each entry, and additional columns show the field value for each defined field in the list. Testing Pull Queries The Properties for the Entry Viewer allow you to test out pull queries before implementing them in the simulation logic. Properties Panels The Global Table uses the following properties panels: Test Queries"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalLists/BackOrderViewer/BackOrderViewer.html",
        "title": "Back Order Viewer",
        "content": "The Back Order Viewer shows you a live list of the back orders currently on a list. To open this window, go to the General tab of a list's properties, and press View Back Orders... Columns For each back order, the table shows the puller, the query, the number of requested entries, the number of required entries, and the number fulfilled so far. If a pull defined an object/node to pull rather than an SQL query, the query column will display the path to the object/node."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalTables/GlobalTables.html",
        "title": "Global Tables",
        "content": "Overview and Key Concepts Global Tables can store numbers, strings, pointers, arrays, FlexScript, bundles or tracked variables. This data can be accessed by any object in the model using the Table class interface. A model may have any number of Global Tables. Global Tables are accessed from the Toolbox. Getting and Setting Table Data Here are some code examples of getting and setting table data. Table myTable = Table(\"GlobalTable1\"); myTable[1][1] = 5; myTable[2][\"MyCol\"] = \"Test\"; item.LabelName = myTable[1][2]; double value = Table(\"GlobalTable1\")[1][\"Col 3\"]; For more information, see the Table FlexScript API . Editing the Table To edit a cell in the table, click the desired cell and begin typing to overwrite all data in the cell, or double click on the cell to select the cell's contents. You can also right-click a cell and select Explore As Table or Explore As Tree and edit the cell's data through there. If the cell has array or bundle data, double-clicking the cell will open a new table window for editing. Use the arrow keys to navigate between cells. Cells hold number data by default. You can change a cell's data type by right-clicking on the cell and selecting an option under the Assign Data menu. The right-click menu also has options for insert/deleting rows and columns, clearing cell data, and sorting by column. Other options, like resizing the table, can be found in Properties . Similar Windows A similar window to this is used when editing a label table from an object's labels or when editing a node or array as a table (accessible through the right-click menu in the Tree Window or Labels page). When editing a table or array that is not a Global Table, some options in Properties will not be available. Bundle Data If the \"Use Bundles\" checkbox is checked, your table will change internally to use the bundle data type. This means that your table will take significantly less memory. However, there are some limitations. All data in a column must be of one type (number, string, or node) and rows can no longer be named. The data type of a column can be changed by right-clicking in a cell in the column. All of the normal table functions will work with the bundle data type. Using bundles for your table data is highly recommended for large tables with over 500 rows or columns. Cell Data Types Cells in a table can store a variety of different types of data. These include: Numbers: Integer or floating point. Strings: Text like names or sentences. Pointers: References to other nodes or objects. The value displayed is the path to the node/object and will be purple. Arrays: Arrays can have any number of elements. Each element can store a number, string, pointer or array. FlexScript: FlexScript toggled nodes allow you to write code that can that be evaluated using the evaluate() method. For example, Table(\"GlobalTable1\").cell(1, 1).evaluate() Bundles: Data table that stores numbers, strings, and nodes. Tracked Variables: Tracked variables are often used for statistic collection. Additionally, a cell can also store a table of data. This can be done regardless of the data stored on the cell. To create a table on a cell, right click on the desired cell and select Explore As Table . This will open a new table window where you can add rows and columns to the cell. If a cell has a table, a small gray triangle will be drawn in the upper right corner of the cell. Tracked Variable cells will display with a small green triangle in the upper right corner. If a cell has array or bundle data, double-clicking on the cell will open a table view that can be edited. Properties Panels The Global Table uses the following properties panels: Table"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/GlobalVariables/GlobalVariables.html",
        "title": "Global Variables and Macros",
        "content": "Global Variables The Global Variables window lets you create global variables and macro definitions that are accessible in FlexScript and C++. Once a variable has been created, you can get and set the value of that variable in a Code Editor window or Script Console. Values Shown are Initial Values The value shown is the initial value of the variable. It is not the current value of the variable. The current value of the variable is stored in memory and can be seen by returning it in a script window or printing it from somewhere in code. The current value is not stored in the model tree anywhere. Global variable values are reset when you open the model, reset or compile. There are 6 variable types you can use: integer, double, treenode, string, Array, and Map. For the Array type, you can specify the size of the array and the initial value of each array element. Using C++ If you access global variables in C++, you must make sure that the variables' names are globally unique names, meaning you do not use those names anywhere else in your C++ code except for when you are accessing the global variables themselves. FlexSim uses a macro definition to define these variables, so any other occurrences of the variable name may cause model malfunction and compile errors. Global Variables are accessed from the Toolbox. Properties - Adds a new Global Variable. - Removes the selected Global Variable. - Reorders the selected Global Variables Up or Down in the list. Variable List - Displays all the model's Global Variables. Click to edit. Variable Name - The name of the Global Variable. This is the name that will be used when writing code, for example setlabel(current, \"wIP\", maxWIP) . Type - Specify the Global Variable's type. - Only available for Integer and Double types. Pins the global variable to a Dashboard as either the current value, bar chart or line graph. Value - The initial value of the Global Variable. - Only available for Tree Node type. Opens a Tree Browse Dialog allowing you to select a node from the tree. Any node or object attribute may be selected. - Only available for Tree Node type. Opens a popup allowing you to select an object in the model. - Only available for Tree Node type. Click to sample an object, node or attribute in your model. If the Array type is chosen, the Global Variables window will display the following: Add - Adds an empty value to the end of the array. Remove - Removes the selected value. Browse - Opens a Tree Browse Dialog allowing you to select a node from the tree. Any node or object attribute may be selected. - Opens a popup allowing you to select an object(s) in the model. If a value is selected in the list, this sets that value, otherwise, it adds new values to the end of the array. - Click to sample an object, node or attribute in your model. If a value is selected in the list, this sets that value, otherwise, it adds a new value to the end of the array. Global Macros The global macros page lets you make macro definitions. You can define macros using #define statements, as follows: #define MAX_WAIT_TIME 30 #define PROCESS_TIME_TABLE Table(\"ProcessingTimesGT\") #define PAINTER_COLUMN 1 Once you have made these definitions, you can use them in your code: gettablenum(PROCESS_TIME_TABLE, 1, PAINTER_COLUMN) Macro Definition Syntax Macro definitions do not end with a semicolon. If you put a semicolon in the macro definition, it may do things you don't expect it to do. Macros essentially replace the given text with the following specified value/text throughout your code. If you have a semicolon at the end of the statement, you may end up with semicolons in incorrect places in your code."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Groups/Groups.html",
        "title": "The Groups Tool",
        "content": "Overview and Key Concepts The groups utility lets you create and edit different groups in your model. Group information is stored both in the /Tools/Groups folder and on each of the individual objects. A node is added to the object attributes called Groups with a coupling to the associated group. Objects may be included in multiple groups. Groups can also be added as a member of another Group. Properties The Groups tool has the following properties: Members List The Members List displays the objects and groups that are currently members of the group. The following table explains the buttons in the Members List section: Button Explanation Opens a menu allowing you to add currently selected items to the group, set the group to match the current model selection, or add another group. Click to enter \"Sample\" mode then select an object in the 3D View or a group in the Toolbox to add it to the group. Duplicates the selected object(s) and adds the copies to the group. Does not duplicate groups. Removes the selected(s) object from the group. Reorder members of the group. Centers the 3D view on the selected object or for a group it opens its properties window. Selects the selected object in the 3D View (puts a red box around it). Parent Groups List The Parent Groups List displays the parent groups of this group. The current group is a member of each of these groups. Opening the properties of any of these groups will show this group in its members. The following table explains the buttons in the Parent Groups List section: Button Explanation Opens a menu allowing you to add this group as a member of another group chosen from the list in the menu. Click to enter \"Sample\" mode then select a group in the Toolbox to add this group as a member of the sampled group. Removes this group from the members of the selected parent group. Opens the properties window of the selected group. Additional Concepts 3D View Right Click Menu You may also add objects to groups through the right-click menu of the 3D View. The current list of groups will appear at the top of the menu. A checkmark appears to left of each group the object is a member of. Selecting a group in this menu will toggle the object's membership in that group. Add to New Group - Creates a new group and adds the object to the group. If multiple objects are selected (red box) this will add those objects to the group as well. Quick Properties Panel If a highlighted object is the member of at least one group, the Groups panel will display in Quick Properties. The dropdown displays the names of all parent groups of the object. The following table explains the buttons in Quick Properties panel: Button Explanation Opens a menu allowing you to add this object as a member of a group chosen from the list. Click to enter \"Sample\" mode then select a group in the Toolbox to add this object as a member of the sampled group. Opens the properties window of the selected group. Removes this object from the members of the selected parent group. Duplicate Object Duplicates the object and adds the copy to the group."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Lights/Lights.html",
        "title": "Lights",
        "content": "Overview and Key Concepts Light objects added to the model are shown in the Toolbox. You can hide and show lights using the right-click menu in the Toolbox. Hidden lights will continue to influence the scene, but they will not be drawn as objects in the 3D view. If the model has light objects, then those will be used instead of the default lights defined in view settings. FlexSim's default shader can use up to 8 lights at a time. By default, shadows will be rendered for the first directional light in the scene. If the scene has more than 8 lights, then FlexSim will use the lights that are closest to the viewpoint of the view. In RTX Mode, FlexSim can render using all of the lights in the scene, and all of the lights can cast shadows. Properties The Light object uses the following properties panels: Visuals Light"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/MeasureConvert/MeasureConvert.html",
        "title": "Measure and Convert Tool",
        "content": "This window can be accessed through the View menu on the main toolbar. The Measure/Convert tool allows you to take measurements of distances in your model as well as to convert length/time units. By default, the Measured units will be the model units as defined in the Model Settings window will be selected. - Click this button to enter \"Measure\" mode. You can then click anywhere in the 3D view to define your start point, and click again to define the end point. The resulting distance will be displayed to the left. In the first drop down (shown above as meters), you can select the units to \"Measure\" with or select a length, time or length per time unit to convert. You may type in your own value to the top field to make a conversion. The bottom field will be the result. The bottom drop down can be changed to convert to different units."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/MemoryProfiler/MemoryProfiler.html",
        "title": "Memory Profiler",
        "content": "Overview and Key Concepts The Memory Profiler window allows you to see how memory is being used by FlexSim: The Memory Profiler works by traversing FlexSim's tree and estimating the memory use of each node. The Performance Profiler has two main views for displaying memory data. The first view is the Memory Tree , the view on the left. This view shows each node in the tree, and the estimate for that node's memory use. The list of nodes is sorted by how much memory it uses. The second view in the Memory Profiler is the Memory Graph . This view draws each node as a box. Bigger boxes indicate that more memory is used by a particular node, and smaller boxes indicate that less memory is used. The boxes are also colored by memory use: the brightest, most yellow box corresponds to the node that uses the most memory. The darkest, most purple box corresponds to the node that uses the least memory. Resizing the Memory Tree and Graph Views If you move the mouse between the Memory Tree and Graph views, you can click and drag to resize both views horizontally. These two views work together. For example, you can click on a node in the Memory Tree View, and the Memory Graph will show that node bounded in red: Alternatively, you can click on a box in the Memory Graph. This will highlight that box in the Memory Tree: In this example, the model is using a Statistics Collector to record some data. That particular Statistics Collector is the node that is using the most data. In some cases, you can use the Memory Profiler to reduce the memory use of your model. In this example, a large amount of memory is allocated just to tokens in the main Process Flow: This model happens to have a source that generates tokens, but isn't connected to any activities; perhaps the modeler forgot to remove it. Without that source generating useless tokens, the Memory Profiler shows a different story: Now the Tools folder uses 2 MB less memory. This example demonstrates how the Memory Profiler can help you find and remove unnecessary memory use from your model. You can access the Memory Profiler from the Debug menu on the main toolbar. Properties The Memory Profiler has the following properties: Take memory snapshot Click this button to create a new estimate of the memory being used in the tree. You can only view one snapshot at a time, so taking a new snapshot will delete the old one. Memory Tree If you have taken a memory snapshot, this view will show an estimate of the memory used by each node in the tree. This list is sorted by estimate. You can also right-click on a node in this tree and choose View Up or View Down. If you choose View Down, both the Memory Tree and the Memory Graph will update to show the chosen node as if it is the top node. View Up allows you to back out of the view. Memory Graph If you have taken a memory snapshot, this view will draw a visual representation of the memory used by each node in the tree. Bigger and brighter boxes represent nodes that used more memory."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ModelTriggers/ModelTriggers.html",
        "title": "Model Triggers",
        "content": "Overview and Key Concepts Model triggers allow you to execute code at different points between model runs. Model Triggers are accessed from the Toolbox. Triggers The following triggers are available: On Model Open - This trigger is fired when the model is opened from the file. On Reset - This trigger is fired when the model is reset. On Run Start - This trigger is fired whenever the model changes from a stopped or paused state to a running state. On Run Stop - This trigger is fired whenever the model changes from a running state to a stopped or paused state. On Post-Compile - This trigger is fired after the completion of a compile."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ModelParameterTables/ModelParameterTables.html",
        "title": "Model Parameter Tables",
        "content": "Overview and Key Concepts Model Parameter Tables are used to define a model's parameters. A parameter is a global value that controls some aspect of the model's behavior. Model Parameter Tables are accessed from the Toolbox. For more information on how to use parameters, see the Model Parameters topic. Model Parameter Table Properties Icon Description Duplicate the selected parameter(s). Remove the selected parameter(s). Move the selected parameter(s) up or down in the list. Parameters Row Edit You can use this edit field or the spinner to adjust the number of parameters in the table. Table Rows Each row of the table allows you to edit the following attributes of each parameter: Name Value Display Units Description The name of each parameter must be unique. In addition, we recommend using a name that doesn't begin with a number, and doesn't contain any spaces. This enables access using dynamic properties. You can change the current value of the parameter by editing the Value cell directly. To edit other attributes of the value, you can use the Value Properties panel, discussed in the following section. The Display Units column can contain arbitrary text. However, that text should be fairly short, and should indicate the units of the parameter. This may be used in future features, such as on the axis of a chart. For now, it is simply a hint to the model user about the units of the parameter. The Description column can contain arbitrary text. This text is usually a short phrase that indicates what the parameter controls. Value Properties When you select a cell in the second column of the Parameters table, a button will appear. Clicking that button will open the Value Properties for the selected value. Type The Type property allows you to change the type of the value. For more information on the meaning of each type, see the Model Parameters topic. Lower Bound Visible for Continuous, Integer and Discrete types. The value cannot be less than the specified lower bound. Upper Bound Visible for Continuous, Integer, and Discrete types. The value cannot exceed the specified upper bound. Step Size Visible for Discrete types. The value can only be increased or decreased by the step size. Options Visible for Option types. Option type values require you to enumerate the set of possible values for this value. Each possiblity is called an option. Each option has a name and a value. The value can be a number, text, or a FlexScript expression. The name is arbitrary. Sequence Length Visible only for Sequence types. The value in this case is an array of numbers, exactly as long as the sequence length. Reference Specifies an optional node associated with this value. The reference is passed in to the On Set trigger. If the parameter is a Pass-through parameter, then the reference specifies the node that stores the value for this parameter. On Set Specifies code that fires when the value of the parameter is changed, or if the model is reset. The reference, new value, old value, and reset flag are all passed in to this trigger. The reset flag is only true if the model is currently being reset. Note that the On Set trigger fires before the Model Reset trigger. Pass-through parameters do not fire the On Set trigger. Apply to All Visible only if multiple values are selected. Applies any changes to all selected values, rather than just the first selected value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/MtbfMttr/MtbfMttr.html",
        "title": "MTBF/MTTR",
        "content": "Overview and Key Concepts MTBF/MTTR objects are used to set random breakdown and recovery times for groups of objects in the model. Each MTBF/MTTR object can have any number of object members and each object can be controlled by more than one MTBF/MTTR object. The MTBF/MTTR object allows you to also specify what state the objects will go into when they go down and what behaviour they should perform. A model may contain any number of MTBF MTTR objects. Though similar to the Time Table, the MTBF/MTTR object uses picklists to determine dynamically when the connected members will break down and how long they will be broken down for. You can also specify more specific information about the breakdowns. This includes specifying if all connected members will breakdown together, or if the breakdown times will be individually calculated for each object (firing the First Failure Time, Up Time, and Down Time picklists once per object). If you only want the connected members to count specific states towards their Up Time, for example a Processor when it is in the processing state, this can be specified as well. This means when the Processor is idle , elapsing time won't count towards the Processor's Up Time until it enters the processing state. MTBF/MTTR objects are accessed from the Toolbox. General Properties The MTBF/MTTR tool has the following general properties: Icon Description Adds the MTBF/MTTR to a User Library as either a Draggable Icon or an Auto-Install Component. Name The name of the MTBF/MTTR. The combobox has a list of all MTBF/MTTR objects in the model, allowing you to quickly jump to different MTBF/MTTR objects. Enabled Specifies whether the MTBF/MTTR should execute it's down times for all of the members of the MTBF/MTTR. The Experimenter allows you to enable and disable MTBF/MTTRs for different scenarios. The Members Tab The Members tab has the following properties: Icon Description This will open an object selection GUI where you can select multiple objects in the model. Removes the selected member(s) from the list. Reorders members up or down in the list. Click to enter \"Sample\" mode, then click on any object in the model to add it as a member. Click to find the selected member in the 3D view. Click to select the selected member in the 3D view. The Functions Tab The Functions tab has the following properties: The following picklists can be fired individually for each object, or for all the objects together depending on the checked state of the Break down members individually property from the Breakdowns Page. First Failure Time This picklist returns the time of the first failure. Returning a negative number will cause the first failure to be ignored. Down Time This picklist returns the Mean Time To Repair for the objects controlled by this MTBF MTTR object. This function determines how long they will stay in a broken-down state before resuming normal operations again. All of the controlled objects will go back to their original states at the same time. Up Time This function determines how long the objects controlled by this MTBF MTTR object will run before they go into a broken-down state. The Up Time is specifically defined as the span between the time that the object resumes from its last down period and the time that it starts its next down period. Down Behavior If a Down Behavior is selected in this drop down, the Down Function and Resume Functions described next will not be fired and instead the Down and Resume Functions of the Down Behavior will be fired. The properties of the selected Down Behavior can be edited by clicking the ... button. If Custom is selected from the drop down, the Down and Resume functions immediately below the drop down will be fired. Down Function This picklist is executed when the objects in the member list go down. It is executed once for each object in the member list. Here is where you specify what to do to stop the object. Resume Function This picklist is executed when the objects in the member list resume their operation. It is executed once for each object in the member list. Here is where you specify what to do to resume the object. OnBreakDown This picklist is fired immediately after the Down Function, but it is only executed once, instead of once for each object. OnRepair This picklist is fired immediately after the Resume Function, but it is only executed once, instead of once for each object. The Breakdowns Tab The Breadowns tab has the following properties: Down State This specifies the state that the object will go into when it goes down. Break down members individually If this box is checked, the MTBF/MTTR object will create a separate thread of down and resume events for each member object. If it is not checked, all member objects will go down and resume at the same time. Apply MTBF to a set of states This box only applies if the MTBF/MTTR breaks down members individually. If it is checked, then the MTBF time will only be applied to a subset of the object's state. For example, if machine break down data only applies for when the machine is actively processing, then you would use this field. If checked, you will add a set of states to the list on the right from the list of possible states on the left. Events First Failure Time This event is fired at the start of the model run and determines the first time the object will go down. It has the following parameters: Event Parameter Type Explanation Involved Object The object that will go down Up Time This event is fired after an object is repaired and determines how long before the object breaks down again. It has the following parameters: Event Parameter Type Explanation Involved Object The object being repaired Down Time This event is fired after an object goes down and determines how long before the object is repaired. It has the following parameters: Event Parameter Type Explanation Involved Object The object going down Down Function This event is fired once for each member when it breaks down. It has the following parameters: Event Parameter Type Explanation Down Object Object The object going down State int The state the object will go into Down Time double The duration of the down time Member Coupling treenode The member node of the MTBF that is coupled with the down object. Resume Function This event is fired once for each member when it is repaired. It has the following parameters: Event Parameter Type Explanation Down Object Object The object that was down and is now resuming State int The state the object was in On Break Down This event is fired once after the Down Function has fired. It has the following parameters: Event Parameter Type Explanation Involved Object The object breaking down On Repair This event is fired once after the Resume Function has fired. It has the following parameters: Event Parameter Type Explanation Involved Object The object being repaired"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/OmniverseConnector/OmniverseConnector.html",
        "title": "Omniverse Connector",
        "content": "Overview and Key Concepts The Omniverse Connector is used to export Universal Scene Description (USD) files. You can export directly to files on disk or to an Omniverse Nucleus server. You can export 3D geometric data, object property metadata, or both. Only 3D mesh geometric data is exported. Imported AutoCAD drawings (dwg files) are not exported. Only basic surface material information is exported: colors, diffuse textures, and normalmap textures. Advanced material configurations should be applied using external software after importing the usd file exported from FlexSim. USD Animation The USD export doesn’t currently export object movement. It exports a snapshot the state of the model at the time you press the Export button. The animation data stored on operators puts their shape into the appropriate pose at that particular moment in time. If you run the animation of the usd file, then operators will animate to different poses in their animations, but nothing about the creation of objects or movement of objects from a running simulation is encoded into the usd file, only the current state at the time you press Export. For advanced workflows including live connectivity, use a USD Stage object. Properties The Omniverse Connector has the following properties: File Path Browse to an output file path on disk or enter a destination path on an Omniverse Nucleus server (e.g., omniverse://127.0.0.1/Users/UserName/Folder/FileName.usd). USD supports three file formats: Extension Content .usda Human-readable UTF-8 text .usdc Random-access “Crate” binary .usd Either of the above In general when exporting to usd, a binary file will be created, but usda files can be renamed to have an extension of usd as well. Container This field is left blank by default to export the entire model. To export a subset of your model, you can specify a container. Export Meshes Clear this checkbox to not export mesh data into the usd file. This enables you to export a hierarchy of objects with properties but without their 3D geometry. Export Camera Clear this checkbox to not export the 3D view's position as a camera in the usd file. Copy Textures to Output Directory Textures are referenced by path within usd files. They are not embedded into the usd file itself. By default, FlexSim will export the paths to where textures were loaded from disk (e.g., C:/Program Files/FlexSim/fs3d/Processor/ProTex.png). These paths may be absolute or relative paths. When transferring the usd file to another computer, if the textures aren't found in the same location, then they will not be displayed. Checking this box will copy textures from their original positions to the output directory of the usd file, and the references within the usd file will be relative paths to those copied textures from the output usd file. This makes the textures easier to distribute with the output usd file. Only textures used by exported meshes will be copied. If a texture already exists at the target location, it will be skipped, not overwritten. Delete destination texture files before exporting if you want to re-copy them. Subdirectory Copy textures to the specified subdirectory of the output directory. Clear this field to copy textures directly to the output directory (the same folder as the usd file). Export Object Properties Specify a set of object property tables to export as attributes of the usd prims. The set of objects and properties in each table will be exported to the usd file. Export Press this button to perform the export. A 3D view must be open in the model to perform the export because it may include meshes dynamically drawn via code."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/PerformanceMeasureResults/PerformanceMeasuresResults.html",
        "title": "The Performance Measure Results Window",
        "content": "Overview and Key Concepts The Performance Measure Results Window is used to view the results found in the Experimenter's Results Database File. For more information on using the Experimenter, see the Experimenter topic. The various tabs in this window allow you to explore the data generated by running an Experiment Job. In addition, you can use this window to export data to a report, including an Excel workbook. Using Filters The Experimenter allows you to define Filters. If you do, you can choose a filter to apply to this window. If a filter is applied, all tabs in this window will only show data associated with that filter. You can choose which Filter is applied using the dropdown in the top-left corner of the window. For more information about creating and using filters, see the Experimenter topic. Generating Reports The window has a Generate Report button, near the bottom of the window. Using this button, you can export three kinds of reports: Performance Measure Report - An html file showing data related to each Performance Measure. Interactive Report Builder - An html file that allows you to assemble both Performance Measure data as well as replication charts. You can export the final result as another html file. Excel Workbook - An Excel workbook containing the raw data from the Experiment. The Performance Measures Tab The Performance Measures Tab displays the data for a Performance Measure across all replications. It has the following properties: Performance Measure Select a Performance Measure to view. Chart Type Select a Chart Type. The other properties available on this tab depend on the Chart Type. You can select from the following options: Replications Plot Frequency Histogram Correlation Plot Data Summary Scenario Comparison Raw Data The following properties are available when the Chart Type is set to Replications Plot: Data Check this box to display each replication's values for each Scenario on the chart. Box Plot Check this box to show the box plot of the Performance Measure's values for each Scenario on the chart. Mean Check this box to show the estimated mean of the Performance Measure's values for each Scenario on the chart. Confidence If showing the Mean, select a confidence level. The interval will be shown around the mean for each Scenario on the chart. Chart View The chart shows the chart for the selected Performance Measure for each Scenario. The following properties are available when the Chart Type is set to Frequency Histogram: Number of Bars Specifies the number of buckets to show on the histogram. Chart View The chart shows a histogram of the Replication values for the selected Performance Measure. This chart can be helpful to see the overlapping ranges between scenarios. The following properties are available when the Chart Type is set to Correlation Plot: Correlate with Select a second Performance Measure to correlate with this one. Chart View The chart shows the linear correlation between two Performance Measures. The correlation line, as well as the r-squared value, is displayed on the chart. The following properties are available when the Chart Type is set to Data Summary: Mean Based on Select the confidence interval used when estimating the mean. Chart View The chart shows a table. Each row of the table deals with a Scenario. The columns of the table show the Mean, the Sample Standard Deviation, the Minimum, and the Maximum. The following properties are available when the Chart Type is set to Scenario Comparison: Confidence Level Select a confidence interval to use when testing for statistical difference between scenarios. Based on Select a Scenario to use as a baseline. The other scenarios will be compared to this scenario. Chart View The chart shows a table, with one row per Scenario. Given the number of replications, the chart calculates whether two scenarios are statistically different, and the difference between their means. The following properties are available when the Chart Type is set to Raw Data: Table The table shows the raw data for the Performance Measure. Each row represents a Scenario, with one column per Replication. The Dashboard Statistics Tab The Dashboard Statistics Tab allows you to view any dashboard chart for any Replication of any Scenario. Dashboard Statistics are only available if the Save charts and output tables for each replication box is checked before running a Job. This tab has the following properties: Select Chart Select which chart you'd like to view Scenario Select which Scenario you'd like to view Replication Select which Replication you'd like to view Chart View The chart shows the selected Chart for the given Scenario and Replication. The Statistics Tables Tab The Statistics Tables tab allows you to view each output table. Output tables include all Statistics Collectors and Calculated Tables in the model, even if those tables are part of a People Table or Chart Template. This tab allows you to see the data for all Scenarios and Replications of an output table as a single table. If you generate an Excel Workbook, that workbook will include one sheet per output table. Output tables are only available if the Save charts and output tables for each replication box is checked before running a Job. This tab has the following properties: Select Table Select which output table you'd like to view Settings Click the Settings button to open a popup where you can configure all output tables. That popup has the following options: View Limit - Limits the number of rows shown in table on this tab. To retrieve all data for the selected table, set this value to 0. Scenario ID - Check to show the Scenario ID as a column in the table. The Scenario ID is the database's ID for the Scenario. The first Scenario in the database has an ID of 1. If checked, you can also specify the name of this column. Scenario Hash - Check to show the short hash for the Scenario as a column in the table. The Experimenter calculates a unique hash based on the Parameter values, as well as the Stop Time and Warmup Time. This column will contain the last 8 characters from that hash. If checked, you can also specify the name of this column. Full Scenario Hash - Check to show the full hash for the Scenario as a column in the table. If checked, you can also specify the name of this column. Replication - Check to show the Replication number as a column in the table. If checked, you can also specify the name of this column. These settings are used when you query any output table with SELECT ... FROM Experiment.OutputTable . These settings are also used when generating an Excel workbook. Table The table shows all rows of the selected output table, for all Scenarios and Replications. The Result Tables Tab The Result Tables Tab displays each Result Table defined on this tab. By default, one Result Table called Summary is defined. You can query any Result Table using SELECT ... FROM Experiment.ResultTableName . If you generate an Excel Workbook, there will be one sheet per Result Table in the workbook. You can use this tab to add, remove, and edit Result Tables. This tab has the following properties: Select Result Table Select a Result Table to display or edit. You can also rename the current Result Table using this property. Settings Click the Settings button to open a popup where you can edit the settings for this Result Table. The popup includes the following options: Scenario Name - Check this box to include the Scenario Name as a column in the table. If checked, you can also specify the name of the column. Scenario ID - Check this box to include the Scenario ID as a column in the table. If checked, you can also specify the name of the column. Scenario Hash Check this box to include the last 8 characters of the Scenario's hash as a column in the table. If checked, you can also specify the name of the column. Full Scenario Hash - Check this box to include the full Scenario Hash as a column in the table. If checked, you can also specify the name of the column. Run Time - Check this box to include the Run Time of each Scenario as a column in the table. If checked, you can also specify the name of the column. Warmup Time - Check this box to include the Warmup Time of each Scenario as a column in the table. If checked, you can also specify the name of the column. Parameters - Specifies which Parameters to include as columns in the table. Performance Measures - Specifies which Performance Measures to include as columns in the table. Row Settings - Specifies the row settings for the table. If set to One row per scenario , you can optionally include the number of replications as a column and specify that column's name. All Parameter and Performance Measure columns will show the average value across all Replications for each Scenario. If set to One row per replication , the table will include a column for the Replication number, and you can specify the name of that column. Add/Remove/Up/Down Use these buttons to add, remove, or reorder Result Tables. Table View Displays the data in the Result Table. The Console Output Tab The Console Ouput Tab allows you to view any messages printed to the System or Output Consoles for every Scenario and Replication. It has the following properties: Select Console Select which console's messages to view. Scenario Select which Scenario to view. Replication Select which Replication to view. Console View This area shows the selected output. The message <end of output> appears after any messages, and is not part of the original data. The State Files Tab The State Files Tab shows any available State Files that have been saved, arranged by Scenario and Replication. State Files are only available if the Save state for each replication box is checked before a Job runs. This tab has the following properties: Select File Use this tree to select a State File from a particular Scenario and Replication. Extract State File... Click this button to extract the selected State File from the Database Results File and save it with a new name. Open after extraction If checked, when you extract a single state file, a new FlexSim instance will open the saved state file. Extract All State Files... Click this button to select a directory. All State Files in the Result File Database will be extracted and saved to that directory."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/PerformanceMeasureTables/PerformanceMeasureTables.html",
        "title": "Performance Measure Tables",
        "content": "Overview and Key Concepts A performance measure table allows you to specify the performance measures for your model: Performance Measure Tables are accessed from the Toolbox. For more information on how to use performance measures, see the Performance Measures topic. Performance Measure Table Properties Icon Description Duplicate the selected performance measure(s). Remove the selected performance measure(s). Move the selected performance measure(s) up or down in the list. Performance Measures Row Edit You can use this edit field or the spinner to adjust the number of performance measures in the table. Table Rows Each row of the table allows you to edit the following attributes of each performance measure: Name Value Display Units Description The name of each performance measure must be unique. You cannot change the value of a performance measure directly. Instead, you'll specify an expression that determines the value of the performance measure. The Display Units column can contain arbitrary text. However, that text should be fairly short, and should indicate the units of the parameter. It is also a helpful hint to the model user about the units of the parameter. The Description column can contain arbitrary text. This text is usually a short phrase that indicates what the performance measure reports. Value Properties When you select a cell in the second column of the performance measure table, a button will appear. Clicking that button will open the Value Properties for the selected value. Reference Specifies a node related to this value. The reference is passed into the callback function for this value. Value Specifies a function that is called whenever the value of this performance measure is required. The reference is passed in to this function. In some advanced and unusual cases, you may need to return an arbitrary node structure from each replication of an experiment or optimization. If the repData node passed in to the function is present, you can add any structure you need to that node. Apply to All Visible only if multiple values are selected. Applies any changes to all selected values, rather than just the first selected value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/PerformanceProfiler/PerformanceProfiler.html",
        "title": "Performance Profiler",
        "content": "Overview and Key Concepts The Performance Profiler window allows you to record how much time the CPU spends in profiled functions while the model runs: The Performance Profiler works by recording the time spent in certain FlexSim functions as the model runs. Once recording is finished, the Performance Profiler will present the data so that you can which of the profiled functions required the most time. The Performance Profiler has two main views for displaying performance data. The first view is the Performance Tree , the view on the left. This view shows each node in the tree, and how much time the CPU spent executing code associated with that node. The list of nodes is sorted by how much time was spent in each node. The second view in the Performance Profiler is the Performance Graph . This view draws each node as a box. Bigger boxes indicate that more CPU time was spent at a particular node, and smaller boxes indicate that less CPU time was spent at that node. The boxes are also colored by CPU time: the brightest, most yellow box corresponds to the node where the CPU spend the most time. The darkest, most purple box corresponds to the node where the CPU spent the least time. Resizing the Performance Tree and Graph Views If you move the mouse between the Performance Tree and Graph views, you can click and drag to resize both views horizontally. These two views work together. For example, you can click on a node in the Performance Tree View, and the Performance Graph will show that node bounded in red: Alternatively, you can click on a box in the Performance Graph. This will highlight that box in the Performance Tree: In this example, the model is using the Storage System to find items for pickers to pick. The Storage System is running a query to find items, and the Performance Profiler shows us that the query ran 758 times, and took 92.54 ms to run in total. In some cases, you can use the Performance Profiler to improve the run speed of your model. In the previous example, we saw that the model spent most of its time running a query to find items. However, that query used an ORDER BY clause. Without that ORDER BY clause, the performance profiler tells a very different story: Without the ORDER BY clause, the model doesn't spend nearly as much time in the Tools folder as it did before. In this particular model, the next busiest node is in a Statistics Collector: In this way, the Performance Profiler allows you to see the CPU cost of each object or feature in a model. Using this information, you may be able to find ways to reduce the total CPU cost of your model. You can access the Performance Profiler from the Debug menu on the main toolbar. Properties The Performance Profiler has the following properties: Start/Stop Recording This button will either start or stop recording a performance profile. You can only record a single profile at a time. When you begin recording a profile, any previous profile data will be erased. Non-busy time is not included while recording a profile. Performance Tree If you have recorded a performance profile, this view will show the time used by each node in the tree, sorted by total time used. You can click on nodes in this view to highlight them in the Performance Graph. You can also right-click on a node and choose View Down or View Up. If you choose View Down, then the Performance Tree and Performance View will update to show only the specified nodes and its subnodes. Performance Graph If you have recorded a performance profile, this view will draw a visual representation of the time used by each node in the tree. Bigger and brighter boxes represent nodes that used more time."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/PresentationBuilder/PresentationBuilder.html",
        "title": "Presentation Builder",
        "content": "Overview and Key Concepts The Presentation Builder that will assist you in developing a fly-thru presentation of the model. You can create multiple flypaths each with their own set of flypoints. When run, the 3D view will sequentially fly or move to each flypoint in the flypath. When used with the presentation slide option of the visual tool the presentation builder can develop PowerPoint™ style presentations in 3D. If you do not have a 3D view active, the Presentation Builder will be grayed out. By default, flypaths are not associated with simulation speed, instead flypaths travel in real time. That setting can be changed by toggling the Stpowatch button . Flypaths also do not start/stop when the model is started/stopped. The Presentation Builder has its own set of Start and Stop buttons. However, when using the Video Recorder, you can specify one your flypaths to be run while recording your video file. The Presentation Builder is accessed from the Toolbox. Creating a Flypath Creating a flypath is easy in FlexSim. Once you have the Presentation Builder open, move/rotate the 3D view to the position you would like the flypath to start at. Press the to add a flypoint. This is similar to a keyframe in the Animation Creator. Notice that the Presentation Builder automatically moved the flypath time cursor two seconds ahead of your created flypoint. This makes it easy to add multiple flypoints very quickly. Move to your next desired position/rotation and click the again. Continue this process until you have created a complete flypath. You can always insert new flypoints by moving the time cursor to any spot on the time line and hitting the . Delete flypoints by selecting them and pressing the or hitting the Delete key. You can change the zoom of the timeline by either using the mouse scroll wheel or dragging the ends of the bottom scrollbar. Using the Scroll Wheel The timeline must be the active view in order to receive mouse scroll events. You may need to click on the timeline to make it the active view if zooming is not occurring. Updating Flypoints Once a flypoint has been created, the time cursor must be directly over the flypoint in order to update it. When the time cursor is directly over a flypoint, the flypoint diamond will change to a hollow diamond and the position and rotation boxes below will change to red text. The position/rotation boxes display that flypoints current position. You can edit those fields directly to change the position of your flypoint, or you can reposition the 3D view to update your flypoint. You can move flypoints anywhere along the timeline by clicking and dragging the flypoint to a new position. Selecting Flypoints Hold the CTRL key down and click on flypoints to select multiple flypoints. Hold the ALT key down and click a flypoint to select all flypoints from the clicked flypoint to the end of the flypath. Running Flypaths in the 3D View Aside from the controls in the Presentation Builder, you can also fly through flypaths by pressing keys on the keyboard. This is useful when you don't want to have the Presentation Builder open. Press one of the numbers: 1-9 to run the associated flypath (plays the flypath from the list at the given rank number). Press the space bar or the 'N' key, and the view will run the next flypath. Press the 'B' key and the view will go back to the previous flypath. Properties Flypaths Toolbar Icon Description Adds a new flypath. Duplicate the selected flypath. Removes the selected flypath. Flypath List The list of the model's flypaths. Select a flypath to view its properties in the Flypoint Editor. Flypoint Toolbar Icon Description Moves the time cursor to the first flypoint in the flypath. Runs the flypath from the current time. Stop the current flypath. Moves the time cursor to the previous or next flypoint. Adds a new flypoint at the time cursor's current position. Duplicates the selected flypoints. Removes the selected flypoints (same as Delete key). Zooms the timeline in or out to make all flypoints fit on the screen. Causes the flypath to loop back to the beginning once it hits the last flypoint. If toggled, the flypath will use the model's run speed instead of real time. This can be useful when working with the Video Recorder. By default this option is off and the time displayed in the timeline is in real seconds. Sync the 3D View. If toggled, the 3D view will update it's position and rotation as the current time cursor is moved along the timeline. If toggled, moving or rotating the 3D perspective view will cause a new flypoint to be created if not flypoint exists at the current time. Timeline The timeline displays a list of times at the top in seconds. Below that are all the flypoints, or keyframes. You can add any number of flypoints to a flypath. X, Y Specifies the x or y location of focus point of the camera. Rad The radius field specifies the distance the camera is away from its focus or rotation point. RX Specifies the pitch of the camera. RY This field specifies the roll of the camera. RZ This field specifies the yaw of the camera."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ProcessFlowVariables/ProcessFlowVariables.html",
        "title": "Process Flow Variables",
        "content": "Overview and Key Concepts Process Flow objects can have variables defined on them that can be referenced from any activity through the Universal Edit fields or through the getprocessflowvar() command. Why Use Process Flow Variables? Process Flow Variables allow you to present certain inputs in the Process Flow in an easy-to-use front-end. Let's say there is a certain input that may change across different instances, or perhaps across different scenarios that you want to test. Instead of requiring you or another person to dive into the internal workings of the Process Flow, you can place it in a Process Flow variable, then turn off Edit Mode so that when users want to change it, they can change it through an easy front-end interface. Properties The following image shows properties for Process Flow Variables: Each of these properties will be explained in the following sections. Name You can set the name of the variable here. Type This specifies the return value of this variable, which can be Any, Number, Object, Node, or String. User Accessible If checked, this variable will be visible and editable to anyone. If unchecked, this variable will remain internal to this Process Flow. Defined This defines the instancing behavior for the Process Flow Variable. If set to Global , there will be one variable for every instance of this Process Flow. Since there is only ever one instance of a General Process Flow, this option is always set to Global for General Process Flows. If set to Per Instance , each instance will have its own version of this variable. Default Value This is where you define the code to calculate this variable."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/PropertyTables/PropertyTables.html",
        "title": "Property Tables",
        "content": "Overview and Key Concepts Property tables are a tool you can use to better visualize and change the properties of objects in your model. As you add objects to your model, each object has a defined set of properties that configure the behavior of that object. As the number of objects in your model grows, it can become challenging to see, much less manage all of the different properties for all of the different objects in your model. While the Properties pane enables simple editing of multiple objects simultaneously, property tables can be much more powerful because they let you both see and compare the property values of multiple objects, as well as change those properties, in an Excel-like table interface that is intuitive and easy to use. The way that property tables enable this is by viewing the model like a database table. Each object represents a row in this table, and the properties of each object represent fields, or columns in the database table. With this database-like perspective, you can query the table of objects, selecting specific properties that you want to view or edit. You can filter your query, either by certain types of objects, or by group membership, or by certain property values, etc. Finally, you can sort the query by those same, or different, criteria. The results of this query are displayed in a table view, allowing easy comparison of the different objects across different rows of the table, and allowing you to quickly and easily change the properties of the objects in the table, either individually or by changing multiple objects at a time. Creating Property Tables There are primarily two ways to create a property table. You can either create a property table using the Toolbox , or you can create one using the Properties pane of a specific object. Creating a Property Table from the Toolbox To create a property table from the toolbox, click on the Toolbox tab, press the button, and choose Object Property Table . This will create a basic property table, showing the name of each object in your model. Further configuration can be done within the property table tab. Creating a Property Table from the Properties Pane To create a property table from the Properties pane, click on an object, and find a desired pane in its properties . On the title bar of the pane there is usually a button. Press that button and choose Compare Properties . This will open a property table window comparing relevant properties of objects in the model. The corresponding row of the object you selected will also be highlighted in the table. Also, if you shift-select the object in red before pressing the button, then the property table will filter by selected objects, meaning you can quickly shift-select different sets of objects, then click back into the property table, and it will update to filter by those objects. Note that this property table, by default, is only active as long as the window is open. To make this table into a permanently available table in the toolbox, go to the Properties pane and press Install Property Table . Customizing Property Tables The property table tab includes controls for defining which properties you want to view, how to filter the set of objects for viewing, and how they should be ordered in the table. Press the button to define which properties you want to see in the table. Press the button to define the properties by which to filter objects for display in the table. Once you've chosen a property to filter by, that property will appear in the filter edit field, and you can click on it to further define the filter expression. Filtering Code Fields Many object properties are associated with objects' logical fields, where the table view is showing a summary of the logic. For example, the SendToPort property will often show you values like First Available or Shortest Queue . This is a short summary of what is actually a full code field with potentially several FlexScript statements. The actual value of the property is the full code text, whereas the table view filters the code to show just the summary. If you want to filter on these properties, you cannot filter by the summary, but must filter by the full property value, i.e. the code text. For example, you cannot filter by the expression: SendToPort = 'First available' Instead you can use the SQL LIKE operator. Instead of the former expression, you can use the expression: SendToPort LIKE '%First available%' This will find objects with a SendToPort field that has the text 'First available' anywhere in it. Finally, you can click on the button to define how the table should be sorted. This works similarly to the way you define filtering. Object Label Values You can also select, filter, and sort by object label values. To do this, press the desired , , or button. At the top of the dialog you should see a Label field. Type in the name of the label and press the button. This will add that label to the selection/filter/sort. Changing Object Properties Once you have configured the table to show exactly what you need, you can now use the table to not only compare property values across objects, but also to change them, either individually or multiple objects at a time. To change a single object, you can double-click on the target property cell for that object (or click on the cell and press F2), and type in the value to set it to, then click off the cell. This will immediately apply your entered value to the object's property. Note, however, that some properties do not allow direct editiing like this. Alternately, you can edit the properties of multiple objects at the same time. When you select one or more rows of a single property, a button will often appear beside your selection. Press that button to open a dialog for editing the value. Once edited, press that dialog's Apply button, and the edited value will be applied to all rows that you have selected in the table. Exploring Properties Properties are primarily categorized by specific object classes. For example, fixed resources include properties that specifically configure fixed resource behavior. Nevertheless, there are also several properties that are generally applicable to all classes of objects. These are accessible through the General and Visual categories of the various drop-downs. While these properties work just like any other properties, many are particularly useful for filtering, sorting, and better visualizing your selection. These include the following: Name Property Category Potential Uses Name General Filtering, Sorting The Name property shows the name of each object. This is useful for filtering and sorting purposes. If you have consistently named your model objects, you can use the LIKE clause to find objects that have certain patterns in their names. To do this: Click the button. Choose General > Name . Configure the filter to use the LIKE clause, using the drop-down. Enter a name pattern. For example, enter Cell_1_% . The example pattern above will find all objects whose name starts with Cell_1_ . Classes Property Category Potential Uses Classes General Filtering The Classes property is the array of class names of which an object is an instance. This property is especially useful in filtering. If you want to only look at objects of a certain class in your model, like conveyors, you can filter by the Classes property. Click the button. Choose General > Classes . Enter the class name you want, or choose a class from the drop-down menu. Make sure the IN option is chosen. The IN Clause The IN clause is used when the property value is an array. It filters by whether a certain value is in the array. A typical Classes property value might be something like the following: [\"FlexSimEventHandler\", \"FlexSimObject\", \"FixedResource\", \"Queue\"] The IN clause asks the question, is a certain element in this array? For example, the expression \"Queue\" IN Classes , when evaluated against the Classes property value above, would return true, because \"Queue\" is one of the elements of that array. Alternately, the expression \"Processor\" IN Classes would be false. Using these types of expressions, you can filter your objects by the classes they are instances of. Also, by the fact that the Classes property is an array of all parent classes, you can filter both more generally—say by all fixed resources—or more specifically, like for only queues. AllGroups Property Category Potential Uses AllGroups General Filtering, Sorting The AllGroups property is the set of groups of which the object is a member, either indirectly (through subgroups) or directly. This is very useful in filtering and sorting. For example, if you want to see and edit the properties of only the objects in a certain group, you can filter by this property. Click the button. Choose General > AllGroups . Enter the group name you want, or choose a group from the drop-down menu. Make sure the IN option is chosen. See the explanation above for how the IN clause works. The AllGroups property is also very useful for sorting. Say, for example, you are editing conveyors (you have added the expression \"Conveyor::Conveyor\" IN Classes to your filter). You want to see all of your conveyors in the table, but you would like to categorize them in the table by the group you've assigned them to. To do this: Click the button. Choose General > AllGroups . This will sort the conveyors in your table by their group membership, so that all conveyors in the same group will be together in the table. IsSelected Property Category Potential Uses IsSelected General Filtering, Visibility The IsSelected property is 1 if the object is selected (red-framed), and 0 otherwise. This property is especially useful for visibility reasons. If you are quickly moving between the 3D view and the property table, it is often beneficial to be able to see which objects in the 3D view correspond to which rows in the property table. To do this: Click the button. Choose General > IsSelected . Select desired ranges of rows, and turn the IsSelected property on or off. Click back in the 3D view to see which objects have changed. This operation enables a quickly visible correspondence between the rows of the table and their model objects. The IsSelected property also allows you to go the other way. You can select a set of objects in your 3D view, and then have the table just show those objects that you've selected in the property table. To do this: Click the button. Choose General > IsSelected . Enter 1 in the field, and make sure the comparison is = . Click in your 3D view and shift-select a set of objects in your model. Click back into the property table view. As soon as you click into the table view, the table view will update, showing only the objects you have selected in the 3D view. This feature enables you to quickly view and configure properties for the objects that you select in your model. Color Property Category Potential Uses Color Visual Visibility The Color property shows the color of the object. Like IsSelected, this property allows you to easily correlate rows in your table to objects in your model. You can quickly change the color of objects in ranges of rows of the table, in order to see which objects in the 3D view those rows are associated with. Click the button. Choose Visual > Color . Select desired ranges of rows, and change the Color property for those rows. Click back in the 3D view to see which objects have changed. The main advantage of using Color over IsSelected is that sometimes a color change on an object is easier to recognize, especially when you are zoomed out, than finding the red selected frame of an object. Types of Properties While all property values return a Variant , properties can generally be categorized into different value types. Below are the set of possible property value types. Number A Number property is a property that holds a double-precision floating point number. Boolean A Boolean property is a number property that holds either a 1 or a 0 value. When you change these properties, FlexSim's interface will show you a checkbox. String A String property is a property that holds a string value. Node The Node property will return a node when you get it and take a node when you set it. Alternately you can pass a string when you set it, and it will interpret the string as a path, resolving the reference accordingly. It will first attempt to resolve the path relative to the object you are setting the property on. If it cannot resolve it there, it will resolve the path relative to the model. Array The Array property will return an array when you get it and take an array when you set it. Alternately you can pass a string when you set it, and it will automatically parse the string into an array. This string can be in the format you see in global tables: Array[5]: {1, 2, 3, 4} Or it can take a json-like form: [1, 2, 3, 4] Either of these formats will be properly parsed into an array. This is useful if you are exporting/importing from Excel or a database. You can simply store the value as a string in the database, and the array will be resolved when you set it. Options An Options property is a property that can have one of a finite set of values. In FlexSim's interface, you can choose the options in a combobox. When you get the value ( Object.getProperty() ) it will give back the number or node value associated with the option. However, if the GET_PROPERTY_FLAG_STRING flag is used it will return the name of the option. When you set the value ( Object.setProperty() ) you can either pass the option's corresponding number/node value, or you can pass an english string that is the option's name, and it will automatically resolve the proper associated value. Code A Code property is a property that can potentially hold code logic. In some cases, the property can hold a simple number or a treenode reference, but in other cases, the user has defined logic to be evaluated. When the property has code, then retrieving the property ( Object.getProperty() ) will return the full code string. Unit A Unit property is a property that corresponds to a measured unit, such as distance, speed, acceleration, time, etc. When you change these properties, FlexSim's interface will show controls where you can define what units the given number should be represented in. When you get the value for a Unit property ( Object.getProperty() ) it returns back a double that is represented in model units, which are not necessarily the same as the displayed units. However, if the GET_PROPERTY_FLAG_UNITS flag is used it will return a 2-length array with the display value in the first element and the display units in the second. If you set the property ( Object.setProperty() ) then it assumes the value you set it to is also in model units. Alternatively you can pass an array into Object.setProperty(), where the first element of the array is a number, and the second element is a string abbreviation of the units the value is in. For example, obj.setProperty(\"Acceleration\", [1.2, \"m/min/min\"]) sets an object's Acceleration property to 1.2 meters per minute per minute. Using SQL Directly Property tables are an easy-to-use tool for viewing and managing object properties. At their core, however, property tables are just a user interface wrapper around FlexSim's powerful SQL capabilities . On the right side of the property table tab, you will see a SQL button. Press this button to show the full SQL query associated with the table you are viewing. You can copy/paste this query into a call to the Table.query() command, and you will get the same result as what the property table is showing you. While, for simple scenarios, this doesn't get you much more than you already can do within the property table interface, it does open a lot of possibilities for implementing your own customized functionality programmatically, such as: Composing inner join queries that relate objects in the model with other data such as global tables Aggregating information on multiple objects with aggregation functions such as AVG(), COUNT(), etc. Using the SQL UPDATE and DELETE clauses to either change properties or remove objects from the model Using the SQL INSERT INTO clause to auto-build your model Using the Objects() Table To query the set of objects in your model, you use the Objects() table in your query. For example: SELECT Object, Name FROM Objects() The Objects() table is what would be called in standard SQL a table-valued function. You can optionally pass a parameter into this function to define the 'root' node, whose subtree will be searched for objects. The parameter can either be a path, a name of an object, or a reference to an object in the model. SELECT Object, Name FROM Objects('MODEL:/FirstFloor') SELECT Object, Name FROM Objects('FirstFloor') SELECT Object, Name FROM Objects(Model.find('FirstFloor')) All of the examples above would give the same result. Here, the 'root' node is the object named FirstFloor in the model. On the other hand, if no parameter is passed into Objects(), then the 'root' node is the model. The query will recursively search the subtree of the root object, finding any objects, and will create a 'virtual' table where each object represents a row in the table. Programmatically Updating Object Properties You can also use property tables to update object properties programmatically. This can be done in one of three ways. Using the Table class. Referencing a property table directly in an UPDATE clause in Table.query(). Updating the Objects() table with Table.query(). Updating using the Table Class To update object properties using the Table class, simply interact with the property table normally as if it were a global table. double speed = 5; Table propTable = Table(\"TravelSpeeds\"); for (int i = 1; i <= propTable.numRows; i ++){ propTable[i][\"MaxSpeed\"] = speed; } Updating by Referencing a Property Table Directly To update object properties in Table.query() with a direct property table reference, just put that table's name in the UPDATE clause. Table.query(\"UPDATE TaskExecuterProps SET MaxSpeed = 5\"); This query assumes that, first, you have a property table named TaskExecuterProps in your model, and, second, that property table has a MaxSpeed column. The query goes through every row (i.e. object) in the property table, and sets the corresponding object's MaxSpeed property to 5. You can also use FlexSim SQL's $ mechanism to pass in values to the function. double speed = Table(\"SpeedTable\")[\"TaskExecuters\"][\"Speed\"]; Table.query(\"UPDATE TaskExecuterProps SET MaxSpeed = $1\", speed)); The Properties Table is Not Auto-Updated When you access a properties table programmatically, for speed reasons the property table does not automatically update its list of filtered objects. This means that the set of rows in the table will be the same as when you last interacted with the table in the user interface. This is true both when you access the property table through the Table class, as well as with Table.query(). If you want a truly up-to-date filtering of the objects in your model, you should query/update the Objects() table directly. Updating the Objects() Table You can also update object properties by referencing the Objects() table directly. Here you will likely need to add a WHERE clause to filter out the objects you don't want updated. Table.query(\"UPDATE Objects() SET MaxSpeed = 5 WHERE 'GroupA' IN Groups\"); This query goes through the Objects() table, meaning every object in your model. It then filters by the expression WHERE 'GroupA' IN Groups . This means it only wants to update objects whose Groups property includes the value 'GroupA'. In other words, it only wants objects that are members of the group named 'GroupA'. Finally, for those group members, it sets the MaxSpeed property to the value 5. Using SQL you can also do things like inner joins to dynamcially update object properties by relational lookups in other tables. For example, you could set up a Speeds table that defines different speeds for objects based on which group the object is a member of. Then you can use an inner join to update objects that are members of the corresponding group. UPDATE Objects() AS Obj INNER JOIN Speeds ON Speeds.Group IN Obj.Groups SET Obj.MaxSpeed = Speeds.Speed This query goes through all objects in the model ( UPDATE Objects() AS Obj ), and then cross references that object with the Speeds global table, finding the row whose Group value is one of the elements in the object's Groups property, meaning the object is a member of that group ( INNER JOIN Speeds ON Speeds.Group IN Obj.Groups ). Once it's found that row, it sets the object's MaxSpeed property to the speed table row's Speed value ( SET Obj.MaxSpeed = Speeds.Speed ). These examples demonstrate just a small subset of the capabilities you can harness using property tables in conjunction with FlexSim's SQL engine. For more information on FlexSim's SQL capabilities, refer to the SQL Queries topic, especially its SQL Language Support section. For a general introduction to SQL, see w3schools.com . The Properties Pane The property table's properties pane allows you do export/import your property table data, allowing you to easily switch between different property configurations. The best way to explain how this works is with an example. Let's say that you have a model with four processors, and you want to experiment with various property configurations. You've created a property table that shows the processors' UseTransport , UseProcessOperators , and NumProcessOperators properties. You want to save this configuration off. You do the following: Create a global table named ProcessorConfig1 . In the property table properties pane under Copy to Global Table , choose that table from the drop-down, and then press Copy . This will copy the data from the property table to the global table. Next you want to create a second configuration. You change various properties in the properties table, then create a second global named ProcessorConfig2 and then copy the property table to that table. Now that you have saved off these two configurations, you can easily switch between them. Beside Update Query , press Generate . This will generate an update query based on the current set of columns in the property table. The query should look like the following: UPDATE Objects() AS Obj INNER JOIN $1 AS Src ON Obj.Object = Src.Object SET Obj.Name = Src.Name, Obj.UseTransport = Src.UseTransport, Obj.UseProcessOperators = Src.UseProcessOperators, Obj.NumProcessOperators = Src.NumProcessOperators In Update from Global Table , choose the table you want to update from. Press Execute The properties of objects in your model, and the property table itself, should update based on the configuration you are updating from. You can then easily update again from the other configuration by choosing that table in Update from Global Table , and pressing Execute again. How It Works The query takes a Src table, i.e. the table you want to update from, and matches its Object column with the object references in the model. Then it updates those objects' properties based on the value of the matched row in the Src table. Properties Pane Fields Below are the set of fields you can configure in the properties pane. Name At the top of the pane, you can edit the property table's name. Copy to Global Table This defines the name of the a global table you want to copy to. To copy the table to a global table, enter the global table name, or choose a global table from the drop-down list, then press the Copy button. You can type any name, and if that global table doesn't already exist, it can automatically add it for you when you press Copy . Update from Global Table This field you can use to update from a global table you have previously saved to. This field works in conjunction with the Update Query . The global table you specify becomes the $1 parameter in the query. This field is a dynamically evaluated expression. You can use any FlexScript expression to resolve which table to import from, including, for example, tying it to a model parameter . Using a model parameter is an available pick option in the drop-down. Update On Reset If this box is checked, the update mechanism will automatically be executed on each reset of the model. Update Query The update query is a query that you can execute manually, by pressing Execute or have it executed on each model reset. As explained above, it allows you to update properties based on saved configurations. While the Generate button auto-generates a query intended for this default configuration switching mechanism, the full query is available to you for customization. The query is passed directly into Table.query(). You can therefore customize it to your model's needs, for example by doing an INNER JOIN with some other table, like the Speeds table mentioned above . Auto-Building the Model As mentioned above, you can use the Objects() table, in conjunction with the SQL INSERT INTO clause to actually create objects in the model, and give them property values. For example, copy-paste the following query into a script call to Table.query() and execute it. INSERT INTO Objects() (Class, Name, Location, OutObjects) VALUES ('Source', 'Source1', ARRAY(0, 0, 0), ARRAY('Queue1')), ('Queue', 'Queue1', ARRAY(5, 0, 0), ARRAY('Processor1', 'Processor2', 'Processor3')), ('Processor', 'Processor1', ARRAY(10, 3, 0), ARRAY('Sink1')), ('Processor', 'Processor2', ARRAY(10, 0, 0), ARRAY('Sink1')), ('Processor', 'Processor3', ARRAY(10, -3, 0), ARRAY('Sink1')), ('Sink', 'Sink1', ARRAY(15, 0, 0), ARRAY()) This will create a connected, fully functioning set of objects in your model. While you likely would not write such a query by hand, this capability enables even model-building to be a fully data-driven activity. You can create a simple script that will read from a table and construct a SQL INSERT INTO query, then run the query to create the objects in the model. While we hope to integrate such functionality into FlexSim's property tables in the future, you already have the tools needed to do this yourself. Alternately, instead of enumerating the objects in the code, you can use the INSERT INTO SELECT clause. Use this if you have a global table that you have perhaps imported from some external source. INSERT INTO Objects() (Class, Name, Location, OutObjects) SELECT Class, Name, Location, OutObjects FROM AutoBuildData Required Fields for INSERT INTO When you are auto-building your model using the INSERT INTO clause, you must provide at least one of two special fields in the query, so that FlexSim can know what types of objects to create. Other property fields are optional, and, if not provided, will revert to their default property values. When using INSERT INTO, you must either include the Class field, or the CopyFrom field. The Class field is the name of the class from which to create an instance. This is something like 'Source', 'Processor', 'Queue', etc. This field is also available for viewing in a property table. Alternately, you can provide a special CopyFrom field. This is a path or name of an object that you want to create a copy of. Using this field, you can create and pre-configure an object in your model, and then create copies of that object in the auto-build step. The example query below is similar to the previous example, except here an object named TemplateSource has already been created in the model. A copy of that source is created using the CopyFrom field. All other objects are created as an instance of a library class. INSERT INTO Objects() (Class, CopyFrom, Name, Location, OutObjects) VALUES (NULL, 'TemplateSource', 'Source1', ARRAY(0, 0, 0), ARRAY('Queue1')), ('Queue', NULL, 'Queue1', ARRAY(5, 0, 0), ARRAY('Processor1', 'Processor2', 'Processor3')), ('Processor', NULL, 'Processor1', ARRAY(10, 3, 0), ARRAY('Sink1')), ('Processor', NULL, 'Processor2', ARRAY(10, 0, 0), ARRAY('Sink1')), ('Processor', NULL, 'Processor3', ARRAY(10, -3, 0), ARRAY('Sink1')), ('Sink', NULL, 'Sink1', ARRAY(15, 0, 0), ARRAY()) See SQL Queries for more information on using SQL in FlexSim."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ReinforcementLearning/ReinforcementLearning.html",
        "title": "The Reinforcement Learning Tool",
        "content": "Overview and Key Concepts The Reinforcement Learning tool enables you to configure your model to be used as an environment for reinforcement learning algorithms. When a reinforcement learning algorithm launches FlexSim in order to train an agent, it communicates with this tool using sockets. This tool is designed to follow a particular socket protocol for handling each function in a custom reinforcement learning environment. For more information and steps to get started, see Key Concepts About Reinforcement Learning . A model may contain multiple Reinforcement Learning tool objects. When training, only the first Reinforcement Learning tool object will be used to learn. The others will execute the On Request Action trigger to make random, heuristic, or trained decisions at the specified events. You can use the right-click Move Up option in the Toolbox pane in order to reorder the Reinforcement Learning objects in your model. The Settings Tab The Settings tab has the following properties: Observation Space The Observation Space configures the set of parameters that are used as input states to the reinforcement learning algorithm. Before beginning training, the algorithm needs to know the range of available inputs in order to learn how those states correspond to received rewards for taking actions. The following spaces types are available: Box - A space containing one or more Continuous parameters. Each continuous parameter has a defined minimum and maximum value. Discrete - A space containing exactly one Integer, Discrete, Binary, or Option parameter. Each of those parameter types has a specific range of possible values. In the algorithm, each value will be re-mapped to values starting at 0 regardless of their bounds. For example, a Discrete parameter with a lower bound of 10, an upper bound of 12, and a step size of 0.5 will map the possible values of [10, 10.5, 11, 11.5, 12] to [0, 1, 2, 3, 4, 5] for the algorithm. MultiDiscrete - A space containing one or more Integer, Discrete, Binary, or Option parameters. Each parameter will be remapped as described in Discrete above. MultiBinary - A space containing more than one Binary parameter. Each binary parameter will be true (1) or false (0). Custom - A space defined by a custom string and callback. If you have customized your environment to handle additional space types, this option enables you to specify a particular string for FlexSim to return as the space definition. It will also execute the Get Observation callback, which should return a Variant (such as a particular value, an Array, or a Map), which will be converted to JSON and sent to the reinforcement learning algorithm when an observation is requested. Action Space The Action Space configures the set of parameters that are used as the potential actions that an agent can take after an observation. Before beginning training, the algorithm needs to know the range of available actions in order to learn how those actions correspond to received rewards for an observed state. The Action Space contains the same options as the observation space above, specifying an action as a set of parameters with constrained ranges of possible values. For a Box action space, parameters will be normalized to a range between -1 and 1 for the algorithm. The action values sent from the algorithm will be remapped to the proper bounds when setting the action parameters in the model. For a Custom action space, the Take Action callback receives a string describing the action that should be taken, and the callback code can then parse that string and take the appropriate action. Triggers The following triggers are used by the Reinforcement Learning tool: On Observation - This trigger is executed just before an observation. You can use this trigger to set the observation parameters just before they are returned. This trigger is optional. If other code sets the observation parameters, then this trigger can do nothing. Reward Function - This trigger must return an array with 2 elements. The first element is a number value specifying a reward amount. The second element is a 1 or a 0 specifying whether the training episode is done. This function must be implemented in order to use the model as a training environment. When training, the results of this trigger will be passed to the algorithm. When running regularly, the results will be passed to the On Request Action callback. On Request Action - This trigger will fire when the model is running regularly, not when training. This trigger fires at the moments when an action is requested. While training, the reinforcement learning algorithm provides the actions. When not training, this trigger provides the actions. You can use this trigger to either use a random function, a heuristic function, or a trained agent to determine an action for the current state of the model. Use this trigger to set the action parameters. Decision Events When the model is reset, an initial observation and action will be taken. The model will then run. At each of the specified decision events, a reward will be received for the previous actions, and if the episode is not done, another observation and action will be taken. This cycle will continue until the Reward Function returns that the episode is done. The logic for returning a reward, making an observation, and taking an action will happen immediately before the specified event. You can specify the important events where a decision needs to be made, and this object will set the action parameters just before that event is executed so that you can use those action parameters within the event. In addition to specifying decision events, you can also request a decision at a particular moment by using custom code. The reward, observation, and action will all happen immediately inline during that function. You can then use the action parameters immediately after the function. requestdecision(\"ReinforcementLearning1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/ScriptConsole/ScriptConsole.html",
        "title": "Script Console",
        "content": "FlexScript API Reference For information on FlexScript classes, see the FlexScript Class Reference . Overview and Key Concepts The script console allows you to execute Flexscript commands on the fly without needing to run your model. This can be useful for getting information from your model as well as configuring your model. Type the Flexscript code in the main field at the bottom of the window and press the . If your code has a return value, this value will be displayed in the results field. If you are executing a command with a return value like, Model.find(\"Processor1\") and your code consists of only one line, you can omit the return and the semi-colon at the end of the line to see the return value in the results field. You can use the Sampler button to reference objects and paths in your model. A Script Console can be accessed through either the Debug menu on the main toolbar. Debugging Code If you need to debug your code, you can enter debugging mode by clicking the of the but and select Debug. This will place a debug point at line 1 of your code, open it in a Code Editor and execute the code. Saving Scripts Code entered into the Script Console can be saved as either a Model Script or a User Script by pressing . Icon Description Saves the current script. If the script has not yet been saved, opens the Save As popup. Opens the Save As popup. The following image shows the Save As popup. If needed, press the arrow to display a list of previously saved scripts. Save As User Script These scripts are saved in the user preferences folder (VIEW:/environment). These scripts are available for all models while FlexSim is open under your Window's user account. Save As Model Script These scripts are saved in the model's /Tools/Scripts folder. They are only available for the current model. Loading Scripts Saved scripts can be loaded by pressing the button. A menu will appear with a list of all Model Scripts, separated by a line, and then all your User Scripts. Empty Script Closes any currently open script and clears the code field. Managing Saved Scripts As seen in the above image, Change Variables contains a sub-menu of further Model Scripts. You can organize your scripts through any number of sub-menus. To manage your scripts, click the button and select Manage model scripts... or Manage user scripts... A Tree Window will appear. From here, you can organize your scripts by creating sub-nodes and renaming any of your scripts."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/SimulationControlBar/SimulationControlBar.html",
        "title": "Simulation Control Bar",
        "content": "Overview and Key Concepts To run a simulation, you'll use the simulation control bar (also called the control bar for short), located underneath the main menu and toolbar. The control bar contains most of the tools and commands that you will need to run your simulation. The control bar essentially has three different groups of tools you can use to control how your simulation runs, as illustrated in the following image: The following sections explains the different buttons on each section of the control bar and other properties. Run Control Buttons The Run Control buttons are the basic tools you will use to start and stop your simulation, as shown in the following image: These buttons are fairly intuitive to use since they closely resemble the playback controls on a media player. However, a few of the buttons possibly work differently than you might expect. For that reason, you should read the explanation of each button in the following table: Icon Button Name Purpose Keyboard Shortcut Reset Resets the simulation to the starting position and sets the time display (clock) on the run time tool to zero or to its starting date. It clears out any items or products that are in the map and returns all the icons to their starting states. NOTE: You should always press the Reset button when you are starting the simulation from its beginning. Ctrl + left arrow Run Begins the simulation. While the simulation is running, you'll notice that the time display on the Run Time tool will begin to increase. Ctrl + space bar Stop Stops the simulation. After pressing this button, the time display on the Run Time tool will stop increasing. NOTE: It's probably better to think of the Stop button as functioning more like a pause button that only temporarily suspends the map simulation rather than ending it. If you press the Run button again, it will resume running the simulation from the point in time you pressed the Stop button. Ctrl + space bar Fast Forward Runs the model at maximum speed. The run speed is set to maximum and the program stops updating most views. Once the next model stop time is reached or the run is manually stopped, the previous run speed is restored and the program resumes updating views. Ctrl + Shift + up arrow Skip Steps to the next model event and then skips over any and all events at that same model time. The model will stop after the last event occurs at that model time and won't keep running. The Skip button will skip over bunches of events that all happen at the same time, essentially allowing you to quickly skip to the next eventful model time. Ctrl + Shift + right arrow Step Steps the clock forward to the time of the next event that should occur in the simulation model. The model will stop at the moment that event occurs and won't keep running. The Step button essentially allows you to quickly step through the events of the simulation one event at a time. Ctrl + right arrow Run Time Tools The Run Time tools help you to monitor how much time has passed in the simulation and to define when the simulation should stop running. Simulation Clock The simulation clock indicates the amount of time that has elapsed during the simulation run so far. The simulation clock will start at 0 time units and will progress from there. Run Time Options If you click the drop-down arrow to the right of the simulation clock, the run time options will appear: Display Mode - Choose whether to display the time in model time units, date and time text, or both. Start Time - Set the date and time that correspond to time 0 in the simulation run. Warmup Time - Set the date and time that correspond to the simulation's warmup time. What is a Warmup Time? A warmup time is the amount of time it will take the model to reach a steady state or to get to its normal operating capacity. After the model warmup time, the simulation model will reset the statistics it's collecting because they could skew the data, resulting in inaccurate information. You'll only need to use a warmup time if you are simulating a business system that requires some time to reach a steady state or its normal state of operations. For example, you'd need a warm-up time if you were simulating a hospital. Since hospitals run 24 hours a day and 7 days a week, your model would have to run for a period of time until it reached its normal operating capacity. You wouldn't want to begin collecting statistical data until it reached that point. Stop Times - Set the time when the model should automatically stop. The model will only stop at the specified time if the stop time is enabled by checking the box in front of the stop time. You can add and enable as many stop times as desired. If no stop times are enabled or the model is run after the last enabled stop time, the model will run indefinitely until you press the Stop button. Run Speed Tools The Run Speed tools allow you to change how fast the simulation will move while it is running. Run Speed You can use the slider button to manually adjust the run speed. Simulation Speedometer Displays the current speed at which the simulation model is running or will run. Speed Options Select which speed you would like the simulation to run. Options are: 1.00 will run the model at a speed of one displayed simulation time unit per real second. Maximum is the fastest speed. Custom allows you to type the speed you would like in the box directly below it. Click the Set button to apply the new custom speed settings. You can also change the Display Mode of the simulation speedometer so that it is defined as a ratio of some other unit per real second. This can be useful if you have different model events that take place over different time spans. In order to run your model in real time you can set the Display Mode to Simulation Seconds per Real Second and then set the run speed to 1."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/StateTable/StateTable.html",
        "title": "The State Table",
        "content": "Overview and Key Concepts The State Table is a table listing state values, their corresponding display names, and how their utilization should be calculated. There is no limit to how many states can be added, and the table can be auto-filled from object state profiles. Its primary purpose is to be read by state chart templates to determine what they should show. The State Table can be accessed from the Toolbox. A model can have any number of State Tables. General Use The State Table is a table, similar to a Global Table ; it is a table that is accessible in the toolbox, and you can write custom values in that table. However, Global Tables are generally used to store input data, or data that the model uses to determine its behavior. State Tables, on the other hand, can only be manipulated through the property window and are read from to determine what should be shown on state chart templates. Column Values This section describes the values of the 3 columns. State This is the state value and can either be numeric or string. Display Name The display name is what will be shown on the chart. Analysis This determines how the utilization of the state will be calculated. It has 3 options: non utilized (empty cell), utilized, and excluded. Clicking the cell will cycle through the 3 options. Calculating Utilization Utilization of a state profile is calculated using the following equation: Utilization = Total Time in Utilized States / (Total Time in Utilized States + Total Time in Unutilized States) Adding States This section describes how to add states. Icon Description Add a blank state. Removes the selected state row(s). Moves the selected state row(s) up. Moves the selected state row(s) down. Auto-fill Use the sampler to select an object's state profile to auto-fill the table with. When the sampler is hovering over an object with multiple state profiles, a list of available state profiles will appear."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/StatisticsCollector/StatisticsCollector.html",
        "title": "The Statistics Collector",
        "content": "Overview and Key Concepts The Statistics Collector is a table that records data from the model. The Statistics Collector listens to events in the model and writes data in its table cells when those events occur. You can configure which events the Statistics Collector listens to, as well as the data that it writes with those events. You can use the table data in a chart, or you can export the data from FlexSim. The Statistics Collector can be accessed from the Toolbox. A model can have any number of Statistics Collectors. General Behavior The Statistics Collector is a table, similar to a Global Table ; it is a table that is accessible in the toolbox, and you can write custom values in that table. However, Global Tables are generally used to store input data, or data that the model uses to determine its behavior. Statistics Collectors, on the other hand, record data about the model's behavior as it runs. You can think of Global Tables as input tables and Statistics Collectors as output tables. The Statistics Collector is an observer of the model. When you use a Statistics Collector, you specify what events you want to observe, and what to record when those events happen. Then, as the model runs, the Statistics Collector will listen for the specified events to happen, and update the table when those events occur. The following subsections describe the basic logic of the Statistics Collector. The last subsection ( Visualizing the Statistics Collector as a Flowchart ) shows two flowcharts. One shows the logic that executes if an observed event fires. The other shows the logic that executes if the table is accessed. It may be helpful to read these subsections, view the flowcharts, and then read these subsections again. Adding Rows to the Table In order to add rows to the table, you must specify events to listen to. For example, the following Statistics Collector listens to two events: Whenever an event in this list occurs, the Statistics Collector creates an entity called data . This entity has information about the event such as which object fired the event, and the name of the event. You can also assign labels to this entity. In the previous example, the event parameters item and port are assigned to data as label values. Each event also specifies a row value . The Statistics Collector maps each row value to a row. If there is not yet a row for the given row value, then the Statistics Collector will add a row for that value. In the previous example, the event uses data.item as the row value. This means that whenever an item enters the Queue, the Statistics Collector will make sure there is a row in the table for that item. In addition, the row value given by the event is assigned to the data entity's rowValue property. In summary, when and event occurs, it produces a row value. If the Statistics Collector doesn't have a row for that row value, it will add a row to its table. The new row is then tied to the row value. In this example, the row value is a flowitem. However, the row value can be any Variant value. More information can be found in the Row Values section. Adding Columns to the Table In order to add columns to the table, you specify them directly in the Statistics Collector, using the Columns tab. For example, the following Statistics Collector would have two columns: When you add a column, you need to specify a name. You also need to specify what value to write in the column when the column is updated. The Row Add Value specifies the value that the column should write when a new row is added. When an event produces a row value that doesn't have a row, the Statistics Collector will make a new row, and fill all columns with their Row Add Value. In this example, the Row Add Value for the Type column is set to data.rowValue.Type . Recall that in this example, data.rowValue is a flowitem. So when the row is added, the Type column will record the value of the Type label on the flowitem for that row. Updating Values in the Table You can update values in the table in three ways. The first way is by defining a Row Add Value . This allows you to write a value when the Statistics Collector adds a row, as discussed in the previous section. The second way is by connecting an event to one or more columns. When the event occurs, the Statistics Collector will assert a row for the event's row value. Then, the Statistics Collector will visit each of the connected columns on that row, and write the value specified in the Event Value field. In the following example, the \"Processor1 - On Exit\" event is connected to the Staytime column: In this example, when the \"Processor1 - On Exit\" event occurs, the Statistics Collector will assert a row for the row value, writing the Row Add Value for each column if a row is added. Then, on that same row, the Statistics Collector will write the Event Value for each connected column. In this example, the event is connected to the Staytime column, which is set to data.Staytime . What is data.Staytime ? You can set custom labels on the data entity. The example above does that. You will learn how to set custom labels later. For now, all you need to know is that that value will be written in the Staytime column when something exits Processor1. The third way you can update a column is by changing the Update Timing of the column. There are two options for the Update timing: When the row is added and/or updated by events When the value is accessed If you set this property to the second value, then the column will not be updated by events at all. Instead, the column will be updated when it is accessed, or viewed. For example, if you are viewing the Statistics Collector's table, this value will be updated every time the view refreshes. Or if you are using this Statistics Collector in a chart, and that chart is visible, this value wil be updated before the chart is repainted. This option for Update Timing can be used to show values that change continuously, such as average content of an object, or time in a particular state. Sorting Rows By default, when the Statistics Collector adds a new row, the row will be added at the end of the table. However, you can specify a custom sort order. To do this, you can add one or more Sort Values: The previous example demonstrates that you can access the row value during the sort step. However, there are some important rules about Sort Values: Sort Values shouldn't change during the row's lifetime. The sort values are cached, and compared to the other cached values for the other rows. Sort Values cannot depend on column values. None of the columns have been written at the point the row is sorted, so they cannot use column values. In some cases, a Sort Value might have the same value as a Row Add Value. Finishing a Row When an event occurs, you can optionally specify that the event should finish the row for its row value, after the event has added or updated that row. If an event finishes a row, then two things happen to that row: All columns that update when accessed are updated The row value is disconnected from the row Once a row is finished, it will no longer be updated, either with an event, or by accessing the value. The row is then said to be finished. If a later event produces the same row value, the Statistics Collector will add a new row for the row value. Visualizing the Statistics Collector as a Flowchart Because the Statistics Collector runs logic in response to events, it can be helpful to see that logic as a flowchart. The following flowchart is made with Process Flow activities, where each type of activity has as specific meaning: - Something happens to start update logic - Code or values you have specified - A decision checked by the Statistics Collector - An action taken by the Statistics Collector - Indicates (using a dashed arrow) that some steps happen for each thing - The end of the update process. In addition, it can be very helpful to think of the data entity as a token moving through the flowchart. If one of the Statistics Collector's events occurs, this flow approximates the logic: If something accesses the Statistics Collector's table, this flow approximates the logic: Row Values This section describes the different kinds of row values that can be returned from an event's Row Values property, and how they might be used in a Statistics Collector. Number, Text, and Node Values The most common kind of row values are number values, text values, or node values. The Statistics Collector will make one row per unique text, number, or node value. Arrays of Values If an event's Row Values field returns an array, the Statistics Collector will extract every element of that array as an individual row value. In this way, you can have a single event add and/or update multiple rows. For example, [1, 2, 3] will assert one row for the values 1, 2, and 3. However, and array of a single value will only update one row; 1 == [1] for row values. Array Row Values In some cases, it can take several values to describe a row value. For example, you may want to create a table that has one row per Fixed Resource per SKU (a label on items flowing through the Fixed Resource). In this case, the row value is a composite value of Fixed Resource and SKU. You can accomplish this using an array. However, since the Statistics Collector uses an array to mean multiple row values, you must put the array inside an array. For example, if an event returns a row value like this: [[current, data.item.SKU]] then the Statistics Collector will take each element of the outer array as a row value. This leaves the inner array as the row value. The Statistics Collector will make one row per unique array, where every element of the array must match. You can access elements of that array in later fields with array syntax: data.rowValue[1] Null Values You can return a null value as the row value from an event. This will always add a new row to the Statistics Collector, and that row will always be finished after the event. Enumerated Values To understand enumerated values, you need to first recall how the Statistics Collector uses the data entity. Whenever one of the events in the Statistics Collector occurs, the data entity is created. In addition, the Statistics Collector sets the following properties on the data entity: data.group - If a single event listens to all objects in a group, this property will be set to that group. Otherwise, it is empty. data.eventNode - This value is set to the node that fired the event. This value is also known as current . data.processFlowInstance - If an event is listening to an activity in an instanced flow, this property is set to the instance caused the event. This property is also known as instance . All events set these three properties. You can return the following from any event as the row value: data.enumerate() This method returns a special value. When the Statistics Collector sees this special value as the row value, it asserts one row per unique combination of [data.group, current, instance] It also sets data.rowValue to current . There is a difference between using current as the row value and using data.enumerate() . While both cases set data.rowValue to be the same value in the end, rows made with data.enumerate() also remember the instance and group used to make the row. This difference is important when using columns that update when accessed and need the instance value. For example, suppose you want to see the average content of a Delay activity in an instanced flow for each instance. When you access the table, there is no event, and so normal rows cannot access current , instance , or data.group . However, since enumerated rows remember these values, you can use them in code like the following: getstat(data.rowValue, \"Content\", STAT_CURRENT, instance) Events For information on events, see the Event Listening page. Event Disambiguation The events in this section refer to the events that the Statistics Collector generates, not the events that it listens to. The Statistics Collector has the following events: On Row Added This event fires when a new row is added to the Statistics Collector, after the row is sorted, and after the Row Add Values have been set. It has the following parameters: Event Parameter Type Explanation Row Number int The row number of the new row Row Value Variant The value associated with the new row On Row Updated This event fires when one of the events that the Statistics Collector listens to updates one or more columns on a given row. It has the following parameters: Event Parameter Type Explanation Row Number int The row number of the new row Row Value Variant The value associated with the new row Columns Updated Array An array containing one value per column. If the nth column was updated, then the nth value of the array will be 1. Otherwise, the value will be zero. Previous Values Array An array containing one value per column. If the nth column was updated, then the nth value of the array will contain the value that was in the table before the update. Otherwise, the value is undefined, and should not be used. On Row Finished This event fires when an event finishes a row. Any columns updated by the event will be updated before this event fires. It has the following parameters: Event Parameter Type Explanation Row Number int The row number of the finished row Row Value Variant The value associated with the finished row On Row Adding This event fires when the Statistics Collector needs to add a new row, but has not actually added the row yet. The trigger associated with this event is often used to initialize row labels on the data entity. This event has no parameters. On Row Updating This event fires when the Statistics Collector is about to update any columns connected to an event. The trigger associated with this event is often used to update row labels on the data entity. It has the following parameters: Event Parameter Type Explanation Event Added Row int If the event that is currently causing an update also added the row, this value is true. Event Finishes Row int If the event that is currently causing an update will also finish the row, this value is true. Understanding Statistics Collector Events The descriptions about the events and event parameters assume that you have some previous knowlege about the Statistics Collector. For more information on Statistics Collectors, see Using the Statistics Collector . Properties The Statistics Collector has three tabs with various properties. The properties in these tabs will be explained in more detail in next sections. Events Tab The Events Tab has the following properties: On the left of the Events Tab is the Event List . You can use the Add button or Sampler button to add events to this list. You can use the Duplicate button to dupliate the selected event. You can use the Remove button to remove the selected event. You can use the Up and Down buttons to reorder the events in the list. Event List Ordering If two Events in the Event List refer to the same model event, then when that model event occurs, the event higher in the list will update the table first. Every event allows you to specify the following properties: Name - The name of the current event. Additional Labels - This list allows you to add extra labels to the data entity as part of this event. data Label Names Shouldn't Have Spaces If you add spaces in the name of a label on the data entity, you won't be able to access that label. This includes labels from event parameters, as well as any additional labels. The following subsections describe the different kinds of events that you can listen to or create with the Statistics Collector, and the properties of each kind of event. Standard Events The example below shows an example of this kind of event: The Statistics Collector can listen to the events of any 3D Object or Process Flow Activity. For example, you could listen to the On Entry of a Processor, or the On Content Change of a Queue. If you listen to a Process Flow Activity in an instanced flow, the Statistics Collector will listen to that activity for all instances attached to the flow. When you listen to one of these kinds of events, you will have the option of assigning the event Parameters as labels on the data entity. This kind of event also has a Condition property. After the Parameters are assigned, the Statistics Collector will evaluate the Condition. If the condition value is false, then the event will not proceed any further in the process, and will not update the table. This kind of event also allows you to specify Additional Labels on the data entity. These labels are assigned after the Condition is evaluated. Group Events The example below shows an example of this kind of event: If you need to listen to many objects of the same type, you can listen to a Group of objects. The Statistics Collector will listen to all objects in the group. As with Standard Events, this object allows you to assign event Parameters , define a Condition , and specify Additional Labels . Tracked Variable Events The example below shows an example of this kind of event: If you listen to a Tracked Variable, or if you listen to an object event with the word \"Change\" in it, then you are listening to a Tracked Variable event. When you listen to a Tracked Variable Event, you can specify a Change Rule . The Change Rule is like a Condition ; if the change that happened doesn't match the Change Rule, then the event won't update the table. Depending on which Change Rule you use, you may also need to specify a Change Value . This is a value related to the Change Rule. If the Change Rule has the word \"Value\" in its name, then the Change Value is is used. In addition to the Change Rule, you can specify an addition Condition , as well as Additional Parameters . Timer Events The example below shows an example of this kind of event: The Statistics Collector can create a Timer event and listen to that, rather than listening to events in the model. There are two main ways to use a timer event. The first way is to create a timer event that does not repeat, and fires when the model begins. This kind of timer event usually creates all the rows the table is expected to have. The second way to use a timer event is with a repeating schedule. This allows you to update or gather data at regular intervals. To use a Timer event, you first specify the First Time value. This is a duration in model units. The timer will not begin firing until this time. You can also choose to fire this event when the model is reset, by returning a value that is less than 0. Do Not Name the Timer Event \"OnReset\" OnReset is the name of an attribute, and should not be used for the name of an event. Be sure to add a space (On Reset) or make some other change. Otherwise, the Statistics Collector will not work. Next, you can specify whether the timer event is Repeating . If it is repeating, you will also need to specify the Repeat Interval . This is a duration in model units. The timer will repeat every Repeat Interval after the First Time. You can optionally define a custom Tick Pattern . Most users do not need this option. You can use the tick pattern to fire the timer event multiple times. You can do this by returning an array of values from the Tick Pattern property. For each value in the array, the Statistics Collector will execute the timer event that many model units since the First Time or since the last Repeat Interval occurred. This event also allows you to assign Additional Labels to the data entity. Enumerate Events The example below shows an example of this kind of event: The Enumerate Event, like the Timer Event, is an event that the Statistics Collector creates for itself, rather than listening to some other object in the model. This kind of event fires when the model is reset. To use this event, you can specify a list of Objects . These objects can be 3D Objects, Groups, Process Flow Activities, TrackedVariables, or any other treenode value. This event also allows you to assign Additional Labels to the data entity. This event does not allow you to specify your own Row Values . Instead, the Enumerate event creates row values for all objects in the Objects list. If the object is a Group, then the Statistics Collector will make a row value for each object in the group. If the object is an Activity in an instanced Process Flow, the Statistics Collector will make one row value for each instance of the activity. All row values are created using the data.enumerate() method. For more information, see the Enumerated Values section. By Requirement Events The example below shows an example of this kind of event: This kind of event is almost identical to a Standard Event, but instead of specifying a specific object or group to listen to, you can specify a Requirement . When the Statistics Collector is creating its listeners, it will search through the entire model. It will pass each object into the Requirement property, and listen to those objects that return a true value. In this particular example, the Statistics Collector is listening to the OnExit of all Processor objects. The Event Sampler next to the Event property allows you to sample an object like the objects you expect the requirement to find. As with Standard Events, this object allows you to assign event Parameters , define a Condition , and specify Additional Labels . Transient Events The example below shows an example of this kind of event: Most events allow you to listen to something that is present when the model is reset. Transient events allow you to listen to objects that are created later, as part of the model run. For example, you might want to listen to TrackedVariable label changes on a token. Or you might want to listen to a flowitem's OnEntering event, which fires whenever the flowitem moves to new objects. Neither of these objects exist when the model is reset. It can be helpful to contrast Transient Events with the other kinds of events. When all other kinds of event fire, they expose a Row Value. When this kind of event fires, it exposes a Transient object . In the previous example, the Transient object is a flowitem. To use a Transient event, you also need to configure the event you want to listen to on the Transient object. You can use the Edit transient object event... button to open a popup, like the one shown here: This popup allows you to edit the Event , Parameters and Condition of the event for the Transient object. You must use the Event Sampler to sample an event from an object like the transient object you expect to listen to. Transient events are more complicated than other event types because they really listen to two events: the event where the Transient object is identified, and the event fired later by the Transient object. Here are some tips about how Transient events work: A Transient event does not directly update the table. It attaches a listener to an event on the Transient object. When that event fires, the table will be updated. The Condition property on the Transient event determines whether the event will attach a listener to the Transient object. The Condition property on the Transient object event determines whether the Transient object's event will update the table. The Transient event has event Parameters. If you assign those parameters to labels on the data entity, those label values will be available when the Transient object event fires later. Columns Tab The Columns Tab allows you to add columns to the Statistics Collector. The Columns Tab has the following properties: Column List The Column list allows you to add, duplicate, remove, and reorder columns, using the , , , and buttons. You can select a column in the list to edit the properties of that column. Name The Name property sets the name of the column, as it will appear in the table. Each name should be unique. Row Add Value The Row Add Value property specifies the value to write when a row is added to the table. Event Value The Event Value property specifies the value to write when an event connected to this column occurs. If no events are connected to this column, you don't need to specify this value. Value The Value property is only available if the column is set to update when the value is accessed. Row Add Value, Event Value, and Value If a column is set to update with events, then you can specify the Row Add Value and the Event Value properties. If a column is set to update when accessed, those properties will be hidden, and you will instead be able to specify the Value property. Set Values If you add a Column Set, rather than a single column, then you can specify the Set Values property. This property should return an Array of name/value pairs. For each name/value pair, the Statistics Collector will add a column with that name. In addition, the value will be available through data.colValue . For example, if you have a group of Queue objects, you could make one column per Queue with the following code: /**Custom Code*/ StatisticsCollector collector = ownerobject(c); Array queues = Group(\"Queues\").toFlatArray(); Array result; for (int i = 1; i <= queues.length; i++) { result.push([queues[i].name, queues[i]]); } return result; Note that the name of each column is set to the name of the queue, and that the value of each column is the queue. This means that data.colValue will be the Queue corresponding to the column. Update Timing The Update Timing option allows you to set whether the column is updated by events or by accessing the table. This option is described in the Updating Values section. Storage Type The Storage Type of a column determines what type of value can be recorded in that column, and how much memory that value will require. The following list describes each option: Double - Can store decimal numbers, with about 15 digits of precision. Requires 8 bytes per row. Integer - Can store integer values between about -2 billion and 2 billion. Requires 4 bytes per row. String - Can store text values. Requires 4 bytes per row, plus enough memory to store each unique text value in the table. Float - Can store decmimal numbers, with about 7 digits of precision. Requires 4 bytes per row. Binary - Can store number values of 1 or 0. Requires 4 bytes per 32 fields per row. Display Format If a column stores a number value (not a text value), then you can specify a Display Format . The display format you choose depends on the kinds of value stored in the column. There are four possible options: Raw - Displays the number as it is stored in the table. Object - Assumes the number is the ID of an object (present on reset), obtained using the StatisticsCollector.getID() method. This format will show the path to the object with the given ID. Flowitem or Token IDs Don't Use the Object Format If a column stores the ID of tokens or flowitems, you should use the Raw format. When you get the ID of a token or flowitem, The Statistics Collector doesn't remember the path to that ID. Date / Time - Assumes the number is a DateTime value. This format will show the date and time represented by the number, formatted according to your windows settings. Percent - Assumes the number is a percentage. This format multiplies the value by 100 and and adds a % symbol. Index Type Use this box to specify the index type of the value. If you specify an option other than None, then an index will be added to the column, or to all columns of the Column Set. An index can greatly improve query performance. For more information, see the SQL Queries topic. Event/Column Connections You can use this area to connect events to columns. This area shows the list of all events. You can select an event in the list to connect columns to it. There are two ways to connect an event to a column. The first way is By direct links . If you choose this option, you can check the box next to each column you want this event to update. This is the most common way to connect events and columns. The second way to connect events and columns is By column requirement . To use this way, you specify a code callback. This callback is called for each column in the Statistics Collector. The data entity is available, with the following properties set: data.colNum data.colName data.colValue If this callback returns a 1 (or any \"true\" value), then the event will be connected to this column. If the callback returns a 0 (or any \"false\" value), then then event will not be connected to the column. The Row Options Tab The Row Options tab has the following properties: Row Sorting The Row Sorting area allows you to specify a list of Sort Values. As rows are added to the Statistics Collector, they will be sorted by the first Sort Value, then by the second Sort Value, and so on. For each Sort Value, you can specify whether the value is ordered Ascending (A-Z) or Descending (Z-A). Reuse Finished Rows If you are not sorting rows, you can optionally choose to reuse finished rows. This means that when the Statistics Collector adds a row, it will first check if there is a finished row. If so, the row value will be assigned to that row instead of to a new row. This option is generally only used where another Statistics Collector will listen to this Statistics Collector. By reusing the rows, this intermediate collector can minimize memory usage. Keep values and labels for finished rows This property applies when a row is finished. When this box is cleared, the Statistics Collector will forget the row value and destroy and labels associated with that row. If this box is checked, however, the Statistics Collector will simply disconnect the row value and the labels from the current row, rather than discarding them. On Warmup The On Warmup property specifies the actions the Statistics Collector will take at the model's Warmup Time. There are five possible options: Remove all rows - This option removes all rows from the Statistics Collector. Reset to initial values - This option goes through all unfinished rows and resets the columns to their Row Add value. Remove finished rows - This option removes all finished rows from the table. Remove finished rows and reset to initial values - This option removes all finished rows from the table. All remaining rows are set to their Row Add values. Do nothing - This option does nothing when the warmup time occurs. The Triggers Tab The Triggers tab allows you to specify logic for each of the Statistics Collector's Triggers. This tab is identical to the Triggers tab of other objects in FlexSim. For more information, see the Triggers Tab topic. Triggers that end in -ed or -ing In the Statistics Collector, some trigger names end with -ing (e.g. OnRowAdding), and others end with -ed (e.g. OnRowAdded). If the trigger name ends with -ing, then that trigger is fired just before the specified event occurs. If the trigger name ends with -ed, then that trigger is fired just after the specified event occurs. The Labels Tab The Labels tab allows you to add labels to the Statistics Collector object. It is identical to the Labels tab of other FlexSim objects. For more information, see the Labels Tab topic. The General Tab The General tab has the following properties: Shared Condition This property specifies a condition for all events. This property is evaluated immediately when an event occurs. If the condition returns a 0, or any other false value, then the event won't update the table. The Shared Condition can't access the data entity The Shared Condition is evaluated when an event occurs, but before and properties or labels are assigned to the data entity. The Shared Condition is designed to depend on global information, like the current time or a value in a global table. The Shared Condition doesn't apply to events that fire on reset If you use an Enumerate event, or if you use a Timer event that fires on reset, then the shared condition will not be evaluated. On Reset events always update the table. Process Flow Instance This property only applies if one or more of the events for this Statistics Collector involve Process Flow Activities in object process flows. By default, this option specifies that the Statistics Collector should listen to all instances of that activity. In order to listen to fewer instances, you can use the sampler to set this value to a single object, or to a Group of objects. The Statistics Collector will only listen to the instance objects specified by this property. The remove button will reset this property to the default of All Instances. Object Format Depth This property applies to columns that use the Object format. The Object format displays a path to each object, and this property controls the maximum number of names that can appear in that path. If this property is 0, then the full path will be shown. If it is 1, then only the name of the object will be shown. If this property is 2, then the parent's name and the object's name will be shown as a partial path. As the value increases, the path will include nodes higher in the tree. Store data on hard drive If this box is checked, then this Statistics Collector will store its table data on the hard drive, in an internal file. Memory (RAM) use for the data table will be limited to 5 MB. Performance impact of storing data on the hard drive If you store a Statistics Collector's data on the hard drive, it will affect the read and write speed of the bundle. The write speed will be slower, although this slowdown is negligable. The read speed, however, will be far slower. The read speed mainly affects how fast charts can draw, and how fast queries can run. Consider testing with and without this option to determine which trade-off works best for you. View Table Click this button to open a view of the data table for this Statistics Collector. View Row Values Click this button to open a table-based view. The table in this view shows the row value for each row of the Statistics Collector. If the row was enumerated, then this table will also show the group and instance associated with the row. Active rows show Export Table You can use this button to save a CSV file of this Statistics Collector's data table. Connected Dashboard Charts This list shows all the dashboard charts that are drawing data from this Statistics Collector. If no charts require this collector, the list will be empty. Properties Click this button to open the Properties window of the selected chart in the Connected Dashboard Charts list."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/StorageSystem/StorageSystem.html",
        "title": "The Storage System",
        "content": "Overview and Key Concepts The Storage System tool provides global settings and functionality for all Storage.Object s within a model. This tool can query all Slot s across all Storage Objects. You can use this ability to find the correct place in storage for inbound inventory. For more This tool can also query all Storage.Item s across all Storage Objects. You can use this ability to find the correct item to pull from storage for outbound inventory. You can configure this tool to optimize these queries. This tool also allows you to specify one or more Address Schemes for the model. Most Warehouse Management Systems (WMS) record an item's location using an adress, which is a combination of numbers, letters, and separators that uniquely identify a slot. You can use Address Schemes on the Storage System to interpret slot addresses from an external WMS for use in the simulation model. This tools also specifies the complete look of each type of Storage Object. You can customize how an object looks by adding or removing surfaces, as well as settings the texture and color of each surface. You can also choose to display information about each slot visually. For example, you could display a square of a certain color, depending on a slot's label value. This tool also has events. You can listen to the events of any Slot, as items enter, exit, or are assigned to a slot. In FlexScript, you can access this tool using Storage.system . Storage.Item and Storage.Slot.Item There are two classes for working with flowitems in the Storage System. The first is Storage.Item . You can use this class by using the Storage.Item constructor: Object item; // a flowitem reference Storage.Item storageItem = Storage.Item(item); The above code will assert Storage.Item data for the given flowitem. A Storage.Item object is the Storage System's record of the flowitem. To assign an item to a slot, you set the assignedSlot property to the desired slot: Slot slot; // a slot reference; storageItem.assignedSlot = slot; There is never more than one Storage.Item per flowitem. If the flowitem is destroyed or virtualized, the Storage.Item object is also destroyed. If you assign a slot, and then move the flowitem into the Storage Object containing the slot, the flowitem will be placed in the correct slot. The second flowitem-based class is Storage.Slot.Item. This class accessed from a specific slot: Slot slot; // a slot reference Storage.Slot.Item slotItem = slot.slotItems[1]; When you assign a Storage.Item to a slot, the slot creates a Storage.Slot.Item object. Each slot keeps a list of items (accessed through slotItems ) that have been assigned to the slot, or that are currently in the slot. The Storage System's methods findItem() and queryItems() search each slot's list of Storage.Slot.Item objects. When you virtualize a flowitem, the Storage.Slot.Item object remains. Finding Slots A slot can have labels. For example, you could add a SKU label to each slot, indicating which SKU can be stored in that slot. You could then write code like the following to find a slot for an item, based on the item's SKU label: Storage.Slot slot = Storage.system.findSlot( \"WHERE SKU = $1.SKU AND slot.hasSpace($1)\", 0, item ); You can then check whether the query succeeded using an if statement: if (slot) { // Assign the item to the slot, so that slot.hasSpace() will // account for this item in future searches. storageItem.assignedSlot = slot; } In cases like this, you can choose to index the SKU label on the slots. If you index a label (like the SKU label), then the query that runs in the findSlot() method won't have to search all slots in the system, and can limit the search to just the slots that have the matching label. If you change a slot label that has been indexed, the index will automatically update. Finding Items When you want to retrieve an item from storage, it is often acceptable to retrieve an item that has certain attributes, rather than retrieving a specific item. For example, if your items in inventory have a SKU label, you could find the item based on its SKU: Storage.Slot.Item slotItem = Storage.system.findItem( \"WHERE Type = $1\", 0, 2 ); You can then check whether the query succeeded with an if statement: if (slotItem) { // Unassign the assignedSlot to make it \"outbound\". // Outbound items are excluded by default when using findItem(). slotItem.storageItem.assignedSlot = 0; } In cases like this, you can choose to index the SKU label on the items. If you index item labels, the query that runs in the findItem() method won't have to search all items in the system, and can limit the search to just items that have a matching label. Indexed Item Labels are Cached The Storage System assumes that once an item has been assigned to a slot, its indexed labels won't change. If an item label will change while assigned to a certain slot, that label should not be indexed. Virtualizing Items For models with high quantities of flowitems in inventory (10,000+ items), memory use and draw speed can both become issues. In these situations, you can choose to virtualize items. This means that when an item enters a Storage Object, the item itself is destroyed. The Storage System will keep essential label values and visual properties about the item. This information is kept on the Storage.Slot.Item object for that item. If you attempt to access a virtual item, the item will immediately be unvirtualized, meaning the flowitem will be recreated with the saved label values and visual properties. You can enable this property individually on each storage object. Because only minimal information is kept, virtualizing items can save significant memory. In addition, virtual items are also able to draw significantly faster. The drawback is that the flowitem is destroyed, which can make some models a little more difficult to create. Address Schemes In warehousing, an Address is text that uniquely identifies a slot. As an arbitrary example, consider these addresses: \"3-5-07052\", \"1-1-05061\" Using an Address Scheme, you can tell the Storage System how to interpret these strings, and get the correct Slot. In this example, you would specify the following components: A number. This is the Zone of the slot. A hyphen. This separates the Zone from the rest of the address. A number. This is the Aisle of the slot. A hyphen. This separates the Aisle number from the rest of the address. A two-digit number. This is the Bay number. A two-digit number. This is the Level number. A one-digit number. This is the Slot number. The first address indicates the slot in Zone 1, Aisle 5, Bay 7, Level 5, Slot 2. Once you have defined an Address Scheme, you can use the getSlot() method to find a slot in the model based on an address: Storage.Slot slot = Storage.system.getSlot(\"3-5-07052\"); You can also access the address of a given slot: string addr = slot.address; You can define more than one Address Scheme. The Storage System will use the first scheme that matches the input value to resolve the address. Events For information on events, see the Event Listening page. The Storage System object has the following events: On Slot Entry This event is fired when any item enters a slot in any Storage Object. When this event fires it will execute the on slot entry trigger where you can execute custom logic using FlexScript or preconfigured pick options. It has the following parameters: Event Parameter Type Explanation Slot Storage.Slot The slot entered by the flowitem. Item Object The flowitem entering the slot. On Slot Exit This event is fired when any item exits a slot in any Storage Object. When this event fires it will execute the on slot exit trigger where you can execute custom logic using FlexScript or preconfigured pick options. It has the following parameters: Event Parameter Type Explanation Slot Storage.Slot The slot exited by the flowitem. Item Object The flowitem exiting the slot. On Slot Assign This event is fired when any item is assigned to a slot in any Storage Object. When this event fires it will execute the on slot assign trigger where you can execute custom logic using FlexScript or preconfigured pick options. It has the following parameters: Event Parameter Type Explanation Slot Storage.Slot The slot the flowitem has been assigned to. Item Object The flowitem assigned to the slot. The Slot Labels Tab The Slot Labels tab has the following properties: Labels List You can add labels to the Slot Labels list. This list is consulted when you read or write any Slot Label, either in FlexScript or in a query. When you read a slot's label, the slot first checks for its own Type label. If it has the Type label, then it returns the value of the label. If the slot doesn't have the Type label, then it checks the Slot Labels list on the Storage Object. If the Type label is listed there, then the default value for that label is returned. Otherwise, you will get an exception for trying to read a non-existent label. This is true for any label access on a slot, including in a query. Writing a slot label value has much the same behavior as any other object with dynamic labels; if the label is not present, it will be added to the slot. Then the label will be set to the new value. However, a slot will also check the Slot Labels list, to see if the label is indexed. If it is, the Storage System will immediately update the index for that label. Choosing to index a label means that queries can filter using this label without searching through all slots, which can significantly improve performance. For example, if you wish to filter slots using a SKU label, you would add the SKU label to the list, and mark it as indexed. Then, the following query would have improved performance: Storage.system.findSlot(\"WHERE SKU = $1.SKU\", 0, item); For more information about what queries can benefit from an index, see the SQL Queries topic. $ Values are Constant Over the Table When passing a query to the Storage System, $ values (like $1) are considered constant over the table. Also, property access on a constant value is also considered constant. This means that expressions with a $ value are still be eligible to use an index when used in the Storage System methods. Each entry in the Labels List has the following properties: Label Name - Specifies the name of the label to add to the Labels List. Color Palette - Specifies which color palette to use for the Slot Painter, as well as in label color based visualizations. Indexed - Check this box to index the label with an unordered index. Default Value - Specifies the default value if a slot doesn't have this label. The Visualizations Tab The Visualizations tab has the following properties: Visualizations Area You can use the Visualizations Area to rename, add, duplicate, remove, or reorder visualizations. You can also choose which visualization you wish to currently edit. A visualization defines all aspects of how a particular Storage Object draws. Each Storage Object can use one of the visualizations to display correctly. Draw Elements Area The Draw Elements Area allows you to edit details about each of the draw elements used by a particular visualization. It has the following properties: Draw Elements List - This list shows all the elements of the current visualization. You can use this list to add, duplicate, remove and reorder the visualization elements in the list. Element Name - Use this field to specify the name of the selected Draw Element. Draw Onto - Use these two fields to specify the extent of the element's coordinate system, as well as which face the element belongs on. Alignment - Use these two fields to specify the origin of the draw element's coordinate system. Pos X/Width - For certain alignments, you can specify the starting x position of the element, as well as the width of the element. PosY/Height - For certain alignments, you can specify the starting y position of the element, as well as the height of the element. Left/Right - For certain alignments, you can specify the position of the left and right sides. Top/Bottom - For cetain alignments, you can specify the position of the top and bottom sides of the element. Z - Specifies the Z position of the draw element, relative to the element's coordinate system. Label Reference - Specifies a Slot Label to reference for this draw element. Color - Specifies how the element should be colored. Slot Filter - Determines whether the slot should draw the given element. If the element is drawing onto something that contains many slots, this function is evaluated for all slots within the element. If the function returns true for any slot, the element is drawn. Shape Repeat - Specifies the Repeat of the element. If the Type is Stretch, then this value specifies how many instances of the image will appear. If the type is Tile, then this value specifies the distance between instances in model units. If the Type is Tile and Scale to Fit is checked, then this value is the minimum distance between instances. Type - Specifies the method to use to repeat a texture. Possible options are Stretch or Tile. Axis - Specifies which axis to repeat along. Scale To Fit - Check this box to scale to fit. This will evenly place as many instances as possible along the face while keeping the minimum distance between instances. For Draw Elements that deal with images or color, the following properties will also be present, for both the x and y directions: Image Type - Specifies whether the image is static or dyanmic. If you choose Static Image, then you must also specify the path to an image. If you choose Dynamic Image, then you must specify code that will return an image, based on the slot. Corner Positions - You can specify the coordinates of a rectangle to use for the image. In this way, a single image can be used for multiple draw elements. Only the part of the image shown within these coordinates will appear on the draw element. Repeat Type - Choose the type of repeat. Possible options are Stretch or Tile. Repeat - If the Repeat Type is Stretch, this value specifies a scaling factor to apply to the image. If the Repeat Type is Tile, then this value specifies the distance (in model units) to show the texture over before repeating. Repeat Offset - Choose the offset of the repeat. Reset - Click this button to reset the texture coordinates to include the entire image. Rotate - Click this button to rotate the capture area of the image by the specified number of degrees. For Draw Elements that deal with text, the following properties will also be present: Draw Text - Specify what text to draw. Justification - Specify whether the text should be left, center, or right justified. Alignment - Specify whether the text should be top, middle, or bottom aligned. Word Wrap - Specify whether the text should wrap. Text Scale - Specify the height of the text relative to the height of the element. Scale to File - Check this box to scale the text vertically until it fits horizontally within the text. For Draw Elements that deal with wireframes, the following properties will also be present: Line Width - Specify how thick (in pixels) to draw the lines of a wireframe. For Draw Elements that reference other visualizations, the following properties will be present: Visualization - Specifies which other visualization to include as part of the current visualization. The Items Tab The Items tab has the following properties: Automatically Virtualize Items You can check this box to virtualize items. This means that when an item is placed in a slot, the item will be destroyed. The Storage System will preserve minimal information about that item, such as its spatial and color information. This way, the item will still be drawn. In addition, any labels listed in the Item Labels list will also be preserved. When you later need to access the item (perhaps to retrieve it from storage), the item will be recreated as soon as it is accessed. Item Labels You can use this list to enumerate the key labels you expect your items to have. There are two possible reasons to list a label here: You want to preserve the labels in this list during virtualization, and/or You want to index the item label. Indexing the item label means that searching for items with particular label values can be much faster. For example, if you had a Type label, and you indexed that label, then the following code would run much faster: Storage.Slot.Item slotItem = Storage.system.findItem( \"WHERE Type = $1\", 0, 2 ); Item Labels are Cached When an item enters a slot, its labels are cached for its index. If you need to change an item's label values while it is in storage, you should not index that labe. The Address Schemes Tab You can use this tab to define one or more address schemes. An address scheme is most useful when you have input data that uses per-slot identifiers. For example, you might have a table that represents a snapshot of inventory in a warehouse, describing the items in each slot. Or you might have a table that describes the slots that pickers picked from in order to fulfill an order. In either case, the slot is usually identified with an address. The address is a sequence of numbers, letters, and separators that uniquely identify a slot. Setting up an address scheme allows the Storage System to interpret an address and return the correct slot, using the getSlot () method. When trying to find a slot by address, the storage system will the list of schemes one at a time, to see if the given address matches the scheme. When it finds a matching scheme, then the storage system parses each component of the scheme. First, the storage system will extract the Zone ID and Aisle ID from the address. It will then find all storage objects that have the matching Zone and Aisle IDs. the storage system will extract the Bay, Level, and Slot ID from the address, and check each of the storage objects in the matching zone and aisle for that slot. In order for the search to work correctly, you must configure each rack object correctly. If you address scheme includes a Zone and Aisle ID, you should set those values on each rack object. You should also make sure that the values for each rack's address mapping is configured correctly. For more information, see the Address Mapping Panel topic. The Address Schemes tab has the following properties: Scheme List Area You can use this area to rename, add, duplicate, remove, and reorder address schemes. Scheme Component Area You can use this area of the tab to add, remove, and reorder components in the address scheme. Each component has the following properties: Component Type - Displays the type of component (Zone ID, Aisle ID, etc.). If the component is a separator, you can edit this field to contain the text of the separator. Numbering Type - Specifies whether a component is numbered using numbers or letters. The Zone and Aisle ID can be arbitrary text, in addition to letters or numbers. Bay, Level, and Slot IDs will respect the address mapping settings. For example, if an address contains the value \"D\" for a bay, and a storage object has a start bay of 2 and a bay stride of 2, then Bay \"D\" would indicate the second bay in that object; the first bay would be considered Bay \"B\". Fixed Length - Check this box to indicate that the address component has a fixed number of characters. If so, the component value will be extracted by the number of characters. Otherwise, the component value will include all characters until the next separator. Length - If Fixed Length is checked, you can use this field to indicate the number of characters in the component. Filler - If Fixed Length is checked, you can indicate leading characters that can be ignored. For example, a Bay ID might be \"007\", a fixed-length component with a length of 3 and a filler of \"0\". The scheme component area has an example field that shows an example address, based on the scheme. You can compare that example with actual addresses to verify that the pattern matches correctly. Letter Numbering is Limited to 26 FlexSim does not support mapping numbers above 26 to a letter (or sequence of letters). If your address scheme contains Bay, Level, or Slot IDs above 26, represented as letters (e.g. Bay \"AA\"), then you will need to write a converting function, and use that within getSlot(): Storage.system.getSlot(convertAddr(\"Z1-A1-AA-2-3\")) The converting function should return an address that works within a scheme. In the example above, if AA represents 27, then the convertAddr function would return \"Z1-A1-27-2-3\" . The Triggers Tab The Storage System has three available triggers: On Slot Entry On Slot Exit On Slot Assign For more information on how the triggers tab works, see the Triggers topic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/TableValidation/TableValidation.html",
        "title": "The Table Validation Tool",
        "content": "Overview and Key Concepts The Table Validation tool allows you to enumerate your assumptions about the data in specific tables and to test them, ensuring those tables contain valid data. For general information on how to use the Table Validation tool, see the Validating Input Data topic. The Validation Algorithm There may be cases where you need to write your own constraint functions or On Fail logic. Understanding how the Table Validation tool uses those components can be helpful. When the Table Validation tool validates data, it uses the following algorithm: The tool loops over all ranges in all tables in table order and then in range order, as they are seen in the user interface. In this way, it visits each range. When visiting a range, the tool creates a context associated with each rule connected to that range. The context stores a copy of the default Error Message for the rule. Then, the tool scans each row in the range from top to bottom. Within the row, cells are scanned from left to right. When scanning a cell, the tool calls the Constraint function of each connected rule. Rules are tested in the order seen on the Rules tab. For each rule, the tool passes the cell's value and the context associated with the rule into the constraint function. If the function returns anything other than zero, then the value passes the rule. If a Constraint function returns zero, then the tool calls the rule's On Fail callback. This callback allows the user to try to repair the value or update the error message. If the On Fail callback returns 0, the error message is logged. The following pseudocode presents a summary of the algorithm used: for each table: for each range: for each rule: create a context for the rule for each row in the range: for each column in the row: value := table[row][col] for each rule: context := context associated with this rule result := constraint(value, context) if result = 0: result := onFail(value, context) if result = 0: log an error for each rule: delete the context A critical part of this algorithm is the context. The context is a Simple Data Type, similar to a Process Flow token. The context has several purposes: The context can store labels. This allows you to store data between invocations of the constraint function. For example, a rule that checks whether a column is sorted would use the context to store the previous value. A rule that checks the sum of a column would use the context to store the current total. The context provides read-only access to many variables about the algorithm, for example the current table, row and column. The context provides access to the rule's error message, so you can optionally customize the message that is logged on a per-value basis, rather than per rule. The context provides access to the current value of the table so you can optionally repair invalid values in the On Fail callback. The Table Ranges Tab The Table Ranges tab has the following properties: Table List The table list allows you to edit the Table Validation tool's list of table references. Select an item in the list to display its properties to the right of the list. Table Area The table area is in the upper right region of the Table Ranges tab. The table area has the following properties: Name - Edit the name of the table reference. This name appears in error messages if the table is invalid. Table - Edit the reference to a table. This node is evaluated to get a reference to a table. It is usually a pointer, but can also contain the name of a Global Table, or code that returns a Table. Ranges Area The ranges area is in the lower right region of the Table Ranges tab. The ranges area has the following properties: Range List - The range list allows you to edit the set of ranges within the selected table. Name - Edit the name of the currently selected range. The name of the range appears in logged error messages. Range Type - Edit the type of range. The possible values are as follows: Column - A range that includes all values in the column specified by the Range Value . If the target table has no rows, this range can be empty. Row - A range that includes all values in the row specified by the Range Value . Column headers - A range that includes all of the column headers. Row headers - A range that includes all of the row headers. If the target table has no rows, this range can be empty. All values - A range that includes all cells in the body of the table, excluding row and column headers. Custom - A custom range is specified by the user. In this case, the Range Value must return an array of four values: the start row, start column, end row, and end column. If there are no rows, this range will be empty. Range Value - Edit the range value, if the current Range Type requires a range value. Rules - Edit the set of rules that should be checked by this range as part of validation. The Rules Tab The Rules tab has the following properties: The Rules List You can use the Rules list to edit the set of available rules in this Table Validation tool. During validation, rules are checked in the order specified by this list. Name The Name property allows you to edit the name of the rule. The name of the rule appears in logged error messages. Constraint The Constraint property defines the function used to test values. You can edit the code of this field to define a function. That function should return a one if the value passes the test or a zero if it fails. Fail if Range Empty Check this box to log an error if a range connected to this rule is empty. This box should only be unchecked if attached to a range type that can be empty (Column, Row Headers, and Custom) and if the source table is valid with zero rows (such as a query with no matching rows). Error Message The Error Message property edits the default error message of the rule. This message is shown in the error log if a value fails the rule. On Fail The On Fail property defines a callback function. This function is optional. You can use it to repair an invalid value and/or update the error message. This function returns a one or a zero. If it returns a zero, the error is logged. If it returns a 1, the value is considered acceptable and no error is logged. The Logged Errors Tab The Logged Errors tab has the following properties: Error Table When you click the Validate button, the Error Table displays a list of all errors encountered during validation. If a given error has a valid table, row, and column, you can double-click on that error to open the table view and select the invalid cell."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/TimeTables/TimeTables.html",
        "title": "Time Tables",
        "content": "Overview and Key Concepts Time Tables are used to schedule down-time, such as state changes, for specific objects in the model. Each Time Table may control many objects, and each object may be controlled by many Time Tables. A model may contain any number of Time Tables. Time Tables are accessed from the Toolbox. Down Periods The main purpose of the Time Table object is to define scheduled periods of down-time for objects in the model. These down periods are defined by two numbers: a down time and a duration. The down period begins at the specified down time and will last for the specified duration in model time units. The functions on the Functions tab give you control over what happens to the objects listed in the Members tab at the beginning and end of each down period. For convenience in working with down periods that wrap around the end of a day or week the Time Table will combine touching down periods that either set the same state and state profile or use the same down behavior. For example, in a weekly schedule, a down period that goes from Monday 10 PM to 12 AM will combine with a down period that goes from Tuesday 12 AM to 2 AM if the state / down behavior is the same. Functions When the Time Table hits a down time, two sets of functions are called. First, the Down Function is fired. This happens once for each member of the Time Table. This allows you to stop the associated object, send a TaskExecuter to some specified location, etc. After all of the Down Functions have fired, the On Down function will fire once. The On Down function passes in the list of members and the table row associated with the down time. At the end of the down period's duration the set of resume functions are called. First, the Resume Function is fired. This happens once for each member of the Time Table. This allows you to resume the associated object, resume input on the object, etc. After all of the Resume Functions have fired, the On Resume function will fire once. The On Resume function passes in the list of members and the table row associated with the down time. Down State and State Profiles For each down time you can specify the state and state profile that the members will go to during that down period. These values are designed to be used with the stopobject() and resumeobject() commands found by default in the Down and Resume Functions. An object can be tied to multiple Time Tables and be stopped multiple times. Each object stores it's set of states each time it is stopped so the object can then be resumed and move back through the subsequent set of states. State Profiles When sending objects to a down state using state profiles, all members of the Time Table should have the associated state profile. Down Behaviors Down periods can also optionally be associated with a down behavior. If a down behavior is specified, the down and resume functions will be called on the down behavior instead of on the time table itself. This allows you to define different kinds of down events that can be shared between different time tables and also allows down periods within the same time table to behave differently from each other. See Down Behaviors for more information. Modes The Time Table can be set up in different modes allowing for non-repeating/repeating schedules or schedules based upon date and time. The Daily Repeat, Weekly Repeat, and Date Based modes all utilize the Model Start Time and Date as defined in Run Time Tools . None When the mode is set to none, the times listed in the table are absolute times based upon the model time units. The schedule will not repeat. Daily Repeat If you set your Time Table to repeat daily, the Model Start Time (as defined in Run Time Tools ) does not come into effect. For example, if your Model Start Time is set to 08:00:00 AM and your Graphical Table looks like the above table, the members of the Time Table will begin the Model in an Operational state, and no functions will be fired. If however, you change the Model Start Time to 07:00:00 AM, when you reset and run your model, the Down functions will fire and the members will begin in a Down state. One hour later (based on the model time units, so 3600 seconds if the model time is set to seconds), the Resume functions will be fired and the members will begin their Operational Time. Weekly Repeat Setting the Time Table to repeat weekly will behave similarly to the Repeat Daily, except that the Time Table will also take into account the Model start day of the week . If the Model Start Time (as defined in Run Time Tools ) begins on a Tuesday at 08:00:00 AM and our Time Table is set to the above values, then the Time Table will skip all of Monday and jump to Tuesday at 08:00:00 AM with the Time Table's members being Operational. When the Model Time hits Friday at 05:00:00 PM, the members will go Down and remain down until Monday at 08:00:00 AM where the Time Table will start over. Custom Repeat The custom repeat mode is similar to the None mode, except you now have the option of specifying the repeat time for the table. Date Based The date based mode allows you to set up down times where each down time is associated with a specific date. These dates are based upon the Model Start Date and Time (as defined in Run Time Tools ) as well as a Time Table start date and time. This mode does not repeat, however, you can create repeating events. Graphical Time Tables Not all modes can utilize the Graphical Time Table. If you want to use the Graphical Time Table to build your Time Table, but you don't want to tie into the Model Start Time, you can set the Time Table's repeat time to Daily or Weekly , make your necessary changes, hit Apply , then set the Mode to Custom Repeat . This will auto fill the table with the correct values associated with the Daily or Weekly table. General Settings The following general settings are available: Name The name of the Time Table. The combobox has a list of all Time Tables in the model, allowing you to quickly jump to different Time Tables. Enabled Specifies whether the Time Table should execute it's down times for all of the members of the Time Table. The Experimenter allows you to enable and disable Time Tables for different scenarios. Icon Description Adds the Time Table to a User Library as either a Draggable Icon or an Auto-Install Component. The Members Tab The Members tab has the following properties: Icon Description This will open an object selection GUI where you can select multiple objects in the model. Click to sample any object in the model to add it as a member. Removes the selected member(s) from the list. Reorders members Up or Down in the list. Centers the 3D view on the selected member from the list. Selects (puts a red box around) the selected member(s) from the list. Member Order The order members are listed in can affect the model's behavior. For example, an operator is working at a processor. Both are members of the Time Table and go down together. If the processor is listed first, it goes to the \"down\" state. Then when the operator goes down, it tells the processor to go to the \"waiting for operator\" state, so the processor spends the down time not in its \"down\" state, but in the \"waiting for operator\" state. Reverse the order of the operator and processor and both objects spend the down time in the \"down\" state. The Functions Tab The Functions tab has the following properties: Down Function This picklist is executed when the objects in the member list go down. It is executed once for each object in the member list. This is where you specify what to do to stop the object. Resume Function This picklist is executed when the objects in the member list resume their operation. It is executed once for each object in the member list. This is where you specify what to do to resume the object. On Down This picklist is fired immediately after the Down Function has been fired for all objects, but it is only executed once, instead of once for each object in the member list. On Resume This picklist is fired immediately after the Resume Function has been fired for all objects, but it is only executed once, instead of once for each object in the member list. The Table Tab The Table Tab has the following properties: General Controls Mode - This specifies the mode of the Time Table, None, Daily Repeat, Weekly Repeat, Custom Repeat or Date Based. Graphical / Table - Switch between the graphical and the table editors. - This button will add the table to the model's Excel Importer. The imported table takes the form of the table (Time, State, Duration, Profile, DownBehaviour). Table Editor The Table Editor has the following properties: Rows - This is the number of rows in the table. Table - Each row records the following: Time - This is the time since the table began that the state change should occur. If the mode is set to None, the table does not repeat, so the times listed in the Time column are absolute. State - This is the state that the objects controlled by this table will change into when the Time Table tells it to go down. If you click on this column, a drop-down box will appear at the top, giving you a list of possible states. Refer to the 3D object reference for more information about what each state means to each object. Refer to the state list for a quick reference of each state's number and macro definition. Duration - This is how long the objects will stay in the new state before changing back to their original state. Profile - This is the state profile that the Down State is associated with. If you click on this column, a drop-down box will appear at the top, giving you a list of possible state profiles. Changing the State Profile will update the State column drop-down. DownBehaviour - This is the Down Behaviour that will be used with the entry. If you click on this column, a drop-down box will appear at the top, giving you a list of possible Down Behaviours. A NULL Down Behaviour will use the behaviour defined on the Functions tab. Repeat Time - Specify the time, in model time units, to repeat the Time Table. Graphical Table The Graphical Table has the following properties: Snap To - Specifies the time to snap entries to in the view. You can specify the preset 10 min, 15 min, 30 min and 1 hour, or set your own custom snap to time. The custom time is in model time units. Calendar Start - Specifies the start date and time of the Time Table. Events that occur before the start time will not fire, however, the data will remain. This allows you to temporarily turn off parts of your Time Table if needed. Color - Select a label to color the events by. The color of the event will be equal to Color.byNumber(labelValue) or color(labelValue) . Start - The start date and time of the selected entry. End - The end date and time of the selected entry. Duration - The duration of the selected entry. Of form DD:HH:MM:SS. Repeating Event - If checked, the event will become a repeating event. Here you can define how often the repeat occurs and either how many times it repeats or until which date and time it repeats to. - Displays the properties of the repeating event. - If the selected event is part of a repeating event but is not the parent event, this will center the parent event in the view and select it. State Profile - Specifies the state profile for the down state of the selected entry. Down State - Specifies what state the members should go to for the selected entry. Down Behaviour - Specifies the Down Behaviour that will be used with the selected entry. A NULL Down Behaviour will use the behaviour defined on the Functions tab. Using the Graphical Table: Creating entries - Click and drag anywhere in the white space to create a new down time. Snaps to the Snap To time. Modifying entries - Click and drag in the middle of an entry to change the start time of the entry. Drag left or right to change the time along the week, or drag up or down to change weeks. Click and drag at the left or right edge of an entry to modify the duration. Snaps to the Snap To time. Start and end times as well as duration can also be modified through the property below the editor view. Selecting weeks - Click and drag along the left side of the view under the Date column to select a week of entries. Any entries with their start time in the selected week will be selected. Zoom - Hold the Ctrl key while using the scroll wheel to zoom in or out on the mouse location. Scroll - Use the scroll wheel to scroll up and down in the view. Horizontal Scroll - Hold the Shift key while using the scroll wheel to scroll left and right. Bottom Scroll Bar - Click and drag along the bottom scroll bar to zoom in/out and scroll left and right. Drag to Copy - Hold the Ctrl key and click and drag an entry to create a copy. Ctrl + C - Copy selected entries. Ctrl + X - Cut selected entries. Ctrl + V - Paste selected entries. If a single entry was copied, the pasted entry will be pasted below the cursor position. If an entire week was selected, the entries are pasted based upon the week that the cursor is positioned over, keeping start times relative to the start of the week. Arrow Keys - Select an entry or a week of entries and use the up, down, left and right arrow keys to adjust the entry start times based upon the Snap To time. Events Down Function This event is fired once for each member when the table hits a down time. It has the following parameters: Event Parameter Type Explanation Down Object Object The object going down State int The state the object will go into Table Row int The row corresponding to this down time in the table Duration double The duration of the down time State Profile int The state profile on the object that will be updated Resume Function This event is fired once for each member when the table ends a down time. It has the following parameters: Event Parameter Type Explanation Down Object Object The object that was down and is now resuming State int The state the object was in Table Row int The row corresponding to this down time in the table State Profile int The state profile on the object that will be updated On Down This event is fired once after the Down Function has fired for all members. It has the following parameters: Event Parameter Type Explanation Table Row int The row corresponding to this down time in the table On Resume This event is fired once after the Resume Function has fired for all members. It has the following parameters: Event Parameter Type Explanation Table Row int The row corresponding to this down time in the table"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/TrackedVariables/TrackedVariables.html",
        "title": "Tracked Variables",
        "content": "Overview and Key Concepts Tracked Variables are accessed from the Toolbox. Global Tracked Variables Tracked Variables accessed through the toolbox are stored in the MODEL:/Tools/TrackedVariables folder. These tracked variables are global for the model. Additional Tracked Variables may be added to your model through this window. Local Tracked Variables Tracked Variables can be stored on other nodes in the model. These include, but are not limited to, Global Tables and object labels. You can also create Tracked Variables dynamically using FlexScript. Properties Tracked variables have the following properties: Icon Description Pins the tracked variable to a Dashboard as a table, bar, line or histogram graph. Tracked Variable Drop Down Shows the current Tracked Variables. Enter text to rename the Tracked Variable. Type The type affects what metadata will be collected and how it will be calculated. Type can be one of the following values: Level. Records the variable as a level that can go up and down, such as content. The average is a time-weighted average. Cumulative. Records the variable as a value that only accumulates over time, such as input or output. Average is not tracked. Time Series. Records the variable as a series of independent values. The average is a non-time-weighted average. An example of this type is staytime tracking. Categorical. Records the variable as a set of values, where values do not have a mathematical relationship to each other. Average is not tracked. An example of this is state tracking. Kinetic Level. This is like the Level type, except that the level can also have a rate of change, such as for a battery level that is constantly depleting/recharging at a defined amperage, or a liquid level that increases or decreases based on a flow rate. Dashboard Tracked variables can be displayed in the Dashboard in multiple graphs: Object Statistics using Tracked Variables FlexSim's simulation objects also use tracked variables to record many of their own object-specific statistics. Each object will usually track the standard set of statistics, which are: Content Input Output State Staytime Each object can also publish additional statistics depending on the type of object. To see the list of available statistics for an object, you can add a Tracked Variable vs Time chart to a dashboard, then use the button in its properties window to hover over the object of interest. This will list out the object's available statistics. You can also manually get various statistic values of an object using the Object's stats property which will give you a reference to each Tracked Variable the object stores. Events Using the process flow module's Wait For Event or Event-Triggered Source activities, you can also execute logic when an object's statistic changes. Use the button in the activity's properties pane and hover over the desired object to get a list of statistics that can be listened to. Statistic change events will have the format On[StatisticName]Change. A global or local tracked variable will have the OnChange event. On Change occurs whenever the value of a tracked variable changes It has the following parameters: Event Parameter Type Explanation Old Value double The previous value of the tracked variable New Value double The new value of the tracked variable"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/UserCommands/UserCommands.html",
        "title": "User Commands",
        "content": "Overview and Key Concepts The User Commands tool lets you add, delete, and edit custom commands in your model. Once you have created your command you can call it like any other FlexSim command. It will appear in blue when typing code and it will appear in the Command Summary. You can also hover the mouse over the command and press F1 to display the Command Helper. User Commands are accessed from the Toolbox. Calling User Commands from C++ When calling a user command from C++, all parameters passed will need to be converted to a number, or else you may get compiler errors. To convert a parameter to a number, use the tonum() command. Parameters Parameters Each parameter should be one of the following types: Object obj treenode node Array array string str num int double var The var parameter will accept any of the datatypes. To specify multiple datatypes but not include all datatypes you can concatenate parameters together using a forward slash: str/node In the Parameters field you can have optional parameters by enclosing the additional parameters in square brackets at the end of the list: (var object, num type [, int flags]) Return Type The Return Type can be blank or one of following types: num str node var The var type indicates that the return type of the function is a Variant value. Parameters and Return Type The values specified here will be used by the FlexScript parser. The number of parameters and their datatypes will give FlexScript warnings if not passed in as documented in the Parameters section here. If the return type is incorrectly used in code, it will return a FlexScript error and not build correctly. You can specify the parameters list as (...) and leave the return type blank for the FlexScript parser to ignore them. For examples of parameter lists and return types, view the Command Documentation. Accessing Parameters If your command specifies any of the above data types as parameters that will be passed in to the command, you can access those parameters through the param command: param(num) Where num is the rank from the parameter list. For example, if the parameters was specified as: (treenode dataNode, num maxNumDataPoints, num incrementValue) You would access those values in your code by: treenode dataNode = param(1); double maxNumDataPoints = param(2); int incrementValue = param(3); Description When you open the command documentation from the menu Help > Commands, the user commands will be shown in the command documentation in addition to all of the built-in FlexScript commands. The description field shown above will be displayed as html so you can use html markup for formatting, such as <b> and <\\b> for bold. Because the description allows for html markup, some standard characters do not work properly, such as <, >, &, and new line characters. To display these types of characters, you can use special markup codes, such as \"&gt;\" (without the quotes) for a > symbol and <br/> for a line break. If any of the commands' descriptions container invalid html markup, FlexSim may throw an exception when you try to open the Users Manual and your commands will not be properly documented. Properties User Commands has the following properties: Icon Description Adds a new blank User Command. Removes the selected User Command. Reorders User Commands Up or Down in the list. Adds the User Command or All User Commands to a User Library as either a Draggable Icon or an Auto-Install Component. User Commands List Displays a list of all User Commands. Select a command from the list to edit it. Name The name of the User Command. In writing code, this name is the name of the command, ie myUserCommand(). Parameters Specifies the parameters that can be passed into the command. Each parameter should be separated by a comma. To access a parameter in code, use the param(paramNum) command. Return Type Specifies the value the command will return. This can be values like, num, treenode, string, etc. Short Description Specifies the short description of the command. The short description displays in the tooltip when the command is typed or you hover the mouse over the command in a code edit window. Description The description displays in the Command Summary. Example The example displays in the Command Summary. Code Here is where you specify the Flexscript, C++ or DLL code for the command. Apply Saves all changes to the User Command. Close Closes the User Command window without saving changes."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/UserEvents/UserEvents.html",
        "title": "User Events",
        "content": "Overview and Key Concepts User Events are FlexScript functions that execute at set times during the model's run, but are not connected with any specific, visible object. They are created and stored in model's /Tools/UserEvents folder. A model can have any number of user events. User Events are accessed from the Toolbox. Properties User Events have the following properties: Icon Description Adds a new blank User Event. Removes the selected User Event. Reorders User Events Up or Down in the list. Adds the User Event to a User Library as either a Draggable Icon or an Auto-Install Component. User Events List Displays all of the Model's User Events. Changing from one User Event to another will apply any changes made to the previous User Event before displaying the newly selected User Event. Name This is the name of the user event. This is purely for the modeler's convenience and has no effect on the model. It is helpful to be descriptive of what the user event does. Execute event on reset only If this box is checked the event will only be executed when the reset button is pressed. First Event Time This is the time in model units that the User Event will occur. Repeat Event If this box is checked, as soon as the user event executes, it begins counting towards the next execution time as defined by the Repeat Event Time. Repeat Event Time If the Repeat Event box is checked, this field will be enabled. Once the first User Event executes, the User Event will repeat in regular intervals defined by this time (in model units). Event Code This is where the FlexScript code for the event is written. Any valid FlexScript statements can be used in this picklist."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/VideoRecorder/VideoRecorder.html",
        "title": "Video Recorder",
        "content": "Overview and Key Concepts The Video Recorder is an object that is added to the Tools folder of the model tree when the Video Recorder option is selected in the Tools menu. The Video Recorder is based on the FFmpeg video solution, and enables the user to record high quality videos of their model, utilizing camera flypaths, layers, and animations if desired. This functionality is obtained by use of output files, sequences, and layers. The Video Recorder can be accessed from the Toolbox. Windows Display Scaling FFmpeg The video recorder uses FFmpeg. In order for FFmpeg to properly record videos, Windows display scaling level (DPI) must be set to 100%. If your computer is not at 100%, you can change the setting through the Windows control panel under the Display settings. Output Files The Video Recorder allows the user to record multiple output files at one time. Each output file can have a different size, framerate, codec, and file type. This can be especially useful for long recordings with complicated models, where it can take hours to record, since you can record all of the views you want in one run. By default, output files are encoded using a variant on MPEG-4 and written to the .mp4 file format. Sequences Each output is made up of sequences. Sequences are what defines when to start and stop recording during your model run. A single output can have as many different sequences as you want, so you can capture only the relevant points of your simulation. However, only one sequence is required to make one file, and by default only one sequence is used per output. If you want more than one sequence in a single output, select the Use Shared Sequences option. Layers Layers allow you to record multiple views of a model in a single video. You can customize the size and position of each layer to arrange the views of your model. By default, there is only one layer, and it is sized so that it matches the output size. Recording a Video The following sections explain how to record videos. Recording a Simple Video The Video Recorder is designed to make recording simple videos of your model as easy as possible. For example: Open the Video Recorder window (add an Video Recorder object to your model) by going to the Toolbox, then point to Visual, then select Video Recorder. Specify your output file path by clicking the browse button. Click the sampler button next to View and click on your model. Your video is now ready to record. If desired, set the size, FPS, codec, start and end times, speed, and flypath options to fit your needs. Press the Record button. Your model will reset and run, and you will see a popup in the top left corner displaying recording progress. When finished, the popup will disappear and your video file will appear at your specified path. Recording a More Complex Video In this example we will utilize Shared Sequences and some of the advanced layer options: Open the Video Recorder window and specify the output file path as above. Click the Shared Sequences tab. There should be one Sequence available to edit. Set the End field to 30 and the Speed to 2. The background of this video will be a solid color. Change the Type to Color and pick a dark blue. Add another layer by clicking the Add button above the Layers list. Make sure the Type of the new layer is View. Set the View to your model view by using the sampler button as above. Change the mode in Size to Custom, and set the length and width to be 20 pixels less than your output length and width. From the picklist in the X field, choose Slide In/Out. Change the first popup field to be 10, and have it slide in for 10 seconds. This will make it so that the model view will start off the screen, slide in for 10 seconds, and stop when the left edge of the model view is 10 pixels from the left edge of the video. Set the Y field to be 10. Switch back to the Output tab. Change the mode from Use Basic Sequence to Use Shared Sequences. Using the button, select your sequence from the drop down list. Press the Record button. The recorded video should display the model view sliding in from the left, stopping centered in the blue background. The Output Tab The following image shows the Output tab of the Video Recorder dialog: The following sections explain the properties found on this tab: Output Files This view lists the names of the output files that will be created when recording. To add another output file, click the Add button . To remove an output file, select the desired output in the list and press the Remove button . When an output is selected, details about that output are displayed in the right portion of the tab. If the box next to the output name is cleared, that file will not be produced during the next recording. Record Click this button to create the output files. The model will reset and run, allowing the Video Recorder to create the output files. File Path This specifies where the output file will be saved. The path can be set manually or by clicking the browse button. If you want to use a video container other than .mp4, you can specify the extension here. You can specify any container supported by FFmpeg. Codec This is the codec the video will record in. MPEG-4 is the default codec, and will record in high quality. H.264 is a widely accepted codec for recording high quality video in low file sizes. If you want to use a different codec, you can enter in the standard FFmpeg command line syntax for codec options here. Windows Media Player Windows Media Player normally does not support the playback of video files encoded in the H.264 format, but virtually any other media player (such as the VLC Player) does. There are also extensions to Windows Media Player that allow H.264 to be played that can be downloaded and installed. If you want to guarantee that your video can be played in Windows Media Player, record your video as an MPEG-4. FPS This field indicates how many frames per second will be recorded. You can save rendering time and output file size by lowering this number. However, values below 30 will cause your videos to look choppy. Size This is the size of the video, in pixels. Use the dropdown to select one of the presets, which are standard video sizes. You can also enter custom values. Use Basic Sequence Use this option to create simple videos. When you use this option, the following properties are available: Start - The start time (in model time) of the video End - The stop time (in model time) of the video Speed - The model speed Duration - The total length of the output video. This is calculated from the previous three properties. View - The view used to record the video. Please note that only some views may be recorded by the Video Recorder. Enable/Disable Preview - When selected, you will see your model running as the video is recorded. Disable this option to improve recording time. Flypath - The flypath to use. None by default. Use Shared Sequences This option allows you to create more complex videos, including videos with multiple layers. When you choose this option, you can add and remove sequences to the selected output file. You can create and edit sequences on the Shared Sequences tab. The Shared Sequences Tab The following image shows the Shared Sequences tab of the Video Recorder dialog. The following section describes the properties available on this tab: Sequences List This list shows all the sequences that are available for you to use in a video. You can add, remove or reorder the sequences in this list. The following properties apply to the sequences as a whole: Name - The name of the sequence Start - The start time (in model units) for the sequence End - The end time (in model units) for the sequence Speed - The model speed Duration - The total video length. This value is calculated from the previous three properties. As you create sequences, they become available to use on the Output tab. Layers This list shows you all the layers that are part of the selected sequence. You can add, remove, or reorder the layers in this list. Layers are drawn so that the each layer is drawn over the layer below it in the list. Thus the layer on the bottom of the list is the background that all other layers are drawn on top of. The following properties apply to the selected layer: Name - The name of the layer Type - The type of layer. View implies that this layer will record a view of your model. Color means that this layer will display a solid color. You can use the second option to set the color of unused space in your video. View - The view used to record the video. Please note that only some views may be recorded by the Video Recorder. Flypath - The flypath used by the current layer. Keep in mind that due to how flypaths operate, trying to have multiple layers use different flypaths on the same view will not work. Opacity - The opacity of the current layer. You can choose the Static Value option to specify a fixed opacity. You can also use these fields to animate the opacity. Use the Keyframe Animation option to choose times and values for the layer, and choose Slide In/Slide Out to have the layer transition towards that value. Finally, you can enter in your own custom FlexScript to define the opacity of the layer. Mode - Set this option to Inherit to have this layer fill the output size. Use Custom to specify a custom size for this layer. Samples - If this option is set higher than one, then your video will have high quality anti-aliasing.For example, if you are recording a 1920x1080 layer and you set this value to 2, the Video Recorder will capture a 3846x2160 layer, and use it to smooth out your image. This is called supersampling, and will significantly increase recording time. Alignment - The X and Y value specify the offset for this layer from the bottom left of the output area. You can choose the Static Position option to specify an offset with respect to other locations. You can also use these fields to animate your layer. Use the Keyframe Animation option to choose times and locations for the layer, and choose Slide In/Slide Out to have the layer transition into the output area. Finally, you can enter in your own custom FlexScript to define the position and motion of the layer."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/VisioImporter/VisioImporter.html",
        "title": "Visio Importer",
        "content": "Overview and Key Concepts The Visio import tool allows you to build models in Microsoft Visio™ and import them into FlexSim. The Visio Importer can be accessed from the Toolbox. Tutorial Start Visio. Open the FlexsimTemplate.vst Visio will look like this. Drag objects from the Stencil into the model space to arrange their layout. Drag the A Port Connection object into the model to create a connection. The connection is made from the upper left point to the bottom right point. If you hook the connection backwards, the connection will be backwards in FlexSim. This is a connection that is only connected to the upstream object. Connections Do NOT connect the connection directly to the object. It must be connected to one of the blue points. When dragging out a connection, it is acceptable to have both ends touching blue connection points. The connection will be created correctly. Also, the connection point that you connect them to in Visio does not matter. FlexSim connections will be ordered according to the order in which they were dragged out in Visio. The example below will connect queue to processor's first input port despite being connected to the second connection point on the object in Visio. S port connections (center ports) are created in the same way as A port connections. The connection point in Visio that they are connected to does not make a difference in their order. Connecting S port connections to the blue connection points on the left and right is acceptable. Objects can be rotated and resized from Visio to resize and rotate objects in FlexSim. The rotation tool in Visio looks like this. Do not move the centroid point of the object when resizing. The centroid point is the green circle with a black point in its middle. It is used to define where the center of rotation is for that object. If you move it in Visio, the object will not be located correctly in FlexSim. This processor was rotated by clicking and dragging the rotation tool around one of its corner points. This queue has been resized by dragging its side point down using the selection tool . Objects can be renamed by double clicking on the object and typing in a new name. Each object in your model must have a unique name in order for it to be correctly imported into FlexSim. If objects are given the same name in Visio, their connections will not be created correctly in FlexSim. In the example below, the Transporters have the same name, so the Dispatcher was connected to the first one twice. Here is a nearly completed Visio page with a FlexSim layout. There are a few more things to check to be sure are correct before exporting it to Excel to import into FlexSim. Be sure each object has a unique name. And each object must be correctly formatted in this menu. In Visio 2010 this dialog box has been renamed \"Shape Name\" as seen in the picture below: The Name field contains the object's class and a number separated by a period or just the object's class. If there is a number, it must match the ID number or the object will not be correctly exported. Typically the objects do this naturally, but sometimes Visio will incorrectly name an object in this field. If your model didn't correctly import into FlexSim, this was probably the reason why. The example below shows what happens if the name is left as \"Dispatcher.14\" instead of changed to \"Dispatcher.17\". Now that everything has a unique name, and is correctly named in the Special Format, we are ready to export. Go to the Tools, then Macros, then Visio Extras, then Database Export to export the file. This screen will appear. Click next. Select \"All shapes on the page\" and click Next. Click the \"Add All >>\" button to get all the correct information exported. Then click Next. Select Excel Files and click Next. Select the excel file to export to. This should usually be C:/ProgramFiles/Flexsim3/program/FlexsimVisioImport.xls. Type a name into Table Name. This name will be typed again into FlexSim so that it knows which sheet to import from. Remember the name you typed and click Next. Do not change any values for the data on this screen. Click Next. Next. Finish. Now, in FlexSim go to Tools, then Visio... This dialog box will appear. Enter a number into Number of Rows and Number of Columns that is larger than the number of rows and columns in the excel sheet that was just created by Visio Database Export. 50 is usually large enough. If your model does not import correctly, you may need to increase these values after checking your excel sheet to see how large it is. Click the ... button to browse for the correct excel file to open. Type the Table Name that was entered earlier into the space for Worksheet Name. Be sure that the correct Excel Path is specified. Click the Import button. This message box will appear. Wait until Excel has completely opened the correct worksheet and then click OK. The model will then be imported. This may take a few minutes. Wait for the Visio Model Import window to close. Your model will then be imported into FlexSim."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/WebPages/WebPages.html",
        "title": "Web Pages",
        "content": "Overview and Key Concepts You can use web pages to create HTML interfaces in your model. Web pages added to the model are shown in the Toolbox. When using the FlexSim Webserver , you can access each web page by name. The default page shown when connecting to a model instance using the webserver is in MAIN:/project/exec/globals/serverinterface/pagetemplates/default. If you name one of your web pages \"defaultpage\" then your page will be used as the default web server page for the model instead. Model Interaction To interact with the model, you should use custom web queries . If you use custom web queries instead of firing FlexSim events directly, then your web page will work properly within the software and when used with the webserver. While developing model web pages, keep in mind that the JavaScript on the page will be executed on the client browser. FlexScript preprocessor code on the page will execute within the FlexSim instance on the server. When developing and using the pages from within the software, the web page code will be applied to the tree and then requested locally using FlexSim's server interface as if the page had been requested by a client web browser using the webserver. External Files You can reference external files (such as images, scripts, and style sheets) using the following special keywords at the beginning of the path. flexsimmodel/ flexsimweb/ flexsimdir/ flexsimmodules/ flexsimdocuments/ flexsimhelp/ For example, the line below references an image file in the model directory. <img src=\"flexsimmodel/logo.png\">"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Workspaces/Workspaces.html",
        "title": "Workspaces",
        "content": "Overview and Key Concepts A Workspace is the arrangement of visible windows, panels, and tabs in FlexSim. The purpose of the Workspaces tool is to allow the user to save their preferred workspaces in a model, and toggle between them. General Use A user may make one workspace which contains the windows needed for building their model, one workspace for debugging, another for presenting, etc. There is no limit to the number of workspaces a model may have. The Workspaces tool can be accessed with this button in the toolbar near the top of the screen: Workspaces can also be accessed in the Toolbox . Adding Custom Workspaces To create a workspace, first arrange all the windows and panels into the desired layout. Then select the Workspaces button in the toolbar and select Save Current Workspace (Alternatively, you can go to Toolbox > Add > Workspace). Give the Workspace a unique name and select OK. This will save the current workspace under the unique name. You can overwrite a previously saved workspace by selecting Save Current Workspace then in the window that pops up, select the previous workspace in the dropdown and hit OK. A message will appear saying, \"[The previous workspace] already exists. Do you want to replace it?\" Select OK to replace the previous workspace with the current workspace. Opening Workspaces To open a saved workspace, click on the Workspaces button and select the desired workspace under the dropdown. All workspaces previously saved in the model will appear in the submenu after clicking on the button, as well as in the Toolbox . You can also open a workspace by double clicking on it in the Toolbox . The Default Workspace The Default Workspace is comprised of the Library and Toolbox tabs on the left side, the 3D view in the center, and the Properties window on the right. The Default Workspace can be opened by clicking on the Workspaces button in the toolbar and selecting Open Default Workspace . It can also be opened under View > Open Default Workspace. The Default Workspace can be changed by going to File > Global Preferences > Environment and selecting Set current Workspace as default . It can be reset to the standard Default Workspace by selecting Reset in the same window."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Legacy/LegacyDashboardGraphs/LegacyDashboardGraphs.html",
        "title": "Legacy Dashboard Graphs",
        "content": "Introduction to Legacy Dashboard Graphs The following sections describe the different tabs that are available on various charts and graphs in the Dashboard tool. The Associations Tab There are multiple ways to add associations to the custom chart: Tree Browse Dialog - For more information on the tree browse dialog, see the tree browse dialog page. Global Variables / Tables - The list of Global Variables and Global Tables will be populated based upon what is available in your model. The list of global variables will only include integer and double types. Sampler - Sample objects from the model. Object Selection Window - The current mode is highlighted at the top of the browsing window. Browse by Class - This method of adding objects sorts the objects by class. To select an entire class, click on the type icon. Click on an object to select or deselect it. Browse by Group - This method of adding objects sorts the objects by group. To select an entire group, click on the type icon. Click on an object to select or deselect it. Browse by Object - This method of adding objects lists all objects in the model. Click on an object to select or deselect it. Select by Dragging - This method of adding objects uses the 3D model view. Simply drag the target icon from the current window to an object in the model you would like to add. The Associations tab has the following properties: Associations are objects, nodes, or variables in your model. Icon Description Adds associations to the current list of associations. Remove the selected associations from the list. Move the selected associations up or down in the list. Sample a node or object in the model. Display Name When using groups, if no display name is specified, the titles displayed for the group members will be their path in the model. The Colors Tab The colors page allows you to define colors for your graph. The options available are based upon the graph. For State charts, each State has a color. Notice in the above image there are two colors displayed. The color on the left is the normal color for that state. The color on the right is the translucent color used when Show Yellow Checked States as Translucent is checked from the Utilization Analysis tab. For statistic graphs (Avg. Content, etc), the colors are for each statistic. Line charts define colors for each object or group. Gantt Charts either display colors for States or for objects. Colors are not available for Text graphs. Icon Description Loads saved color schemes and allows you to edit color schemes in the tree. Saves the current color scheme. Displays a color palette. Allows you to sample a color in FlexSim or outside of FlexSim. Define Colors Check to define a custom set of colors. Item Trace Gantt and Custom Chart The Item Trace Gantt Chart and the Custom Chart dynamically add Legends or Series to their charts so a and are available to add and remove colors. The Data Tab The Data tab is used by the Custom Chart and the Custom Gantt Chart. The Data tab gives you multiple picklists that allow you to customize the data to be displayed on your chart. It has the following properties: Apply Preset This button contains a list of presets to get you started on using the custom chart or custom gantt chart. The presets include code to access values from tables, bundles etc. The General Tab The General page of Dashboard graphs vary depending on the statistic object and upon the display type. Line Chart Line charts have the following general properties: Display Type - This option changes the display style of graph. Stacked Bar Chart - Bar Chart Only. This option stacks each segment of the data for one object into a single bar. Show Legend - This option adds a legend to the graph. Precision - This defines the number precision of graph text. Not available for line graphs. Font Size - This defines the font size of graph text. Bar Size - Bar Chart Only. This defines the bar height for Bar Charts. Only Collect Data for a Defined Time Interval - This option creates a time period during which statistics for this graph will be recorded. From Time - This defines when statistics will start being recorded. To Time - This defines when statistics will no longer be recorded. Interval - This defines how often a line graph will update. Time Scale - This defines the time scale that numbers will be displayed in along the x-axis. Y Axis Title - Text that will display along the Y Axis. X Axis Title - Text that will display along the X Axis. State Statistic Graphs State Statistic Graphs have the following general properties: Display Type - This option changes the display style of graph. Display Current State Only - This option is only available for Table of Values charts. Displays the current state name of objects. Combine All into One Pie - This option combines all pie charts into a single pie chart. It averages the values from all objects. Show Totals Instead of Percentages - This option changes the displayed values from percentages to overall totals. Show Legend - This option adds a legend to the graph. Precision - This defines the number precision of graph text. Font Size - This defines the font size of graph text. Bar Size - Bar Chart Only. This defines the bar height for Bar Charts. Only Collect Data for a Defined Time Interval - This option creates a time period during which statistics for this graph will be recorded. From Time - This defines when statistics will start being recorded. To Time - This defines when statistics will no longer be recorded. Post-Process Filtering If the Collect Entire State History for Post-Process Filtering option is checked, FlexSim will record when each state change occurred for every object in the graph. After running the model, you can check the Filter By Time option and enter a time interval in the From and To fields. If you then click Apply or Update , the graph will display the state data for just that time interval. The Filter By Time option is unchecked when you Reset the model. Gantt Chart Gantt charts have the following general properties: Display Type - This option changes the display type of graph. This may either be States or Item Trace. Show Legend - This option adds a legend to the graph. Font Size - This defines the font size of graph text. Bar Size - This defines the bar height. Only Collect Data for a Defined Time Interval - This option creates a time period during which statistics for this graph will be recorded. Interval Type - Some charts may have an additional option of specifying the Interval Type, like the Gantt Chart. The Interval Type can be set to: Time Units - This will scale the x-axis to the given time units. Setting the Time Units to Date Based will change the y-axis to display dates and the x-axis to display times of each day. The Wrap will automatically be set to Weekly when using Date Based. Wrap - Check this box to have the chart wrap it's data each specified time period. This will cause the graph to grow vertically. Wrap Every - If Wrap is checked, this defines at what time the graph should wrap: Absolute Time: Starts collecting data at the From Time and ends collecting data at the To Time. Time Window: Collects data for a specified length of time. The Length field defines the length of time from the first recorded statistic to the last recorded statistic and dynamically updates as the model runs. As the data is gathered in a model run, data from the start will be removed in order to keep all of the data in the chart within the specified length of time. From Time - This defines when statistics will start being recorded. To Time - This defines when statistics will no longer be recorded. X Axis Title - Text that will display along the X Axis. Tracked Variable Graphs Tracked Variable graphs have the following general properties: Display Type - This option changes the display style of graph. Show Legend - This option adds a legend to the graph. Normalize Values - This option shows the values of the histogram as a percent, rather than an actual value. Number of Bars - This option adjust the number of bars that the histogram has. The Item Trace Tab The Item Trace tab has the following properties: Trace Requirements This picklist allows you to define which flowitems will be traced. current: The object as defined in the Objects page. item: The involved flowitem. Item Name This picklist allows you to define a custom display name for traced items. current: The object as defined in the Objects page. item: The involved flowitem. itemnode: The node associated with the item and its graph data. Setting the name of this node will set the display name in the graph. The Objects Tab There are five ways to add objects to this graph: Browse by Class - This method of adding objects sorts the objects by class. To select an entire class, click on the type icon. Click on an object to select or deselect it. Browse by Group - This method of adding objects sorts the objects by group. To select an entire group, click on the type icon. Click on an object to select or deselect it. Browse by Object - This method of adding objects lists all objects in the model. Click on an object to select or deselect it. Select by Dragging - This method of adding objects uses the 3D model view. Simply drag the target icon from the current window to an object in the model you would like to add. The Objects tab has the following properties: Icon Description Adds objects or groups to the current list of objects Removes objects from the current list of objects Moves the selected object up in the list Moves the selected object down in the list Sample an object in the model. Combines several objects into one object Splits a combined object into its components. Display Name This defines the name of the object or group that will be displayed in the graph. Leaving this field blank will cause the object or group name to be displayed. State Profile State Statistics Only. Defines which State Profile should be used. This option is only available if the first object in the object list has additional State Profiles. All objects in the list must have the selected State Profile. Start Trace On Gantt Chart (Item Trace) Only. This specifies when a item trace should be started. This value can be set for each individual object. The Statistics Tab The Statistics tab has the following properties: Icon Description Adds a statistic to the current list of statistics Removes a statistic from the current list of statistics Moves the selected statistic up in the list Moves the selected statistic down in the list Available Statistics The following statistics are available: Output per... - This statistic will measure output per time, where the units of time can be selected from the side list. Input per... - This statistic will measure input per time, where the units of time can be selected from the side list. Distance Traveled per Time - This statistic will measure the velocity of an object. Both the length units and the time units can be selected from the side lists. Total Distance Traveled - This statistic will measure the total distance an object travels. The length units can be selected from the side list. Custom - This statistic allows you to execute custom code to define what value is displayed. The Tracked Variables Tab The Tracked Variables tab has the following properties: Icon Description Adds a tracked variable to the current list of tracked variables Removes a tracked variable from the current list of tracked variables Moves the selected tracked variables up or down in the list The Utilization Analysis Tab The Utilization Analysis tab has the following properties: Show All Checked States This option shows all states as solid colors. It does not calculate the percent time for which the object is utilized. Show Only Green Checked States This option shows the percent time that the object is in a green checked state. It does not show any other state information. Show Yellow Checked States as Translucent This option shows green checked states in solid green. States with yellow checks are shown in translucent colors. The Add Button Manually add states to the list. Some states will not show up automatically in the State List. This is due to objects having a set of 'used' states that may not include states that are set manually through the setstate() command or stopobject() command or through the Time Table or MTBF/MTTR tools. Use the right click menu to remove manually added states from the list. State List Valid states for the selected objects will be displayed in this list. Click on the check marks to toggle between the three calculation options."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Legacy/LegacyReportsStatistics/LegacyReportsStatistics.html",
        "title": "Legacy Reports and Statistics Tool",
        "content": "Overview and Key Concepts The Reports and Statistics dialog box allows the modeler to create various reports based on statistics gathered during a model run. These reports can include information about flow item throughput, staytime, state history and other data that the modeller can select or customize. This dialog box also allows the modeler to create a document containing the most important details about objects in the model. The Summary Report Tab The standard report tab allows you to create a report of your model. FlexSim reports on a list of attributes that you define for the model. Once you have created the list of attributes that you want to report, click on the Generate Report button. The report is then created and exported to Microsoft Excel. It has the following properties: Standard Attributes This list lets you select standard attributes like content, staytime, state variable, etc. Press the button at the top to add the selected attribute to the list of attributes to report. User Defined Attributes Here you can type in the name of a label or variable that you want reported, then click the button at the bottom to add your own attributes to the report list. For example, if one or more Queues have a label called \"lastreditem\" and you want a report of all such labels and their values, then type \"lastreditem\" in the field and press the button. Attributes to Report This is the list of attributes that will be reported. To remove an item from the list, select it and press the button. Generate Report Press this button to generate the report. The State Report Tab The state report tab allows you to create a report of the time the objects in your model spent in individual states. This can be reported either as an exact time or as a percentage of the model run time. Once you have created the list of states that you want to report, click on the Generate Report button. The report is then created and exported to Microsoft Excel. It has the following properties: Display values as percentages If this box is checked the report will display the percentage of the total run time that the objects spent in each state. If it is not checked, the report will display the exact amount of time the objects spent in each state. Available States These are the states available in FlexSim that can be included in the report. To place a state in the States to Report column, highlight the state you are interested in and press the button. You can place all of the available states in the States to Report column by pressing the button. States to Report The time the objects spent in these states will be displayed in the report. The time for all of these states will be reported for all objects, even if the object was never in some of the states. To remove a state from this list, highlight it and press the button. To remove all of the states from this list press the button. Generate Report Press this button to generate the report. The Model Documentation Tab The model documentation tab lets you create a (.txt) document that reports information on your model. Check the appropriate boxes that you want to be documented, and then click the Generate Report button to create the file. It has the following properties: Objects These options allow the modeler to select which attributes of the model objects should be included in the report. If \"Group by Object\" is selected, all of the selected attributes for each object will be together in the final report. If \"Group by Category\" is selected, then all of the values for each attribute will be together in the report. If \"Verbose\" is selected, then any code fields (triggers, process time, etc.) will be documented with the full text of the field. If \"Verbose\" is not checked, then only the text that appears a template window will be recorded in the resulting document. Global These options allow the modeler to select which global objects and features they would like included in the report. Generate Report Press this button to generate the report. The Options Tab The options tab allows you to select the classes of objects that will be displayed in the reports. It has the following properties: Available Classes These are all of the classes in FlexSim whose instances can be included in reports. These are the classes that appear the Library Icon Grid. You can add a class to the Classes to Report list by highlighting the class you are interested in and pressing the button. You can add all of the classes to the Classes to Report list by pressing the button. Classes to Report All of the objects in the model that are instances of any of these classes will be included in any reports that are generated. Any instances of classes that are not in this list will not be included in reports. To remove a class from this list, highlight the class you want to remove and press the button. You can remove all of the classes from the list by pressing the button."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Tools/Legacy/LegacyProcessFlowCharts/LegacyProcessFlowCharts.html",
        "title": "Legacy Process Flow Chart Properties",
        "content": "Introduction to Chart Properties This topic is a reference page that will describe and explain each of the properties available in the Chart Properties window. The properties are organized by the name of the tab in which they appear in the Chart Properties window. Objects Use the Objects tab to add activities, shared assets, or lists to a Process Flow chart. Other objects cannot be added to this chart type. The following image shows the Objects tab of the Chart Properties window: Statistics Use the Statistics tab to add the specific statistics the chart should track and display. The following image shows the Statistics tab of the Chart Properties window: This tab has the following properties: Add - The Add button opens a menu, displaying a complete list of all the statistics that can be displayed using the Process Flow chart. Up/Down - The Up and Down arrows can be used to reorder the statistics. This affects the column order on Table charts, and the bar order on Bar charts. It has no effect on Time charts. Statistic Title - The Statistic Title displays the true title of the statistic. This is the name of the statistic that is passed to the getstat command. Display Name - The Display Name is a custom name for each statistic that displays on the chart. This affects column names in Table charts, and bar names in Bar charts. It does not affect Time charts. Value - Use the Value list drop-down to select which the value, based on this statistic, that you want the chart to display. Current Minimum Maximum Average Standard Deviation Discard old data Check this box to discard old data when calculating a derivative value (minimum, maximum, average, standard deviation). Keep newest Use these two fields to specify how long of a history to keep. For example, if you want to keep only the last 10 values for an average, you would enter a 10 in the field, and select Values from the list drop-down. If you want to keep the last hour of data, you would enter a 1 in the field, and select Hours from the list drop-down. Runtime Some statistics may not exist until the model runs. This true for List partitions, which are created on demand. The Runtime tab allows you to specify which partitions (by partition ID) you want to chart data for. If you don't have a List object on the chart, this page is irrelevant. The following image shows the Runtime page of the Chart Properties window: To add a List partition to the chart, select one of the List statistics in the Statistics page. Then click the Add button to add a field. In that field, enter in the partition ID, usually a number or a string. Groups Use the Groups tab to group statistics by activities or process flow instances. The following image shows the Groups tab of the Chart Properties window: Group Tab Availability The Group tab is only present when the chart type is a Bar Chart or a Data Table. The properties on this page are explained in the following sections: Up/Down The Up and Down buttons move the selected item (either a group or an Entry) up or down, respectively. Group The Group button is used to move a selected Entry into a new or existing group. Entry List The Entry List shows a list of all Entries, and which group they are in. Each Group and Entry have a checkbox next to their name. If an Entry is checked, it will be included on the chart. If a Group is checked, then the chart will display the entries as members of the group. Otherwise, the entries will be included on the chart individually. Entry Title The Entry Title field is visible if you have selected an Entry. It displays the auto-generated name of the Entry, which describes how the data for each statistic is being retrieved. Display Name Both groups and Entries have a Display Name . This is the name that appears on a Bar Chart or Data Table. For Entries, if the Display Name is blank, the auto-generated name is used. Combined Value The Combined Value field only appears when you have selected a group. This determines how the statistics for each member of the group are combined for the group statistic. The only options are Sum and Average . Series Use the Series tab to manage which data series appear on your chart. It shows a list of every valid Entry/Statistic combination, which is called a Series. The following image shows the Series tab of the Chart Properties window: Series Tab Availability The Series tab is only present when the chart type is a Time Chart. The properties on this page are explained in the following sections: Up/Down - The Up and Down buttons move the selected Series up or down, respectively. Series List The Series List shows the plottable data for the chart. A Series can be excluded from the chart by unchecking the box next to its name. Series Title The Series Title is the name of the Entry and the Statistic that were used to create the Series. Display Name The Display Name is shown on the graph. If it is blank, the Series Title is used instead. Connection Style The Connection Style determines how data points in a Series are connected on the graph. Colors Use the Colors tab in the Chart Properties window to change the chart's color scheme. General Use the General tab to change the chart type and adjust other general display settings. The following image shows the General tab of the Chart Properties window: The properties on this page are explained in the following sections: Display Type - The Display Type drop-down list box allows you to change the type of chart being displayed. Font Size - The Font Size field allows you to change the size of font used to draw the chart. Show Legend - The Show Legend checkbox controls whether or not the chart displays a legend. Precision - The Precision field is only available for Bar Charts and Data Tables. You can use this field to specify the precision the chart will use to display data. Bar Size - The Bar Size field is only available for Bar Charts. You can use this field to specify the size of the bars. Time Scale - The Time Scale field is only available for Time Charts. You can use this field to scale the x axis by the specified amount. X Axis Title - The X Axis Title is only available for Time Charts. You can use this field to set the name of the x axis on the chart. Y Axis Title - The Y Axis Title is only available for Time Charts. You can use this field to set the name of the y axis on the chart."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/TimePlot/TimePlot.html",
        "title": "Time Plot",
        "content": "Overview and Key Concepts The time plot chart allows you to create line charts, stair-step charts, and scatter plots. Data Format At a minimum, the time plot requires a table to have at least two columns: one column that contains an x value, and another that contains a y value. Each row identifies a unique point. If there are additional columns in the table, you can use them to categorize each point. Each point can be categorized by color, as well as by axis. For example, the table below has four columns: The data for the x values are found in the Time column, and the data for the y values are found in the Content column. Each row defines a single point, with the given x and y value. The other columns are used to categorize each point. The chart shown at the beginning of this section categorized points first by the value in the Queue column, then by the value in the Type column. Each unique Queue column value adds an additional axis, and each unique Type value adds a unique color. Given the table shown above, you could use the Type column to determine which axis to put the point on, and the Queue column to determine what color the point should be. If you did, the chart might look as follows: The two plots shown previously display the same data points, but they are categorized into different axis groups, and into different color groups. Performance Measures The Time Plot provides aggregations of the Y Values column as performance measures. Possible aggregations include: Average Sum Minimum Maximum Last Value Time-Weighted Average If any columns are marked as Split By columns, then for each unique split-by value, the chart will provide the same aggregations, but filtered exclusively for the split-by value. Properties Panels The Time Plot uses the following properties panels: Data Settings Text Colors Sorting"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/Histogram/Histogram.html",
        "title": "Histogram",
        "content": "Overview and Key Concepts The histogram allows you to create a histogram of a set of data. Histograms are useful for showing the distribution of a set of values. Data Format At a minimum, the histogram requires a table with a single column, where each row contains a value that should counted in one of the histogram's buckets. However, you can use additional columns to categorize each data point by color and/or by axis. For example, the table below has three columns: The data used to create the histogram is found in the Duration column. The other two columns are used to categorize each point. The chart shown at the beginning of this section categorized points first by the value in the Object column, then by the value in the Type column. Each unique Object column value adds an additional axis, and each unique Type value adds a unqiue color. Given the table shown above, you could use the Type column to determine the axis, and the Queue column to determine the color. The resulting chart might look like the following: Alternatively, you could choose to ignore any categorizing values, to get a feel for the overall distribution. If you used the previous table to make a histogram without categorizing any points, it might look like the following: Performance Measures The Histogram provides performance measures based on aggregations of the Values column, including the Average, Sum, Minimum, and Maximum. In addition, if some columns are marked as Split-by columns, the chart will provide the same aggregations for each unique combination of Split-by values. Properties Panels The Histogram uses the following properties panels: Data Settings Text Colors Sorting"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/GanttChart/GanttChart.html",
        "title": "Gantt Chart",
        "content": "Overview and Key Concepts The Gantt chart allows you to create gantt plots, which are useful for tracking progress over time. The data for a gantt chart must be laid out in a particular way for the gantt chart to properly draw. That table should look similar to the table shown here: The Gantt chart draws one colored box for each row. It uses one column to determine which row the box is drawn on. Another column is used to determine the color of the box. The final two columns are used to determine the beginning and end of the box. You can specify the columns that will be used on the Data tab. The order of the columns does not matter. When you hover over a colored box, a popup will appear, with information related to the specific box: Performance Measures The Gantt chart provides performance measures based on the durations. The duration of a given row in the table is the difference between the End Time column and the Start Time column. The chart will provide the Average, Sum, Minimum, or Maximum of all durations as a performance measures. For each unique value in the Value column, the chart will also provide the Average, Sum, Minimum, or Maximum of all durations for that value as a performance measure. Properties Panels The Gantt Chart uses the following properties panels: Data Settings Text Colors"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/PieChart/PieChart.html",
        "title": "Pie Chart",
        "content": "Overview and Key Concepts The Pie chart can be used to visualize and compare similar values from many objects. The example below shows the time in state for several objects. There are two possible formats for the data table for the pie chart. The are described in the following sections. One Pie per Row This is the simpler format. The Pie chart assumes that each row in the table represents a single pie chart. You can specify which columns to draw pie segments for. In addition, you can specify which column to use for the title, and which column to display in the center. Here is an example table: With this data format and table, you can specify the following settings: With those settings, the resulting chart would be similar to the following: One Segment per Row This format is more flexible. In this format, the Pie chart assumes that each row represents a single segment in the pie. You can specify which column determines the segment size, which column determines the color, and which column(s) determine how the segments are grouped. Here is an example table: With this data format and table, you can specify the following settings: With those settings, the resulting chart would be similar to the following: You could alternatively use the following settings, where the Segment Color and Split By options are switched: This switch in settings creates a chart like the following: Performance Measures The Pie Chart provides performance measures in the same way as the Bar Chart. For more information, see the Bar Chart Performance Measures section. Properties Panels The Pie Chart uses the following properties panels: Data Settings Text Colors Sorting"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/BarChart/BarChart.html",
        "title": "Bar Chart",
        "content": "Overview and Key Concepts The Bar chart can be used to visualize and compare similar values from many objects. The example below shows the time in state for several objects. There are two possible formats for the data table for the bar chart. The are described in the following sections. One Bar Group per Row This is the simpler format. The bar chart assumes that each row in the table represents a group of bars. You can specify which columns to draw individual bars for. In addition, you can specify up to to columns to display to the left of the bars. Here is an example table: With this data format and table, you can specify the following settings: With those settings, the resulting chart would be similar to the following: One Bar per Row This format is more flexible. In this format, the bar chart assumes that each row represents a single bar in the bar group. You can specify which column determines the bar's size, which column determines the bar's color, and which column(s) determine how the bars are grouped. Here is an example table: With this data format and table, you can specify the following settings: With those settings, the resulting chart would be similar to the following: You could alternatively use the following settings, where the Bar Color and Split By options are switched: This switch in settings creates a chart like the following: Performance Measures The Bar Chart provides the following performance measures: If the Bar Label is set to a numeric column, then the chart will provide the Average, Sum, Minimum, or Maximum of that column as a performance measure. For each included column, the chart will provide the Average, Sum, Minimum, or Maximum of the column as a performance measure. Properties Panels The Bar Chart uses the following properties panels: Data Settings Text Colors Sorting"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/TableChart/TableChart.html",
        "title": "Table Chart",
        "content": "Overview and Key Concepts The table chart can be used to display the data in a Statistics Collector table or Calculated Table as a chart. Performance Measures The Table chart provides aggregates of each included numeric column as performance measures. For each column, the chart provides the Average, Sum, Minimum, and Maximum as a possible performance measure. Properties Panels The Table Chart uses the following properties panels: Data Text"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/BoxPlot/BoxPlot.html",
        "title": "Box Plot",
        "content": "Overview and Key Concepts The Box Plot allows you to make boxplots (also called box-and-whisker plots) using data from a Statistics Collector: Data Format At a minimum, the box plot requires a table with a single column, where each row contains a value that should counted in one of the boxes. However, you can use additional columns to categorize each data point by color and/or by axis. For example, the table below has three columns: The data used to create the box plot is found in the Duration column. The other two columns are used to categorize each point. The chart shown at the beginning of this section categorized points first by the value in the Object column, then by the value in the Type column. Each unique Object column value adds an additional x axis category, and each unique Type value adds a unqiue color. Given the table shown above, you could use the Type column to determine the axis, and the Queue column to determine the color. The resulting chart might look like the following: Alternatively, you could choose to ignore any categorizing values, to get a feel for the overall distribution. If you used the previous table to make a box plot without categorizing any points, it might look like the following: Calculations For the lines that form the center box, they are drawn at the first quartile, the median, and the third quartile. The whiskers are drawn to the first data point that is less than 1.5 * IQR (inter-quartile range) away from either the first or third quartiles. The mean and the confidence intervals (if shown) are calculated using all data, including data outside the whisker range. Performance Measures The Box Plot provides performance measures that aggregate the data in the column specified by the Value Column property. The chart will always provide the Average, Minimum, or Maximum of that column as a performance measure. If the either the Axis Categories or the Color Categories columns are specified, the chart will allow you to obtain the Average, Minimum, or Maximum of the value column, filtering by a specific category. Properties Panels The Box Plot uses the following properties panels: Data Settings Colors Sorting"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/SankeyDiagram/SankeyDiagram.html",
        "title": "Sankey Diagram",
        "content": "Overview and Key Concepts The Sankey Diagram allows you to visualize flow between various points in a system. Data Format This chart assumes that each row of the Data Source contains information about individual links. One column will have a Source value, another will have a Target value, and a third will have a Weight value. The Target and Source values are used to determine the location of the link. The Weight value will determine the thickness. Here is the table for the chart shown above: Cycles in Link Data The Sankey Diagram in FlexSim is designed to draw acyclic data. If a cycle is present in the set of links given to the chart, i.e. A --> B --> C --> A, then the chart will draw nodes in multiple places in order to remove the cycle. Performance Measures The Sankey Diagram provides two performance measures per node in the chart: the total value going in to the node, and the total value exiting the node. Properties Panels The Sankey Diagram uses the following properties panels: Data Settings Text Colors"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/ScenarioChart/ScenarioChart.html",
        "title": "Scenario Chart",
        "content": "Overview and Key Concepts The Scenario Chart allows you to compare data from another chart across multiple Experiment scenarios (or Optimizer solutions) on a single chart. To use the Scenario Chart, you must specify a target chart. The Scenario Chart will mimic the type of the target chart; if the target chart is a Bar Chart, the Scenario Chart will also be a Bar Chart. The Scenario Chart is compatible any of the following chart types: Table Chart Bar Chart Pie Chart Histogram Box Plot Time Plot. In addition to specifying a target chart, you must also specify which scenarios you want to compare. The Scenario Chart uses this information to produce a chart that looks similar to the original chart, and also compares the requested scenarios. Since the Experimenter usually runs multiple replications per scenario, the Scenario Chart will aggregate data from all replications of each scenario. This way, the Scenario Chart will form a fair visual representation of the target chart's information for each scenario. Sorting the Scenario Chart The Scenario Chart adds a sort element to sort by scenario. In addition, when you select a target chart, any sort elements in that chart are added to the Scenario Chart, so that it will be sorted the same way. Using the Scenario Chart with the Optimizer The Scenario Chart can also compare solutions from an optimization. Save output tables and charts In order to use the Scenario Chart, be sure have the Experimenter save output tables and charts for each replication. For more information, see the Experimenter topic. Replication Aggregation The Scenario Chart will aggregate data from all replications of each chosen scenario. Depending on the target chart's type, data may be aggregated quite differently. The following sections describe how the aggregation works in general. Table Charts If the Scenario Chart is based on a table chart, you will need to specify which columns of the table to aggregate, and how they should be aggregated. All other columns are considered identifier columns, and are used to determine which rows should be aggregated together. For example, suppose you had a table chart that showed the content of several queues. Then suppose you ran an experiment with two scenarios, and three replications per scenario. Each replication would produce a table chart, like the ones shown in the following image: If you chose to compare Scenario 1 and Scenario 2, and to aggregate the WIP column, the Scenario Chart would look like the following: Row Order and Aggregation Rows from all replication data are first grouped by scenario. Then they are grouped by all non-aggregated columns. The aggregated values are determined for each of these groups. This means that the order of data in each replication doesn't affect the final aggregated values. Pie and Bar Charts If the Scenario Chart is based on a Pie or Bar chart, then the Scenario chart will calculate the average value of each bar or pie segment across all replications of each scenario. Those averaged values will then be used to create an average version of each bar group or pie ring for each scenario. For both charts, you may need to specify whether the text shown on the chart needs to be aggregated also. For example, a state pie chart might show a utilization percentage in the center. If text is present on each bar group or pie ring, but that text is not aggregated, then the Scenario Chart will use that text to identify which bar or segment values should be grouped together for aggregation. Box Plots and Histograms If the Scenario Chart is based on a Box Plot or Histogram, then the resulting chart will be a box plot or histogram of all data from all replications, for each scenario. Time Plots If the Scenario Chart is based on a Time Plot, you can specify an interpolation mode. If the interpolation mode is None, then all data from all replications will be drawn on the plot, colored by Scenario. Otherwise, you must addtionally specify a sample rate and a confidence interval. The Scenario Chart will create time intervals, based on the sample rate, and sample the data at those intervals. For each replication, it is likely that a data point was not recorded at the interval time, so the Scenario Chart will interpolate to find the value. Those interpolated values are then aggregated to determine the mean. In addition, you can also show the min, max and confidence interval values. Interpolation Assumes Ordered Data If you use an interpolation mode, the Scenario Chart assumes the replication data for the target chart is ordered by its x-axis values from least to greatest. If this is not true, the values may be innacurate. For time plots, data is usually gathered chronologically, so this assumption usually holds. Properties Panels The scenario chart uses the following properties panels: Data Other panels will appear in the properties window. However, the other panels deal with the settings specific to the specified chart."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/FinancialChart/FinancialChart.html",
        "title": "Financial Chart",
        "content": "Overview and Key Concepts The financial analysis chart allows you to give objects and flowitems cost data based upon various parameters and states. Properties Panels The financial analysis chart uses the following properties panels: Options Settings"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/DateTimeDisplay/DateTimeDisplay.html",
        "title": "Date and Time Display",
        "content": "Overview and Key Concepts The Date and Time Display chart can display the current model time using a variety of different formats. The displayed time will be updated as the model runs. Properties Panels The Date and Time Display uses the following properties panels: Options"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Charts/ModelDocumentation/ModelDocumentation.html",
        "title": "Model Documentation",
        "content": "Overview and Key Concepts The model documentation chart gives you a blank canvas for creating text, charts and other HTML elements in the dashboard. You can even write FlexScript that will be executed when the chart is drawn. Properties Panels The model documentation chart uses the following properties panels: Options"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ChartTemplates/ChartTemplates.html",
        "title": "Chart Templates",
        "content": "Overview and Key Concepts A Chart Template provides a quick and easy way to make a Dashboard chart. You can use a Chart Template to display your model's statistics in an intuitive way. The following charts are just a few of the available templates. Chart Templates use other FlexSim tools internally to display data on a chart. Each one uses a Statistics Collector to gather data. Depending on what data is being displayed, a template may also use two Groups , a General Process Flow , and a Calculated Table . The Chart Template is basically a shortcut for creating and configuring all of these tools together to create a chart. The Properties window for each template allows you to configure the chart name, the template options, and other visualization options. Installing a Chart Template Chart Templates can be installed. This means that the internal tools used by the template will be transferred to the toolbox. You can then modify any of those components freely. However, the simple interface for modifying the template will no longer be available. Composite Templates Many of the Chart Templates are composite templates. These templates allow you to define a set of objects and treat them as a single object for statistical purposes. For example, let's look at this simple model: Each of the objects is keeping statistics for itself. However, many key performance indicators (KPIs) deal with higher-level statistics. For example, a common KPI is the average time in system. We can get this statistic using the Composite Staytime template: This template needs a list of entrance and exit objects. It then measures the time items take to get from any entrance object to any exit object. In this case, we will measure how long it takes to get from any source to any sink, and report the resulting average, minimum, and maximum. The resulting chart looks like this: Composite templates can also be used to gather data about smaller systems within the model. For example, we could use the Composite WIP template to get the number of items in just the queues: The template then measures and displays how many objects are between the entrance and exit objects. Any time an object enters any entrance object, the WIP will increase. Any time an object exits any exit object, the WIP will decrease. Since the queues are both entry and exit objects, we are measuring the total WIP in all queues: You can create composite templates for WIP, Staytime, Throughput, and State statistics. Composite WIP and Staytime templates require you to specify Entrance and Exit objects. WIP templates count items between the Entrance and Exit objects, while Staytime templates measure the elapsed time between the Entrance and Exit objects. Throughput templates allow you to specify a set of objects, and then calculate the throughput of all those objects, as if they were a single object. State templates calculate the average time in each state for all of the objects specified. By Type Templates Many templates allow you to categorize items or tokens based on a label value, and then chart statistics from those categories. For example, if each flowitem has a Type label, you might want to know the time in system per Type. You can get this data using the Staytime By Type template: This template produces the following chart: Each By Type chart will visually speparate each category's data, as follows: Table and Bar charts make one row per category Time Plot and Histogram charts use one color per category On each By Type template, you will need to specify the following properties: Type Label - Specifies the name of the label used to categorize items. For WIP and Staytime templates, all items are assumed to have this label at all Entrance and Exit objects. For Throughput By Type templates, all items counted for throughput are assumed to have this label. Value Type - Specifies the data type of the categorization label. For numeric types (part types, sizes, etc.), choose Number. For text based values (most SKUs), choose Text. By Type charts can only categorize on Text or Number data. If the category label might be text, or might be number, then choose Text; numbers will be converted to text automatically. By Type Statistics for a Single Object All By Type templates are composite templates. Usually, composite templates are used to gather statistics across many objects. However, you can define a composite object that only consists of a single object, which may be useful for gathering By Type statistics from an object like a Queue or a Rack. Content Templates Content Templates can be used to graph the content or WIP (work-in-progress) of many individual objects, or a composite object. To calculate WIP, these templates simply use the Content statistic of the involved objects. Content templates are designed to work with 3D objects or with process flow activities. However, if the activities belong to an instanced (Fixed Resource/Task Executor) flow, tokens from all instances will contribute to the WIP statistic. Composite WIP templates listen to Entrance and Exit object events, and use those events to calculate the WIP between those objects. It is assumed that any item or token that flows through an Entrance object will later flow through an Exit object. The template will listen to OnEntry of the Entrance objects, and OnExit of the Exit objects. However, if a Source is specified as an Entrance object, then the template will listen to OnExit. Similarly, if a Sink is specified as an Exit object, then the template will listen to OnEntry. When an Entrance object event fires, WIP is incremented by one. When an Exit object event fires, and the item or token is matched to one that passed through before, the WIP is decremented. If the item or token is not matched, no change will occur. Output Templates Output Templates can be used to graph the Output of many individual objects, or a composite object. To calculate Output, these templates usually use the Output statistic of the involved objects. However, if an object is a Sink, then this template will use the Input statistic as Throughput for that object. Output Templates are designed to work with 3D objects or with process flow activites. However, if the activities belong to an instanced (Fixed Resource/Task Executor) flow, tokens from all instances will contribute to the Output statistic. Composite Output Templates listen to the OnExit of the specified objects (unless that object is a Sink, in which case it will listen to the OnEntry of that object). Each time one of those events fire, the template will increment the throughput. Staytime Templates Staytime Templates can be used to graph the Staytime values of many individual objects, or a composite object. To calculate Staytime, these templates use the Staytime statistic of the involved objects. Staytime templates are designed to work with 3D objects or with process flow activites. However, if the activities belong to an instanced (Fixed Resource/Task Executor) flow, tokens from all instances will contribute to the Staytime statistic. Composite Staytime Templates listen to the OnEntry of Entrance objects and the OnExit of Exit objects. As with Composite WIP templates, those events can be adjusted to correctly handle Source and Sink-like objects. When an Entry event fires, the template will cache of the item or token, along with the current time. When that item or token leaves (firing an Exit event), the template will record the duration between Entry and Exit for that item. The State Templates also include an Item Trace Gantt chart. For more information, see Item Trace Gantt . State Templates State Templates allow you to make charts that display state information for a set of objects. To calculate the values for State, these templates use the State information stored by each object. These templates were designed to work only with Fixed Resources and Task Executors. Composite State Templates simply average the state data collected from the specified objects. The State Templates also include a State Gantt chart. For more information, see State Gantt . Zone Templates Zone Templates allow you to chart statistics from a specific Process Flow Zone in your model. When you use a Zone Template, you simply specify a Zone, and also a statistic from that Zone to chart. All Zone statistics can be charted using one of the Zone Templates. This includes Subset statistics Subset Calculation statistics Unmatched (not in any subset) statistics Partition statistics Partition calculation statistics However, if you choose a statistic derived from a Partition, you must use a Zone Template with the word \"Partition\" in its name. Zone Templates are designed to work with General flows, as well as Fixed Resource and Task Executor flows. If you use a Zone Template to chart an FR or TE flow, the chart will include data from all instances. Milestone Templates Milestone Templates allow you to chart statistics gathered by a Milestone Collector. When you use a Milestone Template, you will need to specify which Milestone Collector the chart should use. For more information about Milestone Collectors, see the Milestone Collector reference topic. Intervals Most Milestone Templates require you to specify which Intervals to record. Intervals have three components: a name a start Milestone an end Milestone For each interval you specify, the chart will measure how much time elapsed between acheiving the start Milestone and the end Milestone. The following image shows the interface for specifying intervals: This interface as the following properties: Add Interval - Adds an Interval to the list. Interval Name - Specifies the name of the interval. Start Milestone - Specifies the Start Milestone. End Milestone - Specifies the End Milestone. The Milestone Sankey template does not require you to specify intervals. It will automaically include all intervals that occur during the model run. Travel Templates Travel Templates allow you to make charts that display travel distance information for a set of objects. These templates were designed to work only with Task Executors. Label Templates Label Templates allow you to make charts that display the value of specified object labels. Tracked Variable Templates Tracked Variable Templates allow you to make charts that display the values of specified Tracked Variable objects. Process Flow Activity Statistics Templates Process Flow Activity Statistics Templates allow you to make charts that display statistics of specified process flow activities. Adding Objects to Templates Most templates allow you to specify a list of objects. The interface for specifying the list is uniform across all templates: The following table explains the buttons on this tool: Button Explanation Opens a menu allowing you to select 3D objects, add the selected objects to the list, or set the list to the model's selected objects. Click to enter \"Sample\" mode then select an object, activity, or a group to add it to the list. Removes the selected(s) object from the list. Reorder members of the list. Centers the 3D view on the selected object. Selects (red box) the selected object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/ContentTable/ContentTable.html",
        "title": "Content Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns, Object and WIP. The object column shows the path to the included objects, relative to the model. The WIP column shows the current content (or WIP) of each of the objects. For more information about Content templates, see Content Templates . Properties Panels The Content Table Chart uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/ContentBar/ContentBar.html",
        "title": "Content Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each specified object is represented by a bar. The length of the bar is determined by the current content (or WIP) of each object. For more information about Content templates, see Content Templates . Properties Panels The Content Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/ContentVsTime/ContentVsTime.html",
        "title": "Content vs Time Template",
        "content": "Overview and Key Concepts This template creates a stair-step chart. Each specified object is represented by a different color, which shows current content (or WIP) over time. For more information about Content templates, see Content Templates . Properties Panels The Content vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/AverageContentTable/AverageContentTable.html",
        "title": "Average Content Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns, Object and WIP. The object column shows the path to the included objects, relative to the model. The WIP column shows the time-weighted average content (or WIP) of each of the objects. For more information about Content templates, see Content Templates . Properties Panels The Bar Chart uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/AverageContentBar/AverageContentBar.html",
        "title": "Average Content Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each specified object is represented by a bar. The length of the bar is determined by the time-weighted average content (or WIP) of each object. For more information about Content templates, see Content Templates . Properties Panels The Average Content Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/CompositeWIPTable/CompositeWIPTable.html",
        "title": "Composite WIP Table Template",
        "content": "Overview and Key Concepts This composite template creates a table chart with one column that shows the Composite WIP, or the number of items between the entry and exit objects. For more information about Composite WIP templates, see Content Templates . Properties Panels The Composite WIP Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/CompositeWIPBar/CompositeWIPBar.html",
        "title": "Composite WIP Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart. The length of the bar is determined by the number of items (or WIP) between the specified objects. For more information about composite WIP templates, see Content Templates . Properties Panels The Composite WIP Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/CompositeWIPVsTime/CompositeWIPVsTime.html",
        "title": "Composite WIP vs Time Template",
        "content": "Overview and Key Concepts This composite template creates a stair-step chart. The line shows the number of items between the specified objects, over time. For more information about composite WIP templates, see Content Templates . Properties Panels The Composite WIP vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/WIPByTypeTable/WIPByTypeTable.html",
        "title": "WIP by Type Table Template",
        "content": "Overview and Key Concepts This composite template creates a table chart with two columns. The first column shows the Type value, and the second shows the Composite WIP, or the number of items between the entry and exit objects of each type. For more information about Composite WIP templates, see Content Templates . Properties Panels The WIP by Type Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/WIPByTypeBar/WIPByTypeBar.html",
        "title": "WIP by Type Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart. The chart has one bar per type. The length of the bar is determined by the number of items (or WIP) between the specified objects of each type. For more information about composite WIP templates, see Content Templates . Properties Panels The WIP by Type Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ContentTemplates/WIPByTypeVsTime/WIPByTypeVsTime.html",
        "title": "Composite WIP vs Time Template",
        "content": "Overview and Key Concepts This composite template creates a stair-step chart. There is one color per Type value. The line shows the number of items between the specified objects for that type, over time. For more information about composite WIP templates, see Content Templates . Properties Panels The WIP by Type vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputTable/OutputTable.html",
        "title": "Output Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns. The first column displays the path to the included objects, and the second displays the throughput (usually output) of that object. For more information about Output templates, see Output Templates . Properties Panels The Output Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputBar/OutputBar.html",
        "title": "Output Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. There is one bar for each included object. The length of the bar is determined by the current throughput (usually output) of the object. For more information about Output templates, see Output Templates . Properties Panels The Output Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputPerHourTable/OutputPerHourTable.html",
        "title": "Output per Hour Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns. The first column displays the path to the included objects, and the second displays the throughput (usually output) of that object, divided by the total number of hours the model has run so far. For more information about Output templates, see Output Templates . Properties Panels The Output per Hour Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputPerHourBar/OutputPerHourBar.html",
        "title": "Output per Hour Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. There is one bar for each included object. The length of the bar is determined by the current throughput (usually output) of the object, divided by the number of hours in model time. For more information about Output templates, see Output Templates . Properties Panels The Output per Hour Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputPerHourVsTime/OutputPerHourVsTime.html",
        "title": "Output per Hour vs Time Template",
        "content": "Overview and Key Concepts This template creates a line graph. Each included object is displayed with its own color. The line shows the throughput (usually output) of each object in the previous hour. For more information about Output templates, see Output Templates . Properties Panels The Output per Hour vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/CompositeOutputTable/CompositeOutputTable.html",
        "title": "Composite Output Table Template",
        "content": "Overview and Key Concepts This composite template creates a table chart with a column that displays the combined throughput (usually output) of all included objects. For more information about composite Output templates, see Output Templates . Properties Panels The Composite Output Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/CompositeOutputBar/CompositeOutputBar.html",
        "title": "Composite Output Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. There is one bar, and its length is determined by the total throughput (usually output) of all included objects. For more information about Output templates, see Output Templates . Properties Panels The Composite Output Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/CompositeOutputPerHourTable/CompositeOutputPerHourTable.html",
        "title": "Composite Output per Hour Table Template",
        "content": "Overview and Key Concepts This composite template creates a table chart with a single column. The value of that column is the total throughput of all involved objects, divided by the number of hours since the model start. For more information about Output templates, see Output Templates . Properties Panels The Composite Output per Hour Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/CompositeOutputPerHourBar/CompositeOutputPerHourBar.html",
        "title": "Composite Output per Hour Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart with a single bar. The length of that bar is the determined by the total throughput of all involved objects, divided by the number of hours since the model start. For more information about Output templates, see Output Templates . Properties Panels The Composite Output per Hour Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/CompositeOutputPerHourVsTime/CompositeOutputPerHourVsTime.html",
        "title": "Composite Output per Hour vs Time Template",
        "content": "Overview and Key Concepts This composite template creates a time plot with a single colored line. The line shows the throughput from the previous hour, every hour. For more information about Output templates, see Output Templates . Properties Panels The Composite Output per Hour vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputByTypeTable/OutputByTypeTable.html",
        "title": "Output by Type Table Template",
        "content": "Overview and Key Concepts This composite template creates a table chart with two columns. The first column shows the type value. The second column shows the throughput for each type. For more information about composite Output templates, see Output Templates . Properties Panels The Output by Type Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputByTypeBar/OutputByTypeBar.html",
        "title": "Output by Type Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart. Each unique type is represented by a bar. The length of that bar is determined by the total throughput of that type. For more information about composite Output templates, see Output Templates . Properties Panels The Output by Type Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputPerHourByTypeTable/OutputPerHourByTypeTable.html",
        "title": "Output per Hour by Type Table Template",
        "content": "Overview and Key Concepts This composite template creates a table chart with two columns. The first column shows the type value. The second column shows the average throughput for each type per hour. For more information about composite Output templates, see Output Templates . Properties Panels The Output per Hour by Type Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputPerHourByTypeBar/OutputPerHourByTypeBar.html",
        "title": "Output per Hour by Type Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart. Each unique type is represented by a bar. The length of that bar is determined by the average throughput of that type per hour. For more information about composite Output templates, see Output Templates . Properties Panels The Output per Hour by Type Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/OutputTemplates/OutputPerHourByTypeVsTime/OutputPerHourByTypeVsTime.html",
        "title": "Output per Hour by Type vs Time Template",
        "content": "Overview and Key Concepts This composite template creates a time plot, with one colored line per type value. The line shows the throughput for that type from the previous hour, every hour. For more information about Output templates, see Output Templates . Properties Panels The Output per Hour by Type vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeTable/StaytimeTable.html",
        "title": "Staytime Table",
        "content": "Overview and Key Concepts This template creates a chart with up to four columns. The first column shows the object. The other three columns show the average, minimum, and maximum staytime for the object. For more information about Staytime templates, see Staytime Templates . Properties Panels The Staytime Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeBar/StaytimeBar.html",
        "title": "Staytime Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each object included in the template is represented by a bar. The length of that bar shows the Average Staytime for that object. For more information about Staytime templates, see Staytime Templates . Properties Panels The Staytime Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeVsTime/StaytimeVsTime.html",
        "title": "Staytime vs Time Template",
        "content": "Overview and Key Concepts This template creates a time plot. Each point on the plot corresponds with an item exiting one of the included objects. The horizontal position indicates when the item exited, and the vertical position indicates how long the object had stayed in the object. Each object is represented by a different color. For more information about Staytime templates, see Staytime Templates . Properties Panels The Staytime vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeHistogram/StaytimeHistogram.html",
        "title": "Staytime Histogram Template",
        "content": "Overview and Key Concepts This template creates a histogram. Each bar on the histogram represents a range of staytime values. The height of each bar is determined by the number of staytime values that fit within that range. There is one set of bars per object. For more information about Staytime templates, see Staytime Templates . Properties Panels The Staytime Histogram template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/CompositeStaytimeTable/CompositeStaytimeTable.html",
        "title": "Composite Staytime Table",
        "content": "Overview and Key Concepts This composite template creates a chart with up to three columns. These columns show the average, minimum, and maximum staytime for the composite object. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Composite Staytime Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/CompositeStaytimeBar/CompositeStaytimeBar.html",
        "title": "Composite Staytime Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart. There is one bar, and its length is determined by the total staytime of all included objects. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Composite Staytime Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/CompositeStaytimePerHourVsTime/CompositeStaytimePerHourVsTime.html",
        "title": "Composite Staytime by Hour vs Time",
        "content": "Overview and Key Concepts This composite template creates a line graph. The line shows the average staytime for the previous hour, every hour. For more information about Staytime templates, see Staytime Templates . Properties Panels The Composite Staytime by Hour vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/CompositeStaytimeVsTime/CompositeStaytimeVsTime.html",
        "title": "Composite Staytime vs Time Template",
        "content": "Overview and Key Concepts This template creates a time plot. Each point on the plot corresponds with an item exiting the composite object. The horizontal position indicates when the item exited, and the vertical position indicates how long the object had stayed in the composite object. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Composite Staytime vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/CompositeStaytimeHistogram/CompositeStaytimeHistogram.html",
        "title": "Composite Staytime Histogram",
        "content": "Overview and Key Concepts This composite template creates a histogram. Each bar on the histogram represents a range of staytime values. The height of each bar is determined by the number of staytime values that fit within that range. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Composite Staytime Histogram template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeByTypeTable/StaytimeByTypeTable.html",
        "title": "Staytime by Type Table Template",
        "content": "Overview and Key Concepts This composite template creates a table. The table has one row per Type value, and four columns. The first column shows the Type value. The second, third and fourth columns show the Average, Minimum, and Maximum Staytime values, respectively. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Staytime by Type Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeByTypeBar/StaytimeByTypeBar.html",
        "title": "Staytime by Type Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each unique Type value included in the template is represented by a bar. The length of that bar shows the Average Staytime for items of that type. For more information about Staytime templates, see Staytime Templates . Properties Panels The Staytime by Type Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimePerHourByTypeVsTime/StaytimePerHourByTypeVsTime.html",
        "title": "Staytime by Hour by Type vs Time",
        "content": "Overview and Key Concepts This composite template creates a line graph. The line shows the average staytime for the previous hour, every hour, for each unique type value. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Staytime by Hour by Type vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeByTypeVsTime/StaytimeByTypeVsTime.html",
        "title": "Staytime by Type vs Time Template",
        "content": "Overview and Key Concepts This template creates a time plot. Each point on the plot represents an item exiting the composite object. The color of each point represents the Type value of the exiting item. The position of the point is determined by when the item exited, and how long the item was within the composite object. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Staytime by Type vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/StaytimeByTypeHistogram/StaytimeByTypeHistogram.html",
        "title": "Staytime by Type Histogram Template",
        "content": "Overview and Key Concepts This composite template creates a histogram. Each bar on the histogram represents a range of staytime values. The height of each bar is determined by the number of staytime values that fit within that range. There is one set of bars for each unique Type value. For more information about composite Staytime templates, see Staytime Templates . Properties Panels The Staytime by Type Histogram template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StaytimeTemplates/ItemTraceGantt/ItemTraceGantt.html",
        "title": "Item Trace Gantt",
        "content": "Overview and Key Concepts This template creates a Gantt chart. To use this chart, you must specify objects at which to begin tracking items. If you choose a Source, tracking will begin at the OnExit of the Source. If you specify any other 3D object, tracking will begin at the OnEntry of the object. Once an item is tracked, a row for that item is created in the Gantt chart. As the item is transferred from object to object, those changes will be reflected in the Gantt chart, until it arrives at a Sink, or at a specified Exit object. Note that if the item is placed in a container, the chart will show the changes for that container also. Properties Panels The Item Trace Gantt template uses the following properties panels: Options Settings Text Colors Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StateTemplates/StatePie/StatePie.html",
        "title": "State Pie Template",
        "content": "Overview and Key Concepts This chart template creates a pie chart, and calculates utilization based on each object's time in various states. Each segment of the pie chart represents the proportion of time spent in one of the object's states. Properties Panels The State Pie template uses the following properties panels: Options Settings Text Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StateTemplates/CompositeStatePie/CompositeStatePie.html",
        "title": "Composite State Pie Template",
        "content": "Overview and Key Concepts This composite template creates a pie chart, and calculates utilization based on each object's time in various states. Each segment shows the average time of all included objects in a state. The utilization value shown is the average utilization. Properties Panels The Composite State Pie template uses the following properties panels: Options Settings Text Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StateTemplates/StateBar/StateBar.html",
        "title": "State Bar Template",
        "content": "Overview and Key Concepts This chart template creates a bar chart, and calculates utilization based on each object's time in various states. Each segment of the bar chart represents the proportion of time spent in one of the object's states. There is one set of bars per object. Properties Panels The State Bar template uses the following properties panels: Options Settings Text Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StateTemplates/CompositeStateBar/CompositeStateBar.html",
        "title": "Composite State Bar Template",
        "content": "Overview and Key Concepts This composite template creates a bar chart, and calculates utilization based on each object's time in various states. Each segment of the bar chart represents the average proportion of time spent in one of the object's states. The utilization shown is the average utilization of all objects. Properties Panels The Composite State Bar template uses the following properties panels: Options Settings Text Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StateTemplates/UtilizationVsTime/UtilizationVsTime.html",
        "title": "Utilization By Hour Template",
        "content": "Overview and Key Concepts This chart template creates a time plot. At the end of each hour (interval), it calculates the percentage of time in which the object(s) spent utilized and plots the result as a percentage. Each value is plotted consecutively throughout the run time of the model as a stair step by default. Properties Panels The Utilization By Hour template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/StateTemplates/StateGantt/StateGantt.html",
        "title": "State Gantt Template",
        "content": "Overview and Key Concepts This template creates a Gantt chart. Each included object is assigned a row. The colored segments on each row represent a state, and the object's time spent in that state. Properties Panels The State Gantt template uses the following properties panels: Options Settings Text Colors Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ZoneTemplates/ZoneStatisticsTable/ZoneStatisticsTable.html",
        "title": "Zone Statistics Table Template",
        "content": "Overview and Key Concepts This template is a Zone template. It assumes that you already have a Zone in a process flow in your model, and that you want to create a chart based on statistics from that Zone, not including partition statistics. This template creates a table chart. The table shows the current, minimum, maximum, and average content for the specified Zone. If you choose a local Zone from an instanced Process Flow, an additional column will display the instance, there will be one row per attached instance. Properties Panels The Zone Statistics Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ZoneTemplates/ZonePartitionStatisticsTable/ZonePartitionStatisticsTable.html",
        "title": "Zone Partition Statistics Table Template",
        "content": "Overview and Key Concepts This template is a Zone template. It assumes that you already have a Zone in a process flow in your model, and that you want to create a chart based on partition statistics from that Zone. This template creates a table chart. The table shows the current, minimum, maximum, and average content for each partition of the specified Zone. If you choose a local Zone from an instanced Process Flow, there will be one row per partition per instance. Properties Panels The Zone Partition Statistics Table template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ZoneTemplates/ZoneStatisticsBar/ZoneStatisticsBar.html",
        "title": "Zone Statistics Bar Template",
        "content": "Overview and Key Concepts This template is a Zone template. It assumes that you already have a Zone in a process flow in your model, and that you want to create a chart based on statistics from that Zone, not including partition statistics. This template creates a bar chart. Each bar color shows the current, minimum, maximum, and average content for the specified Zone. If you choose a local Zone from an instanced Process Flow, there will be one set of bars per instance. Properties Panels The Zone Statistics Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ZoneTemplates/ZonePartitionStatisticsBar/ZonePartitionStatisticsBar.html",
        "title": "Zone Partition Statistics Bar Template",
        "content": "Overview and Key Concepts This template is a Zone template. It assumes that you already have a Zone in a process flow in your model, and that you want to create a chart based on partition statistics from that Zone. This template creates a bar chart. The bar segments show the current, minimum, maximum, and average content for each partition of the specified Zone. If you choose a local Zone from an instanced Process Flow, there will be one set of bars per partition per instance. Properties Panels The Zone Partition Statistics Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ZoneTemplates/ZoneStatisticsVsTime/ZoneStatisticsVsTime.html",
        "title": "Zone Statistics vs Time Template",
        "content": "Overview and Key Concepts This template is a Zone template. It assumes that you already have a Zone in a process flow in your model, and that you want to create a chart based on statistics from that Zone, not including partition statistics. This template creates a time plot. The time plot will show the value of the chosen statistic through time. If you choose a local Zone of an instanced flow, then each instance object will appear as its own colored line on the chart. Properties Panels The Zone Statistics vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ZoneTemplates/ZonePartitionStatisticsVsTime/ZonePartitionStatisticsVsTime.html",
        "title": "Zone Partition Statistics vs Time Template",
        "content": "Overview and Key Concepts This template is a Zone template. It assumes that you already have a Zone in a process flow in your model, and that you want to create a chart based on partition statistics from that Zone. This template creates a time plot. The time plot will show the value of the chosen partition statistic through time. Each partition will be represented by a different colored line. If you choose a local Zone of an instanced flow, then there will be one line per partition per instance. Properties Panels The Zone Partition Statistics vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/MilestoneTemplates/IntervalHistogram/IntervalHistogram.html",
        "title": "Interval Histogram Template",
        "content": "Overview and Key Concepts This template is a Milestone Template. It assumes that you already have a Milestone Collector in your model, and that you want to create a chart based on data from that collector. This template creates a Histogram, which shows the distribution of Interval times for each specified Interval. Different intervals are represented with different colors. Properties Panels The Interval Histogram template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/MilestoneTemplates/IntervalByTypeHistogram/IntervalByTypeHistogram.html",
        "title": "Interval By Type Histogram Template",
        "content": "Overview and Key Concepts This template is a Milestone Template. It assumes that you already have a Milestone Collector in your model, and that you want to create a chart based on data from that collector. This template creates a Histogram, which shows the distribution of Interval times for each specified Interval, for each unique type. Each color represents a combination of Interval and Type. Properties Panels The Interval By Type Histogram template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/MilestoneTemplates/IntervalBoxPlot/IntervalBoxPlot.html",
        "title": "Interval Box Plot Template",
        "content": "Overview and Key Concepts This template is a Milestone Template. It assumes that you already have a Milestone Collector in your model, and that you want to create a chart based on data from that collector. This template creates a Box Plot, which shows the distribution and quartiles of Interval times for each specified Interval. Properties Panels The Interval Box Plot template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/MilestoneTemplates/IntervalByTypeBoxPlot/IntervalByTypeBoxPlot.html",
        "title": "Interval By Type Box Plot Template",
        "content": "Overview and Key Concepts This template is a Milestone Template. It assumes that you already have a Milestone Collector in your model, and that you want to create a chart based on data from that collector. This template creates a Box Plot, which shows the distribution and quartiles of Interval times for each specified Interval, by type. The chart has one section per Interval, and one color per type. Properties Panels The Interval By Type Box Plot template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/MilestoneTemplates/MilestoneSankey/MilestoneSankey.html",
        "title": "Milestone Sankey Template",
        "content": "Overview and Key Concepts This template is a Milestone Template. It assumes that you already have a Milestone Collector in your model, and that you want to create a chart based on data from that collector. This template creates a Sankey Diagram, which shows how items flow from one Milestone to the next. Thicker paths indicate that more items flow between two milestones. Properties Panels The Milestone Sankey template uses the following properties panels: Options Settings Text Colors Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TravelDistanceTemplates/TravelDistanceBar/TravelDistanceBar.html",
        "title": "Travel Distance Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each specified object is represented by a bar. The length of the bar is determined by the distance traveled by each object. For more information about Travel templates, see Travel Templates . Properties Panels This template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TravelDistanceTemplates/TravelDistanceTable/TravelDistanceTable.html",
        "title": "Travel Distance Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns. The first column displays the path to the included objects, and the second displays the distance traveled of that object. For more information about Travel templates, see Travel Templates . Properties Panels This template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TravelDistanceTemplates/TravelDistanceByHour/TravelDistanceByHour.html",
        "title": "Travel Distance per Hour by Type vs Time Template",
        "content": "Overview and Key Concepts This template creates a time plot, with one colored line per object. The line shows the distance traveled for that object from the previous hour, every hour. For more information about Travel templates, see Travel Templates . Properties Panels This template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TravelDistanceTemplates/TravelDistancePerHourBar/TravelDistancePerHourBar.html",
        "title": "Travel Distance per Hour Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. There is one bar for each included object. The length of the bar is determined by the current distance traveled of the object, divided by the number of hours in model time. For more information about Travel templates, see Travel Templates . Properties Panels This template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TravelDistanceTemplates/TravelDistancePerHourTable/TravelDistancePerHourTable.html",
        "title": "Travel Distance per Hour Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns. The first column displays the path to the included objects, and the second displays the distance traveled of that object, divided by the total number of hours the model has run so far. For more information about Travel templates, see Travel Templates . Properties Panels This template uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/LabelTemplates/LabelBar/LabelBar.html",
        "title": "Label Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each specified label is represented by a bar. The length of the bar is determined by the current value of the label. For more information about Label templates, see Label Templates . Properties Panels The Label Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/LabelTemplates/LabelTable/LabelTable.html",
        "title": "Label Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with two columns, Name and Value. The name column shows the name of the included labels. The Value column shows the current value each of the labels. For more information about Label templates, see Label Templates . Properties Panels The Label Table Chart uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/LabelTemplates/LabelVsTime/LabelVsTime.html",
        "title": "Label vs Time Template",
        "content": "Overview and Key Concepts This template creates a stair-step chart. Each specified label is represented by a different color, which shows current value over time. For more information about Label templates, see Label Templates . Properties Panels The Label vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TrackedVariableTemplates/TrackedVariableBar/TrackedVariableBar.html",
        "title": "Tracked Variable Bar Template",
        "content": "Overview and Key Concepts This template creates a bar chart. Each specified tracked variable is represented by a bar group. The length of the bar is determined by the value of the statistic for that tracked variable. For more information about Tracked Variable templates, see Tracked Variable Templates . Properties Panels The Tracked Variable Bar template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TrackedVariableTemplates/TrackedVariableHistogram/TrackedVariableHistogram.html",
        "title": "Tracked Variable Template",
        "content": "Overview and Key Concepts This template creates a histogram. Each bar on the histogram represents a range of tracked variable values. The height of each bar is determined by the number of tracked variable values that fit within that range. There is one set of bars per tracked variable. For more information about Tracked Variable templates, see Tracked Variable Templates . Properties Panels The Tracked Variable template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TrackedVariableTemplates/TrackedVariableTable/TrackedVariableTable.html",
        "title": "Tracked Variable Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with the name of the tracked variable and optional columns for displaying the Current, Average, Minimum, and Maximum values. For more information about Tracked Variable templates, see Tracked Variable Templates . Properties Panels The Tracked Variable Table Chart uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/TrackedVariableTemplates/TrackedVariableVsTime/TrackedVariableVsTime.html",
        "title": "Tracked Variable vs Time Template",
        "content": "Overview and Key Concepts This template creates a stair-step chart. Each specified tracked variable is represented by a different color, which shows the current value of the tracked variable over time. For more information about Tracked Variable templates, see Tracked Variable Templates . Properties Panels The Tracked Variable vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ProcessFlowActivityStatsTemplates/ProcessFlowActivityStatsTable/ProcessFlowActivityStatsTable.html",
        "title": "Process Flow Activity Statistics Table Template",
        "content": "Overview and Key Concepts This template creates a table chart with several columns that show the name, instance, statistic, and optionally the current, minimum, maximum, and average value of the statistic. For more information about Process Flow Activity Statistics templates, see Process Flow Activity Statistics Templates . Properties Panels The Process Flow Activity Statistics Table Chart uses the following properties panels: Options Text Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/ChartTemplates/ProcessFlowActivityStatsTemplates/ProcessFlowActivityStatsVsTime/ProcessFlowActivityStatsVsTime.html",
        "title": "Process Flow Activity Statistics vs Time Template",
        "content": "Overview and Key Concepts This template creates a stair-step chart. Each specified activity statistic is represented by a different color, which shows the current value over time. For more information about Process Flow Activity Statistics templates, see Process Flow Activity Statistics Templates . Properties Panels The Process Flow Activity Statistics vs Time template uses the following properties panels: Options Settings Text Colors Sorting Advanced"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/Dashboard/Widgets/Widgets.html",
        "title": "Dashboard Widgets",
        "content": "Overview and Key Concepts Dashboard widgets allow you to view and control parts of your model through a graphical interface. You can create input fields, buttons, tables and other input widgets. Properties Panels Dashboard widgets use the following properties panel: Dashboard Control Edit (Edit field widgets) Combobox Options (Combobox and Listbox widgets) Spinner (Spinner widgets) Radio Button (Radio Button widgets) Tracker (Tracker widgets)"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/WritingLogic/WritingLogic.html",
        "title": "Writing Logic in FlexSim",
        "content": "Where to Get Help Whenever you need help with what commands to use and how to use them, you can refer to the Commands documentation , which is accessible through FlexSim's Help menu. Refer to the FlexScript Class Reference for information about FlexScript classes. FlexScript and C++ General Rules Here are some general rules you will need to know when creating your own logic. Language is case sensitive (A is not the same as a) No specific format is required (free use of spaces, tabs and line returns is encouraged) Text strings are usually entered between quotes. \"mytext\" Parentheses follow a function call and commas separate the arguments of the function. moveobject(object1,object2); The end of a line or function call will always end with a semi-colon Parentheses can also be used freely to make associations in your math and logic statements. Curly braces are used to define a block of statements. To comment out the rest of a line use // To comment out blocks of text use /* text */ Don't use spaces or special characters in name definitions (_ is ok). Named variables and explicit values can be interchanged in writing expressions. Variable Types FlexSim uses various variable types. Some of the more common are listed here. Refer to the FlexScript Class Reference for the complete list of FlexScript classes. Classes Type Description int integer number type double double precision floating point number type string text string treenode reference to a FlexSim node Variant a number, string, treenode or array Array a collection of Variants Object treenode with object data Color rgba components of a color Vec3 xyz components of a vector Table a table of elements List dynamic list of things used for synchronizing tasks and logic var type inferred variable For more information on how the treenode (or FlexSim node) type works, refer to the FlexSim tree structure . Declaring and Setting Variables The following are some examples of how to declare and set variables. int index = 1; double weight = 175.8; string category = \"groceries\"; treenode nextObj = Model.find(\"Processor1\"); Variant cellValue = table[2][3]; var value = 3; Constructing Class Objects The following are examples of how to use constructors. Color myColor = Color(1, 0, 0); // Makes a red color object.location = Vec3(0, 0, 0); // Sets the object's location to the origin Math Operations The following list show different math operations that can be performed on values. Operation Floating Point Example (=solution) Integer Example (=solution) + 1.6+4.2 (=5.8) 2+3 (=5) - 5.8-4.2 (=1.6) 5-2 (=3) * 1.2 * 2.4 (=2.88) 3*4 (=12) / 6.0/4.0 (=1.5) 20/7 (=2) % (integer mod) 34%7(=6) Math.sqrt() Math.sqrt(5.3) (=2.3) Math.pow() Math.pow(3.0,2.2) (=11.2) Math.pow(3,2) (=9) Math.round() Math.round(5.6) (=6) Math.frac() Math.frac(5.236) (=0.236) Math.fabs() Math.fabs(-2.3) (=2.3) Math.fmod() (floating point mod) Math.fmod(5.3,2) (=1.3) A Few Cautions About Operations Be aware that by performing operations on floating point numbers, some precision may be lost. Be careful in using these operations while mixing integer types with floating point types, or with using just integer types. For example, the / operator will return an integer if both operators are integers. This may not be what you want to get out of the operation, in which case you will need to use floating point types instead of integer types. The number 5 as an integer type. If you want it to interpret the number as a floating point type, enter 5.0 instead of just 5. Comparing Variables The following table shows different operations for comparing two values or variables. Operation Example (solution) > (greater than) 1.7 > 1.7 (false) < (less than) -1.7 < 1.5 (true) >= (greater than or equal to) 45 >= 45 (true) <= (less than or equal to) 45 <= 32 (false) == (equal to) 45 == 45 (true) != (not equal to) 45 != 35 (true) string comparisons current.name == \"Processor5\" pointer comparisons (treenodes, Objects) current == Model.find(\"Processor5\") A Few Cautions About == The == operator can often cause problems if you are comparing two double precision floating point values, and one or both of those values have been calculated using math operations. When doing math operations, floating point values may lose some precision. Since the == operator will only return true if all 64 bits of each value are exactly the same, even a small precision loss will cause the == operator to return false. In such cases, you will want to instead verify that the two values are within a range of each other. For example: fabs(value1 - value2) < 0.000001, will return true if the two values are practically equal for all intents and purposes. Relating Variables The following table shows different operations for relating several comparisons. Operation Example && (logical AND) x>5 && y<10 || (logical OR) x==32 || y>45 ! (logical NOT) !(x==32 || y>45) Math.min() Math.min(x, y) Math.max() Math.max(x, y) Setting and Changing Variables The following tables show ways of setting and changing variables. Operation Example = x = x + 2; += x += 2; (same as x = x + 2) -= x -= 2; (same as x = x - 2) *= x *= 2; (same as x = x * 2) /= x /= 2; (same as x = x / 2) ++ x ++; (same as x = x + 1) -- x --; (same as x = x - 1) Executing Commands Executing a command in FlexSim is made of following parts. First type the command's name, followed by an open parenthesis. Then enter each parameter of the command, separating multiple parameters by commas. Each parameter can be a variable, an expression of variables, or even a command itself. Finish the command with a close parenthesis, and a semi-colon. For detailed information on the commands, their functionality and parameter lists, refer to the \"Commands\" documentation found through FlexSim's Help menu. Syntax commandname(parameter1,parameter2,parameter3...); Example getstat(current, \"Content\", STAT_CURRENT); Dot Syntax Classes like the treenode, Object and Variant (to name a few) allow you to call methods, as well as access properties, variables, attributes and labels (if applicable) using dot syntax. Syntax object.method(parameter1,parameter2,parameter3...); Example current.setLocation(1, 1, 1); treenode lastItem = current.last; treenode item3 = current.subnodes[3]; int quantity = current.quantity; //Accesses label named 'quantity' Control Flow FlexScript includes several control flow constructs. These are statements you can place in your code to control which of multiple possible paths should be taken in the execution of the code. Control flow statements allow for branching, looping, and even suspension and resumption of code execution. If Statement The if statement allows you to execute one piece of code if an expression is true, and another piece of code if it is false. The else portion of the construct is optional. It uses this construct: if (test expression) { code block } else { code block } For example: if (item.subnodes.length == 2) { item.color = Color.red; } else { item.color = Color.black; } The ?: Ternary Operator FlexScript supports an alernative syntax for an if-else construct which is used in many languages and is known as the ternary operator. The ternary operator can be very useful in FlexSim since it allows you to write an if-else contruct in a single line. The ternary operator uses the following syntax: condition ? value_if_true : value_if_false If the condition specified before the question mark is true, the value between the question mark and semicolon is returned. If the condition is false, the value after the semicolon is returned. The following two code snippets are equivalent: return time() > 1440 ? 10 : 20 if (time() > 1440) { return 10; } else { return 20; } While Loop The while loop will continue to loop through its code block until the test expression becomes false. It uses this construct: while (test expression) { code block } For example: while (current.subnodes.length > 2) { current.last.destroy(); } For Loop The for loop is like the while loop, except that it is used usually when you know exactly how many times to loop through the code block. The start expression is executed only once, to initialize the loop. The test expression is executed at the beginning of each loop and the loop will stop as soon as this expression is false, just like the while loop. The count expression is executed at the end of each loop, and typically increments some variable, signifying the end of one iteration. It uses this construct: for(start expression; test expression; increment expression) { code block } For example: for (int index = 1; index <= current.subnodes.length; index++) { current.subnodes[index].as(Object).color = Color.blue; } Switch Statement The switch statement allows you to choose one piece of code to execute out of several possibilities, depending on a variable to switch on. The switch variable must be an integer type. The example below sets the color of items of type 1 to yellow, type 5 to red, and all other types to green. It uses this construct: switch (switchvariable) { case casenum: { code block; break; } default: { code block; break; } } For example: switch (item.type) { case 1: { item.color = Color.yellow; break; } case 5: { item.color = Color.red; break; } default: { item.color = Color.green; break; } } Redirection Each of the flow constructs described can be redirected mid-execution with either a continue, break or return statement. The following explains how each of these statements work. Construct Examples continue; Only valid in For and While loops. Halts the current iteration of the loop and goes on to the next iteration in the loop. In a For loop the counter is incremented before continuing. break; Only valid in For, While and Switch statements. Breaks out of the current For, While or Switch block and continues with the line immediately following this block. Nested statements only break out of the current statement and continue on in the containing statement. return 0; Returns out of the current method entirely and continues with the line following the code that called this method. A value is required after the return statement because all FlexScript commands (picklists and triggers included) return a Variant type. Typing return; is not valid. Coroutines and the Await Statement FlexScript also supports coroutines using the await keyword. Coroutines allow a method or function to span simulated time. The most basic example of a coroutine is to await a simple delay time. print(\"time before delay: \", time()); await Delay.seconds(5); print(\"time after delay: \", time()); The above code prints the current time to the output console, then waits for 5 seconds (the coroutine is suspended for 5 simulated seconds), then prints the current time again, which will have increased by 5 simulated seconds. While the coroutine is suspended, all local variables are preserved. A FlexScript function becomes a coroutine if it contains a statement with the keyword await , with the following syntax: await someexpression; //or... typename result = await someexpression; //or... result = await someexpression; Some specific examples: await current.event(\"OnEntry\"); // wait for current's OnEntry event to fired Variant pulled = await List(\"List1\").pull(\"\", 1, 1, current); // pull a value from List1 and wait for the pull operation to complete await Delay.minutes(5); // suspend the coroutine for 5 simulated minutes The predicate of the await statement (the expression after the await keyword) must be awaitable , meaning the predicate's type has been specially configured so that you can await instances of that type. Only a few specific types are awaitable: Delay Event List.BackOrder List.PullResult List.PushResult List.Entry Variant (see Variant - Awaitable for more information) Coroutines allow you to model entire processes as a single code block. You can start the execution of a process, and suspend and resume the execution of the process in any number of ways. You can suspend its execution for a defined delay time, or until some requirements are met, such as waiting until you pull a value from a list, or waiting until an event is fired on an object. In combination, these different capabilities allow you incredible flexibility in defining your process. Coroutines vs. Process Flow It's important to note that Process Flow enables you to simulate almost any time-spanning process within a flow chart, giving you much more visual explanatory power than you would get looking at a large block of code. Indeed, FlexScript's coroutine features were added after Process Flow, and much of its design was intended to mirror some of the functionality you could do in Process Flow, albeit using code (wait for event, pull from list, delay, etc.). So if Process Flow can do what you need, we encourage you to use it. Process Flow models are easier to support and debug, and they improve communication with stakeholders regarding how a process works. Nevertheless, some users actually prefer implementing time-spanning processes through code. Additionally, there are some situations that can benefit from a code-based time-spanning approach. For example: When speed factors are paramount, a coroutine will generally run much faster than tokens moving from activity to activity. In some specific cases, implementing a process in Process Flow can be cumbersome, requiring a lot of activities, synchronization, etc. One specific example is a \"multi-pull\" process that tries to pull different requirements from different lists, and must wait until some minimum set of requirements are met. While this is certainly possible in process flow, it can require a lot of activities and synchronization, that might be easier to perform directly in code. Coroutines allow you to augment your process flow with customized activities. Specifically, the Custom Code will await the result of the code that is executed. This means if you implement the custom code as a coroutine (you use an await statement somewhere in the code), then the activity itself will not finish until the coroutine is finished. In some cases you may not want to be forced to create a whole new process flow just to perform some simple time-spanning operation. Maybe you have a trigger on an object that delays for a certain time before performing some simple operation. Here coroutines allow you to do that operation easily, without requiring a whole new process flow or a complicated delayed message mechanism. Coroutines make some standard picklist options easier to implement. For example, picklist options that pull from a list will generally await the result of the pull, potentially spanning some time period before the pull is fulfilled. Again, we encourage you to use Process Flow where it is suitable, specifically because of its visual explanatory power. Nevertheless, coroutines have specific advantages that can augment or provide alternatives to your use of Process Flow in simulating your customized processes. Optional Chaining FlexScript also supports a concept called optional chaining, using the ?. syntax. The need for this arises when there is a possibility of encountering null values in the evaluation of your code. If a given expression results in a null value, and you access a class member of the expression using dot syntax, FlexSim will throw an exception by default. treenode nullNode = 0; return nullNode.last; // exception Avoiding such exceptions can cause your code to balloon into lots of if statements. Alternately, you can use optional chaining to access class members. treenode nullNode = 0; return nullNode?.last; // returns null (no exception) If the owning object is null, then the ?.last accessor will simply give back null, instead of throwing an exception. It is called optional chaining because it allows you to chain multiple accessors together very easily without the need for if statement guards. The code will simply bail out and return null when it encounters a null pointer. treenode nullNode = 0; return nullNode?.first?.first?.first; // returns null (no exception)"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/BasicModelingFunctions/BasicModelingFunctions.html",
        "title": "Basic Modeling Functions",
        "content": "Current and Item The following expressions are used frequently throughout FlexScript: current - the current variable is a reference to the current resource object. It is often an access variable in pick lists. item - the item variable is a reference to the involved item for a trigger or function. It is often an access variable in pick lists. Referencing Objects The following table explains how to reference objects in FlexScript: Command Explanation Example node.first This returns a reference to the first ranked object/node inside of node current.first node.last This returns a reference to last ranked object/node inside of node current.last node.subnodes[ranknum] This returns a reference to the object at a given rank inside of node current.subnodes[3] object.inObjects[portnum] This returns a reference to the object connected to the input port number of object current.inObjects[1] object.outObjects[portnum] This returns a reference to the object connected to the output port number of object current.outObjects[i] object.centerObjects[portnum] This returns a reference to the object connected to the center port number of object current.centerObjects[1] node.next This returns a reference to the next ranked object of node item.next node.prev This returns a reference to the previous ranked object of node item.prev node.find(path) This returns the object found at path in the tree beginning from node current.find(\"Box1\") Object Attributes The following table explains object attributes commands in FlexScript: Command Explanation object.name This returns the name of the object object.name = newName; This sets the name of the object to newName object.color = Color.color This sets the color of the object (where color is red, green, blue, random(), etc.) object.color = Color(red, green, blue) This sets the color of the object to an rgb color setobjectshapeindex(object, indexnum) This sets the 3D shape of the object setobjecttextureindex(object, indexnum) This sets the 3D texture of the object Object Spatial Attributes The following table explains object spatial attribute commands in FlexScript: Command Explanation object.location.x object.location.y object.location.z Gets the x, y, and z locations of the object respectively object.setLocation(xnum, ynum, znum) This sets the x, y, and z location of the object object.size.x object.size.y object.size.z Gets the x, y, and z size of the object respectively object.setSize(xnum, ynum, znum) This sets the x, y, and z size of the object object.rotation.x object.rotation.y object.rotation.z Gets the x, y, and z rotation of the object respectively object.setRotation(xdeg, ydeg, zdeg) This sets the x, y, and z rotation of the object Object Statistics The following table explains object statistics commands in FlexScript: Command(parameter list) Explanation object.subnodes.length This returns the current content of the object object.stats.input This returns the input statistic of the object object.stats.output This returns the output statistic of the object obj.stats.state().value = statenum This sets the current state of the object obj.stats.state().value This returns the current state value of the object obj.stats.state().valueString This returns the current state of the object as a string object.rank This returns the rank of the object object.rank = ranknum This sets the rank of the object getentrytime(item) This returns the time the flow item entered the object it is currently in getcreationtime(item) This returns the time the flow item was created Object Labels The following table explains object label commands in FlexScript: Command(parameter list) Explanation object.labelName object.attrs.labels.subnodes[labelRank].value This returns the value of the object's label. object.labelName = value object.attrs.labels.subnodes[labelRank].value = value This sets the value of the object's label. object.labels[\"labelname\"] object.attrs.labels.subnodes[labelRank] This returns a reference to the label as a node. Often used if you have a label that is used as a table. Object Control The following table explains object control commands in FlexScript: Command(parameter list) Explanation obj.input.close() This closes the input of the object obj.input.open() This re-opens the input of the object obj.output.close() This closes the output of the object obj.input.open() This re-opens the output of the object obj.message(delayTime, fromobject, parameter1, parameter2, parameter3) This causes the message trigger of the object to fire, optionally after a certain delay time. object.stop(downstate) This tells the object to stop whatever its operation is and go into the given state object.resume() This allows the object to resume whatever its operation is obj.output.stop() This closes the output of the object, and accumulates stopoutput requests obj.output.resume() This opens the output of the object once all stopoutput requests have been resumed obj.input.stop() This closes the input of the object, and accumulates stopinput requests obj.input.resume() This opens the input of the object once all stopinput requests have been resumed insertcopy(originalobject, containerobject) This inserts a new copy of the object into the container moveobject(object, containerobject) This moves the object out of its current container into its new container Object Variables The following table explains object variable commands in FlexScript: command(parameter list) Explanation getvarnum(object, \"variablename\") This returns the number value of the variable with the given name setvarnum(object, \"variablename\", value) This sets the number value of the variable with the given name getvarstr(object, \"variablename\") This returns the string value of the variable with the given name setvarstr(object, \"variablename\", string) This sets the string value of the variable with the given name getvarnode(object, \"variablename\") This returns a reference to the variable with the given name as a node For more information about the Object class see the FlexScript Class Reference. Tables In order to get access to the set of table methods and properties, you'll need to create a Table variable. Table table = Table(\"GlobalTable1\"); //Global tables Table labelTable = current.labels[\"TableData\"]; //Label table The following methods and explanations assume you have a Table variable like the ones listed above. command Explanation table[row num/name][col num/name] This returns the value in the specified row and column of the table table[row num/name][col num/name] = value; This sets the value in the specified row and column of the table table.setSize(rows, columns) This sets the size of the table in rows and columns table.numRows This returns the number of rows in the table table.numCols This returns the number of columns in the table table.clear() Sets all number values in the table to 0 For more information about the Table class see the FlexScript Class Reference. Task Executer Control For more information on controlling task executers, refer to the task sequence reference. Prompts and Printouts The following table explains prompt and printout commands in FlexScript: Command(parameter list) Explanation print(var value) Prints variant values to the output console msg(\"title\", \"caption\") Opens a simple Yes, No, Cancel dialog userinput(targetnode, \"prompt\") Opens a dialog box where you can set the value of a node in the model string1 + string2 This returns the string concatenation of two strings Advanced Functions For more advanced functions and for a more complete set of command documentation, refer to the Command Summary and the FlexScript Class Reference."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/Debugging/Debugging.html",
        "title": "Debugging",
        "content": "Overview The following sections explain how to debug FlexScript. How It Works Within the FlexSim code editor, there is a margin on the left side of the line numbers. By clicking in the margin, you can add a breakpoint to that line of code. The breakpoint will appear as a in the margin. You can delete the breakpoint by clicking the . When a line of code with a breakpoint is executed, FlexSim will enter debug mode. While debugging, you will only be able to interact with certain areas of the program including the debugger tools, the tree window, output consoles and a limited number of other windows. The code window will change to give you tools for debugging. The debug() Command The debug() command can be placed in any flexscript code. It acts just like a breakpoint; it will pause the model and open the debug window when it is executed. However, it will pause the model even when breakpoint debugging is disabled. This command makes it possible to have conditional breakpoints. Controls It has the following controls: Next Line - The yellow arrow shows you what line will be executed next. By pushing the Next Line button, that line will be executed and the yellow arrow will move to the next line of code to be executed. Step Into - This button can be used when a line of code contains certain function calls. It allows you to follow the code execution into the function and proceed line by line. When the function is finished, the debugger will return to the code that called the function. The only functions you can follow in this way are nodefunction, executefsnode, and any custom user commands. Continue - This will cause the FlexScript execution to continue until it reaches another breakpoint. If the code currently being executed finishes, then it will leave debug mode. Stop Simulation Clock - This button will stop the model's simulation clock. This is particularly useful if the model is running quickly, as the Continue button may cause FlexSim to re-enter debug mode almost instantly when it continues. Breakpoints The Breakpoints window is available through the Debug menu. It is a treeview with checkboxes showing you what breakpoints have been added to code in the model. You can disable breakpoints by clicking the checkbox next to the line number where they are. You can disable all the breakpoints by unchecking the \"Enable Breakpoint Debugging\" box. Checking and unchecking these boxes will only affect whether a breakpoint is enabled or disabled, it will not actually delete the breakpoint. To delete a breakpoint, you can highlight it in this window and press the delete key or click on its in the code window. Disabled breakpoints will appear as a in the margin and will not cause the FlexScript execution to stop for debugging. You may right click on a breakpoint in the breakpoints window to explore the associated code. Local Variables This area shows you the current values of any locally defined variables. As you step through the code, these values will update immediately so you can see what is happening. Often, models may not behave correctly because variables in code are not what they are expected to be. This window allows you to see exactly what the variables are. Alternatively, you can mouse over variables in the Code Edit window to see their current value. About the Yellow Arrow Keep in mind, the yellow arrow is pointing to the next line to be executed, so if a new variable is being initialized, you will not be able to see its value until after that line has been executed. Watch Variables This area allows you to specify other variables or expressions that you want to see, such as global variables. By pushing the + button, you can increase the number of lines in the table. The - button will delete the row that was last clicked in the table. You can double-click on a gray area of the table to enter a variable or expression. Its value will be displayed to the right. This can help explain why certain conditional statements, such as used in \"if\" statements aren't behaving as expected. It also allows you to see global variables that otherwise are not visible on the Local Variables tab. Call Stack This area shows the current call stack, which is a function call history. The most recent call is always at the top of the list. In this case, the OnEntry function was called by the OnRecieve function, which was called by the OnTimerEvent function. You may right click on any line of the call stack to explore the associated code or node in the tree. Performance Profiler and Memory Profiler The Performance Profiler and Memory Profiler tools are also helpful for debugging. See Performance Profiler and Memory Profiler for more information about these tools. Event List and Event Log The Event List and Event Log tools are also helpful for debugging. See Event List and Event Log for more information about these tools. Process Flow The following sections explain how to debug Process Flow. How It Works Within the Process Flow view, there are breakpoint outlines on the left side of highlighted activities. By clicking on a breakpoint outline, you can add a breakpoint to that activity. The breakpoint will appear as a to the left of the activity. You can delete the breakpoint by clicking the while the activity is highlighted. When an activity with a breakpoint is executed, FlexSim will enter debug mode. While debugging, you will only be able to interact with certain areas of the program including the debugger tools, the tree window, output consoles and a limited number of other windows. The Process Flow view will change to give you controls for debugging. Controls It has the following controls: Step Any - The yellow arrow shows you what activity will be executed next. By pushing the Step Any button, that activity will be executed and the yellow arrow will move to the next token that moves. Step Token - By pushing the Step Token button, the yellow arrow will move with the current token to the next activty. Note that triggered breakpoints will interrupt this action. Continue - This will cause the ProcessFlow execution to continue until it reaches another breakpoint. Stop Simulation Clock - This button will stop the model's simulation clock. This is particularly useful if the model is running quickly, as the Continue button may cause FlexSim to re-enter debug mode almost instantly when it continues. Breakpoints The Breakpoints window shows Process Flow breakpoints in adition to the standard code breakpoints. You can disable breakpoints by clicking the checkbox next to the activity path. Disabled breakpoints will appear as a to the left of the activity and will not cause the ProcessFlow execution to stop for debugging. You may right click on a Process Flow breakpoint in the breakpoints window to display the associated activity and explore the breakpoint condition code. The breakpoint condition code can be used to specify what conditions should be met to stop at the breakpoint."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Basic/double.html",
        "title": "FlexScript Class - double",
        "content": "Description A number type that represents a wide, dynamic range of values by using a floating point."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Basic/int.html",
        "title": "FlexScript Class - int",
        "content": "Description A number type that holds a finite range of integers. Min Value = -2147483647 Max Value = 2147483647"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Basic/string.html",
        "title": "FlexScript Class - string",
        "content": "Description A class that represents a sequence of characters. Contains methods for examining, searching and replacing, and manipulating strings. Encoding and String Indexes Strings in FlexSim are encoded in UTF-8 format . This means that for simple ASCII strings, each character takes up a single byte (8-bits). However, non-ASCII characters may consist of up to 4 bytes. For example, the greek Σ character requires two bytes to encode in UTF-8. Since any character in a string may be made up of multiple bytes, it is non-trivial to access characters in the string by their character index. As such, FlexSim's string interface uses byte-based indexing for accessing the characters inside the string. In other words, all string methods that take or return indexes into the string ( charAt (), substr (), slice (), indexOf (), lastIndexOf (), search (), slice (), length , array [] operator), take and return byte indexes, not character indexes. Also, in FlexSim, all indexing is 1-based, such that the first byte in a string is accessed by index 1 (not index 0 like in many other programming languages). Take the string \"Σ=σ\" for example. While the = character is technically the second character and thus would be at \"character index\" 2, since the Σ character takes up two bytes, the = character is accessed with \"byte index\" 3. string(\"Σ=σ\").charAt(3) // returns \"=\" Note also that, given this rule, some command calls may give back the same results for different byte indexes because the same character takes up several bytes. string(\"Σ=σ\").charAt(1) // returns \"Σ\" string(\"Σ=σ\").charAt(2) // returns same \"Σ\" Usually this will not affect the way you manipulate strings, especially since there are many methods that do not involve accessing characters by their index, such as using the replace () and/or match () methods. If you do need to manually access characters in a string, there are several methods of ensuring that your code will work for all types of characters. The easiest way to manipulate individual characters without worrying about encoding is to use the split () and join () methods. The split() method will split the string up into an Array of individual characters. Once it is split, you can traverse the array using character, not byte, indexes. After you are finished you can join the array back into a string. string str = \"Σ=σ\"; Array asArray = str.split(); for (int i = 1; i <= asArray.length; i++) { if (asArray[i] == \"=\") asArray[i] = \"≠\"; } str = asArray.join(); // \"Σ≠σ\" If you want to search the string by character instead of by byte, but don't want to split it into an array, you can loop through the string and, using the charAt () method, increment the looping index based on the byte-length of each character. string str = \"Σ=σ\"; string curChar = \"\"; for (int i = 1; i <= str.length; i += curChar.length) { curChar = str.charAt(i); if (curChar == \"=\") { str = str.substring(1, i) + \"≠\" + str.substring(i + curChar.length); curChar = \"≠\"; } } If you are searching the string looking for/replacing only ASCII character values, searching the string using the [ ] array operator can be used. string str = \"Σ=σ\"; for (int i = 1; i <= str.length; i++) { if (str[i] == '=') // comparing a byte to an ASCII character works fine str[i] = '#'; // setting a byte to an ASCII character works fine, // as long as the existing byte was already an ASCII character. } Finally, the string provides the byteToCharIndex () and charToByteIndex () methods to convert between character and byte indexes. Note that these methods do require a search of the string, so they will be slow for long strings. Properties length The length, in bytes, of the string. Methods byteToCharIndex Returns the character index associated with a specific byte index in the string. charAt Returns the character at a given byte index in the string. charToByteIndex Returns the byte index associated with a specific character index in the string. endsWith Checks if the string ends with the specified substring. includes Checks if the string contains the specified substring. indexOf Returns the index of the first occurence of the specified substring. lastIndexOf Returns the index of the last occurence of the specified substring. match Searches the string for matches to a pattern. padEnd Pads the end of the string with the padString to the given length. padStart Pads the start of the string with the padString to the given length. repeat Makes a new string out of copies of the original. replace Replaces a series of characters with another. search Searches the string for an internal string or pattern. slice Extracts a section of a string and returns a new string. split Splits the string into an array of substrings. startsWith Checks if the string starts with the specified substring. substr Extracts a section of a string and returns a new string. toLowerCase Converts all letters to lowercase. toNum Interprets the string's content as a floating point number. toUpperCase Converts all letters to uppercase. trim Removes leading and trailing whitespace. Static Methods fromNum Converts the given number to a string. Operators != Compares two strings. [ ] Gets or sets a byte element in the string. + Concatenates two strings += Assigns the string to be a concatenation with another string == Compares two strings. Details Do no remove, this fixes the anchor on doc.flexsim.com string .length readonly int length Description The length, in bytes, of the string. int numBytes = str.length; Do no remove, this fixes the anchor on doc.flexsim.com string .byteToCharIndex() int byteToCharIndex( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns int The 1-based character index of the character. Description Returns the character index associated with a specific byte index in the string. string text = \"Σ=σ\"; int charIndex = text.byteToCharIndex(text.search(\"=\")); // 2 int numChars = text.byteToCharIndex(text.length); // 3 - the number of characters in the string Do no remove, this fixes the anchor on doc.flexsim.com string .charAt() string charAt( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns string The target character, as a string. Description Returns the character at a given byte index in the string. string text = \"Hello World!\"; string e = text.charAt(2); // \"e\" Do no remove, this fixes the anchor on doc.flexsim.com string .charToByteIndex() int charToByteIndex( int charIndex ) Parameters charIndex The 1-based character index of the target character. Returns int The 1-based byte index of the character. Description Returns the byte index associated with a specific character index in the string. string text = \"Σ=σ\"; int byteIndex = text.charToByteIndex(2); // 3 Do no remove, this fixes the anchor on doc.flexsim.com string .endsWith() int endsWith( string str ) Parameters str The substring to look for. Returns int 1 if the string ends with the specified substring, 0 otherwise. Description Checks if the string ends with the specified substring. string text = \"Hello World!\"; int worldEnd = text.endsWith(\"World!\"); // 1 Do no remove, this fixes the anchor on doc.flexsim.com string .includes() int includes( string str ) Parameters str The substring to look for. Returns int 1 if the string contains the specified substring, 0 otherwise. Description Checks if the string contains the specified substring. string text = \"Hello World!\"; int containsWorld = text.includes(\"World\"); // 1 Do no remove, this fixes the anchor on doc.flexsim.com string .indexOf() int indexOf( string str ) Parameters str The substring to look for. Returns int The byte index of the first occurence of the specified substring, -1 if there are no occurences. Description Returns the index of the first occurence of the specified substring. string text = \"Hello World!\"; int oIndex = text.indexOf(\"o\"); // 5 Do no remove, this fixes the anchor on doc.flexsim.com string .lastIndexOf() int lastIndexOf( string str ) Parameters str The substring to look for. Returns int The byte index of the last occurence of the specified substring, -1 if there are no occurences. Description Returns the index of the last occurence of the specified substring. string text = \"Hello World!\"; int oIndex = text.indexOf(\"o\"); // 8 Do no remove, this fixes the anchor on doc.flexsim.com string .match() RegExResult match( RegExp pattern ) Parameters pattern The pattern of characters to look for, a regular expression. Returns RegExResult A RegExResult object that provides access to matches Description Searches the string for matches to a pattern. string str = \"A noisy noise annoys an oyster.\"; var result = str.match(/nois/g); Array matches = [result[1], result[2]]; // [\"nois\", \"nois\"] See the replace () method for further discussion of regular expressions. Do no remove, this fixes the anchor on doc.flexsim.com string .padEnd() string padEnd( int targetLength , string padString = \" \" ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the end of the string with the padString to the given length. Pads the end of the string with the padString to the given targetLength. If the targetLength is less than the string's length, the string will be returned unpadded. string s = \"abc\"; s.padEnd(10); // \"abc \" s.padEnd(10, \"foo\"); // \"abcfoofoof\" s.padEnd(6,\"123465\"); // \"abc123\" s.padEnd(8, \"0\"); // \"abc00000\" s.padEnd(1); // \"abc\" Do no remove, this fixes the anchor on doc.flexsim.com string .padStart() string padStart( int targetLength , string padString = \" \" ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the start of the string with the padString to the given length. Pads the start of the string with the padString to the given targetLength. If the targetLength is less than the string's length, the string will be returned unpadded. string s = \"abc\"; s.padStart(10); // \" abc\" s.padStart(10, \"foo\"); // \"foofoofabc\" s.padStart(6,\"123465\"); // \"123abc\" s.padStart(8, \"0\"); // \"00000abc\" s.padStart(1); // \"abc\" Do no remove, this fixes the anchor on doc.flexsim.com string .repeat() string repeat( int numRepeats ) Parameters numRepeats The number of repetitions. Returns string A new string made up of copies of the original. Description Makes a new string out of copies of the original. string str = \"Clap\"; string applause = str.repeat(3); // \"ClapClapClap\" Do no remove, this fixes the anchor on doc.flexsim.com string .replace() string replace( string findStr , string replaceWith , int replaceAll = 0 ) string replace( RegExp findPattern , string replaceWith ) Parameters findStr The string to look for. replaceWith The string to replace findStr with. replaceAll Set to 1 to replace all instances of findStr. findPattern The pattern of characters to look for, a regular expression. Returns string A copy of the string with a find pattern replaced with a new string. Description Replaces a series of characters with another. Regular Expressions A regular expression is a concise way of specifying a pattern of characters to look for. You start and end a regular expression with a forward slash \"/\" (similar to how you start and end a string with quotes) and then add modifiers: /pattern/modifiers /[0-9]+/g Here is a brief explanation of some regular expression syntax. Modifiers These come after the closing / of the regular expression and modify their behavior g - Global Match, matches all occurences, and not just the first one. i - Case-insensitive match. Brackets [] - Matches any character in the brackets. Can use a dash to specify a range of characters. [abc] - matches an a, b or c. [a-z] - matches any lowercase letter. [0-9] - matches any numerical digit. [^abc] - matches any character that is not an a, b or c. Or | - Matches any of the alternatives separated by a |. (abc|cba) - matches the sequence \"abc\" or \"cba\". (gray|grey) or gr(a|e)y - matches \"gray\" and \"grey\". Quantifiers Define the quantity of characters the preceding expression will match * - Matches any string that has zero or more of the specified characters. ab*c - matches \"ac\", \"abc\", \"abbc\", \"abbbc\", etc. Basically any sequence of an a, any number of b's, and then a c. + - Matches any string that has at least one of the specified characters. ab+c - almost the same as ab*c except that \"ac\" no longer matches. ? - Matches any string that has zero or one of the specified characters. colou?r - matches both \"color\" and \"colour\", but not \"colouur\". Repetitions {n} - Matches n number of occurences. {m,n} - Matches at least m, up to n number of occurences. Periods . - Matches any character. \\. - Matches a period. Capture Groups You can also define what are called capture groups using parentheses. By wrapping parentheses around a character pattern, results found within the parentheses will be saved for use in the replace string. Use the terms $1, $2, etc. in the replace string to reference the first, second, third, etc. captured group in the search pattern. Examples This code removes all numbers. We are using [0-9] to find characters in the numeric range and then we put a plus after it to find any sequence of numbers no matter how long. Finally we add the g modifier to match all occurences. string text = \"300 out of 500 soda cans\"; return text.replace(/[0-9]+/g, \"\"); // \" out of soda cans\" Replace any instances of blue or green regardless of case with red. string text = \"Blue cars are really green.\"; return text.replace(/blue|green/gi, \"red\"); // \"red cars are really red.\" Replace all 3 letter words starting with b and ending with t. string text = \"My favorite words are: bit bat but bot bet.\"; return text.replace(/b[aeiou]t/g, \"Money\"); // My favorite words are: Money Money Money Money Money. Hide any email addresses. Note that \"\\.\" is how you specify you want to see a period and not just any character. string text = \"Email me at [email protected] or [email protected] \"; return text.replace(/([a-z0-9_\\.-]+)@([0-9a-z\\.-]+)\\.([a-z\\.]{2,6})/g, \"###\"); //Email me at ### or ### FlexScript's string regular expression implementation uses c++'s regex library for its functionality, using the ECMAScript grammar. Our design was also guided by JavaScript's regular expression implementation. The string.replace() method's regular expression overload is a wrapper around a call to std::regex_replace . For more detailed information on building regular expressions, refer to that documentation. Note that we do not (yet) implement JavaScript's /m, /y, or /u regular expression flags. Do no remove, this fixes the anchor on doc.flexsim.com string .search() int search( string str ) Parameters str The string or pattern to search for. Returns int If found, the 1-based byte index of the found string. Otherwise -1. Description Searches the string for an internal string or pattern. string str = \"Hello, how are you?\"; int howIndex = str.search(\"how\"); // 8 A regular expression can also be used to find strings. string str = \"Hello, how are you?\"; int howIndex = str.search(/h[a-z]+/); // 8 (first word starting with h) See the replace () method for further discussion of regular expressions. Do no remove, this fixes the anchor on doc.flexsim.com string .slice() string slice( int beginIndex , int endIndex = 0 ) Parameters beginIndex The 1-based byte index of the first character to extract. If this index is in the middle of a multi-byte character, it will extract the full character. If it is a negative number, it is indexed offset from the end of the string. endIndex The 1-based byte index of the end character. The extraction will go up-to-but-not-including the character at this index. If the index is in the middle of a multi-byte character, the extraction will include that full character. If this parameter is left out, the method will extract to the end of the string. If the parameter is negative, it is indexed offset from the end of the string. Returns string The extracted string. Description Extracts a section of a string and returns a new string. string text = \"Hello World!\"; string subText = text.slice(1, 6); // \"Hello\" Using a negative number it starts from the end of the string. string text = \"Hello World!\"; string subText = text.slice(-6); // \"World!\" Do no remove, this fixes the anchor on doc.flexsim.com string .split() Array split( string delimiter = \"\" , int limit = -1 ) Array split( RegExp delimiter , int limit = -1 ) Parameters delimiter The string that marks the separators for where the string should be split. If this parameter is excluded or is an empty string, every character will be separated into its own array element. limit The maximum number of array elements to return. If excluded, it will split the whole string. Returns Array An array of substrings made by splitting the string whenever the specified separator is found. Description Splits the string into an array of substrings. string str = \"Hello, how are you?\"; Array subStrings = str.split(\" \", 3); // [\"Hello,\", \"how\", \"are\"] string csv = \"foo,bar,,baz\"; Array subStrings = csv.split(\",\"); // [\"foo\", \"bar\", \"\", \"baz\"] A regular expression can also be used to find strings to delimit by. This code removes numbers: string str = \"abcd123efg456hij789klm0\"; Array subStrings = str.split(/[0-9]+/g); // [\"abcd\", \"efg\", \"hij\", \"klm\", \"\"] See the replace () method for further discussion of regular expressions. Do no remove, this fixes the anchor on doc.flexsim.com string .startsWith() int startsWith( string str ) Parameters str The substring to look for. Returns int 1 if the string starts with the specified substring, 0 otherwise. Description Checks if the string starts with the specified substring. string text = \"Hello World!\"; int worldStart = text.startsWith(\"Hello\"); // 1 Do no remove, this fixes the anchor on doc.flexsim.com string .substr() string substr( int beginIndex , int length ) Parameters beginIndex The 1-based byte index of the first character to extract. If this index is in the middle of a multi-byte character, it will extract the full character. If it is a negative number it becomes an offset from the end of the string. length The length of the target string, in bytes. Returns string The extracted string. Description Extracts a section of a string and returns a new string. string text = \"Hello World!\"; string subText = text.substr(1, 5); // \"Hello\" With the first parameter negative, it starts that many characters from the end. string text = \"Hello World!\"; string subText = text.substr(-6, 5); // \"World\" without the \"!\" Do no remove, this fixes the anchor on doc.flexsim.com string .toLowerCase() string toLowerCase( ) Returns string A new string with all lowercase letters. Description Converts all letters to lowercase. string text = \"Hello World!\"; string lower = text.toLowerCase(); // \"hello world!\" Do no remove, this fixes the anchor on doc.flexsim.com string .toNum() double toNum( ) Returns double The interpreted content of the string as a double. Description Interprets the string's content as a floating point number. string text = \"1.5\"; double number = text.toNum(); // 1.500 Do no remove, this fixes the anchor on doc.flexsim.com string .toUpperCase() string toUpperCase( ) Returns string A new string with all uppercase letters. Description Converts all letters to uppercase. string text = \"Hello World!\"; string lower = text.toUpperCase(); // \"HELLO WORLD!\" Do no remove, this fixes the anchor on doc.flexsim.com string .trim() string trim( ) Returns string The trimmed string. Description Removes leading and trailing whitespace. string text = \" Hello World! \"; string trim = text.trim(); // \"Hello World!\" Do no remove, this fixes the anchor on doc.flexsim.com string .fromNum() static string fromNum( double num , int precision = -1 ) Parameters num The number to be converted. precision The desired number of decimal places to be printed. Use -1 for automatic precision. Returns string The number as a string. Description Converts the given number to a string. string text1 = string.fromNum(1.5); // \"1.5\" string text2 = string.fromNum(1.5, 2); // \"1.50\" Do no remove, this fixes the anchor on doc.flexsim.com string .operator != int operator !=( string otherString ) Parameters otherString The string to compare to this one. Returns int True if the strings are not equal, false otherwise. Description Compares two strings. \"Hello\" != \"hello\" // true Do no remove, this fixes the anchor on doc.flexsim.com string .operator [ ] int operator [ ]( int byteIndex ) Parameters byteIndex The 1-based byte index of the target byte. Returns int An element of the array. Description Gets or sets a byte element in the string. The [ ] operator accesses individual elements of the string as byte values. For an ASCII string, these can be compared to ASCII character values using single-quote literals such as 'A', 'B', 'C', etc. All ASCII character values are in the integer range [1, 127]. For multi-byte characters, accessing an individual byte will return a value that is in the integer range [128, 255]. Non-ASCII multi-byte characters in the string that are accessed with the [ ] operator are read-only. If you try to set the value of a byte that is part of a multi-byte character using the [ ] operator, FlexSim will throw an exception. string str = \"Σ=σ\"; for (int i = 1; i <= str.length; i++) { if (str[i] == '=') // comparing a byte to an ASCII character works fine str[i] = '#'; // setting a byte to an ASCII character works fine, // as long as the existing byte was already an ASCII character. if (str[i] >= 128) str[i] = ' '; // setting a byte that is part of a multi-byte character will throw an exception } Do no remove, this fixes the anchor on doc.flexsim.com string .operator + string operator +( string otherString ) Parameters otherString The string to concatenate with this one. Returns string A new concatenated string. Description Concatenates two strings string str = \"Hello\" + \", how are you?\"; // \"Hello, how are you?\" Do no remove, this fixes the anchor on doc.flexsim.com string .operator += string operator +=( string otherString ) Parameters otherString The string to concatenate with this one. Returns string The concatenated string and assigns it to the variable. Description Assigns the string to be a concatenation with another string string str = \"Hello\" str += \", how are you?\"; // \"Hello, how are you?\" Do no remove, this fixes the anchor on doc.flexsim.com string .operator == int operator ==( string otherString ) Parameters otherString The string to compare to this one. Returns int True if the strings are exactly equal, false otherwise. Description Compares two strings. \"Hello\" == \"Hello\" // true"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Tree/treenode.html",
        "title": "FlexScript Class - treenode",
        "content": "Description A class that represents a reference to a node in FlexSim's tree. The treenode class is the base class for all objects and nodes accessed in FlexSim's tree. While you can access more data and functionality specific to nodes with object data by using the Object class, treenode is the most basic interface. First, it gives access to data and functionality associated with the tree structure itself. Second, it gives access to basic data stored on the nodes themselves, such as node names and data values. Third, since so much modeling logic uses labels, the treenode class provides a mechanism for easy manipulation of labels on objects, tokens, and task sequences. The treenode class can be automatically down-cast to a subclass such as Object . treenode src = model().find(\"Source1\"); Object srcAsObject = src; // auto-down-cast to object You can also explicitly down-cast using the as() keyword src.as(Object).location.x += 2; When FlexScript performs a down-cast, if the node is not a valid instance of the target class type, an invalid cast exception will be thrown. Object src = model().find(\"Tools\");// throws invalid cast exception model().find(\"Tools\").as(Object).location.x += 2; // throws invalid cast exception You can check if a node is a given subclass type with the is() keyword. if (model().find(\"Source1\").is(Object)) { ... } Null Values In general, to check if a treenode is null just compare the treenode with NULL or put it directly in an if statement. Note that the keyword nullvar represents a null Variant and is not the same as a null treenode. treenode fred = model().find(\"doesnotexist\"); return fred == NULL; // true return fred == nullvar; // false return tonum(fred); // 0 if (fred) return 1; else return 0; // 0 if (objectexists(fred)) return 1; else return 0; // 0 However, there are a few special cases: 1. A treenode returned by an old global command, such as node(). The return value could be the SAFEREF node, which is a valid memory address, but it doesn't exist in the main or view trees. To check for whether the treenode is a valid reference, you need to use objectexists(). For example: treenode fred = node(\"doesnotexist\", model()); return fred == NULL; // false return fred == nullvar; // false return tonum(fred); // a non-zero number if (fred) return 1; else return 0; // 1 if (objectexists(fred)) return 1; else return 0; // 0 2. A treenode stored in a Variant, where the treenode pointer is pointing at 0x0, returned by a command that returns a Variant or by dynamic label access. In the the following example Processor1 has a label called myPointerLabel that has pointer data, but is not pointing at anything (or 0x0): Object processor = model().find(\"Processor1\"); Variant fred = processor.myPointerLabel; return fred == NULL; // true return fred == nullvar; // false return tonum(fred); // 0 if (fred) return 1; else return 0; // 0 if (objectexists(fred)) return 1; else return 0; // 0 3. A Variant that is nullvar, where the type of the Variant was unknown. For example, reading the .value of a node where you don't know whether the node has no data or treenode data: treenode Tools = model().find(\"Tools\"); Variant fred = Tools.value; return fred == NULL; // false return fred == nullvar; // true return tonum(fred); // 0 if (fred) return 1; else return 0; // 0 if (objectexists(fred)) return 1; else return 0; // 0 For more information on checking what type of data a treenode holds or checking if it has data at all see the dataType property. Properties dataType Gets and sets the node's data type. first Gets the node's first subnode. labelProperties Use your own named properties to get/set label values. labels Accesses the node's labels as nodes. last Gets the node's last subnode. name Gets and sets the node's name. next Gets the next node after the node in the tree. prev Gets the node before the node in the tree. rank Gets/sets the rank of the node in its parent's sub-tree subnodes Accesses the node's subnodes up Gets and sets the node \"above\" the node in the tree, or in other words, its parent node. value Gets and sets the value on the node. Methods coevaluate Evaluates the node, potentially returning a reference to a Coroutine . copy Creates a copy of the node. destroy Destroys the node evaluate Evaluates the node. find Finds a node in the node's subtree by its path. getPath Gets the node's path, optionally relative to some other node. Details Do no remove, this fixes the anchor on doc.flexsim.com treenode .dataType int dataType Description Gets and sets the node's data type. If you set dataType to a different value than the node's current data type, it will delete the node's current data and add the new data type. Usually you do not need to use this property since you can always just use treenode . value to get and set the value on a treenode. The following are the values and macros available for dataType. None = 0 DATATYPE_NUMBER = 1 DATATYPE_STRING = 2 DATATYPE_COUPLING = 3 DATATYPE_OBJECT = 4 DATATYPE_PARTICLE = 5 DATATYPE_BUNDLE = 6 DATATYPE_SIMPLE = 7 The following example assigns string data to current's label named \"MyLabel\" and returns that data type. current.labels[\"MyLabel\"].dataType = DATATYPE_STRING; return current.labels[\"MyLabel\"].dataType; You can check if a node has data by comparing the datatype to NULL. node.dataType == NULL Do no remove, this fixes the anchor on doc.flexsim.com treenode .first readonly treenode first Description Gets the node's first subnode. Returns a reference to the first subnode contained in the node. This is a shortcut for using node. subnodes [1], except that if it doesn't exist, node.first will simply return NULL, whereas node. subnodes [1] will throw an array out of bounds exception. The following example sets the name of the first subnode of current to \"FirstObj\". current.first.name = \"FirstObj\"; Do no remove, this fixes the anchor on doc.flexsim.com treenode .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. The treenode class allows you to get and set custom named properties that will apply to labels on an object. For example, if you want to set a label named \"MyLabel\" on current to a value of 5, you can write the following code: current.MyLabel = 5; This will set the label's value to 5. If a label of that name does not exist, then it will be added to the object's labels. If you want to return the value stored in current's \"MyLabel\" label, you can execute the following code: return current.MyLabel; This label access mechanism is only available on nodes with object data, or on Process Flow tokens, Storage.Slot s, or task sequences. If you use this mechanism on a node that is not one of these types of node, FlexSim will throw an exception. Using dynamic label property access gives you shorter syntax for what you could otherwise do with a bit longer expression. Short Syntax Longer Equivalent Syntax current.MyLabel current.labels[\"MyLabel\"].evaluate() current.MyLabel = 5 current.labels.assert(\"MyLabel\").value = 5 * * Note that if you use the shorter syntax to set the code of a flexscript-toggled label, it will also automatically build the code's flexscript. ? Operator There are, however, some caveats associated with this. Since FlexScript allows you to get/set any label names on a node, this does introduce a potential problem if you don't spell your labels correctly. For this reason, if you get a label that does not exist, FlexScript will throw an exception, pointing you immediately to the problem. If you intentionally want to access a label that may not exist (just return a null Variant , or nullvar, if it doesn't), then you can put a ? after the label name to signify that you don't want to throw an exception on an undefined label The following code will simply return nullvar if the \"MyLabel\" label does not exist, instead of throwing an exception. return current.MyLabel?; # Operator Because your object already has its own properties there are certain label names that won't work as a dynamic property. For example: current.next = 5; This will throw an exceptions since next is already a property on the treenode class and it is read-only. However, this doesn't mean it's impossible to have an object with a \"next\" label (for example you could add it to an object through the object's properties window). However, you can't access this label through dynamic properties in the same way as other labels without a name collision. In order to reference this label (or add it in the first place) with dynamic properties you need to add a # character before the label name: current.#next = 5; This will correctly find the object's \"next\" label and not use its next property. It is also possible that, as the software is updated, new properties will be added to objects that collide with label names used by your object in your model. In this case, your code will be automatically updated to use the # character so your code continues to work the same way. For example, say you are using a \"position\" label on one of your objects: current.position = 5; Now, in the next update that object is updated and a new position property is added. Your code will be automatically updated to look like the following code snippet and will continue to work as before. current.#position = 5; Do no remove, this fixes the anchor on doc.flexsim.com treenode .labels readonly labels Description Accesses the node's labels as nodes. This property allows you to access the node containing a label value. Usually you will not need to use this property, as you can use labelProperties . The exceptions to this rule are: 1. Your label names have spaces in them. - If your label names contain spaces, you will need to access them using the labels property: current.labels[\"My Label Name\"].value = 5; Since this code is more tedious than using labelProperties , we suggest not naming your labels with spaces. 2. You specifically want to access label nodes - In some cases you actually want to access label nodes, such as when the label is a table of values. In this case, you would use the labels property. Table myTable = current.labels[\"myTable\"]; 3. You want to assert the label if it doesn't exist. - Just like subnodes property, you can assert that a label exists. Optionally, you can pass in a default value to give the label if it does not exist: // Set myValue to the value of MyLabel // If MyLabel doesn't exist, create it Variant myValue = current.labels.assert(\"MyLabel\").value; // Increment the value of MyLabel by 10 // If MyLabel doesn't exist, create it and set its value to 1 current.labels.assert(\"MyLabel\", 1).value += 10; Do no remove, this fixes the anchor on doc.flexsim.com treenode .last readonly treenode last Description Gets the node's last subnode. Returns a reference to the last subnode contained in the node. This is a shortcut for using node. subnodes [node.subnodes.length], except that if it doesn't exist, node.last will simply return NULL, whereas node. subnodes [node.subnodes.length] will throw an array out of bounds exception. The following example sets the name of the last subnode of current to \"FirstObj\". current.last.name = \"FirstObj\"; Do no remove, this fixes the anchor on doc.flexsim.com treenode .name string name Description Gets and sets the node's name. treenode source = Model.find(\"Source1\"); source.name = \"MySource\"; // sets the node's name to \"MySource\" return source.name; // returns \"MySource\" Do no remove, this fixes the anchor on doc.flexsim.com treenode .next readonly treenode next Description Gets the next node after the node in the tree. Gets the node in the FlexSim tree that is in the same level and immediately after this node. If this node is the last node in the tree at that level, then this command returns NULL which means that the requested node does not exist. The following example sets a label called \"tally\" to 0 on every item in the current. The variable item is used to store the reference to the item that is currently being worked on. treenode item = current.first; while (item) { item.tally = 0; item = item.next; } Do no remove, this fixes the anchor on doc.flexsim.com treenode .prev readonly treenode prev Description Gets the node before the node in the tree. Gets the node in the FlexSim tree that is in the same level and immediately before this node. If this node is the first node in the tree at that level, then this command returns NULL which means that the requested node does not exist. The following example sets a label called \"tally\" to 0 on every item in the current by traversing backwards through its subnodes. The variable item is used to store the reference to the item that is currently being worked on. treenode item = current.last; while (item) { item.tally = 0; item = item.prev; } Do no remove, this fixes the anchor on doc.flexsim.com treenode .rank int rank Description Gets/sets the rank of the node in its parent's sub-tree The rank is the position in the tree layer that this node is in. The first node in a layer is rank 1, the second is rank 2, and so forth. The following example sends a delayed message if item is the last subnode contained in current. if (item.rank == current.subnodes.length) senddelayedmessage(current,10,current,1,2,tonum(item)); Do no remove, this fixes the anchor on doc.flexsim.com treenode .subnodes readonly subnodes Description Accesses the node's subnodes Accessing the Number of Subnodes You can access the number of subnodes on current with the following code. current.subnodes.length Accessing Subnodes by Rank You can access an individual subnode by rank with the following code. current.subnodes[1] // first subnode current.subnodes[current.subnodes.length] // last subnode current.subnodes[i] // i-th subnode Accessing Subnodes by Name You can access an individual subnode by name with the following code. current.subnodes[\"Box1\"] // subnode named \"Box1\" Asserting Subnodes by Name You can assert a subnode by name with the following code. // assert a label named \"My Label\" current.attrs.labels.subnodes.assert(\"My Label\") This will see if a node of that name already exists, and if it doesn't, it will add a subnode with that name. It returns the resulting subnode. Asserting Subnodes with a Default Value You can also assert a subnode by name and include a default start value with the following code. // assert a label named \"My Label\" with a default value of 5 current.attrs.labels.subnodes.assert(\"My Label\", 5) This is the same as the previous assert() call, except that if it needs to add the label, it will give the added label a value of 5. Adding Subnodes You can add a subnode with the following code. // add a new node under current current.subnodes.add() This will add a blank subnode under current. It returns the resulting subnode. Clearing Subnodes You can delete current's subnodes with the following code. current.subnodes.clear(); Getting an Array of subnodes You can create an Array of all the subnodes with the following code. Array subnodes = current.subnodes.toArray(); Do no remove, this fixes the anchor on doc.flexsim.com treenode .up treenode up Description Gets and sets the node \"above\" the node in the tree, or in other words, its parent node. treenode box = Model.find(\"Source1/Box\"); box.up; // gives Source1 box.up.up; // gives the model Setting the up property causes the node to be transfered into the target node. treenode box = Model.find(\"Queue1/Box\"); box.up = Model.find(\"Queue2\"); Do no remove, this fixes the anchor on doc.flexsim.com treenode .value Variant value Description Gets and sets the value on the node. When getting a node's value, a node with number data will return a number, a node with text data will return text, and a node with coupling pointer data will return the target node pointed to. Nodes that hold array data will return the associated Array . Nodes that have object data return themselves since they store attribute nodes on themselves. Nodes without data will return a null Variant , or nullvar. Additionally, some nodes may hold \"custom\" data, using a customization class called SimpleDataType, or SDT. For these types, the customization class can define what is returned when value is accessed or set. For example, for a node that contains tracked variable data, such as current.attrs.state_current or current.attrs.stats_content, the value property will return the tracked variable's current value (same as getstat(current.attrs.state_current, \"\", STAT_CURRENT), etc.), and setting the value will update the tracked variable's current value. Examples Get the shape path associated with current's 3D shape file: string shapePath = current.attrs.shape.value; Get current's shape index int shapeIndex = current.attrs.shapeindex.value; Set the value of current's \"My Label\" label to 5. (Note that you can do this easier using labelProperties if you don't put spaces in your label names). current.labels[\"My Label\"].value = 5; Assert and set the value of current's \"Loading Operator\" label to point to Operator1 in the model. current.labels.assert(\"Loading Operator\").value = Model.find(\"Operator1\"); Assert and set the value of current's \"Loading Operators\" label to an array pointing to 3 operators in the model. current.labels.assert(\"Loading Operators\").value = [Model.find(\"Operator1\"), Model.find(\"Operator2\"), Model.find(\"Operator3\")]; Assert a subnode named \"OperatorName\" into the model tools folder and give it the value \"Operator1\" Model.find(\"Tools\").subnodes.assert(\"OperatorName\").value = \"Operator1\"; Do no remove, this fixes the anchor on doc.flexsim.com treenode .coevaluate() Variant coevaluate( ) Variant coevaluate( Variant p1 ) Variant coevaluate( Variant p1 , Variant p2 ) Variant coevaluate( Variant p1 , Variant p2 , Variant p3 ) Parameters p1-p3 Parameters to be passed into the evaluation. These parameters can be accessed from within the node's code using param(1), param(2), etc. Returns Variant The result of the node's evaluation. Description Evaluates the node, potentially returning a reference to a Coroutine . Calling coevaluate() is the same as calling evaluate (), with one important difference. If the node's code is a coroutine , and the evaluation of the code results in a suspension of the coroutine, coevaluate() will return a reference to the coroutine. A reference to a coroutine is a Variant that references a node that has Coroutine data. Calling evaluate(), on the other hand, will merely return nullvar in the same scenario. Generally you should coevaluate() instead of evaluate() only if you plan on actually awaiting the result, meaning you want to suspend the execution of the calling function (the caller) until the called function (the callee) is also finished, and get the final result of the callee's evaluation. Do no remove, this fixes the anchor on doc.flexsim.com treenode .copy() treenode copy( treenode destination = 0 , int flags = 0 ) Parameters destination If defined, the copied node will be placed under this node. If not the copied node will be placed in the model. flags A set of bitwise flags that control the copy behavior. If you pass COPY_FLAG_REPLACE, the copied node will replace the destination node rather than being placed under it. If you pass COPY_FLAG_SUPPRESS_ON_CREATE, then the newly created object(s) will not fire their OnCreate event. In this case, you can subsequently configure the object and call firecreateevent() to call the OnCreate later. Returns treenode A copy of the node. Description Creates a copy of the node. treenode copy = Model.find(\"Processor1\").copy(); Do no remove, this fixes the anchor on doc.flexsim.com treenode .destroy() void destroy( ) Description Destroys the node Once you call this method on a node, it will have been destroyed and you should not reference the node anymore. The following example destroyes all but one subnode of current. while (current.subnodes.length > 1) current.last.destroy(); Do no remove, this fixes the anchor on doc.flexsim.com treenode .evaluate() Variant evaluate( ) Variant evaluate( Variant p1 ... p20 ) Parameters p1-p20 Parameters to be passed into the evaluation. These parameters can be accessed from within the node's code using param(1), param(2), etc. Returns Variant The result of the execution of the node's code, if it is code-toggled. Otherwise, it will return the node's value. Description Evaluates the node. Calling evaluate() will return the same value as treenode . value if the node has number, non-code text, or array data. If the node has text data and is toggled as code (either dll, c++, or FlexScript) then evaluate() will execute that code and return the resulting value. Do no remove, this fixes the anchor on doc.flexsim.com treenode .find() treenode find( string path ) Parameters path The path, starting at the node, that addresses the target node. Returns treenode If the addressed node exists, the method returns that node, otherwise NULL. Description Finds a node in the node's subtree by its path. This method is generally used to access nodes in the tree for which there are no other specific commands available. This command uses a path syntax not unlike unix/windows file paths. There are several path symbols you can use to traverse the tree, as listed below: / This symbol tells the traversal to go into the current node's sub-tree. > This symbol tells the traversal to go into an object's attribute tree. .. This symbol tells the traversal to go to the current node's parent tree, or up one level. ~ This symbol may have two meanings depending on context. If the symbol is encountered directly after another special symbol (such as >objectfocus+/~), then it tells the traversal to go to the owning object of the current node. For example, if the current node is within the attributes tree of an object, ~ will go up to the object itself. If, however, the symbol is encountered after a node name, it will expect a number after the symbol, defining the \"nth\" object with the given name. For example, a path of MODEL:/Processor~5 will return the 5th object named Processor in the model. @ This symbol tells the traversal to go to the owner view of the current node. + This symbol tells the traversal to read the current node's text as a path to an object (or if the node has pointer data, it reads the value of the pointer), and go to that object. \" Put quotes around an object name if the name contains special path characters. For example, the path MODEL:/\"Is Distance > Max Distance?\" will return the object named Is Distance > Max Distance? in the model. ? This symbol tells the traversal to perform a recursive tree search for the subsequent name. For example, model().find(\"/?FlowItemBin\") will search for a node with the name FlowItemBin in the model tree. This returns the same node reference as an explicit path definition would: model().find(\"/Tools/FlowItemBin\") $ Surround a macro or flexscript with $ characters to dynamically define ranking or node references. For example, if you have defined a global macro MY_RANK as 8, then the path MODEL:/$MY_RANK$ will get the 8th ranked object in the model. If you define flexscript here, use i to get the current node. For example, the path MODEL:/Processor1/$outobject(i, 3)$ will return the object connected to the 3rd output port of the object named Processor1 in the model. For the most part, you will only use the / and > symbols, and occasionally the .. symbol. The @ and + symbols are usually only used when you are building a custom GUI. There is also a feature that lets you specify a node by its rank instead of by its name. Just put a number in the place where an object's name usually goes, and the ranked node will be accessed instead. You can also define one of several optional starting point keywords in the path, in place of startnode. This will override the defined node (the node left of the dot) as the path starting point. They are: MAIN:/ Starts at the main project tree MODEL:/ Starts at the model tree VIEW:/ Starts at the view tree Example 1: treenode curnode = model().find(\"/Conveyor3/Textured Colored Box\"); This sets the variable curnode to a reference to an object named \"Textured Colored Box\", which is found in the object called \"Conveyor3\", which is found in the model. Example 2: treenode curnode = model().find(\"/Conveyor3/3\"); This example sets curnode to the 3rd ranked object in the object named \"Conveyor3\" in the model. This provides an advantage over the first example since often flowitems will all have the same name, so the path \"/Conveyor3/Textured Colored Box\" will only give you access to the first flowitem named \"Textured Colored Box\" in Conveyor3. If several flowitems are in Conveyor3 and all have the name \"Textured Colored Box\", then you can use the path \"/Conveyor3/2\" to get the 2nd ranked flowitem, the path \"/Conveyor3/3\" to get the 3rd ranked flowitem, and so forth. Example 3: treenode exittriggernode = model().find(\"/Conveyor3>variables/exittrigger\"); This example sets exittriggernode to reference the exittrigger variable on Conveyor3 in the model. Note that this uses the > symbol to go into the Conveyor's object attributes tree instead of the Conveyor's sub-tree like the first example did. Note that the object attribute tree holds things like labels, variables, size, location, etc., whereas the object sub-tree holds other objects like flowitems. Example 4: treenode focus = c.find(\"@>objectfocus+\"); This example would typically be used in a GUI. It gets access to the object that a parameters/properties window is \"pointing to\". For more information, refer to the topic on Graphical User Interfaces in the user manual. Do no remove, this fixes the anchor on doc.flexsim.com treenode .getPath() string getPath( treenode relativeTo = 0 , int byName = 1 ) Parameters relativeTo If defined, the resulting path will be relative to that node. If left out, the path will be a globally-defined path that includes a root node prefix, such as MODEL:/. byName If defined, 0 means the resulting path will be a sequence of numbered ranks in the tree. 1 means the resulting path will be a sequence of named nodes. Returns string The node's path. Description Gets the node's path, optionally relative to some other node."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Tree/Object.html",
        "title": "FlexScript Class - Object",
        "content": "Inherits from treenode Description A class that represents objects in the model. An Object is a treenode that has object data. Objects have all the functionality of a treenode and also provide functionality for accessing object data and manipulating 3D objects. Properties animations Accesses an object's animations. attrs Accesses object attribute nodes. centerObjects Accesses objects connected through center port connections. color Get and set the Color of the object. flags Get and set flags of the object. inObjects Accesses objects connected through input ports connections. input Access methods on the object's input ports connections. location Get and set the position of the object. outObjects Accesses objects connected through output ports connections. output Access methods on the object's output ports connections. resetPosition Accesses an object's reset position. rotation Get and set the rotation of the object. size Get and set the size of the object. stats Allows access to an object's statistics. stopCount Gets the number of stops for the object. Methods applyProperties Commits property change(s) to template instances and overrides. event Returns an Event of the object based on the given parameters getLocation Gets the object's location. getProperty Gets the value of an object's property. getVariable Deprecated. Use getProperty (). Gets the value of an object's variable. message Send a message to the object. resume Return the object to its state prior to stop(). setLocation Sets the object's location. setProperty Sets the value of an object's property. setRotation Sets the object's rotation. setSize Sets the object's size. setState Sets the object's state. setVariable Deprecated. Use setProperty (). Sets the value of an object's variable. stop Stops the object, sets its state, and waits for resume(). Static Methods create Creates a new instance of a library object. Details Do no remove, this fixes the anchor on doc.flexsim.com Object .animations readonly animations Description Accesses an object's animations. Gives access to the animations of an object as Animation interfaces. // Start the \"Walk\" animation on Operator1 Object obj = Model.find(\"Operator1\"); obj.animations[\"Walk\"].start(); Do no remove, this fixes the anchor on doc.flexsim.com Object .attrs readonly attrs Description Accesses object attribute nodes. Object obj = Model.find(\"Processor1\"); obj.attrs.spatialx.value = 5; Do no remove, this fixes the anchor on doc.flexsim.com Object .centerObjects readonly centerObjects Description Accesses objects connected through center port connections. Accessing the Number of Center Port Connections You can access the number of center port connections on the object with the following code. obj.centerObjects.length Accessing Objects by Rank You can access an individual object connected through a center port connection by rank with the following code. obj.centerObjects[1] // first object obj.centerObjects[obj.centerObjects.length] // last object obj.centerObjects[i] // i-th object Getting an Array of Objects You can get an Array of all objects connected through a center port connection with the following code. Array centerObjects = obj.centerObjects.toArray(); Do no remove, this fixes the anchor on doc.flexsim.com Object .color readonly Color color Description Get and set the Color of the object. Object obj = Model.find(\"Processor1\"); obj.color = Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Object .flags readonly flags Description Get and set flags of the object. isProtected Get or set the \"Protected\" flag of the object. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Protected objects will have a gray highlight in the treeview to indicate their protected status. current.flags.isProtected = 1; isSelected Get or set the \"Selected\" flag of the object. Selecting an object puts a red box around it in both the 3D and tree view. Dragging one selected object in the 3D view will drag all other selected objects by the same amount. The Edit Selected Objects tool allows you to quickly modify all selected objects in your model. if(current.flags.isSelected) return 1; showConnections Get or set the \"Show Connections\" flag of the object. Hiding the connections will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. obj.flags.showConnections = 0; showContent Get or set the \"Show Contents\" flag of the object. Hiding the contents of an object will stop the display of objects (e.g. flowitems) contained within it. current.flags.showContent = 0; showName Get or set the \"Show Name\" flag of the object. A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. obj.flags.showName = 1; showShape Get or set the \"Show Shape\" flag of the object. Hiding the object's shape will stop its 3D shape from drawing. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. current.flags.showShape = 0; Do no remove, this fixes the anchor on doc.flexsim.com Object .inObjects readonly inObjects Description Accesses objects connected through input ports connections. Same as the centerObjects property, but for input port connections. Do no remove, this fixes the anchor on doc.flexsim.com Object .input readonly input Description Access methods on the object's input ports connections. close Blocks the input of the object. Only the input ports themselves, or the input in general needs to be closed to block entry. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the input ports (squares) for the object, signifying the input ports are blocked. Individual ports may still be open and drawn in green, but entry to the object is still blocked because of the red bar. Compare with stop(). current.input.close(); open Unblocks the input of the object after it has been previously blocked with the close() method. It is necessary that both the input ports themselves, and the input in general, are open before entry will be allowed. It is advised that modelers never use this method in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare with resume(). current.input.open(); resume Opens the input of the object just like open() does, but because it keeps track of previous stop() calls on the object, it will only open input after all stops have been resumed. Refer to open() for additional information. current.input.resume(); stop Closes the input of the object just like close() does, but it also keeps track of consecutive stop() calls on the object, and will only open input after all stops have been resumed. Refer to close() for additional information. current.input.stop(); Do no remove, this fixes the anchor on doc.flexsim.com Object .location readonly Vec3 location Description Get and set the position of the object. Object obj = Model.find(\"Processor1\"); obj.location = Vec3(0,0,0); Do no remove, this fixes the anchor on doc.flexsim.com Object .outObjects readonly outObjects Description Accesses objects connected through output ports connections. Same as the centerObjects property, but for output port connections. Do no remove, this fixes the anchor on doc.flexsim.com Object .output readonly output Description Access methods on the object's output ports connections. Same as the input property, but for output port connections. Do no remove, this fixes the anchor on doc.flexsim.com Object .resetPosition readonly resetPosition Description Accesses an object's reset position. Allows you to access the reset position of an object. The property can be read directly to determine if an object's reset position has been set or not. This property provides the following properties and methods: location - returns an object's reset position location rotation - returns an object's reset position rotation size - returns an object's reset position size container - returns an object's reset position container set() - sets an object's reset position to its current location, rotation, size, and container. clear() - clears an object's reset position. Object obj = Model.find(\"Processor1\"); if (obj.resetPosition) //Checks to see if its reset positon has been set return obj.resetPosition.location;// gets the location value of the reset position else{ obj.resetPosition.set();// set the reset postion on the object return obj.resetPosition.location; // gets the location value of the reset position } Do no remove, this fixes the anchor on doc.flexsim.com Object .rotation readonly Vec3 rotation Description Get and set the rotation of the object. Object obj = Model.find(\"Processor1\"); obj.rotation = Vec3(0,0,0); Do no remove, this fixes the anchor on doc.flexsim.com Object .size readonly Vec3 size Description Get and set the size of the object. Object obj = Model.find(\"Processor1\"); int xSize = obj.size.x; Do no remove, this fixes the anchor on doc.flexsim.com Object .stats readonly stats Description Allows access to an object's statistics. Allows you to access the statistics of an object as TrackedVariable objects. This property provides the following properties and methods: input - returns the input tracked variable output - returns the output tracked variable content - returns the content tracked variable staytime - returns the staytime tracked variable totalTravelDistance - returns the total travel distance of a Task Executer state(Variant& profile = nullvar) - returns a state tracked variable. If no profile argument is given, or if it is 0, then the default state profile is returned. Other state profiles can be returned by providing the profile number or name. // Get the input of a processor Object obj = Model.find(\"Processor1\"); double input = obj.stats.input.value; // Get the state of a multiprocessor, // using the multiprocessor state profile Object obj = Model.find(\"MultiProcessor1\"); int curState = obj.stats.state(1).value; Do no remove, this fixes the anchor on doc.flexsim.com Object .stopCount readonly int stopCount Description Gets the number of stops for the object. This number increases with calls to the stop method, and decreases with calls to the resume method. int numStops = current.stopCount; Do no remove, this fixes the anchor on doc.flexsim.com Object .applyProperties() void applyProperties( string propertyName = \"\" ) Parameters propertyName Optional. The name of a specific property that has changed. A list of valid properties for each object can be found on that object's help page. For example, Fixed Resource Properties . Returns void Description Commits property change(s) to template instances and overrides. This method will only have an effect if an object is a template instance or has template instances. It should be called after you have directly changed an object's properties and want that change to be applied to template instances and overrides. The method call affects the named property you pass in, or, if you pass nothing in, it applies to all of the object's properties. It will do the following for the respective properties: Add Override(s) - If the object is a template instance, it will check if the property value of the object is different than the value of the object's template. If so, it will assert that property as an override. Apply to Inheriting Instances - If the object has template instances, it will set the same property value on all template instances that do not override that property. Note that you do NOT need to call this method when you set an object's property using setProperty (). That method will automatically call applyProperties(). You only need to use this method if you have changed an object's properties through some other mechanism. queue.size.x = 5; queue.applyProperties(\"Size\"); The example above demonstrates a time when you would need to call applyProperties(). You have changed an object's size using Object. size , instead of by calling setProperty (). Thus, you must call applyProperties() to apply that new property value to inheriting template instances and overrides. Do no remove, this fixes the anchor on doc.flexsim.com Object .event() Event event( string eventName , Variant req1 = nullvar , Variant req2 = nullvar , Variant req3 = nullvar ) Parameters eventName The name of the event. req1 ... req3 The event's resolution requirements. These dependent on which event you are targeting. Some events require some additional information in order to resolve the event reference. Returns Event The resulting Event. Description Returns an Event of the object based on the given parameters await current.event(\"OnEntry\"); Do no remove, this fixes the anchor on doc.flexsim.com Object .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Vec3 A vector holding the object's location. Description Gets the object's location. This code gets the object's location measured at its center. Vec3 centerLoc = obj.getLocation(0.5,0.5,0.5); Vec3 centerLoc = obj.getLocation(Vec3(0.5,0.5,0.5)); Do no remove, this fixes the anchor on doc.flexsim.com Object .getProperty() Variant getProperty( string propertyName , int flags = 0 ) Parameters propertyName The name of the property. A list of valid properties for each object can be found on that object's help page. For example, Fixed Resource Properties . flags A set of bitwise flags that modify the returned value. GET_PROPERTY_FLAG_UNITS - for a Unit property it will return a 2-length array with the display value in the first element and the display units in the second. GET_PROPERTY_FLAG_STRING - for an Options property it will return the name of the option instead of its value. Returns Variant The current value of the property. Description Gets the value of an object's property. This gets the value of the object's MaxContent property. int maxContent = queue.getProperty(\"MaxContent\"); This gets the display value and units of the object's Speed property. Array speed = conveyor.getProperty(\"Speed\", GET_PROPERTY_FLAG_UNITS); // [5, \"m/min\"] Do no remove, this fixes the anchor on doc.flexsim.com Object .getVariable() Variant getVariable( string variableName ) Parameters variableName The name of the variable Returns Variant The value of the specified variable. Description Deprecated. Use getProperty (). Gets the value of an object's variable. This gets the value of the object's maxspeed variable. double speed = obj.getVariable(\"maxspeed\"); Do no remove, this fixes the anchor on doc.flexsim.com Object .message() Variant message( double delay = 0 , treenode fromObject = 0 , Variant msgparam1 = nullvar , Variant msgparam2 = nullvar , Variant msgparam3 = nullvar ) Parameters delay Optional. Specifies the amount of time to delay before firing the message. If -1, the message will be sent synchronously. If 0 or greater, an event will be created in the defined delay time, and the message will be fired after that delay time. fromObject Optional. The object that is sending the message. This can be accessed from the message trigger. msgparam1 Optional. Defines the first parameter of the message. This can be accessed from the message trigger as msgparam1. msgparam2 Optional. Defines the second parameter of the message. This can be accessed from the message trigger as msgparam2. msgparam3 Optional. Defines the third parameter of the message. This can be accessed from the message trigger as msgparam3. Returns Variant If the message is sent synchronously (delay = -1), it will return whatever is returned by the object's message trigger. If the message is sent asynchronously (delay >= 0), the call will return a reference to the event node that was created in the event list. Description Send a message to the object. In the example below, a message is sent to current, with a 0 second delay, and with item as the fromObject of the message. current.message(0, item); Do no remove, this fixes the anchor on doc.flexsim.com Object .resume() void resume( int id , int stateProfile ) Parameters id Optional. For matching stop requests with resume requests. stateProfile Optional. The state profile on which to record the state. Returns void Description Return the object to its state prior to stop(). Tells the object that it may resume whatever it was doing before stop() was called on it. Refer to stop() for more information. current.resume(1); Do no remove, this fixes the anchor on doc.flexsim.com Object .setLocation() Object setLocation( double x , double y , double z ) Object setLocation( double x , double y , double z , double xFactor , double yFactor , double zFactor ) Object setLocation( Vec3 location , Vec3 factors ) Parameters x The desired x position. y The desired y position. z The desired z position. xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). location A vector holding the desired position. factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Object The translated object. Description Sets the object's location. This code sets the object's center to the position (0,0,0). obj.setLocation(0,0,0,0.5,0.5,0.5); obj.setLocation(Vec3(0,0,0), Vec3(0.5,0.5,0.5)); Do no remove, this fixes the anchor on doc.flexsim.com Object .setProperty() void setProperty( string propertyName , Variant value ) Parameters propertyName The name of the property. A list of valid properties for each object can be found on that object's help page. For example, Fixed Resource Properties . value The desired property value. Returns void Description Sets the value of an object's property. If this method is called as part of the model processing an event the object will store the original value of the property and then that value will be restored when the model is reset. After setting the property value, the method will call applyProperties () for the relevant property, applying the change to template instances and overrides. queue.setProperty(\"MaxContent\", 5); Do no remove, this fixes the anchor on doc.flexsim.com Object .setRotation() Object setRotation( double rx , double ry , double rz ) Object setRotation( Vec3 rotation ) Parameters rx The desired rotation about the x axis. ry The desired rotation about the y axis. rz The desired rotation about the z axis. rotation A vector of the desired rotation values. Returns Object The rotated object. Description Sets the object's rotation. obj.setRotation(0,0,0); obj.setRotation(Vec3(0,0,0)); Do no remove, this fixes the anchor on doc.flexsim.com Object .setSize() Object setSize( double x , double y , double z ) Parameters x The desired x size. y The desired y size. z The desired z size. Returns Object The sized object. Description Sets the object's size. obj.setSize(1,1,1); Do no remove, this fixes the anchor on doc.flexsim.com Object .setState() void setState( int state , int stateProfile ) Parameters state The desired state. stateProfile The desired state profile. Returns void Description Sets the object's state. Sets the state of the object to a state number. The statistics regarding state will be automatically updated when this is called. There are 50 predefined states. The predefined values for state and their associated macros are: 1 - STATE_IDLE 2 - STATE_PROCESSING 3 - STATE_BUSY 4 - STATE_BLOCKED 5 - STATE_GENERATING 6 - STATE_EMPTY 7 - STATE_COLLECTING 8 - STATE_RELEASING 9 - STATE_WAITING_FOR_OPERATOR 10 - STATE_WAITING_FOR_TRANSPORT 11 - STATE_BREAKDOWN 12 - STATE_SCHEDULED_DOWN 13 - STATE_CONVEYING 14 - STATE_TRAVEL_EMPTY 15 - STATE_TRAVEL_LOADED 16 - STATE_OFFSET_TRAVEL_EMPTY 17 - STATE_OFFSET_TRAVEL_LOADED 18 - STATE_LOADING 19 - STATE_UNLOADING 20 - STATE_DOWN 21 - STATE_SETUP 22 - STATE_UTILIZE 23 - STATE_FULL 24 - STATE_NOT_EMPTY 25 - STATE_FILLING 26 - STATE_STARVED 27 - STATE_MIXING 28 - STATE_FLOWING 29 - STATE_ALLOCATED_IDLE 30 - STATE_OFF_SHIFT 31 - STATE_CHANGE_OVER 32 - STATE_REPAIR 33 - STATE_MAINTENANCE 34 - STATE_LUNCH 35 - STATE_ON_BREAK 36 - STATE_SUSPEND 37 - STATE_AVAILABLE 38 - STATE_PREPROCESSING 39 - STATE_POSTPROCESSING 40 - STATE_INSPECTING 41 - STATE_OPERATING 42 - STATE_STANDBY 43 - STATE_PURGING 44 - STATE_CLEANING 45 - STATE_ACCELERATING 46 - STATE_MAXSPEED 47 - STATE_DECELERATING 48 - STATE_STOPPED 49 - STATE_WAITING 50 - STATE_ACCUMULATING if (current.subnodes.length <= 1) current.setState(STATE_EMPTY); This sets the state of the object referenced by current to \"empty\" if the content of current is less than or equal to 1. Do no remove, this fixes the anchor on doc.flexsim.com Object .setVariable() void setVariable( string variableName , Variant value ) Parameters variableName The name of the variable. value The desired variable value. Returns void Description Deprecated. Use setProperty (). Sets the value of an object's variable. If this method is called as part of the model processing an event the object will store the original value of the variable and then that value will be restored when the model is reset. obj.setVariable(\"maxspeed\", 5); Do no remove, this fixes the anchor on doc.flexsim.com Object .stop() void stop( int state , int id , int priority , int stateProfile ) Parameters state The state the object will go into. id Optional. For matching stop requests with resume requests. priority Optional. For breaking ties between stop() calls. stateProfile Optional. The state profile on which to record the state. Returns void Description Stops the object, sets its state, and waits for resume(). Tells the object to stop whatever it is doing, go into the state specified (in the state profile if specified), and waits for resume() to be called. Stop() calls are accumulated, meaning if stop()) is called twice on the same object, the object will not resume its operations until resume()) has been called twice as well. Stopping an object depends on the type of object that is being stopped. For FixedResources, generally events are delayed indefinitely, input and output is stopped, and all operations going into and out of the object are stopped. This means that TaskExecuters trying to load/unload to or from the object will have to wait until the object has been resumed. For TaskExecuters, events are not delayed, but rather a preempting task sequence with priority of 100,000 is created for the TaskExecuter, with one TE_STOP task in it. Be aware that, if there are several stop requests for the same object, the state for each stop request is not remembered. If an object is requested to stop by entity A with state 12, and then is later requested to stop by entity B for state 14, it will go into state 14 and forget state 12. Even if entity B resumes the object before entity A, the object will remain in state 14 until all stop requests have resumed. The id and priority parameters are optional and were added to fix the problem in the previous paragraph. If you specify these parameters, then it will store a record of the stop request, instead of just incrementing a value for the number of stops requested. The id is like a key for that stop request. The priority allows the object to prioritize its stop requests. For example, if you have a stop request for the scheduled down state, and another for the breakdown state at the same time, technically the object should be in two states at once, but since a FlexSim object can only be in one state at a time, the priority value breaks the tie and goes into the state of the highest priority stop request. The id value should match an id value that is added to a resume() call later on. This is for matching stop requests with their appropriate resume requests. For example, if you stop an object for scheduled maintenance with and id of 1, once the scheduled maintenance is finished, you will need to resume the object with the same id of 1. current.stop(STATE_CLEANING, 1); Do no remove, this fixes the anchor on doc.flexsim.com Object .create() static Object create( string className ) Parameters className The class name of a library object. Returns Object A new instance of a library object. Description Creates a new instance of a library object. Object newProcessor = Object.create(\"Processor\"); Object newConveyor = Object.create(\"Conveyor::StraightConveyor\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Variant.html",
        "title": "FlexScript Class - Variant",
        "content": "Description A type that can hold either a number, a string , a treenode or an Array . The Variant class is an essential type by which data is exchanged between various functionalities in FlexSim. As such, the Variant represents a \"jack of all trades\" that can hold several different types of data. It can be a number type, holding a number value. It can be a string type, holding text data. It can be a treenode type, holding a reference to a node in FlexSim's tree. It can be an Array type, holding an array of Variants. It can be a Map type, holding a set of keys and their associated values. And finally, it can be a null variant meaning it is none of the other types. Method/Property Forwarding Since the Variant is just a flexible container for other data types, its methods and properties are just forwarders to the various methods and properties of the types that the Variant holds. For example, if you have a Variant holding a treenode , you can use all of the methods and properties on a treenode directly on the Variant without having to cast to a treenode with the as() keyword. Variant node = param(1); node.name = \"Object1\"; node.value = 5; The only property that is exclusive to the Variant is type , which tells you what type of data is held by a Variant. All other properties and methods simply forward to the associated method or property of the held class. If the Variant does not hold the associated type, then calling the type's method will result in an exception. For example, if a Variant has a number, and you call the find () method on it, FlexScript will throw an exception. Casting Variant will cast to any of its target types without throwing an exception. If the Variant does not hold the target type, it will just give a null-or-similar result. This means a NULL treenode, empty string, empty Array, or 0.0 number. Variant num = 1; string asString = num; // empty string Variant str = \"Hello\"; double asNum = str; // 0.0 To determine the type of data that is held by a Variant, use the type property, or use the is() keyword. Variants as Objects If a variant holds a treenode with Object data, it can access Object properties and methods. However, the type property is simply a treenode type. In order to test if a Variant holds an Object node, you can use the is() keyword: Variant obj = param(1); if (obj.is(Object)) { obj.location = Vec3(1, 2, 3); } Variants as Arrays The Variant implements special logic associated with arrays in that you can treat a Variant like an Array even if it does not hold array data. If a Variant holds, for example, a string , you can treat the Variant as if it were a 1-length Array with a string as its first element. Variant val = \"Hello\"; int len = val.length; // len = 1 return val[len]; // returns \"Hello\"; Also, if you cast a Variant into a non-array type, and the Variant is in fact an Array, the cast operation will return the first element of the array. Thus you can even treat an Array Variant as a non-array type. Variant myArray = [\"Hello\", \"World\"]; string myString = myArray; return myString; // returns \"Hello\" These capabilities are especially useful in Process Flow, where you are often dealing with label values that may or may not contain array data, but you want to interface with those data in a consistent manner. Variants as Maps To use a Variant as a Map, you can use the dynamic properties of the Variant: // adds the key \"Key1\" with the value 3 to the map mapVariant.Key1 = 3 No other methods or properties of the Map are accessible from the Variant. To use them, you'll need to cast the Variant as a Map: Map map = mapVariant; // now you can access map methods and properties Array keys = map.keys; Null Values To check if a Variant is null you can compare the value with the special keyword nullvar or compare its type with the VAR_TYPE_NULL macro. Variant val; val == nullvar //true val.type == VAR_TYPE_NULL // true Where this gets more complicated is when dealing with treenode type Variants returned by other properies. See the discussion of treenode null values. Other data types do not have null types but have an empty type that corresponds to that type: string emptyString = \"\"; int emptyInt = 0; double emptyDouble = 0.0; Array emptyArray = []; Awaitable A Variant is awaitable, meaning it can be the predicate of an await statement. This will only cause suspension of the coroutine if the Variant is a reference to a Coroutine node that has been suspended. You can get a reference to a coroutine node by calling treenode . coevaluate () on a node that itself contains an await statement. Awaiting any other type of Variant value will do nothing. Properties animations Returns the animations property of an Object Variant. attrs Returns the attrs property of an Object Variant. centerObjects Returns the centerObjects property of an Object Variant. color Returns the color property of an Object Variant. dataType Gets/sets the dataType property on a treenode Variant. first Gets the first subnode of a treenode Variant. flags Returns the flags property of an Object Variant. inObjects Returns the inObjects property of an Object Variant. input Returns the input property of an Object Variant. labels Accesses the labels of a treenode Variant, or the string keys of a Map variant. last Gets the last subnode of a treenode Variant. length Gets/sets the Array length of a Variant. location Returns the location property of an Object Variant. name Gets/sets the name of a treenode Variant. next Gets the next node of a treenode Variant. outObjects Returns the outObjects property of an Object Variant. output Returns the output property of an Object Variant. prev Gets the next node of a treenode Variant. rank Gets/sets the rank of a treenode Variant. resetPosition Returns the resetPosition property of an Object Variant. rotation Returns the rotation property of an Object Variant. size Returns the size property of an Object Variant. stats Returns the stats property of an Object Variant. subnodes Accesses the subnodes of a treenode Variant. type Gets a Variant's type, one of VAR_TYPE_NUMBER, VAR_TYPE_STRING, VAR_TYPE_NODE, or VAR_TYPE_ARRAY up Gets/sets the parent of a treenode Variant. value Gets/sets the data value of a treenode Variant. Methods append Appends another Variant to this Variant. byteToCharIndex Returns the index of a given byte in a string Variant. charAt Returns the character at a given byte index in a string Variant. charToByteIndex Returns the byte index associated with a specific character index in a string Variant. clone Clones a Variant. concat Concatenates two Variants into an Array. copy Creates a new copy of a treenode Variant. destroy Destroys a treenode Variant. endsWith Queries whether a string Variant ends with a defined string. evaluate Evaluates a treenode Variant fill Fills an Array Variant with a defined value. find Finds a node in a treenode Variant's sub-tree by path. getLocation Gets an Object Variant's location. getPath Gets the path of a treenode Variant. getVariable Gets the value of an Object Variant's variable. includes Queries whether a string Variant includes a string. indexOf Gets the index of an element in an Array Variant. join Joins an Array Variant into a string. match Matches a reqular expression on a string Variant. message Send a message to the Object Variant. padEnd Pads the end of a string Variant with the padString to the given length. padStart Pads the start of a string Variant with the padString to the given length. pop Pops an element from an Array Variant. push Pushes a value onto an Array Variant. repeat Repeats a string Variant a number of times. replace Replaces text in a string Variant resume Return the Object Variant to its state prior to stop(). reverse Reverses an Array Variant search Searches a string Variant for an internal string or pattern. setLocation setRotation Sets the Object Variant's rotation. setSize Sets the Object Variant's size. setState Sets the Object Variant's state. setVariable Sets the value of an Object Variant's variable. shift Shifts (pops) an element from the front of an Array Variant. slice Returns a new Array made up of a subsection of an Array Variant. sort Sorts an Array Variant splice Removes and/or inserts elements into an Array Variant. split Splits a string Variant into an Array. startsWith Queries if a string Variant starts with a defined string. stop Stops the Object Variant, sets its state, and waits for resume(). substr Extracts a section of a string Variant and returns a new string. toLowerCase Creates a lower case string from a string Variant. toNum Interprets a string Variant's content as a floating point number. toUpperCase Creates an upper case string from a string Variant. trim Trims white space off of the ends of a string Variant. unshift Unshifts (pushes) a value onto the front of an Array Variant. Operators - Subtracts two numbers. -- Decrements a number Variant. ! Tests if a Variant is either a null Variant, a NULL treenode, or a 0.0 number. != Tests if a Variant is not equal to another value. % Returns the modulus of two numbers. * Multiplies two numbers. / Divides two numbers. [] Accesses an element of an Array Variant. + Adds two numbers. ++ Increments a number Variant += Increments a number Variant by a defined value, or appends a string to the current string Variant. < Tests if a Variant is less than a number. <= Tests if a Variant is less than or equal to a number. -= Decrements a number Variant by a defined value. == Tests if two values are equal to each other. > Tests if a Variant is greater than a number. >= Tests if a Variant is greater than or equal to a number. Details Do no remove, this fixes the anchor on doc.flexsim.com Variant .animations readonly animations Description Returns the animations property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .attrs readonly attrs Description Returns the attrs property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .centerObjects readonly centerObjects Description Returns the centerObjects property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .color readonly Color color Description Returns the color property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .dataType int dataType Description Gets/sets the dataType property on a treenode Variant. An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .first treenode first Description Gets the first subnode of a treenode Variant. Forwards to treenode . first . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .flags readonly flags Description Returns the flags property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .inObjects readonly inObjects Description Returns the inObjects property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .input readonly input Description Returns the input property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .labels readonly labels Description Accesses the labels of a treenode Variant, or the string keys of a Map variant. Forwards to treenode . labels , or to the Map . stringKeys . An exception is thrown if the Variant is not a treenode or Map type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .last treenode last Description Gets the last subnode of a treenode Variant. Forwards to treenode . last . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .length int length Description Gets/sets the Array length of a Variant. If the Variant is already an Array type, this will forward to Array . length . If the Variant is a null Variant, length will return 0. If it is a number, string , or treenode type, length will return 1. Variant myVar; // initialized as null Variant myVar.length; // returns 0 myVar = 5; // set to number type myVar.length; // returns 1 If length is set, the Variant will convert itself into an Array, and forward to Array . length Variant myArray = \"Hello\"; myArray.length = 2; // converts to Array and sets Array length to 2. Do no remove, this fixes the anchor on doc.flexsim.com Variant .location readonly Vec3 location Description Returns the location property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .name string name Description Gets/sets the name of a treenode Variant. Forwards to treenode . name . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .next readonly treenode next Description Gets the next node of a treenode Variant. Forwards to treenode . next . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .outObjects readonly outObjects Description Returns the outObjects property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .output readonly output Description Returns the output property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .prev readonly treenode prev Description Gets the next node of a treenode Variant. Forwards to treenode . prev . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .rank int rank Description Gets/sets the rank of a treenode Variant. Forwards to treenode . rank . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .resetPosition readonly resetPosition Description Returns the resetPosition property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .rotation readonly Vec3 rotation Description Returns the rotation property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .size readonly Vec3 size Description Returns the size property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .stats readonly stats Description Returns the stats property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .subnodes readonly subnodes Description Accesses the subnodes of a treenode Variant. Forwards to treenode . subnodes . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .type readonly int type Description Gets a Variant's type, one of VAR_TYPE_NUMBER, VAR_TYPE_STRING, VAR_TYPE_NODE, or VAR_TYPE_ARRAY Do no remove, this fixes the anchor on doc.flexsim.com Variant .up treenode up Description Gets/sets the parent of a treenode Variant. Forwards to treenode . up . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .value Variant value Description Gets/sets the data value of a treenode Variant. Forwards to treenode . value . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .append() Variant append( Variant val ) Parameters val The value to append to this Variant. Returns Variant The modified Variant Description Appends another Variant to this Variant. If this Variant is already an Array, this forwards to Array . append (). If the Variant is a null Variant, it will become val. If it is a non-array type, it will convert itself into an Array, and forward to Array . append (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .byteToCharIndex() int byteToCharIndex( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns int The 1-based character index of the character. Description Returns the index of a given byte in a string Variant. Forwards to string . byteToCharIndex . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .charAt() string charAt( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns string The target character, as a string. Description Returns the character at a given byte index in a string Variant. Forwards to string . charAt . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .charToByteIndex() int charToByteIndex( int charIndex ) Parameters charIndex The 1-based character index of the target character. Returns int The 1-based byte index of the character. Description Returns the byte index associated with a specific character index in a string Variant. Forwards to string . charToByteIndex . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .clone() Variant clone( ) Returns Variant A clone of the Variant. Description Clones a Variant. If the Variant is an Array type, this forwards to Array . clone (). Otherwise it just returns a copy of its value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .concat() Array concat( Array other ) Parameters other The Array to concatenate onto the end of this Variant. Returns Array The resulting Array. Description Concatenates two Variants into an Array. Forwards to Array . concat (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .copy() treenode copy( treenode destination = 0 , int replace = 0 ) Description Creates a new copy of a treenode Variant. Forwards to treenode . copy (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .destroy() destroy( ) Description Destroys a treenode Variant. Forwards to treenode . destroy (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .endsWith() int endsWith( string str ) Description Queries whether a string Variant ends with a defined string. Forwards to string . endsWith (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .evaluate() Variant evaluate( ) Variant evaluate( Variant p1 ... p20 ) Parameters p1-p20 The parameters to pass to the evaluation. Description Evaluates a treenode Variant Forwards to treenode . evaluate (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .fill() Variant fill( Variant value ) Description Fills an Array Variant with a defined value. Forwards to Array . fill (). If the Variant is not already an Array, it simply sets its value to the passed value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .find() treenode find( string path ) Description Finds a node in a treenode Variant's sub-tree by path. Forwards to treenode . find (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Vec3 A vector holding the object's location Description Gets an Object Variant's location. Forwards to Object . getLocation . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .getPath() string getPath( treenode relativeTo = 0 , int byName = 1 ) Description Gets the path of a treenode Variant. Forwards to treenode . getPath (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .getVariable() Variant getVariable( string variableName ) Parameters variableName The name of the variable Returns Variant The value of the specified variable. Description Gets the value of an Object Variant's variable. Forwards to Object . getVariable . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .includes() int includes( string str ) Description Queries whether a string Variant includes a string. Forwards to string . includes (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .indexOf() int indexOf( Variant ) Description Gets the index of an element in an Array Variant. Forwards to Array . indexOf (). If the Variant is not an Array, it is treated as an array of length 1. Do no remove, this fixes the anchor on doc.flexsim.com Variant .join() string join( string separator = 0 ) Description Joins an Array Variant into a string. Forwards to Array . join (). If the Variant is not already an Array, it will create a new Array from itself, and call join on that Array. Do no remove, this fixes the anchor on doc.flexsim.com Variant .match() Description Matches a reqular expression on a string Variant. Forwards to string . match (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .message() Variant message( double delayTime = 0 , treenode fromObj = 0 , Variant p1 = nullvar , Variant p2 = nullvar , Variant p3 = nullvar ) Parameters delayTime Optional. Specifies the amount of time to delay before firing the message. If -1, the message will be sent synchronously. If 0 or greater, an event will be created in the defined delay time, and the message will be fired after that delay time. fromObj Optional. The object that is sending the message. This can be accessed from the message trigger. p1 Optional. Defines the first parameter of the message. This can be accessed from the message trigger as msgparam1. p2 Optional. Defines the second parameter of the message. This can be accessed from the message trigger as msgparam2. p3 Optional. Defines the third parameter of the message. This can be accessed from the message trigger as msgparam3. Returns Variant If the message is sent synchronously (delay = -1), it will return whatever is returned by the object's message trigger. If the message is sent asynchronously (delay >= 0), the call will return a reference to the event node that was created in the event list. Description Send a message to the Object Variant. Forwards to Object . message . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .padEnd() string padEnd( int targetLength , string padString ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the end of a string Variant with the padString to the given length. Forwards to string . padEnd . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .padStart() string padStart( int targetLength , string padString ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the start of a string Variant with the padString to the given length. Forwards to string . padStart . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .pop() Variant pop( ) Description Pops an element from an Array Variant. Forwards to Array . pop (). If the Variant is not an Array, it will convert itself into a null Variant, and return its original value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .push() Variant push( Variant value ) Returns Variant The modified Variant. Description Pushes a value onto an Array Variant. Forwards to Array . push (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . push (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .repeat() string repeat( int numRepeats ) Description Repeats a string Variant a number of times. Forwards to string . repeat (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .replace() string replace( string findStr , string replaceWith ) Parameters findStr replaceWith findPattern Description Replaces text in a string Variant Forwards to string . replace (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .resume() resume( int id = 0 , int stateProfile = 0 ) Parameters id Optional. For matching stop requests with resume requests. stateProfile Optional. The state profile on which to record the state. Description Return the Object Variant to its state prior to stop(). Forwards to Object . resume . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .reverse() Variant reverse( ) Description Reverses an Array Variant Forwards to Array . reverse (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . reverse (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .search() int search( string str ) Parameters str The string or pattern to search for. Returns int If found, the 1-based byte index of the found string. Otherwise -1. Description Searches a string Variant for an internal string or pattern. Forwards to string . search . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setLocation() Object setLocation( double x , double y , double z ) Object setLocation( double x , double y , double z , double xFactor , double yFactor , double zFactor ) Object setLocation( Vec3 loc , Vec3 factors ) Parameters x The desired x position. y The desired y position. z The desired z position. xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). loc A vector holding the desired position. factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Object The translated object. Description Forwards to Object . setLocation . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setRotation() Object setRotation( double x , double y , double z ) Object setRotation( Vec3 rotation ) Parameters x The desired rotation about the x axis. y The desired rotation about the y axis. z The desired rotation about the z axis. rotation A vector of the desired rotation values. Returns Object The rotated object. Description Sets the Object Variant's rotation. Forwards to Object . setRotation . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setSize() Object setSize( double x , double y , double z ) Parameters x The desired x size. y The desired y size. z The desired z size. Returns Object The sized object. Description Sets the Object Variant's size. Forwards to Object . setSize . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setState() setState( int state , int profile ) Parameters state The desired state. profile The desired state profile. Description Sets the Object Variant's state. Forwards to Object . setState . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setVariable() setVariable( string variableName , Variant value ) Parameters variableName The name of the variable. value The desired variable value. Description Sets the value of an Object Variant's variable. Forwards to Object . setVariable . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .shift() Variant shift( ) Description Shifts (pops) an element from the front of an Array Variant. Forwards to Array . shift (). If the Variant is not an Array, it will convert itself into a null Variant, and return its original value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .slice() Array slice( int fromIndex , int toIndex ) Description Returns a new Array made up of a subsection of an Array Variant. Forwards to Array . slice (). If the Variant is not an Array, it will create an Array from itself and forward to Array . slice (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .sort() Variant sort( ) Description Sorts an Array Variant Forwards to Array . sort (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . sort (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .splice() Variant splice( int fromIndex , int removeCount ) Variant splice( int fromIndex , int removeCount , Array insertArray ) Returns Variant The modified Variant Description Removes and/or inserts elements into an Array Variant. Forwards to Array . splice (). If the Variant is not an Array, it will make itself into an Array and forward to Array . splice (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .split() Array split( string delimiter , int limit = -1 ) Description Splits a string Variant into an Array. Forwards to string . split (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .startsWith() int startsWith( string str ) Description Queries if a string Variant starts with a defined string. Forwards to string . startsWith (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .stop() stop( int stopState , int id = 0 , double priority = 0 , int stateProfile = 0 ) Parameters stopState The state the object will go into. id Optional. For matching stop requests with resume requests. priority Optional. For breaking ties between stop() calls. stateProfile Optional. The state profile on which to record the state. Description Stops the Object Variant, sets its state, and waits for resume(). Forwards to Object . stop . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .substr() string substr( int startIndex , int length ) Parameters startIndex The 1-based byte index of the first character to extract. If this index is in the middle of a multi-byte character, it will extract the full character. If it is a negative number, the start position is string.length + beginIndex, or in other words it is an offset from the end of the string. length The length of the target string, in bytes. Returns string The extracted string. Description Extracts a section of a string Variant and returns a new string. Forwards to string . substr . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .toLowerCase() string toLowerCase( ) Description Creates a lower case string from a string Variant. Forwards to string . toLowerCase (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .toNum() double toNum( ) Returns double The interpreted content of the string as a double. Description Interprets a string Variant's content as a floating point number. Forwards to string . toNum . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .toUpperCase() string toUpperCase( ) Description Creates an upper case string from a string Variant. Forwards to string . toUpperCase (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .trim() string trim( ) Description Trims white space off of the ends of a string Variant. Forwards to string . trim (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .unshift() Variant unshift( Variant value ) Returns Variant The modified Variant. Description Unshifts (pushes) a value onto the front of an Array Variant. Forwards to Array . unshift (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . unshift (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator - double operator -( double value ) double operator -( Variant value ) Parameters value The value to subtract from the Variant Returns double The result of the subtraction. Description Subtracts two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue - 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator -- double operator --( ) Description Decrements a number Variant. The following example uses treenode . labelProperties to decrement an object's label value. current.labelValue--; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator ! int operator !( ) Returns int True if the Variant is a null Variant, a NULL treenode, or the number 0.0. False otherwise. Description Tests if a Variant is either a null Variant, a NULL treenode, or a 0.0 number. The following example uses treenode . labelProperties to compare an object's label value. if (!current.labelValue) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator != int operator !=( int value ) int operator !=( double value ) int operator !=( string value ) int operator !=( treenode value ) int operator !=( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is not equal to value, false otherwise. Description Tests if a Variant is not equal to another value. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue != 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator % int operator %( int value ) int operator %( Variant value ) Parameters value The value used as the modulus. Returns int The modulus of the Variant and the other value. Description Returns the modulus of two numbers. The modulus operator returns the remainder of a division. Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator * double operator *( double value ) double operator *( Variant value ) Parameters value The value to multiply by. Returns double The multiplication product of the two values. Description Multiplies two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue * 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator / double operator /( double value ) double operator /( Variant value ) Parameters value The value to divide the Variant by. Returns double The result of the division. Description Divides two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue / 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator [] Variant operator []( int index ) Parameters index The index of the array element. Returns Variant The array element at the specified index. Description Accesses an element of an Array Variant. Forwards to the Array [] operator. The Variant implements special logic associated with arrays in that you can treat a Variant like an Array even if it does not hold array data. If a Variant holds, for example, a string , you can treat the Variant as if it were a 1-length Array with a string as its first element. Variant val = \"Hello\"; int len = val.length; // len = 1 return val[len]; // returns \"Hello\"; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator + double operator +( double value ) Variant operator +( Variant value ) Parameters value The value to add to the Variant. Returns double The addition result. Description Adds two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue + 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator ++ double operator ++( ) Description Increments a number Variant The following example uses treenode . labelProperties to increment an object's label value. current.labelValue++; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator += Variant operator +=( double value ) Variant operator +=( string value ) Parameters value The value to add to the Variant. Description Increments a number Variant by a defined value, or appends a string to the current string Variant. If both operands are strings, then the Variant will append value to itself. If both are numbers, the Variant will increment its value by value. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue - 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator < int operator <( int value ) int operator <( double value ) int operator <( Variant value ) Parameters value Returns int Description Tests if a Variant is less than a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue < 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator <= int operator <=( int value ) int operator <=( double value ) int operator <=( Variant value ) Parameters value Returns int Description Tests if a Variant is less than or equal to a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue <= 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator -= Variant operator -=( double value ) Parameters value The value to decrement the Variant by. Description Decrements a number Variant by a defined value. The following example uses treenode . labelProperties to decrement an object's label value. current.labelValue -= 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator == int operator ==( int value ) int operator ==( double value ) int operator ==( string value ) int operator ==( treenode value ) int operator ==( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is equal to value, false otherwise. Description Tests if two values are equal to each other. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue == 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator > int operator >( int value ) int operator >( double value ) int operator >( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is greater than value, false otherwise. Description Tests if a Variant is greater than a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue > 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator >= int operator >=( int value ) int operator >=( double value ) int operator >=( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is greater than or equal to value, false otherwise. Description Tests if a Variant is greater than or equal to a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue >= 5) { ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Array.html",
        "title": "FlexScript Class - Array",
        "content": "Description A dynamic array of Variant s. Initialize an Array of 5 elements: Array myArray = Array(5); Arrays in FlexSim are 1-based, meaning the first element in the array is accessed via index 1. double myVal = myArray[1]; // 1st element myArray[2] = 5; // 2nd element myArray[4] = 3.2; // 4th element Since the Array is an array of Variant s, you can set each element to anything that a Variant can hold, namely a number, string , treenode , or Array. myArray[2] = \"Hello World\"; myArray[3] = 5.7; myArray[4] = Model.find(\"Source1\"); myArray[5] = Array(10); // now you can access myArray[5][2] You can also fill an array with an initializer list. Array myArray = [4.5, \"Hello World\", model(), [\"Another\", \"Array\"]]; By default, Arrays are passed around as shared references. This means if you set one Array variable to another Array variable, you are setting the variable to a reference to the first Array, not a copy of the first Array. Thus, if you change either variable's referenced Array data, and it will change it for both variables. Array array1 = [\"Hello\", \"World\"]; Array array2 = array1; array2[1] = \"Goodbye\"; // both array1 and array2 are [\"Goodbye\", \"World\"] To do a deep copy of an Array, use the clone () method. Array array1 = [\"Hello\", \"World\"]; Array array2 = array1.clone(); array2[1] = \"Goodbye\"; // array2 is [\"Goodbye\", \"World\"], array1 is unchanged. Properties length The number of elements in the array. Methods append Appends another array to the end of the array. clone Creates a copy of the array. concat Creates a new array by appending another array to the end of the array. fill Fills the array with a value. indexOf Searches the array for an element and returns its index. join Makes a string by concatenating each element. pop Removes and returns the last element of an array. push Adds a new element to the end of the array. reverse Reverses the order of the elements in the array. shift Removes and returns the first element of an array. slice Copies part of the array. sort Sorts the elements in the array. splice Adds and/or removes elements from an array. unshift Adds a new element to the start of the array. Constructor Array Creates a new array of the given size. Operators != Compares if the array is not equal to another array. [] Gets or sets an element. == Compares the array to another array. Details Do no remove, this fixes the anchor on doc.flexsim.com Array .length int length Description The number of elements in the array. int numElements = myArray.length; Can also be used to set the size of the array. Array myArray = [1,2,3,4,5]; myArray.length = 3; // [1,2,3] Do no remove, this fixes the anchor on doc.flexsim.com Array .append() Array append( Array otherArray ) Parameters otherArray The array to append to this array. Returns Array The modified array. Description Appends another array to the end of the array. Array myArray = [1,2,3,4,5]; myArray.append([7,8,9]); //[1,2,3,4,5,7,8,9] Do no remove, this fixes the anchor on doc.flexsim.com Array .clone() Array clone( ) Returns Array A copy of the array. Description Creates a copy of the array. Array myArray = [1,2,3,4,5]; Array copy = myArray.clone(); myArray.push(6); // myArray - [1,2,3,4,5,6] // copy - [1,2,3,4,5] Do no remove, this fixes the anchor on doc.flexsim.com Array .concat() Array concat( Array otherArray ) Parameters otherArray The array to concatenate with this array. Returns Array A new array made by concatenating the arrays. Description Creates a new array by appending another array to the end of the array. Array concatArray = myArray.concat([7,8,9]); // myArray - [1,2,3,4,5] // concatArray - [1,2,3,4,5,7,8,9] Similar to the append method except that the append method modifies the original array, whereas concat makes a new array. Do no remove, this fixes the anchor on doc.flexsim.com Array .fill() Array fill( Variant val ) Parameters val The value each element will now hold. Returns Array The modified array. Description Fills the array with a value. This code sets each element to 0. Array myArray = [1,2,3,4,5]; myArray.fill(0); // [0,0,0,0,0] Do no remove, this fixes the anchor on doc.flexsim.com Array .indexOf() int indexOf( Variant val ) Parameters val The element to look for. Returns int The index of the first occurence of the element in the array. Description Searches the array for an element and returns its index. Returns -1 if the element is not found in the array. Array myArray = [\"Apple\",\"Orange\",\"Mango\",\"Pear\"]; int index = myArray.indexOf(\"Mango\"); // 3 int index = myArray.indexOf(2); // -1 Do no remove, this fixes the anchor on doc.flexsim.com Array .join() string join( string separator = 0 ) Parameters separator A string value that will be placed between elements when concatenating. Returns string The string of concatenated elements separated by the separator. Description Makes a string by concatenating each element. Array myArray = [1,2,3,4,5]; string joined = myArray.join(\"-\"); // \"1-2-3-4-5\" Do no remove, this fixes the anchor on doc.flexsim.com Array .pop() Variant pop( ) Returns Variant The last element of the array. Description Removes and returns the last element of an array. Array myArray = [1,2,3,4,5]; Variant lastVal = myArray.pop(); // 5 //myArray - [1,2,3,4] Do no remove, this fixes the anchor on doc.flexsim.com Array .push() Array push( Variant val ) Parameters val The new array element. Returns Array The modified array. Description Adds a new element to the end of the array. Array myArray = [1,2,3,4,5]; myArray.push(6); // [1,2,3,4,5,6] Do no remove, this fixes the anchor on doc.flexsim.com Array .reverse() Array reverse( ) Returns Array The modified array. Description Reverses the order of the elements in the array. Array myArray = [1,2,3,4,5]; myArray.reverse(); // [5,4,3,2,1] Do no remove, this fixes the anchor on doc.flexsim.com Array .shift() Variant shift( ) Returns Variant The first element of the array. Description Removes and returns the first element of an array. Array myArray = [1,2,3,4,5]; Variant firstVal = myArray.shift(); // 1 //myArray - [2,3,4,5] Do no remove, this fixes the anchor on doc.flexsim.com Array .slice() Array slice( int fromIndex , int toIndex ) Parameters fromIndex The index of the first element in the selection. toIndex The index of the element after the last element in the selection. Returns Array A copy of part of the array. Description Copies part of the array. Array myArray = [1,2,3,4,5]; Array copy = myArray.slice(2, 5); // [2,3,4] //myArray - [1,2,3,4,5] Selects the elements starting at fromIndex, and ends at, but does not include, toIndex. Do no remove, this fixes the anchor on doc.flexsim.com Array .sort() Array sort( ) Returns Array The modified array. Description Sorts the elements in the array. Array myArray = [1,3,5,2,4]; myArray.sort(); // [1,2,3,4,5] Array myArray2 = [\"a\",\"c\",\"e\",\"b\",\"d\"]; myArray2.sort(); // [\"a\",\"b\",\"c\",\"d\",\"e\"] Do no remove, this fixes the anchor on doc.flexsim.com Array .splice() Array splice( int fromIndex , int count ) Array splice( int fromIndex , int count , Array insert ) Parameters fromIndex The index where elements will be removed and then added. count The number of elements to remove. insert An array of elements to be added at the fromIndex. Returns Array The modified array. Description Adds and/or removes elements from an array. Array cars = [\"Volvo\", \"BMW\", \"Audi\", \"Ford\"]; cars.splice(2, 2); // [\"Volvo\", \"Ford\"] cars.splice(3, 1, [\"Lotus\", \"Kia\"]); // [\"Volvo\", \"BMW\", \"Lotus\", \"Kia\", \"Ford\"] Do no remove, this fixes the anchor on doc.flexsim.com Array .unshift() Array unshift( Variant val ) Parameters val The new array element. Returns Array The modified array. Description Adds a new element to the start of the array. Array myArray = [1,2,3,4,5]; myArray.unshift(6); // [6,1,2,3,4,5] Do no remove, this fixes the anchor on doc.flexsim.com Array Constructor Array( int size ) Parameters size The size of the new array. Description Creates a new array of the given size. Array myArray = Array(5); // [,,,,] Do no remove, this fixes the anchor on doc.flexsim.com Array .operator != int operator !=( Array other ) Parameters other The other array to compare this array to. Returns int False (0) if all elements of both arrays are the same. True (1) otherwise. Description Compares if the array is not equal to another array. Array myArray = [1,2,3,4,5]; Array otherArray1 = [1,2,3,4,5]; Array otherArray2 = [1,2,4,5]; myArray != otherArray1; // false myArray != otherArray2; // true Do no remove, this fixes the anchor on doc.flexsim.com Array .operator [] Variant operator []( int index ) Parameters index The index of an element Returns Variant An element of the array. Description Gets or sets an element. Array myArray = [1,2,3,4,5]; myArray[2] = 6; // [1,6,3,4,5] Variant value = myArray[3]; // 3 Do no remove, this fixes the anchor on doc.flexsim.com Array .operator == int operator ==( Array other ) Parameters other The other array to compare this array to. Returns int True (1) if all elements of both arrays are the same. False (0) otherwise. Description Compares the array to another array. Array myArray = [1,2,3,4,5]; Array otherArray1 = [1,2,3,4,5]; Array otherArray2 = [1,2,4,5]; myArray == otherArray1; // true myArray == otherArray2; // false"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Table.html",
        "title": "FlexScript Class - Table",
        "content": "Description A class that represents a table structure. A Table contains methods and properties associated with manipulating table data in FlexSim. A Table may be one of the following: A Tree Table : This is a table whose data is defined in the tree structure. This consists of a root node with one or more subnodes, each representing a row in the table. Subnodes of each row represent cells in the table. A Bundle Table : This is a table whose data is defined by a bundle node. This consists of a node in the tree that contains bundle data. A Query Result Table : This is a read-only in-memory table that contains the result of a call to Table . query (). An Array Table : This is an in-memory table that references a two-dimensional array. Bundle and tree tables can be stored anywhere in the model tree. Often they are stored as global tables, or on object labels. Properties numCols The number of columns in the table. numRows The number of rows in the table. Methods addCol Adds a column to the table. addIndex Adds an index to the specified column. addRow Adds a row to the table. cell Returns a specific table cell. clear Sets all cells to empty values. clone Creates an array copy of the table. cloneTo Copies all values from this table to the target table, returning the target table. deleteCol Deletes a table column. deleteRow Deletes a table row. executeCell Executes the text on the cell as FlexScript. getColHeader Gets a table column header. getColNum Gets the index of a table column header. getRowByKey Searches a column for the specified key value. getRowHeader Gets a table row header. getRowNum Gets the index of a table row header. getValueByKey Searches a column for the specified key value, and returns one or more values from the matching row. hasIndex Returns the index type of the specified column if it has an index, otherwise 0. moveCol Moves a column to a new index. moveRow Moves a row to a new index. removeIndex Removes an index from the specified column setColHeader Renames a column header. setRowHeader Renames a row header. setSize Resizes the table. sort Sorts table columns. swapCols Swaps indexes of the two columns. swapRows Swaps indexes of the two rows. Constructor Table Creates a reference to a table. Static Methods query Executes an SQL query, returning the result as a Table. Operators [] Gets or sets the value of a table cell. = Assigns a reference to a treenode to the Table object. Details Do no remove, this fixes the anchor on doc.flexsim.com Table .numCols readonly int numCols Description The number of columns in the table. int columns = table.numCols; For bundles it is the number of fields. Do no remove, this fixes the anchor on doc.flexsim.com Table .numRows readonly int numRows Description The number of rows in the table. int rows = table.numRows; For bundles it is the number of entries. Do no remove, this fixes the anchor on doc.flexsim.com Table .addCol() Table addCol( int col = 0 , int datatype = 0 ) Parameters col The index at which to insert the column. datatype The datatype of the new column. Returns Table The table. Description Adds a column to the table. table.addCol(2); If no column index is specified the column will be added at the end. If no datatype is specified the new column will copy the datatype of the previous column. Do no remove, this fixes the anchor on doc.flexsim.com Table .addIndex() addIndex( Variant keyCol , int indexType = Table.IndexType.Unordered ) Parameters keyCol A column name or number indexType The type of index desired. Can be either Table.IndexType.Unordered or Table.IndexType.Ordered. Generally the default unordered value is sufficient. Table.IndexType.Ordered can be useful if you are querying the table with Table . query () with a WHERE filter that uses a >, <, >=, or <= comparison on the column. Description Adds an index to the specified column. An index can significantly improve the performance of the following operations: Using the Table . getRowByKey () method with the indexed column Using the Table . getValueByKey () method with the indexed column Finding a value from the indexed column in a query (e.g. WHERE IndexedCol = SomeValue An index can significantly slow performance to operations that change the table. If a table changes frequently during the model run, an index is not recommended. You can only add an index to a column in a Bundle table. Do no remove, this fixes the anchor on doc.flexsim.com Table .addRow() Table addRow( int row = 0 , int datatype = 0 ) Parameters row The index at which to insert the row. datatype The datatype of the new row. Returns Table The table. Description Adds a row to the table. table.addRow(2); If no row index is specified the row will be added at the end. If no datatype is specified the cells will copy the datatype of the cells in the previous row. Do no remove, this fixes the anchor on doc.flexsim.com Table .cell() treenode cell( Variant row , Variant col ) Parameters row The row index. col The column index. Returns treenode The cell's node in the tree. Description Returns a specific table cell. table.cell(2,\"Row 3\").value = 4; This will throw an exception for bundles. Do no remove, this fixes the anchor on doc.flexsim.com Table .clear() Table clear( int recursive = 0 ) Parameters recursive If set to 1, clear will be called on cells with bundle data, array data and on cells that have node tables. Returns Table The table. Description Sets all cells to empty values. table.clear(); table.clear(1); Number cells will be set to 0, string cells to an empty string, and pointer cells will be set to a null pointer. Do no remove, this fixes the anchor on doc.flexsim.com Table .clone() Array clone( ) Returns Array A copy of the table in an array. Description Creates an array copy of the table. Array myArray = Table(\"Parts\").clone(); Do no remove, this fixes the anchor on doc.flexsim.com Table .cloneTo() Table cloneTo( Table target ) Parameters target The target table. This must be a tree-bound table, such as a bundle or tree table. Returns Table The resulting table. This is the same table as the target. Description Copies all values from this table to the target table, returning the target table. Table.query(\"SELECT * FROM Customers ORDER BY Name\").cloneTo(Table(\"QueryDump\")); Do no remove, this fixes the anchor on doc.flexsim.com Table .deleteCol() Table deleteCol( int col ) Parameters col The index of the column to delete. Returns Table The table. Description Deletes a table column. table.deleteCol(3); Will throw an exception if no column is specified or the column doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .deleteRow() Table deleteRow( int row ) Parameters row The index of the row to delete. Returns Table The table. Description Deletes a table row. table.deleteRow(3); Will throw an exception if no row is specified or the row doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .executeCell() Variant executeCell( Variant row , Variant col ) Parameters row The row index. col The column index. Returns Variant The return value of the executed function. Description Executes the text on the cell as FlexScript. Variant result = table.executeCell(2, \"Row 3\"); Do no remove, this fixes the anchor on doc.flexsim.com Table .getColHeader() string getColHeader( int colNum ) Parameters colNum The column index. Returns string The text in the column header. Description Gets a table column header. string header = table.getColHeader(2); Do no remove, this fixes the anchor on doc.flexsim.com Table .getColNum() int getColNum( string colHeader ) Parameters colHeader The column header. Returns int The index of the column header. Description Gets the index of a table column header. int col = table.getColNum(\"Orders\"); Returns 0 if the column header doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .getRowByKey() int getRowByKey( Variant key , Variant keyCol = nullvar ) Parameters key The value to use as the key keyCol The column to search for the key value. Returns int The row number containing the key value in the specified column. If no match was found, returns 0. Description Searches a column for the specified key value. If the keyCol is not specified, the first indexed column in the table will be searched. If there is no indexed column, the first column (column 1) will be searched. If the column to search has an index, then the index will be used to look up the correct row, rather than searching row by row. Do no remove, this fixes the anchor on doc.flexsim.com Table .getRowHeader() string getRowHeader( int rowNum ) Parameters rowNum The row index. Returns string The text in the row header. Description Gets a table row header. string header = table.getRowHeader(2); Do no remove, this fixes the anchor on doc.flexsim.com Table .getRowNum() int getRowNum( string rowHeader ) Parameters rowHeader The row header. Returns int The index of the row header. Description Gets the index of a table row header. int row = table.getRowNum(\"Type\"); Returns 0 if the row header doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .getValueByKey() Variant getValueByKey( Variant key , Variant valueCol , Variant keyCol = nullvar ) Parameters key The value to use as the key valueCol A column (name or number) to retrieve data from. keyCol The column to search for the key value. Returns Variant The value in the valueCol in the matching row. Description Searches a column for the specified key value, and returns one or more values from the matching row. If the keyCol is not specified, the first indexed column in the table will be searched. If there is no indexed column, the first column (column 1) will be searched. If the column to search has an index, then the index will be used to look up the correct row, rather than searching row by row. Once the matching row is found, the value in valueCol on that row is retrieved. If valueCol is an array, the values from each specified column will be retrieved, and returned as an array. Do no remove, this fixes the anchor on doc.flexsim.com Table .hasIndex() int hasIndex( Variant keyCol ) Parameters keyCol A column name or number Returns int If the specified column has an index, returns either Table.IndexType.Ordered or Table.IndexType.Unordered. Description Returns the index type of the specified column if it has an index, otherwise 0. An index can be added using the Table . addIndex () method. Do no remove, this fixes the anchor on doc.flexsim.com Table .moveCol() Table moveCol( int col , int newCol ) Parameters col The index of the column to move. newCol The index where the column will be moved. Returns Table The table. Description Moves a column to a new index. table.moveCol(2, 5); Do no remove, this fixes the anchor on doc.flexsim.com Table .moveRow() Table moveRow( int row , int newRow ) Parameters row The index of the row to move. newRow The index where the row will be moved. Returns Table The table. Description Moves a row to a new index. table.moveRow(2, 5); Do no remove, this fixes the anchor on doc.flexsim.com Table .removeIndex() removeIndex( Variant keyCol ) Parameters keyCol A column name or number. Description Removes an index from the specified column An index can be added using the Table . addIndex () method. If the specified column does not have an index, this method does nothing. Do no remove, this fixes the anchor on doc.flexsim.com Table .setColHeader() Table setColHeader( int colNum , string name ) Parameters colNum The column index. name The new column header name. Returns Table The table. Description Renames a column header. table.setColHeader(2, \"Orders\"); Do no remove, this fixes the anchor on doc.flexsim.com Table .setRowHeader() Table setRowHeader( int rowNum , string name ) Parameters rowNum The row index. name The new row header name. Returns Table The table. Description Renames a row header. table.setRowHeader(2, \"Order 2\"); Do no remove, this fixes the anchor on doc.flexsim.com Table .setSize() Table setSize( int rows , int cols , int datatype = 0 , int overwrite = 0 ) Parameters rows The new number of rows. cols The new number of columns. datatype The datatype of new cells. overwrite If old cells should have their values reset. Returns Table The table. Description Resizes the table. table.setSize(5, 3); Do no remove, this fixes the anchor on doc.flexsim.com Table .sort() Table sort( Variant columns , Variant sortDirections = 0 ) Parameters columns The column or columns to sort. sortDirections The directions each column should be sorted. 0 is Descending and 1 is Ascending. Returns Table The table. Description Sorts table columns. table.sort(1); table.sort([1, 2, 3], [1, 0, 1]); Do no remove, this fixes the anchor on doc.flexsim.com Table .swapCols() Table swapCols( int col , int col2 ) Parameters col The index of the first column. col2 The index of the ssecond column. Returns Table The table. Description Swaps indexes of the two columns. table.swapCols(2, 4); Do no remove, this fixes the anchor on doc.flexsim.com Table .swapRows() Table swapRows( int row , int row2 ) Parameters row The index of the first row. row2 The index of the second row. Returns Table The table. Description Swaps indexes of the two rows. table.swapRows(2, 4); Do no remove, this fixes the anchor on doc.flexsim.com Table Constructor Table( string name ) Table( treenode node ) Table( Array array ) Table( Variant value ) Parameters name The name of a global table. node A table-like treenode. The node should either have Bundle data, or have table-structured subnodes. value A global table name or table-like treenode. array A two-dimensional array. The first dimension spans the rows whereas the second dimension spans the columns. For example, you could get the result of a call to Storage.System . querySlots (), and construct a Table based on that result. Description Creates a reference to a table. If you pass in a string, FlexSim will search for a globally-defined table in the following order: Global Tables Statistics Collectors Calculated Tables State Tables Property Tables Table parts = Table(\"Parts\"); int partCount = Table(\"Parts\")[3][4]; Do no remove, this fixes the anchor on doc.flexsim.com Table .query() static Table query( string queryStr , lambda p1 ... p9 = 0 ) Parameters queryStr The sql query. p1-p9 Only used if you include $ syntax in the query. This defines additional, dynamically evaluated parameters associated with the query. The value is a \"lambda\", a type that simply signifies that the parameter is evaluated as-needed, not immediately when the method is called. You will usually either pass a reference to a table node here, defining the table to query, or you will use the $iter() command in a FlexScript expression to dynamically determine the value of a cell in a \"virtual table.\" If this parameter defines a table, it must be a tree-bound table or a direct reference to a node. In other words, it cannot be the result Table of another call to Table.query(), unless you clone that result to a tree-bound table with Table . cloneTo (). See Sql Query Examples for more information. Returns Table The resulting table. This is a read-only in-memory table (it is not stored on a node in the tree). Use Table . cloneTo () to copy the result to a tree-bound table. Description Executes an SQL query, returning the result as a Table. Table result = Table.query(\"SELECT * FROM Customers ORDER BY Name\"); See Sql Query Examples for more information. Do no remove, this fixes the anchor on doc.flexsim.com Table .operator [] Variant operator []( Variant index ) Parameters index The index or name of a row or column. Returns Variant The variant held by the table cell. If the cell is a FlexScript node this returns the result of executing the code. Description Gets or sets the value of a table cell. Variant value = table[2][\"Orders\"]; table[2][\"Orders\"] = 5; An exception will be thrown if the name of a row or column that does not exist is specified. To check that a row or columns with a certain name exists use Table . getColNum () or Table . getRowNum (). Do no remove, this fixes the anchor on doc.flexsim.com Table .operator = Table operator =( treenode node ) Parameters node The node holding a table. Returns Table The table. Description Assigns a reference to a treenode to the Table object. Table table = Table(\"Data\"); Table labelTable = current.labels[\"TableData\"];"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/FlexScriptClassReference.html",
        "title": "FlexScript Class Reference",
        "content": "The following table lists all object types that are available in FlexScript. Agent Provides access to data and methods related to Agents who are members of an Agent System. Agent.SocialForceState Provides access to data and methods related to an agent's social force state. Agent.System Provides access to data and methods related to a System of an Agents. AGV Provides access to data and methods related to AGV travel. AGV.AllocatableObject An object that can be allocated by an AGV. AGV.AllocationPoint A structure containing information about a planned AGV allocation. AGV.BodyOffset Enumerates possible AGV body offset values AGV.Connections An interface for accessing AGV control point connections. AGV.Request An enumeration of values to be returned by an AGV.AllocatableObject's OnRequest trigger. AGV.RequestState An enumeration of possible values for the AGV.AllocationPoint.requestState property. AGV.RoutingConstraint Enumerates possible routing constraint values used in AGV.AllocatableObject.routingConstraint AGV.Trailer Provides access to data and methods related a trailer attached to an AGV. AGV.TravelPathSection A structure representing a traversal of a specific section of path during an AGV's travel operation. AGV.TraversalPoint A structure containing information about a planned AGV 'traversal'. Animation A class that represents an object animation. Array A dynamic array of Variants. AStar Provides access to data related to the A* module. AStar.Allocation Provides access to data and methods associated with an A* grid cell allocation. AStar.Cell Provides access to data and methods associated with an A* grid cell. AStar.Direction An enumeration of integer values associated with four A* travel directions. AStar.Navigator Provides access to data and methods related to a model's A* navigator. AStar.Traveler Provides access to data and methods related to an A* traveler. Color A class containing rgba values for an object's color. Conveyor A class that provides properties and methods for monitoring and controlling a conveyor. Conveyor.DecisionPoint A class that provides properties for monitoring a conveyor decision point, photo eye, or station. Conveyor.Item A class that provides properties and methods for monitoring and controlling an item on a conveyor. Conveyor.MergeController Allows access to the lanes of a MergeController object Conveyor.Motor A class that provides properties and methods for controlling a conveyor motor. Conveyor.SlugBuilder Accesses data dealing with a conveyor's slug building state Coroutine An opaque class representing a paused coroutine. Database.Connection A class for connecting to and querying a database. Database.DataType A class that enumerates various database storage types. Database.PreparedStatement A class for execution and manipulation of a database SQL statement. Database.ResultSet A class for retrieving the result of a database SQL query. DateTime A class containing functions for getting and manipulating dates and times. Delay An opaque awaitable type, specifically used in coroutines, representing an abstract delay time. Dispatcher A class that represents an Object with a task sequence queue, and implements logic to receive and dispatch TaskSequences. double A number type that represents a wide, dynamic range of values by using a floating point. ElevatorBank A class that represents a bank of elevators. ElevatorBank.Elevator A class that represents an elevator member of an ElevatorBank. ElevatorBank.Request A class that represents a request for an ElevatorBank.Elevator. Empirical A class that represents an Empirical Distribution. Event An opaque awaitable type, specifically used in coroutines, representing an event owned by a specific object, that can be 'awaited', or listened to. EventLog A class that provides access to the event log. Group A class for grouping objects. Http.Method An enumeration of integer values representing Http Request Methods. Http.Request A class for creating a Http Request. Http.Response A class representing the Response to a Http Request. int A number type that holds a finite range of integers. Min Value = -2147483647 Max Value = 2147483647 JSON A class containing common JSON functions. lambda Allows an expression to be passed in as a parameter without immediatly being evaulated. List A class that represents a list. List.BackOrder A class that represents a list back order. List.Entry A class that represents a list entry. List.PullResult A class that represents the result of a call to List.pull(). List.PushResult A class that represents the result of a call to List.push(). Map An associative array of Variant keys and values. Mat4 Represents a matrix for performing space/vector transformations. Math A class containing common math functions. Model A class containing data and functions for the model. Navigator A class that represents a TaskExecuter's navigator. In other words, the object that manages travel tasks for the task executer. Object A class that represents objects in the model. PowerPoint A class for accessing PowerPoint. PowerPoint.Layout An enumeration of integer values associated with PowerPoint slide layouts. PowerPoint.Presentation A class for creating, opening, and editing PowerPoint presentations. PowerPoint.Shape A class for managing and editing PowerPoint shapes. PowerPoint.ShapeType An enumeration of integer values associated with PowerPoint shape types. PowerPoint.Slide A class for managing and editing PowerPoint slides. PowerPoint.SlideSizeType An enumeration of integer values associated with PowerPoint slide size types. RegExp Allows regular expressions to be used as function parameters. RegExResult A class that handles the results of a RegEx match StatisticsCollector A class that represents a Statistics Collector StatisticsCollector.CollectedData Provides access to data that may be used in Statistics Collector callbacks. Storage The storage namespace. Storage.Bay A class that represents a storage bay. Storage.Item A class that includes properties and functionality associated with the storage and assignment of a flow item to Storage.Slots. Storage.Item.State A class that enumerates the storage item states. Storage.Level A class that represents a storage level within a bay. Storage.Object A storage object, with functionality and data for storing items in a 2-dimensional grid of bays, levels, and slots Storage.QueryFlags Enumerates possible flags that can be passed as the flags parameter into Storage.System.findSlot(), Storage.System.querySlots(), Storage.System.findItem(), or Storage.System.queryItems(). Storage.Slot A slot that is part of a storage object's grid of storable slots. Storage.Slot.Item A class that represents a storage slot item. Storage.System A class that represents a storage system. string A class that represents a sequence of characters. Table A class that represents a table structure. Table.IndexType Enumerates types of indices on the table. TableValidation A class that represents a Table Validation. TableValidation.Context A class that represents a TableValidation Context. The context stores data that persists through the duration of a rule. TaskExecuter A class that represents a Dispatcher that can also execute TaskSequences. TaskSequence A class representing a sequence of tasks to be performed by a TaskExecuter. TaskSequence.Task A class representing an individual task in a TaskSequence. Token A class that represents a Process Flow token. Tools A class for creating and getting Tool nodes. TrackedVariable A class that represents a tracked variable. treenode A class that represents a reference to a node in FlexSim's tree. USD.Attribute A class that represents a USD Property. USD.Prim A class that represents a USD Prim. USD.Property A class that represents a USD Property. USD.Reference A class that represents an SdfReference from the OpenUSD API. USD.References A class that represents a UsdReferences object from the OpenUSD API. USD.Relationship A class that represents a USD Relationship. USD.Stage A class that represents a USD Stage. Variant A type that can hold either a number, a string, a treenode or an Array. Vec2 Represents positions, rotations, size, 2D vectors, and points. Contains functions for doing common vector operations. Vec3 Represents positions, rotations, size, 3D vectors, and points. Contains functions for doing common vector operations. Vec4 Represents a vector that includes x, y, z, and w components. XML Namespace for the XML functions. Contains a few static functions. XML.Comment A class that represents an XML Comment. XML.Declaration A class that represents an XML Declaration. XML.Document A class that represents an XML Document. XML.Element A class that represents an XML Element. XML.Node A base class for other XML Nodes. XML.NodePlacement An enumeration of integer values associated with XML node placement. Primarily used with the XML.Node's create functions. XML.NodePlacement. Last is default behavior. XML.Text A class that represents an XML Text. XML.Unknown A class that represents something the XML parser doesn't recognize."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Agent/Agent.html",
        "title": "FlexScript Class - Agent",
        "content": "Description Provides access to data and methods related to Agents who are members of an Agent System. Properties object Gets the object associated with the agent. socialForce Accesses the social force state of the agent. Methods activateBehavior Activates a named behavior of an agent. deactivateBehavior Deactivates a named behavior of an agent. neighbors Retrieves the set of in-proximity neighbors associated with a behavior. Constructor Agent Gets access to the Agent associated with an Object. Details Do no remove, this fixes the anchor on doc.flexsim.com Agent .object Object object Description Gets the object associated with the agent. Do no remove, this fixes the anchor on doc.flexsim.com Agent .socialForce Agent.SocialForceState socialForce Description Accesses the social force state of the agent. If the agent does not have a social force behavior activated, this property will be null. Do no remove, this fixes the anchor on doc.flexsim.com Agent .activateBehavior() activateBehavior( string name ) Parameters name The name of the behavior you want to activate Description Activates a named behavior of an agent. agent.activateBehavior(\"ProsimityBehavior\"); Do no remove, this fixes the anchor on doc.flexsim.com Agent .deactivateBehavior() deactivateBehavior( string name ) Parameters name The name of the behavior you want to deactivate Description Deactivates a named behavior of an agent. agent.deactivateBehavior(\"ProsimityBehavior\"); Do no remove, this fixes the anchor on doc.flexsim.com Agent .neighbors() neighbors( string behaviorID = nullvar ) Parameters behaviorID Usually this is the name of the behavior you want to deactivate. If you do not pass this behavior in, then it will use the first activated proximity behavior it finds. If you have a reference to the behavior node, you can pass this as well, and it will return the neighbors for that behavior. Description Retrieves the set of in-proximity neighbors associated with a behavior. var neighbors = agent.neighbors(\"ProsimityBehavior1\"); Do no remove, this fixes the anchor on doc.flexsim.com Agent Constructor Agent( Object object ) Parameters object An object that is a member of an agent system. Returns Agent An AGV object Description Gets access to the Agent associated with an Object. To access the Agent associated with an object, you must either use this constructor, or call Agent.System . getAgent . If an object is a member of multiple agent systems, then calling this constructor will access the first system the object is a member of. Casting from a treenode is not correct. You should use this constructor instead of the as() casting method. Using as() on an object will not work properly. Agent agent = Agent(object); // correct Agent agent = object; // auto-downcast: incorrect Agent agent = object.as(Agent); // explicit cast: incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Agent/Agent.SocialForceState.html",
        "title": "FlexScript Class - Agent.SocialForceState",
        "content": "Description Provides access to data and methods related to an agent's social force state. This can be used in custom social force fields to get/set forces on the agent. It can also be used in other contexts to retrieve information about the current social forces acting upon the agent. Properties center The agent's current center point. force The agent's current force. friction The scalar value of the agent's current friction force. This is only applicable if the agent has a friction force applied. goal The agent's current goal location. hasGoal 1 if the agent currently has a goal, 0 otherwise. velocity The agent's current velocity. Details Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .center readonly Vec3 center Description The agent's current center point. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .force Vec3 force Description The agent's current force. You can only set this force as part of a custom social force. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .friction readonly double friction Description The scalar value of the agent's current friction force. This is only applicable if the agent has a friction force applied. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .goal readonly Vec3 goal Description The agent's current goal location. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .hasGoal readonly int hasGoal Description 1 if the agent currently has a goal, 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .velocity readonly Vec3 velocity Description The agent's current velocity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Agent/Agent.System.html",
        "title": "FlexScript Class - Agent.System",
        "content": "Description Provides access to data and methods related to a System of an Agent s. Methods createAgent Creates a new agent that is associated with the passed object. getAgent Returns the agent that is associated with the passed object, if one exists. Constructor System Accesses a system in the model with a given name. Details Do no remove, this fixes the anchor on doc.flexsim.com Agent.System .createAgent() Agent createAgent( Object object ) Parameters object The model object that you want the agent to be associated with. Returns Agent A newly created agent Description Creates a new agent that is associated with the passed object. Agent newAgent = Agent.System(\"ProximitySystem\").createAgent(current) Do no remove, this fixes the anchor on doc.flexsim.com Agent.System .getAgent() Agent getAgent( Object object ) Parameters object The model object. Returns Agent The Agent associated with the object. If there is no such agent member, it will return null. Description Returns the agent that is associated with the passed object, if one exists. Agent agent = Agent.System(\"ProximitySystem\").getAgent(current) Do no remove, this fixes the anchor on doc.flexsim.com Agent.System Constructor System( string name ) Parameters name The name of the system. Returns Agent.System An Agent.System object Description Accesses a system in the model with a given name. Agent.System(\"ProximitySystem\").getAgent(current)"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.html",
        "title": "FlexScript Class - AGV",
        "content": "Description Provides access to data and methods related to AGV travel. The AGV class is associated with a task executer that has been connected to the AGV network. The AGV is NOT the same as the task executer object. In other words, you can't just set an AGV to the task executer itself. TaskExecuter te = current; AGV agv = te; // RUN-TIME ERROR Instead, the AGV is associated with , not the same as the task executer. To access the AGV of a given task executer, use the AGV () constructor. That said, an AGV class is actually stored on a treenode , so you can cast to/from a treenode, pass it around as a Variant , etc. by using the as() casting method. return AGV(current).as(treenode); Also, if you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>, where <AGVNAME> is the name of the AGV you want to see. Properties accumAheadAGV Gets the next AGV on an accumulating path. allocationPoints An array of AGV.AllocationPoint s that is the AGV's current set of not-yet-allocated allocation points. ampHours Gets the number of amp hours remaining in the AGV's battery. batteryLevel Gets or sets the ratio of (amp hours remaining)/(total amp hours) as a percentage. currentCP Gets or sets the current control point for this AGV. currentTravelDist Gets the AGV's current travel distance. currentTravelPathSection Gets the travel path section that the AGV is currently traveling on. destination Gets the current destination of the AGV. destinationCP Gets the current desination control point of the AGV. finalDestinationCP Gets the final destination control point of the AGV. isOrientedPathForward Gets or sets whether or not an AGV is oriented \"forward\" on a path. loadType Gets or sets the current load type of the AGV. object Provides access to Object methods and properties for this AGV. originCP Gets the origin control point of the AGV. overflowCP Gets/sets the control point to \"overflow\" to when the AGV is pushing trailers. proximityState Gets the current proximity state of the AGV. recentCP Gets the control point that was most recently the agv's currentCP. resetCP Gets or sets the control point that the agv connects to when the model is reset. speed Gets the current speed of the AGV. te Provides access to TaskExecuter methods and properties for this AGV. trailers An array of AGV.Trailer s comprising the set of trailers attached to this AGV. travelPath An array of AGV.TravelPathSection s that is the AGV's travel path for its current travel operation. traversalPoints An array of AGV.TraversalPoint s that is the AGV's current set of planned 'traversals'. Methods addAllocationPoint Adds a new allocation point to the AGVs allocationPoints list. attachTrailer Attaches the given object as a trailer on the AGV. coupleTrain Attaches a train of trailers to this AGV, automatically calculating gaps, etc. based on network geometry. detachTrailer Detaches the given trailer from the AGV. getTrailer Gets a specific trailer based on an ahead/behind parameter, and a rank for the AGV driver. redirect Redirects the AGV to a new destination, based on the given mode. setDestination Sets the destination control point. startRecharge Begins recharging the AGV's battery. stopRecharge Stops recharging the AGV's battery. uncoupleTrain Detaches a train of trailers from this AGV, creating a separate AGV train. Constructor AGV Constructs an AGV object based on the given TaskExecuter. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV .accumAheadAGV readonly AGV accumAheadAGV Description Gets the next AGV on an accumulating path. If there is no AGV ahead of the current one, or if the path type is not accumulating, this property returns a null value. AGV agv2; if (agv1.accumAheadAGV) agv2 = agv1.accumAheadAGV; Do no remove, this fixes the anchor on doc.flexsim.com AGV .allocationPoints readonly allocationPoints Description An array of AGV.AllocationPoint s that is the AGV's current set of not-yet-allocated allocation points. If you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>/allocationPoints, where <AGVNAME> is the name of the AGV you want to see. Do no remove, this fixes the anchor on doc.flexsim.com AGV .ampHours readonly double ampHours Description Gets the number of amp hours remaining in the AGV's battery. double ampHoursLeft = agv.ampHours; Do no remove, this fixes the anchor on doc.flexsim.com AGV .batteryLevel double batteryLevel Description Gets or sets the ratio of (amp hours remaining)/(total amp hours) as a percentage. double batteryLevel = agv.batterLevel; Do no remove, this fixes the anchor on doc.flexsim.com AGV .currentCP Object currentCP Description Gets or sets the current control point for this AGV. If the agv is not currently on a control point, this will be null. Object cp = agv.currentCP; agv.currentCP = Model.find(\"MyCP\"); Do no remove, this fixes the anchor on doc.flexsim.com AGV .currentTravelDist readonly double currentTravelDist Description Gets the AGV's current travel distance. The current travel distance of the AGV within its current travel operation. The AGV tracks its cumulative travel distance across each of the sections in its travel path. Each travel operation starts at a travel distance of 0, and travel distance increases as it travels along the path. Do no remove, this fixes the anchor on doc.flexsim.com AGV .currentTravelPathSection readonly AGV.TravelPathSection currentTravelPathSection Description Gets the travel path section that the AGV is currently traveling on. Do no remove, this fixes the anchor on doc.flexsim.com AGV .destination readonly Object destination Description Gets the current destination of the AGV. If the destination is a FixedResource connected to a ControlPoint, this property will return the FixedResource. Object destination = agv.destination; Do no remove, this fixes the anchor on doc.flexsim.com AGV .destinationCP readonly Object destinationCP Description Gets the current desination control point of the AGV. Object destinationCP = agv.destinationCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .finalDestinationCP readonly Object finalDestinationCP Description Gets the final destination control point of the AGV. The final destination control point can be changed when redirect () is called with REDIRECT_AS_FINAL. Object finalDest = agv.finalDestinationCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .isOrientedPathForward int isOrientedPathForward Description Gets or sets whether or not an AGV is oriented \"forward\" on a path. You can get this property while an AGV is on a path to see if they are facing a forward direction. It will return 1 if the AGV is oriented forward and 0 if they are oriented backwards. You cannot set this property while an AGV is moving. AGV agv = AGV(Model.find(\"TaskExecuter1\")); return agv.isOrientedPathForward; Do no remove, this fixes the anchor on doc.flexsim.com AGV .loadType Variant loadType Description Gets or sets the current load type of the AGV. Generally you will set the load type as part of the initialize travel trigger. However, you can also dynamically change an AGV's load type during a travel operation. This will cause the AGV's speed/acceleration/deceleration profile to change dynamically while it is performing a travel task. You would do this, for example, if you need to change the AGV's max speed based upon factors different than just the path that the AGV is traveling on. Usually you should not change loadType as part of the execution of some critical trigger in the AGV's travel operation, such as OnPreArrival. However, you can get around this by using a Breathe activity in process flow or calling await Delay.seconds(0) in code. The loadType property is a Variant. You can either set it to the name of the load type, or you can set it to a number representing the rank (column number) of the load type. When you get the loadType, it will return the name of the load type. AGV agv = AGV(Model.find(\"TaskExecuter1\")); agv.loadType = \"Loaded\"; Do no remove, this fixes the anchor on doc.flexsim.com AGV .object readonly Object object Description Provides access to Object methods and properties for this AGV. Object object = agv.object; Do no remove, this fixes the anchor on doc.flexsim.com AGV .originCP readonly Object originCP Description Gets the origin control point of the AGV. Object originCP = agv.originCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .overflowCP treenode overflowCP Description Gets/sets the control point to \"overflow\" to when the AGV is pushing trailers. This is generally only needed if the AGV is pushing trailers. When pushing trailers, overflowCP defines a point on the AGV path network to which the AGV's trailers should \"overflow\", since those trailers will be pushed past the AGV's target destination. overflowCP is controlled solely by the user. It is only automatically reset when the model is reset. Thus, if you set this property, you should reset it to 0 after finishing the operation where the it is applicable. If you do not reset it after its applicable travel operation, weird AGV path travel behavior may occur. agv.overflowCP = Model.find(\"ControlPoint5\"); Do no remove, this fixes the anchor on doc.flexsim.com AGV .proximityState readonly int proximityState Description Gets the current proximity state of the AGV. A 0 indicates unrestricted. A 1 indicates that the AGV is stopped because of the AGV ahead of it. if (agv.proximityState) { // handle a stopped agv ... } Do no remove, this fixes the anchor on doc.flexsim.com AGV .recentCP Object recentCP Description Gets the control point that was most recently the agv's currentCP. This is useful if the agv has moved past its last currentCP (and therefore currentCP is null) but you still want to be able to access that most recent control point. Object cp = agv.recentCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .resetCP Object resetCP Description Gets or sets the control point that the agv connects to when the model is reset. Object cp = agv.resetCP; agv.resetCP = Model.find(\"MyCP\"); Do no remove, this fixes the anchor on doc.flexsim.com AGV .speed readonly double speed Description Gets the current speed of the AGV. double agvSpeed = agv.speed; Do no remove, this fixes the anchor on doc.flexsim.com AGV .te readonly TaskExecuter te Description Provides access to TaskExecuter methods and properties for this AGV. TaskExecuter te = agv.te; Do no remove, this fixes the anchor on doc.flexsim.com AGV .trailers readonly trailers Description An array of AGV.Trailer s comprising the set of trailers attached to this AGV. The trailers are ordered from front to back. In other words the ahead-most trailer will be agv.trailers[1] , and the behind-most trailer will be agv.trailers[agv.trailers.length] . Do no remove, this fixes the anchor on doc.flexsim.com AGV .travelPath readonly travelPath Description An array of AGV.TravelPathSection s that is the AGV's travel path for its current travel operation. If you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>/travelPath, where <AGVNAME> is the name of the AGV you want to see. Do no remove, this fixes the anchor on doc.flexsim.com AGV .traversalPoints readonly traversalPoints Description An array of AGV.TraversalPoint s that is the AGV's current set of planned 'traversals'. For the purposes of the FlexScript API, the traversalPoints are the set of allocation points that have been allocated but not yet deallocated, i.e. the AGV's current allocations. See AGV.TraversalPoint for more information. If you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>/traversalPoints, where <AGVNAME> is the name of the AGV you want to see. Do no remove, this fixes the anchor on doc.flexsim.com AGV .addAllocationPoint() AGV.AllocationPoint addAllocationPoint( AGV.AllocatableObject object , double stopDist , double deallocDist , double arrivalDist ) Parameters object The object to be allocated. stopDist The allocation point's stopDist . stopDist The allocation point's traversalDist , i.e. the point at which to deallocate the object. arrivalDist The allocation point's arrivalDist . Description Adds a new allocation point to the AGVs allocationPoints list. Generally the AGV default behavior properly adds allocation points as part of the AGV's travel path, so you will usually not need to use this method. However, manually adding allocations may be useful in in some special cases. For example, certain spatial configurations of AGVs may require you to allocate points that are not technically on its travel path. If a part of an AGV 'hangs out' away from its body and encroaches on other paths, you may resolve this by adding allocation points on those other paths so that the AGV will avoid collisions with other AGVs. You should call this method only at defined times in the AGV's travel operation. Specifically, you should only call it after the OnBuildTravelPath event is fired (or as part of that trigger) but before the OnPreAllocate. Calling it at any other time is not guaranteed to work. Do no remove, this fixes the anchor on doc.flexsim.com AGV .attachTrailer() attachTrailer( treenode trailer , double gap , int behind , int detachRule ) Parameters trailer The object that will trail the AGV gap The trailer's distance from the next trailer or AGV behind Sets the position of the trailer. Can be 0 or 1: 0 is ahead, 1 is behind detachRule Sets the detach mode of the AGV. Can be 0 or 1: 0 is manual, 1 is automatic Description Attaches the given object as a trailer on the AGV. If you attach the trailer using the manual detach mode, you must call detachTrailer() to detach the trailer. agv.attachTrailer(trailerObj, 0.1, 1, 0); Do no remove, this fixes the anchor on doc.flexsim.com AGV .coupleTrain() coupleTrain( treenode trailer ) Parameters trailer The object that will be coupled to the AGV. If the trailer is itself an AGV, or is a trailer of an AGV, then the entire AGV train will be attached. Description Attaches a train of trailers to this AGV, automatically calculating gaps, etc. based on network geometry. coupleTrain() is similar to attachTrailer (), with the following primary differences: Whereas attachTrailer() attaches a single trailer to the AGV, coupleTrain() will attach all trailers that are part of another AGV train, if such a train exists. While attachTrailer() requires you to define parameters like whether the trailer should be attached ahead or behind, gap distance, etc., coupleTrain(), on the other hand, automatically resolves these parameters based on the location of the trailer/train on the AGV path network. There are two possible scenarios when coupling the trailer onto the AGV's train. Each scenario effects a different logic for coupling the train, as follows: The trailer is an independent object - When the trailer is not associated with another AGV train, the AGV will determine where to couple the trailer by analyzing simple spatial proximity. It retrieves the location of the trailer, and determines whether that location is ahead of the AGV or behind. Then, based on that determination, it resolves the gap between the trailer and the AGV's associated ahead/behind-most trailer by again analyzing spatial proximity. Further, since there is no AGV train associated with the trailer, it will couple only that trailer to the AGV, and no other objects. The trailer is itself another AGV, or is a trailer of another AGV - When the trailer is part of another AGV, the AGV will determine couple parameters by analyzing its own location on the AGV path network relative to the location of that other AGV on the path network. Ahead/behind attributes, gap, etc. are determined by doing a path network distance analysis between each end of each AGV, and coupling the train via the shortest resulting path between the train ends. This algorithm assumes that the AGV ends can reach each other via one or more paths that do not require a train direction switch. In other words, the trains' proximity to each on the network should be \"close and intuitive\", like how you would want to couple trains in a real life situation. Coupling across weird path geometries will result in undetermined behavior. Use this method in conjunction with uncoupleTrain () to simulate coupling and uncoupling of cars in a train yard. Do no remove, this fixes the anchor on doc.flexsim.com AGV .detachTrailer() detachTrailer( treenode trailer ) Parameters trailer The trailer to detach from the AGV Description Detaches the given trailer from the AGV. agv.detachTrailer(trailerObj); Do no remove, this fixes the anchor on doc.flexsim.com AGV .getTrailer() AGV.Trailer getTrailer( int isBehind , int rankFromDriver ) Parameters isBehind 1 if you want to access a trailer behind the AGV, and 0 if you want to access a trailer ahead of the AGV. rankFromDriver The 1-based rank of the trailer from the AGV driver. Description Gets a specific trailer based on an ahead/behind parameter, and a rank for the AGV driver. Object trailer = agv.getTrailer(1, 2).object; Do no remove, this fixes the anchor on doc.flexsim.com AGV .redirect() redirect( Object newDest , int mode ) Parameters newDest The new desination for the AGV to travel to mode Determines what happens on redirect. Can have one of 4 values: REDIRECT_AND_WAIT - if not redirected before arrival, the agv will wait at the destination until redirected REDIRECT_AS_FINAL - the destination becomes the new final destination for the agv REDIRECT_AND_CONTINUE_ON_ARRIVAL - the agv will continue to the final destination after arriving at the intermediate destination REDIRECT_AND_CONTINUE_ON_PRE_ARRIVAL - the agv will continue to the final destination after pre-arriving at the intermediate destination (it will not decelerate to a stop) Description Redirects the AGV to a new destination, based on the given mode. agv.redirect(newDest, REDIRECT_AS_FINAL); Do no remove, this fixes the anchor on doc.flexsim.com AGV .setDestination() void setDestination( Object controlPoint , double pathOffset = 0 , Object relativeToTrailer = 0 , Variant agvBodyOffset = 0 ) Parameters controlPoint Control point to be set as the destination. pathOffset How much to offset the destination along the path from the control point. relativeToTrailer Make the destination relative to a trailer. agvBodyOffset Specifies amount to offset from the body or one of the AGV.BodyOffset enum values. It may also be an array with 2 elements, the first with one of the AGV.BodyOffset enum values and the second with an additional offset amount. Description Sets the destination control point. agv.setDestination(Model.find(\"ControlPoint5\"), 0, 0, AGV.BodyOffset.TrailerHeadEdge); Do no remove, this fixes the anchor on doc.flexsim.com AGV .startRecharge() double startRecharge( ) Returns double The amount of time a full recharge will take Description Begins recharging the AGV's battery. The battery recharges at the rate defined by the AGV type. Once the battery is fully recharged, recharging stops. Do no remove, this fixes the anchor on doc.flexsim.com AGV .stopRecharge() void stopRecharge( ) Description Stops recharging the AGV's battery. Do no remove, this fixes the anchor on doc.flexsim.com AGV .uncoupleTrain() uncoupleTrain( treenode trailer , treenode newDriver = 0 ) Parameters trailer The trailer at which to uncouple from the train. newDriver The object who will become the new \"driver\" AGV. If this object does not already have an AGV instance associated with it, then an AGV will be created. If newDriver is not passed as a parameter, or is 0, then the first trailer parameter will become the new driver. If the new driver is not a TaskExecuter , then it will only contain AGV data for storing where the AGV train is on the path network. You will not be able to give the object travel tasks like you would a TaskExecuter. Description Detaches a train of trailers from this AGV, creating a separate AGV train. AGV(current).uncoupleTrain(AGV(current).trailers[1].object); Use this method in conjunction with coupleTrain () to simulate coupling and uncoupling of cars in a train yard. Do no remove, this fixes the anchor on doc.flexsim.com AGV Constructor AGV( treenode te , int assert = 0 ) Parameters te A TaskExecuter that is connected to the AGV network as an AGV Traveler. assert If 1, then if the TaskExecuter is not yet connected to the AGV network, it will be connected, and the associated AGV object will be created. Returns AGV An AGV object Description Constructs an AGV object based on the given TaskExecuter. An AGV object can only be accessed by calling this method. Casting directly from a task executer is not correct. AGV agv = AGV(te); // correct AGV agv = te; // incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.AllocatableObject.html",
        "title": "FlexScript Class - AGV.AllocatableObject",
        "content": "Inherits from Object Description An object that can be allocated by an AGV. An allocatable object is either a Control Point or a Control Area. The primary properties you can get on this object are its set of allocation requests and its set of allocations. Properties allocations An array-like list of AGV.AllocationPoint s that represent the set of AGVs who have currently allocated the object. requests An array-like list of AGV.AllocationPoint s that represent the set of AGVs currently requesting to allocate the object. routingConstraint A value defining how/whether AGVs may travel through the object when calculating routing. Methods allocate Attempts to allocate the object. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .allocations readonly allocations Description An array-like list of AGV.AllocationPoint s that represent the set of AGVs who have currently allocated the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .requests readonly requests Description An array-like list of AGV.AllocationPoint s that represent the set of AGVs currently requesting to allocate the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .routingConstraint int routingConstraint Description A value defining how/whether AGVs may travel through the object when calculating routing. The routingConstraint property takes one of the values of AGV.RoutingConstraint . Setting this value makes the AllocatableObject into a dynamic barrier for routing purposes. The default value (AGV.RoutingConstraint.None) means AGVs can travel through the object. Setting it to some other value, e.g. AGV.RoutingConstraint.Blocked, will cause AGVs to route around the object, depending on the value you use. Note that this supplements your use of conditional rules on paths. The difference is that conditional rules work with routing table caching, while routingConstraint does not. If there is any object in the model with a routingConstraint set to something other than AGV.RoutingConstraint.None, then the AGV network will ignore any cached routing tables and recalculate paths anew. As such, using routingConstraint can have significant impacts on run speed because it must recalculate the path on every travel operation. Nevertheless, it can be useful when the potential number of dynamic barriers is so large that route caching (and creating all the conditional rules) is impractical. When routing constraints are set and the AGV network is building routes dynamically, it will switch to an 'A* mode', using the A* search algorithm to quickly find the path from the source to the destination. As soon as it finds the best path, it will shortcut the search algorithm, not filling out the routing table fully as it usually would when executing standard Dijkstra's algorithm . This is done to make the path search as efficient as possible when using dynamic barriers. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .allocate() AGV.AllocationPoint allocate( Object allocator , int force = 0 ) Parameters allocator The object that is to 'own' the allocation. force Should be 1 or 0. If 1, it will 'force' the allocation, meaning it will ignore the object's maximum allocations property, allocating the object even if it has reached its allocation capacity. If 0, then if the object has already reached its allocation capacity, a request will be added to its request queue. Returns AGV.AllocationPoint An AGV.AllocationPoint that represents the allocation. You can get the allocation point's requestState property to see whether or not the allocation was completed immediately or was added to the object's list of requests. Description Attempts to allocate the object. Generally you do not need to call this method because allocations and deallocations are managed by default by the AGV travel behavior. You would use this method if you need to allocate a control area or control point that isn't part of the standard travel path of an AGV. For example, you can make items in a conveyor system allocate a control area through the OnArrival trigger of a conveyor decision point. There are pick list options that do this automatically and call this method. If you use this method to allocate an object, then later in the simulation you should call deallocate on the result allocation point to remove the allocation. AGV.AllocationPoint alloc = controlArea.allocate(current); if (alloc.requestState == AGV.RequestState.Requested) { ... // do stuff if the object was not allocated immediately await alloc.event(\"OnAllocate\"); } ... // do stuff once the control area is allocated."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.AllocationPoint.html",
        "title": "FlexScript Class - AGV.AllocationPoint",
        "content": "Inherits from AGV.TraversalPoint Description A structure containing information about a planned AGV allocation. Each time an AGV starts a travel operation, it builds a travel path to the destination. In this path building phase, as it encounters allocatable objects on that path, it creates allocation points that signify that the AGV must allocate that object at a defined point on the path. An allocation point either represents an allocation of a Control Point , a Control Area , or a path transfer when traversing an accumulating path. The AGV class includes an allocationPoints property that is an array-like structure that includes all allocation points (that have not yet allocated their object) on the AGV's current travel path. Also, allocation points are the elements you access in an AGV.AllocatableObject 's requests and allocations properties. //Printing an AGV's allocation points AGV agv = AGV(current); for (int i = 1; i <= agv.allocationPoints.length; i++) { AGV.AllocationPoint point = agv.allocationPoints[i]; print( \" agv \", point.agv.as(treenode), \" object \", point.object, \" stopDist \", point.stopDist, \" arrivalDist \", point.arrivalDist, \" transferPath \", point.transferPath, \" transferDistAlong \", point.transferDistAlong); } Properties allocator The object that is to 'own' the allocation. arrivalDist The AGV travel distance at which the AGV will have 'arrived' at the target object. object The object that is to be allocated. requestState The state of the allocation point's request. stopDist The AGV travel distance at which the AGV will stop if it cannot allocate the object. transferDistAlong The distance along the allocating transfer's owning path. transferPath The owning path of the transfer that will be allocated. Methods deallocate Deallocates the associated object, destroys the allocation point, and fulfills the object's next waiting allocation request if there is one. event Replicates Object . event for an allocation point. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .allocator readonly Object allocator Description The object that is to 'own' the allocation. Usually this is the AGV that allocates the object. However, sometimes it may be an A* traveler if the control area is an A* member, or it could be an object you define yourself when you call AGV.AllocatableObject . allocate (). Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .arrivalDist readonly double arrivalDist Description The AGV travel distance at which the AGV will have 'arrived' at the target object. This will nearly always be farther along the path than the stopDist as the AGV must allocate an object before traveling to it. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .object readonly AGV.AllocatableObject object Description The object that is to be allocated. This will be a valid pointer if the allocation point is for a Control Point or Control Area, and null otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .requestState readonly AGV.RequestState requestState Description The state of the allocation point's request. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .stopDist double stopDist Description The AGV travel distance at which the AGV will stop if it cannot allocate the object. You can set this property value, but only at defined times in the AGV's travel operation. Specifically, you should only set it after the OnBuildTravelPath event is fired (or as part of that trigger) but before the OnPreAllocate. Setting it at any other time is not guaranteed to work. Note that the AGV. allocationPoints array is sorted in the order of the stopDist value, so if you set this value it may change the index of the allocation point within the AGV's allocationPoints array, in order to preserve this ordering. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .transferDistAlong readonly double transferDistAlong Description The distance along the allocating transfer's owning path. This will be a valid distance if the allocation point is for a path transfer, and undefined otherwise. In other words, you should only access this property if you know the allocation point is for a transfer ( transferPath is not null). Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .transferPath readonly Object transferPath Description The owning path of the transfer that will be allocated. This will a valid pointer if the allocation point is for a path transfer, and null otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .deallocate() void deallocate( ) Description Deallocates the associated object, destroys the allocation point, and fulfills the object's next waiting allocation request if there is one. You should only call this if you have programmatically allocated the object with AGV.AllocatableObject . allocate (). Otherwise, deallocation will happen automatically. If you call this method when its requestState is anything but Allocated, it will merely destroy the allocation point, effectively cancelling the request. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .event() Event event( string eventName ) Parameters eventName The name of the event. Returns Event The resulting Event. Description Replicates Object . event for an allocation point. Since AGV.AllocationPoint is not an Object, it doesn't naturally have this method, so it is replicated explicitly. The only event available on an AGV.AllocationPoint is \"OnAllocate\". In other words, you use this method in code to await the completion of the allocation. AGV.AllocationPoint alloc = controlArea.allocate(current); if (alloc.requestState == AGV.RequestState.Requested) { ... // do stuff if the object was not allocated immediately await alloc.event(\"OnAllocate\"); } ... // do stuff once the control area is allocated."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.BodyOffset.html",
        "title": "FlexScript Class - AGV.BodyOffset",
        "content": "Description Enumerates possible AGV body offset values The AGV.BodyOffset enumeration can be used to define target AGV body offsets for customized AGV travel tasks . Each enumeration combines two facets: Whether the offset corresponds the entire AGV \"train\" or to an individual \"trailer\" The corresponding \"edge\" of the target object. In defining the \"edge\" the following definitions apply: Head Edge - the head edge of the object is the forward-most point along its x axis, regardless of travel direction. Tail Edge - the tail edge of the object is the backward-most point along its x axis, regardless of travel direction. Leading Edge - the leading edge of the object is the forward-most point in the AGV's travel direction. When the AGV is traveling forward, its leading edge is the same as its head edge. When traveling backward its leading edge is the same as its tail edge. Trailing Edge - the trailing edge of the object is the backward-most point in the AGV's travel direction. When the AGV is traveling forward, its trailing edge is the same as its tail edge. When traveling backward its trailing edge is the same as its head edge. Static Properties TrailerHeadEdge An AGV trailer's head edge. TrailerLeadingEdge An AGV trailer's leading edge. TrailerTailEdge An AGV trailer's tail edge. TrailerTrailingEdge An AGV trailer's trailing edge. TrainHeadEdge The AGV train's head edge. TrainLeadingEdge The AGV train's leading edge. TrainTailEdge The AGV train's tail edge. TrainTrailingEdge The AGV train's trailing edge. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerHeadEdge static readonly int TrailerHeadEdge Description An AGV trailer's head edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerLeadingEdge static readonly int TrailerLeadingEdge Description An AGV trailer's leading edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerTailEdge static readonly int TrailerTailEdge Description An AGV trailer's tail edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerTrailingEdge static readonly int TrailerTrailingEdge Description An AGV trailer's trailing edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainHeadEdge static readonly int TrainHeadEdge Description The AGV train's head edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainLeadingEdge static readonly int TrainLeadingEdge Description The AGV train's leading edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainTailEdge static readonly int TrainTailEdge Description The AGV train's tail edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainTrailingEdge static readonly int TrainTrailingEdge Description The AGV train's trailing edge."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.Connections.html",
        "title": "FlexScript Class - AGV.Connections",
        "content": "Description An interface for accessing AGV control point connections. The AGV.Connections class allows you to query and dereference control point connections. You construct an AGV.Connections instance with a constructor. Here you pass the owner of the connections, followed by the name of the connection. AGV.Connections connections = AGV.Connections(current, \"Location\"); You then can query how many connections are present with the length property. int numConnections = connections.length; To dereference a specific connection, use the [] array dereference operator. Object obj = connections[1]; Properties length Returns the number of connections present on the object. rank Gets the rank of the connection type. Constructor Connections Creates a new set of connections with the passed owner and associated with the named connection. Operators [] Dereferences the connected object by control point connection rank. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections .length readonly int length Description Returns the number of connections present on the object. int numConnections = AGV.Connections(current, \"PickupPoints\").length; Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections .rank readonly int rank Description Gets the rank of the connection type. This is for use in subsequent AGV.Connections() constructors. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections Constructor Connections( Object owner , string connectionName ) Connections( Object owner , int connectionRank ) Parameters owner The owner of the control point connections. connectionName The name of the control point connections. connectionRank The rank of the control point connections. Description Creates a new set of connections with the passed owner and associated with the named connection. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections .operator [] Object operator []( int index ) Parameters index The index of the connected object. Returns Object The target connected object. Description Dereferences the connected object by control point connection rank."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.Request.html",
        "title": "FlexScript Class - AGV.Request",
        "content": "Description An enumeration of values to be returned by an AGV.AllocatableObject 's OnRequest trigger. If you return one of these values from the trigger, then the object (a Control Point or Control Area) will override its default behavior and either allow or block the allocation request. Static Properties Allow Allow the request to allocate the object. Block Block the request from allocating the object. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.Request .Allow static readonly int Allow Description Allow the request to allocate the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Request .Block static readonly int Block Description Block the request from allocating the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.RequestState.html",
        "title": "FlexScript Class - AGV.RequestState",
        "content": "Description An enumeration of possible values for the AGV.AllocationPoint . requestState property. Static Properties Allocated The AGV has allocated the object. Requested The AGV has requested to allocate the object, but has not yet allocated it. Unrequested The AGV has not yet reached the point where it needs to request the allocation. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.RequestState .Allocated static readonly int Allocated Description The AGV has allocated the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RequestState .Requested static readonly int Requested Description The AGV has requested to allocate the object, but has not yet allocated it. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RequestState .Unrequested static readonly int Unrequested Description The AGV has not yet reached the point where it needs to request the allocation."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.RoutingConstraint.html",
        "title": "FlexScript Class - AGV.RoutingConstraint",
        "content": "Description Enumerates possible routing constraint values used in AGV.AllocatableObject . routingConstraint Static Properties BackwardOnly An AGV may only travel through the object if it is traveling in the path's reverse/backward direction. Blocked An AGV may not travel to, from, or through the object. ForwardOnly An AGV may only travel through the object if it is traveling in the path's forward direction. None No constraints on routing, meaning an AGV may travel through the object. PassThroughBlocked An AGV may travel to or from the control point as an origin or destination, but it may not travel 'through' the object. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .BackwardOnly static readonly int BackwardOnly Description An AGV may only travel through the object if it is traveling in the path's reverse/backward direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .Blocked static readonly int Blocked Description An AGV may not travel to, from, or through the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .ForwardOnly static readonly int ForwardOnly Description An AGV may only travel through the object if it is traveling in the path's forward direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .None static readonly int None Description No constraints on routing, meaning an AGV may travel through the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .PassThroughBlocked static readonly int PassThroughBlocked Description An AGV may travel to or from the control point as an origin or destination, but it may not travel 'through' the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.Trailer.html",
        "title": "FlexScript Class - AGV.Trailer",
        "content": "Description Provides access to data and methods related a trailer attached to an AGV . Properties driver Gets the AGV that this trailer is attached to. isBehind 1 if the trailer is behind its driver AGV, 0 if it is ahead. object Gets the 3D object that this trailer is associated with. rankFromDriver Gets the 1-based rank of this trailer away from its driver AGV. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .driver readonly AGV driver Description Gets the AGV that this trailer is attached to. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .isBehind int isBehind Description 1 if the trailer is behind its driver AGV, 0 if it is ahead. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .object readonly Object object Description Gets the 3D object that this trailer is associated with. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .rankFromDriver readonly int rankFromDriver Description Gets the 1-based rank of this trailer away from its driver AGV."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.TravelPathSection.html",
        "title": "FlexScript Class - AGV.TravelPathSection",
        "content": "Description A structure representing a traversal of a specific section of path during an AGV's travel operation. When an AGV starts a travel operation, it builds an internal representation of the path that it will travel on in getting to its destination. The path is stored in AGV . travelPath , which is an array-like structure with a length property and an array-dereference (bracket: []) operator. Each accessed element is an instance of AGV.TravelPathSection. It represents a sub-section of an AGV path that will be traversed, and contains the properties described here. You can also access the travel path section that an AGV is currently traveling on with AGV . currentTravelPathSection //Printing an AGV's full path AGV agv = AGV(current); for (int i = 1; i <= agv.travelPath.length; i++) { AGV.TravelPathSection sec = agv.travelPath[i]; print(\"path \", sec.path, \" fromDist \", sec.fromDist, \" toDist \", sec.toDist, \" fromTravelDist \", sec.fromTravelDist); } Properties fromDist The distance along the path that is the starting point of the AGV's traversal on that path. fromTravelDist The AGV travel distance that coincides with the starting point of the AGV's traversal on the path. isAGVOritentedPathForward True if, while traveling along this section, the AGV is oriented forward along the path, i.e. the AGV's 'head' is directed forward along the path's 'primary' direction. isAGVTravelOrientedForward True if, while traveling along this section, the AGV is traveling in a forward direction, i.e. its 'head' is leading in the direction of travel. isPathTravelOrientedForward True if the section's travel direction is forward along the path, i.e. the AGV is traveling in the path's 'primary' direction. path The path that this section is associated with. toDist The distance along the path that is the ending point of the AGV's traversal on that path. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .fromDist readonly double fromDist Description The distance along the path that is the starting point of the AGV's traversal on that path. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .fromTravelDist readonly double fromTravelDist Description The AGV travel distance that coincides with the starting point of the AGV's traversal on the path. The AGV tracks its own cumulative travel distance across each of the sections in its travel path. Each travel operation starts at a travel distance of 0, and travel distance increases as it travels along the path. You can access the AGV's current travel distance at a given time in the travel with AGV . currentTravelDist . Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .isAGVOritentedPathForward readonly bool isAGVOritentedPathForward Description True if, while traveling along this section, the AGV is oriented forward along the path, i.e. the AGV's 'head' is directed forward along the path's 'primary' direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .isAGVTravelOrientedForward bool isAGVTravelOrientedForward Description True if, while traveling along this section, the AGV is traveling in a forward direction, i.e. its 'head' is leading in the direction of travel. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .isPathTravelOrientedForward readonly bool isPathTravelOrientedForward Description True if the section's travel direction is forward along the path, i.e. the AGV is traveling in the path's 'primary' direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .path readonly Object path Description The path that this section is associated with. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .toDist readonly double toDist Description The distance along the path that is the ending point of the AGV's traversal on that path."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.TraversalPoint.html",
        "title": "FlexScript Class - AGV.TraversalPoint",
        "content": "Description A structure containing information about a planned AGV 'traversal'. Traversal points are primarily accessed through the AGV . traversalPoints and AGV . allocationPoints array. The AGV's traversalPoints array is a direct list of AGV.TraversalPoint's. The AGV's allocationPoints array is a list of AGV.AllocationPoint 's, which is a subclass of AGV.TraversalPoint, and as such includes the properties of AGV.TraversalPoint. This class represents a point along the AGV's travel path where the AGV is scheduled to execute some logic. The AGV's traversalPoints array may contain several different types of traversal points, but for the purposes of the FlexScript API at this time, you should only access/manipulate traversal points that are instances of AGV.AllocationPoint . In traversing this array you should always check if the point is in fact an allocation point, and only do something if it is. AGV agv = AGV(current); for (int i = 1; i <= agv.traversalPoints.length; i++) { AGV.TraversalPoint t = agv.traversalPoints[i]; if (t.is(AGV.AllocationPoint)) { AGV.AllocationPoint allocPoint = t; // ... perform some logic on the allocation point } } Whereas the AGV . allocationPoints array contains the set of allocation points that have yet to be allocated, an AGV's traversalPoints array holds, among other things, the set of allocation points that the AGV has already allocated, but has not yet deallocated. In other words, it is the AGV's current set of allocations. An allocation point will start out as part of the allocationPoints array. Then, when the AGV actually allocates the object associated with that allocation point, the allocation point is moved into the traversalPoints list. At that point, the traversalDist property of the allocation point is used as the 'deallocation distance' i.e. the travel distance at which the AGV will deallocate the object. Properties agv The AGV that owns this traversal point. traversalDist The AGV travel distance at which the AGV will execute whatever logic is associated with this traversal point. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.TraversalPoint .agv readonly AGV agv Description The AGV that owns this traversal point. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TraversalPoint .traversalDist double traversalDist Description The AGV travel distance at which the AGV will execute whatever logic is associated with this traversal point. If this traversal point is an AGV.AllocationPoint , this is the distance at which the allocated object will be deallocated. You can set this property value, but only at defined times in the AGV's travel operation. Specifically, you should only set it after the OnBuildTravelPath event is fired (or as part of that trigger) but before (or as part of) the OnPreAllocate. Setting it at any other time is not guaranteed to work. Note that the AGV. traversalPoints array is sorted in the order of the traversalDist value, so if you set this value it may change the index of the traversal point within the AGV's traversalPoints array, in order to preserve this ordering. Since you have significant control over the deallocation timing using standard features like Deallocation Types , you generally would not need to change an allocation point's traversalDist. However, in some special cases, such as when simulating AGVs with special spatial geometries, it may be useful to change this property."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.html",
        "title": "FlexScript Class - AStar",
        "content": "Description Provides access to data related to the A* module. Static Properties navigator Accesses the model's A* navigator. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar .navigator static readonly AStar.Navigator navigator Description Accesses the model's A* navigator. AStar.Cell cell = AStar.navigator.getCell(Vec3(10, 3, 0));"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Allocation.html",
        "title": "FlexScript Class - AStar.Allocation",
        "content": "Description Provides access to data and methods associated with an A* grid cell allocation. Properties acquireTime Gets the time that the cell was/will be allocated. cell Gets the allocated cell. releaseTime Gets the time that the cell was/will be released. traveler Gets the allocating traveler. Operators ! Returns true if the allocation is not valid. bool Returns true if the allocation is valid. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .acquireTime readonly double acquireTime Description Gets the time that the cell was/will be allocated. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .cell readonly AStar.Cell cell Description Gets the allocated cell. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .releaseTime readonly double releaseTime Description Gets the time that the cell was/will be released. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .traveler readonly AStar.Traveler traveler Description Gets the allocating traveler. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .operator ! int operator !( ) Description Returns true if the allocation is not valid. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .operator bool int operator bool( ) Description Returns true if the allocation is valid."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Cell.html",
        "title": "FlexScript Class - AStar.Cell",
        "content": "Description Provides access to data and methods associated with an A* grid cell. Properties col Gets the cell's column address, or its numbering in the x direction. row Gets the cell's row address, or its numbering in the y direction. Methods adjacentCell Gets the cell's adjacent cell, in the given direction. canGo Returns true if the travel grid allows a traveler to travel from this cell to an adjacent cell in the defined direction. getAllocation Gets the AStar.Allocation , if any, that is currently active for the cell or is scheduled to be active at a given time. Constructor AStar.Cell Constructs an AStar.Cell based on the grid, row, and column address. Operators ! Returns true if the cell is not a valid address in the A* grid. != Returns true if the cell is not the same address as a compared cell. == Returns true if the cell is the same address as a compared cell. bool Returns true if the cell is a valid address in the A* grid. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .col int col Description Gets the cell's column address, or its numbering in the x direction. Increasing column numbers are associated with increasing x locations. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .row int row Description Gets the cell's row address, or its numbering in the y direction. Increasing row numbers are associated with increasing y locations. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .adjacentCell() AStar.Cell adjacentCell( int direction ) Parameters direction The desired travel direction. This should be an enumeration of AStar.Direction Description Gets the cell's adjacent cell, in the given direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .canGo() int canGo( int direction ) Parameters direction The desired travel direction. This should be an enumeration of AStar.Direction Description Returns true if the travel grid allows a traveler to travel from this cell to an adjacent cell in the defined direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .getAllocation() AStar.Allocation getAllocation( double time = -1 ) Parameters time The target simulation time. Description Gets the AStar.Allocation , if any, that is currently active for the cell or is scheduled to be active at a given time. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell Constructor AStar.Cell( int grid , int row , int column ) Parameters grid Reserved for future use. Should be 1. row The row address. column The column address. Description Constructs an AStar.Cell based on the grid, row, and column address. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator ! int operator !( ) Description Returns true if the cell is not a valid address in the A* grid. Returns true if the cell address is outside the bounds of the A* grid, otherwise false. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator != int operator !=( AStar.Cell other ) Parameters other The cell to compare this cell with. Description Returns true if the cell is not the same address as a compared cell. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator == int operator ==( AStar.Cell other ) Parameters other The cell to compare this cell with. Description Returns true if the cell is the same address as a compared cell. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator bool int operator bool( ) Description Returns true if the cell is a valid address in the A* grid. Returns false if the cell address is outside the bounds of the A* grid."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Direction.html",
        "title": "FlexScript Class - AStar.Direction",
        "content": "Description An enumeration of integer values associated with four A* travel directions. The AStar.Direction values are used in AStar.Cell when querying directional travel capabilities and adjacent cells. Static Properties Down = 4 The \"down\" direction, describing travel in the negative y direction. Left = 2 The \"left\" direction, describing travel in the negative x direction. Right = 1 The \"right\" direction, describing travel in the positive x direction. Up = 3 The \"up\" direction, describing travel in the positive y direction. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Down static readonly int Down = 4 Description The \"down\" direction, describing travel in the negative y direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Left static readonly int Left = 2 Description The \"left\" direction, describing travel in the negative x direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Right static readonly int Right = 1 Description The \"right\" direction, describing travel in the positive x direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Up static readonly int Up = 3 Description The \"up\" direction, describing travel in the positive y direction."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Navigator.html",
        "title": "FlexScript Class - AStar.Navigator",
        "content": "Description Provides access to data and methods related to a model's A* navigator. Properties travelers References the set of travelers that are members of the A* network. Methods addDynamicBarrier Adds a dynamic barrier to the navigator's A* grid network. getCell Gets the cell associated with a given model location. getLocation Gets the model location associated with a given AStar.Cell . removeDynamicBarrier Removes a dynamic barrier that was added with addDynamicBarrier (). Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .travelers readonly travelers Description References the set of travelers that are members of the A* network. This property is available so you can visit each of the navigator's travelers when something like a grid change happens. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .addDynamicBarrier() Variant addDynamicBarrier( Variant val , int skipOnChange = 0 ) treenode addDynamicBarrier( Vec3 location , Vec3 size , Vec3 rotation , int skipOnChange = 0 ) Parameters val The value containing the barrier(s) to add. The value can either by a reference to an object, an array of references to objects, or a 3x3 array of numbers. If it is an object, it will add that object as a dynamic barrier. If it is an array of objects, it will add each object in the array as a barrier. If it is a 3x3 number array, it will construct 3 Vec3s from the array and forward to the Vec3-based overload. location The location of a barrier you want to add. size The size of a barrier you want to add. rotation The rotation of a barrier you want to add. skipOnChange Optional. If 1, the call to the navigator's OnGridChange event will be skipped. Description Adds a dynamic barrier to the navigator's A* grid network. This method lets you dynamically change the A* path calculation mechanism during a simulation run. It is more flexible than the standard barrier condition rule in that you can add and remove barriers that have been dynamically created, or that are moving around during the simulation. You call this method to integrate the object's current location as a barrier into the navigation grid. Calling this method will only affect the path calculation algorithm. It does not affect the paths of objects who are actively traveling on their path. If you want them to recalculate their path after adding the barrier, you should preempt them so they will restart their travel operation. You can query whether an active traveler's path has been blocked by a dynamic barrier by calling AStar.Traveler(object).travelPath.isBlocked(). The return value is a reference to a treenode that represents the added dynamic barrier. If you pass an array of object references into this method, then an array of treenodes will be returned. Once the barrier is destroyed or moves, you should call removeDynamicBarrier () to remove it, passing in the value that was returned by this method. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .getCell() AStar.Cell getCell( Vec3 modelLoc ) Parameters modelLoc The target model location. Description Gets the cell associated with a given model location. AStar.Cell cell = AStar.navigator.getCell(Vec3(10, 3, 0)); Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .getLocation() Vec3 getLocation( AStar.Cell cell ) Parameters cell The target cell. Description Gets the model location associated with a given AStar.Cell . Vec3 loc = AStar.navigator.getLocation(traveler.travelPath[1].cell); Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .removeDynamicBarrier() removeDynamicBarrier( Variant barrier ) Parameters barrier The value that was returned from a call to addDynamicBarrier (). Description Removes a dynamic barrier that was added with addDynamicBarrier ()."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Traveler.html",
        "title": "FlexScript Class - AStar.Traveler",
        "content": "Description Provides access to data and methods related to an A* traveler. Properties isActive Returns 1 if the traveler is actively performing a travel task, 0 otherwise. isBlocked Returns 1 if the traveler is currently blocked by an accumulation cell allocation request. object Returns the TaskExecuter that is associated with this A* traveler. travelPath Accesses the traveler's current travel path. Methods addAllocation For future use. Adds an accumulation allocation to the traveler's scheduled cell allocations. arriveAtBridge For future use. Notifies A* that the traveler has arrived at a bridge/elevator associated with a specific cell in its travel path, handing over control to the bridge. calculatePath For future use. Calculates the A* path to the destination and stores it in the traveler's travelPath property. findCollision For future use. Finds an existing allocation that \"collides\" with the passed allocation. finishPath For future use. Notifies A* that the traveler is finished traveling. getAllocations Gets an array of AStar.Allocation s that the traveler has currently allocated or is scheduled to have allocated at a given time. navigatePath For future use. Initiates the logic that builds kinematics and cell allocations along the traveler's calculated path. Constructor AStar.Traveler Constructs an AStar.Traveler object based on the given TaskExecuter. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .isActive readonly int isActive Description Returns 1 if the traveler is actively performing a travel task, 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .isBlocked readonly int isBlocked Description Returns 1 if the traveler is currently blocked by an accumulation cell allocation request. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .object readonly TaskExecuter object Description Returns the TaskExecuter that is associated with this A* traveler. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .travelPath readonly travelPath Description Accesses the traveler's current travel path. A traveler's travelPath describes the current sequence of A* grid cells that the traveler will traverse in traveling to its current destination. The travelPath can be accessed using array-type usage, including using the \"length\" property and array accessors. for (int i = 1; i <= traveler.travelPath.length; i++) { AStar.Cell cell = traveler.travelPath[i].cell; ... } Each element of the travelPath includes the AStar.Cell to be traversed. AStar.Cell cell = traveler.travelPath[1].cell; The travelPath also includes an indexOf() method to find which index (if any) corresponds to a given grid cell. int index = traveler.travelPath.indexOf(cell); The travelPath also includes an isBlocked() method. This would be used when you dynamically change the A* grid and want to see if you should preempt the traveler to have it recalculate its path based on the new grid change. if (traveler.travelPath.isBlocked()) { ... } Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .addAllocation() addAllocation( AStar.Allocation alloc , int force , int notifyPendingAllocations ) Parameters alloc The target allocation to add. force Pass 1 to force the allocation to be added regardless of collisions with other allocations, 0 otherwise. notifyPendingAllocation Pass 1 to cause colliding travelers to create an OnBlock event when they collide with this allocation. Description For future use. Adds an accumulation allocation to the traveler's scheduled cell allocations. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. For normal users, this method is automatically called by navigatePath (). Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .arriveAtBridge() arriveAtBridge( int pathIndex ) Parameters pathIndex The index of the travel path associated with the bridge. Description For future use. Notifies A* that the traveler has arrived at a bridge/elevator associated with a specific cell in its travel path, handing over control to the bridge. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .calculatePath() calculatePath( Object object , int flags = 0 ) calculatePath( Vec3 dest , int flags = 0 ) Parameters object The target destination object. dest The target destination model location. flags Configuration flags for the calculation. Description For future use. Calculates the A* path to the destination and stores it in the traveler's travelPath property. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .findCollision() findCollision( AStar.Allocation alloc , int ignoreSameTravelerAllocs ) Parameters alloc The target allocation to add. ignoreSameTravelerAllocs If 1, the search will not look at allocations for this traveler. Description For future use. Finds an existing allocation that \"collides\" with the passed allocation. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .finishPath() finishPath( ) Description For future use. Notifies A* that the traveler is finished traveling. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .getAllocations() getAllocations( double time = -1 ) Parameters time The target time for retrieving the set of allocations. Description Gets an array of AStar.Allocation s that the traveler has currently allocated or is scheduled to have allocated at a given time. The allocations can be accessed as an array, including using the length property and array accessor. var allocations = traveler.getAllocations(); for (int i = 1; i <= allocations.length; i++) { AStar.Cell cell = allocations[i].cell; } Note that a traveler's allocations are correlated with, yet distinct from, a traveler's travelPath . Each entry in a traveler's path can have up to 3 allocations associated with it, specifically when the traveler is traveling diagonally. For example, if a traveler's travelPath includes a traversal from cell (4, 4) to cell (5, 5), the traveler would need to allocate, as part of traversing that diagonal, cells (4, 5) and (5, 4), in addition to the destination cell (5, 5). Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .navigatePath() navigatePath( int startAtIndex ) Parameters startIndex The one-based travel path index of the cell to first travel one. Description For future use. Initiates the logic that builds kinematics and cell allocations along the traveler's calculated path. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler Constructor AStar.Traveler( treenode te ) Parameters te A TaskExecuter that is connected to the A* network as an A* Traveler. Description Constructs an AStar.Traveler object based on the given TaskExecuter. Casting from a treenode is not correct. AStar.Traveler traveler = AStar.Traveler(te); // correct AStar.Traveler traveler = te; // incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.html",
        "title": "FlexScript Class - Conveyor",
        "content": "Inherits from Object Description A class that provides properties and methods for monitoring and controlling a conveyor. Properties acceleration Gets the conveyor's acceleration. currentSpeed Gets the conveyor's current speed. deceleration Gets the conveyor's deceleration. defaultSpeed Gets the conveyor's default speed, which is the speed the conveyor starts with at the beginning of the simulation. itemData Accesses conveyor-specific data associated with items on the conveyor length Gets the conveyor's simulated length. motor Gets the conveyor's assigned motor. slugBuilder Gets data associated with the conveyor's slug-building status. targetSpeed Gets or sets the conveyor's current target speed. width Gets the conveyor's width. Static Methods estimateConveyTime Estimates the time for an item to travel from one part of the conveyor system to another. sendItem Sets an item's target destination in the conveyor system. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .acceleration readonly double acceleration Description Gets the conveyor's acceleration. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .currentSpeed readonly double currentSpeed Description Gets the conveyor's current speed. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .deceleration readonly double deceleration Description Gets the conveyor's deceleration. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .defaultSpeed readonly double defaultSpeed Description Gets the conveyor's default speed, which is the speed the conveyor starts with at the beginning of the simulation. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .itemData readonly itemData Description Accesses conveyor-specific data associated with items on the conveyor This gives access to the set of Conveyor.Item s associated with the items currently on the conveyor. Use itemData.length to get the number of items on the conveyor. Conveyor conveyor = param(1); int numItems = conveyor.itemData.length; Note that itemData.length may be different than conveyor. subnodes .length, as some items may be partially on the conveyor, but not in the conveyor's subtree. conveyover.itemData.length should always be greater than or equal to conveyor.subnodes.length. conveyor.subnodes.length; // the number of items in the conveyor's subtree conveyor.itemData.length; // the total number of all items partially-or-wholly on the conveyor. To access item data by rank, you can index into conveyor.itemData with the [ ] operator. conveyor.itemData[1]; // gets the data associated with the most downstream item on the conveyor conveyor.itemData[conveyor.itemData.length]; // gets the data associated with the most upstream item on the conveyor You can also access the itemData associated with a specific item, again using the [ ] operator. Object item = param(2); Conveyor.Item conveyorItem = conveyor.itemData[item]; See Conveyor.Item for more information. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .length readonly double length Description Gets the conveyor's simulated length. If the conveyor does not use a virtual length, this is the geometric length of the conveyor. If the conveyor uses a virtual length, it is the virtual length. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .motor readonly Object motor Description Gets the conveyor's assigned motor. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .slugBuilder readonly Conveyor.SlugBuilder slugBuilder Description Gets data associated with the conveyor's slug-building status. This object only exists if the conveyor is connected to a merge controller object. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .targetSpeed double targetSpeed Description Gets or sets the conveyor's current target speed. If you set this value, the conveyor's speed will change to the target speed. The conveyor's acceleration/deceleration will determine how long it takes to get to the target speed. Reversing Conveyor Direction If you set a conveyor's targetSpeed to a non-zero negative value, the conveyor will reverse direction. When a conveyor's direction is reversed the following things happen. All stopped items on the conveyor will be fully resumed. Each item on the conveyor will be set to a moving state. Each item's target destination will be erased. For example, if the item previously had been sent to a point in the system using the Conveyor . sendItem () method, that destination will be forgotten. Each item will regenerate its list of traversal points, e.g. photo eyes, decision points, etc. as if the item is entering the conveyor at the point where it is when the conveyor is reversed. Specific caveats that you should be aware of: If an item is straddling 1 two inline transfers when direction reversal happens, then both conveyors that the item is straddling 1 must be reversed at the same time. Doing otherwise will result in undefined behavior. An item cannot straddle 1 more than two conveyors when direction reversal happens, or else an exception will be thrown. No updates are made to the internal routing table when a conveyor's direction is reversed. This means, for routing purposes, i.e. when sending an item to a destination point in the system, the conveyor is always assumed to be conveying in its original direction. 1 Straddle : when any part of an item's entry space is over more than one conveyor at the same time. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .width readonly double width Description Gets the conveyor's width. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .estimateConveyTime() static double estimateConveyTime( Object origin , double n_a , Object dest , double n_a , double itemLength , int flags = 0 ) Parameters origin The origin point from which to estimate the convey time. This must be either a conveyor or a point on a conveyor, such as a decision point or photo eye. dest The destination point for the time estimation. This must be either a conveyor or a point on a conveyor, such as a decision point or photo eye. n_a Reserved for future use. Must be 0. itemLength Defines an item length for the estimation algorithm. This can affect the result depending on how speeds are defined in conveyor transfers. flags This can either be 0, or CONV_ESTIMATE_STANDARD_SPEEDS. If 0 (default), the estimation algorithm will assume slug-build conveyors will convey at their slug release speed. If CONV_ESTIMATE_STANDARD_SPEEDS is defined, the estimation algorithm will use normal conveying speeds. Returns double The estimated simulation time it will take for an item of the given size to convey from the point where the item's center is at the origin point, to the point where the item's center is at the destination point, assuming no blockage. Description Estimates the time for an item to travel from one part of the conveyor system to another. DecisionPoint src = current; DecisionPoint dest = current.outObjects[1]; Object item = param(1); double conveyTime = Conveyor.estimateConveyTime(src, 0, dest, 0, item.size.x); In making the estimation, the algorithm will always assume default conveyor speeds (not current conveyor speeds). Estimation speeds for slug-building conveyors are determined by the flags parameter. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .sendItem() static void sendItem( Object item , Object dest ) Parameters item The item whose target destination is to be set. dest The target destination. This must be a reference to a point within the conveyor system that is reachable from the item's current position on the conveyor system. This must either be a decision point, a photo eye, a station, or an exit transfer. Description Sets an item's target destination in the conveyor system. Conveyor.sendItem(item, current.outObjects[1]); Once an item's target destination is set, the item will take the shortest distance route, in the conveyor system, to that defined destination."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.Item.html",
        "title": "FlexScript Class - Conveyor.Item",
        "content": "Description A class that provides properties and methods for monitoring and controlling an item on a conveyor. The Conveyor.Item is NOT the same as the item object. In other words, you can't just set a Conveyor.Item to the item itself. Object item = param(2); Conveyor.Item conveyorItem = item; // COMPILE ERROR Instead, the Conveyor.Item is associated with , not the same as the item. It contains data associated with a specific item's conveyance on a specific conveyor. Thus, you need both the conveyor and the item to get access to the Conveyor.Item. You get access to Conveyor.Item using the Conveyor . itemData property. Object item = param(2); Conveyor conveyor = param(3); Conveyor.Item conveyorItem = conveyor.itemData[item]; Properties currentDistance Gets the item's current distance on the conveyor. destination Gets/sets the item's current target destination. entrySpace Gets the item's defined entry space. movingSpace Gets the item's defined moving space. object Gets the object (the flow item) associated with this Conveyor.Item. orientation Gets/sets the item's orientation on the conveyor. position Gets the item's current position on the conveyor. rotation Gets the item's current offset rotation on the conveyor. size Gets the item's size on the conveyor. stoppingSpace Gets the item's defined stopping space. timeKinematics Gets a reference to a time-based kinematics node associated with the item. totalDistance Gets the item's current total distance traveled within the conveyor system. travelKinematics Gets a reference to a travel-based kinematics node associated with the item. Methods resume Resumes a stopped item's movement on the conveyor. stop Stops the item's movement on the conveyor. turn Turns the item 90 degrees along a given axis, and re-configures the item's length, width, height, and spacing values. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .currentDistance readonly double currentDistance Description Gets the item's current distance on the conveyor. This is the same as position .x, except that offset kinematics are not considered here. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .destination Object destination Description Gets/sets the item's current target destination. If you set this, it should be set to a point on the conveyor system, such as a decision point or photo eye. See also Conveyor . sendItem () Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .entrySpace readonly double entrySpace Description Gets the item's defined entry space. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .movingSpace readonly double movingSpace Description Gets the item's defined moving space. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .object Object object Description Gets the object (the flow item) associated with this Conveyor.Item. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .orientation int orientation Description Gets/sets the item's orientation on the conveyor. Setting this value sets the item's orientation, and re-configures the item's length, width, height, and spacing values. The orientaton parameter defines one of 24 possible orientations for the item. It is a macro of the format CONV_ITEM_M_BY_N , where M is the axis of the item that points forward along the conveyor, and N is the axis pointing left along the conveyor. M must not be the same as N. M and N can be one of the following: X - item positive x axis X_NEG - item negative x axis Y - item positive y axis Y_NEG - item negative y axis Z - item positive z axis Z_NEG - item negative z axis Examples: CONV_ITEM_X_BY_Y - This is the default item orientation, which is that the item's positive x axis is aligned with the conveyor's forward axis, and the item's positive y axis is aligned with the conveyor's left axis. If you were to imagine a person traveling down the conveyor, in this orientation the person would be standing up facing forward on the conveyor. CONV_ITEM_Z_NEG_BY_Y - Here the item's negative z axis is aligned with the conveyor's forward axis, and the item's positive y axis is aligned with the conveyor's left axis. If this were a person, he would be lying on his back traveling feet first down the conveyor. CONV_ITEM_Y_NEG_BY_Z_NEG - Here the item's negative y axis is aligned with the conveyor's forward axis, and the item's negative z axis is aligned with the conveyor's left axis. If this were a person, he would be lying on his back, sideways with his right side leading down the conveyor. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .position readonly Vec3 position Description Gets the item's current position on the conveyor. This is associated with the center of the item. x is distance from the start of the conveyor, y is distance offset from the center of the conveyor, and z is vertical distance from the conveyor plane. If kinematics have been added to the item using the timeKinematics and/or travelKinematics properties, position will reflect those applied kinematics. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .rotation readonly Vec3 rotation Description Gets the item's current offset rotation on the conveyor. The rotation elements will only be non-zero if you have applied kinematics to the item using the timeKinematics and/or travelKinematics properties. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .size readonly Vec3 size Description Gets the item's size on the conveyor. An item's size on the conveyor is dependent on its orientation , and thus may not correspond directly with the item object's x, y and z sizes. The x element corresponds to the item's size along the conveyor's forward axis, y corresponds to the item's size along the conveyor's left axis, and z corresponds to the item's size along the conveyor's up axis. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .stoppingSpace readonly double stoppingSpace Description Gets the item's defined stopping space. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .timeKinematics readonly treenode timeKinematics Description Gets a reference to a time-based kinematics node associated with the item. This is for use in defining animations and offsets for the item that are dependent on simulation time. Get the node, then use kinematics commands to add time-based movement to the item. Note that kinematics-based offsets do not affect standard conveying logic like accumulation, photo eye cover/clear points, etc. The conveyor system applies kinematics offsets only visually. This means you will likely not want to offset the item in the x direction (forward or backward along the conveyor), unless you are willing to have accumulation and other conveyor logic fire at weird points visually. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .totalDistance readonly double totalDistance Description Gets the item's current total distance traveled within the conveyor system. Usually this is only used when adding kinematics to the item's travel-based kinematics using the travelKinematics property, as the \"start time\" for adding to the kinematics corresponds to the total distance traveled. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .travelKinematics readonly treenode travelKinematics Description Gets a reference to a travel-based kinematics node associated with the item. This is for use in defining animations and offsets for the item that are dependent on conveyor distance. Get the node, then use kinematics commands to add travel-based movement to the item. When adding kinematics to this node, start times, speeds, and accelerations should not be in simulation time, but should rather be defined in \"distance\" units. Start times should be relative to the item's totalDistance . For example, if you add a kinematic that starts at \"time\" 10, and travels at \"speed\" 5, this means that the kinematic will start when the item reaches travel position 10, and will travel 5 units of distance for every distance unit that the item conveys. Note that kinematics-based offsets do not affect standard conveying logic like accumulation, photo eye cover/clear points, etc. The conveyor system applies kinematics offsets only visually. This means you will likely not want to offset the item in the x direction (forward or backward along the conveyor), unless you are willing to have accumulation and other conveyor logic fire at weird points visually. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .resume() void resume( int force = 0 ) Parameters force If 1, the method will ignore the accumulation of stop() calls, and immediately start the item moving. Description Resumes a stopped item's movement on the conveyor. Paired with stop (). Calls to stop() will accumulate, meaning if you call stop() twice on the same item, by default you must call resume() twice to actually resume the item. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .stop() void stop( ) Description Stops the item's movement on the conveyor. Paired with resume (). Calls to stop() will accumulate, meaning if you call stop() twice on the same item, by default you must call resume () twice to actually resume the item. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .turn() void turn( int axis , int clockwise ) Parameters axis The conveyor axis to turn the item on. This can be on of the following: CONV_AXIS_UP - the conveyor's up axis CONV_AXIS_LEFT - the conveyor's left axis CONV_AXIS_FORWARD - the conveyor's forward axis clockwise Should be 1 or 0, defining whether to turn the item clockwise around the given axis. Description Turns the item 90 degrees along a given axis, and re-configures the item's length, width, height, and spacing values. The turning logic assumes there is enough space around the item that it will not overlap another item once turned. Behavior is undefined if there is not enough space."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.MergeController.html",
        "title": "FlexScript Class - Conveyor.MergeController",
        "content": "Description Allows access to the lanes of a MergeController object Conveyor.MergeController mc = model().subnodes[\"MergeController1\"]; var slugBuilder = mc.lanes[1]; Properties lanes Allows array-like access (by index) to the lanes of a MergeController as Conveyor.SlugBuilder objects. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.MergeController .lanes readonly lanes Description Allows array-like access (by index) to the lanes of a MergeController as Conveyor.SlugBuilder objects."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.Motor.html",
        "title": "FlexScript Class - Conveyor.Motor",
        "content": "Inherits from Object Description A class that provides properties and methods for controlling a conveyor motor. Properties speedRatio Gets/sets conveyor speeds as a ratio of their default speeds. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Motor .speedRatio double speedRatio Description Gets/sets conveyor speeds as a ratio of their default speeds. The motor's speed ratio allows you to control proportional speeds of the conveyors that are attached to the motor. Generally you will set this to a value between 0.0 and 1.0, although this range is not required. The value always resets to 1.0 when the simulation starts. When you set it, it sets each attached conveyor's targetSpeed property to that conveyor's default Speed times the speed ratio. For example, if you have a motor that is attached to two conveyors with default speeds of 2.0 and 3.0 m/s respectively, then if you set that motor's speed ratio to 0.7, it will set the first conveyor's speed to 1.4, and the second conveyor's speed to 2.1."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.SlugBuilder.html",
        "title": "FlexScript Class - Conveyor.SlugBuilder",
        "content": "Description Accesses data dealing with a conveyor's slug building state This object can be accessed through the Conveyor . slugBuilder property, or through the Conveyor.MergeController . lanes property. This object only exists if the conveyor is connected to a merge controller object. Properties conveyor Returns the conveyor associated with this slug builder isClear Returns 1 if all necessary control points are clear for the current slug to be released, 0 otherwise. isEnabled Gets or sets whether the conveyor associated with this slugBuilder will build slugs. lastAddedItem Gets the item that was last added to the slug. state Gets the slug-building state of the slug builder Methods makeReady Manually marks the slug ready for release release Manually releases a slug. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .conveyor readonly Conveyor conveyor Description Returns the conveyor associated with this slug builder Conveyor c = slugBuilder.conveyor; Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .isClear readonly int isClear Description Returns 1 if all necessary control points are clear for the current slug to be released, 0 otherwise. if (slugBuilder.isClear) slugBuilder.release(); Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .isEnabled int isEnabled Description Gets or sets whether the conveyor associated with this slugBuilder will build slugs. Before disabling, be sure that the lane does not have a slug. slugBuilder.isEnabled = 1; Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .lastAddedItem readonly Object lastAddedItem Description Gets the item that was last added to the slug. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .state readonly int state Description Gets the slug-building state of the slug builder 0 - None 1 - Building - a slug has begun building. 2 - Ready - the slug has acheived its ready criteria 3 - Releasing - the slug is being released Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .makeReady() makeReady( ) Description Manually marks the slug ready for release This method can be used to make a slug ready before it would otherwise become ready. slugBuilder.makeReady(); Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .release() release( ) Description Manually releases a slug. Can be used to release a slug, disregarding ready requirements and lane clear requirements. slugBuilder.release()"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Animation.html",
        "title": "FlexScript Class - Animation",
        "content": "Description A class that represents an object animation. Methods resume Resumes an animation from some point in the middle of the animation. start Starts an animation. stop Stops an animation. update Updates an animation. Details Do no remove, this fixes the anchor on doc.flexsim.com Animation .resume() void resume( int resumeAtType = 0 , double resumeAtVal = 0 ) Parameters resumeAtType Used in conjuction with resumeAtVal to define where in the animation to resume. Can be one of the following values: RESUME_AT_SAME_POS : (Default) Resumes the animation from the same point where it was last stopped. RESUME_AT_NEXT_KEYFRAME : Advances the animation to the next keyframe from the point where it was last stopped, then resumes. RESUME_AT_TIME : Resumes the animation at a specific time in the animation. resumeAtVal Only used if resumeAtType is RESUME_AT_TIME, in which case this value defines the time at which to resume. Description Resumes an animation from some point in the middle of the animation. current.animations[\"Walk\"].resume(); Do no remove, this fixes the anchor on doc.flexsim.com Animation .start() void start( int speedType = 0 , double speedValue = 0 , int repeatType = 0 , double repeatValue = 0 ) Parameters speedType Used in conjuction with speedValue to manipulate the speed with which the animation is run. Can be one of the following values: SPEED_TYPE_DEFAULT : The animation will run at the standard speed. SPEED_TYPE_DURATION : The animation will run such that its total duration is equal to speedValue. SPEED_TYPE_MULTIPLIER : The animation's run speed will be multiplied by speedValue. In other words, a speedValue of 2 will make the animation run at double-speed. speedValue See speedType. repeatType Used in conjunction with repeatValue to define how the animation will repeat. If not REPEAT_TYPE_DEFAULT, this will override the repeat type and value specified in the Animation Creator. Valid values are as follows: REPEAT_TYPE_DEFAULT : The animation will use its default repeat information defined in the Animation Creator REPEAT_TYPE_NONE : The animation will run just once. REPEAT_TYPE_NR_ITERATIONS : The animation will repeat (repeatValue) times before finishing. REPEAT_TYPE_USE_TIME : The animation will repeat indefinitely, but will start the animation over once it gets (repeatValue) time into the animation, which may be before the end of the animation. REPEAT_TYPE_TIME_AFTER_END : The animation will repeat indefinitely, but will finish the animation and wait (repeatValue) time units before starting the animation again. REPEAT_TYPE_LAST_FRAME : The animation will run just once, but then repeat the last frame of the animation indefinitely. repeatValue See repeatType. Description Starts an animation. current.animations[\"Walk\"].start(); Do no remove, this fixes the anchor on doc.flexsim.com Animation .stop() void stop( ) Description Stops an animation. current.animations[\"Walk\"].stop(); Do no remove, this fixes the anchor on doc.flexsim.com Animation .update() void update( double updateTime = -1 ) Parameters updateTime The simulation time on which to base the update. If not passed, it will update based on the current simulation time. Description Updates an animation. The method will update all of the positions of an object's animation components based on the update time and the keyframes defined in the animation. Usually you do not need to call this explicitly, since FlexSim's engine automatically updates active animations when it repaints any 3D windows. However, if your simulation logic is dependent on sub-component positions that change during an animation, you should call update() before getting those positions, or else the retrieved data will be based on the last time a window was repainted. This will cause different results with each simulation run. current.animations[\"Walk\"].update();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Color.html",
        "title": "FlexScript Class - Color",
        "content": "Description A class containing rgba values for an object's color. Properties a The color's alpha component. b The color's blue component. g The color's green component. r The color's red component. Methods lerp Linearly interpolates between two colors. Constructor Color Constructs a color by rgba component values. Static Properties aqua An aqua color black A black color blue A blue color brown A brown color gray A gray color green A green color lightBlue A light blue color lime A lime color orange An orange color pink A pink color purple A purple color red A red color silver A silver color teal A teal color white A white color yellow A yellow color Static Methods byNumber Returns a color by a uniquely identifying number. fromPalette Returns a color from a color palette. random Returns a random color. Operators - Substracts one color from another. != Compares two colors. * Multiplies a color by another color or a scale factor. / Divides a color by a factor. + Adds two colors together. += Assigns the color to be the sum of two colors. -= Assigns the color to be the difference of two colors. == Compares two colors. Details Do no remove, this fixes the anchor on doc.flexsim.com Color .a double a Description The color's alpha component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .b double b Description The color's blue component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .g double g Description The color's green component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .r double r Description The color's red component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .lerp() Color lerp( Color targetColor , double t ) Parameters targetColor The color to interpolate to. t A ratio between 0 and 1 that defines the percentage to interpolate from the current color to targetColor. Returns Color The resulting interpolated color. Description Linearly interpolates between two colors. The following example code changes current's color 20% toward red. current.color = current.color.lerp(Color.red, 0.2); Do no remove, this fixes the anchor on doc.flexsim.com Color Constructor Color( double r , double g , double b , double a = 1 ) Parameters r The red component, in the range 0-1. g The green component, in the range 0-1. b The blue component, in the range 0-1. a The alpha component, in the range 0-1. Description Constructs a color by rgba component values. current.color = Color(0.1, 0.6, 0.3); Do no remove, this fixes the anchor on doc.flexsim.com Color .aqua static readonly Color aqua Description An aqua color current.color = Color.aqua; Do no remove, this fixes the anchor on doc.flexsim.com Color .black static readonly Color black Description A black color current.color = Color.black; Do no remove, this fixes the anchor on doc.flexsim.com Color .blue static readonly Color blue Description A blue color current.color = Color.blue; Do no remove, this fixes the anchor on doc.flexsim.com Color .brown static readonly Color brown Description A brown color current.color = Color.brown; Do no remove, this fixes the anchor on doc.flexsim.com Color .gray static readonly Color gray Description A gray color current.color = Color.gray; Do no remove, this fixes the anchor on doc.flexsim.com Color .green static readonly Color green Description A green color current.color = Color.green; Do no remove, this fixes the anchor on doc.flexsim.com Color .lightBlue static readonly Color lightBlue Description A light blue color current.color = Color.lightBlue; Do no remove, this fixes the anchor on doc.flexsim.com Color .lime static readonly Color lime Description A lime color current.color = Color.lime; Do no remove, this fixes the anchor on doc.flexsim.com Color .orange static readonly Color orange Description An orange color current.color = Color.orange; Do no remove, this fixes the anchor on doc.flexsim.com Color .pink static readonly Color pink Description A pink color current.color = Color.pink; Do no remove, this fixes the anchor on doc.flexsim.com Color .purple static readonly Color purple Description A purple color current.color = Color.purple; Do no remove, this fixes the anchor on doc.flexsim.com Color .red static readonly Color red Description A red color current.color = Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .silver static readonly Color silver Description A silver color current.color = Color.silver; Do no remove, this fixes the anchor on doc.flexsim.com Color .teal static readonly Color teal Description A teal color current.color = Color.teal; Do no remove, this fixes the anchor on doc.flexsim.com Color .white static readonly Color white Description A white color current.color = Color.white; Do no remove, this fixes the anchor on doc.flexsim.com Color .yellow static readonly Color yellow Description A yellow color current.color = Color.yellow; Do no remove, this fixes the anchor on doc.flexsim.com Color .byNumber() static Color byNumber( int number ) Parameters number The identifying number. Returns Color The resulting color. Description Returns a color by a uniquely identifying number. item.color = Color.byNumber(item.labelVal); The number passed in refers to an index in the standard colors spectrum, as follows: 1 - red 2 - green 3 - blue 4 - yellow 5 - orange 6 - purple 7 - lime 8 - pink 9 - gray 10 - teal 11 - aqua 12 - brown 13 - light blue 14 - silver 15 - white For numbers above 15, a unique color will generated based on an algorithm. Do no remove, this fixes the anchor on doc.flexsim.com Color .fromPalette() static Color fromPalette( Variant value , Variant palette = nullvar ) Parameters value The value to get a color for. palette The Color Palette to get a color from. Returns Color The resulting color. Description Returns a color from a color palette. A palette can either be specified by name or by node. The color palette will look up the color assigned to the given value, asserting a color for the value if necessary. However, if the palette is using a gradient, the palette will linearly interpolate between the color values already defined by the palette. If no palette is specified, then the resulting color will be generated using the given value. Do no remove, this fixes the anchor on doc.flexsim.com Color .random() static Color random( int stream = 0 ) Parameters stream The random number stream to use. Returns Color The resulting color. Description Returns a random color. current.color = Color.random(); Do no remove, this fixes the anchor on doc.flexsim.com Color .operator - Color operator -( Color other ) Parameters other The color to subtract from this color. Returns Color The resulting color. Description Substracts one color from another. Resulting components will be clamped to the range 0-1. current.color = Color.aqua - Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator != int operator !=( Color other ) Parameters other The color to compare to this color. Returns int True if the two colors are different, false otherwise. Description Compares two colors. int isNotRed = current.color != Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator * Color operator *( Color other ) Color operator *( double factor ) Parameters other The color to multiply this color by. factor A scale factor to multiply each component by. Returns Color The resulting color. Description Multiplies a color by another color or a scale factor. When a Color is passed, the operation will perform per-component multiplication. Resulting components will be clamped to the range 0-1. current.color = Color.aqua * Color.red; current.color = Color.aqua * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator / Color operator /( double factor ) Parameters factor The factor to divide each component by. Returns Color The resulting color. Description Divides a color by a factor. current.color = Color.aqua / 2; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator + Color operator +( Color other ) Parameters other The color to add this one to. Returns Color The resulting color. Description Adds two colors together. Resulting components will be clamped to the range 0-1. current.color = Color.blue + Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator += Color operator +=( Color other ) Parameters other The color to add this one to. Returns Color The resulting color and assigns it to the variable. Description Assigns the color to be the sum of two colors. Resulting components will be clamped to the range 0-1. current.color += Color.blue; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator -= Color operator -=( Color other ) Parameters other The color to subtract from this one. Returns Color The resulting color and assigns it to the variable. Description Assigns the color to be the difference of two colors. Resulting components will be clamped to the range 0-1. current.color -= Color.blue; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator == int operator ==( Color other ) Parameters other The color to compare to this color. Returns int True if the two colors are exactly the same, false otherwise. Description Compares two colors. int isRed = current.color == Color.red;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/DateTime.html",
        "title": "FlexScript Class - DateTime",
        "content": "Description A class containing functions for getting and manipulating dates and times. This DateTime class allows you to create and manipulate dates and times that are stored as FlexSim time. FlexSim time is defined as the number of seconds since January 1st, 1601. The specified Model Time Units does not affect FlexSim time. It is always in seconds. Model Settings When you start a new model, you can specify the start date and time of the model. That, and model stop times, can later be changed through the Run Time Options on the Simulation Control Bar. You can also specify the date and time display format in the Model Settings window. These formats can be used when displaying a DateTime as a string or for creating a DateTime. Excel Import/Export When you import dates and times from an Excel document, you can do so as either strings or as numbers which are in Excel time. This DateTime class can be used to convert those strings or Excel time into FlexSim time. For exporting, you can write formatted dates and/or times to a global table using the DateTime. toString () method. Dashboard Charts Dashboard charts like the Time Plot can use FlexSim time to display the dates and times along the X or Y axis. This can be done by recording DateTimes in a Statistics Collector. Properties day The day of the month dayOfWeek The day of the week hour The hour of the day millisecond The millisecond of the second. minute The minute of the hour. month The month of the year second The second of the minute. totalDays The number of days since January 1st, 1601. totalHours The number of hours since January 1st, 1601. totalMilliseconds The number of milliseconds since January 1st, 1601. totalMinutes The number of minutes since January 1st, 1601. totalSeconds The number of seconds since January 1st, 1601. value The value of the date and time in FlexSim time. year The year Methods toString Converts the DateTime into a human readable string. Constructor DateTime Constructs a DateTime. Static Methods compose Constructs a new DateTime from component parts. days Constructs a new DateTime from the number of days. fromExcelTime Converts Excel time into FlexSim time. hours Constructs a new DateTime from the number of hours. milliseconds Constructs a new DateTime from the number of milliseconds. minutes Constructs a new DateTime from the number of minutes. seconds Constructs a new DateTime from the number of seconds. Operators - Substracts one DateTime from another. != Compares two DateTimes. + Adds two DateTimes together. += Assigns the DateTime to be the sum of two DateTimes. < Compares two DateTimes. <= Compares two DateTimes. -= Assigns the DateTime to be the difference of two DateTimes. == Compares two DateTimes. > Compares two DateTimes. >= Compares two DateTimes. Details Do no remove, this fixes the anchor on doc.flexsim.com DateTime .day readonly double day Description The day of the month Value ranges from 1 to 31. double currentDay = Model.dateTime.day; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .dayOfWeek readonly double dayOfWeek Description The day of the week Value ranges from 1 to 7 with 1 being Sunday. double currentDayOfWeek = Model.dateTime.dayOfWeek; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .hour readonly double hour Description The hour of the day Value ranges from 0 to 23 with the 0 hour being from 12:00:00AM to 12:59:59AM. double currentHour = Model.dateTime.hour; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .millisecond readonly double millisecond Description The millisecond of the second. Value ranges from 0 to 999. double currentMillisecond = Model.dateTime.millisecond; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .minute readonly double minute Description The minute of the hour. Value ranges from 0 to 59. double currentMinute = Model.dateTime.minute; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .month readonly double month Description The month of the year Value ranges from 1 to 12. double currentMonth = Model.dateTime.month; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .second readonly double second Description The second of the minute. Value ranges from 0 to 59. double currentSecond = Model.dateTime.second; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalDays readonly double totalDays Description The number of days since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current day. double totalDays = Model.dateTime.totalDays; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalHours readonly double totalHours Description The number of hours since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current hour. double totalHours = Model.dateTime.totalHours; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalMilliseconds readonly double totalMilliseconds Description The number of milliseconds since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current millisecond. double totalMilliseconds = Model.dateTime.totalMilliseconds; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalMinutes readonly double totalMinutes Description The number of minutes since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current minute. double totalMinutes = Model.dateTime.totalMinutes; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalSeconds readonly double totalSeconds Description The number of seconds since January 1st, 1601. This is equivalent to DateTime.value or putting the DateTime into a double. double totalSeconds = Model.dateTime.totalSeconds; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .value readonly double value Description The value of the date and time in FlexSim time. This property is equivalent to DateTime. totalSeconds or putting a DateTime into a double. double currentTime = Model.dateTime.value; double currentTime = Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .year readonly double year Description The year double currentYear = Model.dateTime.year; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .toString() string toString( string format = ) Parameters format If format is NULL, the default windows date/time format will be used. Description Converts the DateTime into a human readable string. This method uses the windows settings for formatting. When using a custom format, the following formatting options are available: Specifier Explanation Example %% A % character % %n New line character %t Horizontal tab character Year %Y The four digit year 2017 %y The last two digits of the year 17 %C The first two digits of the year 20 Month %b The abbreviated month name Oct %B The full month name October %m The month as a number (1 - 12) 10 Week %U The week of the year as a number with Sunday being the first day of the week (00 - 53) 15 %W The week of the year as a number with Monday being the first day of the week (00 - 53) 15 Days of the year/month %j The day of the year as a three digit number (001 - 366) 045 %d The day of the month as a two digit number (01 - 31) 05 %e The day of the month as a single digit number (1 - 31) 5 Day of the week %a The abbreviated weekday name Fri %A The full weekday name Friday %w The weekday as a number where Sunday is 0 (0 - 6) 3 Hour, minute, second %H The hour as a two digit number, 24 hour clock (00 - 23) 08 %I The hour as a two digit number, 12 hour clock (01 - 12) 08 %M The minute as a two digit number (00 - 59) 30 %S The second as a two digit number (00 - 60) 25 Other %c The standard date and time (windows default setting) 09/24/17 08:00:00 %x The standard date (windows default setting) 09/24/17 %X The standard time (windows default setting) 08:00:00 %D Equivalent to %m/%d/%y 09/24/17 %F Equivalent to %Y-%m-%d 2017-09-24 %r The 12-hour clock time (based on windows setting) 08:00:00 %R Equivalent to %H:%M 08:00 %T Equivalent to %H:%M:%S 08:00:00 %p AM or PM (based on windows setting) AM %z The offset from UTC time -0600 %Z The time zone name or abbreviation Mountain Daylight Time string currentDateTime = Model.dateTime.toString(); string currentDateTime = Model.dateTime.toString(\"%H:%M:%S\"); Do no remove, this fixes the anchor on doc.flexsim.com DateTime Constructor DateTime( double time ) DateTime( string date , string format = 0 ) DateTime( int days , int hours , int minutes = 0 , int seconds = 0 , int milliseconds = 0 ) Parameters time The number of seconds since January 1st, 1601. date The string representation of a date. format If format is NULL, the default windows date/time format will be used. days The number of days to add to the final DateTime hours The number of hours (usually less than 24) to add to the final DateTime minutes The number of minutes (usually less than 60) to add to the final DateTime seconds The number of seconds (usually less than 60) to add to the final DateTime milliseconds The number of milliseconds (usually less than 1000) to add to the final DateTime Description Constructs a DateTime. DateTime theDate = DateTime(3600); The time can be treated as a duration if you add two DateTimes together. For example, DateTime futureDate = Model.dateTime + DateTime(340); //Add 340 seconds to the current model time The second constructor can be used to create a DateTime from a string representation of a date. See toString () for formatting options. DateTime theDate = DateTime(\"12/31/2019 8:00:00 AM\", \"%m/%d/%Y %I:%M:%S %p\"); The third constructor can be used to create a DateTime that is rounded down to the nearset important marker. For example, if the current model time is between 8:00 and 9:00 on a particular day, you could use the following code to create a date time that represents 8:00 on that same day: DateTime roundedToHour = DateTime(Model.dateTime.totalDays, Model.dateTime.hours); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .compose() static DateTime compose( int year , int month = 1 , int day = 1 , int hour = 0 , int minute = 0 , int second = 0 , int millisecond = 0 ) Parameters year The year of the DateTime month The month of the DateTime (1 - 12) day The day of the DateTime (1 - 28,29,30,31) hour The hour of the DateTime (0 - 23) minute The minute of the DateTime (0 - 59) second The second of the DateTime (0 - 59) millisecond The millisecond of the DateTime (0 - 999) Description Constructs a new DateTime from component parts. DateTime composedDateTime = DateTime.compose(2019, 12, 31, 23, 59, 59); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .days() static DateTime days( double days ) Description Constructs a new DateTime from the number of days. DateTime oneDay = DateTime.days(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .fromExcelTime() static DateTime fromExcelTime( double excelTime ) Description Converts Excel time into FlexSim time. When performing an Excel Import , the Data Distinction can be set to Values Only . This will cause cells that store dates to be imported into FlexSim as numbers that are in Excel time. This method will convert that Excel time into FlexSim time. DateTime dateTime = DateTime.fromExcelTime(excelTime); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .hours() static DateTime hours( double hours ) Description Constructs a new DateTime from the number of hours. DateTime oneHour = DateTime.hours(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .milliseconds() static DateTime milliseconds( double milliseconds ) Description Constructs a new DateTime from the number of milliseconds. DateTime oneMillisecond = DateTime.milliseconds(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .minutes() static DateTime minutes( double minutes ) Description Constructs a new DateTime from the number of minutes. DateTime oneMinute = DateTime.minutes(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .seconds() static DateTime seconds( double seconds ) Description Constructs a new DateTime from the number of seconds. DateTime oneSecond = DateTime.seconds(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator - DateTime operator -( DateTime other ) Parameters other The DateTime to subtract from this DateTime. Returns DateTime The resulting DateTime. Description Substracts one DateTime from another. DateTime subTwoDates = Model.dateTime - dateTime; DateTime subOneDay = Model.dateTime - DateTime.days(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator != int operator !=( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if the two DateTimes are different, false otherwise. Description Compares two DateTimes. int differentDates = dateTime != Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator + DateTime operator +( DateTime other ) Parameters other The DateTime to add this one to. Returns DateTime The resulting DateTime. Description Adds two DateTimes together. DateTime addTwoDates = Model.dateTime + dateTime; DateTime addOneDay = Model.dateTime + DateTime.days(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator += DateTime operator +=( DateTime otherDateTime ) Parameters otherDateTime The DateTime to add to this one. Returns DateTime The resulting DateTime. Description Assigns the DateTime to be the sum of two DateTimes. thisDateTime += otherDateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator < int operator <( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is less than other, false otherwise. Description Compares two DateTimes. int pastDate = dateTime < Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator <= int operator <=( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is less than or equal to other, false otherwise. Description Compares two DateTimes. int pastDate = dateTime <= Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator -= DateTime operator -=( DateTime otherDateTime ) Parameters otherDateTime The DateTime to subtract from this one. Returns DateTime The resulting DateTime. Description Assigns the DateTime to be the difference of two DateTimes. thisDateTime += otherDateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator == int operator ==( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if the two DateTimes are exactly the same, false otherwise. Description Compares two DateTimes. int sameDate = dateTime == Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator > int operator >( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is greater than other, false otherwise. Description Compares two DateTimes. int futureDate = dateTime > Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator >= int operator >=( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is greater than or equal to other, false otherwise. Description Compares two DateTimes. int futureDate = dateTime >= Model.dateTime;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Delay.html",
        "title": "FlexScript Class - Delay",
        "content": "Description An opaque awaitable type, specifically used in coroutines, representing an abstract delay time. await Delay(5); // awaits 5 model time units var delay = Delay.seconds(22); // represents a 22 second delay await delay; // wait for 22 seconds await delay; // wait again for another 22 seconds A Delay represents an 'abstract' delay time in that the suspend/resume mechanism is not started when the Delay object is created, but each time the await statement is invoked, resulting in possibly multiple different delay actions. Constructor Delay Returns a delay object representing a delay time in model time units. Static Methods days Returns a delay object representing a delay time in days. hours Returns a delay object representing a delay time in hours. minutes Returns a delay object representing a delay time in minutes. realTime Returns a delay object representing a real-time delay in seconds. seconds Returns a delay object representing a delay time in seconds. Details Do no remove, this fixes the anchor on doc.flexsim.com Delay Constructor Delay( double timeUnits ) Parameters timeUnits The number of model time units to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in model time units. await Delay(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .days() static Delay days( double numDays ) Parameters numDays The number of days to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in days. await Delay.days(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .hours() static Delay hours( double numHours ) Parameters numHours The number of hours to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in hours. await Delay.hours(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .minutes() static Delay minutes( double numMinutes ) Parameters numMinutes The number of minutes to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in minutes. await Delay.minutes(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .realTime() static Delay realTime( double numSeconds ) Parameters numSeconds The number of real-time seconds to delay. Returns Delay The resulting delay. Description Returns a delay object representing a real-time delay in seconds. await Delay.realTime(0); This is mostly used as part of UI development by FlexSim developers, but it is nevertheless available to users. You should not use this in your simulation logic or else you will have repeatability issues. Rather, awaiting real time delays can be useful for things like auto-build scripts. It allows you to execute logic asynchronously. Awaiting a real time delay of 0 will post a message to FlexSim's message queue. The logic that called the FlexScript code will finish, and when FlexSim continues processing its message queue and reaches the posted message, it will then resume the coroutine. If you await a real time delay greater than 0, then FlexSim will create a platform-dependent timer, will wait the defined time, and then will resume the coroutine. Do no remove, this fixes the anchor on doc.flexsim.com Delay .seconds() static Delay seconds( double numSeconds ) Parameters numSeconds The number of seconds to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in seconds. await Delay.seconds(5);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Event.html",
        "title": "FlexScript Class - Event",
        "content": "Description An opaque awaitable type, specifically used in coroutines, representing an event owned by a specific object, that can be 'awaited', or listened to. Event e = current.event(“OnEntry”); await e; await e; // awaiting the same Event object a second time will await the event a second time. // The listening is initiated when the await statement executes, not when // the event object is created. In other words, an instance of an Event object is // a reference to an object’s event that may fire multiple times, not a single // execution of an object’s event. await current.event(“OnExit”); await Event.evaluation(current.labels[“MyCode”]); Event evaluationEvent = Event.evaluation(current.labels[“MyCode”]); while (true) { await evaluationEvent; … } An event represents a generic reference to a specific object's OnEntry, OnExit, etc., event. It is not a reference to a single execution of an object's event. This means you can await the same Event multiple times, and each await may be resumed on different executions of the object's event. In other words, the listening mechanism is initiated when the await statement executes, not when the Event object is created. Static Methods evaluation Returns an Event object representing the evaluation of a node in the tree. Details Do no remove, this fixes the anchor on doc.flexsim.com Event .evaluation() static Event evaluation( treenode node ) Parameters node The node whose evaluation you want to listen for. Returns Event The resulting Event. Description Returns an Event object representing the evaluation of a node in the tree. await Event.evaluation(current.labels[\"MyCode\"]);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/EventLog.html",
        "title": "FlexScript Class - EventLog",
        "content": "Description A class that provides access to the event log. Using the EventLog class, you can add custom events to the Event Log. EventLog.info(\"MyCustomEvent\"); if (/*something is unusual*/) { EventLog.warn(\"MyCustomEvent\", 0, 0, \"Something is unusual\"); } if (/*something is wrong*/) { EventLog.error(\"MyCustomEvent\", 0, 0, \"Something is wrong\"); } if (/*something is terribly wrong*/) { EventLog.fatal(\"MyCustomEvent\", 0, 0, \"Something is terribly wrong\"); } The logging methods are: info() warn() error() fatal() When used, each method logs a new event in the event log at the current model time and at the current level. The event is logged in any active log: the model log, the system log, or both. If no event logs are active, then these methods do nothing. The only required parameter for the logging methods is the event parameter. It is best to use a short but meaningful name so that filtering by the event makes sense. The remainder of the parameters (two node parameters and four string parameters) are optional and arbitrary. You can check whether any logs are active using the enabled property: if (EventLog.enabled) { string p1 = /*expensive computation*/; EventLog.info(\"MyCustomEvent\", 0, 0, p1); } Static Properties enabled Returns whether logging is currently enabled. Static Methods error Log an Error-level event at the current time. fatal Log a Fatal-level event at the current time. info Log an Info-level event at the current time. warn Log a Warn-level event at the current time. Details Do no remove, this fixes the anchor on doc.flexsim.com EventLog .enabled static readonly int enabled Description Returns whether logging is currently enabled. If true, then events are being logged to the model Event Log, the system Event Log, or both. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .error() static error( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log an Error-level event at the current time. Error-level events are often used to indicate that the simulation cannot continue or that the results are invalid. Consider stopping the simulation manually if you log an Error-level event. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .fatal() static fatal( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log a Fatal-level event at the current time. Fatal-level events are often used to indicate that data loss or corruption has occurred. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .info() static info( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log an Info-level event at the current time. Info-level events are often used to indicate that something normal or expected has occurred. All model logic events are Info-level events. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .warn() static warn( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log a Warn-level event at the current time. Warn-level events are often used to indicate that something unexpected has occurred but that the simulation can continue to operate."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Group.html",
        "title": "FlexScript Class - Group",
        "content": "Description A class for grouping objects. Properties length The number of members in the group. Methods addMember Adds an object to the group. indexOf Returns the index of the object in the group. isMember Checks if the object is a member of the group. removeMember Removes an object from the group. toFlatArray Converts the group and any nested groups into a single Array of group members. Constructor Group Creates a reference to a group. Operators [] Gets an individual group member by index. Details Do no remove, this fixes the anchor on doc.flexsim.com Group .length int length Description The number of members in the group. int numMembers = Group(\"Staff\").length; Do no remove, this fixes the anchor on doc.flexsim.com Group .addMember() void addMember( treenode object ) Parameters object The object to add to the group. Returns void Description Adds an object to the group. group.addMember(Model.find(\"Processor1\")); Do no remove, this fixes the anchor on doc.flexsim.com Group .indexOf() int indexOf( treenode object ) Parameters object The object to find the index of. Returns int The index of the object in the group, 0 if it is not a member. Description Returns the index of the object in the group. int index = group.indexOf(Model.find(\"Processor1\")); Do no remove, this fixes the anchor on doc.flexsim.com Group .isMember() int isMember( treenode object , int recursive ) Parameters object The object to look for in the group. recursive Should groups contained by this group also be searched. Returns int A 1 if the object is a member of the group, 0 otherwise. Description Checks if the object is a member of the group. This code checks if Processor1 is a direct member of the group: group.isMember(Model.find(\"Processor1\")); This code checks if Processor1 is a member of the group or the member of any of the groups contained by the group: group.isMember(Model.find(\"Processor1\"), 1); Do no remove, this fixes the anchor on doc.flexsim.com Group .removeMember() void removeMember( treenode object ) Parameters object The object to remove from the group. Returns void Description Removes an object from the group. group.removeMember(Model.find(\"Processor1\")); Do no remove, this fixes the anchor on doc.flexsim.com Group .toFlatArray() Array toFlatArray( ) Returns Array A single, flat Array of all the group members of the group and the members of any nested groups. Description Converts the group and any nested groups into a single Array of group members. Array members = group.toFlatArray(); Do no remove, this fixes the anchor on doc.flexsim.com Group Constructor Group( string name ) Parameters name The name of the group. Description Creates a reference to a group. Group parts = Group(\"Packers\"); Do no remove, this fixes the anchor on doc.flexsim.com Group .operator [] Object operator []( int index ) Parameters index The index of the desired group member. Returns Object The group member at the specified index. Description Gets an individual group member by index. Object obj = Group(\"Machines\")[2];"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/JSON.html",
        "title": "FlexScript Class - JSON",
        "content": "Description A class containing common JSON functions. Static Methods parse Parses a JSON string and returns a Variant. stringify Converts a Variant into a JSON string. Details Do no remove, this fixes the anchor on doc.flexsim.com JSON .parse() static Variant parse( string json ) Parameters json The JSON string. Returns Variant The parsed JSON as a Variant. Description Parses a JSON string and returns a Variant. Array array = JSON.parse(\"[0, \\\"string\\\"]\"); Map map = JSON.parse(\"{\\\"number\\\" : 0, \\\"string\\\" : \\\"string\\\"}\"); Do no remove, this fixes the anchor on doc.flexsim.com JSON .stringify() static string stringify( Variant value ) Parameters value The Variant value. Returns string The resulting JSON string. Description Converts a Variant into a JSON string. string str1 = JSON.stringify([0, \"string\"]); Map map; map[\"number\"] = 0; map[\"string\"] = \"string\"; string str2 = JSON.stringify(map);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Map.html",
        "title": "FlexScript Class - Map",
        "content": "Description An associative array of Variant keys and values. A Map contains a set of keys. Each key has an associated value. You can use the key to retrieve the value. For example: Map map; map[5] = 10; int x = map[5]; // x is 10 This example demonstrates that the Map uses the [] operator, like the Array . However the Map's [] operator has two important differences: A Map can use any value as a key: Map map; map[\"Hello\"] = \"world\"; map[Model.find(\"Processor1\")] = 10; The Map's [] will always add the value in the [] to the Map. Map map; map[1]; map[2]; map[3]; // The map now has three keys in it. // The default value associated with // each key is a null variant. A Variant can hold a Map value. For more information, please see the Variant topic. Dynamic Properties A Map can use dynamic properties to interact with string keys: Map map; map.Key1 = 1; // identical to map[\"Key1\"] = 1; map.MyKeyName = 3; // identical to map[\"MyKeyName\"] = 3; return map.Key1; // NOT identical to map[\"Key1\"] When you use dynamic properties to write to the map, the property is asserted. This is the same behavior as using the [] operator. However, when you read the map with dynamic properties, you will get an exception if that key is not present. Examining a Map In order to determine if a key is in the map, you can use the find () method: var iter = map.find(3); if (iter) { // the key is contained in the map print(iter.key, iter.value); } else { // the key is not contained in the map print(\"key not found\"); } In order to examine each element of a map, you can use the begin () and end () methods in a for loop: for (var iter = map.begin(); iter != map.end(); iter++) { print(iter.key, iter.value); } As an alternative, you could use the keys property to access all the keys in the array, and use a for loop with that array: Array keys = map.keys; for (int i = 1; i <= keys.length; i++) { print(keys[i], map[keys[i]]); } Note that the keys property constructs a new array, with a copy of all the keys in the map. begin(), end(), and find() The methods begin (), end (), and find () all return a map iterator object. This object has the following properties and operators: key - the key referenced by this iterator. value - the value associated with the key referenced by this iterator. operator bool() - casting the iterator as a bool will return true if the iterator is valid, and false if it is not. operator++ - incrementing the iterator will move it to the next key in the map. If the iterator is at the end of the map, this operator invalidates the iterator. Nodes as Keys You can use a treenode as a key. You can also use a container (a Map or an Array) that contains a treenode as a key. However, if that treenode (e.g. a flowitem) is destroyed, then that key is said to be lost. The keys array will not include those keys, and an iterator objects (returned from begin (), end (), and find ()) will skip those values. Key Ordering The Map class is a hash map, so keys in the map are in not guaranteed to be in any order. They are not sorted by comparison, and they are not in insertion order. Even if it appears that you can depend on some particular ordering, that ordering could easily change in a bug fix release or new version of FlexSim. Properties keys Returns an array of all key values in the map. stringKeys Dynamically gets and sets the value for string keys. values Returns an aray of all associated values in the map. Methods begin Returns an iterator to the first key/value pair in the map. clear Removes all keys and associated values from the Map. clone Returns a deep copy of the Map. end Returns an invalid iterator. find Returns an iterator to the given key if it is present, or an invalid iterator if the key is not present. remove Removes the given key and its associated value from the map if it is present. Operators != Compares two maps for equality, returning true if they are unequal. [] Asserts the given key, and returns its associated value. = Assigns this map to the same data as the given map. == Compares two maps for equality. Details Do no remove, this fixes the anchor on doc.flexsim.com Map .keys readonly Array keys Description Returns an array of all key values in the map. The array is a new copy of all keys values. If keys and values are both accessed without any intervening insertions or removals, the resulting arrays will be ordered the same way. Do no remove, this fixes the anchor on doc.flexsim.com Map .stringKeys readonly stringKeys Description Dynamically gets and sets the value for string keys. Allows getting and setting the value for string keys, similar to using labels: // asserts the key \"MyKey\" and sets its value to 5 map.MyKey = 5; // reads the value for the key \"SKU_1\" // throws if \"SKU_1\" is not a key in the map Variant value = map.SKU_1; Do no remove, this fixes the anchor on doc.flexsim.com Map .values readonly Array values Description Returns an aray of all associated values in the map. he array is a new copy of all associated values. If keys and values are both accessed without any intervening insertions or removals, the resulting arrays will be ordered the same way. Do no remove, this fixes the anchor on doc.flexsim.com Map .begin() begin( ) Returns An iterator to the first key/value pair in the map Description Returns an iterator to the first key/value pair in the map. If the map is empty, then this method returns an iterator equal to the end () Do no remove, this fixes the anchor on doc.flexsim.com Map .clear() clear( ) Description Removes all keys and associated values from the Map. Do no remove, this fixes the anchor on doc.flexsim.com Map .clone() Map clone( ) Returns Map A copy of the map Description Returns a deep copy of the Map. Map map1; Map map2 = map1; // map2 points at the same map as map1 map1[10] = 2; // map2 can access the key 10 Map map3 = map1.clone(); map3[20]; // does not affect map1 or map2 Do no remove, this fixes the anchor on doc.flexsim.com Map .end() end( ) Returns An invalid iterator Description Returns an invalid iterator. This method is usually used as part of a for-loop: for (var iter = map.begin(); iter != map.end(); iter++) { /*... */} When the iterator used in the loop advances past the end of the map, it becomes invalid, and comparing it to the end() iterator will return true. Do no remove, this fixes the anchor on doc.flexsim.com Map .find() find( Variant key ) Parameters key The key to check for in the map Returns An iterator, invalid if the key is not in the map. Description Returns an iterator to the given key if it is present, or an invalid iterator if the key is not present. This method does not add the given key to the map, and so can be used to check for a key without adding it. Do no remove, this fixes the anchor on doc.flexsim.com Map .remove() int remove( Variant key ) Parameters key The key to remove Returns int True if the key was removed, false if the key was not present. Description Removes the given key and its associated value from the map if it is present. Do no remove, this fixes the anchor on doc.flexsim.com Map .operator != int operator !=( Map ) Parameters The map to compare to this map Returns int True if the maps are unequal Description Compares two maps for equality, returning true if they are unequal. Returns the opposite of the == operator. Do no remove, this fixes the anchor on doc.flexsim.com Map .operator [] Variant operator []( Variant key ) Variant operator []( Map key ) Parameters key The key to use in retrieving an associated value Returns Variant The value associated with the key Description Asserts the given key, and returns its associated value. If the key is not present in the map, it is added, and its associated value is set to a null Variant. The value is returned by reference, so you can modify it: map[10] += 1; // increments the value for key 10 by 1 Do no remove, this fixes the anchor on doc.flexsim.com Map .operator = Map operator =( Variant ) Parameters The map to assign this map to Returns Map The assigned map Description Assigns this map to the same data as the given map. After the assignment, both map variables will point at the same Map object. This is a shallow assignment. Do no remove, this fixes the anchor on doc.flexsim.com Map .operator == int operator ==( Map ) Parameters The map to compare this map to Returns int True if the maps are equal Description Compares two maps for equality. Two maps are equal if the both point to the same Map object, or if they both have the same set of keys, and for all keys, the values are equal."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Mat4.html",
        "title": "FlexScript Class - Mat4",
        "content": "Description Represents a matrix for performing space/vector transformations. Methods inverse Returns a matrix that is the inverse of this matrix. rotate Rotates the transformation matrix around a defined vector. scale Scales the matrix by a defined x/y/z vector. translate Translates the matrix by a defined x/y/z vector. Constructor Mat4 Constructs a matrix. Operators != Compares two matrices. * Multiplies a matrix by another vector or a scale factor. == Compares two matrices. Details Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .inverse() Mat4 inverse( ) Returns Mat4 The inverted matrix. Description Returns a matrix that is the inverse of this matrix. This method creates new matrix that is the inverse of the matrix and returns it. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .rotate() Mat4 rotate( double degrees , Vec3 vec ) Parameters degrees The number of degrees to rotate. vec The vector around which to rotate. Returns Mat4 The owning rotated matrix. Description Rotates the transformation matrix around a defined vector. This method rotates the owning matrix and returns a reference to itself, instead of creating a copy of the matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .scale() Mat4 scale( Vec3 vec ) Parameters vec The vector to scale by. Returns Mat4 The owning scaled matrix. Description Scales the matrix by a defined x/y/z vector. This method scales the owning matrix and returns a reference to itself, instead of creating a copy of the matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .translate() Mat4 translate( Vec3 vec ) Parameters vec The vector to translate by. Returns Mat4 The owning translated matrix. Description Translates the matrix by a defined x/y/z vector. This method translates the owning matrix and returns a reference to itself, instead of creating a copy of the matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 Constructor Mat4( Variant values ) Mat4( ) Parameters values The array of 16 values to construct the matrix by. The array can either be 4x4 or flat 16. Description Constructs a matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .operator != int operator !=( Mat4 mat ) Parameters mat The matrix to compare to this matrix. Returns int True if the two matrices are different, false otherwise. Description Compares two matrices. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .operator * Mat4 operator *( Mat4 mat ) Vec3 operator *( Vec3 vec ) Mat4 operator *( double scalar ) Parameters mat The matrix to multiply this matrix by. vec The vector to transform by the matrix. scalar The scalar value to multiply each element of the matrix by. Returns Mat4 The resulting transformed vector/matrix. Description Multiplies a matrix by another vector or a scale factor. When a Vec4 is passed, the operation will perform per-component multiplication. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .operator == int operator ==( Mat4 mat ) Parameters mat The matrix to compare to this matrix. Returns int True if both matrices are exactly the same, false otherwise. Description Compares two matrices."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Math.html",
        "title": "FlexScript Class - Math",
        "content": "Description A class containing common math functions. Static Properties pi Gets an approximate value for pi. Static Methods acos Returns the arc cosine of an angle in radians. asin Returns the arc sine of an angle in radians. atan Returns the arc tangent of an angle in radians. atan2 Returns the arc tangent of an angle in radians. ceil Returns the smallest integer value not less than value. cos Returns the cosine of an angle in radians. degrees Converts an angle in radians to degrees. exp Returns (e ^ value) where e is 2.7183 fabs Returns the absolute value of the number. factorial Returns the factorial of the number. floor Returns the largest integer value not larger than the number. fmod Returns the remainder of dividing the numerator by the denominator. frac Returns the decimal part of a number. log Returns the natural logarithm of a number. log10 Returns the base-10 logarithm of a number. max Returns the greater of two numbers, or the max value of an array. min Returns the lesser of two numbers, or the min value of an array. pow Returns the base raised to the power of the exponent. radians Converts an angle in degrees to radians. round Rounds the value to the specified precision. sign Returns the sign of the number. sin Returns the sine of an angle in radians. sqr Returns the number squared. sqrt Returns the square root of the number. tan Returns the tangent of an angle in radians. trunc Removes the fractional part of the number. Details Do no remove, this fixes the anchor on doc.flexsim.com Math .pi static double pi Description Gets an approximate value for pi. The internal representation is 3.14159265358979. Math.cos(Math.pi) // -1 Do no remove, this fixes the anchor on doc.flexsim.com Math .acos() static double acos( double ratio ) Parameters ratio The ratio - adjacent/hypotenuse - of a right triangle. Returns double The arc cosine of the angle in radians. Description Returns the arc cosine of an angle in radians. acos() is the inverse of the cos () method. Ratio should never be less than -1 or greater than 1. double angle = Math.degrees(Math.acos(xdist / totaldist)); Do no remove, this fixes the anchor on doc.flexsim.com Math .asin() static double asin( double ratio ) Parameters ratio The ratio - opposite/hypotenuse - of a right triangle. Returns double The arc sine of the angle in radians. Description Returns the arc sine of an angle in radians. asin() is the inverse of the sin () method. Ratio should never be less than -1 or greater than 1. double angle = Math.degrees(Math.asin(ydist / totaldist)); Do no remove, this fixes the anchor on doc.flexsim.com Math .atan() static double atan( double ratio ) Parameters ratio The ratio - opposite/adjacent - of a right triangle. Returns double The arc tangent of the angle in radians. Description Returns the arc tangent of an angle in radians. atan() is the inverse of the tan () method. Ratio should be within the interval [- pi /2,+ pi /2]. Notice that because of the sign ambiguity, the atan() method cannot determine with certainty in which quadrant the angle falls only by its tangent value. You can use the atan2 () method if you need to determine the quadrant. double theArcTangent = Math.atan(Math.radians(45)); //0.6658 Do no remove, this fixes the anchor on doc.flexsim.com Math .atan2() static double atan2( double dy , double dx ) Parameters dy The length of the \"opposite\" side of a right triangle. dx The length of the \"adjacent\" side of a right triangle. Returns double The arc tangent of the angle in radians. Description Returns the arc tangent of an angle in radians. The returned angle will increase from 0 to pi /2 beginning at the positive x axis in a counter-clockwise direction, and will decrease from 0 to - pi /2 in a clockwise direction. If both parameters of atan2 are 0, the function returns 0. atan2 is well defined for every point other than the origin, even if value1 equals 0 and value2 does not equal 0. double theAngle = Math.degrees(Math.atan2(-1,1.732)); // -30 Do no remove, this fixes the anchor on doc.flexsim.com Math .ceil() static int ceil( double value ) Parameters value The value to ceiling. Returns int The smallest integer value not less than value. Description Returns the smallest integer value not less than value. double myval = Math.ceil(2.3); // 3. double myval = Math.ceil(3.8); // 4. double myval = Math.ceil(-2.3); // -2. double myval = Math.ceil(-3.8); // -3. See also floor (). Do no remove, this fixes the anchor on doc.flexsim.com Math .cos() static double cos( double angle ) Parameters angle The angle in radians. Returns double The cosine of the angle in radians. Description Returns the cosine of an angle in radians. The angle should be less than 263 radians and greater than -263 radians to avoid loss of significance in the result. double theCosine = Math.cos(Math.radians(180)); //-1 See also acos (). Do no remove, this fixes the anchor on doc.flexsim.com Math .degrees() static double degrees( double angle ) Parameters angle The angle in radians. Returns double The angle in degrees. Description Converts an angle in radians to degrees. One radian is 180/ pi degrees (~57.2958). double degrees = Math.degrees(Math.pi); // 180 See also radians (). Do no remove, this fixes the anchor on doc.flexsim.com Math .exp() static double exp( double exponent ) Parameters exponent The exponent of e. Returns double e raised to an exponent. Description Returns (e ^ value) where e is 2.7183 On overflow, the function returns INF (infinite) and on underflow, exp returns 0. double value = Math.exp(3); // 20.0855 See also log () which is the inverse of exp(). Do no remove, this fixes the anchor on doc.flexsim.com Math .fabs() static double fabs( double value ) Parameters value The passed in value. Returns double The absolute value of the number. Description Returns the absolute value of the number. This code checks if the operator is within 5 units of the current object along the x-axis. if(Math.fabs(current.location.x - operator.location.x) < 5) Do no remove, this fixes the anchor on doc.flexsim.com Math .factorial() static double factorial( double value ) Parameters value The passed in value. Returns double The factorial of the number. Description Returns the factorial of the number. double val = Math.factorial(5); // 120 = 1*2*3*4*5 Do no remove, this fixes the anchor on doc.flexsim.com Math .floor() static int floor( double value ) Parameters value The passed in value. Returns int The largest integer value not larger than the number. Description Returns the largest integer value not larger than the number. double myval = Math.floor(2.3); // 2. double myval = Math.floor(3.8); // 3. double myval = Math.floor(-2.3); // -3. double myval = Math.floor(-3.8); // -4. See also ceil () and trunc (). Do no remove, this fixes the anchor on doc.flexsim.com Math .fmod() static double fmod( double numerator , double denominator ) Parameters numerator The value being divided. denominator The value to divide by. Returns double The remainder of dividing the numerator by the denominator. Description Returns the remainder of dividing the numerator by the denominator. If the denominator is 0.0, fmod returns a quiet NaN. Math.fmod(10,3) // 1.0 This method is great for getting a repeating set of numbers. So long as the denominator is unchanged, incrementing the numerator and calling fmod will return a set of numbers that keeps repeating itself between 0 and 1 minus the denominator. The following condition, if used in the OnExit of an object in the model, would be true with every 10th flowitem that exits, starting with the 10th flowitem. if(Math.fmod(current.stats.output.value,10) == 0) Do no remove, this fixes the anchor on doc.flexsim.com Math .frac() static double frac( double value ) Parameters value The passed in value. Returns double The decimal part of the specified floating point value. Description Returns the decimal part of a number. Math.frac(3.124) // 0.124 Math.frac(-16.12) // -0.12 Math.frac(12) // 0.0 Do no remove, this fixes the anchor on doc.flexsim.com Math .log() static double log( double value ) Parameters value The passed in value. Returns double The natural logarithm of a number. Description Returns the natural logarithm of a number. If value is negative, this function returns an indefinite (same as a quiet NaN). If value is 0, it returns INF (infinite). Math.log(9); // 2.1972 log() is the inverse of the exp () method. Math.log(Math.exp(3.2)); // 3.2 Do no remove, this fixes the anchor on doc.flexsim.com Math .log10() static double log10( double value ) Parameters value The passed in value. Returns double The base-10 logarithm of a number. Description Returns the base-10 logarithm of a number. If value is negative, this function returns an indefinite (same as a quiet NaN). If value is 0, it returns INF (infinite). Math.log10(1000); // 3 log10() is the inverse of the pow () method with base 10. Math.log10(Math.pow(10, 3.2)); // 3.2 Do no remove, this fixes the anchor on doc.flexsim.com Math .max() static double max( double value1 , double value2 ) static double max( Array array ) Parameters value1 The first value to compare. value2 The second value to compare. array The array of values to compare. Returns double The greater of two numbers, or the max value of an array. Description Returns the greater of two numbers, or the max value of an array. double max = Math.max(6,7); // 7 double max = Math.max([3,9,4]); // 9 The following code will generate a normally distributed random number between and inclusive of 0 and 100: double haulLoad = Math.min(Math.max(normal(55, 27), 0), 100); See also min (). Do no remove, this fixes the anchor on doc.flexsim.com Math .min() static double min( double value1 , double value2 ) static double min( Array array ) Parameters value1 The first value to compare. value2 The second value to compare. array The array of values to compare. Returns double The lesser of two numbers, or the min value of an array. Description Returns the lesser of two numbers, or the min value of an array. double min = Math.min(6,7); // 6 double max = Math.min([3,9,4]); // 3 The following code will generate a normally distributed random number between and inclusive of 0 and 100: double haulLoad = Math.min(Math.max(normal(55, 27), 0), 100); See also max (). Do no remove, this fixes the anchor on doc.flexsim.com Math .pow() static double pow( double base , double exponent ) Parameters base The value being raised to a power. exponent The exponent the base will be raised to. Returns double The base raised to the power of the exponent. Description Returns the base raised to the power of the exponent. double myval = Math.pow(2,3); // 8. Do no remove, this fixes the anchor on doc.flexsim.com Math .radians() static double radians( double angle ) Parameters angle The angle in degrees. Returns double The angle in radians. Description Converts an angle in degrees to radians. 1 degree is pi /180 radians. double radians = Math.radians(180); // 3.1415 (pi) See also degrees (). Do no remove, this fixes the anchor on doc.flexsim.com Math .round() static double round( double value , int precision = 0 ) Parameters value The value being rounded. precision The number of decimal places to round to. Returns double The value rounded to the specified precision. Description Rounds the value to the specified precision. A fractional part 0 < f < 0.5 will be rounded down. A fractional part 0.5 <= f < 1.0 will be rounded up. Using a precision of 0 (or not specifying it) will round to the nearest integer. int myNum = Math.round(3.6269); // 4 int myNum = Math.round(3.6269, 2); // 3.63 Do no remove, this fixes the anchor on doc.flexsim.com Math .sign() static int sign( double value ) Parameters value The passed in value. Returns int The sign of the number. Description Returns the sign of the number. int sign = Math.sign(-100); // -1 int sign = Math.sign(100); // 1 int sign = Math.sign(0); // 0 Do no remove, this fixes the anchor on doc.flexsim.com Math .sin() static double sin( double angle ) Parameters angle The angle in radians. Returns double The sine of the angle in radians. Description Returns the sine of an angle in radians. The angle should be less than 263 radians and greater than -263 radians to avoid loss of significance in the result. double theSine = Math.sin(Math.radians(90)); // 1 See also asin (). Do no remove, this fixes the anchor on doc.flexsim.com Math .sqr() static double sqr( double value ) Parameters value The passed in value. Returns double The number squared. Description Returns the number squared. int square = Math.sqr(4); // 16 See also sqrt (). Do no remove, this fixes the anchor on doc.flexsim.com Math .sqrt() static double sqrt( double value ) Parameters value The passed in value. Returns double The square root of the number. Description Returns the square root of the number. int root = Math.sqrt(25); // 5 See also sqr (). Do no remove, this fixes the anchor on doc.flexsim.com Math .tan() static double tan( double angle ) Parameters angle The angle in radians. Returns double The tangent of the angle in radians. Description Returns the tangent of an angle in radians. The angle should be less than 263 radians and greater than -263 radians to avoid loss of significance in the result. double theTangent = Math.tan(Math.radians(45)); // 1 See also atan (). Do no remove, this fixes the anchor on doc.flexsim.com Math .trunc() static int trunc( double value ) Parameters value The passed in value. Returns int The fractional part of the number. Description Removes the fractional part of the number. Truncates the value. int val = Math.trunc(2.478); // 2 int sign = Math.sign(2.95); // 2 See also round ()."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Model.html",
        "title": "FlexScript Class - Model",
        "content": "Description A class containing data and functions for the model. Methods find Finds a node in the model's subtree by its path. Static Properties dateTime The current date and time in FlexSim time. nextStopDateTime The date and time in FlexSim time of the next stop time. nextStopTime The simulation time of the next stop time. parameters Provides access to the model's parameters. performanceMeasures Provides access to the model's performance measures. startDateTime The model's start date and time in FlexSim time. statisticalTime The current simulation time with respect to when stats were last reset. time The current simulation time. warmupDateTime The warmup date and time in FlexSim time. warmupTime The total warmup time. Static Methods getDateTime Returns a date and time in FlexSim time from the given simulation time. getTime Returns the simulation time from the given FlexSim time. Details Do no remove, this fixes the anchor on doc.flexsim.com Model .find() treenode find( string path ) Parameters path The path, starting at the model node, that addresses the target node. Returns treenode If the addressed node exists, the method returns that node, otherwise NULL. Description Finds a node in the model's subtree by its path. This is the same as calling treenode . find () on the model node: model().find(\"ObjectName\") treenode obj = Model.find(\"ObjectName\"); Do no remove, this fixes the anchor on doc.flexsim.com Model .dateTime static readonly DateTime dateTime Description The current date and time in FlexSim time. DateTime currentDateTime = Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .nextStopDateTime static readonly DateTime nextStopDateTime Description The date and time in FlexSim time of the next stop time. DateTime nextStop = Model.nextStopDateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .nextStopTime static readonly double nextStopTime Description The simulation time of the next stop time. If no stop time is defined this returns 0. If the current simulation time has passed the last stop time this returns the largest double value. double stopTime = Model.nextStopTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .parameters static readonly parameters Description Provides access to the model's parameters. Getting a parameter value Model.parameters.Parameter1 Model.parameters[\"Parameter1\"].value Getting a parameter value, passing in up to three arguments // Passed-in values are available as param(1), param(2), and param(3) Model.parameters[\"Parameter1\"].evaluate(param1, param2, param3) Setting a parameter value Model.parameters.Parameter1 = 5; Model.parameters[\"Parameter1\"].value = 5; List parameter tables Model.parameters.tableNames // Array[1]: [Parameters] List parameters Model.parameters.names() // Array[1]: [Parameter1] Model.parameters.names(\"Parameters\") // Array[1]: [Parameter1] Do no remove, this fixes the anchor on doc.flexsim.com Model .performanceMeasures static readonly performanceMeasures Description Provides access to the model's performance measures. Getting a performance measure value Model.performanceMeasures.PerformanceMeasure1 Model.performanceMeasures[\"PerformanceMeasure1\"].value List performance measure tables Model.performanceMeasures.tableNames // Array[1]: [PerformanceMeasures] List performance measures Model.performanceMeasures.names() // Array[1]: [PerformanceMeasure1] Model.performanceMeasures.names(\"PerformanceMeasures\") // Array[1]: [PerformanceMeasure1] Do no remove, this fixes the anchor on doc.flexsim.com Model .startDateTime static readonly DateTime startDateTime Description The model's start date and time in FlexSim time. The model start date and time is define in the Model Settings. DateTime startTime = Model.startDateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .statisticalTime static readonly double statisticalTime Description The current simulation time with respect to when stats were last reset. If the model has a warmup time, this will return the difference between the simulation time and the warmup time. statisticalTime = time - warmupTime double statTime = Model.statisticalTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .time static readonly double time Description The current simulation time. double currentTime = Model.time; Do no remove, this fixes the anchor on doc.flexsim.com Model .warmupDateTime static readonly DateTime warmupDateTime Description The warmup date and time in FlexSim time. DateTime warmupTime = Model.warmupDateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .warmupTime static readonly double warmupTime Description The total warmup time. If no warmup time is defined this returns 0. When the warmup time is reached, statistics on objects and tracked variables will be reset. double warmup = Model.warmupTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .getDateTime() static DateTime getDateTime( double modelTime ) Parameters modelTime The simulation time. Returns DateTime The DateTime represented by the simulation time. Description Returns a date and time in FlexSim time from the given simulation time. DateTime dateTime = Model.getDateTime(100); Do no remove, this fixes the anchor on doc.flexsim.com Model .getTime() static double getTime( DateTime dateTime ) Parameters dateTime The date and time in FlexSim time. Returns double The simulation time represented by the FlexSim time. Description Returns the simulation time from the given FlexSim time. DateTime date = DateTime(\"8:00:00 AM Wed 19 Jul 2017\"); double theTime = Model.getTime(date);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/RegExResult.html",
        "title": "FlexScript Class - RegExResult",
        "content": "Description A class that handles the results of a RegEx match The RegExResult class is returned from the string . match () method. The RegExResult can be used to iterate over all matches in the string. This is usually done with as shown in the following example: string toMatch = \"Processor1 Processor200\"; Array matches; var result = toMatch.match(/([a-zA-Z]+)(\\d+)/g); while ((matches = result.findNextMatch()).length) { pt(matches.join(\", \")); pr(); } // Text printed to Output Console: // Processor1, Processor, 1 // Processor200, Processor, 200 The string is not actually searched until one of the methods or properties are called. Then, the string is only searched until the requested information can be provided. Once a match is found, it is cached, so that future calls that require that match can look it up. Unless you mark the RegEx as global (using the \"g\" flag), this object will only search until it finds the first match. None of the methods or properties will cause it to search beyond that point. Creating RegExResult Objects You can only obtain a RegExResult object through a call to string.match(), and you can only declare a variable of this type using the type-inference mechanism (var). var result = someString.match(/a pattern/g); // correct // RegExResult result = someString.match(/a pattern/g); INCORRECT // RegExResult result; INCORRECT Properties length Counts the number of matches to the RegEx in the string. Methods findNextMatch Searches for the next match in the string. getMatch Gets gets the nth match (the array of match and subgroups) from a string. getMatchIndex Gets the position in the original string of the nth match. Operators [] Gets the complete match string for the nth match Details Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .length readonly int length Description Counts the number of matches to the RegEx in the string. Counts (searching, if necessary), the total number of matches in the string. This will find all the matches, exhausting the string. Use getMatch() to get the results. Without the global flag, this value cannot exceed 1. Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .findNextMatch() Array findNextMatch( ) Returns Array An array containing the most recently found match. Description Searches for the next match in the string. If a match is not found, or if all matches have been found and the string is exausted (e.g., by calling RegExResult.length), then this method returns an empty Array. Otherwise, it returns an Array of string s. The first value in the Array is the complete match. Subsequent values (if any) will correspond to the capture groups marked in the RegEx. Without the global flag, this method will only search the string one time. Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .getMatch() Array getMatch( int i ) Parameters i The match number to retrieve (1 is the first match) Returns Array An array containing the full match, and any sub-matches. Description Gets gets the nth match (the array of match and subgroups) from a string. If the value given is larger than the number of matches, this method will fail. If necessary, this method will search the string. If the pattern to match is not global, than any value greater than 1 will always fail (1 could still fail if no match was found). Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .getMatchIndex() Array getMatchIndex( int i ) Parameters i The match number for which you want the position (1 is the first match). Returns Array The position of the nth match in the original string Description Gets the position in the original string of the nth match. If the value given is larger than the number of matches, this method will fail. If necessary, this method will search the string. If the pattern to match is not global, than any value greater than 1 will always fail (1 could still fail if no match was found). Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .operator [] string operator []( int i ) Parameters i The match number for which you want the full match string. Returns string A string containing the full text of the nth match Description Gets the complete match string for the nth match This is the same as calling getMatch (i)[1]. If the value given is larger than the number of matches, this method will fail. If necessary, this method will search the string. If the pattern to match is not global, than any value greater than 1 will always fail (1 could still fail if no match was found)."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/StatisticsCollector.html",
        "title": "FlexScript Class - StatisticsCollector",
        "content": "Description A class that represents a Statistics Collector Properties collectedData Provides access to data that may be used in Statistics Collector callbacks. labelProperties Use your own named properties to get/set label values. labels Allows access to the labels of the Statistics Collector. Methods getAllRowValues Gets all row values from the collector. getRowForValue Returns the row number for given value, or 0 if that value is not tied to a row. getValue Gets a value from the table created by the Statistics Collector. Constructor StatisticsCollector Creates a reference to a Statistics Collector. Static Methods getID Returns a unique ID for a node. getPathFromID Gets the path used to generate an ID for the node. StatisticsCollector Creates a reference to a Statistics Collector. Details Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .collectedData readonly StatisticsCollector.CollectedData collectedData Description Provides access to data that may be used in Statistics Collector callbacks. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. See treenode . labelProperties for more details. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .labels readonly labels Description Allows access to the labels of the Statistics Collector. See treenode . labels for more details. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getAllRowValues() Array getAllRowValues( ) Returns Array Description Gets all row values from the collector. Returns the row values for all unfinished rows in the collector. If the collector is set to keep row values for finished rows, then this method will return all row values ever used by the collector, except for null values. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getRowForValue() int getRowForValue( Variant value ) Parameters value The value to find a row number for Returns int A row number Description Returns the row number for given value, or 0 if that value is not tied to a row. This method can be used to determine whether a value currently has a row in the current collector. For example, if the row mode is set to Unique Row Values, and you are listening to multiple events, it could be that you want to allow an event to update the row for the value, but prevent that value from adding a row. In this case, the event's Condition might have code like this: collector.getRowForValue(data.item) Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getValue() Variant getValue( int row , int col , int skipUpdate = 0 ) Parameters row The row of the desired value col The column of the desired value skipUpdate Choose whether the table should update its values before retrieving the data. Returns Variant A Variant, the value from the table. Description Gets a value from the table created by the Statistics Collector. This method is intended to be used within one of the Statistics Collector's callbacks. In certain cases, it can be desirable to get a value without causing an update of all Always columns that are still being tracked. This method can also be used to get a value from the collector's table without wrapping the node in the Table constructor. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector Constructor static StatisticsCollector( Variant id ) Parameters id The value that specifies a Statistics Collector Returns StatisticsCollector A StatisticsCollector reference. Description Creates a reference to a Statistics Collector. Global Statistics Collectors can be referenced by name or by rank. A Statistics Collector's node can also be used. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getID() static double getID( treenode object ) Parameters object The node to get an ID for Returns double The ID of the node Description Returns a unique ID for a node. All Statistics Collector IDs are generated as they are needed. The first time an object is passed to this method, a new ID will be generated. Subsequent calls to this method for the same treenode will return the same ID. If the node is temporary, such as a flowitem, token, or any node that will be destroyed on reset, then the ID will be a incrementing number, starting with 1. If the node is more permanent, then an ID will be generated by hashing the full path of the object. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getPathFromID() static string getPathFromID( double id , int maxDepth = 0 ) Parameters id The ID to retrieve a path for maxDepth The number of names to show in the returned path. Returns string The path used to create the given ID. Description Gets the path used to generate an ID for the node. If the ID is valid, and does not refer to a temporary object, this method returns the path that was used to create the ID. If maxDepth is greater than 0, the path will be shortened, so that only maxDepth names will appear in the path. If the ID is not valid, or refers to a temporary object, then an error text will be returned. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector Constructor static StatisticsCollector( Variant id ) Parameters id The value that specifies a Statistics Collector Returns StatisticsCollector A StatisticsCollector reference. Description Creates a reference to a Statistics Collector. Global Statistics Collectors can be referenced by name or by rank. A Statistics Collector's node can also be used."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/StatisticsCollector.CollectedData.html",
        "title": "FlexScript Class - StatisticsCollector.CollectedData",
        "content": "Description Provides access to data that may be used in Statistics Collector callbacks. Each StatisticsCollector has a CollectedData object. This object can only be accessed in callbacks called by the Statistics Collector, through its collectedData property. Before evaluating one of these callbacks, the Statistics Collector sets some or all of the properties on this object, so they can be read within the callback. This object also has dynamic properties, which act like labels. Event parameters and Event Data Label values are assigned as dynamic properties. Properties colNum The position of the current column in the table. colValue The value associated with the current column. colValueIndex The index of the current column, relative to its column set. currentValue The value in the table at the current row and column. eventName The name of the event that fired, causing the current callback to be evaluated. eventNode The treenode responsible for the event that fired, causing the current callback to be evaluated. group The Group associated with the current callback. linkedColumns An array of column numbers, indicating which columns are linked to the current event. processFlowInstance The instance associated with the current callback. row Accesses labels associated with the current row. rowNum The position of the current row in the table. rowValue The value associated with the current row. rowValueIndex The index of this row value, if the Row Value for the current event is an Array. Methods enumerate Creates a value that represents the unique combination of object, instance, and group. Details Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .colNum readonly int colNum Description The position of the current column in the table. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .colValue readonly Variant colValue Description The value associated with the current column. This value is set as part of the Set Value callback for Column Sets. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .colValueIndex readonly int colValueIndex Description The index of the current column, relative to its column set. This value determined by the sequence of values returned from the Set Value callback for Column Sets. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .currentValue readonly Variant currentValue Description The value in the table at the current row and column. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .eventName readonly string eventName Description The name of the event that fired, causing the current callback to be evaluated. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .eventNode readonly treenode eventNode Description The treenode responsible for the event that fired, causing the current callback to be evaluated. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .group readonly Group group Description The Group associated with the current callback. This value will be empty unless the Statistics Collector is listening to a Group, or an enumerated object is a Group. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .linkedColumns readonly Array linkedColumns Description An array of column numbers, indicating which columns are linked to the current event. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .processFlowInstance readonly Object processFlowInstance Description The instance associated with the current callback. This value will be empty unless the Statistics Collector is listening to, or has enumerated, a Process Flow block in a instanced flow. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .row readonly row Description Accesses labels associated with the current row. This property is an object that has a labels property, like treenode . labels . The object also has dynamic label access, like treenode . labelProperties . For example, you could use a label to store the time a row was added in the OnRowAdding trigger: data.row.RowAddTime = Model.time; Then, you could reference this label in a column's value: Model.time - data.row.RowAddTime Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .rowNum readonly int rowNum Description The position of the current row in the table. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .rowValue readonly Variant rowValue Description The value associated with the current row. This value is the value specified by the Row Value. If the Row Mode is Enumerate, then the row value is the object associated with the current row. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .rowValueIndex readonly int rowValueIndex Description The index of this row value, if the Row Value for the current event is an Array. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .enumerate() double enumerate( ) double enumerate( treenode object , Object instance , Group group ) Parameters object The object to enumerate. instance The instance to enumerate. group The group to enumerate. Returns double A hash of the object, instance, and group values. Description Creates a value that represents the unique combination of object, instance, and group. If the parameters are not given, then the current eventNode , processFlowInstance , and group property values are used. This method creates a hash of the object, instance, and group values. That hash, along with the values used in that hash, are stored in the Statistics Collector. That hash is the return value. If you use the hash as a row value, then the Statistics Collector will assert a row for the hash value, and set eventNode , processFlowInstance , and group to the values associated with the hash. This method is most commonly used in conjunction with an Enumerate Event , allowing additional events to update rows created by the Enumerate Event. You can find additional information in the Enumerate Row Values section."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Table.IndexType.html",
        "title": "FlexScript Class - Table.IndexType",
        "content": "Description Enumerates types of indices on the table. Static Properties None Ordered Unordered Details Do no remove, this fixes the anchor on doc.flexsim.com Table.IndexType .None static readonly int None Description Do no remove, this fixes the anchor on doc.flexsim.com Table.IndexType .Ordered static readonly int Ordered Description Do no remove, this fixes the anchor on doc.flexsim.com Table.IndexType .Unordered static readonly int Unordered Description"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Tools.html",
        "title": "FlexScript Class - Tools",
        "content": "Description A class for creating and getting Tool nodes. Tool Types The Tools methods take only the following tool types: AgentSystem CalculatedTable ColorPalette DatabaseConnector DownBehavior EmpiricalDistribution FlowItem GlobalTable GlobalVariable Group List MilestoneCollector ModelBackground ModelTrigger MTBFMTTR ParameterTable PerformanceMeasureTable PropertyTable ReinforcementLearning StateTable StatisticsCollector TimeTable UserEvent TrackedVariable Tool Sub Types Some tool types have sub types that can be used in the create () method to make a preconfigured version of that tool. Only the ModelTrigger tools require a sub type to be specified. For the other tools, not specifying a sub type will make a basic version of that tool with out any preconfiguration. AgentSystem Proximity SocialForce ColorPalette Standard ByNumber Viridis Plasma Rainbow FlowItem Container TaskExecuter Man Woman Boy Girl EmptyBottle EmptyBottleWithLabel FullBottle FullBottleWithLabel FullBottleWithCap FullBottleWithLabelAndCap AllBottles List FixedResource Item TaskExecuter TaskSequence ModelTrigger OnModelOpen OnModelReset OnRunStart OnRunStop StateTable Default PhotoEye Static Methods create Creates a new copy of a tool node. get Gets a reference to an exisiting tool node. Details Do no remove, this fixes the anchor on doc.flexsim.com Tools .create() static treenode create( string type , string subType = '' ) Parameters type The name of the type of tool to create. See Tool Types for the full list. subType The name of the sub type of tool to create. See Sub Tool Types for the full list. Returns treenode A new tool node. Description Creates a new copy of a tool node. treenode basicList = Tools.create(\"List\"); treenode teList = Tools.create(\"List\", \"TaskExecuter\"); Do no remove, this fixes the anchor on doc.flexsim.com Tools .get() static treenode get( string type , string name ) Parameters type The name of the type of tool to get. See Tool Types for the full list. name The name of the tool to get. Returns treenode A reference to an existing tool node. Description Gets a reference to an exisiting tool node. treenode timeTable = Tools.get(\"TimeTable\", \"Shift1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/TrackedVariable.html",
        "title": "FlexScript Class - TrackedVariable",
        "content": "Description A class that represents a tracked variable. Tracked Variables can be defined as global for the model, or they can be stored on an object, table or label. Properties age Returns the duration since the last reset time in model units. average Gets the average value of the tracked variable. count Gets the number of times the tracked variable has been set. history Gets the table of history for the tracked variable. lastResetTime lowerBound Gets or sets the lower bound of the tracked variable. maximum Gets the maximum value of the tracked variable. minimum Gets the minimum value of the tracked variable. profile Gets the table of profiles for the tracked variable. rate Gets or sets the current rate of the tracked variable. type Gets the type of the tracked variable. upperBound Gets or sets the upper bound of the tracked variable. value Gets or sets the current value of the tracked variable. valueString Gets or sets the current value of the categorical tracked variable. Methods clearListeners Used with Categorical Combo TrackedVariables. Removes all listeners from a Categorical Combo tracked variable. getCategoryName Gets the name of a category from a categorical tracked variable. getCategoryValue Gets the value associated with a category from a categorical or pointer tracked variable. getTotalTimeAt Gets the total time the tracked variable as been at the specified categorical or pointer value. listenTo Used with Categorical Combo TrackedVariables. Adds a listener to a different categorical TrackedVariable. reset Resets the tracked variable. Constructor TrackedVariable Creates a reference to a global tracked variable. Static Methods init Asserts tracked variable data on a node with the designated type and start value. Details Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .age readonly double age Description Returns the duration since the last reset time in model units. Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .average readonly double average Description Gets the average value of the tracked variable. The average value is not available for Categorical and Cumulative type tracked variables. See the type property for more information. double average = trackedVariable.average; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .count readonly int count Description Gets the number of times the tracked variable has been set. int count = trackedVariable.count; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .history readonly Table history Description Gets the table of history for the tracked variable. The history property is only available if the tracked variable flags is set to STAT_USE_HISTORY. See the init method for information on tracked variable flags. Table history = trackedVariable.history; double time = history[1][1]; double value = history[1][2]; double rate = history[1][3]; //Kinetic type Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .lastResetTime readonly double lastResetTime Description Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .lowerBound double lowerBound Description Gets or sets the lower bound of the tracked variable. The lowerBound property is only available for Kinetic type tracked variables. When setting the lower bound, the lower bound must be less than the current value of the tracked variable. double lower = trackedVariable.lowerBound; trackedVariable.lowerBound = -100; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .maximum readonly double maximum Description Gets the maximum value of the tracked variable. double maximum = trackedVariable.maximum; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .minimum readonly double minimum Description Gets the minimum value of the tracked variable. double minimum = trackedVariable.minimum; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .profile readonly Table profile Description Gets the table of profiles for the tracked variable. The profile property is only available for Categorical type tracked variables. Table profile = trackedVariable.profile; string name = profile[2][1]; double value = profile[2][2]; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .rate double rate Description Gets or sets the current rate of the tracked variable. The rate property is only available for Kinetic type tracked variables. See the type property for more information. double rate = trackedVariable.rate; trackedVariable.rate = 1.5; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .type readonly int type Description Gets the type of the tracked variable. The type affects what meta data, like average, will be collected, and how it is calculated. Type can be one of the following values: STAT_TYPE_LEVEL - records the variable as a level that can go up and down, such as content. The average is a time-weighted average. An example of this would be content tracking. STAT_TYPE_TIME_SERIES - records the variable as a series of independent values. The average is a non-time-weighted average. An example of this type is staytime tracking. STAT_TYPE_CUMULATIVE - records the variable as a value that only accumulates over time, such as input or output. Average is not tracked. STAT_TYPE_CATEGORICAL - records the variable as a set of string values. Average is not tracked. An example of this is state tracking. STAT_TYPE_KINETIC_LEVEL - similar to STAT_TYPE_LEVEL, except that you can also give it a rate of change by setting the rate property. An example of this would be battery level. STAT_TYPE_POINTER - similar to STAT_TYPE_CATEGORICAL, except that instead of tracking string values, it tracks node values. STAT_TYPE_CATEGORICAL_COMBO - used with two or more other STAT_TYPE_CATEGORICAL TrackedVariables. When any of the other tracked variables changes its state, this variable sets its state to a string representing the combination of all current states. This can be used to record the combined state of multiple state profiles. int type = trackedVariable.type; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .upperBound double upperBound Description Gets or sets the upper bound of the tracked variable. The upperBound property is only available for Kinetic type tracked variables. When setting the upper bound, the upper bound must be greater than the current value of the tracked variable. double upper = trackedVariable.upperBound; trackedVariable.upperBound = 100; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .value Variant value Description Gets or sets the current value of the tracked variable. The value of the tracked variable should be a number or it may be a string for categorical type tracked variables. double value = trackedVariable.value; trackedVariable.value = 32; trackedVariable.value = \"processing\"; //Categorical type only trackedVariable.value = Model.find(\"Queue1\"); //Pointer type only Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .valueString Variant valueString Description Gets or sets the current value of the categorical tracked variable. The valueString is only available for the categorical type tracked variables. string valueStr = trackedVariable.valueString; trackedVariable.valueString = \"processing\"; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .clearListeners() clearListeners( ) Description Used with Categorical Combo TrackedVariables. Removes all listeners from a Categorical Combo tracked variable. Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .getCategoryName() string getCategoryName( int catNum ) Parameters catNum The category number to get the name of. Description Gets the name of a category from a categorical tracked variable. string name = trackedVariable.getCategoryName(1); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .getCategoryValue() Variant getCategoryValue( int catNum = -1 ) Parameters catNum The category number to get the value of. Description Gets the value associated with a category from a categorical or pointer tracked variable. For categorical tracked variables, this method is identical to the getCategoryName () method. Variant categoryValue = trackedVariable.getCategoryValue(strOrNodeCategory); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .getTotalTimeAt() double getTotalTimeAt( Variant value ) Parameters value Value should be either the name of the category value to get, the node for the category, or the index number of the category. Description Gets the total time the tracked variable as been at the specified categorical or pointer value. The getTotalTimeAt method is only available for Categorical and Pointer type tracked variables. double processingTime = trackedVariable.getTotalTimeAt(\"processing\"); double processingTime = trackedVariable.getTotalTimeAt(2); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .listenTo() listenTo( TrackedVariable other ) Parameters other A categorical TrackedVariable to listen to Description Used with Categorical Combo TrackedVariables. Adds a listener to a different categorical TrackedVariable. The listener allows this TrackedVariable to be notified when the other TrackedVariable changes value. When any of the other TrackedVariables that you listen to change value, this TrackedVariable sets its value to a value that represents the combination of all the other TrackedVariable value. Since State Profiles are implemented using Categorical TrackedVariables, you can use this type of TrackedVariable to create a state profile that is the combination of several other state profiles. Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .reset() reset( double startValue = 0.0 , int type = -1 ) Parameters startValue The start value of the tracked variable. type If no value is defined, the tracked variable will keep its original type. See the type property for more information. Description Resets the tracked variable. trackedVariable.reset(); trackedVariable.reset(10); trackedVariable.reset(0, STAT_TYPE_LEVEL); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable Constructor TrackedVariable( string name ) Parameters name The name of the global tracked variable. Description Creates a reference to a global tracked variable. TrackedVariable wip = TrackedVariable(\"WorkInProgress\"); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .init() static TrackedVariable init( treenode theNode , int type , double startValue = 0 , int flags = -1 ) Parameters theNode The node to assert the tracked variable data on. type Defines the tracked variable type. See the type property for more information. startValue The starting value of the tracked variable. If the tracked variable presists when the model is reset, this will be the reset value. flags Specifies options for this tracked variable. The flags can be a bitwise combination of the following three values. By default, none of these options are used: STAT_USE_HISTORY - the tracked variable will keep a history of each value it hold, and the time at which the value is set. STAT_USE_PROFILE - the tracked variable will track a profile of the total time spent at each value. This only works if the set of used values are non-negative integers. STAT_IGNORE_WARMUP - the tracked variable will ignore the resetstats() command. Use this option only if the tracked variable should keep the data collected during warmup time. Description Asserts tracked variable data on a node with the designated type and start value. TrackedVariable newTV = TrackedVariable.init(aNode, STAT_TYPE_TIME_SERIES, 0.0, STAT_USE_HISTORY | STAT_IGNORE_WARMUP);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Stage.html",
        "title": "FlexScript Class - USD.Stage",
        "content": "Inherits from Object Description A class that represents a USD Stage . Properties autoWriteAnimationOffsets Allows users to toggle whether saving the USD Stage should automatically write offset times for animations. defaultPrim The default prim set for the stage. endTime The end time of the stage's animation. startTime The start time of the stage's animation. Methods definePrim Create a USD.Prim in the stage. findPrim Return a USD.Prim with a given name. getPrims Return an Array of all USD.Prim objects on the stage. processLiveUpdates Send live updates to the server and process live updates received from the server. reload Reload the stage. save Save changes to the stage. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .autoWriteAnimationOffsets int autoWriteAnimationOffsets Description Allows users to toggle whether saving the USD Stage should automatically write offset times for animations. Currently, when you save a USD Stage in FlexSim, it will automatically export offsets for object references. This means that when you view the USD Stage in another program, objects will appear in the state of the animation that FlexSim shows them in when you saved. This behavior is on (1) by default. To turn it off, set this value to 0. If turned off, you can set your own offsets by using the USD.Reference class to build a reference and set it on a USD.Prim's \"references\" property. Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .defaultPrim readonly USD.Prim defaultPrim Description The default prim set for the stage. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .endTime double endTime Description The end time of the stage's animation. Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .startTime double startTime Description The start time of the stage's animation. Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .definePrim() USD.Prim definePrim( string primPath , string typeName = \"\" ) Parameters primPath The path of the new prim. typeName Optional. The type of prim being created. Returns USD.Prim The newly created USD.Prim. Description Create a USD.Prim in the stage. Prim paths follow a filepath-structure. For example, if you want to create a prim named \"Processor1\" nested under a prim called \"World\", your primPath would be the string \"/World/Processor1\". Note: if the \"World\" prim didn't exist in this example, it would be created to fulfill the creation of the prim. If you try to define a prim that already exists at the given path with no typeName or the same typeName, no new prim will be created. If the typeName is different, it will redefine the type of the existing prim. Prim types are schemas that are generally found in the OpenUSD documentation or are user defined. The typeName parameter specifices what type of prim you want to create, defaulting to no type. For example, you can create an \"Xform\" (short for USD transformation) prim by running the code below. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); if (prim) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .findPrim() USD.Prim findPrim( string primName ) Parameters primName The name of the prim to search for. Returns USD.Prim A USD.Prim. Description Return a USD.Prim with a given name. Prim names follow a filepath-structure. For example, if you have a prim named \"Processor1\" nested under a prim called \"World\", you would search for it with the string \"/World/Processor1\". USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.findPrim(\"/World/Processor1\"); if (prim) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .getPrims() Array getPrims( ) Returns Array An array of USD.Prim objects. Description Return an Array of all USD.Prim objects on the stage. This function performs a Depth First Search on the stage to find all prims in the stage. USD.Stage stage = Model.find(\"USD Stage1\"); Array prims = stage.getPrims(); for (int i = 1; i <= prims.length; i++) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .processLiveUpdates() processLiveUpdates( ) Description Send live updates to the server and process live updates received from the server. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); stage.processLiveUpdates(); // send changes to the server; receive any changes and update the stage Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .reload() int reload( ) Returns int Whether or not the reload was successful. Returns 1 for success; otherwise 0. Description Reload the stage. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); stage.reload(); // reverts changes to the stage Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .save() Variant save( ) Returns Variant Whether or not the save was successful. Returns 1 for success; otherwise 0. Description Save changes to the stage. The .usd* file will be updated. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); stage.save(); // saves the new prim to the stage"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Prim.html",
        "title": "FlexScript Class - USD.Prim",
        "content": "Inherits from treenode Description A class that represents a USD Prim. Properties path The complete path for the prim. references Allows a user to clear and set references on a USD.Prim. See USD.References for more info. Methods createAttribute Create a USD.Attribute on the prim. createRelationship Create a USD.Relationship on the prim. getProperty Get a USD.Property with a given name. getPropertyNames Get an Array of names of properties on the prim. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .path readonly string path Description The complete path for the prim. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; string path = prim.path; Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .references readonly references Description Allows a user to clear and set references on a USD.Prim. See USD.References for more info. // Clear the current offsets from the operator's refshape and reset them to 0 USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim refShape = stage.findPrim(\"/World/Operator1/shapeOffset/refShape\"); USD.Reference ref = USD.Reference(\"/shapes/tn__OperatorMalefbx_ZN\"); ref.layerOffset = 0; refShape.references.clear(); refShape.references.add(ref); stage.save(); Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .createAttribute() USD.Attribute createAttribute( string attributeName , string typeName ) Parameters attributeName The name of the new attribute. typeName The type of attribute being created. Returns USD.Attribute The newly created USD.Attribute. Description Create a USD.Attribute on the prim. The typeName specifices what type of attribute you want to create. For example, you can create a \"string\" attribute by running the code below. Basic attribute types can be found here . If the typeName is invalid, the created USD.Attribute will be invalid. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); USD.Attribute attribute = prim.createAttribute(\"testAttr\", \"string\"); if (attribute) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .createRelationship() USD.Relationship createRelationship( relationshipName ) Parameters The name of the new relationship. Returns USD.Relationship The newly created USD.Relationship. Description Create a USD.Relationship on the prim. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); USD.Relationship relationship = prim.createRelationship(\"myRelationship\"); if (relationship) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .getProperty() USD.Property getProperty( string propertyName ) Parameters propertyName The name of the property to search for. Returns USD.Property The newly created USD.Property. Description Get a USD.Property with a given name. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.findPrim(\"/World/Processor1\"); USD.Property property = prim.getProperty(\"myProperty\"); if (property) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .getPropertyNames() Array getPropertyNames( ) Returns Array An array of USD.Prim objects. Description Get an Array of names of properties on the prim. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; Array propertyNames = prim.getPropertyNames(); for (int i = 1; i <= propertyNames.length; i++) { ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Property.html",
        "title": "FlexScript Class - USD.Property",
        "content": "Description A class that represents a USD Property . Properties baseName The base name of the property. name The name of the property. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Property .baseName readonly string baseName Description The base name of the property. The name of the property with all namespace prefixes removed, i.e. the last component of the \"name\" property. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Property property = prim.getProperty(\"my:advanced:prop\"); if (property) { string baseName = property.baseName; // baseName == \"prop\" } Do no remove, this fixes the anchor on doc.flexsim.com USD.Property .name readonly string name Description The name of the property. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Property property = prim.getProperty(\"my:advanced:prop\"); if (property) { string fullName = property.name; // fullName == \"my:advanced:prop\" }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Attribute.html",
        "title": "FlexScript Class - USD.Attribute",
        "content": "Inherits from USD.Property Description A class that represents a USD Property. Properties numTimeSamples Gets the number of time samples the attribute has. type The type of the attribute. value The value of the attribute. Methods clear Removes all time samples and values from the attribute. clearAtTime Removes a value with a specific time code from the attribute. getTimeSamples Gets an Array of all the time samples for the attribute. getValue Gets the value of the attribute. setValue Sets the value of the attribute. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .numTimeSamples readonly int numTimeSamples Description Gets the number of time samples the attribute has. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .type readonly string type Description The type of the attribute. Basic attribute types can be found here . USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Attribute attr = prim.createAttribute(\"myDouble\", \"double\"); if (attr) { string type = attr.type; // type == \"double\" } Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .value Variant value Description The value of the attribute. If you set the value of the attribute, the type of value you assign must match the type of attribute it is. For example, if my attribute has a type of \"double[]\", then my value should be an Array of doubles. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Attribute attr = prim.createAttribute(\"myDouble\", \"double\"); if (attr) { attr.value = 20; } Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .clear() clear( ) Description Removes all time samples and values from the attribute. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .clearAtTime() clearAtTime( Variant timeCode ) Parameters timeCode The time code of the value to be removed from the attribute. Description Removes a value with a specific time code from the attribute. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim operator = stage.findPrim(\"/World/Operator1\"); USD.Attribute translation = prim.getProperty(\"xformOp:translate\"); // if there is at least 1 time sample if (translation.numTimeSamples) { Array times = translation.getTimeSamples(); // remove the first time sample translation.clearAtTime(times[1]); } ... Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .getTimeSamples() Array getTimeSamples( ) Returns Array An Array of time samples. Description Gets an Array of all the time samples for the attribute. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .getValue() Variant getValue( Variant timeCode = nullvar ) Parameters timeCode The timecode of the value you want to retrieve. Returns Variant The value of the attribute. Description Gets the value of the attribute. If a timecode is supplied, this will get the value of the attribute at the given timecode. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .setValue() setValue( Variant value , Variant timeCode = nullvar ) Parameters value The new value to set the attribute to. timeCode The timecode of the value you want to set. Description Sets the value of the attribute. If a timecode is supplied, this will set the value of the attribute at the given timecode."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Relationship.html",
        "title": "FlexScript Class - USD.Relationship",
        "content": "Inherits from USD.Property Description A class that represents a USD Relationship. Methods getTargets Get an array of targets as strings. setTargets Set the array of targets for the USD.Relationship. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Relationship .getTargets() Array getTargets( ) Returns Array An array of targets as strings. Description Get an array of targets as strings. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Relationship relationship = prim.getProperty(\"targets\"); if (relationship) { Array targets = relationship.getTargets(); } Do no remove, this fixes the anchor on doc.flexsim.com USD.Relationship .setTargets() void setTargets( ) Description Set the array of targets for the USD.Relationship. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; Array targets = [\"/World/Processor1\"]; USD.Relationship relationship = prim.createRelationship(\"myTargets\"); if (relationship) { relationship.setTargets(targets); }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Reference.html",
        "title": "FlexScript Class - USD.Reference",
        "content": "Description A class that represents an SdfReference from the OpenUSD API. Properties assetPath The asset path of the USD.Reference. customData A Map of custom data for this USD.Reference. isInternal Returns whether or not this USD.Reference is internal. layerOffset The layer offset of the USD.Reference. primPath The prim path of the USD.Reference. Constructor USD.Reference Constructs a USD.Reference object based on the given primPath. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .assetPath assetPath Description The asset path of the USD.Reference. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .customData Map customData Description A Map of custom data for this USD.Reference. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .isInternal readonly int isInternal Description Returns whether or not this USD.Reference is internal. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .layerOffset double layerOffset Description The layer offset of the USD.Reference. This property can be used to get and set the layer offset property for references to be used in animations. On USD.Stages, these are set automatically when you export using the Omniverse Connector or save a USD Stage. However, you can toggle it off on a USD Stage and set them yourself (to 0, for example). This will allow you to more easily write your own animation information without having to fight with the automatic writing of offsets. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .primPath primPath Description The prim path of the USD.Reference. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference Constructor USD.Reference( string primPath ) Parameters primPath The prim path of the prim you want to reference. Returns USD.Reference A USD.Reference object. Description Constructs a USD.Reference object based on the given primPath."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.References.html",
        "title": "FlexScript Class - USD.References",
        "content": "Description A class that represents a UsdReferences object from the OpenUSD API. Methods add Adds a reference to the list of references. clear Removes all references from the list of references. remove Removes a specific reference from the list of references. set Sets the current list of references to the given list of assets. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.References .add() int add( USD.Reference reference ) Parameters reference The USD.Reference to add to the list. Returns int 1 if the method was successful; otherwise, 0. Description Adds a reference to the list of references. Do no remove, this fixes the anchor on doc.flexsim.com USD.References .clear() int clear( ) Returns int 1 if the method was successful; otherwise, 0. Description Removes all references from the list of references. Do no remove, this fixes the anchor on doc.flexsim.com USD.References .remove() int remove( string primPath , string assetPath = \"\" ) Parameters primPath The prim path of the reference to remove. assetPath The asset path of the reference to remove. Returns int 1 if the method was successful; otherwise, 0. Description Removes a specific reference from the list of references. Do no remove, this fixes the anchor on doc.flexsim.com USD.References .set() int set( Array primPaths ) Parameters primPaths An Array of prim paths as strings. Returns int 1 if the method was successful; otherwise, 0. Description Sets the current list of references to the given list of assets. Given an Array of strings of prim paths, it will clear the current list of references, create a USD.Reference for each of the prim paths, and then set the list to the list of USD.References created. If the Array contains anything that isn't a string, it will throw an exception."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Vec2.html",
        "title": "FlexScript Class - Vec2",
        "content": "Description Represents positions, rotations, size, 2D vectors, and points. Contains functions for doing common vector operations. Properties magnitude The length of this vector (Read Only). normalized The vector sized to a magnitude of 1 (Read Only). x X component of the vector. y Y component of the vector. Methods angle Finds the angle between this vector and another (degrees). dot Finds the dot product of this vector and another. lerp Linearly interpolates between two vectors. rotate Rotates the vector about another vector. Constructor Vec2 Constructs a vector by xy component values. Operators - Subtracts one vector from another. != Compares two vectors. * Multiplies a vector by another vector or a scale factor. / Divides a vector by another vector or a scale factor. + Adds two vectors together. += Assigns the vector to be the sum of two vectors. -= Assigns the vector to be the difference of two vectors. == Compares two vectors. unary - Negates the vector. Details Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .magnitude readonly double magnitude Description The length of this vector (Read Only). The length of the vector is calculated as the square root of (x*x+y*y). Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .normalized readonly Vec2 normalized Description The vector sized to a magnitude of 1 (Read Only). A copy of the original vector that points in the same direction, but has a length of 1. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .x double x Description X component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .y double y Description Y component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .angle() double angle( Vec2 otherVec ) Parameters otherVec The angle extends round to this vector. Returns double The angle between the two vectors in degrees. Description Finds the angle between this vector and another (degrees). double angle = myVector.angle(Vec2(1, 2)); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .dot() double dot( Vec2 otherVec ) Parameters otherVec The vector to dot with this vector. Returns double The dot product (double) of the two vectors. Description Finds the dot product of this vector and another. double dot = myVector.dot(Vec2(1, 2)); The dot product of two vectors is a number equal to the magnitudes of the two vectors multiplied together and then multiplied by the cosine of the angle between them. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .lerp() Vec2 lerp( Vec2 otherVec , double t ) Parameters otherVec The vector to interpolate to. t A ratio between 0 and 1 that defines the percentage to interpolate from the current vector to otherVec. Returns Vec2 The resulting interpolated vector. Description Linearly interpolates between two vectors. The following example code sets the location vector to 20% on the path from myVector to Vec2(1,2). Vec2 location = myVector.lerp(Vec2(1, 2), .2); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .rotate() Vec2 rotate( double degrees ) Vec2 rotate( double degrees , Vec2 otherVec ) Parameters degrees The angle of rotation. otherVec The vector rotate about. Returns Vec2 The resulting vector. Description Rotates the vector about another vector. The origin will be used as the rotation point if no other vector is defined The following example code returns the new vector after rotating myVector about Vec2(1,2) by 45 degrees. Vec2 location = myVector.rotate(45, Vec2(1, 2)); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 Constructor Vec2( double x , double y ) Vec2( double value ) Parameters x The x component. y The y component. value A value all components will be set to. Description Constructs a vector by xy component values. Vec2 location = Vec2(1, 2); Vec2 location = Vec2(0); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator - Vec2 operator -( Vec2 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec2 The resulting vector. Description Subtracts one vector from another. Each component has the corresponding component subtracted from it. Vec2 location = someVector - anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator != int operator !=( Vec2 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if the two vectors are different, false otherwise. Description Compares two vectors. int isNotZero = location != Vec2(0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator * Vec2 operator *( Vec2 otherVec ) Vec2 operator *( double factor ) Parameters otherVec The vector to multiply this vector by. factor A scale factor to multiply each component by. Returns Vec2 The resulting vector. Description Multiplies a vector by another vector or a scale factor. When a Vec2 is passed, the operation will perform per-component multiplication. Vec2 location = someVector * anotherVector; Vec2 location = someVector * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator / Vec2 operator /( Vec2 otherVec ) Vec2 operator /( double factor ) Parameters otherVec The vector to divide this vector by. factor A scale factor to divide each component by. Returns Vec2 The resulting vector. Description Divides a vector by another vector or a scale factor. When a Vec2 is passed, the operation will perform per-component division. Vec2 location = someVector / anotherVector; Vec2 location = someVector / 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator + Vec2 operator +( Vec2 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec2 The resulting vector. Description Adds two vectors together. Each component is added to the corresponding component. Vec2 location = someVector + anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator += Vec2 operator +=( Vec2 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec2 The resulting vector. Description Assigns the vector to be the sum of two vectors. Each component is added to the corresponding component. Vec2 location += someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator -= Vec2 operator -=( Vec2 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec2 The resulting vector. Description Assigns the vector to be the difference of two vectors. Each component has the corresponding component subtracted from it. Vec2 location -= someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator == int operator ==( Vec2 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if both vectors are exactly the same, false otherwise. Description Compares two vectors. int isZero = location == Vec2(0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator unary - Vec2 operator unary -( ) Returns Vec2 The resulting vector. Description Negates the vector. Each component is negated. Vec2 location = -location;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Vec3.html",
        "title": "FlexScript Class - Vec3",
        "content": "Description Represents positions, rotations, size, 3D vectors, and points. Contains functions for doing common vector operations. Properties magnitude The length of this vector (Read Only). normalized The vector sized to a magnitude of 1 (Read Only). x X component of the vector. y Y component of the vector. z Z component of the vector. Methods angle Finds the angle between this vector and another (degrees). cross Finds the cross product of this vector and another. dot Finds the dot product of this vector and another. lerp Linearly interpolates between two vectors. project Transforms the vector from one coordinate space to another. projectRotation Transforms the vector, interpreted as a rotation, from one coordinate space to another. Constructor Vec3 Constructs a vector by xyz component values. Operators - Subtracts one vector from another. != Compares two vectors. * Multiplies a vector by another vector or a scale factor. / Divides a vector by another vector or a scale factor. + Adds two vectors together. += Assigns the vector to be the sum of two vectors. -= Assigns the vector to be the difference of two vectors. == Compares two vectors. unary - Negates the vector. Details Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .magnitude readonly double magnitude Description The length of this vector (Read Only). The length of the vector is calculated as the square root of (x*x+y*y+z*z). Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .normalized readonly Vec3 normalized Description The vector sized to a magnitude of 1 (Read Only). A copy of the original vector that points in the same direction, but has a length of 1. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .x double x Description X component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .y double y Description Y component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .z double z Description Z component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .angle() double angle( Vec3 otherVec ) Parameters otherVec The angle extends round to this vector. Returns double The angle between the two vectors in degrees. Description Finds the angle between this vector and another (degrees). double angle = myVector.angle(Vec3(1, 2, 3)); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .cross() Vec3 cross( Vec3 otherVec ) Parameters otherVec The vector to cross with this vector. Returns Vec3 The cross product (Vec3) of the two vectors. Description Finds the cross product of this vector and another. Vec3 cross = myVector.cross(Vec3(1, 2, 3)); The cross product of two vectors is a vector perpendicular to the two input vectors. Since there are two possible perpendicular vectors, the direction is determined by the \"left hand rule\". This means that crossing vector1 with vector2 will produce the opposite of crossing vector2 with vector1. The magnitude of the new vector is equal to the magnitudes of the two inputs multiplied together and then multiplied by the sine of the angle between the inputs. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .dot() double dot( Vec3 otherVec ) Parameters otherVec The vector to dot with this vector. Returns double The dot product (double) of the two vectors. Description Finds the dot product of this vector and another. double dot = myVector.dot(Vec3(1, 2, 3)); The dot product of two vectors is a number equal to the magnitudes of the two vectors multiplied together and then multiplied by the cosine of the angle between them. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .lerp() Vec3 lerp( Vec3 otherVec , double t ) Parameters otherVec The vector to interpolate to. t A ratio between 0 and 1 that defines the percentage to interpolate from the current vector to otherVec. Returns Vec3 The resulting interpolated vector. Description Linearly interpolates between two vectors. The following example code changes current's location 20% towards the other object. current.location = current.location.lerp(otherObj.location, 0.2); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .project() Vec3 project( treenode from , treenode to ) Parameters from The treenode representing the coordinate space to project from. to The treenode representing the coordinate space to project to. Returns Vec3 The projected vector. Description Transforms the vector from one coordinate space to another. Takes the vector in from's coordinate space, translates this vector onto to's coordinate space, and returns the projected vector. The vector is taken from the origin point of from's coordinate space. The origin is the (0,0,0) point of the coordinate space and is often located in the top left corner of an object's coordinate space. It is important to understand the way the axes work in FlexSim. The X and Y axes form the floor grid plane while the Z axis is equivalent to the height. Also objects y size values stretch in the -y direction, but stretch in the positive direction on both the X and Z axes. In other words an object at location (0,5,0) with a size of (1,2,3) will stretch from x location 0 to 1, y location 5 to 3 and z location 0 to 3. Vec3 globalLoc = Vec3(5, 3, 0).project(current, model()); This example finds out the global location of the position (5,3,0) in current's coordinate space. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .projectRotation() Vec3 projectRotation( treenode from , treenode to ) Parameters from The treenode representing the coordinate space to project from. to The treenode representing the coordinate space to project to. Returns Vec3 The projected rotation. Description Transforms the vector, interpreted as a rotation, from one coordinate space to another. Takes the vector, interpreted as a rotation in from's coordinate space, translates this vector onto to's coordinate space, and returns the projected rotation. Vec3 globalRot = current.rotation.project(current.up, model()); This example finds out the rotation of current, projected onto the model's space. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 Constructor Vec3( double x , double y , double z ) Vec3( double value ) Parameters x The x component. y The y component. z The z component. value A value all components will be set to. Description Constructs a vector by xyz component values. current.location = Vec3(1, 2, 3); current.location = Vec3(0); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator - Vec3 operator -( Vec3 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec3 The resulting vector. Description Subtracts one vector from another. Each component has the corresponding component subtracted from it. current.location = someVector - anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator != int operator !=( Vec3 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if the two vectors are different, false otherwise. Description Compares two vectors. int isNotZero = current.location != Vec3(0, 0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator * Vec3 operator *( Vec3 otherVec ) Vec3 operator *( double factor ) Parameters otherVec The vector to multiply this vector by. factor A scale factor to multiply each component by. Returns Vec3 The resulting vector. Description Multiplies a vector by another vector or a scale factor. When a Vec3 is passed, the operation will perform per-component multiplication. current.location = someVector * anotherVector; current.location = someVector * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator / Vec3 operator /( Vec3 otherVec ) Vec3 operator /( double factor ) Parameters otherVec The vector to divide this vector by. factor A scale factor to divide each component by. Returns Vec3 The resulting vector. Description Divides a vector by another vector or a scale factor. When a Vec3 is passed, the operation will perform per-component division. current.location = someVector / anotherVector; current.location = someVector / 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator + Vec3 operator +( Vec3 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec3 The resulting vector. Description Adds two vectors together. Each component is added to the corresponding component. current.location = someVector + anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator += Vec3 operator +=( Vec3 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec3 The resulting vector. Description Assigns the vector to be the sum of two vectors. Each component is added to the corresponding component. current.location += someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator -= Vec3 operator -=( Vec3 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec3 The resulting vector. Description Assigns the vector to be the difference of two vectors. Each component has the corresponding component subtracted from it. current.location -= someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator == int operator ==( Vec3 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if both vectors are exactly the same, false otherwise. Description Compares two vectors. int isZero = current.location == Vec3(0, 0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator unary - Vec3 operator unary -( ) Returns Vec3 The resulting vector. Description Negates the vector. Each component is negated. current.location = -current.location;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Vec4.html",
        "title": "FlexScript Class - Vec4",
        "content": "Description Represents a vector that includes x, y, z, and w components. Properties w W component of the vector. x X component of the vector. y Y component of the vector. z Z component of the vector. Constructor Vec4 Constructs a vector by xyzw component values. Operators - Subtracts one vector from another. != Compares two vectors. * Multiplies a vector by another vector or a scale factor. / Divides a vector by another vector or a scale factor. + Adds two vectors together. += Assigns the vector to be the sum of two vectors. -= Assigns the vector to be the difference of two vectors. == Compares two vectors. unary - Negates the vector. Details Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .w double w Description W component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .x double x Description X component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .y double y Description Y component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .z double z Description Z component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 Constructor Vec4( double x , double y , double z , double w ) Vec4( double value ) Parameters x The x component. y The y component. z The z component. w The w component. value A value all components will be set to. Description Constructs a vector by xyzw component values. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator - Vec4 operator -( Vec4 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec4 The resulting vector. Description Subtracts one vector from another. Each component has the corresponding component subtracted from it. Vec4 vec = someVector - anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator != int operator !=( Vec4 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if the two vectors are different, false otherwise. Description Compares two vectors. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator * Vec4 operator *( Vec4 otherVec ) Vec4 operator *( double factor ) Parameters otherVec The vector to multiply this vector by. factor A scale factor to multiply each component by. Returns Vec4 The resulting vector. Description Multiplies a vector by another vector or a scale factor. When a Vec4 is passed, the operation will perform per-component multiplication. Vec4 vec = someVector * anotherVector; Vec4 vec = someVector * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator / Vec4 operator /( Vec4 otherVec ) Vec4 operator /( double factor ) Parameters otherVec The vector to divide this vector by. factor A scale factor to divide each component by. Returns Vec4 The resulting vector. Description Divides a vector by another vector or a scale factor. When a Vec4 is passed, the operation will perform per-component division. Vec4 divVec = someVector / anotherVector; Vec4 divVec = someVector / 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator + Vec4 operator +( Vec4 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec4 The resulting vector. Description Adds two vectors together. Each component is added to the corresponding component. Vec4 sum = someVector + anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator += Vec4 operator +=( Vec4 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec4 The resulting vector. Description Assigns the vector to be the sum of two vectors. Each component is added to the corresponding component. Vec4 vec += someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator -= Vec4 operator -=( Vec4 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec4 The resulting vector. Description Assigns the vector to be the difference of two vectors. Each component has the corresponding component subtracted from it. vec -= someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator == int operator ==( Vec4 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if both vectors are exactly the same, false otherwise. Description Compares two vectors. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator unary - Vec4 operator unary -( ) Returns Vec4 The resulting vector. Description Negates the vector. Each component is negated. Vec4 vec = -someVec;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.html",
        "title": "FlexScript Class - XML",
        "content": "Description Namespace for the XML functions. Contains a few static functions. Static Methods load Load a string of XML into an XML document. loadFile Load a file into an XML document. Details Do no remove, this fixes the anchor on doc.flexsim.com XML .load() static XML.Document load( string xml ) Parameters xml The string of text to be parsed as XML and loaded into a document. Returns XML.Document An XML.Document object. Description Load a string of XML into an XML document. string xml = \"<MyElement>Some text</MyElement>\"; XML.Document doc = XML.load(xml); ... Do no remove, this fixes the anchor on doc.flexsim.com XML .loadFile() static XML.Document loadFile( string filePath ) Parameters filePath The file name to be loaded into a document. Returns XML.Document An XML.Document object. Description Load a file into an XML document. string fileName = \"test.xml\"; XML.Document doc = XML.loadFile(fileName); ..."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Comment.html",
        "title": "FlexScript Class - XML.Comment",
        "content": "Inherits from XML.Node Description A class that represents an XML Comment."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Declaration.html",
        "title": "FlexScript Class - XML.Declaration",
        "content": "Inherits from XML.Node Description A class that represents an XML Declaration."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Document.html",
        "title": "FlexScript Class - XML.Document",
        "content": "Inherits from XML.Node Description A class that represents an XML Document. Properties loadError The integer value of the error encountered while loading a document. loadErrorName The string name of the error encountered while loading a document. root Return the root element of the document. Methods saveAs Saves the XML file to disk. Returns XML_NO_ERROR on success, or an errorID (see loadError above). Details Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .loadError readonly int loadError Description The integer value of the error encountered while loading a document. XML.Document doc = XML.loadFile(\"test.xml\"); if (!doc) { return doc.loadError; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .loadErrorName readonly string loadErrorName Description The string name of the error encountered while loading a document. Here's a list of error names: XML_NO_ERROR XML_NO_ATTRIBUTE XML_WRONG_ATTRIBUTE_TYPE XML_ERROR_FILE_NOT_FOUND XML_ERROR_FILE_COULD_NOT_BE_OPENED XML_ERROR_FILE_READ_ERROR XML_ERROR_ELEMENT_MISMATCH XML_ERROR_PARSING_ELEMENT XML_ERROR_PARSING_ATTRIBUTE XML_ERROR_IDENTIFYING_TAG XML_ERROR_PARSING_TEXT XML_ERROR_PARSING_CDATA XML_ERROR_PARSING_COMMENT XML_ERROR_PARSING_DECLARATION XML_ERROR_PARSING_UNKNOWN XML_ERROR_EMPTY_DOCUMENT XML_ERROR_MISMATCHED_ELEMENT XML_ERROR_PARSING XML_CAN_NOT_CONVERT_TEXT XML_NO_TEXT_NODE XML.Document doc = XML.loadFile(\"test.xml\"); if (!doc) { print(\"Load Error:\", doc.loadErrorName); return doc.loadError; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .root readonly XML.Element root Description Return the root element of the document. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; ... Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .saveAs() saveAs( string filePath , int compact = 0 ) Parameters filePath The file path to save your document to. compact If 1, will only keep required whitespace and newlines. Otherwise, leave it as is. Description Saves the XML file to disk. Returns XML_NO_ERROR on success, or an errorID (see loadError above). You can provide a relative path or an absolute path. XML.Document doc; ... doc.saveAs(\"test1.xml\"); // equivalent to: doc.saveAs(modeldir() + \"test1.xml\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Element.html",
        "title": "FlexScript Class - XML.Element",
        "content": "Inherits from XML.Node Description A class that represents an XML Element. Properties attrs An AttributeMap which manages element attributes. Methods getText Returns text (if any) found in the first child of the element. Details Do no remove, this fixes the anchor on doc.flexsim.com XML.Element .attrs readonly attrs Description An AttributeMap which manages element attributes. attrs is a dynamic property similar to the Process Flow token.labels . That means you can add new attributes, reassign them, and retrieve them like this: XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; root.newAttribute = 5; // create and assign new attribute root.newAttribute = \"house\"; // reassign attribute string val = root.newAttribute; // get attribute Additionally, there are several functions for explicitly getting, setting, and deleting. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; root.set(\"newAttribute\", 5); // create and assign new attribute root.set(\"newAttribute\", \"house\"); // reassign attribute string val = root.get(\"newAttribute\"); // get attribute root.deleteAttr(\"newAttribute\"); // delete attribute If you try to retrieve an attribute that hasn't been assign yet, it will throw an error. However, you can query whether an attribute exists using the \"has\" function. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; Variant v = 0; if (root.has(\"oldAttribute\")) { print(\"I've got it!\"); v = root.oldAttribute; } else { print(\"I don't have it!\"); v = \"new value\"; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Element .getText() string getText( ) Returns string The text string value. Description Returns text (if any) found in the first child of the element. XML.Document doc = XML.loadFile(\"test.xml\"); var root = doc.root; var first = root.first; string text = first.getText();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Node.html",
        "title": "FlexScript Class - XML.Node",
        "content": "Description A base class for other XML Nodes. Properties first Get the first child of the node, null if there are no children. last Get the last child of the node, null if there are no children. next Get the next sibling of the node, null if there is no next sibling. prev Get the previous silbing of the node, null if there is no previous sibling. up Get the parent of the node, null if the current node is a Document. value Returns the value of the node. The meaning of 'value' changes for the specific type. Methods createComment Create an XML.Comment child node. createDeclaration Create an XML.Declaration child node. createElement Create an XML.Element child node. createText Create an XML.Text child node. createUnknown Create an XML.Unknown child node. deleteChild Delete a child from this node. deleteChildren Deletes all children from this node. Details Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .first readonly XML.Node first Description Get the first child of the node, null if there are no children. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Declaration dec = doc.first; Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .last readonly XML.Node last Description Get the last child of the node, null if there are no children. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element element = doc.last; Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .next readonly XML.Node next Description Get the next sibling of the node, null if there is no next sibling. This example code loops through each child of the root node and prints its value. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; XML.Element element = root.first; while (element) { print(\"value:\", element.value); element = element.next; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .prev readonly XML.Node prev Description Get the previous silbing of the node, null if there is no previous sibling. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; XML.Element element = root.last; XML.Element sibling = element.prev; Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .up readonly XML.Node up Description Get the parent of the node, null if the current node is a Document. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; XML.Element element = root.first; ... XML.Element parent = element.up; // parent == root Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .value readonly string value Description Returns the value of the node. The meaning of 'value' changes for the specific type. Document: Empty Element: Name of the element Comment: The comment text Unknown: The tag contents Text: The text string Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createComment() XML.Comment createComment( string comment , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters comment The comment text. placement Where the comment will be placed. afterThis The child the new comment will be placed after. Returns XML.Comment An XML.Comment object. Description Create an XML.Comment child node. This example code will place the comment \"my comment\" at the beginning of the file. XML.Document doc = XML.loadFile(\"test.xml\"); doc.createComment(\"my comment\", XML.NodePlacement.First); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createDeclaration() XML.Declaration createDeclaration( string declaration = 0 , int placement = XML.Placement.Last , XML.Node afterThis = nullvar ) Parameters declaration Replace the default declaration with your own. placement Where the declaration will be placed. afterThis The child the new declaration will be placed after. Returns XML.Declaration An XML.Declaration object. Description Create an XML.Declaration child node. This example code will create a new document and set the first child to be the default declaration. The default declaration is: xml version=\"1.0\" encoding=\"UTF-8\". XML.Document doc; doc.createDeclaration(); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createElement() XML.Element createElement( string name , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters name The name of the tag of the new element. placement Where the element will be placed. afterThis The child the new element will be placed after. Returns XML.Element An XML.Element object. Description Create an XML.Element child node. This example code creates a blank document with a root element and subnode elements. The last line demonstrates how you might use the additional parameters. XML.Document doc; XML.Element root = doc.createElement(\"root\"); var element = root.createElement(\"firstChild\"); root.createElement(\"lastChild\"); root.createElement(\"middleChild\", XML.NodePlacement.After, element); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createText() XML.Text createText( string text , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters text The text string. placement Where the text will be placed. afterThis The child the new text will be placed after. Returns XML.Text An XML.Text object. Description Create an XML.Text child node. XML.Document doc; var students = doc.createElement(\"students\"); var student = root.createElement(\"student\"); child.attrs.name = \"John Smith\"; var gradesNode = child.createElement(\"grades\"); Array classes = [\"English\", \"Math\", \"Science\", \"Art\"]; Array grades = [52, 98, 97.3, 12]; for (int i = 1; i <= classes.length; i++) { var class = gradesNode.createElement(classes[i]); class.createText(string.fromNum(grades[i])); } doc.saveAs(\"grades.xml\"); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createUnknown() XML.Unknown createUnknown( string text , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters text The tag contents. placement Where the unknown node will be placed. afterThis The child the new unknown node will be placed after. Returns XML.Unknown An XML.Unknown object. Description Create an XML.Unknown child node. XML.Document doc; doc.createUnknown(\"testing this unknown thing 153\"); // results in the following tag // <!testing this unknown thing 153> Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .deleteChild() deleteChild( XML.Node child ) Parameters child The child node to be deleted. Description Delete a child from this node. This example code deletes the first child from the root node of the document. XML.Document doc = XML.loadFile(\"test.xml\"); var root = doc.root; var first = root.first; root.deleteChild(first); doc.saveAs(\"test1.xml\"); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .deleteChildren() deleteChildren( ) Description Deletes all children from this node. This example code deletes all the children from the root node of the document. XML.Document doc = XML.loadFile(\"test.xml\"); var root = doc.root; root.deleteChildren(); doc.saveAs(\"test1.xml\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.NodePlacement.html",
        "title": "FlexScript Class - XML.NodePlacement",
        "content": "Description An enumeration of integer values associated with XML node placement. Primarily used with the XML.Node's create functions. XML.NodePlacement. Last is default behavior. Static Properties After Place this new node after another node. First Add the new node as the first child of the current node. Last Add the new node as the last child of the current node. This is default behavior. Details Do no remove, this fixes the anchor on doc.flexsim.com XML.NodePlacement .After static readonly int After Description Place this new node after another node. XML.Document doc; XML.Element root = doc.createElement(\"root\"); var element = root.createElement(\"firstChild\"); root.createElement(\"lastChild\"); root.createElement(\"middleChild\", XML.NodePlacement.After, element); Do no remove, this fixes the anchor on doc.flexsim.com XML.NodePlacement .First static readonly int First Description Add the new node as the first child of the current node. XML.Document doc = XML.loadFile(\"test.xml\"); doc.createComment(\"my comment\", XML.NodePlacement.First); Do no remove, this fixes the anchor on doc.flexsim.com XML.NodePlacement .Last static readonly int Last Description Add the new node as the last child of the current node. This is default behavior. XML.Document doc = XML.loadFile(\"test.xml\"); doc.createComment(\"my comment\", XML.NodePlacement.Last); // Adding XML.NodePlacement.Last is redundant, you can leave it out"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Text.html",
        "title": "FlexScript Class - XML.Text",
        "content": "Inherits from XML.Node Description A class that represents an XML Text."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Unknown.html",
        "title": "FlexScript Class - XML.Unknown",
        "content": "Inherits from XML.Node Description A class that represents something the XML parser doesn't recognize."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.Connection.html",
        "title": "FlexScript Class - Database.Connection",
        "content": "Description A class for connecting to and querying a database. Every database connector that you create in your model's toolbox will have a Database.Connection associated with it. To access the connection associated with a connector, use the name-based constructor, providing the name of the database connector. Database.Connection con = Database.Connection(\"DBConnector1\"); Properties isConnected 1 if the connection is currently connected, 0 otherwise. Methods connect Attempts to connect to the database. disconnect Disconnects from the database. prepareStatement Creates a new Database.PreparedStatement object for executing the SQL statement. query Executes a SQL query, returning the result. Constructor Database.Connection Retrieves the connection associated with a named database connector. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .isConnected readonly int isConnected Description 1 if the connection is currently connected, 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .connect() int connect( ) Returns int 1 if successful, 0 otherwise. Description Attempts to connect to the database. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .disconnect() void disconnect( ) Description Disconnects from the database. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .prepareStatement() Database.PreparedStatement prepareStatement( string sqlStatement ) Parameters sqlStatement The SQL statement to be executed by the Database.PreparedStatement. Returns Database.PreparedStatement A newly created Database.PreparedStatement . Description Creates a new Database.PreparedStatement object for executing the SQL statement. Prepared statements are bound to the tree. A connection will automatically remove all its prepared statements when it is disconnected. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .query() Database.ResultSet query( string sqlQuery ) Parameters sqlQuery The SQL query to execute. Description Executes a SQL query, returning the result. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection Constructor Database.Connection( string connectorName ) Parameters connectorName The name of the connector whose connection should be retrieved. Description Retrieves the connection associated with a named database connector. Database.Connection con = Database.Connection(\"DBConnector1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.DataType.html",
        "title": "FlexScript Class - Database.DataType",
        "content": "Description A class that enumerates various database storage types. This class' enumerations are used in binding parameters in a Database.PreparedStatement . statement.bindParam(1, myValue, Database.DataType.SmallInt); This set of available values corresponds closely with the ANSI standard SQL language's set of supported database storage types. Methods fromString Gets the data type value associated with the name of a storage type. Static Properties BigInt A 64-bit integer. Bool A boolean 0 or 1 value. Char A fixed length string. Date A date value. DateTime A date-time value. Decimal A decimal value. Double A double precision floating point value. Float A variable precision floating point value. Int A 32-bit integer generally 32-bit. Interval A time interval value. NChar A fixed length unicode string. Numeric A numeric value. NVarChar A variable length unicode string. Real A 32-bit floating point value. SmallInt A 16-bit integer. Text A variable length string. Time A time value. Unknown An unknown data type. VarChar A variable length string. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .fromString() int fromString( string typeName ) Returns int The data type value for the given name. Description Gets the data type value associated with the name of a storage type. This can be used if you are querying the information schema of a database. In information schemas, field storage types are stored as strings such as \"varchar\" or \"smallint\". This method will interpret such a string an return the enumeration type value associated with it. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .BigInt static readonly int BigInt Description A 64-bit integer. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Bool static readonly int Bool Description A boolean 0 or 1 value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Char static readonly int Char Description A fixed length string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Date static readonly int Date Description A date value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .DateTime static readonly int DateTime Description A date-time value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Decimal static readonly int Decimal Description A decimal value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Double static readonly int Double Description A double precision floating point value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Float static readonly int Float Description A variable precision floating point value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Int static readonly int Int Description A 32-bit integer generally 32-bit. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Interval static readonly int Interval Description A time interval value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .NChar static readonly int NChar Description A fixed length unicode string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Numeric static readonly int Numeric Description A numeric value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .NVarChar static readonly int NVarChar Description A variable length unicode string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Real static readonly int Real Description A 32-bit floating point value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .SmallInt static readonly int SmallInt Description A 16-bit integer. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Text static readonly int Text Description A variable length string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Time static readonly int Time Description A time value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Unknown static readonly int Unknown Description An unknown data type. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .VarChar static readonly int VarChar Description A variable length string."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.PreparedStatement.html",
        "title": "FlexScript Class - Database.PreparedStatement",
        "content": "Description A class for execution and manipulation of a database SQL statement. The Database.PreparedStatement class is returned from the Database.Connection . prepareStatement () method. Calling this method creates a new PreparedStatement object. This object can be executed multiple times, and different values can be bound to named or numbered parameters in the statement. Database.Connection con = Database.Connection(\"DBConnector1\"); con.connect(); Database.PreparedStatement statement = con.prepareStatement(\"INSERT INTO customers (ID, FirstName, LastName) VALUES (:id, :firstName, :lastName)\"); Table customers = Table(\"Customers\"); for (int i = 1; i <= customers.numRows; i++) { statement.bindParam(\"id\", customers[i][\"ID\"], Database.DataType.Int); statement.bindParam(\"firstName\", customers[i][\"FirstName\"], Database.DataType.VarChar); statement.bindParam(\"lastName\", customers[i][\"LastName\"], Database.DataType.VarChar); statement.execute(); } con.disconnect(); Properties statement The SQL statement associated with this PreparedStatement. Methods bindParam Binds a value to a named or numbered parameter in the SQL statement. execute Executes the statement with the currently bound parameter values. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.PreparedStatement .statement readonly string statement Description The SQL statement associated with this PreparedStatement. Do no remove, this fixes the anchor on doc.flexsim.com Database.PreparedStatement .bindParam() void bindParam( string paramName , Variant value , int dataType ) void bindParam( int paramNum , Variant value , int dataType ) Parameters paramName The name of a parameter defined in the SQL statement. paramNum The number of a parameter defined in the SQL statement. value The value to bind the parameter to. dataType The database's storage data type for that parameter. This should be one of the values defined in Database.DataType . Description Binds a value to a named or numbered parameter in the SQL statement. To define a parameter for binding, add to the SQL statement a colon followed by either a number or a named alias. Below is an example of an SQL statement with named parameters. INSERT INTO customers ID, FirstName, LastName) VALUES (:id, :firstName, :lastName) In this example, you would bind the parameter by its name. statement.bindParam(\"id\", myID); Below is an example of an SQL statement with numbered parameters. INSERT INTO customers ID, FirstName, LastName) VALUES (:1, :2, :3) In this example, you would bind the parameter by its number. statement.bindParam(1, myID); Do no remove, this fixes the anchor on doc.flexsim.com Database.PreparedStatement .execute() Database.ResultSet execute( ) Returns Database.ResultSet The ResultSet associated with this execution. Description Executes the statement with the currently bound parameter values. In the current implementation, only one ResultSet is available at any given time for a given PreparedStatement. This means that you must completely process a result set before calling execute() again. Subsequent calls to execute() will cause any previously generated ResultSets to refer to the new result of the execute() call."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.ResultSet.html",
        "title": "FlexScript Class - Database.ResultSet",
        "content": "Description A class for retrieving the result of a database SQL query. A Database.ResultSet is returned by Database.Connection . query (), and by Database.PreparedStatement . execute (). The class provides methods and properties for retrieving the result data associated with a SQL query execution. Database.Connection con = Database.Connection(\"DBConnector1\"); con.connect(); Database.ResultSet result = con.query(\"SELECT * FROM customers\"); while (result.fetchNext()) { string firstName = result[\"FirstName\"]; string lastName = result[\"LastName\"]; for (int j = 1; j <= result.numFields; j++) { Variant column1Value = result[j]; ... } ... } con.disconnect(); A Database.ResultSet implements a forward-only cursor. This means you can only traverse through the results once. This can either be done manually, using fetchNext (), or automatically by dumping the data to a table with cloneTo (). However, you cannot do both. In other words, you cannot clone the result using cloneTo(), and then also use fetchNext() to traverse the result again, or vice versa. Properties numFields The number of fields in the result set. Methods cloneTo Clones the result set to a destination table. fetchNext Moves the cursor forward one record in the result. getFieldName Gets the name of a result column by index. Operators [] Gets a result field value by its name or rank. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .numFields readonly int numFields Description The number of fields in the result set. Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .cloneTo() void cloneTo( Table destTable ) Description Clones the result set to a destination table. Database.Connection con = Database.Connection(\"DBConnector1\"); con.connect(); con.query(\"SELECT * FROM customers\").cloneTo(Table(\"Customers\")); con.disconnect(); Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .fetchNext() int fetchNext( ) Returns int 1 if successful, 0 if the end of the result set has been reached. Description Moves the cursor forward one record in the result. Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .getFieldName() string getFieldName( int fieldNum ) Parameters fieldNum The index of the field. Returns string The name of the field at the specified index. Description Gets the name of a result column by index. Array fields; Database.Connection db = Database.Connection(\"DatabaseConnector1\"); db.connect(); var resultSet = db.query(\"SELECT * FROM customers\"); for (int i = 1; i <= resultSet.numFields; i++) { fields.push(resultSet.getFieldName(i)); } db.disconnect(); return fields; Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .operator [] Variant operator []( int fieldRank ) Variant operator []( int fieldName ) Parameters fieldRank The 1-based rank of the desired field fieldName The name of the desired field Returns Variant The value of the given field for the result set's current record. Description Gets a result field value by its name or rank."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/EmpiricalDistribution/Empirical.html",
        "title": "FlexScript Class - Empirical",
        "content": "Description A class that represents an Empirical Distribution. Methods get Returns a random variate from a defined Empirical Distribution tool. Constructor Empirical Creates a reference to a defined Empirical Distribution tool. Details Do no remove, this fixes the anchor on doc.flexsim.com Empirical .get() Variant get( int stream = 0 ) Parameters stream the stream your distribution will use. Description Returns a random variate from a defined Empirical Distribution tool. return Empirical(\"Distribution1\").get(getstream(current)); Do no remove, this fixes the anchor on doc.flexsim.com Empirical Constructor Empirical( string name ) Parameters name The name of a defined Empirical Distribution tool. Description Creates a reference to a defined Empirical Distribution tool. Empirical distribution1 = Empirical(\"Distribution1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Http/Http.Method.html",
        "title": "FlexScript Class - Http.Method",
        "content": "Description An enumeration of integer values representing Http Request Methods. The Http.Method values represent the method used in Http.Request. method . Static Properties Get = 1 Method to request data. Post = 3 Method to create or replace a target resource with specified data. Is not idempotent. Put = 2 Method to create or replace a target resource with specified data. Is idempotent. Details Do no remove, this fixes the anchor on doc.flexsim.com Http.Method .Get static readonly int Get = 1 Description Method to request data. Do no remove, this fixes the anchor on doc.flexsim.com Http.Method .Post static readonly int Post = 3 Description Method to create or replace a target resource with specified data. Is not idempotent. Do no remove, this fixes the anchor on doc.flexsim.com Http.Method .Put static readonly int Put = 2 Description Method to create or replace a target resource with specified data. Is idempotent."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Http/Http.Request.html",
        "title": "FlexScript Class - Http.Request",
        "content": "Description A class for creating a Http Request. Properties data Gets/sets the data being sent with the request. failCallback Specify the fail callback treenode. headers Gets/sets the headers being sent with the request. host Gets/sets the host. labelProperties Use your own named properties to get/set label values. method Specify the request Http.Method . path Gets/sets the resource path. port Gets/sets the port the request is being sent to. statusCallback Specify the status callback treenode. successCallback Specify the success callback treenode. timeout Specify the request timeout in ms. useSSL Specify whether to use SSL if applicable. Methods send Send an asynchronous Http request. sendAndWait Send a synchronous Http request. Constructor Http.Request Creates a Http.Request based on the given url. Details Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .data string data Description Gets/sets the data being sent with the request. Http.Request request; request.host = \"www.flexsim.com\"; request.data = \"name1=value1\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .failCallback treenode failCallback Description Specify the fail callback treenode. Http.Request request; request.host = \"www.flexsim.com\"; request.failCallback = Model.find(\"Tools/failCallback\"); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .headers string headers Description Gets/sets the headers being sent with the request. If this property is not set, then \"Content-Type: application/x-www-form-urlencoded\\r\\n\" will be passed as the headers. Http.Request request; request.host = \"127.0.0.1\"; request.port = 5000; request.path = \"/v1/prediction\"; request.data = JSON.stringify(observation); request.headers = \"Content-Type: application/json\\r\\n\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .host string host Description Gets/sets the host. Http.Request request; request.host = \"www.flexsim.com\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. Custom properties added to Http.Request objects will be accessible with the same name on Http.Response objects created in callbacks and the return value of sendAndWait(). Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); Http.Response response = request.sendAndWait(); print(response.myProcessor); // /Processor1 Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .method int method Description Specify the request Http.Method . Http.Request request; request.host = \"www.flexsim.com\"; request.method = Http.Method.Get; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .path string path Description Gets/sets the resource path. Http.Request request; request.host = \"www.flexsim.com\"; request.path = \"flexsim\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .port int port Description Gets/sets the port the request is being sent to. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .statusCallback treenode statusCallback Description Specify the status callback treenode. Http.Request request; request.host = \"www.flexsim.com\"; request.statusCallback = Model.find(\"Tools/statusCallback\"); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .successCallback treenode successCallback Description Specify the success callback treenode. Http.Request request; request.host = \"www.flexsim.com\"; request.successCallback = Model.find(\"Tools/successCallback\"); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .timeout int timeout Description Specify the request timeout in ms. Http.Request request; request.host = \"www.flexsim.com\"; request.timeout = 1000; // 1 second timeout Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .useSSL int useSSL Description Specify whether to use SSL if applicable. Http.Request request; request.host = \"www.flexsim.com\"; request.useSSL = 1; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .send() void send( ) Description Send an asynchronous Http request. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; request.useSSL = 1; request.successCallback = Model.find(\"Tools/successCallback\"); request.send(); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .sendAndWait() Http.Response sendAndWait( ) Description Send a synchronous Http request. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; request.useSSL = 1; request.status = Model.find(\"Tools/statusCallback\"); Http.Response response = request.sendAndWait(); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request Constructor Http.Request( string URL ) Parameters URL A URL specifying the host, and can include the protocol(Http/Https), the port, and the reference path. Returns Http.Request A Http.Request Description Creates a Http.Request based on the given url. Http.Request request = Http.Request(\"https://www.flexsim.com:443/flexsim/\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Http/Http.Response.html",
        "title": "FlexScript Class - Http.Response",
        "content": "Description A class representing the Response to a Http Request. Properties data Gets the data sent with the request. failCallback Gets the fail callback treenode. headers Gets the headers of the response. host Gets the host used in the request. labelProperties Use your own named properties to get/set label values. method Gets the request Http.Method used in the request. path Gets the resource path used in the request. port Gets the port the request was sent to. receivedBytes Gets the amount of bytes of the response message received. statusCallback Gets the status callback treenode. statusCode Gets the request's Http status code. successCallback Gets the success callback treenode. timeout Gets the request timeout in ms used in the request. totalBytes Gets the size of the response message in bytes. useSSL Gets whether SSL was used in the request. value Gets the response message to the Http request. Methods saveToFile Saves the Http.Response value to a file. Details Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .data readonly string data Description Gets the data sent with the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .failCallback readonly treenode failCallback Description Gets the fail callback treenode. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .headers readonly string headers Description Gets the headers of the response. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .host readonly string host Description Gets the host used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .labelProperties readonly Variant labelProperties Description Use your own named properties to get/set label values. custom labels on Http.Response objects are inherited from the Http.Request object. Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); Http.Response response = request.sendAndWait(); print(response.myProcessor); // /Processor1 Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .method readonly int method Description Gets the request Http.Method used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .path readonly string path Description Gets the resource path used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .port readonly int port Description Gets the port the request was sent to. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .receivedBytes readonly int receivedBytes Description Gets the amount of bytes of the response message received. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .statusCallback readonly treenode statusCallback Description Gets the status callback treenode. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .statusCode readonly int statusCode Description Gets the request's Http status code. Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); request.sendAndWait(); //In the statusCallback node// Http.Response response = param(1); print(response.statusCode); // last print should be a 200 Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .successCallback readonly treenode successCallback Description Gets the success callback treenode. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .timeout readonly int timeout Description Gets the request timeout in ms used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .totalBytes readonly int totalBytes Description Gets the size of the response message in bytes. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .useSSL readonly int useSSL Description Gets whether SSL was used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .value readonly string value Description Gets the response message to the Http request. Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); Http.Response response = request.sendAndWait(); print(response.value); //prints the response message Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .saveToFile() void saveToFile( string filePath ) Description Saves the Http.Response value to a file. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; request.useSSL = 1; request.successCallback = Model.find(\"Tools/successCallback\"); Http.Response response = request.sendAndWait(); response.saveToFile(modeldir() + \"flexsim_homepage.html\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.html",
        "title": "FlexScript Class - List",
        "content": "Description A class that represents a list. Lists are a powerful tool that can have many applications in FlexSim. At the most basic level, a List is just that: a list of values. Each value in a list may be either a number, a string, or a reference to an object in the simulation model. Lists also harness the expressive power of SQL for searching, filtering and prioritizing the values on the List. Entries in a List can have user-defined fields. These fields essentially make the List into a dynamic database table. The List can then be filtered and prioritized using SQL queries, as if you were querying a standard database table. Properties stats Allows access to an object's statistics. Methods backOrders Gets an array of the back orders on a certain partition. entries Gets an array of the entries on a certain partition. getEntryFromValue Returns the entry associated with a value. pull Attempts to pull values from the list. push Pushes a value on the list. reevaluateBackOrders Reevaluates back orders against all entries or a specific entry. Constructor List Creates a reference to a global list. Details Do no remove, this fixes the anchor on doc.flexsim.com List .stats readonly stats Description Allows access to an object's statistics. Allows you to access the statistics of a List as TrackedVariable objects. This property provides the following properties and methods: Properties input - returns the input tracked variable output - returns the output tracked variable content - returns the content tracked variable staytime - returns the staytime tracked variable backOrderInput - returns the input tracked variable for backOrders backOrderOutput - returns the output tracked variable for backOrders backOrderContent - returns the content tracked variable for backOrders backOrderStaytime - returns the staytime tracked variable for backOrders // Get the input of a List List(\"MyList\").stats.input.value; Methods fieldTotal(Variant field) fieldTotalInput(Variant field) fieldTotalOutput(Variant field) partitionBackOrderContent(Variant partition) partitionBackOrderInput(Variant partition) partitionBackOrderOutput(Variant partition) partitionBackOrderStaytime(Variant partition) partitionContent(Variant partition) partitionInput(Variant partition) partitionOutput(Variant partition) partitionStaytime(Variant partition) Do no remove, this fixes the anchor on doc.flexsim.com List .backOrders() backOrders( Variant partitionID = 0 ) Parameters startValue The ID of the partition you want to get the back orders for. Description Gets an array of the back orders on a certain partition. This array is read only, but you can query the length of the array as well as accessing individual back orders to query their data. See the List.BackOrder class for more information. List(\"ItemList\").backOrders().length List(\"ItemList\").backOrders(3)[1].puller Do no remove, this fixes the anchor on doc.flexsim.com List .entries() entries( Variant partitionID = 0 ) Parameters startValue The ID of the partition you want to get the entries for. Description Gets an array of the entries on a certain partition. This array is read only, but you can query the length of the array as well as accessing individual entries to query their data. See the List.Entry class for more information. List(\"ItemList\").entries().length List(\"ItemList\").entries(3)[1].value Do no remove, this fixes the anchor on doc.flexsim.com List .getEntryFromValue() List.Entry getEntryFromValue( Variant value , Variant partitionID = 0 ) Parameters value The value that was pushed to the list. partitionID The ID of the partition the value was pushed to. Description Returns the entry associated with a value. Searches the partition for an entry that is associated with the value. If there is no entry associated with the value the method returns null. If Unique Values Only is set to false this method will always return null. List stations = List(\"StationList\"); List.Entry entry = stations.getEntryFromValue(current); stations.reevaluateBackOrders(entry); Do no remove, this fixes the anchor on doc.flexsim.com List .pull() List.PullResult pull( string sqlQuery , double requestNum , double requireNum = 0 , Variant puller = nullvar , Variant partitionID = nullvar , int flags = 0 ) List.PullResult pull( treenode object , double requestNum = 1 , double requireNum = 0 , Variant puller = nullvar , Variant partitionID = nullvar , int flags = 0 ) List.PullResult pull( Array matchValues , string sqlQuery , double requestNum = 1 , double requireNum = 0 , Variant puller = nullvar , Variant partitionID = nullvar , int flags = 0 ) Parameters object The object or node what you would like to pull from the list. matchValues A set of values to match entry values against. The pull operation will only pull values that are in the set of values defined in the matchValues array. This works as an additional filter on the set of values to pull, in addition to any WHERE clause that is defined in the sqlQuery parameter. sqlQuery An sql query that defines what you would like to pull from the list. requestNum The maximum number of things you want to pull from the list. requireNum The minimum number of things you want to pull from the list. puller The thing pulling from the list. partitionID The ID of the partition you want to pull from. flags Flags that modify the behavior of the pull. Description Attempts to pull values from the list. Pulls things from the list that meet the requirements in the sql query. Returns a List.PullResult . List.PullResult pullResult = List(\"ItemList\").pull(\"\", 1, 1); Object item = List(\"ItemList\").pull(\"WHERE type = 3 ORDER BY age\", 3, 2, current, current.station); sqlQuery - Defines the SQL query to use in pulling. The SQL query should only use the WHERE, ORDER BY, SELECT or LIMIT clauses. By default, field names correlate with object label names. For example, if your query is WHERE type > 5 ORDER BY priority DESC then the list will search for objects on the list who have a \"type\" label with a value greater than 5, and will order by objects' \"priority\" label value in descending order, i.e. it will prioritize higher \"priority\" label values. If you need more flexibility than just labels, you can add to the list's defined fields through its properties window. requestNum - Defines the number of entries that you are requesting to pull from the list. If requestNum is greater than zero, then entries that satisfy the query will be immediately removed from the list. If requestNum is zero, the list will do the query and return the result, but it will not remove any satisfying entries. If you want to query for a limited number of entries, but you also do not want to remove them, pass 0 as the requestNum, and use the LIMIT clause in the pull query. requireNum - Defines the number of entries that you require to be pulled from the list. This must be less than or equal to requestNum. If requireNum is greater than zero and the required number is not met, then a back order will be created for the pull request, and as items are pushed onto the list, they will be pulled off by the back order until the back order's requireNum is met, at which point the back order will be removed. If no back order queue strategy is defined on the list, back orders are fulfilled in FIFO order assuming they do not allocate all-or-nothing. If a back order is created and you would like to be notified when the back order is fulfilled, use the eventlisten() command as follows: eventlisten(pullResult.backOrder, \"OnFulfill\", callbackNode, 0, ...) This will cause callbackNode's code to be evaluated when the back order is fulfilled. If the back order may be incrementally fulfilled multiple times, the callbackNode's code will be evaluated each time a partial fulfillment is made. Additional parameters (the ... optional parameters) may be defined for callbackNode's param(1), param(2), etc. You may replace these parameters with one of the following macros to have that parameter be replaced with a fulfillment-dependent value when the callback is made. LIST_ON_FULFILL_VALUE - The value of the entry or entries that were pulled. LIST_ON_FULFILL_NUM_FULFILLED - The quantity that was fulfilled as part of this fulfillment. Usually 1 unless the query has a SELECT clause. LIST_ON_FULFILL_TOTAL_FULFILLED - The total quantity fulfilled for the back order up to this point. LIST_ON_FULFILL_NUM_REQUESTED - The number requested initially when the pull request was made. LIST_ON_FULFILL_NUM_REQUIRED - The number required initially when the pull request was made. For example, if you use the command: eventlisten(pullResult.backOrder, \"OnFulfill\", callbackNode, 0, LIST_ON_FULFILL_VALUE) Here, when a fulfillment is made, param(1) of callbackNode's code will be replaced with the value for the entry that satisfied the fulfillment. puller - Defines who or what is pulling the entries from the list. This can be 0. Reasons to use a puller may be: You can access the puller's labels in the query. For example, a query of WHERE Type = puller.Type would match entries whose \"Type\" label is equal to the puller's \"Type\" label. The list's pushers can know who is pulling them off the list. The push() method will return the back order pullers who pulled the item off the list. If you use the list's custom query fields, some require a valid puller to evaluate properly. partitionId - Defines the partition id to pull from. Using a partitionId will make the list act like multiple separate lists, each uniquely identified by its partitionId. If you pushed an entry onto the list with a defined partition id, you should pull the entry off with the same partitionId. flags - Defines behavior flags for pulling. Valid values may be one or more of the following: LIST_PULL_ALL_OR_NOTHING The pull request will only pull entries if it can pull all required entries. If this value is not specified, the pull/back order will pull entries off the list as they are available. LIST_PARSE_QUERY Instead of actually doing a pull operation, the list will simply parse the defined query. It will return a reference to a node that holds the cached query. This node can subsequently be passed as the query parameter to subsequent pull() calls. This can improve simulation run speed because it only has to do the parsing once, instead of every time you call pull(). Ownership of the node is given to the caller, i.e. it is your responsibility to store and later delete the node once you're done with it. You should use transfernode() to move the node where you can access it. LIST_PULL_ENTRY_NODES Instead of returning the pulled values, the command will return the set of entry nodes that reference those pulled values. Primarily this is useful only if you need to know the time that the entries were pushed onto the list (getsdtvalue(entryNode, \"pushTime\")). The list uses the same rules of whether to remove the entries from the list (requestNum > 0), but in this case when it removes them, it will put them into a temporary location and return them instead of destroying them. You are required to destroy them yourself (if they were removed) once you have the needed information. LIST_DO_NOT_REMOVE Matching entries on the list will be returned by this command, however, the entries will remain on the list. This is useful when creating a directory or routing that doesn't dynamically change. LIST_DO_NOT_BACK_ORDER If the number of matching entries is less than the required number, no back order will will be created. LIST_PULL_BACK_ORDERS Instead of querying the entries on the list, this command will query the back orders and return a list of all back orders that matched the specified query. If the query contains an ORDER BY, the back orders will be sorted. This will also reevaluate the back orders and will remove any back orders that are fulfilled. LIST_DO_NOT_FULFILL Used in conjunction with LIST_PULL_BACK_ORDERS, this will cause the back orders to not be reevaluated or removed. This allows you to purely query the list's back orders or to sort back orders without fulfilling any back order. LIST_RETURN_BACK_ORDER_IF_NOT_FULFILL Use in conjunction with LIST_PULL_ALL_OR_NOTHING. If the pull is unable to be fulfilled, a back order will be created. A reference to this back order node will be returned by the pull() method. This can then be used to add a listener for the onFulfill of the backorder using eventlisten(). Return Value - If the pull is successful, the command will return a List.PullResult which is a Variant holding the pulled value(s). If there are multiple values pulled, they will be in an Array. If the pull is not completely successful and a back order is created, you can access the created back order on the pull result. pullResult.backOrder Do no remove, this fixes the anchor on doc.flexsim.com List .push() List.PushResult push( Variant value ) List.PushResult push( Variant value , Variant partitionID ) List.PushResult push( Variant value , Variant partitionID , Variant pushArg1 , Variant pushArg2 , Variant pushArg3 , Variant pushArg4 , Variant pushArg5 , Variant pushArg6 , Variant pushArg7 , Variant pushArg8 ) Parameters value The value to push on the list. partitionID The ID of the partition you want to push to. pushArgs An argument you want to push with the value. Description Pushes a value on the list. Puts the value on the list making it available to anyone who can pull from the list. Returns a List.PushResult . List.PushResult pushResult = List(\"ItemList\").push(item); If partitionId is specified then the list will act like multiple lists, each list uniquely identified by its partitionId. When you push a value onto a list with a given partitionId, you must later pull the value off the list by using the same partitionId. List(\"ItemList\").push(item, item.type); Pushing a nullvar value will just re-evaluate all back orders without pushing anything onto the list. List(\"ItemList\").push(nullvar); When you push the item onto the list, if it is immediately pulled by a back order, then the push result will contain the puller(s) who pulled the item off the list. Otherwise it contains 0. To access the node that represents the entry pushed onto the list use the entries property of the returned List.PushResult . List.Entry entry = List(\"ItemList\").push(item).entries[1]; You may also push an array of values onto the list. This is similar to just looping through each value and pushing it onto the list, except that all entries will be pushed onto the list BEFORE evaluating back orders. This means that back orders with all-or-nothing pull requests for multiple entries can be fulfilled before they are \"stolen\" away by back orders without all-or-nothing requests or who are requesting fewer entries. Do no remove, this fixes the anchor on doc.flexsim.com List .reevaluateBackOrders() void reevaluateBackOrders( ) void reevaluateBackOrders( List.Entry entry ) Parameters entry The entry the back orders will be reevaluated against. Description Reevaluates back orders against all entries or a specific entry. If an entry is specified, all the back orders in the same partition will be reevaluated against the enty. If no entry is specified, all back orders in every partition will be reevaluated against all the entries in the same partition. List(\"ItemList\").reevaluateBackOrders() List(\"ItemList\").reevaluateBackOrders(List(\"ItemList\").entries()[1]) Do no remove, this fixes the anchor on doc.flexsim.com List Constructor List( string name ) Parameters name The name of the global list. Description Creates a reference to a global list. List itemList = List(\"ItemList\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.BackOrder.html",
        "title": "FlexScript Class - List.BackOrder",
        "content": "Description A class that represents a list back order. List back orders represent pull requests that are waiting to be fulfilled. Properties flags The flags used by this back order. labelProperties Use your own named properties to get/set label values. labels Accesses a node's labels as nodes. numRequested The number of things this back order is requesting. numRequired The number of things this back order is requiring. puller Gets the variant value of the thing pulling from the list. query Gets the sql query this back order is using to define the pull requirements. Methods remove Removes the back order from the partition. Details Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .flags readonly int flags Description The flags used by this back order. int requireNum = List(\"ItemList\").backOrders()[1].flags; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. Works just like labelProperties on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .labels readonly labels Description Accesses a node's labels as nodes. Works just like labels on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .numRequested readonly double numRequested Description The number of things this back order is requesting. double requestNum = List(\"ItemList\").backOrders()[1].numRequested; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .numRequired readonly double numRequired Description The number of things this back order is requiring. double requireNum = List(\"ItemList\").backOrders()[1].numRequired; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .puller readonly Variant puller Description Gets the variant value of the thing pulling from the list. List(\"ItemList\").backOrders()[1].puller == current; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .query readonly string query Description Gets the sql query this back order is using to define the pull requirements. List(\"ItemList\").backOrders()[1].query.startsWith(\"WHERE\"); Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .remove() void remove( ) Description Removes the back order from the partition. List(\"ItemList\").backOrders()[1].remove(); Use this instead of destroyobject() so the list can keep track of its statistics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.Entry.html",
        "title": "FlexScript Class - List.Entry",
        "content": "Description A class that represents a list entry. List entries represent values that have been pushed on the list and are waiting to be pulled. Properties value Gets the variant value of the thing on the list. Methods remove Removes the entry from the partition. Details Do no remove, this fixes the anchor on doc.flexsim.com List.Entry .value readonly Variant value Description Gets the variant value of the thing on the list. List(\"ItemList\").entries()[1].value == 5; Do no remove, this fixes the anchor on doc.flexsim.com List.Entry .remove() void remove( ) Description Removes the entry from the partition. List(\"ItemList\").entries()[1].remove(); Use this instead of destroyobject() so the list can keep track of its statistics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.PullResult.html",
        "title": "FlexScript Class - List.PullResult",
        "content": "Inherits from Variant Description A class that represents the result of a call to List . pull (). The List.PullResult can be treated just like a Variant . The Variant holds the value or values that were pulled from the list. There are several options for writing code to get the result from a list pull. //define full List.PullResult type List.PullResult pulled = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); // just infer the type with var var pulled = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); // don't need full List.PullResult properties, so just get it as a Variant Variant pulled = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); Properties backOrder The resulting back order, if one exists. Details Do no remove, this fixes the anchor on doc.flexsim.com List.PullResult .backOrder readonly List.BackOrder backOrder Description The resulting back order, if one exists. When the pull is not completely fulfilled, a back order associated with the pull is created. This property gives access to that back order if one exists. List.PullResult result = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); if (result.backOrder) { ... // the pull wasn't completely fulfilled, so there is a back order. }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.PushResult.html",
        "title": "FlexScript Class - List.PushResult",
        "content": "Inherits from Variant Description A class that represents the result of a call to List . push (). The List.PushResult can be treated just like a Variant . Properties entries The resulting entries, if any exist. Details Do no remove, this fixes the anchor on doc.flexsim.com List.PushResult .entries readonly entries Description The resulting entries, if any exist. If the pushed object is not immediately pulled, an entry is created. This property gives access to that entry if one exists. List.PushResult result = List(\"ItemList\").push(item); result.entries.length // Number of entries just pushed result.entries[1] // A reference to the first entry just pushed on the list"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/People/ElevatorBank.html",
        "title": "FlexScript Class - ElevatorBank",
        "content": "Description A class that represents a bank of elevators. Properties elevators An array accessor to the set of ElevatorBank.Elevator s in this bank. requests An array accessor to the set of ElevatorBank.Request s in this bank. Details Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank .elevators readonly elevators Description An array accessor to the set of ElevatorBank.Elevator s in this bank. ElevatorBank bank = Model.find(\"ElevatorBank1\"); for (int i = 1; i <= bank.elevators.length; i++) { ElevatorBank.Elevator elevator = bank.elevators[i]; ... } Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank .requests readonly requests Description An array accessor to the set of ElevatorBank.Request s in this bank. for (int i = 1; i <= bank.requests.length; i++) { ElevatorBank.Request request = bank.requests[i]; ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/People/ElevatorBank.Elevator.html",
        "title": "FlexScript Class - ElevatorBank.Elevator",
        "content": "Inherits from Object Description A class that represents an elevator member of an ElevatorBank . Properties bank A reference to the ElevatorBank associated with this elevator. capacity The total capacity. This value is entered by the user in the elevator bank properties. isGoingDown A boolean telling if the elevator is currently going down. isGoingUp A boolean telling if the elevator is currently going up. lastFloorZ The z location of the floor that the elevator most recently stopped at. nextFloorZ The z location of the floor that the elevator was most recently dispatched to. travelDirection An integer signifying the elevator's current travel direction. 1 means going up, -1 means going down. 0 means the elevator is idle. usedCapacity The currently used capacity, i.e. the sum of the capacity usages of each traveler currently on the elevator. Methods canStop Returns true if the elevator can stop at the target z location and desired travel direction, given the elevator's current location and travel direction. moveToFloor Tells the elevator to move to the target floor. Details Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .bank readonly ElevatorBank bank Description A reference to the ElevatorBank associated with this elevator. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .capacity readonly double capacity Description The total capacity. This value is entered by the user in the elevator bank properties. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .isGoingDown readonly int isGoingDown Description A boolean telling if the elevator is currently going down. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .isGoingUp readonly int isGoingUp Description A boolean telling if the elevator is currently going up. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .lastFloorZ readonly double lastFloorZ Description The z location of the floor that the elevator most recently stopped at. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .nextFloorZ readonly double nextFloorZ Description The z location of the floor that the elevator was most recently dispatched to. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .travelDirection readonly int travelDirection Description An integer signifying the elevator's current travel direction. 1 means going up, -1 means going down. 0 means the elevator is idle. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .usedCapacity readonly double usedCapacity Description The currently used capacity, i.e. the sum of the capacity usages of each traveler currently on the elevator. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .canStop() int canStop( double floorZ , int travelDirection ) Parameters floorZ The desired z location to stop at. travelDirection The desired travel direction for a request. 1 means going up, -1 means going down, 0 means to ignore desired travel direction. Returns int 1 if the elevator can stop at the location, 0 otherwise. Description Returns true if the elevator can stop at the target z location and desired travel direction, given the elevator's current location and travel direction. This method uses several factors to determine whether the elevator can stop at a given location, as follows: If the elevator is currently idle, it will always return true. If the elevator is not idle, then the desired travel direction must match the elevator's travel direction, and the target z must be \"ahead of it\" given the elevator's current travel direction. In other words, if the elevator is currently going down, then the target z must be below the elevator's current location. If the elevator is going up, the target z must be above the elevator's current location. If the elevator is currently moving, then the target z location must be far enough ahead of the elevator so that the elevator can stop at the target z (given its current speed and deceleration) without going past it. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .moveToFloor() void moveToFloor( double floorZ ) Parameters floorZ The desired z location to move to. Returns void True if the elevator can stop at the location. Description Tells the elevator to move to the target floor. Since the elevator implements automatic logic for moving between floors, generally you will only use this method in the following situations. When the elevator becomes idle (the OnIdle event), you may want to send the elevator to a home location. If you want to preempt the elevator's normal behavior, because of some abnormal occurrence."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/People/ElevatorBank.Request.html",
        "title": "FlexScript Class - ElevatorBank.Request",
        "content": "Description A class that represents a request for an ElevatorBank.Elevator . You might think of a specific request as corresponding to a pressed/lighted button at the entrance to an elevator bank, or a pressed/lighted button inside an elevator. When a person arrives at an ElevatorBank , the person will press a button to go either up or down. The pressing of the button creates a new request for an elevator to come to that floor. Also, when a person enters an elevator, s/he presses a button for the destination floor to go to. This creates another new request for that specific elevator to go to the target floor. The ElevatorBank manages an array of all currently active requests, in its ElevatorBank . requests property. It also pushes the request onto a List . When elevators need to decide which floor to go to next, they pull from this list, using a user-defined pull query, and then move to whichever floor is chosen from the pull operation. Properties bank A reference to the ElevatorBank associated with this request. creationTime The time that the request was created, i.e. the time that the person pushed the button. floorZ The z location of the request's target floor. isGoingDown A boolean telling if the request is to go down. isGoingUp A boolean telling if the request is to go up. onElevator If not 0, the elevator in which the corresponding button was pushed. In other words, the elevator that the person was on when s/he pushed the button. travelDirection An integer signifying the request's travel direction. 1 means going up, -1 means going down. Details Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .bank readonly ElevatorBank bank Description A reference to the ElevatorBank associated with this request. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .creationTime readonly double creationTime Description The time that the request was created, i.e. the time that the person pushed the button. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .floorZ readonly double floorZ Description The z location of the request's target floor. If the request corresponds to a button outside the elevator (onElevator = 0), then floorZ is the floor location at which to pick up the person. If the requests corresponds to a button inside an elevator (onElevator != 0) then floorZ is the location of the floor that the person wants to go to. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .isGoingDown readonly int isGoingDown Description A boolean telling if the request is to go down. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .isGoingUp readonly int isGoingUp Description A boolean telling if the request is to go up. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .onElevator readonly ElevatorBank.Elevator onElevator Description If not 0, the elevator in which the corresponding button was pushed. In other words, the elevator that the person was on when s/he pushed the button. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .travelDirection readonly int travelDirection Description An integer signifying the request's travel direction. 1 means going up, -1 means going down."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.html",
        "title": "FlexScript Class - PowerPoint",
        "content": "Description A class for accessing PowerPoint. Class references for creating, opening, and editing PowerPoint presentations, slides, and shapes. PowerPoint.Presentation PowerPoint.Slide PowerPoint.Shape PowerPoint.Layout PowerPoint.ShapeType PowerPoint.SlideSizeType Example code for how to create a basic PowerPoint Presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); PowerPoint.Slide Slide = Presentation.addSlide(PowerPoint.Layout.title); PowerPoint.Shape Title = Slide.shapes[1]; PowerPoint.Shape subTitle = Slide.shapes[2]; Title.text = \"The Presentation's Title in Blue\"; Title.color = Color.blue; subTitle.text= \"The Presentation's Subtitle in Green\"; subTitle.color = Color.green; Presentation.save(documentsdir() + \"\\\\Presentation.pptx\"); Presentation.close();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Presentation.html",
        "title": "FlexScript Class - PowerPoint.Presentation",
        "content": "Description A class for creating, opening, and editing PowerPoint presentations. Properties slides Accesses slides in the presentation (Read Only). slideSize Gets/sets the size of the slides in the presentation. slideSizeType Gets/sets the SlideSizeType of the presentation, an enumeration of PowerPoint.SlideSizeType . template The template the presentation is using (Read Only). Methods addSlide Adds a slide with a specific layout. applyTemplate Applies a Template from a file. applyTheme Applies a theme from a file. close Closes the presentation and quits the current PowerPoint instance. save Saves the presentation. Static Methods create Create a new empty presentation. open Opens a presentation from a given path. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .slides readonly PowerPoint.Slide slides Description Accesses slides in the presentation (Read Only). Accessing the Number of slides in the presentation You can access the number of slides in the presentation with the following code. presentation.slides.length Accessing slides by Rank You can access an individual slide with the following code. presentation.slides[1] // first slide presentation.slides[presentation.slides.length] // last slide presentation.slides[i] // i-th slide Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .slideSize Vec2 slideSize Description Gets/sets the size of the slides in the presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slideSize = Vec2(400,400); return presentation.slideSize; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .slideSizeType int slideSizeType Description Gets/sets the SlideSizeType of the presentation, an enumeration of PowerPoint.SlideSizeType . PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slideSizeType = PowerPoint.SlideSizeType.OnScreen16x10; return presentation.slideSizeType; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .template readonly string template Description The template the presentation is using (Read Only). PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); return presentation.template; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .addSlide() void addSlide( int layout ) Parameters layout The layout you want to apply to the slide when it is added. This should be an enumeration of PowerPoint.Layout . Description Adds a slide with a specific layout. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .applyTemplate() void applyTemplate( string filePath ) Parameters filePath The path to where the theme is. Description Applies a Template from a file. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.applyTemplate(modeldir() + \"\\\\Template.potx\"); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .applyTheme() void applyTheme( string filePath ) Parameters filePath The path to where the theme is. Description Applies a theme from a file. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.applyTheme(modeldir() + \"\\\\Theme.thmx\"); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .close() void close( ) Description Closes the presentation and quits the current PowerPoint instance. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.save(modeldir() + \"\\\\Presentation.pptx\"); presentation.close(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .save() void save( string filePath = 0 ) Parameters filePath The path to where you want to save the presentation. If not specified, then it will save over the file path the presentation was opened from or previously saved to. Description Saves the presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.save(modeldir() + \"\\\\Presentation.pptx\"); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .create() static void create( int visible ) Parameters visible Have the created presentation visible to the user or not. Description Create a new empty presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .open() static void open( string filePath , int visible ) Parameters filePath The path to the PowerPoint presentation you want to open. visible Have the opened presentation visible to the user or not. Description Opens a presentation from a given path. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Shape.html",
        "title": "FlexScript Class - PowerPoint.Shape",
        "content": "Description A class for managing and editing PowerPoint shapes. Properties bold Gets/sets the font size of a textbox shape. color Gets/sets the color of the text of a textbox shape. fontSize Gets/sets the font size of a textbox shape. position Gets/sets the position a shape. size Gets/sets the size a shape. text Gets/sets the text of a textbox shape. type Returns the shapetype of the shape, an enumeration of PowerPoint.ShapeType . Methods delete Deletes the shape. duplicate Duplicates the shape. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .bold int bold Description Gets/sets the font size of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); presentation.slides[1].shapes[1].fontSize = 23.5; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .color Color color Description Gets/sets the color of the text of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); return presentation.slides[1].shapes[1].color; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .fontSize double fontSize Description Gets/sets the font size of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); pesentation.slides[1].shapes[1].fontSize = 23.5; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .position Vec2 position Description Gets/sets the position a shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); return presentation.slides[1].shapes[1].position; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .size Vec2 size Description Gets/sets the size a shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addPicture(modeldir() + \"\\\\SamplePicture.png\", Vec2(80,80),Vec2(200,200)); return presentation.slides[1].shapes[1].size; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .text string text Description Gets/sets the text of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); presentation.slides[1].shapes[1].text = \"New Text Replaced\"; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .type int type Description Returns the shapetype of the shape, an enumeration of PowerPoint.ShapeType . PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); return presentation.slides[1].shapes[1].type; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .delete() Description Deletes the shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].shapes[1].delete(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .duplicate() PowerPoint.Shape duplicate( ) Description Duplicates the shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); presentation.slides[1].shapes[1].duplicate();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Slide.html",
        "title": "FlexScript Class - PowerPoint.Slide",
        "content": "Description A class for managing and editing PowerPoint slides. Properties backgroundColor Gets/sets the slide's background color. index Gets/sets the index of the slide in the presentation. shapes Accesses shapes in the slide (Read Only). Methods addMedia Adds media to the slide, can be a sound or video file. addPicture Adds a picture to the slide. addTable Adds a table to the slide from a table in FlexSim. addTextBox Adds a textbox to the slide. assertTitleBox Asserts a title text box if the slide layout includes or included one. delete Deletes the slide. duplicate duplicates the slide. setBackgroundColor Sets the slide's background color. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .backgroundColor Color backgroundColor Description Gets/sets the slide's background color. PowerPoint.Presentation presentation; presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].backgroundColor = Color.red; return presentation.slides[1].backgroundColor; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .index int index Description Gets/sets the index of the slide in the presentation. PowerPoint.Presentation presentation; presentation.create(1); PowerPoint.Slide Slide1 = presentation.addSlide(PowerPoint.Layout.blank); PowerPoint.Slide Slide2 = presentation.addSlide(PowerPoint.Layout.blank); print(Slide1.index); //1 Slide2.index = 1; //The second slide is now the first slide in the presentation return Slide1.index; //2 Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .shapes readonly PowerPoint.Shape shapes Description Accesses shapes in the slide (Read Only). Accessing the Number of shapes in the presentation You can access the number of shapes in the presentation with the following code. slide.shapes.length Accessing shapes by Rank You can access an individual shape with the following code. slide.shapes[1] // first shape slide.shapes[slide.shapes.length] // last shape slide.shapes[i] // i-th shape Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addMedia() PowerPoint.Shape addMedia( string filePath , Vec2 position , Vec2 size ) Parameters filePath The path to the media file you want to add. position The position of the media object, top left corner is 0, 0. size The size of the media object. Description Adds media to the slide, can be a sound or video file. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addMedia(modeldir() + \"\\\\SampleVideo.mp4\", Vec2(80,80),Vec2(200,200)); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addPicture() PowerPoint.Shape addPicture( string filePath , Vec2 position , Vec2 size ) Parameters filePath The path to the picture file you want to add. position The position of the picture object, top left corner is 0, 0. size The size of the picture object. Description Adds a picture to the slide. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addPicture(modeldir() + \"\\\\SamplePicture.png\", Vec2(80,80),Vec2(200,200)); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addTable() PowerPoint.Shape addTable( Table table , Vec2 position , Vec2 size , double fontSize = 18 ) Parameters table The Table the data will be pulled from. position The position of the table, top left corner is 0, 0. size The size of the table. If the size is smaller than the space required to fill the table, it will autosize to accommodate. fontSize The size of the font. Description Adds a table to the slide from a table in FlexSim. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addMedia(Table(\"GlobalTable1\"), Vec2(80,80),Vec2(200,200), 12); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addTextBox() PowerPoint.Shape addTextBox( string text , Vec2 position , Vec2 size , double fontSize = 18 , int bold = 0 , Color color = Color.black ) Parameters text The text you want to be displayed. position The position of the textbox, top left corner is 0, 0. size The size of the textbox. The textbox will autosize to accommodate text that occupies a larger or smaller space then specified. fontSize The size of the font. bold Pass in a 1 to bold the text. color Set the color of the text. Description Adds a textbox to the slide. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .assertTitleBox() PowerPoint.Shape assertTitleBox( string text , Vec2 position , Vec2 size , double fontSize = 18 , int bold = 0 , Color color = Color.black ) Parameters text The text you want to be displayed. position The position of the textbox, top left corner is 0, 0. size The size of the textbox. The textbox will autosize to accommodate text occuping a larger or smaller space than specified. fontSize The size of the font. bold Pass in a 1 to bold the text. color Set the color of the text. Description Asserts a title text box if the slide layout includes or included one. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.title); presentation.slides[1].assertTitleBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .delete() void delete( ) Description Deletes the slide. PowerPoint.Presentation presentation; presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].delete(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .duplicate() PowerPoint.Slide duplicate( ) Description duplicates the slide. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].duplicate(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .setBackgroundColor() void setBackgroundColor( Color color ) Parameters color The color you are setting the background color to. Description Sets the slide's background color. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].setBackgroundColor(Color(1, 0, 0, .5)); //Sets the background color of the slide to Salmon."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Layout.html",
        "title": "FlexScript Class - PowerPoint.Layout",
        "content": "Description An enumeration of integer values associated with PowerPoint slide layouts. The PowerPoint.Layout values are used in the PowerPoint.Presentation. addSlide method to specify the layout the new slide will be created with. Static Properties blank = 12 Blank slide. custom = 32 Custom layout, defined by the template. text = 2 Has a title textbox with a large textbox below it. title = 1 Has a title textbox and a subtitle textbox. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .blank static readonly int blank = 12 Description Blank slide. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .custom static readonly int custom = 32 Description Custom layout, defined by the template. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .text static readonly int text = 2 Description Has a title textbox with a large textbox below it. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .title static readonly int title = 1 Description Has a title textbox and a subtitle textbox."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.ShapeType.html",
        "title": "FlexScript Class - PowerPoint.ShapeType",
        "content": "Description An enumeration of integer values associated with PowerPoint shape types. The PowerPoint.ShapeType values are return values to PowerPoint.Shape. type . Static Properties media = 16 Media type. picture = 13 Picture type. placeHolder = 14 Any object in a slide when the slide is added. table = 19 Table type. textBox = 17 TextBox type. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .media static readonly int media = 16 Description Media type. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .picture static readonly int picture = 13 Description Picture type. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .placeHolder static readonly int placeHolder = 14 Description Any object in a slide when the slide is added. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .table static readonly int table = 19 Description Table type. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .textBox static readonly int textBox = 17 Description TextBox type."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.SlideSizeType.html",
        "title": "FlexScript Class - PowerPoint.SlideSizeType",
        "content": "Description An enumeration of integer values associated with PowerPoint slide size types. The PowerPoint.SlideSizeType values are return values to PowerPoint.Presentation. slideSizeType . Static Properties 35MM = 4 35MM size. A3Paper = 9 A3Paper size. A4Paper = 3 A4Paper size. B4ISOPaper = 10 B4ISOPaper size. B5ISOPaper = 11 B5ISOPaper size. Banner = 6 Banner size. Custom = 7 Custom size. LedgerPaper = 8 LedgerPaper size. LetterPaper = 2 LetterPaper size. OnScreen16x10 = 16 OnScreen16x10 size. OnScreen16x9 = 15 OnScreen16x9 size. OnScreen4x3 = 1 OnScreen4x3 size. Overhead = 5 Overhead size. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .35MM static readonly int 35MM = 4 Description 35MM size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .A3Paper static readonly int A3Paper = 9 Description A3Paper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .A4Paper static readonly int A4Paper = 3 Description A4Paper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .B4ISOPaper static readonly int B4ISOPaper = 10 Description B4ISOPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .B5ISOPaper static readonly int B5ISOPaper = 11 Description B5ISOPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .Banner static readonly int Banner = 6 Description Banner size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .Custom static readonly int Custom = 7 Description Custom size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .LedgerPaper static readonly int LedgerPaper = 8 Description LedgerPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .LetterPaper static readonly int LetterPaper = 2 Description LetterPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .OnScreen16x10 static readonly int OnScreen16x10 = 16 Description OnScreen16x10 size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .OnScreen16x9 static readonly int OnScreen16x9 = 15 Description OnScreen16x9 size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .OnScreen4x3 static readonly int OnScreen4x3 = 1 Description OnScreen4x3 size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .Overhead static readonly int Overhead = 5 Description Overhead size."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/ProcessFlow/Token.html",
        "title": "FlexScript Class - Token",
        "content": "Description A class that represents a Process Flow token. Properties activity Gets a reference to the token's current activity. childRank Gets the rank of the child token. children Accesses the token's children. color Gets or sets the color of the token. entryTime Gets the model time of when the token entered its current activity. id Gets the token's unique ID. instance Gets the token's Process Flow instance. labelProperties Use your own named properties to get/set label values. labels Accesses a node's labels as nodes. name Gets and sets the token's name. parent Gets the token's parent. processFlow Gets the token's Process Flow object. stopCount Gets the number of stops for the token. Methods byID Gets the token associated with the id. release Releases the token from its current activity. resume Removes a stop from the token. setColor Deprecated. Use the color property. Sets the color of the token. setShape Sets the shape of the token. stop Adds a stop to the token Static Methods create Creates a token and places it inside the activity for the given owner object (instance). Details Do no remove, this fixes the anchor on doc.flexsim.com Token .activity readonly treenode activity Description Gets a reference to the token's current activity. treenode curActivity = token.activity; Do no remove, this fixes the anchor on doc.flexsim.com Token .childRank readonly int childRank Description Gets the rank of the child token. Returns 0 if the token has no parent. int childRank = token.childRank; Do no remove, this fixes the anchor on doc.flexsim.com Token .children readonly children Description Accesses the token's children. Accessing the Number of Children You can access the number of children on the token with the following code. token.children.length Accessing Children by Rank You can access an individual child token by rank with the following code. token.children[1] // first child token.children[token.children.length] // last child token.children[i] // i-th child Getting an Array of Objects You can get an Array of all child tokens with the following code. Array childTokens = token.children.toArray(); Do no remove, this fixes the anchor on doc.flexsim.com Token .color Color color Description Gets or sets the color of the token. The color set through this property overrides the default color defined in the Visualization settings. To restore a token to the default color settings, set this property to transparent black: token.color = Color(); Do no remove, this fixes the anchor on doc.flexsim.com Token .entryTime readonly double entryTime Description Gets the model time of when the token entered its current activity. double entryTime = token.entryTime; Do no remove, this fixes the anchor on doc.flexsim.com Token .id readonly int id Description Gets the token's unique ID. int id = token.id; Do no remove, this fixes the anchor on doc.flexsim.com Token .instance readonly treenode instance Description Gets the token's Process Flow instance. treenode instance = token.instance; Do no remove, this fixes the anchor on doc.flexsim.com Token .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. Works just like labelProperties on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com Token .labels readonly labels Description Accesses a node's labels as nodes. Works just like labels on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com Token .name string name Description Gets and sets the token's name. string name = token.name; token.name = \"Bottle\"; Do no remove, this fixes the anchor on doc.flexsim.com Token .parent readonly Token parent Description Gets the token's parent. Token parentToken = token.parent; Do no remove, this fixes the anchor on doc.flexsim.com Token .processFlow readonly treenode processFlow Description Gets the token's Process Flow object. treenode flow = token.processFlow; Do no remove, this fixes the anchor on doc.flexsim.com Token .stopCount readonly int stopCount Description Gets the number of stops for the token. This number increases with calls to the stop method, and decreases with calls to the resume method. Do no remove, this fixes the anchor on doc.flexsim.com Token .byID() Token byID( int id , Variant processFlow = NULL ) Parameters id The unique id number of the token. processFlow If no process flow is defined, this will search through every ProcessFlow object in the model. When there are multiple process flow objects you can pass in the process flow object (or name) where the token resides for a faster search. Description Gets the token associated with the id. Token's have their own unique id among all instances of all ProcessFlow objects. Token token = Token.byID(25); Token token = Token.byID(4, \"ProcessFlow1\"); Do no remove, this fixes the anchor on doc.flexsim.com Token .release() release( Variant connector ) Parameters connector If this is a number or a string, it identifies the connector to be released to. If it is an object, it directly references the new activity to \"jump\" to. Description Releases the token from its current activity. token.release(\"Failed\"); Do no remove, this fixes the anchor on doc.flexsim.com Token .resume() resume( ) Description Removes a stop from the token. Should only be called on stopped tokens. If this call removes the last stop, the token will re-enter its current activity, and proceed normally. Stops are added through calls to the stop method. Do no remove, this fixes the anchor on doc.flexsim.com Token .setColor() setColor( int red , int green , int blue , int alpha ) Parameters red The red color component [0 - 255]. green The green color component [0 - 255]. blue The blue color component [0 - 255]. alpha The alpha color component [0 - 255]. Description Deprecated. Use the color property. Sets the color of the token. This overrides the Token Colors functionality defined in the visual properties of the process flow object. token.setColor(255, 0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Token .setShape() setShape( int shapeIndex ) Parameters shapeIndex The index of the shape. Description Sets the shape of the token. This overrides the Token Shapes functionality defined in the visual properties of the process flow object. token.setShape(1); Do no remove, this fixes the anchor on doc.flexsim.com Token .stop() stop( ) Description Adds a stop to the token Usually, this method is called when the token is blocked in an activity, such as a Delay. In this case, the token will not leave the activity. The following table describes the effect of stopping the token in various activities, if the token was not previously stopped: Activity Effect of stop() Delay The token's exit time is postponed. Push To List The token's Push Value is removed from the list. Pull From List The token's back order is removed from the list. Enter Zone The token's request to enter the zone is destroyed. Acquire The token's request to acquire the resource is destroyed. Batch The token is remove from its batch. If it was the only token in the batch, the batch is destroyed. Wait for Event The token's listener for the specified event is destroyed. Synchronize/Join The token is removed from its wave. If it was the only token in the wave, the wave is destroyed. Travel The task sequence created by this activity is preempted. This is true for all Task Sequence activities. If the token is not currently blocked, it will stop as soon as it becomes blocked. The token will not continue until all stops have been removed from the token, through calls to the resume method. Stopped tokens are marked with a red octogon. Do no remove, this fixes the anchor on doc.flexsim.com Token .create() static Token create( treenode ownerNode , Variant activity , int start = 0 , Token parent = NULL , int labelAcess = 1 ) Parameters ownerNode The owner object of the process flow. For a General Process Flow this is the process flow object. For a Fixed Resource, Task Executer or Sub Flow, this is the attached object. activity This can be the activity node or the name of the activity. If this is the activity node in a General Process Flow, ownerNode may be NULL. start If start is 1, the token will immediately call the activity's start and begin moving through the process flow. If start is 0, the default, the token will sit in the activity until it is manually released. Calling the release method on the token will fire the activity's finish causing the activity's start to never be called. This may affect how the token responds to the activity it was created in. For example, if a token is created in an Assign Labels activity with a start of 1, the created token will evaluate the Assign Labels as if entering the activity and receive whatever labels are assigned to it. If a token is created in the same Assign Labels with a start of 0 and then later it is released, the token will never evaluate the Assign Labels and no labels will be assigned. parent If another token is specified here, the new token will be created as a child of this one. labelAccess This defines what access the child token has to its parent's labels. The possible access types are: TOKEN_LABEL_ACCESS_NONE TOKEN_LABEL_ACCESS_READ TOKEN_LABEL_ACCESS_READ_WRITE TOKEN_LABEL_ACCESS_READ_WRITE_ADD See the Create Tokens activity for more information about label access types. Description Creates a token and places it inside the activity for the given owner object (instance). Token aToken = Token.create(NULL, getactivity(\"ProcessFlow\", \"Start\"), 0); //General Process Flow Token newToken = Token.create(Model.find(\"Processor1\"), \"Start\", 0, aToken, TOKEN_LABEL_ACCESS_READ); newToken.Type = 1; newToken.release(0);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TableValidation/TableValidation.html",
        "title": "FlexScript Class - TableValidation",
        "content": "Description A class that represents a Table Validation. Methods validate Validates all tables, their rules and ranges defined in the TableValidation tool and returns the number of errors. Constructor TableValidation Creates a reference to a Table Validation tool. Details Do no remove, this fixes the anchor on doc.flexsim.com TableValidation .validate() int validate( treenode errorLoggingNode = 0 ) Parameters errorLoggingNode The treenode where the errors will be logged. If no treenode is passed in, errors will be printed to the system console. If the node has text data, the errors will instead be printed to the node's data. For other nodes (including bundle nodes) the node is treated as a Table . Each error is stored as a row in the table. Description Validates all tables, their rules and ranges defined in the TableValidation tool and returns the number of errors. Validates the data specified in the various ranges against the rules. The first 100 rule violations are logged as an error. The method returns the total number of errors encountered, even if they weren't logged. Example: return TableValidation(\"TableValidation1\").validate(); Do no remove, this fixes the anchor on doc.flexsim.com TableValidation Constructor TableValidation( string name ) Parameters name The name of a Table Validation tool in the Toolbox. Description Creates a reference to a Table Validation tool. TableValidation validator1 = TableValidation(\"TableValidation1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TableValidation/TableValidation.Context.html",
        "title": "FlexScript Class - TableValidation.Context",
        "content": "Description A class that represents a TableValidation Context. The context stores data that persists through the duration of a rule. Properties col Gets the column the value is in. endCol Gets the last column of the range. endRow Gets the last row of the range. errorMessage Gets/sets the errorMessage. isFirstCol returns a 1 if the column the value is in is the first column of the range. isFirstRow returns a 1 if the row the value is in is the first row of the range. isFirstValue returns a 1 if the value is the first value in the range. isLastCol returns a 1 if the column the value is in is the last column of the range. isLastRow returns a 1 if the row the value is in is the last row of the range. isLastValue returns a 1 if the value is the last value in the range. labels Accesses the context's labels as nodes. row Gets the row the value is in. startCol Gets the starting column of the range. startRow Gets the starting row of the range. table Gets table that is currently being validated. Methods addRegex Stores a regular expression by name in the context. valueMatchesRegex Compares the value against a stored regular expression in the context. Details Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .col readonly int col Description Gets the column the value is in. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .endCol readonly int endCol Description Gets the last column of the range. TableValidation.Context ctx = param(2); int endColumn = ctx.endCol; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .endRow readonly int endRow Description Gets the last row of the range. TableValidation.Context ctx = param(2); int endRow = ctx.endRow; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .errorMessage string errorMessage Description Gets/sets the errorMessage. The errorMessage is by default the Failure Message defined on the rule. It is what is displayed at the end of a logged error message. TableValidation.Context ctx = param(2); ctx.errorMessage = \"The value was not an integer\"; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isFirstCol readonly int isFirstCol Description returns a 1 if the column the value is in is the first column of the range. TableValidation.Context ctx = param(2); int isFirstCol = ctx.isFirstCol; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isFirstRow readonly int isFirstRow Description returns a 1 if the row the value is in is the first row of the range. TableValidation.Context ctx = param(2); int isFirstRow = ctx.isFirstRow; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isFirstValue readonly int isFirstValue Description returns a 1 if the value is the first value in the range. TableValidation.Context ctx = param(2); int isFirstValue = ctx.isFirstValue; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isLastCol readonly int isLastCol Description returns a 1 if the column the value is in is the last column of the range. TableValidation.Context ctx = param(2); int isLastCol = ctx.isLastCol; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isLastRow readonly int isLastRow Description returns a 1 if the row the value is in is the last row of the range. TableValidation.Context ctx = param(2); int isLastRow = ctx.isLastRow; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isLastValue readonly int isLastValue Description returns a 1 if the value is the last value in the range. TableValidation.Context ctx = param(2); int isLastValue = ctx.isLastValue; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .labels readonly labels Description Accesses the context's labels as nodes. Works just like labels on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .row readonly int row Description Gets the row the value is in. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .startCol readonly int startCol Description Gets the starting column of the range. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .startRow readonly int startRow Description Gets the starting row of the range. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .table readonly Table table Description Gets table that is currently being validated. TableValidation.Context ctx = param(2); Table table = ctx.table; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .addRegex() void addRegex( RegExp pattern , string name ) Parameters pattern The pattern of characters to look for, a regular expression. name The name of the pattern. Description Stores a regular expression by name in the context. TableValidation.Context ctx = param(2); ctx.addRegex(/^[a-zA-Z]$/, \"matchRegex\"); Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .valueMatchesRegex() int valueMatchesRegex( Variant value , string regexName ) Parameters value The value you are matching the regular expression to. regexName the name of the regex stored on the context using addRegex . Returns int If it matched. Description Compares the value against a stored regular expression in the context. Variant value = param(1); TableValidation.Context ctx = param(2); ctx.valueMatchesRegex(value, \"matchRegex\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/Dispatcher.html",
        "title": "FlexScript Class - Dispatcher",
        "content": "Inherits from Object Description A class that represents an Object with a task sequence queue, and implements logic to receive and dispatch TaskSequence s. Properties taskSequences Accesses the task sequences in the dispatcher's task sequence queue. This member can be accessed like an array of TaskSequence s. Details Do no remove, this fixes the anchor on doc.flexsim.com Dispatcher .taskSequences readonly taskSequences Description Accesses the task sequences in the dispatcher's task sequence queue. This member can be accessed like an array of TaskSequence s. Dispatcher disp = Model.find(\"Dispatcher1\"); int numTaskSequences = disp.taskSequences.length; for (int i = 1; i <= numTaskSequences; i++) { TaskSequence ts = disp.taskSequences[i]; ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/TaskExecuter.html",
        "title": "FlexScript Class - TaskExecuter",
        "content": "Inherits from Dispatcher Description A class that represents a Dispatcher that can also execute TaskSequence s. Properties activeTask Accesses the task that is currently being executed by the object. activeTaskSequence Accesses the task sequence that is currently being executed by the object. navigator Accesses the task executer's navigator, i.e. the object that manages travel tasks. Static Properties DefaultEndSpeed A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be whatever the default for that task and/or navigator is. MaxEndSpeed A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be the task executer's max speed. ZeroEndSpeed A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will always be zero. Details Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .activeTask readonly TaskSequence.Task activeTask Description Accesses the task that is currently being executed by the object. TaskExecuter obj = Model.find(\"Operator1\"); int taskType = obj.activeTask.type; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .activeTaskSequence readonly TaskSequence activeTaskSequence Description Accesses the task sequence that is currently being executed by the object. TaskExecuter obj = Model.find(\"Operator1\"); double tsPriority = obj.activeTaskSequence.priority; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .navigator readonly Navigator navigator Description Accesses the task executer's navigator, i.e. the object that manages travel tasks. Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .DefaultEndSpeed static readonly int DefaultEndSpeed Description A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be whatever the default for that task and/or navigator is. This is an alias for the value 0. For travel tasks, by default an end speed value of 0 generally means end at max speed, whereas for offset tasks (load, unload, travel relative, travel to loc, etc.) the value 0 means zero end speed. This alias essentially means use whatever is the default for the task. Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .MaxEndSpeed static readonly int MaxEndSpeed Description A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be the task executer's max speed. Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .ZeroEndSpeed static readonly int ZeroEndSpeed Description A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will always be zero."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/TaskSequence.html",
        "title": "FlexScript Class - TaskSequence",
        "content": "Description A class representing a sequence of tasks to be performed by a TaskExecuter . See Task Sequence Concepts for more information on task sequences. Properties currentTask Accesses the first task in the task sequence that has not yet finished execution. This task may be currently executing, or it may be waiting for execution because the task sequence itself is waiting for execution. labelProperties Use your own named properties to get/set label values. preempt Gets/sets the preempt value of the task sequence. priority Gets/sets the priority value of the task sequence. rank Gets/sets the rank of the task sequence in its task sequence queue. tasks Accesses the set of tasks in the task sequence. This member can be used like an array of TaskSequence.Task s. Methods addTask Adds a new task to the task sequence. dispatch Dispatches the task sequence. finish Marks the task sequence as finished. move Moves the task sequence into a new dispatcher's task sequence queue. Static Methods create Creates a new task sequence. Details Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .currentTask readonly TaskSequence.Task currentTask Description Accesses the first task in the task sequence that has not yet finished execution. This task may be currently executing, or it may be waiting for execution because the task sequence itself is waiting for execution. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int curTaskType = ts.currentTask.type; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. The TaskSequence class allows you to get and set custom named properties that will apply to labels on the task sequence. For example, if you want to set a label named \"MyLabel\" on the task sequence ts to a value of 5, you can write the following code: ts.MyLabel = 5; This will set the label's value to 5. If a label of that name does not exist, then it will be added to the object's labels. If you want to return the value stored in ts's \"MyLabel\" label, you can execute the following code: return ts.MyLabel; This works the same as the treenode class's dynamic property mechanism. See treenode. labelProperties for more information Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .preempt int preempt Description Gets/sets the preempt value of the task sequence. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int preempt = ts.preempt; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .priority double priority Description Gets/sets the priority value of the task sequence. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; double priority = ts.priority; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .rank int rank Description Gets/sets the rank of the task sequence in its task sequence queue. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int tsRank = ts.rank; // should be 1 ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .tasks readonly tasks Description Accesses the set of tasks in the task sequence. This member can be used like an array of TaskSequence.Task s. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int numTasks = ts.tasks.length; for (int i = 1; i <= numTasks; i++) { Task task = ts.tasks[i]; } Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .addTask() TaskSequence.Task addTask( int type , treenode involved1 = null , treenode involved2 = null , Variant var1 = nullvar , Variant var2 = nullvar , Variant var3 = nullvar , Variant var4 = nullvar ) Parameters involved1 The first involved object of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. involved2 The second involved object of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var1 The first variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var2 The second variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var3 The third variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var4 The fourth variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. Returns TaskSequence.Task The added task. Description Adds a new task to the task sequence. TaskSequence ts = TaskSequence.create(Model.find(\"Operator1\")); ts.addTask(TASKTYPE_LOAD, item, current); ... ts.dispatch(); Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .dispatch() void dispatch( ) Description Dispatches the task sequence. Calling this method initiates Dispatcher logic for receiving the task sequence and dispatching it as needed. If the object on whom the task sequence was created is a TaskExecuter and the TaskExecuter is not already executing another task sequence, then the object will immediately begin execution of the task sequence. TaskSequence ts = TaskSequence.create(Model.find(\"Operator1\")); ts.addTask(TASKTYPE_LOAD, item, current); ... ts.dispatch(); Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .finish() void finish( ) Description Marks the task sequence as finished. This method resets the waitForFinishState value of the task sequence to 0, and finishes the task sequence if it is currently waiting for more tasks to be added. Calling this method is only required if you previously passed a non-zero waitForFinishState value into TaskSequence . create (). Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .move() void move( Dispatcher dispatcher ) Parameters dispatcher The dispatcher to move the task sequence to. Description Moves the task sequence into a new dispatcher's task sequence queue. Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .create() static TaskSequence create( treenode obj , double priority = 0 , int preempt = 0 , int waitForFinishState = 0 ) Parameters obj Specifies the object in which to create the task sequence. Generally this should be a Dispatcher or TaskExecuter . In such a case, the task sequence will be created in the task sequence queue of the object. If the object is not a Dispatcher or TaskExecuter, then the task sequence will be created as a subnode of that object/node. priority Optional. Defines the priority value of the task sequence. preempt Optional. Defines the preempt value of the task sequence. If not zero, it should be one of the following values: PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, or PREEMPT_AND_ABORT_ALL. waitForFinishState Optional. Defines the state to go into if the task sequence reaches the end of its set of tasks, with no additional tasks added. If you pass 0 (default), the task sequence will simply be finished and destroyed when it reaches the end. When non-zero, the task sequence will add a TASKTYPE_WAITFORTASKS task and subsequently go into the defined state, waiting for a task to be added. If you pass a non-zero value here, then you must later call TaskSequence . finish () to notify the task sequence no longer needs to wait for new tasks. Returns TaskSequence The created task sequence. Description Creates a new task sequence. TaskSequence ts = TaskSequence.create(Model.find(\"Operator1\")); ts.addTask(TASKTYPE_LOAD, item, current); ... ts.dispatch();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/Navigator.html",
        "title": "FlexScript Class - Navigator",
        "content": "Description A class that represents a TaskExecuter 's navigator . In other words, the object that manages travel tasks for the task executer. Methods getCost A generic method that gets route costing information associated with a TaskExecuter traveling from some origin to some destination. Details Do no remove, this fixes the anchor on doc.flexsim.com Navigator .getCost() double getCost( Variant origin , Variant destination , Variant info ) Parameters origin Navigator-dependent parameter defining the origin. This can be the following: Default Navigator Task executer reference . Node Network Navigator Task executer reference Network node reference Reference to an object connected to a network node AGV Navigator Task executer reference Reference to a control-point-connected object AGV path reference Control point reference An array with up to three values: Task executer, path, control point or control-point-connected object An offset value representing an offset distance from that object on its associated path Boolean value defining whether or not a given AGV is oriented 'backward' on the path. 1 means backward, 0 or absent means forward. Note that the cost may be different for forward vs. backward oriented AGVs when the path system has orientation constraints defined, or if cost is speed-based and backward speed is different than forward speed. . A* Navigator Task executer reference Object reference An array of three numbers representing a x/y/z model location GIS Navigator Task executer reference GIS point reference Reference to an object connected to a GIS point destination Navigator-dependent parameter defining the destination. This can generally take the same values as the origin parameter, with the following exceptions: It should not be a reference to a TaskExecuter. For AGVs, a third array value (AGV orientation) is not used. info Navigator-dependent parameter to modify how the cost is calculated, as described below: AGV Navigator If this parameter is a reference to a TaskExecuter, it will assume that agv-dependent cost calculations are to be associated with that object traveling in its current state, most importantly its current load type. This is useful in calculating speed-based costs when speed is dependent on load type. GIS Navigator A value of 1 will return distance, a value of 2 will return duration, and a value of 3 will return general cost. Description A generic method that gets route costing information associated with a TaskExecuter traveling from some origin to some destination. The implementation of this method is polymorphic as it depends somewhat on which navigator it is being called on. For example, a default navigator's getCost() will only work if you pass a TaskExecuter as the origin, and some other object as a destination, and it will return the same result as if you were to call distancetotravel(). On the other hand, a network navigator can take a network node as an origin and a network node as a destination. In this case, the result is the same as calling getnetworkdistance()."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/SpecialParameters/Coroutine.html",
        "title": "FlexScript Class - Coroutine",
        "content": "Description An opaque class representing a paused coroutine. A Coroutine does not have any member methods or properties. It is only used to allow you to check whether a Variant reference to a node is a coroutine. Variant val = myNode.coevaluate(); if (val.is(Coroutine)) { await val; }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/SpecialParameters/lambda.html",
        "title": "FlexScript Class - lambda",
        "content": "Description Allows an expression to be passed in as a parameter without immediatly being evaulated. This class represents a FlexScript expression. Functions that accept these values store the expression passed in as a parameter, rather than the result of the expression. The function may evaluate the expression one or more times. During evaulation, the keyword count may be used to determine how many times the expression has been called. One method that accepts lambdas as parameters is the Table . query () method."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/SpecialParameters/RegExp.html",
        "title": "FlexScript Class - RegExp",
        "content": "Description Allows regular expressions to be used as function parameters. This class is used to provide a regular expression as a function parameter. Regular expressions are special character sequences that identify patterns in text. FlexSim uses the ECMA syntax for regular expressions. Several string methods accept RegExp values as input, including string . match , string . split , and string . search . For more information on regular expression syntax, see ECMAScript syntax ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.html",
        "title": "FlexScript Class - Storage",
        "content": "Description The storage namespace. Static Properties system Returns a reference to the Storage System object in the toolbox. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage .system static readonly Storage.System system Description Returns a reference to the Storage System object in the toolbox. For more information about the Storage System tool, see the Storage System topic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Bay.html",
        "title": "FlexScript Class - Storage.Bay",
        "content": "Description A class that represents a storage bay. A Bay is defined as the area between to vertical supports, and includes all levels between those two supports. Properties levels Accesses the bay's levels as an array of Storage.Level s. Methods areSlotLabelsEqual Returns whether a label value is the same for all slots on all levels within a bay. setSlotLabels Sets a label on all slots on all levels of the bay to the given value. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Bay .levels readonly levels Description Accesses the bay's levels as an array of Storage.Level s. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Bay .areSlotLabelsEqual() int areSlotLabelsEqual( string labelName ) int areSlotLabelsEqual( string labelName , Variant matchValue ) Parameters labelName The name of the label to check matchValue The value to compare with each slot label Returns int False if a label value is not the same for all slots within the bay, or if any of those values do not match the matchValue. Returns true otherwise. Description Returns whether a label value is the same for all slots on all levels within a bay. The specified label value is checked for each slot of the bay. If all label values do not match, then this method returns false. If a matchValue is provided, all label values must match the matchValue, or this function will still return false. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Bay .setSlotLabels() void setSlotLabels( string labelName , Variant value ) Parameters labelName The name of the label to set. value The value to give the label on each slot. Description Sets a label on all slots on all levels of the bay to the given value. If the label does not exist on any of the slots, this method will add the label and set the value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Item.html",
        "title": "FlexScript Class - Storage.Item",
        "content": "Description A class that includes properties and functionality associated with the storage and assignment of a flow item to Storage.Slot s. The Storage.Item class is primarily used for managing and retrieving the slots that a flow item is assigned to and/or stored in. The Storage.Item is NOT the same as the item object. In other words, you can't just set a Storage.Item to the item itself. Object item = param(2); Storage.Item storageItem = item; // RUN-TIME ERROR Instead, the Storage.Item is associated with , not the same as the item. To access the Storage.Item of a given flow item, use the Storage.Item () constructor. A Storage.Item holds data associated directly with the flow item itself. A Storage.Item should not be confused with a Storage.Slot.Item . The Storage.Item may have both a current slot (the slot that the flow item is currently stored in), and/or an assigned slot (the slot that the item has been assigned to be placed in). If the flow item has been placed in its assigned slot, and has not been assigned to any new slot, then its assigned slot is the same as its current slot. A Storage.Item may simultaneously have two associated Storage.Slot.Item s, namely one for its assigned slot, and one for its current slot. These can be accessed respectively with the assignedSlotItem and currentSlotItem properties. Properties assignedSlot The item's assigned slot. assignedSlotItem The Storage.Slot.Item associated with the item's assigned slot . currentSlot The item's current slot. currentSlotItem The Storage.Slot.Item associated with the item's current slot . state The current transit state of the item. Constructor Storage.Item Gets/Asserts the Storage.Item object associated with the given flow item. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .assignedSlot Storage.Slot assignedSlot Description The item's assigned slot. You can set this property to a specific slot through several methods: Find a slot in the storage system using Storage.System . findSlot (), and set assignedSlot to the result. Get a slot directly by its address, using Storage.System . getSlot (), and set assignedSlot to the result. Get a slot directly by its bay, level, and slot ID, using Storage.Object . getSlot (), and set assignedSlot to the result. Search through a Storage.Object 's bays, levels, and slots to find an appropriate slot, and set assignedSlot to the found slot. Directly set assignedSlot to NULL. This will put the item in an outbound state . Item searches using Storage.system. findItem () will skip over outbound items by default. Once you have assigned the item to a slot, move the item into the slot's storage object, either immediately or through some transit process. Once the item is moved into the storage object, its assigned slot will become its current slot . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .assignedSlotItem readonly Storage.Slot.Item assignedSlotItem Description The Storage.Slot.Item associated with the item's assigned slot . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .currentSlot readonly Storage.Slot currentSlot Description The item's current slot. The item's current slot is the slot that the item is currently stored in. You cannot directly set the item's current slot. Instead, you can do one of the following: Directly set the item's assignedSlot and then move the flow item (either immediately or through some transit process) into that slot's storage object. Here when the item is moved into the storage object, the assigned slot will be recognized and its assigned slot will become its current slot. Leave the assignedSlot property unassigned, and just move the flow item into a storage object. When the storage object receives the item, it will recognized that the item has no assigned slot, and will fire its slot assignment strategy, which should assign the slot. Then the item's assigned slot will become its current slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .currentSlotItem readonly Storage.Slot.Item currentSlotItem Description The Storage.Slot.Item associated with the item's current slot . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .state readonly int state Description The current transit state of the item. The state value is a function of the item's currentSlot and assignedSlot property values. Valid values are: Storage.Item.State . Unassigned Storage.Item.State . Inbound Storage.Item.State . Stored Storage.Item.State . Outbound Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item Constructor Storage.Item( treenode item ) Parameters item A flow item. Returns Storage.Item A Storage.Item object. If an associated Storage.Item does not already exist for the flow item, it will be automatically created. Description Gets/Asserts the Storage.Item object associated with the given flow item. A Storage.Item can only be accessed by calling this method. Casting from a treenode is not correct. Storage.Item storageItem = Storage.Item(item); // correct Storage.Item storageItem = item; // incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Item.State.html",
        "title": "FlexScript Class - Storage.Item.State",
        "content": "Description A class that enumerates the storage item states. Static Properties Inbound Storage item Inbound state. Outbound Storage item Outbound state. Stored Storage item Stored state. Unassigned Storage item Unassigned state. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Inbound static readonly int Inbound Description Storage item Inbound state. The assignedSlot property is set to a valid slot, but the currentSlot property is null. In other words, the item has been assigned to a slot, but has not yet arrived in the slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Outbound static readonly int Outbound Description Storage item Outbound state. The currentSlot property refers to a valid slot, but the assignedSlot property refers to different slot or null. In other words, the item has been stored in a slot, and has been reassigned, either to a different slot, or to null (it is about to exit the system). Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Stored static readonly int Stored Description Storage item Stored state. The assignedSlot and currentSlot properties are both set to the same slot. In other words, the item has been stored in a slot, and has not been assigned to any other slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Unassigned static readonly int Unassigned Description Storage item Unassigned state. Both the assignedSlot and currentSlot properties are null. In other words, the item is neither assigned to nor stored in a slot."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Level.html",
        "title": "FlexScript Class - Storage.Level",
        "content": "Description A class that represents a storage level within a bay. A Level is defined as the area of a Bay above the floor or above a horizontal support. Properties slots Accesses the level's slots as an array of Storage.Slot s. Methods areSlotLabelsEqual Returns whether a label value is the same for all slots within a level. setSlotLabels Sets a label on all slots of the level to the given value. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Level .slots readonly slots Description Accesses the level's slots as an array of Storage.Slot s. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Level .areSlotLabelsEqual() int areSlotLabelsEqual( string labelName ) int areSlotLabelsEqual( string labelName , Variant matchValue ) Parameters labelName The name of the label to check. matchValue The value to compare with each slot label Returns int alse if a label value is not the same for all slots within the level, or if any of those values do not match the matchValue. Returns true otherwise. Description Returns whether a label value is the same for all slots within a level. The specified label value is checked for each slot of the level. If all label values do not match, then this method returns false. If a matchValue is provided, all label values must match the matchValue, or this function will still return false. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Level .setSlotLabels() void setSlotLabels( string labelName , Variant value ) Parameters labelName The name of the label to set. value The value to give the label on each slot. Description Sets a label on all slots of the level to the given value. If the label does not exist on any of the slots, this method will add the label and set the value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Object.html",
        "title": "FlexScript Class - Storage.Object",
        "content": "Description A storage object , with functionality and data for storing items in a 2-dimensional grid of bays, levels, and slots Properties bays Accesses the object's bays as an array of Storage.Bay s. Methods areSlotLabelsEqual Returns 1 if all slot label values are equal to each other or to a defined value, otherwise 0. assignSlot Assigns the item a slot, using the object's slot assignment strategy. getSlot Gets a slot by its bay, level, and slot ID. setSlotLabels Sets a label on all slots of all bays and levels of the object to the given value. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .bays readonly bays Description Accesses the object's bays as an array of Storage.Bay s. Accessing the Number of Bays You can access the number of bays with the following code. current.bays.length Accessing Bays by Rank You can access an individual bay by rank with the following code. current.bays[1] // first bay current.bays[current.bays.length] // last bay current.bays[i] // i-th bay Bay Progression Bays progress according the object's Bay Progression property. If the bay progression is X+, then current.bays[1] accesses the bay with the smallest x location in object coordinates. For example, this would be the left-most bay when facing a rack's pick face . If the bay progression is X-, then current.bays[1] accesses the bay with the largest x location in object coordinates. This would be the right-most bay when facing a rack from its pick face. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .areSlotLabelsEqual() int areSlotLabelsEqual( string labelName ) int areSlotLabelsEqual( string labelName , Variant matchValue ) Parameters labelName The name of the target label for matching. matchValue If this parameter is included, it will only return 1 if all slot labels match this value. Returns int If all slot label values match, then 1, otherwise 0. Description Returns 1 if all slot label values are equal to each other or to a defined value, otherwise 0. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .assignSlot() Storage.Slot assignSlot( treenode item ) Parameters item The item you want to assign a slot to. Returns Storage.Slot The assigned slot if successful, null otherwise. Description Assigns the item a slot, using the object's slot assignment strategy. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .getSlot() Storage.Slot getSlot( Variant bayID , Variant levelID , Variant slotID ) Parameters bayID The ID of the bay. If the object does not have an Address Scheme , then the bay ID should be a number. Otherwise it may be a letter if the address scheme's bay identifier is a letter. levelID The ID of the level. If the object does not have an Address Scheme , then the level ID should be a number. Otherwise it may be a letter if the address scheme's level identifier is a letter. slotID The ID of the slot. If the object does not have an Address Scheme , then the slot ID should be a number. Otherwise it may be a letter if the address scheme's slot identifier is a letter. Returns Storage.Slot If the slot exists, the method returns that slot, otherwise NULL. Description Gets a slot by its bay, level, and slot ID. IDs are \"mapped\" in that they use the object's Start Bay/Level/Slot and Bay/Level/Slot Stride properties. For example, if an object has a start bay of 2, and a bay stride of 2, then passing 6 as bayID will retrieve the object's 3rd ranked bay (the 1st ranked bay is ID 2, the 2nd ranked bay is ID 4, the 3rd ranked bay is ID 6, etc.). Example: Storage.Item(item).assignedSlot = current.getSlot(item.BayID, item.LevelID, item.SlotID) This code assigns an item to the slot addressed by the item's \"BayID\", \"LevelID\", and \"SlotID\" labels. Example: Storage.Item(item).assignedSlot = current.getSlot(5, \"A\", 2) This code assigns an item to the slot addressed by bayID 5, levelID \"A\", and slotID 2. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .setSlotLabels() void setSlotLabels( string labelName , Variant value ) Parameters labelName The name of the label to set. value The value to give the label on each slot. Description Sets a label on all slots of all bays and levels of the object to the given value. If the label does not exist on any of the slots, this method will add the label and set the value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.QueryFlags.html",
        "title": "FlexScript Class - Storage.QueryFlags",
        "content": "Description Enumerates possible flags that can be passed as the flags parameter into Storage.System . findSlot (), Storage.System . querySlots (), Storage.System . findItem (), or Storage.System . queryItems (). By default Storage.System . findSlot (), and Storage.System . querySlots () will only look at storable slots. Similarly, Storage.System . findItem (), and Storage.System . queryItems () will exclude all inbound and outbound items by default. These flags allow you to better customize which slots/items should be queried. Each flag is a bit field, meaning different flags can be bitwise-ORed together to include/exclude the desired slots/items. Static Properties AllItems Valid only in findItem() and queryItems(). Signifies that all items should be included in the query. This value is a the same as QueryFlags.InboundItems | QueryFlags.OutboundItems . AllSlots Valid only in findSlot() and querySlots(). Signifies that all slots should be included in the query. This flag is the same as UnstorableSlots. ExcludeStorableSlots Valid only in findSlot() and querySlots(). Signifies that storable slots should be excluded from the query. ExcludeStoredItems Valid only in findItem() and queryItems(). Signifies that stored items (items that are neither inbound nor outbound) should be excluded from the query. InboundItems Valid only in findItem() and queryItems(). Signifies that inbound items should be included in the query. Limit1 Limits the results of querySlots() and queryItems() to a single result. findSlot() and findItem() forward to querySlots() and queryItems() respectively, automatically asserting this flag. As such, generally you do not need to use this flag, because you can just call findSlot() or findItem(). OutboundItems Valid only in findItem() and queryItems(). Signifies that outbound items should be included in the query. UnstorableSlots Valid only in findSlot() and querySlots(). Signifies that unstorable slots should be included in the query. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .AllItems static readonly int AllItems Description Valid only in findItem() and queryItems(). Signifies that all items should be included in the query. This value is a the same as QueryFlags.InboundItems | QueryFlags.OutboundItems . Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .AllSlots static readonly int AllSlots Description Valid only in findSlot() and querySlots(). Signifies that all slots should be included in the query. This flag is the same as UnstorableSlots. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .ExcludeStorableSlots static readonly int ExcludeStorableSlots Description Valid only in findSlot() and querySlots(). Signifies that storable slots should be excluded from the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .ExcludeStoredItems static readonly int ExcludeStoredItems Description Valid only in findItem() and queryItems(). Signifies that stored items (items that are neither inbound nor outbound) should be excluded from the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .InboundItems static readonly int InboundItems Description Valid only in findItem() and queryItems(). Signifies that inbound items should be included in the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .Limit1 static readonly int Limit1 Description Limits the results of querySlots() and queryItems() to a single result. findSlot() and findItem() forward to querySlots() and queryItems() respectively, automatically asserting this flag. As such, generally you do not need to use this flag, because you can just call findSlot() or findItem(). Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .OutboundItems static readonly int OutboundItems Description Valid only in findItem() and queryItems(). Signifies that outbound items should be included in the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .UnstorableSlots static readonly int UnstorableSlots Description Valid only in findSlot() and querySlots(). Signifies that unstorable slots should be included in the query."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Slot.html",
        "title": "FlexScript Class - Storage.Slot",
        "content": "Description A slot that is part of a storage object 's grid of storable slots. Properties address The slot's address. aisleID The slot's aisle ID. bay The slot's bay. bayID The slot's bay ID. isStorable 1 if the slot is a storable slot , 0 otherwise. labelProperties Use your own named properties to get/set slot label values. level The slot's level. levelID The slot's level ID. location The location of the bottom front left corner of the slot, in the local coordinates of its storage object. size The size of the slot. slotID The slot's slot ID. slotItems Accesses the array of Storage.Slot.Item s that are stored in or assigned to this slot. storageObject The slot's storage object. zoneID The slot's zone ID. Methods getLocation Gets a location within the slot. hasSpace Returns 1 if it calculates that there is enough space to place the passed item into the slot, 0 otherwise. restack Performs again the slot stacking algorithm on some or all items stored in the slot. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .address readonly string address Description The slot's address. If the slot's storage object has an Address Scheme , the slot's address is formatted according to that address scheme. Otherwise, the address will be formatted as follows: <StorageObjectName>-<BayNumber>-<LevelNumber>-<SlotNumber>. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .aisleID readonly Variant aisleID Description The slot's aisle ID. If the slot's storage object has an Address Scheme , the slot's aisle ID is formatted according to that address scheme. In other words, if the address scheme's aisles are addressed with a number, the aisle ID will be a number. Otherwise, the aisle ID will be a string. If there is no address scheme, the aisle ID will be blank. All slots in a given Storage Object use the Storage Object's aisle ID as their aisle ID. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .bay readonly Storage.Bay bay Description The slot's bay. Returns the bay that this slot belongs to. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .bayID readonly Variant bayID Description The slot's bay ID. If the slot's storage object has an Address Scheme , the slot's bay ID is formatted according to that address scheme. In other words, if the address scheme's bays are addressed with a letter, bayID will be a string, otherwise bayID will be a number. If there is no address scheme, bayID will be the bay number. Bay IDs are mapped according to the storage object's Start Bay and Bay Stride . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .isStorable readonly int isStorable Description 1 if the slot is a storable slot , 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .labelProperties Variant labelProperties Description Use your own named properties to get/set slot label values. The Storage.Slot class allows you to get and set custom named properties that will apply to labels on the slot. For example, if you want to set a label named \"SKU\" on a given slot to a value of 5, you can write the following code: slot.SKU = 5; This will set the label's value to 5. If a label of that name does not exist, then it will be added to the slot's labels. If you want to return the value stored in the slot's \"SKU\" label, you can execute the following code: return slot.SKU; For slot labels, you MUST access the label through this dynamic properties syntax. You should not use syntax that accesses label nodes directly in the tree (like slot.labels.assert(\"SKU\").value = 5; ). The storage system may manage an index of slot label values for quick lookup. This index is only updated properly when you use the dynamic property syntax to set label values. For more information, see treenode . labelProperties . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .level readonly Storage.Level level Description The slot's level. Returns the level that this slot belongs to. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .levelID readonly Variant levelID Description The slot's level ID. If the slot's storage object has an Address Scheme , the slot's level ID is formatted according to that address scheme. In other words, if the address scheme's levels are addressed with a letter, levelID will be a string, otherwise levelID will be a number. If there is no address scheme, levelID will be the level number. Level IDs are mapped according to the storage object's Start Level and Level Stride . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .location readonly Vec3 location Description The location of the bottom front left corner of the slot, in the local coordinates of its storage object. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .size readonly Vec3 size Description The size of the slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .slotID readonly Variant slotID Description The slot's slot ID. If the slot's storage object has an Address Scheme , the slot's slot ID is formatted according to that address scheme. In other words, if the address scheme's slots are addressed with a letter, slotID will be a string, otherwise slotID will be a number. If there is no address scheme, slotID will be the slot number. Slot IDs are mapped according to the storage object's Start Slot and Slot Stride . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .slotItems readonly slotItems Description Accesses the array of Storage.Slot.Item s that are stored in or assigned to this slot. Accessing the Number of Slot Items You can access the number of slot items with the following code. slot.slotItems.length Accessing Slot Items by Rank You can access an individual slot item by rank with the following code. slot.slotItems[1] // first slot item slot.slotItems[slot.slotItems.length] // last slot item slot.slotItems[i] // i-th slot item Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .storageObject readonly Storage.Object storageObject Description The slot's storage object. Returns the storage object that this slot belongs to. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .zoneID readonly Variant zoneID Description The slot's zone ID. If the slot's storage object has an Address Scheme , the slot's zone ID is formatted according to that address scheme. In other words, if the address scheme's zones are addressed with a number, the zone ID will be a number. Otherwise, the zone ID will be a string. If there is no address scheme, the zone ID will be blank. All slots in a given Storage Object use the Storage Object's zone ID as their zone ID. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The normalized target x location within the slot. Should be in the range 0-1. yFactor The normalized target y location within the slot. Should be in the range 0-1. zFactor The normalized target z location within the slot. Should be in the range 0-1. factors Encapsulates the x, y, and z factors into a single Vec3. Description Gets a location within the slot. This method is similar to Object . getLocation (). It returns a slot-relative location, in the storage object's local coordinates. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .hasSpace() int hasSpace( treenode item ) Parameters item The flow item that you want place into the slot. Returns int 1 if the slot calculates that there is enough space in the slot to place the item, 0 otherwise. Description Returns 1 if it calculates that there is enough space to place the passed item into the slot, 0 otherwise. The hasSpace() method uses the storage object's Slot Stacking Order property to \"simulate\" placing the item into the slot, taking into account the set of items that are already stored in or assigned to the slot. Once it has resolved where the item would be placed if it were to be stored in the slot, it checks if that placement is fully within the boundaries of the slot. If the placement is within the slot boundaries, the method will return 1, otherwise the method will return 0. Item Size and Rotation The item's current size and rotation are used in calculating the item's placement. The item's size and rotation are assumed to be the same as they will be when the item is eventually placed into the slot. This is important, especially for rotation, which often changes during the model run. If, when the item is finally placed into the slot, the item's rotation is different than when hasSpace() was called, then hasSpace()'s return value will have potentially been incorrect. To fix this, you should first set the rotation of the item to the rotation it will be in when it is placed in the rack, then call hasSpace(). You can then set its rotation back to whatever the item's current context requires. Assigned-Only Items When \"simulating\" the placement of the item to determine space availability, the slot will take into account not only the items that are already stored in the slot, but also the items that are assigned to the slot , but have not yet been stored in the slot. The slot will first virtually \"place\" the assigned-only items into the slot, in the order in which they were assigned to the slot. Then it will virtually place the currently querying item into the slot as if it entered the slot after all the other assigned items. Because of the virtual placement of assigned-only items, it is important to note that the hasSpace() method is only a heuristic. The result of hasSpace() assumes that the order in which assigned items will be placed into the slot is the same order as their assignment to the slot, and that the item's rotation and size are the same as when it will be placed in the rack. If these factors change, or if different-sized items are placed into the slot in a different order than their assignment order, then hasSpace() will have returned a value inconsistent with the actually reality of whether there is space in the slot after all assigned items have been placed. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .restack() void restack( int fromRank = 0 ) Parameters fromRank If non-zero, the slot will only start at the item at the defined rack, and restack from that point. Description Performs again the slot stacking algorithm on some or all items stored in the slot. For storage objects whose Slot Stacking Order only stacks along a single axis (and for Gravity Flow and Push Back Racks) the storage object will automatically restack when an item is picked from a position that would require a restack. For slot stacking orders that include multiple axes, however, the storage object does not automatically restack the slot when items are picked from a middle or front position. As such, you can manually restack the slot using this method."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Slot.Item.html",
        "title": "FlexScript Class - Storage.Slot.Item",
        "content": "Description A class that represents a storage slot item. A storage slot item is a record of an item that is either assigned to the slot, or is currently in the slot. If the item is virtual, the slot item holds the label values of the item. A slot item is created when an item is assigned to the slot. A slot item is destroyed when the item is no longer associated with the slot, meaning the item is not assigned to the slot, and it is not currently within the slot. Properties isVirtual Returns whether the current slot item is virtual. For more information on virtualization, see the Storage System topic. item Returns the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. labelProperties Use your own named properties to get/set label values. location Returns the location of the flowitem associated with this slot item, relative to the storage object. pickRank Returns the order that this item could be picked. This value depends on the item insertion order as well as the rack type. For example, the last item in a Floor Storage has a pickRank of 1. By contrast, the first item in a Gravity Flow Rack would have a pickRank of 1. rotation Returns the rotation of the associated flowitem. size Retursn the size of the associated flowitem. slot Returns the slot associated with this slot item. storageItem Returns the storage item for the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. Methods getLocation Gets the item's location, relative to the storage object. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .isVirtual readonly int isVirtual Description Returns whether the current slot item is virtual. For more information on virtualization, see the Storage System topic. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .item readonly Object item Description Returns the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. The Storage.Slot.Item class allows you to get and set custom named properties that will apply to labels on the item. Accessing items on a Storage.Slot.Item acts as a \"pass-through\" to accessing labels on the item itself. In other words, getting and setting labels on the Storage.Slot.Item is essentially the same as getting and setting labels directly on the flowitem object. The primary reason for accessing these labels via the Storage.Slot.Item is when the actual flowitem is virtualized. When the flowitem is virtual, the Storage.Slot.Item acts as its temporary store for labels. When the flowitem is later \"unvirtualized\" those labels will be restored to the flowitem, with any intervening changes in the label values reflected in the restored flowitem. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .location readonly Vec3 location Description Returns the location of the flowitem associated with this slot item, relative to the storage object. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .pickRank readonly int pickRank Description Returns the order that this item could be picked. This value depends on the item insertion order as well as the rack type. For example, the last item in a Floor Storage has a pickRank of 1. By contrast, the first item in a Gravity Flow Rack would have a pickRank of 1. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .rotation readonly Vec3 rotation Description Returns the rotation of the associated flowitem. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .size readonly Vec3 size Description Retursn the size of the associated flowitem. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .slot readonly Storage.Slot slot Description Returns the slot associated with this slot item. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .storageItem readonly Storage.Item storageItem Description Returns the storage item for the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The x value of the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). yFactor The y value of the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). zFactor The z value of the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). factors A vector representing the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). Returns Vec3 A vector holding the item's location. Description Gets the item's location, relative to the storage object. This code gets the item's location measured at its center. Vec3 centerLoc = storageItem.getLocation(0.5,0.5,0.5); Vec3 centerLoc = storageItem.getLocation(Vec3(0.5,0.5,0.5));"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.System.html",
        "title": "FlexScript Class - Storage.System",
        "content": "Description A class that represents a storage system. For more information on how to use the storage system, see the Storage System topic. Properties storageObjects Accesses all storage objects in the model as an array of Storage.Object s. Methods findItem Finds an item matching one of the given queries. findSlot Finds a slot that matches one of the given queries. getSlot Gets a slot by its address. queryItems Searches for all items that match the query. querySlots Searches for all slots that match a query. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .storageObjects readonly storageObjects Description Accesses all storage objects in the model as an array of Storage.Object s. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .findItem() Storage.Slot.Item findItem( Variant queries , int flags ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters queries One or more queries to use to find an item. One query can be passed in as a string. Multiple must be passed in an array. flags A bit field that may include Storage.QueryFlags values. $1-$5 Values passed in, which can be referenced in the queries. Returns Storage.Slot.Item A reference to the first matching slot item. If the search was unsuccesful, this value will be empty. Description Finds an item matching one of the given queries. This method evaluates each query until a slot item is found that matches. Only stored items are searched. '$' Keywords In composing the query, you can include the values $1 - $5. These values are associated with additional parameters that you pass into the query. Storage.system.findItem(\"WHERE SKU = $1 AND Size = $2\", 0, token.SKU, token.Size); 'item' Keyword The query parser will interpret 'item' is a special keyword that accesses the target item that is being evaluated, as a Storage.Slot.Item . This can be used to write normal flexscript expressions as part of the query. Storage.system.findItem(\"WHERE item.slot.SKU = $1\", 0, token.SKU); Accessing Label Names Other than the 'item' keyword and the '$' keywords, all other values in the query are interpreted to be labels on the evaluating flow item. For example, to search for items that have a Type label value of 5, you could use the following code: Storage.Slot.Item slotItem = Storage.system.findItem(\"WHERE Type = 5\"); If you are virtualizing items, then you should make sure those items are included in the list of item labels to save . Speed Considerations It should be noted that evaluating a label directly by its name effects a result no different than accessing it via the 'item' keyword. In other words, the two queries below will give the same result (assuming you are not virtualizing items). WHERE SKU = 5 WHERE item.item.SKU = 5 However, these two expressions can have different results in speed, especially when searching large storage systems. Accessing the SKU label directly (the first query above) will enable indexed lookup if you have indexed that label . On the other hand, using the expression 'item.item.SKU' will compile to a straight flexscript evaluation, which cannot be indexed. Thus, using the direct label access is preferable. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .findSlot() Storage.Slot findSlot( Variant queries , int flags ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters queries One or more queries to use to find a slot. One query can be passed in as a string. Multiple must be passed in an array. flags A bit field that may include Storage.QueryFlags values. $1-$5 Values passed in, which can be referenced in the queries. Returns Storage.Slot A reference to the first matching slot. If the search was unsuccesful, this value will be empty. Description Finds a slot that matches one of the given queries. This method evaluates each query until a slot is found that matches. Only storable slots are searched. '$' Keywords In composing the query, you can include the values $1 - $5. These values are associated with additional parameters that you pass into the query. Storage.system.findSlot(\"WHERE SKU = $1 AND Size = $2\", 0, token.SKU, token.Size); 'slot' Keyword The query parser will interpret 'slot' as a special keyword that accesses the target slot that is being evaluated, as a Storage.Slot . This can be used to write normal flexscript expressions as part of the query. Storage.system.findItem(\"WHERE slot.hasSpace($1)\", 0, token.Item); Accessing Label Names Other than the 'slot' keyword and the '$' keywords, all other values in the query are interpreted to be labels on the evaluating slot. For example, to search for slots that have a Type label value of 5, you could use the following code: Storage.Slot.Item slotItem = Storage.system.findItem(\"WHERE Type = 5\"); Speed Considerations It should be noted that evaluating a label directly by its name effects a result no different than accessing it via the 'slot' keyword. In other words, the two queries below will give the same result. WHERE SKU = 5 WHERE slot.SKU = 5 However, these two expressions can have different results in speed, especially when searching large storage systems. Accessing the SKU label directly (the first query above) will enable indexed lookup if you have indexed that label . On the other hand, using the expression 'slot.SKU' will compile to a straight flexscript evaluation, which cannot be indexed. Thus, using the direct label access is preferable. Indeed, in some cases it may be advantageous to avoid using the 'slot' keyword, and instead store desired values on labels on the slot, specifically to take advantage of indexed lookup. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .getSlot() Storage.Slot getSlot( string address ) Parameters address An address that can be interpreted by one of the address schemes. Returns Storage.Slot Description Gets a slot by its address. This method compares the address to each Address Scheme. If it matches, this method then tries to resolve the slot using the scheme. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .queryItems() Variant queryItems( string query , int flags ) Variant queryItems( string query , int flags , Variant $1 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 , Variant $3 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters query The query to run. flags A bit field that may include Storage.QueryFlags values. $1-$5 Extra parameters that can be referenced in the query. Returns Variant An array of Storage.Slot.Item values. Description Searches for all items that match the query. The method only considers items that are in the Stored state. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .querySlots() Variant querySlots( string query , int flags ) Variant querySlots( string query , int flags , Variant $1 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 , Variant $3 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters query The query to run flags A bit field that may include Storage.QueryFlags values. $1-$5 Extra paramemters that can be referenced in the query. Returns Variant An array of Storage.Slot values. Description Searches for all slots that match a query. This method only considers storable slots."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/CommandsIndex.html",
        "title": "Alphabetical Command Index",
        "content": "A - B - C - D - E - F - G - H - I - J - K - L - M - N - O - P - Q - R - S - T - U - V - W - X - Y - Z Do no remove, this fixes the anchor on doc.flexsim.com A a activateview activedocumentnode activedocumentview activeview addbundleentry addbundlefield addcommand addkinematic addsphere addsystemcontrolleritem addtoeventtypelegend addviewtext agvaddlistener agvinfo agvreassigncp agvredirect apchar applicationcommand applyalleditstonodes applyeditstonode applylinks applyshapefactors applytoedits asciistr assertvariable attlink autoloadallmedia autoloadimages autoloadshapes autoloadsounds avi Do no remove, this fixes the anchor on doc.flexsim.com B backupfile beginaggregatedundo beginignoreundo bernoulli beta bindtexture binomial break buildall buildnodeflexscript Do no remove, this fixes the anchor on doc.flexsim.com C c calculateconfidence callwebscriptmethod case cauchy cdir cempirical changedisplay changepersonvisuals checkdllconnection checkforexistingview classobject cleannodeflexscript clearbundle clearundohistory clickcode clientclose clientconnect clientcreate clientreceive clientsend closeallip closeallop closeip closenodeedge closeop closeview cm cmdcompile cmddelete cmdexit cmdloadbyextension cmdloadsession cmdloadtree cmdnew cmdopen cmdsaveas cmdsavesession cmdsavetree codetotemplate codetotemplatetext combocurrentnode comborefresh commandlineparam comparetrees consoleexecutefs contentunder contextdragconnection continue continueaggregatedundo controlpressed convert conveyorgetmotor conveyorinfo conveyorresumeitem conveyorsenditem conveyorsetspeed conveyorstopitem copyattributes copycolor copylabel copylabels copyvariable copyvariables copyvisuals cp cpaddlistener cpallocate cpconnection cpcpno cpdeallocate cpdistance cpisavailable cpnumconnections cptasksequencequeue createcoordinatedtasksequence createcoupling createevent createpopup createtickevent createtoken createundorecord createuserlibrary createview cubemap currentfile cursorinfo Do no remove, this fixes the anchor on doc.flexsim.com D daemonstate dataplot days deactivatekinematics debug default delayednodefunction delayevents delayeventsofobject deleteselected dempirical deselectall destroyevent destroyeventsofobject destroymessageevents dispatchcoordinatedtasksequence distancetotravel distcutoff distfromviewpoint documentsdir documentusercommands draginfo draw3dtext drawbox drawcolumn drawcube drawcylinder drawdisk drawflattext drawfont drawimage drawline drawobject drawpie drawquad drawrect drawrectangle drawshadow drawsphere drawspheres drawtext drawtomodelscale drawtoobjectscale drawtriangle dropnodefrom dropnodeto dropuserlibraryobject dropx dropy dropz duniform duplicateselected dynamicsplineall Do no remove, this fixes the anchor on doc.flexsim.com E else embedfile empirical emptyfluidobject enablecode endaggregatedundo endignoreundo endoffile endreplication erlang evaluatepullcriteria eventcode eventdata eventget eventlisten eventloginfo eventqty excelclose excelcreatesheet excelcreateworkbook exceldeleterange exceldeletesheet excelexporttable excelgetrangeparam excelgetrangesheet excelimporttable excellaunch excelmultitableexport excelmultitableimport excelopen excelquit excelrangereadnum excelrangereadstr excelrangewritenum excelrangewritestr excelreadcell excelreadnum excelreadstr excelsave excelsetrange excelsetsheet excelupdatepreferences excelversion excelwritenum excelwritestr executefsfile executefsnode executestring executesubflow exponential exportdataset exporttable extremevalue1a extremevalue1b Do no remove, this fixes the anchor on doc.flexsim.com F fastforward fastspline fastsplineall fastsplineupdate fglColor fgldebuglevel fglDisable fglEnable fglinfo fglLoadIdentity fglMatrixMode fglNormal fglPopMatrix fglPushMatrix fglRotate fglScale fglTranslate filebrowse fileclose fileexists fileisreadonly fileopen filereadline fillwithatts findownerobject findundorecordbyid finishundorecord firecreateevent flipselected fluidcontent fluidmaxcontent flyactive flyendnode flypath flypathadd flypathreset flystart flystop flyto flyupdate for forobjecttreeunder fpc fpd fpf fpm fpr fps fpt freeoperators fscheckall ft function_n function_s Do no remove, this fixes the anchor on doc.flexsim.com G gamma geometric getactiverole getactivity getallocatedfromkey getanimationvar getapplicationtitle getbatch getbundlefieldname getbundlefieldnr getbundlefieldtype getbundleindexentries getbundlenrentries getbundlenrfields getbundlevalue getcensus getchecked getchildtoken getchildtokenrank getcoordinatedtasksequence getcreationtime getcurrentundorecord getcurtask getdashboardcontrol getdatastat getdirbrowse getdrawtextmetric getedgedist getedgespeedlimit getentrytime geteventtime getfilebrowse getfilesindirectory getframe getiteminvolved getitemsendto getitemstate getitemvar getkinematics getlastacquiredresource getlastfiletype getlinecontrollerdata getmodelunit getnetnode getnetnodespline getnetworkdistance getnextnetnode getnextnetnodeoutport getnextparametersobject getnumpeopleresources getobjectshapeindex getobjecttextureindex getparenttoken getparentwindow getpath getpeopleresourceutilization getpickingdrawfocus getpickingmode getpreempt getpriority getprocessflowvar getproperty getreportnum getrunstate getsdtvalue getshapeindex getsoundindex getstat getstatetableutilization getstream getsystemmetric gettableviewselection gettenavigator gettenetnode gettenetworkinfo gettextureindex gettoken gettokenbyid gettokenid gettokens gettreedrawposition getundorecordid getutilizedobject getvarnode getvarnum getvarstr getviewhwnd getviewmenu getviewscale getviewtext glIsEnabled glLineWidth glPointSize go graphtohistogram groupconnectfrom groupconnectto groupcopyconnections groupsetnames Do no remove, this fixes the anchor on doc.flexsim.com H help hideprogressbar highestconnection highlightviewtext holditem hours howmanyattributes howmanycommands hypergeometric Do no remove, this fixes the anchor on doc.flexsim.com I i if importdataset importtable in inheritcode inititem initkinematics inputopen insertallocatetask insertcopy insertdeallocatetask insertproxytask insertsynctask integrityscan inversegaussian inverseweibull invertedweibull ip ipavailable ipopen ipopno ipready isclasstype isedgeforward iskeydown isprojectcompiled Do no remove, this fixes the anchor on doc.flexsim.com J johnsonbounded johnsonunbounded Do no remove, this fixes the anchor on doc.flexsim.com K keyboardfocus keyedclick Do no remove, this fixes the anchor on doc.flexsim.com L laplace lastclickednode lastkey lastkeydown lastkeyup library license licenseactivation listboxrefresh listenerinfo loadimage loadselectedfromfile loadstate loadthreedobject loaduserlibrary logarithmic logevent logistic loglaplace loglogistic lognormal2 Do no remove, this fixes the anchor on doc.flexsim.com M mainmenucommand maintenance maintree makeactive makehisto mediafile mediapath mediareset memberadd memberremove memberremoveall menubelow menucheck menugray menumain mergegetlanestate mergegetnumlanes mergeislaneclear mergereleaselane mesh meshaddindex meshaddvertex meshdraw meshinfo meshsetattrib meshsetvertexattrib minutes model modeldir modeleditmode moveobject moveselectedintohighlighted mpd mpf mph mpr mpt msg msgparam msgsendingobject Do no remove, this fixes the anchor on doc.flexsim.com N negbinomial netnodefromrank nodebreak nodefromwindow nodefunction nodefunctionlisten nodeinsertafter nodeinsertinto nodejoin normal notifylinecontroller numconnections Do no remove, this fixes the anchor on doc.flexsim.com O objectexists objectsoundcode opavailable openallip openallop openip opennodeedge openop opipno opopen opready optimizenetwork outputopen outputtreecontent ownerobject ownerview Do no remove, this fixes the anchor on doc.flexsim.com P param pareto parqty pdir pearsont5 pearsont6 pfile pickcolor pickcolornode pickedcolorblue pickedcolorgreen pickedcolorred pickfile picklistapply pickoffsetx pickoffsety pickoffsetz pickoptiononselect placeoffsetx placeoffsety placeoffsetz poisson popupmenu postclosewindowmessage postmovewindowupdate postwindowmessage print profileevents profilekinematics profiletasksequence programdatadir pullitem Do no remove, this fixes the anchor on doc.flexsim.com Q qstudentt Do no remove, this fixes the anchor on doc.flexsim.com R rackdrawfilledcell rackdrawvirtualcontent rackgetbaycontent rackgetbayloc rackgetbayofitem rackgetbaysize rackgetcellcontent rackgetcellvar rackgetitembybaylevel rackgetitemcellrank rackgetlevelloc rackgetlevelofitem rackgetlevelsize rackgetnrofbays rackgetnroflevels rackrecycleitem rackrestoreitem racksetcellcontent racksetcellvar randantithetic randinit randnext randomwalk randstate rankfromnetnode reacquirepreemptedresource realtime reassignnetnode reassignticker rebindobjectattributes receiveitem recover recycleitem redirectconsole redirectnetworktraveler redirectpicklists redo refreshcommandlist refreshglobalvariables refreshmodelcommands refreshview registereventtype releasebatch releaseitem releasetoken releasewave removeallcouplingreferences removebundleentry removefirstbundleentry removelastbundleentry reordertasks repaintall repaintallactive repaintview replacedata_n replacedata_s replacename report reportmode repositionhighlightededits requestdecision requestoperators rerankbesttask resetexperiment resetlayer resetmodel resetstats resetuniqueid resumetransportsin resumetransportsout return rotateselected rundocument runfunction runprogram runspeed Do no remove, this fixes the anchor on doc.flexsim.com S savebyname savemodelprepare saveselectedtofile savestate savestoppedtransportin savestoppedtransportout savetree scalekinematicstotime scrollinfo searchdata_n searchdata_s searchfornode searchname seconds select selectall selectedobject selectedx selectedy selectedz sendonactivatenotify sendwindowmessage serveraccept servercloseconnection serverclosemain servercreatemain serverreceive serversend setanimationvar setapplicationtitle setbundlevalue setcameradirection setcameravolume setchecked setcollisioncheck setcursor setdrawnamefunction setdropcoords seteventtime setframe setiteminvolved setitemsendto setitemvar setkinematicsrotoffset setmessageloopsleep setobjectbillboard setobjectshapeindex setobjecttextureindex setpickingdrawfocus setpreempt setpriority setprogressbar setproperty setresetposition setsdtvalue setselectedobject settableviewselection setticker settokencolor settokenshape setvarnum setvarstr setviewtext shapeinfo shiftpressed shiftscheduledownfunction showcompilerconsole showhelp showhtmlhelp showprogressbar simexec skip so socketend socketinit socketx soundchange soundload soundplay soundplayfile soundstop spacebase spacerotate spacescale spacetranslate spline splinedraw splinedrawextrusion splinelength splineposobject splinerx splinery splinerz splinex spliney splinez standardpreopen startlisten startuploadlibraries statsenablemask step stick stop stoplisten stoptime strascii stringcompare stringtoken suspenddraw sv swapnoderanks switch switch_cppfunc switch_destroyonreset switch_dllfunc switch_enablestats switch_expanded switch_flexscript switch_hashedlist switch_hidden switch_hideconnectors switch_hidecontents switch_hidelabel switch_hideshape switch_noselect switch_orphancoupling switch_preservecoupling switch_protected switch_selected switch_showobject switch_statelocked switch_stateused switch_variable system_cld system_clda system_cli system_clia system_cln system_clna system_cls system_cls system_clsa system_gld system_glda system_gli system_glia system_gln system_glna system_gls system_glsa system_ms system_sld system_slda system_sli system_slia system_sln system_slna system_sls system_slsa systemwindow Do no remove, this fixes the anchor on doc.flexsim.com T tabcontrolrefresh templatetocode textureaxis_s textureaxis_t thisclass toggleallcodestates tonode tonum toptr tostring tracemaskevents tracemaskobject tracemasktime trackpopup trafficcontrolinfo transfernodeobj transitionport transportincomplete transportoutcomplete triangular truncatemediapath Do no remove, this fixes the anchor on doc.flexsim.com U undo uniform unloadimage updatekinematics updatelocations updatereport updatestate updatestates updateundorecord uselisteners userdatadir userinput Do no remove, this fixes the anchor on doc.flexsim.com V validatename viewdist viewmenucommand views viewtofile Do no remove, this fixes the anchor on doc.flexsim.com W webcommand weibull while windowflash windowfromnode windowgray windowmenu windowmove windowredraw windowshow windowstyle wmp Do no remove, this fixes the anchor on doc.flexsim.com X Do no remove, this fixes the anchor on doc.flexsim.com Y Do no remove, this fixes the anchor on doc.flexsim.com Z zonecheckrequests zonegetpartitionvaluefortoken zoneistokeninsubset Deprecated acos add addfullhistorymoverecord addfullhistorystaterecord addlabel addtablecol addtablerow and angle anode anum aptr arraysize asin assertattribute assertlabel assertsubnode atan atan2 att att_s aviadd avifinish avistart bcgetitemkinematics bcgetitemposition bcsetdirection bcsetitemconveystate bitwiseand bitwisenot bitwiseor bitwisexor ceil cell cellrc cellrowcolumn centerobject changeconveyorspeed changetask clearconsole clearcontents clearfullhistory clearglobaltable closeinput closeoutput coloraqua colorarray colorblack colorblue colorbrown colorgray colorgreen colorlightblue colorlime colororange colorpink colorpurple colorrandom colorred colorrgb colorsilver colorteal colorwhite coloryellow comparetext concat connect containerentry containerexit content contentobj cos count cppgettoken cppsettoken createcopy createdelaytask createemptytasksequence createglobaltasksequence createinstance createloadtask createsendmessagetask createstandardtask createtravelloadtask createtraveltask createtraveltolocandwaittask createtraveltoloctask createtravelunloadtask createunloadtask createwaittask current dbchangetable dbclose dbexportnode dbexporttable dbgetfieldname dbgetmetrics dbgetmode dbgetnumcols dbgetnumrows dbgettablecell dbgettablenum dbgettablestr dbimportnode dbimporttable dbopen dbsettablecell dbsettablenum dbsettablestr dbsqlquery dbusername dbviewtable dbwritechanges defaultdragconnection degreestoradians deletetablecol deletetablerow dellabel destroyobject diffsign dispatchtasksequence div divide dumpquery enablefullhistory endwaittask eq excelexportnode excelimportnode excelmacro excelrangeread excelrangewrite excelread excelwrite executetablecell exp exportfullhistory fabs factorial familycreate familydelete familymember familymemberadd familymemberdel familymemberqty fillarray findmatch findmax findmin first floor fmod forobjecthighlightedin forobjectlayerunder forobjectsbefore forobjectsbehind forobjectselectionset frac ge get getcolorcomponent getdatatype getinput getitemtype getlabel getlabelnum getlabelstr getmodelunitnum getmodelunitstr getmoverecord getmoverecordvalue getname getnodename getnodenum getnodestr getnroftasks getnummoverecords getnumstaterecords getobjectimageindex getoutput getquerycolcount getquerymatchcount getquerymatchtablerow getqueryvalue getrank gets getstatenum getstaterecord getstaterecordvalue getstatestr gettablecell gettablecols gettableheader gettablenum gettablerows gettablestr gettaskinvolved gettasksequence gettasksequencequeue gettaskstate gettasktype gettaskvariable gettotalnroftasks gettrackedvariable getvartype glBegin glColor3d glColor4d glDisable glEnable glEnd glLoadIdentity glMatrixMode glNormal3d globallist glPopAttrib glPopMatrix glPushAttrib glPushMatrix glRotated glScaled glTexCoord2d glTranslated glVertex3d groupaddmember groupmember groupnummembers groupremovemember gt helpcommands hidelabel hideports inc inittrackedvariable inobject inserttask installpackage item iterate label last le listbackorders listentries listinlist listmax listmaximum listmean listmin listminimum listmul listpull listpush listremove listsub listsum loadsound local localarray log log10 lognormal lognormalmeanstdev lt main makearray max maxof min minof module movetablecol movetablerow movetasksequence mul multisorttable nametomodelpath ncols ne next node nodeadddata nodedeldata nodepoint nodetomodelpath nodetopath not nrcp nrip nrop nrows ntravelto ntraveltoupdate numtostring objectconnect objectshapecode objecttexcode openflexsimchart openglcolor opengllighting openinput openoutput or outobject parg parnode parstr particleset parval pc pd pf pi port pow pr prev pt query radianstodegrees rank rankobj reftable relloc repeat reset resumeanimation resumeinput resumeobject resumeoutput richeditaddtext richedittoken round runexpertfit savefpk senddelayedmessage sendmessage set setcenter setcolor setcurrent setitem setitemtype setlabel setlabelnum setlabelstr setloc setname setnodename setnodenum setnodestr setobjectimageindex setport setquerynode setrank setrot sets setsize setstate setstate_s settable settableheader settablenum settablesize settablestr settrackedvariable setundos showgraphicinfo sign sin sorttable spaceglobal spaceobject sqr sqrt startanimation statisticaltime stopanimation stopinput stopobject stopoutput store stringcopy stringlen stringpart stringreplace stringreturn stringsearch stringtonum stringtopchar strquote sub swaptablecols swaptablerows switch_hidebase tan time trackedvariable transfernode travelto traveltoupdate trunc undos up updateanimation updatetoolsmenu userfunction_n userfunction_s var var_s vectorprojectx vectorprojecty vectorprojectz xcenter xloc xrot xsize ycenter yloc yrot ysize zcenter zloc zrot zsize"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/Commands.html",
        "title": "Alphabetical Command Reference",
        "content": "$iter (num index) See User Manual > Miscellaneous Concepts > SQL Queries Description See Miscellaneous Concepts > SQL Queries for more information. Example a <no parentheses> Description This command is used to reference objects during iterations of certain flexscript commands such as forobjectlayerunder() and forobjecttreeunder(). This command does not require parentheses, and can only be used in C++. Example See forobjecttreeunder(). acos (num ratio) Deprecated, use Math.acos() Description This command is deprecated. Use Math . acos () instead. Gets the arccos of an angle in radians. Example activateview (obj viewnode) Description For developer use. This command makes a GUI window active and visible. It should be used to open a window that is stored in the view tree without creating a copy of the view in the active tree, in order to make direct changes that will be saved in the view tree instead of being deleted when the window is closed. Generally, the command createview() should be used to open GUI windows. Use makeactive() if you want to make an already open view the active, or top, window. Example activateview(views.find(\"standardviews/other/FindReplace\")); This opens the node called FindReplace in the folder called standardviews/other in the view tree. activedocumentnode () Gets the currently active document window Description Returns the currently active document window. If the active document window is a tabbed window, it will return the active tab page node. Example treenode activedoc = activedocumentnode(); activedocumentview () Gets the currently active document window as an HWND Description Returns the currently active document window as an HWND. To get the node associated with the window, use activedocumentnode(). Example treenode activedoc = nodefromwindow(activedocumentview()); activeview () Gets the currently active window as an HWND Description Returns the currently active window as an HWND. To get the node associated with the window, use nodefromwindow() Example treenode viewnode = nodefromwindow(activeview()); add (num value1, num value2) Deprecated, use the + operator Description This command is deprecated. Use the + operator instead. Addition of value1 to value2. This returns the result of the arithmetic expression value1+value2. Example double sum = add(1,2); addbundleentry (node datanode[, field1val, field2val, ...]) Adds a new entry to the bundle (base 0) Description Adds a new entry to the bundle (base 0). All fields must be added before adding entries. The optional field values will be added to the fields in the given order. Up to 29 field values can be given. For bundles with more fields, use setbundlevalue. Example int lastentry = addbundleentry(x, time(), current.subnodes.length); addbundlefield (node datanode, str fieldname, num type[, num maxstrsize]) Adds a field to the bundle Description Adds a field to the bundle with the given field name. Returns the field rank (base 0) of the added field. All fields for a bundle must be added before any entries are added. The type is a bitwise flag that must be one of the following values: BUNDLE_FIELD_TYPE_DOUBLE : stores a 64-bit double BUNDLE_FIELD_TYPE_FLOAT : stores a 32-bit float BUNDLE_FIELD_TYPE_INT : stores a 32-bit integer BUNDLE_FIELD_TYPE_STR : stores a string. If used, you should also define the maximum string size, which will be the space allocated for each string entry. If maxstrsize is unspecified, the default will be 32 bytes. The field will be able to store strings at least as long as the specified length, and any longer strings will be truncated. BUNDLE_FIELD_TYPE_VARCHAR: stores a string. This field type does not impose a limit on string length. This field type is recommended if you need variable string lengths, or if strings are frequently repeated. BUNDLE_FIELD_TYPE_NODEREF : stores a reference to a node BUNDLE_FIELD_TYPE_BINARY : stores a 1 or 0 as a single bit. Bits are allocated in blocks of 32, so that one binary field requires 32 bits. However, 32 binary fields can share a single block. You can optionally bitwise combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_INDEX_MAP. All values in this type of field will be indexed for quick lookup ( O(log n) ) using getbundleindexentries(). You can optionally combine BUNDLE_FIELD_TYPE_INT, BUNDLE_FIELD_TYPE_STR, BUNDLE_FIELD_TYPE_VARCHAR, or BUNDLE_FIELD_TYPE_NODEREF with BUNDLE_FIELD_INDEX_HASH. All values in this type of field will be indexed for quick lookup ( O(1) ) using getbundleindexentries(). This type of field is only recommended for use with bundles that rarely, if ever, change size while the model is running. You can optionally combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_NULLABLE, to allow those fields to contain null values. If a field is nullable, you can pass a null Variant in to setbundlevalue(), and it is possible to get a null Variant from getbundlevalue(). Example addbundlefield(x, \"Object Name\", BUNDLE_FIELD_TYPE_STR | BUNDLE_FIELD_NULLABLE, 64); addcommand (obj codenode, str commandname, str description, str parameters, str example [, str cppprefix, str shortdescription]) Description For developer use. Adds a Flexscript command to the current list of available commands. The new command is available until the next compile. The Tools | User Commands menu is for end-users to create their own commands. Example addcommand(...) addfullhistorymoverecord (num flowitemid, num time, obj origin, obj destination, num itemtype) Deprecated Description This command is deprecated. Adds a new entry to the Movement table that is recorded when Full History is enabled. The new entry records that the flowitem identified by flowitemid moved from the orgin object to the destination object and the specified time. The entry also records that the flowitem's itemtype at the time of the movement was the itemtype passed as the third parameter. Users should only have to use this command in very rare situations. Example addfullhistorymoverecord(getnodenum(uniqueid(item)), time(), current, current.outObjects[1], item.type); addfullhistorystaterecord (num time, num state, obj object) Deprecated Description This command is deprecated. Adds a new entry to the State table that is recorded when Full History is enabled. The new entry records that the specified object passed in as the third parameter changed to the specified state at the time that is entered as the first parameter. This should only need to be called if the object is having its state changed by soem command other than setstate(). Example addfullhistorystaterecord(time(), STATE_IDLE, current); addkinematic (node infonode, num x, num y, num z, num targetspeed, num acc, num dec, num startspeed, num endspeed, num starttime, num type ) Adds one kinematic operation to a set of kinematics Description Adds one kinematic operation to a set of kinematics. For more information, refer to the user manual documentation on kinematics. Example addkinematic(current.labels[\"kinematics\"], 1, 0, 0, 5,0,0, 0,0, time(), KINEMATIC_TRAVEL); addlabel (obj object, str labelname [, num/str value]) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode .LabelName or treenode . labels .assert() instead. Adds a label to object. Example addsphere (obj object, num x, num y, num z, num radius) Description For developer use. Adds a collision sphere with the specified radius to the specified object at location x, y, z relative to the object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed. Example addsphere(Processor1, 2, -1.25, .75, 1); addsystemcontrolleritem (obj systemcontroller, num productid, num linenum, num target, num starttime [, num newcolumn1, num newcolumn2, num newcolumn3, num newcolumn4]) For Dynamo use Description For Dynamo use. Adds a new line item to a SystemController's schedule during a model run. Does not actually add a new row to the table. The parameters are the same data that the SystemController's schedule requires. The newcolumn parameters are numbers that could have been added to each row of the SystemController's schedule table. Example addsystemcontrolleritem(current.centerObjects[1],0,1,1,0); addtablecol (str/num/node table [, num column, num datatype]) Deprecated, use Table.addCol() Description This command is deprecated. Use Table . addCol (). instead. Adds a column to a table. Example addtablerow (str/num/node table [, num row, num datatype]) Deprecated, use Table.addRow() Description This command is deprecated. Use Table . addRow () instead. Adds a row to a table Example addtoeventtypelegend (str name, num parameter, num value, str legendname) Description The eventtype legend allows you to associate a string with a given value for a given parameter in that eventtype. Passing a negative number for 'parameter' allows you to add a preceeding string to explain the parameter. If the 'parameter' is negative and the 'value' is -1, then it assumes the number is a pointer to a node and will display the node's path as a string. Example addtoeventtypelegend(index,-1,-1,\"resource: \"); // for p1, display the text \"resource: \" and display the path for the object addtoeventtypelegend(index,-2,0,\"covermode: \"); // for p2, display the text \"covermode: \" addtoeventtypelegend(index,2,1,\"YellowToGreen\"); // for p2, a value of 1 should display \"YellowToGreen\" instead of the number 1 addtoeventtypelegend(index,2,2,\"RedToGreen\"); // for p2, a value of 2 should display \"RedToGreen\" instead of the number 2 addtoeventtypelegend(index,3,0,\"\"); // for p3, this makes zeroes blank addtoeventtypelegend(index,4,0,\"\"); // for p4, this makes zeroes blank addviewtext (node view, string text) Description For developer use. Add text to the specified window. Example addviewtext(sv(),\"Hello\") agvaddlistener (obj agv, node listenernode, num flags[, ...]) Description Adds a listener event on the agv Example agvaddlistener(agv, c, AGV_LISTEN_PRE_ARRIVAL); agvinfo (obj agv, num what[, p1, p2, p3, p4]) Description Deprecated, use AGV class. Gets various information about an agv, based on the what parameter: AGV_CURRENT_CP - Returns the agv's current control point AGV_ORIGIN_CP - Returns the agv's origin control point AGV_INTERMEDIATE_DEST_CP - Returns the agv's intermediate destination control point AGV_DEST_CP - Same as AGV_INTERMEDIATE_DEST_CP AGV_FINAL_DEST_CP - Returns the agv's final destination control point AGV_DEST - Returns the agv's destination object AGV_BATTERY_LEVEL - Returns the agv's current battery level as a percentage of battery capacity (0 - 100) AGV_AMP_HOURS - Returns the agv's current battery level in amp hours AGV_START_RECHARGE - Starts the agv recharging. Returns the time it will take to recharge to full capacity. AGV_RECHARGE_TO_LEVEL - Explicitly set's the agv's battery level to p1 (0 - 100). AGV_ADD_ALLOC_POINT - Should be called from the travel initialization trigger. Manually adds a control point/control area for allocation, i.e. a control point or control area that would not otherwise need to be allocated as part of the agv's current travel path. The control point/control area is passed as p1, and the distance at which it must be allocated is passed as p2. The command will return a reference to a node that represents that allocation. Use AGV_SET_ALLOC_POINT_DEALLOC_DIST and AGV_SET_CAN_STOP_AT_ALLOC_POINT to specify further data on that allocation point. AGV_SET_ALLOC_POINT_DEALLOC_DIST - For a manual allocation point that's been added, this sets the travel distance at which the agv can deallocate the object. You should call this at some point after adding the allocation, so that the object will be properly deallocated. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is the deallocation distance. AGV_SET_CAN_STOP_AT_ALLOC_POINT - Sets whether or not the agv can stop at a manually added allocation point. The default is no, i.e. the agv will not stop at the stop distance, but will continue to the next stoppable point before attempting to allocate the object. Setting this to 1 will allow the agv to stop at the manual allocation point to allocate ahead. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is 1 or 0. AGV_ATTACH_TRAILER - Manually attaches a trailer to the AGV. p1: the object to attach. p2: the trailer gap to apply. p3: If 1, the trailer will be attached behind the AGV (attach to the AGV's tail), if 0, the trailer be attached ahead of the AGV (attach to the AGV's head). p4: If 1, the trailer will automatically be detached when the object exits the AGV, if 0, the trailer should be manually detached. AGV_DETACH_TRAILER - Manually detaches a trailer from the AGV. p1: the object that is attached as a trailer. AGV_SPEED - Returns the agv's current speed AGV_PROXIMITY_STATE - Returns 1 if the agv is blocked by proximity on an accumulating path, 0 otherwise. AGV_ACCUM_AHEAD_AGV - Returns the agv ahead of this agv on an accumulating path, if one exists. Example agvinfo(agv, AGV_DEST_CP); agvreassigncp (obj agv, obj controlpoint) Description Deprecated, use AGV class. Reassigns an agv to the specified control point Example agvreassigncp(agv, controlpoint); agvredirect (obj agv, obj object/controlpoint, num mode) Description Deprecated, use AGV class. Redirects the agv to the designated object/control point. mode can be one of the following values: REDIRECT_AND_WAIT - if not redirected before arrival, the agv will wait at the destination until redirected REDIRECT_AS_FINAL - the destination becomes the new final destination for the agv REDIRECT_AND_CONTINUE_ON_ARRIVAL - the agv will continue to the final destination after arriving at the intermediate destination REDIRECT_AND_CONTINUE_ON_PRE_ARRIVAL - the agv will continue to the final destination after pre-arriving at the intermediate destination (it will not decelerate to a stop) Example agvredirect(agv, controlpoint, 1); and (num/node condition1, num/node condition2) Deprecated, use the && operator Description This command is deprecated. Use the && operator instead.. Example angle (num dx, num dy) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Returns the angle in degrees, rotated clockwise from the positive x axis, of the vector (dx, dy). Calling angle(dx, dy) is the same as calling -Math.degrees(Math.atan2(dy, dx)). Example double myangle = angle(distx, disty) anode (thing) Deprecated, use tonode() Description This command is deprecated. Use tonode() instead. Assert type as node pointer. Example anode(so()) anum (thing) Deprecated, use tonum() Description This command is deprecated. Use tonum() instead. Assert type as arithmetic number. Example anum(so()) apchar (str string) Asserts string as a char* Description Assert type as C style string (e.g. char*). Alias for stringtopchar Example apchar(\"hello\") applicationcommand (str name[, p1, p2, p3, ...]) Description For developer use. Execute a command based on its name. This command will search for the named node in VIEW:/nodefunctions, then in MAIN:/project/exec/globals/nodefunctions, then in VIEW:/commands, and lastly in the FlexSim Engine. If it finds a toggled node, it will call nodefunction on that node passing in up to 10 number parameters. If it finds an untoggled node, it will call executefsnode() on that node passing in n1 as c, n2 as i, and n3 as eventcode. Example applicationcommand(\"outputconsole\"); applyalleditstonodes ([obj view]) Description For developer use. Applies all view edits. This is done before a compile or save. Example applyalleditstonodes applyeditstonode (obj view, obj editednode) Description For developer use. Applies view changes to a node. This is usually only needed for a table view, and is essentially the same as mouse-clicking off of the table's currently active cell. This is the opposite of applytoedits. Example applyeditstonode(ownerview(c), current) applylinks (node view [, num refresh]) Description For developer use. This command applies all of the hotlinks and coldlinks in the view window specified as view. If refresh is 1, then the links will be refreshed, meaning the values from the model will be retrieved and set on the window controls themselves. If refresh is 0, then the values in the model will be set according to what the user specified in the view. This command is used in Flexscript GUI programming. Example applylinks(ownerview(c)); This applies all of the links in the window that is currently designated as the selected view. applyshapefactors (obj object) Applies all of the shape factors to object Description This command applies all of the shape factors to the object if it has any. Example applyshapefactors(item); applytoedits (obj view, obj editednode) Description For developer use. Applies programmatic changes to a node if that node has been selected in a view. This is usually only needed for a table view. This is the opposite of applyeditstonode(). Example applytoedits(ownerview(c), current) aptr (thing) Deprecated, use toptr() Description This command is deprecated. Use toptr() instead. Assert type as pointer Example aptr(so()) arraysize (var array) Deprecated, use array.length Description This command is deprecated. Use Array . length instead. Gets the number of elements in an array. Example asciistr (str string [, num index]) Description This command returns the ascii value of the character at the specified index (0-based) of the string. If index is not specified, the first character of the string is used. Example asciistr(\"fred\",1) returns 114, the ascii value of 'r' asin (num ratio) Deprecated, use Math.asin() Description This command is deprecated. Use Math . asin () instead. Gets the arcsin of an angle in radians. Example assertattribute (obj object, str attributename, num datatype) Deprecated, use Object.attrs.assert() Description This command is deprecated. Use Object . attrs .assert(). Gets a reference to attribute attributename of object, creates the attribute if it does not exist. Example assertlabel (obj object, str labelname, num datatype) Deprecated, use treenode.labels.assert() Description This command is deprecated. Use treenode . labels .assert() instead. Gets a reference to label labelname, creating the label if it does not exist. Example assertsubnode (node containernode, str name[, num datatype]) Deprecated, use treenode.subnodes.assert() Description This command is deprecated. Use treenode . subnodes .assert() instead. Example assertvariable (obj object, str variablename, num datatype) Gets a reference to variable variablename of object, creates the variable if it does not exist Description This command returns a reference to a variable with the given name. If the variable does not exist, one is created with the defined data type. Example treenode newvar = assertvariable(Model.find(\"/Processor1\"),\"MyVariable\", DATATYPE_NUMBER); atan (num ratio) Deprecated, use Math.atan() Description This command is deprecated. Use Math . atan () instead. Gets the arctan of an angle in radians. Example atan2 (num dy, num dx) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Example att (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use var(), var_s() or getvarnode() instead. Example att(current,1) att_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the attribute node of an object by name. An attribute node is one which resides inside the \"variables\" node of the structure of an object. This function will return the pointer to the node called name inside the variables node of object. var_s supercedes this command. Example att_s(current,\"myatt\") attlink (node viewdatanode, str path) Description For developer use. Find a node by text path, relative to the view's objectfocus. This command will return the node on the path relative to the object focus of the ownerview of viewdatanode. For example, let viewdatanode be a node inside the structure of a view, such as an OnPress event node. Then, let the objectfocus of the parent view point to an object in the model called \"Processor\". Now, whatever is passed to the path argument of attlink() will be relative to the Processor object. So, if \">variables\" was passed to path in the attlink call, then attlink would return the pointer to \"variables\" of the Processor. If the node does not exist, attlink will return a null \"safenode\" which signals a failure to find the requested node. The return value can be tested for validity with the objectexists() command. Example attlink(so(),\">variables\") // where so() is data node inside view autoloadallmedia ([node thenode]) Description For developer use. This command loads all of the media (images and shapes) required by the current views, library, and model. Images are either .bmp or .jpg graphics files. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many images or shapes that need to be loaded. This command is not available in C++. Example autoloadallmedia(); This reloads all of the media needed for the current model. autoloadimages () Description For developer use. This command loads all of the images required by the current views, library, and model. Images are either .bmp or .jpg graphics files. This command may take some time to complete, if there are many images that need to be loaded. This command is not available in C++. Example autoloadimages(); This reloads all of the images needed for the current model. autoloadshapes () Description For developer use. This command loads all 3D shapes required by the current views, library, and model. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many shapes that need to be loaded. This command is not available in C++. Example autoloadshapes(); This reloads all of the shapes needed for the current model. autoloadsounds () Description For developer use. This command loads all sounds required by the current views, library, and model as declared by \"sound\" attributes on the objects. This command may take some time to complete, if there are many sounds that need to be loaded. This command is not available in C++. Example autoloadsounds(); This reloads all of the sounds needed for the current model. avi (int cmd, str filename, num tex, num frame) Not fully implemented Description Not fully implemented yet. Will eventually apply an avi video as a texture of a 3d object. Example aviadd (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avifinish (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avistart (str filename, node viewnode, num fps) Description This command is deprecated. Use the Video Recorder instead. Example backupfile (str filepath) Description For developer use. Backs up the file by appending a ! onto the specified file's name. Note that this doesn't copy the file. You would do this before an overwrite of a file. Example backupfile(modeldir() + \"mydocument.htm\"); bcgetitemkinematics (obj basicconveyor, obj item, num kinematictype {0-main kinematic : 1-time dependent : 2-convey dependent}) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcgetitemkinematics command is used to obtain a reference to one of the three kinematics associated with a flowitem traveling on a BasicConveyor: 0 = The main convey state kinematics. You may get kinematic information from this, but do not change the kinematic by adding kinematics or initializing it. 1 = A user-definable kinematics that is dependent on simulation time. 2 = A user-definable kinematics that is dependent on the convey position of the flowitem on the conveyor. The two user-definable kinematics are available for the user to set up customized kinematic motion in addition to traveling down the length of the conveyor. Use bcgetitemkinematics to get a reference to the desired kinematics node, and then use standard initkinematics() and addkinematic() commands as normal. You will need to use the alternative initkinematics parameter list: initkinematics(node, x, y, z, rx, ry, rz, managerots, localcoords). Also, if you add kinematics to the type 2 convey depend kinematic node, bear in mind that all time units for that kinematic no longer apply to actual simulation time units. Instead, they are interpretted as \"convey units\". For example, a speed of 5 is no longer 5 units per time unit, but is instead 5 units per conveyed unit. Acceleration is not distance per time squared, but distance per conveyed unit squared. Start times are no longer a time to start the kinematic, but a position along the conveyor to start the kinematic at. As an example, let's say you add a kinematic to the convey dependent kinematic node to travel 1 unit in the y direction with \"start time\" 5 and \"max speed\" 0.5. What that translates to for the convey dependent kinematic is that the item will start traveling in the y direction once it reaches 5 units along the conveyor. Also, for every unit that it travels down the length of the conveyor, it will travel 0.5 units in the y direction (0.5 y units per convey unit). Thus it will finish the y kinematic once it has travelled 7 units down the conveyor. If the item is blocked in the middle because of accumulation, say at convey position 6, then its y kinematic will also stop, and not resume until the item resumes along the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example treenode kin = bcgetitemkinematics(current, item, 2); treenode kin2 = bcgetitemkinematics(current, item, 1); initkinematics(kin, 0,0,0, 0,0,0, 0,0); addkinematic(kin, 0,1,1,0.5,1,1,0,0, 5, KINEMATIC_TRAVEL); initkinematics(kin2, 0,0,0, 0,0,0, 0,0); addkinematic(kin2, 0,0,720,360,0,0,0,0, time()+5.0, KINEMATIC_ROTATE); bcgetitemposition (obj basicconveyor, obj item) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object The bcgetitemposition command returns the current position of an item on a BasicConveyor object. The position is measured along the conveyor's length from the head of the conveyor to the flowitem's edge furthest from the head of the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcgetitemposition(current,current.first); bcsetdirection (obj basicconveyor, num direction) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcsetdirection command stops all flowitems on the conveyor and sets the direction of travel to 1=forward and 0=reverse. All flowitems will need to have their convey state reset with the bcsetitemconveystate() command before they will begin moving again. The example below shows how to stop the conveyor, and then have all the flowitems accelerate up to a speed of 1 in the reverse direction. Any additional item kinematics will still be active after a direction change. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcsetdirection(so(),0); for(int i = 1; i <= so().subnodes.length; i++) { treenode item = so().subnodes[i]; bcsetitemconveystate(so(), item, bcgetitemposition(so(), item), 0, 1, 0.2); } bcsetitemconveystate (obj basicconveyor, obj item, num startpoint, num startspeed, num targetspeed, num accdec) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The BasicConveyor object allows flowitems to be moved in and out of the conveyor at any time and at any location. Each flowitem on the BasicConveyor can be assigned and re-assigned its own kinematic profile defining how the flowitem is to move along the conveyor. When one flowitem overtakes another flowitem on the conveyor which is either stopped or traveling at a slower speed, it will slow down immediately to match that flowitem's speed. Although flowitems may travel in either direction along the conveyor, all flowitems will travel in the same direction at any given time. The travel direction of the conveyor is set with the bcsetdirection() command. As flowitems are moved in and out of the conveyor, other flowitems on the conveyor are aware of the increase or decrease in available space along the conveyor, and will accumulate naturally. After a flowitem enters the conveyor, either indirectly with the receiveitem() command or directly with the moveobject() command; it is necessary to define the flowitem's initial kinematic profile. This profile is refered to as the flowitem's \"convey state\", and it is set with the bcsetitemconveystate() command. The convey state for a flowitem can be set multiple times if desired. The following are definitions for the parameters used to define the convey state of a flowitem: basicconveyor = A reference to the conveyor. item = A reference to the flowitem. startpoint = The starting location for the flowitem as measured from the beginning of the conveyor, along the conveyor's length to the flowitem's edge furthest from the head of the conveyor (the leading edge if the conveyor's direction is forward, the trailing edge if the conveyor's direction is backward). startspeed = The initial speed the flowitem will begin traveling at. targetspeed = The target speed the flowitem will try to achieve. If the targetspeed is greater than the startspeed, then the flowitem will accelerate up to the target speed; otherwise it will decelerate down to the target speed. If both the startspeed and the targetspeed are set to 0, the flowitem will be positioned at the startpoint, and will not move. accdec = The acceleration or deceleration used to achieve the target speed over time. A value of 0 indicates infinite acceleration/deceleration; or in other words the flowitem will reach it's targetspeed immediately. No destination or termination speed is required, because the flowitems continue traveling along the conveyor until they either reach the end of the conveyor, run into another flowitem, or their convey state is changed again. The BasicConveyor allows multiple \"Decision Points\" to be defined along its length. These trigger points are convenient locations to update the convey state of a flowitem. In addition to the main convey state kinematic assigned to the flowitem with the bcsetitemconveystate() command, a flowitem has two other kinematic structures associated with it that may be used to apply custom kinematic motion (translation or rotation) in addition to the travel motion along the conveyor. One of the kinematic structures is based on simulated time units, and the other is based on distance units along the length of the conveyor. To access these kinematic structures, use the bcgetitemkinematics() command, then use the initkinematics() and addkinematic() commands to create the custom kinematic motion desired. See bcgetitemkinematics() command documentation for more information. Example bcsetitemconveystate(current, item, position, 0, 60, 0); beginaggregatedundo (obj view, str description) Description Begins an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the next endaggregatedundo() command will be encapsulated into a single undoable operation. Returns the id for the created record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = beginaggregatedundo(c.find(\"@/TheTable\"),\"Name Change\"); beginignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example beginignoreundo(); bernoulli (num prob, num succeed-value, num fail-value[, num stream]) Returns one of two possible values, based on the given probability Description bernoulli( p , a , b , stream ) is a discrete probability distribution. Inputs: p is the probability that a will be returned; where p ∈ ( 0, 100 ) 100 − p is the probability that b will be returned. a ∈ ( - ∞, ∞ ) b ∈ ( - ∞, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , b } mean = ( a p + b (100− p ) ) ⁄ 100 variance = ( p ⁄ 100)(1 − p ⁄ 100) when a =1 and b =0 Possible Applications: Used to model a random occurrence that has two possible outcomes such as a pass/fail test. It is possible to generate more than two values by nesting bernoulli commands; however, it is better to use empirical distributions in these cases. Comments: The bernoulli( p , 1, 0) and binomial(1, p ) distributions are the same. Example treenode curoperator = current.centerObjects[bernoulli(90,1,2,1)]; The bernoulli command in this example has a 90 percent probability of returning 1 otherwise it will return 2, using random number stream 1. It is used within a centerObject reference such that 90 percent of the time curoperator references the object connected to center port 1 of the current object, otherwise curoperator references the object connected to center port 2. beta (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a beta distribution Description beta( a , b , α 1 , α 2 , stream ) is a bounded continuous probability distribution. Inputs: a is the lower-endpoint parameter ∈ ( - ∞, ∞ ) b is the upper-endpoint parameter( b > a ) α 1 is the 1 st shape parameter ( 0, ∞ ) α 2 is the 2 nd shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( a , b ) mean = a + α 1 ( b − a ) ⁄ ( α 1 + α 2 ) variance = α 1 α 2 ( b − a )² ⁄ ( α 1 + α 2 )²( α 1 + α 2 + 1) Probability Density Functions: Possible Applications: The beta distribution is often used to model task durations in the absence of real data because it can be definitively bounded between a minimum and maximum value, and it can take on a number of different probability density shapes depending on the two shape parameters used. For most real world task durations, the density shape will have a longer right tail than a left, so if you know the mean μ and the mode (most likely value) m , you can back calculate suitable shape parameters with the following equations: α 1 ≅ ( μ − a )(2 m − a − b ) ⁄ ( m − μ )( b − a ) α 2 ≅ α 1 ( b − μ ) ⁄ ( μ − a ) Comments: The beta( a , b , 1, 1) and uniform( a , b ) distributions are the same. The density is symmetric about ( a + b ) ⁄ 2 when α 1 = α 2 . The density will have a hump and longer right tail when α 2 > α 1 > 1. The mean and mode are equal when α 1 = α 2 > 1. Example double ptime = beta(8, 12, 1.3, 3, 5); The ptime variable is set equal to a beta distribution having a minimum value of 8, a maximum value of 12, and shape factors of 1.3 and 3 for α 1 and α 2 respectively. FlexSim's random stream number 5 will be used to generate variates from the distribution. The distribution density will have a nice humped curve with a long right tail. bindtexture (num textureid) Description This function is used in an OpenGL call sequence. When OpenGL commands are being used to draw a scene, this command will bind the texture loaded into FlexSim with the index textureid. Once bound, a texture will be used to render any polygons drawn subsequently. Texture mapping is the application (or mapping) of an image (or texture) to the surface of a polygon or other graphics primitive. Example bindtexture(10) Use loaded texture with index number 10 for rendering any subsequent polygons binomial (num trials, num prob[, num stream]) Returns a random sample from a binomial distribution Description binomial( t , p , stream ) is a discrete probability distribution used to represent the number of successes in t independent Bernoulli trials with probability p of sucess on each trial. Inputs: t is the number of independent trials { 1, 2, ..., ∞ }. p is the probability of success for any given trial (0, 100) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { 0, 1, 2, ..., t } mean = t p ⁄ 100 variance = t ( p ⁄ 100 )( 1 − p ⁄ 100 ) Possible Applications: The binomial distribution is useful for modeling the number of defective parts in a batch of size t , or the actual number of people in random size groups, or maybe the number of items ordered from inventory. Comments: The binomial(1, p ) and bernoulli( p , 1, 0 ) distributions are the same. The binomial( t , p ) distribution is symmetric when p = 50 percent. Example int fparts = binomial(item.batchsize, 10, 5); The number of failed parts will be written to the fparts variable based on a 10% probability that any given part will fail within a batch quantity defined by a label on the flowitem named \"batchsize\". FlexSim's random stream number 5 will be used to generate variates from the distribution. bitwiseand (num a, num b) Deprecated, use & operator Description This command is deprecated. Use & operator instead. Returns a bitwise AND operation on the two 32 bit integer values. Example int bwa = bitwiseand(0x460, 0x040); This example sets bwa to the value 0x020. bitwisenot (num a) Deprecated, use ~ operator Description This command is deprecated. Use ~ operator instead. Returns the bitwise not of the 32 bit integer value Example int bwn = bitwisenot(0x0); This example sets bwn to the value 0xffffffff bitwiseor (num a, num b) Deprecated, use | operator Description This command is deprecated. Use | operator instead. Returns the bitwise OR of the 32 bit integer values Example int bwo = bitwiseor(0x15, 0x01); This example sets bwo to the value 0x15 bitwisexor (num a, num b) Deprecated, use ^ operator Description This command is deprecated. Use ^ operator instead. Returns the bitwise XOR of the 32 bit integer values Example int bwxo = bitwisexor(0x15, 0x01); This example sets bwxo to the value 0x14 break Description Break out of a loop or the case of a switch statement {} Example break; buildall () Description For developer use. This command builds Flexscript trees for all of the nodes in the tree that are designated as Flexscript nodes. A Flexscript node must have a Flexscript tree made before it can run. This option is available in the main menu under Build -> Build All Flexscript. This must be done before running a model with Flexscript written anywhere in it. It should also be done after making any changes to GUIs. Example buildall(); This builds Flexscript trees for all Flexscript nodes in the tree. buildnodeflexscript (node codenode) Description For developer use. This command builds Flexscript trees for the node specified as node if it is designated as a Flexscript node. A Flexscript node must have a Flexscript tree made before it can run. Example buildnodeflexscript(Table(\"mytable\").cell(1,2)); This builds a Flexscript tree for the node at row 1 column 2 of the GlobalTable named \"mytable\", if it is a Flexscript node. c <no parentheses> Description This command is used to reference the active node during a function's execution. If the function was called using nodefunction(), c returns a reference to the node on which the function is written. If the function is an event function, c returns a reference to the object that contains the event. Example treenode current = ownerobject(c); calculateconfidence (num stddev, num nrofdatapoints, num confidence) Description For developer use. Calculates the confidence interval for the given standard deviation and number of data points. The return value is the distance on one side of the interval from the sample mean. This uses the t distribution to calculate the confidence interval. Confidence values must be either 90, 95, or 99. This is used in the experimenter to calculate the confidence intervals for the mean of performance measures for each scenario. Example calculateconfidence(5.82, nrofsamples, 90) callwebscriptmethod (obj view, str domid, str methodname, int type [, num/str data ...]) Description Call a method on a DOM element in the HTML document of an HTML view. You must define the type of data of any parameters that are to be passed into the method. The following types are available: CWSM_DOUBLE CWSM_STRING CWSM_NODE CWSM_BUNDLE CWSM_BUNDLE_HEADER CWSM_BUNDLE_DATA CWSM_JSON The last parameter passed into the method must be CWSM_END. When using the CWSM_JSON type, the json string must start with json:. For example, json:{\"title\":\"My Title\"} Example callwebscriptmethod(view, \"chart\", \"updateData\", CWSM_DOUBLE, time(), CWSM_NODE, getvarnode(current, \"data\"), CWSM_STRING, \"My Title\", CWSM_END); This examples calls the method named updateData on the element with id \"chart\". case value: Description One case in a switch statement {} Example case 5: { msg(\"case statement\",\"\"); } cauchy (num location, num scale[, num stream]) Returns a random sample from a cauchy distribution Description Generates a continuous random variate from a cauchy distribution with parameters as defined. Example cdir () Description Returns a string of the path to FlexSim's install directory. Example string userpath = cdir(); For a standard installation this will return C:\\Program Files\\Flexsim3\\ ceil (num num) Deprecated, use Math.ceil() Description This command is deprecated. Use Math . ceil () instead. Gets the smallest integral value not less than num. Example cell (node table, num col, num row) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Example cellrc (obj object, num row, num col) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Gets a reference to the table's cell. Example double val = getnodenum(cellrc(reftable(\"MyTable\"),2,3)); cellrowcolumn (node table, num row, num col) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example cempirical (str/node/num table[, num stream]) Returns a random sample from a continuous empirical distribution Description A continuous empirical distribution with percentages and values defined in the table specified. Empirical distributions reference tables created by the user that contain a list of values and probability percentages associated with each value. Probability percentages must be entered in column 1 starting with row 1 of the table, and the associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. There are three commands in FlexSim that can be used to generate random variates from the empirical distributions defined in tables. The three commands are dempirical(), empirical() and cempirical(). The first one is a discrete distribution and will return the explicit values listed in the table. The next two are bounded continuous distributions, meaning they return a continous number within a range. The values in column 2 for the continuous distributions must be in ascending order because they will interpolate values between two adjacent values in the table. Let's assume we have a table with 4 rows and 2 columns. In column one are the percentages 10, 20, 30 and 40 adding up to 100 percent. In column two are the values 0.1, 0.2, 0.3 and 0.4. Now let's see the differences between the discrete empirical command and the two continuous empirical commands. The discrete command will only generate random variates that match exactly the values that were entered into column two of the table. The continuous commands will generate random variates that are real numbers uniformly distributed between two adjacent numbers in column two of the table. The difference between the two continuous commands is in how the bounds of the uniform ranges are defined. The command dempirical(\"mytable\") will return the number 0.1 for ten percent of the samples, the number 0.2 for twenty percent of the samples, the number 0.3 for thirty percent of the samples, and the number 0.4 for forty percent of the samples assuming a very large sample set. The command empirical(\"mytable\") will return a number uniformly distributed between 0.1 and 0.2 for ten percent of the samples, a number uniformly distributed between 0.2 and 0.3 for twenty percent of the samples, a number uniformly distributed between 0.3 and 0.4 for thirty percent of the samples and a number uniformly distributed between 0.4 and 0.4 for forty percent of the samples. If you want the last forty percent to be between 0.4 and 0.5 instead of 0.4, add a 5th row with column one being a value of 0 and column two being 0.5 or the desired upper bound. The command cempirical(\"mytable\") will return a number uniformly distributed between 0.0 and 0.1 for ten percent of the samples, a number uniformly distributed between 0.1 and 0.2 for twenty percent of the samples, a number uniformly distributed between 0.2 and 0.3 for thirty percent of the samples and a number uniformly distributed between 0.3 and 0.4 for forty percent of the samples. You can define a lower bound for the first ten percent to be a value different than 0.0 by adding a row to the beginning of the table (row 1) where column one is a value of 0 and column two is 0.05 or the desired lower bound. Here is a summary in tabular form showing the possible return values (\"x\") for each of the three distribution functions: Here is an example of adding a \"dummy\" first row so that cempirical() starts at 0.05 instead of 0.0 (notice that row 1 has a probability of 0 percent): Here is an example of adding a \"dummy\" last row so that empirical() has a range between each value including the last (any number can be entered for the percent of the last row because the percents already add up to 100% with the previous row, so it doesn't matter what it is): When using ExpertFit to determine an empirical distribution that matches your data, you need to be aware that if your data has been defined as integers, then ExpertFit will fit it for use with dempirical(), and if your data has been defined as real numbers, ExpertFit will fit it for use with empirical(). When your data set is composed of real numbers, ExpertFit will show the same percentage for the last value as for the previous to last value, but you'll notice that the percents add up to 100% with the second to last entry. Example cempirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. cempirical(current.labels[\"ptime\"] 5); Returns a random variate from a continuous empirical distribution defined in a node table defined on a label named \"ptime\" of the current object, and using random number stream 5. centerobject (obj object, num centerportnum) Deprecated, use Object.centerObjects[] Description This command is deprecated. Use Object . centerObjects [] instead. Reference the object connected to an object's center port. Example changeconveyorspeed (obj conveyor, num newspeed ) Deprecated, use conveyor.targetSpeed Description This command is deprecated. Legacy conveyors are no longer supported. Use Conveyor . targetSpeed instead. Changes the speed of the conveyor to newspeed. Example changeconveyorspeed(current, 4); This example changes the conveyor's speed to 4. changedisplay (num width, num height, num depth, num fullscreen, num test) Change resolution Description Change resolution Example changedisplay(1024,768,0,0,0) changepersonvisuals (treenode person, string category, num/string index [, Array color]) Change the person's visuals (Head, Hair, Skin Texture, Clothes) Description Change the person's visuals (Head, Hair, Skin Texture, Clothes). This can be done dynamically during the model run. Example changepersonvisuals(person, \"Shirt\", \"Scrubs\", Color.red) changetask (obj tasksequence, num taskrank, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Dynamically change a task in tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. This command lets you change a task dynamically. For example, if you want an operator to travel to object B instead of traveling to object A, but a task has already been created for him to travel to object A, you can use this command to change the task. The first parameter (tasksequence) specifies the tasksequence containing the task. The second parameter (taskrank) specifies the rank of the task in the tasksequence. All other parameters are the same as for the inserttask command. This command should only be executed if the task is not the currently active task in the task sequence! Example changetask(gettasksequence(current, 0), 4, TASKTYPE_TRAVEL, current.centerObjects[5]); This example changes the fourth task in the current object's active task sequence to a travel task to travel to the object connected to the 5th center port of the current object. checkdllconnection (node dllnode, num force) Returns 1 if the node is properly connected with a dll function Description Returns 1 if the node is properly connected with a dll function. Otherwise returns 0. If force is 1, then if the node is not connected, it will attempt to bind it to a dll function, and will return 1 if successful, 0 if not. The node must be toggled as DLL and have proper data specifying the path to the dll and the function name. Example if(!checkdllconnection(getvarnode(current, \"exittrigger\"), 1)) msg(\"DLL Error\",\"Error connecting to dll.\") This will attempt to connect and object's exit trigger node with a dll function, and will print a message if it is unsuccessful. checkforexistingview (obj view [, num mode]) Description For developer use. Checks to see if there are any currently active windows that match this window. Compares the beginning of each name of each window in the active view node with the beginning of the name of the specified view. Along with comparing the beginning of the names, this compares each objectfocus as well. If mode is specified and is not 0, it will compare the viewfocus instead of the objectfocus. Example checkforexistingview(c) classobject (obj object) Returns the class object of an instance Description Returns the class object of an instance. Example if(classobject(current) == library().find(\"?Processor\")) { pt(\"Processor1 is an instance of the Processor class.\");pr(); } This prints a message to the output console if current is a Processor. cleannodeflexscript (node startnode) Description For developer use. This command recursively deletes Flexscript trees starting at the node specified. Example cleannodeflexscript(model()); This cleans all the Flexscript nodes in the model. clearbundle (node datanode[, num resetflags = 0]) Clears all bundle data Description Clears the bundle data associated with datanode. This will clear all entries as well as all fields in the bundle. resetflags is a bitwise mask for flags to initialize the bundle by. Valid values are: BUNDLE_FLAG_UNPAGED = 0x1 - The bundle's entries will be stored in an unpaged, contiguous block of memory. BUNDLE_FLAG_IR_OPT = 0x10 - The bundle will use additional memory (32 bits per row) to improve insert/remove performance for rows in the middle of the bundle. Example clearbundle(x); clearconsole () Clears the output console Description This command clears the output console if it is open. The output console is where output from the pt(), pf(), and pr() commands is printed. Example if (v_printerror == 1) { clearconsole(); pt(\"An Error occurred\"); } This clears the output console and prints a simple error message to it if the variable called printerror is equal to 1. clearcontents (node thenode) Deprecated, use treenode.subnodes.clear() Description This command is deprecated. Use treenode . subnodes .clear() instead. Destroys all of the objects/nodes under the node. Example clearfullhistory (int resetuniqueid) Deprecated Description This command is deprecated. Deletes all of the data that has been collected by the Full History system. If resetuniqueid is 1, then the unique IDs of the flowitems that are created after this command is called will being again at 1. Typically, this parameter should be 0, as that will continue numbering so that old flowitems are not confused with new flowitems. Example clearfullhistory(0); clearglobaltable (str/node/num table) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example clearundohistory ([obj view]) Description Deletes all undo records in the undohistory of the specified view. If no view is specified, it will clear the global undo history used by the 3D and tree windows. Example clearundohistory(view); clickcode () Description For developer use. Returns the type of click in a view. Used in the OnClick event. DOUBLE_CLICK returns 1 LEFT_PRESS returns 2 LEFT_RELEASE returns 3 RIGHT_PRESS returns 4 RIGHT_RELEASE returns 5 Example if(clickcode()==2) { pt(\"Clicked!!\");pr(); } This prints the statement \"Clicked!!\" to the output console when the left mouse button is pressed. clientclose (num socket) Closes the client socket Description This command closes the client socket specified as socket. It must be called sometime after clientcreate(). Once a socket is closed, nothing can read from it or write to it. The socket number may be reused again by a later call to clientcreate(). This function returns true if the socket closes correctly. Example clientclose(1); clientconnect (num socket, str hostname, num port) Attempts to connect the client socket Description This command attempts to connect the socket specified by socket to a server running on the machine called hostname, which is listening on the port specified. The number passed as socket is the number that was previously returned by clientcreate(). The string passed as hostname can be either the computer's name (if it is on the same network as the client) or its IP address. This command should not be called until after a successful call to clientcreate() is made. If the socket does not connect, then it is closed and clientcreate() will have to be called again to reopen it. This functions returns true if the socket connects successfully. Example clientconnect(1,\"localhost\",1880); clientcreate () Creates a new client socket with TCP/IP protocol Description This command creates a new client socket that is set to communicate using the TCP/IP protocol. FlexSim can create up to fifty client sockets at one time. Each client can be connected to a different server. This function returns a number that must be stored by the model to reference the socket that was created. If an error occurs, this function returns 0. Example int socknum = clientcreate(); clientreceive (num socket, str buffer, num buffersize, num noblock[1/0]) Receives data sent to the socket Description This command receives data that has been sent to the socket specified as socket. The value of socket is the number that is returned by clientcreate(). This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = clientreceive(1,Buf,15,0); flexscript: string readstr = clientreceive(1, NULL, 15, 0); clientsend (num socket, str message[, num charlength]) Sends a message across the socket Description This command sends a message across the socket specified as socket. The value passed as socket is the number returned by clientcreate(). The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example clientsend(1,\"REQ:service\"); closeallip (obj object) Close all input ports of object Description Close all input ports of object. Closing all input ports of an object will block entry to the object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeallip(current) closeallop (obj object) Close all output ports of object Description Close all output ports of object. Closing all output ports of an object will block the exit of that object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeallop(current) closeinput (obj object) Deprecated, use Object.input.close() Description This command is deprecated. Use Object . input .close() instead. This command blocks the input of the object. Only the input ports themselves, or the input in general needs to be closed to block entry. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the input ports (squares) for the object, signifying the input ports are blocked. Individual ports may still be open and drawn in green, but entry to the object is still blocked because of the red bar. Compare this command with stopinput(). Example if (current.subnodes.length == getvarnum(current,\"maxcontent\") closeinput(current); This blocks the input ports of current when it has too many objects inside it. closeip (obj object, num inputportnum) Close one input port of object Description Close just inputportnum of object. Closing an input port of an object will block entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeip(current,1) closenodeedge (obj object, num edgenum) Closes entry to the networknode's edge Description Closes entry to the networknode's specified edge number. The edge's color will turn orange indicating it is closed. Open or close status of an edge will only be checked by a traveler when traveling from one node to the next (not when entering a node from an offset) Example closenodeedge(current.centerObjects[1], 3); closeop (obj object, num outputportnum) Close one output port of object Description Close just outputportnum of object. Closing an output port of an object will block the exit from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeop(current,1) closeoutput (obj object) Deprecated, use Object.output.close() Description This command is deprecated. Use Object . output .close() instead. This command blocks the output of the object. Only the output ports themselves, or the output in general needs to be closed to block the exit. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the output ports (squares) for the object, signifying the output ports are blocked. Individual ports may still be open and drawn in green, but exit from the object is still blocked because of the red bar. Compare this command with stopoutput(). Example if (current.subnodes.length == current.mincontent) closeoutput(current); This blocks the output ports of current, if current has too few objects inside it. closeview (node viewnode) Description For developer use. This command closes the view specified as viewnode. If viewnode is not a viewwindow or GUI, this command does nothing. The view is not removed from the active views folder, however. Use destroyobject() to remove it. Example treenode activewindows = views().find(\"active\"); while (activewindows.subnodes.length != 0) { closeview(activewindows.first); } This closes all of the windows that are in the active node of the views tree. This will generally close all of the windows that are currently open. cm (num centimeters) Gets the number of meters in the number of centimeters Description Returns the number of meters in the specified number of centimeters. Example cm(3) cmdcompile () Description For developer use. Compile the project. Example cmdcompile() cmddelete (node thenode) Description For developer use. Use destroyobject(). Delete thenode. Example cmddelete(model().subnodes[4])) cmdexit () Description For developer use. Closes FlexSim. Example cmdexit() cmdloadbyextension (str filename, num silent) Description For developer use. Load a file by name and extension. Recognizes: Project (fsp), Session (fss), Model (fsm), View Layout (fsv). If silent is 0, the user will be asked to confirm that they are opening the correct file. Example cmdloadbyextension(\"c:/mysession.fss\",0) cmdloadsession (str filename) Description For developer use. Load a session by name. Example cmdloadsession(\"c:/mysession.fss\") cmdloadtree (obj desttree, str filename [, num nobuild]) Description For developer use. Load a tree by file path into desttree. By default, after loading, all flexscript will be built. If nobuild is 1, flexscript will not be built. Set nobuild to 1 if you are executing this command from a script node that is toggled as flexscript, or else your script will not finish properly. Example cmdloadtree(node(\"MAIN:/project/model/2\"),\"c:/mytree.t\")) cmdnew () Description For developer use. Start a new model. This command will clear the contents of the model by deleting all objects in the model. Example cmdnew() cmdopen () Description For developer use. Open a new model. This command will cause an Open Model Dialog box to appear from which a model file can be selected for opening. Example cmdopen() cmdsaveas () Description For developer use. Save the model. This command will cause an SaveAs Model Dialog box to appear from which a model file name can be specified for saving. Example cmdsaveas() cmdsavesession (str filename) Description For developer use. Save a session by name. Example cmdsavesession(\"c:/mysession.fss\") cmdsavetree (obj tree, str filename) Save a Tree by name Description Save a Tree by name Example cmdsavetree(node(\"MAIN:/project/library/1\"),\"c:\\\\mytree.t\")) codetotemplate (obj code, obj edit) Description For developer use. Converts C++/Flexscript code into template code and sets the view text of edit to the template code. The code parameter should reference a node that contains text with C++/Flexscript code on it. This is used in a picklist's template code drop-down to create template code from the actual C++/Flexscript code. Example codetotemplate(so(),sv()) codetotemplatetext (node codeobject, node toobjecttext [, num firstcommentonly]) Description For developer use. Converts C++/Flexscript code into template code. Sets the text in toobjecttext to the template code of the code found in codeobject's text Example coloraqua (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . aqua instead. Sets the color of object to aqua. Example colorarray (obj object, num colornumber) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . byNumber () instead. Sets the color of object based on a color index. Example colorblack (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . black instead. Sets an object's color to black. Example colorblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . blue instead. Sets the color of object to blue. Example colorbrown (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . brown instead. Sets the color of object to brown. Example colorgray (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . gray instead. Sets the color of object to gray. Example colorgreen (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . green instead. Sets the color of object to green. Example colorlightblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lightBlue instead. Sets the color of object to lightblue. Example colorlime (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lime instead. Sets the color of object to lime. Example colororange (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . orange instead. Sets the color of object to orange. Example colorpink (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . pink instead. Sets the color of object to pink. Example colorpurple (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . purple instead. Sets the color of object to purple. Example colorrandom (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . random () instead. Sets the color of object to a random color. Example colorred (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . red instead. Sets the color of object to red. Example colorrgb (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the color of an object using red, green and blue components. Example colorsilver (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . silver instead. Sets the color of object to silver. Example colorteal (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . teal instead. Sets the color of object to teal. Example colorwhite (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . white instead. Sets the color of object to white. Example coloryellow (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . yellow instead. Sets the color of object to yellow. Example combocurrentnode (obj combonode) Description For developer use. Returns the current node of the specified picklist combobox. Example createview( \"VIEW:/standardviews/picklisttemplate\",\"\", combocurrentnode(c.find(\"../pickoptions\").getPath(0, 1) ); comborefresh (obj combonode) Description For developer use. Refreshes a picklist combobox contents. Example comborefresh(current); commandlineparam (str param) Description Returns the specified commandline parameter that was passed in if FlexSim is being run from the commandline. Example commandlineparam(\"nrofops\"); This example will return the \"nrofops\" commandline parameter. If a batch opens FlexSim with the line: flexsim.exe myfile.fsm -nrofops 8 Then within FlexSim, commandlineparam(\"nrofops\") will return \"8\". You can use either the unix-style hyphen (-) or the windows-style forward slash (/) to define a command-line parameter comparetext (str text1, str text2[, int ignorecase]) Deprecated, use == operator Description This command is deprecated. Use the == operator instead. myStr == \"Hello\" Test for string equality. Example comparetrees (obj tree1, obj tree2) Description For developer use. Test trees for equality. Example comparetrees(node(\"MAIN:/project/model/1\"),node(\"MAIN:/project/model/2\")) concat (str text1, str text2 [, str text3, ...]) Deprecated, use + operator Description This command is deprecated. Use the + operator instead. \"a\" + \"b\" + \"c\" Concatenates strings together. Example connect (obj object1, num port1, obj object2, num port2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect ports of two objects. The two objects are connected by checking whether the ports exist on the objects in question and then connecting them. The output port of the first object will be connected to the input of the second object. If the ports do not exist, or are already connected then the command will abort. To connect two objects by automatically adding ports, see the command objectconnect(). Example connect(model().subnodes[2],1,model().subnodes[3],2) consoleexecutefs (HWND input, HWND output) Description For developer use. Execute the console code as Flexscript. Example containerentry (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example containerexit (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example content (node parent) Deprecated, use treenode.subnodes.length Description This command is deprecated. Use treenode . subnodes .length instead. Gets the number of child nodes in a parent node. Example contentobj (obj container) Deprected, use Object.attrs.length Description This command is deprecated. Use Object . attrs .length instead. Gets the content of the object's attribute sub-tree. Example contentunder (node thenode [, num objectsonly) Description This command returns the number of nodes in the tree that are inside the node specified as thenode plus the number of nodes that may be contained in any sub-trees that begin at that layer. If thenode does not contain any other nodes, this command returns 0. If objectsonly is not specified or 0, any node in the FlexSim tree can be passed as thenode. If objectsonly is not 0, any node passed in as thenode that isn't an object will return 0. Example if (contentunder(current) >= getvarnum(current,\"maxcontent\")) { current.input.close; } This closes the inputs of current if the number of objects contained under current is greater than or equal to the variable called maxcontent of the object referenced by thisobjectdata. contextdragconnection (obj fromobject, obj toobject, str/num characterpressed) Creates an A or S connection between objects Description This command mimicks holding the specified letter down on the keyboard, clicking on the fromobject and then dragging to the toobject with the mouse. Whatever context sensitive action takes place when using the actual keyboard and mouse combinations, will occur when this command is executed. This command can be used in both Flexscript and C++. Example contextdragconnection(model().subnodes[5], model().subnodes3], \"A\"); continue Description Continues immediately to the next iteration of a for or while loop without executing any of the remaining code in the current loop. Example if(thisloopnotneeded) continue; continueaggregatedundo (obj view) Description Continues the previously-finished aggregated undo record for the specified view. This is used if some other logic created and finished an aggregated undo, but you want it to append any subsequent changes onto the previously finished undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = continueaggregatedundo(c.find(\"@/TheTable\")); controlpressed () Description For devloper use. Test if CTRL key is pressed Example controlpressed() convert (var value, var from, var to) Converts the given value (a time) from one time format to another Description Converts the given value (a time) from one format to another. The from and to arguments only accept the following values: FS_DATETIME XL_DATETIME MODEL_TIME DATE_STR TIME_STR DATETIME_STR FS_DATETIME - the number of seconds since Jan 1, 1601. getmodelunit(START_TIME) returns a value in FS_DATETIME units. XL_DATETIME - the serialized day number, where day 1 is Jan 1, 1900. Feb 10, 2025 1:30 PM is 45698.5625 in XL_DATETIME units. This format is used in Microsoft Excel for dates. MODEL_TIME - the number of model units since the model start time DATE_STR - a string representing the date portion of a datetime value. The resulting text will depend on the date format specified in the model settings. If converting from this format, the value must be formatted according to those settings. TIME_STR - a string representing the time portion of a datetime value. The resulting text will depend on the time format specified in the model settings. If converting from this format, the value must be formatted according to those settings. DATETIME_STR - a string representing the time and date of a datetime value. The resulting text will depend on the time and date formats specified in the model settings. If converting from this format, the value must be formatted according to those settings; the time portion must be first, separated from the date portion by a single space. Note that year 3000 and beyond are not supported by this command. Example convert(42308, XL_DATETIME, MODEL_TIME) // converts an Excel date to a valid model time conveyorgetmotor (obj conveyor) Description Deprecated, use Conveyor class. Example conveyorgetmotor(conveyor); conveyorinfo (obj conveyor, num info[, p1, p2, p3, p4, p5]) Description Deprecated, use Conveyor class. Example conveyorinfo(conveyor, CONV_INFO_ESTIMATE_CONVEY_TIME); conveyorresumeitem (obj item[, num force]) Description Deprecated, use Conveyor class. Example conveyorresumeitem(item); conveyorsenditem (obj item, obj dest) Description Deprecated, use Conveyor class. Example conveyorsenditem(item, outobject(current, 1)); conveyorsetspeed (obj conveyor, num toSpeed) Description Deprecated, use Conveyor class. Example conveyorsetspeed(conveyor, 1); conveyorstopitem (obj item) Description Deprecated, use Conveyor class. Example conveyorstopitem(item); copyattributes (obj destination, obj source, num mask) Description For developer use. Copy the attributes from one object to another. Use mask parameter to enable specific groups (from least significant): ATTCOPY_ALL ATTCOPY_SPATIAL ATTCOPY_OFFSETS ATTCOPY_VISUAL ATTCOPY_MEDIA ATTCOPY_LABELS ATTCOPY_VARIABLES ATTCOPY_DESCRIPTIVE ATTCOPY_TABLES Use the OR operator (|) to combine these values into a single value for the mask parameter. Example copyattributes(library().subnodes[1],model().subnodes[1],ATTCOPY_SPATIAL | ATTCOPY_VISUAL) copycolor (obj highlightedobj) Description For developer use. Copies the color of the highlighted object to all of the selected objects Example copycolor(current) copylabel (obj highlightedobject, str/obj labelnamenode) Description For developer use. Copies the label with the name specified by parameter 2 or stored on the string data of the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copylabel(selectedobject(ownerview(c)), c.find(\">labelname\")) copylabels (obj highlightedobj[, num mode]) Description For developer use. Copies all labels from the parameter 1 object to all selected objects in the model. By default it clears out all existing labels and replaces them with the labels on the parameter 1 object. If mode is 1, existing labels will be overwritten by any incoming labels with the same name, but will otherwise be left alone. If mode is 2, only labels that the selected objects do not already have will be copied. Example copylabels(selectedobject(ownerview(c)), c.find(\">labelname\")) copyvariable (obj fromobject, obj variablenamenode) Description For developer use. Copies the variable with the name held by the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copyvariable(selectedobject(ownerview(c)), c.find(\">variablename\")) copyvariables (obj fromobject) Description For developer use. Copies all variables from the parameter 1 object to all selected objects in the model. Example copyvariables(selectedobject(ownerview(c))) copyvisuals (obj highlightedobj [, num copyshapefactorsalso]) Description For developer use. Copies all visuals from the parameter 1 object to all selected objects in the model. Example copyvisuals(selectedobject(ownerview(c)),1) cos (num angle) Deprecated, use Math.cos(). Description This command is deprecated. Use Math . cos () instead. Gets the cos of an angle in radians. Example count () Description The value of the iterator used with several commands such as repeat(), findmatch(), findmin(), and findmax(). The value of count will depend on which iteration is currently being executed. Example findmax(Table(\"MyTable\").numRows, Table(\"MyTable\")[count][5]) This example returns the maximum value found in column 5, among all the rows of the table MyTable. cp (obj/str object_or_name) Description Returns a reference to an AGV control point Example cp(\"CP547\"); cpaddlistener (obj rootObj, str connectionPath, node listenerNode, num flags[, ...]) Description Adds a listener to events on one or more control points Example cpaddlistener(current, \"Location > LoadPoints\", c, CP_LISTEN_EXIT | CP_LISTEN_AVAILABLE); cpallocate (obj controlPoint, obj allocator, num force) Description Allocates a control point to the claiming object. If successful, a reference to a coupling node representing the allocation will be returned. Example cpallocate(controlPoint, current, 1); cpconnection (obj controlpoint/object, num/str connection, num rank) Description Returns a control point connection. Also, if connection is a string and controlpoint and rank are both 0, then this command will return the index of the given connection. This is for speed, so that you can subsequently use a number for the connection. Example cpconnection(cp, \"ForwardTo\", 1) Returns the first ForwardTo connection on cp cpconnection(cp, \"LookForWork>NextLookForWork\", 1) Traverses two connections to find an object. This is the same as cpconnection(cpconnection(cp, \"LookForWork\", 1), \"NextLookForWork\", 1) cpconnection(cp, \"LookForWork:2>NextLookForWork\", 1) Same as cpconnection(cpconnection(cp, \"LookForWork\", 2), \"NextLookForWork\", 1) int connIndex = cpconnection(0, \"LookForWork\", 0); treenode obj = cpconnection(cp, connRank, 1); Gets the index of the connection, and then uses the index instead of the name. cpcpno (obj object, num port) Description This command returns the center port number that is connected to the specified center port number of object. Example int otherport = cpcpno(current,1); This sets otherport to the number of the port that current's first center port is connected to. cpdeallocate (obj controlPoint, obj allocator) Description Deallocates a control point from the claiming object. If successful returns 1, otherwise 0. Example cpdeallocate(controlPoint, current); cpdistance (obj fromControlPoint, obj toControlPoint) Description Returns the agv network distance between two control points Example cpdistance(cp1, cp2) cpisavailable (obj controlpoint) Description Returns 1 if the given control point is available. byCriterion is not used right now, but is reserved for future use. Example if (cpisavailable(cp)) { ... } cpnumconnections (obj controlpoint, num/str connection) Description Returns the number of connections a control point has Example cpnumconnections(cp, \"ForwardTo\") cppgettoken (obj textblock, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example cppsettoken (obj textblock, num tokenindex, str insertiontext) Deprecated, do not use Description This command is deprecated. Do not use. Example cptasksequencequeue (obj controlpoint) Description Returns a reference to the task sequence queue associated with the control point Example treenode tsQueue = cptasksequencequeue(cp); createcoordinatedtasksequence (obj dispatcher) Create a new, empty coordinated task sequence Description Create a new, empty coordinated task sequence on the specified Dispatcher. Must be followed at some point by dispatchcoordinatedtasksequence. Example createcoordinatedtasksequence(current.centerObjects[1]); createcopy (node thenode, node container [, num samename, num inobject, num cached, num replace]) Copies thenode into the specified container Description This command is deprecated. Use treenode . copy () instead. Copy thenode into the node specified as container. This command is different from createinstance() in that it does not attempt to establish any links between thenode and any class. If an instantiation is required, use createinstance() instead. If samename is 1, the copy will have the same name as thenode. If samename is 0, the newly created node's name will be thenode's name with a random number added to the end. If inobject is 1, the copy will be created in the object data portion of the container. If the container does not have object data, the command does nothing. If cached is 1, a pre-cached version of the node will be copied. This is generally faster. If replace is 1, the copy will overwrite container, instead of being placed inside it. If those parameters are not specified, they default to 0. Example createcopy(Model.find(\"Tools/FlowItemBin/7/1\"), current) createcoupling (node container1, node container2) Creates a pointer coupling inside the two container nodes Description Creates a pointer coupling inside the two container nodes Example createcoupling(current.labels[\"items\"], item.labels[\"owner\"]); createdelaytask (obj dispatcher, num delaytime, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to pause its current task for delaytime seconds. During the time that it is delayed, it will be in the state specified by state. The task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createdelaytask(current.centerObjects[1], 25, SCHEDULED_DOWN, 1, PREEMPT_NOT); createemptytasksequence (obj dispatcher, num priority, num preempting) Creates a new task sequence in the dispatcher's queue and returns a reference to it Description This command is deprecated. Use TaskSequence.create() instead. Creates an empty task sequence in the dispatcher's tasksequence queue. Tasks should be added to this task sequence once it is created, using the inserttask command. The task sequence is dispatched with the dispatchtasksequence command. This command returns a pointer to the newly created tasksequence node. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createemptytasksequence(current.centerObjects[1], 1, PREEMPT_NOT); createevent (obj object, num time, num code[, str data, node involved]) Description For developer use. This command creates an event that will occur sometime in the future in the model's run. The event will be created for the object specified by object. It will occur time seconds from the time that this command is called. If an event needs to occur that the same simulation time that it was created at, time should be 0. When the event occurs, the OnTimerEvent event function of the class of object will be called. This function will be passed code, data, and involved. These values can be accessed in OnTimerEvent as eventcode, eventdata, and i. Generally, eventcode is used to determine what type of event is being created or executed. Eventdata is used as a description of the event for the user's benefit. It is generally not important to the execution of OnTimerEvent. Any objects that are involved in the event, such as a flowitem that is entering or exiting, are passed as involved and are referenced in OnTimerEvent as i. There are predefined values for code that the user should use listed below: 1 - EVENT_OPENINPUTS 2 - EVENT_OPENOUTPUTS 3 - EVENT_PROCESSFINISH 4 - EVENT_CREATEPART 5 - EVENT_DESTROYPRODUCT 6 - EVENT_CONVEYEND 7 - EVENT_BEGINLOADTIME 8 - EVENT_BEGINUNLOADTIME 9 - EVENT_ENDLOADTIME 10 - EVENT_ENDUNLOADTIME 11 - EVENT_ENDDELAYTIME 12 - EVENT_BEGINDOWNTIME 13 - EVENT_ENDDOWNTIME 14 - EVENT_ENDWAITTIME 15 - EVENT_MEETBATCHQTY 16 - EVENT_ENDTRAVELTIME 17 - EVENT_ENDSETUP If a user wishes to create their own types of events, they should use values for code that are greater than 100. See also eventcode and eventdata. Example if (current.subnodes.length >= current.mincontent) { createevent(current,5,EVENT_OPENOUTPUTS,\"openoutputs\",involved); } This creates an event that will occur in 5 simulation seconds that will open the output ports of the object specified as current, for the flowitem specified by involved, if the content of current is less than the label called mincontent of the object referenced by current. createglobaltasksequence (str name, obj dispatcher [, obj dp1, obj dp2, obj dp3, obj dp4, obj dp5]) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. Creates an instance of the named global task sequence with the given dynamic parameters 1-5 and dispatches it to the specified dispatcher. Returns a reference to the created global task sequence. Note that this does not dispatch the task sequence. You need to dispatch it yourself using dispatchtasksequence(). Example treenode ts = createglobaltasksequence(\"GlobalTS\", current.centerObjects[1]) dispatchtasksequence(ts) createinstance (obj class, obj location) Description This command is deprecated. Use Object . create () instead. For developer use. This command creates an instance of the class specified as class and places it in the object specified as location. The instance will be given a name that is the name of the class followed by a number. The instance will have all of the variables and attributes of class and it's superclasses. Nodes in the behavior node will not be copied into the instance, as they apply to all instances of the class. The object passed as class should be in the library. Generally, location is the model. The library and the model can be easily referenced using the library() and model() commands. Example createinstance(library().find(\"?Source\"), model()); This creates an instance of the Source class in the model. createloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to load flowitem. The object will not travel to the flowitem before loading it. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createpopup (str viewpath, str objectfocus, str viewfocus, obj relativeto, num x, num y, num sx, num sy) Creates a new popup window Description Similar to the createview command in that it creates a new window. However, FlexSim manages this window so that whenever the user clicks outside of the window, the window will be closed. Code template pop-ups use this command to create a drop-down in which you can edit the template code. The pop-up view must contain a style attribute with the WS_POPUP style. You also specify a view node \"relative to\" which the popup's location will be set (usually whatever view you're writing code on). Also specify an offset location in pixels from relativeto's top-left corner, and a size of the pop-up. Example treenode combobox = c.find(\"../pickoptions\"); createpopup( \"VIEW:/standardviews/picklisttemplate\", combobox.find(\">pickprimary+\").getPath(0,1), combocurrentnode(combobox).getPath(0,1), combobox, 0,20,combobox.location.x, 150 ); This code is similar to what is used to create the template code pop-up for many of FlexSim's edit fields. createsendmessagetask (obj taskexecuter, obj receiver, num priority, num preempting , num param1, num param2, num param3) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specifies as dispatcher that causes it to send a message to the object specified as receiver. The OnMessage trigger of the receiving object will be executed when the message is sent. The values passed as param1, param2, and param3 will be available in the trigger function using the param() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createsendmessagetask(current, current.centerObjects[1],1,PREEMPT_NOT,5, 6, 7); createstandardtask (obj taskexecuter, obj origin, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to origin, load flowitem, travel to destination and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createstandardtaskcurrent.centerObjects[1],current.centerObjects[2],current.centerObjects[3],item, 1, PREEMPT_NOT); createtickevent (obj fluidobject) Creates a tick event for fluidobject and all objects assigned to that Ticker Description Creates a Tick event for the Fluid Object that is passed in and all of the other Fluid Objects that are controlled by the same Ticker. This allows the user to cause fluid material to move at times that are not the Ticker's normal tick times. The user can also pass a specific Ticker as the parameter to this command. Example createtickevent(current); createtoken (obj instanceObject, obj/str activity, int start) Description Deprecated. Use Token . create . Example treenode token = createtoken(node(\"Operator1\", model()), \"Start\", 0); setlabel(token, \"type\", 1); releasetoken(token); createtravelloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and load flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createtraveltask (obj taskexecuter, obj destination, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination. It will travel until its front edge reaches destination. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltask( current.centerObjects[1], current.centerObjects[2], 1, PREEMPT_NOT); createtraveltolocandwaittask (obj taskexecuter, num relativeloc, num x, num y, num z, num endspeed, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. Once the object reaches that point, it will wait in the state specified as state until an endwaittask() command is issued to it. For a list of legal states, see setstate(). If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltolocandwaittask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, STATE_IDLE, 1, PREEMPT_NOT); createtraveltoloctask (obj dispatcher, num relativeloc, num x, num y, num z, num endspeed, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltoloctask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, 1, PREEMPT_NOT); createtravelunloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createundorecord (obj view, obj object, num undocode[, num p1, num p2, num p3]) Description Creates an undo record for the specified view. Returns the uniqueid for the created record. Undo codes: UNDO_AGGREGATED 1 UNDO_MOVE_SIZE_ROTATE 2 UNDO_MOVE_SIZE_ROTATE_GROUP 3 UNDO_SELECTION_CHANGE 4 UNDO_CREATE_OBJECT 5 UNDO_DELETE_OBJECT 6 UNDO_CHANGE_DATA 7 UNDO_CHANGE_RANK 8 UNDO_CHANGE_NAME 9 UNDO_MOVE_OBJECT 10 UNDO_DELETE_COUPLING 11 UNDO_AGGREGATED_FIRST_RECORD 12 UNDO_DESTROY_BRANCH 13 UNDO_CHANGE_FLAGS 14 UNDO_REPLACE_OBJECT 15 UNDO_CUSTOM 16 UNDO_CALLBACK 17 See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); createunloadtask (obj dispatcher, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to unload flowitem into the object specified by destination. The object will not travel to the location before unloading. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createuserlibrary () Description For developer use. This command creates a new user library Example createuserlibrary(); createview (str viewpath[, str objectfocus, str viewfocus]) Description For developer use. This command creates a new GUI window in the active node of the views tree. This window is a copy of the window whose path is given in viewpath. The window will have an object focus of objectfocus and a view focus of viewfocus. Objectfocus and viewfocus are generally the same for most GUI windows. They should be the path of the node that this GUI window is representing. Example createview(\"VIEW:/standardviews/other/FindReplace\",\"MAIN:/project/model/Tools/precision\",\"MAIN:/project/model/Tools/precision\"); This creates the Find Replace GUI. createwaittask (obj taskexecuter, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specified as dispatcher that causes the object to not perform new task sequences that it is given until it has been released. The object can be released with the endwaittask() command. The object will be in the state specified by state while it is waiting. For a list of possible states, see setstate() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createwaittask(current.centerObjects[1], STATE_IDLE, 1, PREEMPT_NOT); cubemap (int cmd, int FACEa, int FACEb, int FACEc, int FACEd, int FACEe, int FACEf) Attaches 2D images to vertices of a 3D model Description This command can be used to attach 2D images to vertices of a 3D model and the texture image is wallpapered onto the geometry of the 3D model. The six faces can be defined by FACEa, FACEb, FACEc, FACEd, FACEe, and FACEf. We can directly use the number of the reference texture after importing into media files. The parameter cmd will take the following values whenever writing OpenGL call sequences. 1- CUBEMAP_INIT : To initialises the texture if nothing defined earlier 2- CUBEMAP_BEGIN : Enables texture generation and begin map 3- CUBEMAP_END : Disable texture generation and end map 4- CUBEMAP_SHUT : Delete map Example cubemap(2, 39,39,39,39,39,39); current <no parentheses> Description This command is deprecated. This should not be used as a special command with the setcurrent command anymore. Instead, declare a treenode variable type as current, then use current in your code as any other variable type. Example treenode current = model().subnodes[3]; pt(current.name); This sets the object that is ranked 3 in the model to current and prints its name to the output console. currentfile () Gets the path to the currently open model Description Returns the path of the currently open model. Example currentfile(); cursorinfo (obj/num view, num operation, num x/y/z, num pos/move) Description For developer use. This command represents a lot of functionality wrapped up into one command. It is a way of getting information regarding the position/state of the mouse for a window control. view : the associated view, such as an ortho or planar view. This can also be an HWND (stored in a double). operation : the type of operation you want to do: 1 - gets x or y positions of the cursor in a planar view 2 - get orthographic or perspective view coordinates 3 - get current mouse button state. return value: 0 : no buttons down 1 : left down 2 : right down 3 : right and left down 4 : double left click 4 - update the cursor position 5 - gets x or y positions of the cursor relative to the view 6 - gets x or y positions of the cursor in screen coordinates 7 - sets the x or y position of the cursor xyz : 1(x), 2(y), or 3(z); not used for operation 3. For operation 4, if xyz=1, the cursor position will be updated with objects being drawing, if xyz=2 it will be updated with only the floor drawn. pos/move : 1(pos) or 2(move); 1 gets absolute mouse position, and 2 gets the change since last update. only used for operations 1-2. The best way to test this functionality out is just by trial and error. Add an OnMouseMove attribute to the ortho view (make sure you rebind the view's attributes after you've added it: Build|Rebind Object Attributes), then print information to the output console. Example cursorinfo(c,2,1,1) daemonstate (num thing) Description For developer use. Returns the stats of: 1 - clock 2 - flythrough 3 - ticker Example daemonstate(1) dataplot (obj tree, num type, num action, num x, num y, num z) Description For developer use. This command lets you create, reset or add data to a histogram, x/y chart, or a data series. The first three parameters define the associated node in the tree as well as the operation to do. The last three parameters, x,y and z, define the appropriate data for the operation. The first parameter should be the main node in the tree that holds the graph/histo data. The second parameter should be either 1, 2, or 3, and defines the type of data that the node holds. 1 means graphx data. For this data type the node contains a list of sub-nodes, and each sub-node contains a number that is a unique point in a data series. 2 means graphxy. For this data type, the node again contains a list of sub-nodes but this time the sub-nodes are paired together as x/y pairs. Nodes ranked 1 and 2 hold the x and y values for one data point, nodes 3 and 4 hold x and y values for the next data point, etc. A type parameter of 3 means histo data. Here the node holds data associated with a histogram. The action parameter should be either 1, 2, or 3, and defines the action that you want to do. 1 means a create operation. This is only needed for histogram type data, as it needs to set up the node's sub-tree structure. To create a histogram plot, pass the minimum value for the histogram as the x parameter, the maximum value of the histogram as the y value, and the number of divisions, or buckets, as the z parameter. An action parameter value of 2 means you want to reset the data. This will clear the content of the node for graphx or graphxy data, and will reset the histogram values for histogram data. An action parameter value of 3 means you want to add a data point. For graphx and histo data, pass the data point as the x parameter. For graphxy data, pass the as the x and y paramters. In summary: Type: 1-graphx/2-graphxy/3-histo. Action: 1-create (only needed for histo data)/2-reset/3-add point. Data: x,y are data points [histo create: x=start, y=end, z=nr of divisions]. Example dataplot(stats_contentgraph(model.find(\"Processor2\")),2,3,8.6,5,0); This adds a point to Processor2's content graph for time 8.6 and content 5. This example is only for demonstration purposes. You should never need to do this since the Processor automatically maintains its content graph. days (num days) Gets the number of model time units in the give number of days Description Return the number of model time units in the given number of days. Example days(1) Returns 86400 seconds. dbchangetable (str tablename) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbchangetable(\"Inventory\"); This closes the currently open table and opens a table called Inventory. dbclose () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (current.donegatheringdata == 1) dbclose(); If the label donegatheringdata on current is set to 1, the current database is closed. dbexportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Description This command is deprecated. Use Database.Connection instead. The starting row and column in the table are specified as well as how many rows and columns to export. Example dbexportnode(so(),1,1,4,5); dbexporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbexportnode(\"MyTable4\",2,2,3,3); dbgetfieldname (num column) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string ColName = dbgetfieldname(1); This sets ColName to the name of the first column in the current database. dbgetmetrics () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgetmetrics() dbgetmode () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (dbgetmode() != DBMODE_CLOSED) ColName = dbgetfieldname(1); If the database is open, ColName is set to the name of the first column in the database. dbgetnumcols () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumcols(); x++) Table(\"MyTable\")[1][x] = stringtonum(dbgettablecell(1,x)); This copies the values from a column in the database to a column in a GlobalTable. dbgetnumrows () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumrows(); x++) Table(\"MyTable\")[x][1] = stringtonum(dbgettablecell(x,1)); This copies the values from a row in the database to a row in a GlobalTable. dbgettablecell (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double tablevalue = stringtonum(dbgettablecell(1,1)); This sets tablevalue to the number that is stored in the first row and first column of the database. dbgettablenum (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double val = dbgettablenum(2,3); dbgettablestr (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string val = dbgettablenum(2,3); dbimportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(so(),1,1,4,5); dbimporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(\"MyTable4\",2,2,3,3); dbopen (str databasename, str command {SQL string or Tablename}, num usetable [, num showlogin]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbopen(\"itemdrive\",\"timetable\",1); This opens a database with the alias \"itemdrive\" and opens the table called \"timetable\" in Table mode. dbopen(\"warehouse\",\"select * from inventory\",0); This opens a database with the alias \"warehouse\" and performs a SQL query on it. The database is open in SQL mode. dbsettablecell (num row, num col, str value) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<= model().subnodes.length; x++) dbsettablecell(x,1,model().subnodes[x].name); This places the names of all of the objects in the model into the first column of the current database. dbsettablenum (num row, num col, num val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsettablenum(2,3,56.5); dbsettablestr (num row, num col, str val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgettablestr(1,1,\"John\"); dbsqlquery (str query[, num forwardOnlyCursor]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsqlquery(\"select processtime from timetable where type='1'\"); This returns a new table based on the SQL query passed. dbsqlquery(\"update timetable set processtime=type*2\"); This updates the database based on the query passed. dbusername (str username, str password) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbusername(\"user1\",\"abc123XYZ\"); This sets the username to \"user1\" and the password to \"abc123XYZ\". These values will be used to access a database the next time dbopen() is called. dbusername(\"\",\"\"); This clears out the last set username and password. The next time dbopen() is called, the database will be accessed without a username or password. dbviewtable () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbviewtable(); dbwritechanges () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbwritechanges() deactivatekinematics (node kinematicsnode) Causes kinematics to do nothing when updatekinematics() is called Description Causes kinematics to do nothing when updatekinematics() is subsequently called instead of updating the object. Call this in the reset trigger of an object to free the object to move it around in the ortho view. Example deactivatekinematics(current.labels[\"kinLabel\"]); debug ([num operation, num/obj p2, num/obj p3]) Acts like a breakpoint in Flexscript to start debugging Description For developer use. This command is used to control the Flexscript step debugger. Calling this command without any parameters will behave as if there is a breakpoint at that line of code. Operations: DEBUG_STOP 0 DEBUG_STEP 1 DEBUG_CONTINUE 2 DEBUG_IS_STOPPED 3 DEBUG_GET_LINE_NR 4 DEBUG_DUMP_VARIABLES 5 DEBUG_STOP_SIMULATION 6 DEBUG_REFRESH_BREAK_POINTS 7 DEBUG_ADD_BREAK_POINT 8 DEBUG_DELETE_BREAK_POINT 9 DEBUG_GET_WATCH_VARIABLE 10 DEBUG_ENABLE_CODE_PROFILING 11 DEBUG_PRINT_CODE_PROFILING_INFO 12 DEBUG_RESET_CODE_PROFILING 13 Example debug(); default : Description The default case in a switch statement {} Example default: { msg(\"case statement\",\"\"); } defaultdragconnection (obj fromobject, obj toobject, char characterpressed) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Either connects or disconnects ports between fromobject and toobject according to the specified characterpressed. This command mimics the keyboard and mouse combinations used to connect/disconnect object ports. For instance an 'A' would be as if the letter \"A\" were held down on the keyboard while click-dragging from the fromobject to the toobject. For 'A' and 'Q' it connects and disconnects output ports to input ports. For 'S' and 'W' it connects and disconnects central ports. Can only be used in C++, not flexscript. Example defaultdragconnection(model().subnodes[count], model().subnodes[2], 'A') degreestoradians (num degrees) Deprecated, use Math.radians() Description This command is deprecated. Use Math . radians () instead. Convert degrees to radians. Example delayednodefunction (node thenode, double timeDelay[, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode after a defined delay time. It works the same as the nodefunction() command, except it delays firing the node for the given delay time. Example delayednodefunction(current.myFunc, tonum(item)); delayevents (num value) Description For developer use. Delay all events in the eventlist. The times of all events in the eventlist will be incremented by value. Example delayevents(20) delayeventsofobject (obj object, num value) Description For developer use. Delay events of object. The timed events of object are incremented by value, and the eventlist re-sorted. Value may be positive or negative. Example delayeventsofobject(model().subnodes[2],20) deleteselected () Description For developer use. Deletes all selected objects in the model. Example deleteselected() deletetablecol (str/num/node table, num column) Deprecated, use Table.deleteCol() Description This command is deprecated. Use Table . deleteCol (). instead. Removes a column from a table. Example deletetablerow (str/num/node table, num row) Deprecated, use Table.deleteRow() Description This command is deprecated. Use Table . deleteRow () instead. Removes a row from a table. Example dellabel (obj object, str/num label) Deprecated, use treenode.labels[\"LabelName\"].destroy() Description This command is deprecated. Use treenode . labels [\"LableName\"]. destroy () instead. Deletes the specified label from the node called \"labels\" on the specified object. The specified label can either be the labelname as a string or the label's rank as a number. If the label does not exist in that node, this command does nothing. Example dellabel(current,\"MyLabel\") dempirical (str/node/num table[, num stream]) Returns a random sample from a discrete empirical distribution Description A discrete empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example int ptype = dempirical(\"prodtypes\", 5); Assigns a value to the ptype variable using a discrete empirical distribution defined in a global table named \"prodtypes\" using random number stream 5. dempirical(current.labels[\"route\"], 5); Returns a random variate from a discrete empirical distribution defined in a node table defined on the label named \"route\" of the current object, and using random number stream 5. deselectall () Description For developer use. Deselects all objects in the model. Example deselectall() destroyevent (node event) Description For developer use. Destroys a particular event from the event list. Example destroyevent(node(\"MAIN:/1/exec/events\").last) destroyeventsofobject (obj object [, num simtime, num code, str data, node involved]) Destroys events associated with object Description Destroys events associated with the given object. The first parameter, object, is the only required parameter. Other parameters are optional and provide a filter for choosing which events to destroy, as follows: time: If greater than or equal to the time that that the command is called, this parameter will filter events by their time. If the event's time is not equal to the time passed in, then the event will not be destroyed. Pass -1 if you don't want this as a filter. code: If greater than 0, this parameter filters events by their event code. If the event's code is not equal to the code passed in, the event will not be destroyed. data: If not NULL, this parameter filters events by the data string associated with the event. If the event's data string is not equal to the string passed in, the event will not be destroyed. involved: If not NULL, this parameter filters events by their involved node or object. If the event's involved node is not equal to the node passed in, the event will not be destroyed. Example destroyeventsofobject(model().subnodes[2]) destroymessageevents (obj object, num time, obj fromobj[, num param1, num param2, num param3]) Destroys message events associated with object Description Destroys message events associated with the given object. If no message parameters are included, all message events will be destroyed. Example destroymessageevents(current, time(), NULL, 8) destroyobject (node thenode) Deprecated, use treenode.destroy() Description This command is deprecated. Use treenode . destroy () instead. Destroys thenode. Example diffsign (num value1, num value2) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Example dispatchcoordinatedtasksequence (obj tasksequence) Dispatches the coordinated task sequence Description Dispatches the specified coordinated task sequence. Must be called after calling createcoordinatedtasksequence(). Example dispatchcoordinatedtasksequence(newts); dispatchtasksequence (obj tasksequence) Dispatches the task sequence, initiating handling/execution of the task sequence Description This command is deprecated. Use TaskSequence.dispatch() instead. Tells the dispatcher/taskexecuter in which the specified task sequence resides to handle that task sequence. Users should create the task sequence using the createemptytasksequence command, then add tasks using the inserttask command, then cause the task sequence to be handled using the dispatchtasksequence command. Example dispatchtasksequence(newtasksequence); distancetotravel (obj traveler, obj destination) Gets the distance a traveler would need to travel to reach destination Description Returns the distance that a traveler (Operator, Transporter, etc) would need to travel in order to reach the given destination. If the object is connected to a network, then it will return the travel distance along the network. Example distancetotravel(current.centerObjects[1], current); distcutoff (num radius) Sets a globally applied cutoff radius for object drawing Description Sets a globally applied cutoff radius (from the viewpoint) for object drawing. Example discutoff(10) distfromviewpoint (obj object, obj view) How far from the viewpoint object is in the window view Description Returns how far from the viewpoint the object specified as object is in the view window specified as view. This value is only meaningful if view is a reference to a Perspective window. Example double dist = distfromviewpoint(model().subnodes[2],sv()); This sets dist to the distance from the first object in the model to the viewer's eye. div (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use the / operator instead. Division of value1 by value2. If value2 is zero, the calculation is aborted and zero is returned. Example div(10,2) divide (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use / operator instead. This is an alias for div(). Example divide(10,2) documentsdir () Gets the full path to the currently active user's FlexSim Projects folder in My Documents Description Returns a full path to the currently active user's FlexSim Projects folder in My Documents Example documentsdir() documentusercommands () Description For developer use. Accesses the current model's command documenation and updates a file called usercommands.xml so that the user commands are included in the command documentation Example documentusercommands(); draginfo (num operation[, num val]) Gets or set values related to draggin the mouse Description Get or set values related to dragging the mouse. Operations: DRAG_INFO_DX 1 - gets dx DRAG_INFO_DY 2 - gets dy DRAG_INFO_DZ 3 - gets dz DRAG_INFO_MDX 4 - gets mdx DRAG_INFO_MDY 5 - gets mdy DRAG_INFO_BUTTON_STATE 6 - gets the button state DRAG_INFO_SET_DX 7 - sets dx to val DRAG_INFO_SET_DY 8 - sets dy to val DRAG_INFO_SET_DZ 9 - sets dz to val DRAG_INFO_SET_MDX 10 - sets mdx to val DRAG_INFO_SET_MDY 11 - sets mdy to val DRAG_INFO_SET_BUTTON_STATE 12 - sets the button state to val Example double dx = draginfo(DRAG_INFO_DX); draw3dtext (str text[, num asBitmap]) Draws text in a 3d view Description This command is similar to drawtext(), but can only be used in a 3D view, and its parameter set is stripped down to provide direct access to the text rendering procedure. Whereas drawtext() does some automatic scaling based on the current object, as well as some OpenGL state changes, etc., draw3dtext() calls the text drawing procedure directly, so any positioning, scaling, color settings, etc., should be done with OpenGL commands, i.e. glTranslated(), glScaled(), glColor3d(), etc. Example draw3dtext(current.name); drawbox (num x, num y, num z, num sx, num sy, num sz, num glbegin) Draws a simple box Description Draws a simple box. If glbegin is 1, then it will call glBegin before drawing. This command is a shortcut way to draw an OpenGL type cube that allows more control over lighting, coloring, and texturing than the drawcube() command. Example drawbox(5,0,0, 2,1,3, 1); drawcolumn (num x, num y, num z, num totalsides, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D column Description A very versatile command that can draw anything with multiple sides and a height such as a square, a pentagon, a pyramid, and even a cylinder (if the total number of sides is large). Draws a column with its origin (center of base) positioned at x, y, z. The column is then defined by the number of sides, a base radius, a top radius, and a height. The column can be rotated in degrees about each axis with rx, ry, rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the column from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the column. The location, size and rotation of the column are by default relative to the object it is drawn on. The parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcolumn(0,0,0, 5 ,4,2, 6 ,0,0,0, 175,175,175, .6, 3, 5,1); drawcube (num x, num y, num z, num sx, num sy, num sz, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D cube Description Draws a cube with its origin (bottom left corner) positioned at x, y, z. Its length, width, and height is defined by sx, sy, and sz respectively. It can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cube from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the cube. The location, size and rotation of the cube are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcube(0,0,0, 5,3,2, 0,0,0, 175,175,175, .6, 3, 1,1); drawcylinder (num x, num y, num z, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draws a 3D clyinder Description This command draws a hollow cylinder with its origin (center of base) positioned at x, y, z. The cylinder's dimensions are defined by a base radius, a top radius and a height. Use the drawdisk() command to cap off the ends of the cylinder. The cylinder can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cylinder from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing around the outside circumference of the cylinder. The location, size and rotation of the cylinder are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcylinder(0,0,0, 1,1, 5, 0,0,0, 175,175,175, .6,3); drawdisk (num x, num y, num z, num innerradius, num outerradius, num startangle, num sweepangle, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D disk Description Draws a flat planar disk with its origin (center of radius) positioned at x, y, z. The disk's dimensions are defined by an inner radius, an outer radius, a start angle, and a sweep angle. A sweep angle of 360 makes a complete circle. An innerradius greater than 0 will create a disk with a hole in the middle of it. The disk can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the disk from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing across the face of the disk. The location, size and rotation of the disk are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawdisk(0,0,0, .5,2, 90,270, 0,0,0, 175,175,175, 1,3); drawflattext (str text) Description This command can only be used in a 3D view. It draws a texture-mapped text string. This uses the same functionality that draws the names and stats below objects. If scaled correctly, it draws a very crisp, readable text. Use this in conjunction with setdrawnamefunction() to customize the data that is shown in the box below objects. Unlike drawtext(), this command's parameter set is much more stripped down, so you should use gl commands (i.e. fglTranslate(), fglScale(), fglColor(), etc.) to set up the location, size, and render settings before drawing the text. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object drawfont (num font) Specifies the font to be used with drawtext() Description Call before drawtext, to define font to be drawn. After drawtext is called, the font will be reset to default. There are currently 12 font types (numbers 0 through 11). Example drawfont(2) drawimage (obj view, str imagepath, num x, num y, num width, num height, num scaling) Draws an image Description Draws the image at imagepath in the view. The scaling value specifies how the image will be positioned and scaled. NO_SCALE (or 0): Draws the image at location x,y with the width and height being based on the size of the image. SCALE_DOWN: Draws the image centered in the rectangle created by x,y,width,height and scales the image proportionally down to fit if necessary. SCALE_UP_DOWN: Draws the image centered in the rectangle created by x,y,width, height and scales the image proportionally up or down to fit. SCALE_INDEPENDENT: Draws the image at x,y with the size of width and height. Example drawimage(c, \"buttons\\\\visible_eye.png\", 0, 10, 0, 0, 0); drawline (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar line Description This command draws a planar line with a starting point of xloc1, yloc1, zloc1, and an ending point of xloc2, yloc2, zloc2. The color is defined by the red, green, blue color components ranging from 0 to 1. Example fglDisable(GL_LIGHTING); drawline(view, 0, 0, 0, 2, 2, 2, 1, 0, 0); fglEnable(GL_LIGHTING); This example draws a line from point (0,0,0) to point (2,2,2). The line will be red in color. drawobject (obj view, num shapeindex, num textureindex[, num animation, treenode shapedata]) Draws a 3D shape Description Draws a 3d object with the specified shape and texture indices. Example drawtomodelscale(current); drawobject(view,getshapeindex(\"fs3d//texturebox.wrl\"),gettextureindex(\"flexsim.bmp\")); Set the drawing scale to that of the model, then draw the texturebox.wrl shape using flexsim.bmp as a texture. drawpie (obj view, num x, num y, num z, num x2, num y2, num z2, num startangle, num endangle, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a flat pie shape Description Draws a flat pie shape with its origin (center of radius) positioned at the midpoint between [x1,y1,z1] and [x2,y2,z2]. The angles are measured in degrees counterclockwise from the positive x axis. Negative angles are measured clockwise. The pie is filled from the start angle to the endangle counterclockwise. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawpie(view,3,3,0,0,0,0,45,90,0.5,0,0); drawquad (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num x4, num y4, num z4, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar quadrilateral Description This command draws a planar quadrilateral with vertices defined by x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, and z4. The color is defined by the red, green, blue color components ranging from 0 to 1. The resultant shape and lighting is dependent on the order or sequence in which the vertices are defined. If vertices are all in one plane, consider using drawrectangle() command. Example drawquad(view, 0, 0, 1, 0, 0, 0, 2, 2, 2, 4, 5, 6, 1, 0, 0); This example draws a quadrilateral with vertices defined by the following four points: (0,0,0), (1,0,0), (2,2,2), and (4,5,6). The quadrilateral will be red in color. drawrect (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar rectangle Description This command draws a planar rectangle with opposite corners defined by x1, y1, z1, and x2, y2, and z2. Both points must lie in a plane parallel to the xy plane. The color is defined by the red, green, blue color components ranging from 0 to 1. This command can be called in a planar, 3D, graph, or panel view. See also drawquad() Example drawrect(view, 0,0,.5, 1, 1, .5, 1, 0, 0); Draws a red rectangle with opposite corners (0,0,.5) and (1,1,.5). drawrectangle (num x, num y, num z, num length, num width, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draw a 3D rectangle Description Draws a flat planar rectangle with a user-defined location, length, width, rotation, and color. The drawquad() command must be used to draw a rectangle that is not parallel with the x, y or z plane. An optional opacity parameter will change the rectangle from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times across the face of the rectangular plane as texturing. The location, size and rotation of the rectangle are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawrectangle(0,0,0, 2,3, 0,0,0, 175,175,175, .6, 1, 2,3); drawshadow (num phase (1,2,3)) In OnDraw: draw shadow volume Description In OnDraw: draw shadow volume Example drawshadow(1); drawsphere (num x, num y, num z, num radius, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D sphere Description Draws a hollow sphere with its origin (center of sphere) positioned at x, y, z. The sphere's dimensions are defined by a single radius. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the sphere from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be wrapped over the surface of the sphere as a texture. The location, size and rotation of the sphere are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawsphere(0,0,0,5,175,175,175,1,3); drawspheres (obj object, obj view) Description For developer use. Draws the collision spheres assigned to the specified object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed Example drawspheres(current,view); drawtext (obj view, str text, num x, num y, num z [, num width, num height, num thickness, num rx, num ry, num rz, num red {0-1}, num green {0-1}, num blue {0-1} , num opacity {0-1}, num flags]) Draws text Description This command draws text at a location defined by x, y, and z. The width parameter is not used. The text width and height is determined by the height parameter. The rotation is defined by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 1. You can define the flags parameter as follows: 0x1 = bold, 0x2 = italic, 0x4 = underline. The flags parameter only applies to non-3d views The opacity if used should be a number ranging between 0 (full transparency) to 1 (opaque). Call drawfont() command to change font type before calling drawtext() if desired. This command can be used in a planar, 3D, graph or panel view. Example drawtext(view, \"Hello\", 0,0,0, 0,.3,.1, 90,0,0, 1,0,0, .8); This example draws \"Hello\" at location (0,0,0) with size 0.3, thickness 0.1, rotation (90,0,0), an rgb color (1,0,0), and opacity of 0.8. drawtomodelscale (obj object) Gets the current drawing scale of the model Description Returns the current drawing scale to that of the model after a previous call of drawtoobjectscale(). This is equivalent to the following OpenGL function: glScalef(1/object.location.x,1/object.location.y,1/object.location.z); Example drawtomodelscale(current); drawtoobjectscale (obj object) Scale subsequent draw commands to the size of the object Description This command causes all subsequent draw commands to be scaled according to the size of the object. This is equivalent to the following OpenGL function: glScalef(object.location.x,object.location.y,object.location.z); By default, the scale is originally set to that of the object. Example drawtoobjectscale(current); drawtriangle (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar triangle Description This command draws a planar triangle with vertices defined by xloc1, yloc1, zloc1, xloc2, yloc2, zloc2, xloc3, yloc3, and zloc3. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawtriangle(view, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0); This example draws a triangle with vertices defined by the following three points: (0,0,0), (1,0,0), and (0,1,0). The triangle will be red in color. dropnodefrom () Description For developer use. Returns the view from which a node was dropped. Example dropnodefrom() dropnodeto () Description For developer use. Returns the view into which a node was dropped. Example dropnodeto() dropuserlibraryobject (obj object [, obj ontoobject, num x, num y, num z, obj ontoview, num viewalreadyset]) Description For developer use. Drops the specified object as if it were dragged from a user library into the model. Example dropuserlibraryobject(node(\"MAIN:/project/userlibrary/1/1\")); dropx () Gets the x position of a drop action Description Get the x position of a drop action Example dropx() dropy () Gets the y position of a drop action Description Get the y position of a drop action Example dropy() dropz () Gets the z position of a drop action Description Get the z position of a drop action Example dropz() dumpquery (node dumpNode[, num asTable]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Dumps the full result table for the last call to query() into a node. If asTable is 1, it will dump the result as table data. If asTable is 0, it will dump it as bundle data. Example duniform (num min, num max[, num stream]) Returns random integer between the min and max Description duniform( a , b , stream ) is a bounded discrete probability distribution. Inputs: a is the lower-endpoint parameter b is the upper-endpoint parameter a and b are integer numbers where a < b b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , a +1, ..., b } mean = ( a + b ) ⁄ 2 variance = ( ( b − a + 1)²− 1 ) ⁄ 12 Possible Applications: Used to approximate a quantity that is felt to be randomly varying between a and b , but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any discrete (integer) number inbetween will be returned. Example duniform(1, 6, 3); Random number stream 3 will be used to generate a random variate from a discrete uniform distribution having a minimum value of 1 and a maximum value of 6. This simulates the roll of a dice. duplicateselected () Description For developer use. Duplicates all selected objects in the model. Example duplicateselected() dynamicsplineall (node starttree) Description For developer use. Un-cache all splines for objects under starttree. Any splines in the model become editable or \"unlocked\". Spline rendering becomes slower in editable mode. In editable mode, splines can be edited dynamically. Example dynamicsplineall(model()) else { } Description Used in conjunction with the \"if\" statement to declare what (if any) code should be executed when the condition for the \"if\" is false. Example if( item.Weight < 100 ) { msg(\"TRUE\",\"\"); } else { msg(\"FALSE\",\"\"); } This example will display the TRUE message when the value of the item's Weight label is less than 100, and the FALSE message when it is not. embedfile (num mode, str projectpath, str filepath) Embeds a file in a node Description This command is used to embed a file in a node. mode can take the following values, 1=embed, 2=extract, 3=remove. Example empirical (str/node/num table[, num stream]) Description A continuous empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example empirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. empirical(current.labels[\"ptime\"], 5); Returns a random variate from a continuous empirical distribution defined in a table defined on a label named \"ptime\" on the current object using random number stream 5. emptyfluidobject (obj object) Sets the contents of the fluid object to 0 Description Sets the contents of the fluid object to 0. Example emptyfluidobject(current); enablecode (node codenode [, num mode]) Makes the node a code node Description If mode is 0, then the node is set to FlexScript unless the node is already a code node and then it leaves the node as is. If mode is non-zero, then it forces a given toggle: 1-FlexScript, 2-C++, 3-DLL. This command is used in the code edit window to toggle the node as FlexScript or DLL. Example enablecode(getvarnode(current, \"exittrigger\")); enablefullhistory (num on/off) Deprecated Description This command is deprecated. Turns Full History collection on and off. If the parameter passed in is 1, Full History will be turned on. If it is 0, it will be turned off. This command should not be called directly. Instead, use the Enable Full History menu option to turn Full History on or off. Example enablefullhistory(1); // Turns Full History collection on endaggregatedundo (obj view, num id) Description Ends an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the previous beginaggregatedundo() command will be encapsulated into a single undoable operation. Pass the id returned by the beginaggregatedundo() function. See Miscellaneous Concepts > Advanced Undo for more information. Example endaggregatedundo(c.find(\"@/TheTable\"),id); endignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example endignoreundo(); endoffile () Returns 1 if the end of the currently open file has been reached Description Returns 1 if the end of the currently open file has been reached. Used with fileopen() Example while(!endoffile()){string nextline = filereadline();} endreplication (num onlyifexperimenting) Ends the current experimenter replication Description Will end the current experimenter replication. Use this if your experiment's end time is dependent on a certain condition becoming true instead of a set end time. Specify 1 for onlyifexperimenting to make sure that you only stop if you are running the experiment. Example if(current.stats.output >= 5000) endreplication(1); endwaittask (obj taskexecuter) Deprecated, use Process Flow or freeoperators() Description This command is deprecated. Use Process Flow instead or the freeoperators() command instead. This command releases the object specified as dispatcher from a wait task issued by the createwaittask(). Once the object is released, it will return to the state that it was previously in, and it will begin to perform any task sequences that are in its tasksequence queue. Example endwaittask(current.centerObjects[1]); eq (num/node value1, num/node value2) Deprecated, use the == operator Description This command is deprecated. Use the == operator instead.. Example erlang (num location, num scale, num shape[, num stream]) Returns a random sample from an erlang distribution Description erlang( γ , β , m , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) m is the shape parameter ∈ {1, 2, ... } stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + m β variance = m β ² Possible Applications: Used to model the time to complete some task such as assembly, customer service and machine repair. Comments: When γ = 0, this distribution is known as the m-Erlang( β ) distribution. The exponential( γ , β ) and erlang( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Example double servicetime = erlang(60, 2, 4, 5); The servicetime variable is set equal to a erlang distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, using random stream number 5. The mean is 100 + (2*4) = 108. evaluatepullcriteria (obj fixedresource, obj item, num portnr[, num bypassflags]) Causes the FixedResource object to re-fire its pull requirement Description Tells the FixedResource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. This command returns the value returned by the pull requirement field if the item can be pulled. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. Example evaluatepullcriteria(current, item, 1); // See also Pull Best Item picklist option eventcode <no parentheses> Description For developer use. This command returns the number value that was passed to the createevent() command as code. It is only used in the OnTimerEvent function of the library objects. It is generally used to identify the type of event that is occurring. This command should not have parentheses when it is called. See also createevent() and eventdata. Example if (eventcode == EVENT_OPENINPUTS) thisobjectdata->openinputs(); This calls a method called openinputs() on the object referenced by thisobjectdata if the value EVENT_OPENINPUTS was passed to the createevent() function. eventdata <no parentheses> Description For developer use. This command returns the string value that was passed to the createevent() command as data. It is only used in the OnTimerEvent function of the library objects. Generally, it is used as a description to the user of the type of event that is occurring. It is not generally used in the execution of the OnTimerEvent function, for speed reasons. This command should not have parentheses when it is called. See also createevent() and eventcode. Example if (comparetext(eventdata,\"openinputs\")) { thisobjectdata->openinputs(); } This calls a method called openinputs on the object referenced by thisobjectdata if the string value passed to createevent() is equal to \"openinputs\". eventget (num index, num thing) An event attribute for the event at index Description Returns an event attribute at the specified index in MAIN:/project/exec/events. thing can be: 1 = client 2 = time 3 = code 4 = data 5 = involved 6 = event node Example eventget(2,3) eventlisten (obj object, str eventName, node relayNode[, num flags, par1, par2, ... par10]) Description This command will create a listening mechanism where whenever the defined event is called on object, relayNode will also be executed. flags is a bitwise mask of one of the following values: EVENT_PRE_LISTEN : The listening function will be called before theNode is called. EVENT_LISTEN : (default) The listening function will be called after theNode is called. EVENT_PERSIST : The listener will persist across model resets. EVENT_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into the event will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. EVENT_LISTEN_ONCE : The listening mechanism will automatically be removed after the first event firing. When the listening node is called, if it returns EVENT_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. To get a list of the events that can be listened to on an object, call function_s(object, \"enumerateEvents\", destNode). The object will dump a table onto destNode that contains information on all the events that can be listened to on the object. Some events may have \"requirements\". This means that in order to properly bind to the event, you have to pass additional parameters in. The enumeration table will give information on the number of requirements and their names. When requirements are needed they displace and shift par1, par2, etc. For example, if an event has 2 requirements, these requirements will take up par1 and par2 of the eventlisten() call, and par3 will then become param(1) in relayNode's code. Example eventlisten(current, \"OnEntry\", current.entrylistener); eventloginfo (num operation, num n1) Description For developer use. Returns a string value describing something related to the Event Log. Operations: ELI_GET_OBJECTPATH 1 - returns the path of the object at index n1 from the objectpaths array. ELI_GET_INVOLVEDPATH 2 - returns the path of the object at index n1 from the involvedpaths array. ELI_GET_OTHERPATH 3 - returns the path of the object at index n1 from the otherpaths array. ELI_EVENTTYPE_NAME 4 - returns the name of the eventtype at index n1 from the eventtypes array. ELI_LOGGEDEVENTTYPE_NAME 5 - returns the name of the logged eventtype at index n1 from the loggedeventtypes array. Other operations relating to the Event Log that return number values can be accessed using the applicationcommand() function: \"seteventlogging\" - enables or disables logging for eventtype n1. \"geteventlogging\" - returns whether logging is enabled for eventtype n1. \"getobjectpathslistsize\" - returns the size of the objectpaths array. \"getinvolvedpathslistsize\" - returns the size of the involvedpaths array. \"getotherpathslistsize\" - returns the size of the otherpaths array. \"geteventtypeslistsize\" - returns the size of the eventtypes array. \"getloggedeventtypeslistsize\" - returns the size of the loggedeventtypes array. \"geteventtypecode\" - returns the index of the eventtype by name passed as n1. Example string objectpath = eventloginfo(ELI_GET_OBJECTPATH,1); eventqty () Gets the number of events currently pending Description Returns the number of events currently pending. Example eventqty() excelclose (num save [1/0]) Close the currently open Excel workbook Description This command closes the currently open Excel workbook. If save is 1, the workbook will be saved before it closes. If save is 0, changes made to the workbook will be discarded. Example See the example for excelopen(). excelcreatesheet (str name) Creates a new worksheet in the currently open Excel workbook Description Creates a new worksheet. The new sheet will be given the specified name. Example excelcreatesheet(\"MyNewSheet\"); excelcreateworkbook () Create an Excel workbook Description This command creates a workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open or create another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelcreateworkbook(); excelsetsheet(\"Sheet1\"); excelwritenum(1,1,1); excelsave(\"NewWorkBook.xlsx\"); excelclose(0); This first creates a link between FlexSim and a new Excel workbook, sets the active sheet in the workbook to \"Sheet1\", writes a 1 to row 1 column 1, saves the workbook, then closes the workbook. exceldeleterange (str rangename) Deletes the specified range of the currently open Excel workbook Description Deletes the specified range. Does not affect the data in the range. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example exceldeleterange(\"MyRange\"); exceldeletesheet (str name [, int allowwarning]) Delete the worksheet in the currently open Excel workbook Description Deletes the specified worksheet. If allowwarning is 1, you will be warned before you delete a sheet with data. Example exceldeletesheet(\"MyNewSheet\"); excelexportnode (node table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelexporttable() Description This command is deprecated. Use excelexporttable() instead. Example excelexportnode(reftable(\"Table1\"),1,1,5,3); excelexporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Exports data from a table within FlexSim to the currently open Excel workbook Description Exports data from a table within FlexSim to Excel. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelexporttable(\"Table1\",1,1,5,3); excelgetrangeparam (str rangename, num param) Retrieves a location parameter about the named range of the currently open Excel workbook Description Retrieves a location parameter about the named range. Valid values for param are: 1 = Starting Row Number 2 = Starting Column Number 3 = Ending Row Number 4 = Ending Column Number 5 = Width 6 = Height This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example int width = excelgetrangeparam(\"MyRange\",5); excelgetrangesheet (str rangename) Gets the name of the worksheet associated with rangename of the currently open Excel workbook Description Returns the name of the worksheet where the specified range is located. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example pt(excelgetrangesheet(\"MyRange\")); excelimportnode (obj node, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelimporttable() Description This command is deprecated. Use excelimporttable() instead Example excelimportnode(so(),1,1,5,3); excelimporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols) Imports data from the currently open Excel workbook to a table in FlexSim Description Imports data from Excel to a table in FlexSim. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelimporttable(\"MyTable\",1,1,5,3); excellaunch ([str launchdir]) Launch Microsoft Excel Description This command opens Microsoft Excel so that it can be accessed by FlexSim. If launchdir is not specified, the path defined in Tools|Excel...|Global Settings will be used. Otherwise, the launchdir must be an accurate path to the location on the hard drive where EXCEL.EXE is located. It is typically something like \"C:/Program Files/Microsoft Office/Office10,\" but may be different depending on the version of Excel installed. It is generally not required to launch Excel before communicating with it. However, if FlexSim is set to communicate with Excel via DDE (by calling maintenance(1000,1), this is not the default behavior) Excel must be running before any communication can be performed. If excellaunch() is called at the beginning of communication, excelquit() must also be called before the user opens a new model, compiles the current model or closes FlexSim. Example excellaunch(\" C:/Program Files/Microsoft Office/Office10\"); excelopen(\"C:/mybook.xls\"); excelsetsheet(\"Sheet1\"); double thenum = excelreadnum(1,1); excelclose(true); excelquit(); This starts Excel, opens a workbook called \"mybook,\" stores a value read from row 1, column 1 from that workbook, then closes the file and Excel. excelmacro (str macro) Deprecated Description This command is deprecated. This command allows the user to send an Excel 4.0 macro command to Excel. This language is no longer maintained by Microsoft and may be removed from future versions of Excel. Example excelmacro(\"select(\\\"r1c1:r5c5\\\")\"); This selects the section of the workbook beginning at row 1, column 1 to row 5, column 5. excelmultitableexport () Starts the automatic exporting of data from FlexSim tables to Excel Description Starts the automatic exporting of data from FlexSim tables to Excel sheets as setup in the Excel Import/Export tool. Example excelmultitableexport() excelmultitableimport () Starts the automatic importing of data from Excel to FlexSim tables Description Starts the automatic importing of data from Excel sheets to FlexSim tables as setup in the Excel Import/Export tool. Example excelmultitableimport() excelopen (str workbook) Open the Excel workbook Description This command opens the file called workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelopen(\"mydata.xls\"); excelsetsheet(\"Sheet1\"); double myvalue = excelreadnum(1,2); excelclose(0); This first creates a link between FlexSim and an Excel workbook called \"mydata.xls\", then sets the active sheet in the workbook to \"Sheet1\", sets a local variable called myvalue to the number read from row 1 column 2, then closes the workbook without saving. excelquit () Close Microsoft Excel Description This command closes Microsoft Excel if it is open. After this command is called, no other commands to Excel should be called. Any Excel files that were open should be closed before this command is called. You may get an Excel prompt to save changes to any workbooks that were left open. Use excelclose() to avoid this. This command must be called if excellaunch() was called previously. Example see excellaunch(); excelrangeread (str rangename[treenode target], num row, num col[, num numRows, num numCols, num flags]) Reads an Excel range and dumps it to a treenode Description This function is overloaded so that it has two functions depending on which arguments you pass in. The first (where you pass in a string) is deprecated. Use excelrangereadnum() and excelrangereadstr() instead. The second (where you pass in a treenode) will read a range in Excel and assign all of the data in that range to the target treenode. If the treenode has bundle data, the excel data will be set on the bundle. Otherwise, subnodes will be inserted under the target treenode that will have the Excel data set on them as either string or number data, in the same format as Global Tables. The origin of the range is specified by the row and col passed in, and the second pair of numbers will specify the size of the range. If 0 is passed in for any one of these, Flexsim will automatically choose the boundary in that direction of the Excel range that has data. Flags can be passed in to change exactly what is read from Excel. Those flags are EXCEL_DATA_AUTOMATIC, EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, EXCEL_DATE_AS_NUM, EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_DATA_AUTOMATIC will assign string or number data based on what the datatype of the Excel cell is. This is the default behavior. EXCEL_DATA_NUMBER will force all Excel data to be read as a number. EXCEL_DATA_STRING will force all Excel data to be read as a string. EXCEL_DATE_AS_NUM will read any Excel dates as numbers readable by Flexsim as dates. Otherwise, the data will come in as a string. EXCEL_USE_COLUMNHEADERS will take the first row of data and use it as names for the table columns instead of data. EXCEL_USE_ROWHEADERS will take the first column of data and use it as names for the table rows instead of data. Example treenode myTable = node (\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangeread(myTable, 1, 1, 5, 0, EXCEL_DATA_AUTOMATIC | EXCEL_USE_COLUMNHEADERS); This will read data from the active sheet starting at cell A1. It will read the first five rows, and read as many columns as have data in them. The first row will be used as names for the columns of the Global Table we're writing to. Therefore, if the Excel sheet has 10 columns with data in them, a total of 40 nodes will be inserted under the data variable of the Global Table. Each of those nodes will have the datatype of their corresponding Excel cell. excelrangereadnum (str rangename, num row, num column) Read the numeric value from a cell of the specified range of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadnum(\"MyRange\",5,1) excelrangereadstr (str rangename, num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the specified range of the currently open Excel workbook Description Reads a text value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadstr(\"MyRange\",5,1) excelrangewrite (treenode source, num row, num col, num flags) Reads data from a source table node and writes it to the active Excel sheet Description This function will write all the of the data from the source table node to the active Excel sheet. If the treenode has bundle data, this will read the bundle and write it to the sheet, otherwise it will look for child nodes with data on them, like a Global Table. The row and col passed in specify where on the Excel sheet to begin writing the data. All of the data on the source node will always be written. Flags can be passed in to change the use of headers. Those flags are EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_USE_COLUMNHEADERS will write any existing column headers as a separate row in the Excel table. EXCEL_USE_ROWHEADERS will write any existing row headers as a separate column in the Excel table. Example treenode myTable = node(\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangewrite(myTable, 1, 1, EXCEL_USE_ROWHEADERS | EXCEL_USE_COLUMNHEADERS); This will take all of the data in GlobalTable1 and write it to the active Excel sheet, starting at cell A1. Before it writes any of the actual data, there will be a row of column headers and column of row headers. excelrangewritenum (str rangename, num row, num column, num value) Write the numeric value to a cell of the specified range of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritenum(\"MyRange\",5,1,99.87) excelrangewritestr (str rangename, num row, num column, str value) Write the string value to a cell of the specified range of the currently open Excel workbook Description Writes string value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritestr(\"MyRange\",5,1,\"My String\") excelread (num row, num col) Deprecated, use excelreadnum(), excelreadstr() or excelreadcell() Description This command is deprecated. Use excelreadnum(), excelreadstr() or excelreadcell() instead. Example excelreadcell (num row, num col[, num flags]) Returns the value of a cell in the active worksheet as a variant Description Returns the value of a cell in the active worksheet as a variant. Flags can be specified to specify what exactly is returned from Excel. Those flags are EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, and EXCEL_DATE_AS_NUM. EXCEL_DATA_NUMBER will read the Excel data as a number. EXCEL_DATA_STRING will read the Excel data as a string. EXCEL_DATE_AS_NUM will interpret any Excel dates as a Flexsim readable date number. Example Variant value = excelreadcell(1, 5, EXCEL_DATA_NUMBER | EXCEL_DATE_AS_NUM); This returns the value of the 5 column in the first row as a number. If it's a date, the number returned will be Flexsim readable as a date. excelreadnum (num row, num column [, num rowchar, num colchar]) Read the numeric value from a cell of the active sheet of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column of the active sheet of the currently open Excel workbook. Example excelreadnum(5,1) excelreadstr (num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the active sheet of the currently open Excel workbook Description Reads a text value from a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelreadstr(5,1) excelsave ([str filename]) Saves the currently open Excel file Description Saves the currently open Excel file. If a filename is passed to this command, the file will be saved with that name. This is the equivalent of selecting Save As from Excel's File menu. If no parameters are passed to this command, the file will be saved with its current name, and the original file will be overwritten. This is the equivalent of selecting Save from Excel's File menu. Example excelsave(\"runresults_001.xls\") excelsetrange (str rangename, num startrow, num startcolumn, num endrow, num endcolumn) Creates or changes a named range of the currently open Excel workbook Description Creates or changes a named range. The range will be on the active sheet. The range's upper-left cell is defined by startrow and startcolumn. The bottom-right cell is defined by endrow and endcolumn. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelsetrange(\"MyRange\",5,5,10,15); excelsetsheet (str sheetname) Sets the active worksheet of the currently open Excel workbook Description This command sets the active worksheet in the currently open Excel workbook. Whenever excelreadnum() or excelreadstr() are called, the value read will come from the active worksheet. The active worksheet may be set many times for the same open workbook. Example See the example for excelopen(). excelupdatepreferences () SYSTEM USE ONLY Description SYSTEM USE ONLY - used to update global variables to match preferences. Called in startupRT.txt and in OnSelect of Excel Preferences GUI. Example excelupdatepreferences() excelversion () Gets the version of Microsoft Excel Description Returns a string that contains the Excel interface version. Example excelversion() excelwrite (str data, num row, num col) Deprecated, use excelwritenum() and excelwritestr() Description This command is deprecated. Use excelwritenum() and excelwritestr() instead. Example excelwritenum (num row, num column, num value [, num rowchar, num colchar]) Write the numeric value to a cell of the active sheet of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritenum(5,1,99.87) excelwritestr (num row, num column, str value [, num rowchar, num colchar]) Write the string value to a cell of the active sheet of the currently open Excel workbook Description Writes string value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritestr(5,1,\"My String\") executefsfile (str filename, num direct) Description For developer use. Executes Flexscript code in a file. The specified file is loaded and its content is executed. The contents of the file are assumed to be valid Flexscript code. If direct is 0, then FlexSim's program directory will be concatenated onto the front of filename, otherwise filename will remain as it is. Example executefsfile(\"c:/myscript.fs\",1) executefsnode (node thenode, node c[, node i, node/num/str eventdata, int nobuild]) Execute a node as Flexscript Description Dynamically execute a node as Flexscript. If the node is not already Flexscript, the nobuild parameter should be 0. Used to parse string data into Flexscript to execute, such as from a global table or label. The c and i parameters can be accessed in the function as c and i. The eventdata parameter can be accessed as eventdata if it is a string or as eventcode (an integer) if it is a number. If eventdata is a node, it can be accessed using tonode(eventdata) in the function. Example executefsnode(current.labels[\"myFunc\"],NULL,NULL,NULL,0) This executes the script on current's myFunc label, passing NULL into the function for c,i,and eventdata. executestring (str thestring[, node c, node i, obj eventdata]) Executes a string as flexscript Description Executes the given string as flexscript. Parameters 2-4 are the same as executefsnode. Example executestring(\"profileevents()\"); executesubflow (obj/str processFlow [, obj instanceObject, str startActivity, str finishActivity]) Description Creates a token in a Process Flow Sub Flow which starts that sub flow. Once the created token hits a Finish activity it will return the value evaluted from the Return Value field. instanceObject: If the instanceObject is specified then current may be used by the activities in the Sub Flow to get access to the instanceObject. This can be useful when multiple objects execute the same Sub Flow but require object specific data. If no Start activity is specified, the activities in the Sub Flow will be searched and the first Start activity will be used. If multiple Finish activities are contained in the Sub Flow, the return value will be evaluated from whichever Finish activity the token enters. However, if internal sub flows cause other tokens to enter a Finish activity, it may be necessary to specify the Finish activity name so the correct return value is evaluated. NOTE: It is important that the activities used in the Sub Flow do not create delays or wait. If the token is interrupted by a delay or wait, the token will not arrive at the Finish activity when the executesubflow function finishes. Example return executesubflow(\"SubFlow1\", processor); executetablecell (str/node/num table, num row, num column) Deprecated, use Table.executeCell() or the Table's [] operators Description This command is deprecated. Use Table . executeCell () or the Table class's [] operators instead. Executes the table cell's text as Flexscript. Example exp (num value) Deprecated, use Math.exp() Description This command is deprecated. Use Math . exp () instead. Returns (e ^ value) where e is 2.7183. Example exponential (num location, num scale [, num stream]) Returns a random sample from an exponential distribution Description exponential( γ , β , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ² Possible Applications: Often used to model the interarrival times of a continous stream of customers and/or customer orders into a system. It is also a popular distribution for modeling the time between failure of mechanical equipment. Comments: Variates less than the mean occur much more frequently than variates greater than the mean. The exponential distribution is the only continuous distribution with the memoryless property of producing totally independent variates. If the location parameter ( γ ) is set to zero, then β becomes the mean, and the distribution's variates will range between zero and infinity. The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. Example exponential(0, 10, 5); An exponential distribution with a location of 0 and a scale of 10 (mean = 10). FlexSim's random stream number 5 will be used to generate variates from the distribution. exportdataset (node datatree, str filename, num format[, str wrOption = \"w\"]) Description Export tree dataset to .CSV (Comma Separated Value) format. the format parameter can be: 1 = table 2 = graph 3 = graphxy This implements the opposite functionality of importdataset(). Refer to importdataset() for more information. Example exportdataset(so(),\"mydataset.csv\",1) exportfullhistory ([str filename, num scenario, num replication]) Deprecated Description This command is deprecated. Writes to a database (.mdb file) the Full History data that was collected during a run. If a file name is passed to this command, that name willbe used for the database. If no file name is passed in, the user will be prompted for a file to save the data to. If the file (either passed in or selected from a dialog) does not exist, it will be created. Example exportfullhistory(\"myrundata.mdb\"); exporttable (node exportnode, str filename[, num exportcolumnnames = 0, num exportrownames = 0, str listseparator = 0, str decimalseparator = 0]) Export a table in .CSV format Description Export a table in .CSV (Comma Separated Value) format. Example exporttable(so(),\"mytable.csv\",1, 1) This exports the table designated as so(), including row and column headers. extremevalue1a (num location, num scale[, num stream]) Returns a random sample from a extremevalue1a distribution Description Generates a continuous random variate from a extremevalue1a distribution with parameters as defined. Example extremevalue1b (num location, num scale[, num stream]) Returns a random sample from a extremevalue1b distribution Description Generates a continuous random variate from a extremevalue1b distribution with parameters as defined. Example fabs (num value) Deprecated, use Math.fabs() Description This command is deprecated. Use Math . fabs () instead. Absolute value of the argument. Example factorial (num value) Deprecated, use Math.factorial() Description This command is deprecated. Use Math . factorial () instead. Factorial of value. Example familycreate (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Create a new family (a list of nodes used for organizing relational information). Example familycreate(item,\"family1\") familydelete (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Delete a family. Example familydelete(item,\"family1\") familymember (obj familycontainer, str name, num index) Description This command is deprecated. Use the Group class instead. Returns a pointer to a member of the specified family. Example familymember(item,\"family1\",2) familymemberadd (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Adds a new family member to the specified familycontainer. Example familymemberadd(item,\"family1\",item.subnodes[1]) familymemberdel (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Removes a family member from the specified familycontainer. Example familymemberdel(item,\"family1\",item.subnodes[2]) familymemberqty (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Returns the size of the specified family. Example familymemberqty(item,\"family1\") fastforward () Description For developer use. Saves off the current runspeed, sets the run speed to max, suspends draw, and then runs to the next stop time. Once the next stop time is reached drawing is resumed and the runspeed is restored. Example fastforward() fastspline (obj spline, num perc [0-1]) Description For developer use. Get a spline mapping from a cached spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will use the precalculated values for the spline object given in spline. The parameter perc is the position along the spline of interest. The precalculated values are evaluated when the fastsplineall() or fastsplineupdate() commands are used. Example fastspline(splinestartnode,1) This activates the spline pointed to splinestartnode at its furthest point (100 percent along the spline). fastsplineall (obj starttree {model}, num res) Description For developer use. Cache all splines at once. The geometry for all splines in the model are evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinery(), splinery(), splinery(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineall(model(),20) fastsplineupdate (obj spline, num res) Description For developer use. Cache a spline's shape to increase it's speed. The geometry for all splines in the model are re-evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineupdate(so(),20) fglColor (num red {0-1}, num green {0-1}, num blue {0-1}[, num alpha {0-1}]) Sets the color for drawing a mesh in OpenGL Description Sets the color for drawing a mesh in OpenGL. The rgb color components are between 0 and 1. The optional alpha component is between 0 (transparent) and 1 (opaque). Example fgldebuglevel (num level [0-3]) Description For developer use. Set the OpenGL debug level. The higher the number, the more scrutiny is put on the system, and the more reporting is done. 0 is none, 3 is maximum. Example fgldebuglevel(3) fglDisable (num setting) Disables an OpenGL draw setting Description Disables an OpenGL draw setting. See glEnable() for list of draw settings. You can refer to standard OpenGL documentation for more information if needed. Example fglDisable(GL_LIGHTING); fglEnable (num setting) Enables an OpenGL draw setting Description Enables an OpenGL draw setting. Note that for optimization purposes, FlexSim's drawing engine does not automatically restore the enabled/disabled state of a given setting, so it is up to you, if you use this command, to restore the setting to its default after you have executed your drawing functionality. Failing to restore a setting to its default will result in weird rendering of other objects in the model. Common OpenGL draw settings: GL_LIGHTING Turns lighting on and off. Turn it on if polygons do not change color when they turn away from the viewer. Default: enabled. GL_CULL_FACE Turns back-face culling on and off Turn it off if you want both sides (front and back) of all polygons drawn. Default: disabled. GL_TEXTURE_2D Turns texturing on and off. Turn it off if a texture is being displayed and you don't want it there. Default: enabled. You can refer to standard OpenGL documentation on glEnable() for more information if needed. Example fglEnable(GL_LIGHTING); fglinfo (num operation, obj view) Gets information about a 3D view's draw state Description This command gives you access to various information about the draw state of a 3d view. Logic/data that is performed/returned is based on the operation parameter, as follows: FGL_INFO_SHADERTYPE - returns what part of the draw pass is happening, such as rendering the shadow map (SHADERTYPE_RENDER_SHADOWS), blurring the shadow map (SHADERTYPE_BLUR), or rendering the objects to the screen (SHADERTYPE_DEFAULT). Example /*do not draw this object when rendering the shadow map*/ if (fglinfo(FGL_INFO_SHADERTYPE, view) == SHADERTYPE_RENDER_SHADOWS) return 0; fglLoadIdentity () Description Loads the identity matrix into the current OpenGL drawing context, or in other words, replaces the current matrix with the identity matrix. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Loading the identity matrix is simply a way of resetting things to the origin, so there's no rotation, translation or scaling. The default position is (0,0,0) and the default orientation is looking down the negative z-axis. You can refer to standard OpenGL documentation for more information if needed. Example fglLoadIdentity() fglMatrixMode (num mode) Specifies which matrix stack is the target for subsequent matrix operations Description Specifies which matrix stack is the target for subsequent matrix operations. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW which is used when moving objects around the scene. You can refer to standard OpenGL documentation for more information if needed. Example fglMatrixMode(GL_MODELVIEW); fglNormal (num x, num y, num z) Sets the normal vector for shading subsequent vertices in OpenGL Description Sets the normal vector for shading subsequent vertices in OpenGL drawing. Polygons will be flat shaded unless normals are applied to them. A normal is a vector that is perpendicular to the polygon and points in the direction the polygon is facing. Remember polygons with vertices defined in a counter-clockwise winding points forward per the \"right-hand rule\". Polygon shading is based on the angle between the normals and the light source. Normals are applied to each vertex in the same way colors are, but is usually just defined at the start of each polygon definition. When a polygon's normals point directly at the light source, they are brightly shaded; and are darker shaded when the angles are skewed. You can refer to standard OpenGL documentation for more information if needed. Example fglNormal(1,0,0); fglPopMatrix () Pops the current OpenGL drawing context from the matrix stack Description Pops the current OpenGL drawing context from the matrix stack, or in other words returns to the space on the top of the stack. The OpenGL stack stores the space matrix in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPopMatrix(); fglPushMatrix () Pushes the current OpenGL drawing context onto the matrix stack Description Pushes the current OpenGL drawing context onto the matrix stack which can later be retrieved with glPopMatrix(). If you are drawing more than one object and you don't want the glTranslated, glRotated or glScaled to affect the next objects, you should use glPushMatrix and glPopMatrix. The OpenGL stack stores the space matrices in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPushMatrix(); fglRotate (num degrees, num x, num y, num z) Rotates the current OpenGL drawing context by degrees around axis x,y,z Description Rotates the current OpenGL drawing context by degrees around an axis defined by the vertex (x,y,z). Anything drawn after a rotation is based on the new rotation of the axes. See glVertex3d for definition of the OpenGL xyz coordinate system. You can refer to standard OpenGL documentation for more information if needed. Example fglRotate(90,1,0,0); fglScale (num x, num y, num z) Scales the current OpenGL drawing context by x,y,z Description Scales the current OpenGL drawing context by the given scale parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after this command is based on the change in scale of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglScale(2,4,1); fglTranslate (num x, num y, num z) Translates the current OpenGL drawing context by x,y,z Description Translates the current OpenGL drawing context by the given translation parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after a translation is based on the new location of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglTranslate(15, 4, 0); filebrowse (str extension, str description, str startpath) Opens a file selection dialog Description Opens a file selection dialog that allows the user to select the specified file type(s). Different types should be separated by semicolons(;). The dialog's default directory is the path specified. The commands pdir() and cdir() can only be passed as the path parameter in C++. Example string filename = filebrowse(\"*.fsm; *.fsp; *.fsv; *.fss\",\"FlexSim Files\",pdir()); fileclose () Closes the FlexSim file interface Description Closes the FlexSim file interface and saves any data written to the file while it was open. Example fileclose() fileexists (str filepath) Returns 1 if the file exists, 0 otherwise Description Returns 1 if the file exists, otherwise 0. Example if(fileexists(\"C:/myfile.txt\")) { fileopen(\"C:/myfile.txt\"); fpt(\"Hello World\"); fileclose(); } fileisreadonly (str filename) Description For developer use (Dynamo). Looks for the string \"READONLY\" in the PROPERTY_COMMENTS of the specified file. Example fileisreadonly(pdir() + \"\\\\flexsim.exe\") fileopen (str filename [, str opentype]) Opens the FlexSim file interface Description Opens the FlexSim file interface. Returns 1 if successful. Returns 0 if an error is encountered. Parameter 2 can be \"w\" for writing, \"r\" for reading, or \"a\" for appending. Default is \"w\". Use the commands fpt(), fpr(), fpf(), etc. to write to the opened text file. Use filereadline() to read a line from the file. Using this command, you can only have one file open at a time. To write to multiple files simultaneously, use the C standard fopen/fclose commands or C++ standard fstream classes in C++ or through a dll. If in write mode, the contents of the file will be cleared, and the file pointer will be set to the top of the file. The file must be closed to save any data written to the file. Example fileopen(\"C:/myfile.txt\", \"w\"); filereadline () Reads a line from the currently open file Description Reads a line from the currently open file. Used with fileopen() Example string nextline = filereadline(); fillarray (array thearray, num/treenode/string val1[, num/treenode/string val2, ...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class to construct the array using an array literal: Array arr = [1, 2, 3]; Fill a local array with values. Example fillwithatts (obj object, num attgroup) Description For developer use. Fill an object with attribute from an attribute group. Example fillwithatts(so(),1) findmatch (num nr, num matchexpression[, returnexpression = count, num reverseorder = 0]) Description Performs a matching test a defined number of times, and when a match is found, returns a user-definable value associated with that match. Within the match expression and return expression, \"count\" can be used to determine which iteration your are on in the check. This can be used to search in a list of things for a matching item or criterion. If returnexpression is not included in the call, then findmatch() will return the count associated with the matching expression. If no matches are found, findmatch() will return 0. If reverseorder is 1, then it will go backwards, assigning count to nr first, then nr - 1, etc. down to 1. If returnexpression is left out, then findmatch will return the count associated with the found match. Example int portNr = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5); This example will return the output port number that corresponds to the first object it finds connected to current's output ports that has a content less than 5. treenode object = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5, current.outObjects[count]); This example is similar to the previous example except it will return the object itself instead of the associated port number. int item2Rank = findmatch(current.subnodes.length, current.subnodes[count].type == 2); This example will return the rank number of the first item found in current's queue that has an item type of 2. findmax (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the maximum value found, or a user-definable return value associated with that maximum value. Within the value expression, return expression and criterion, \"count\" can be used to determine which iteration you are on in the check. If the return expression is not defined, the maximum value found will be returned. Additionally, you can specify a criterion to filter out values as invalid. If criterion is defined and nothing meets the criterion, 0 will be returned. Example double latestCreation = findmax(current.subnodes.length, getcreationtime(current.subnodes[count])); This example will return the maximum creation time of all items in current. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length; This example will return the input port number associated with the object with the largest queue of items. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length, count, getitemstate(current.inObjects[count].first) == FR_STATE_READY); This example is the same as the previous example, but additionally in includes a criterion that the first item in the upstream object must also have been released. findmin (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the minimum value found, or a user-definable return value associated with that minimum value. findmin() is the same as findmax() except it finds the minimum value instead of the maximum value. For more information, refer to the documentation for findmax(). Example Refer to findmax() findownerobject (node thenode) Description Like ownerobject(), this command returns the object node containing thenode. Unlike ownerobject(), this command does not cache the result, but searches in the tree for the \"owner\" node. For example when a TaskExecuter transfers from one NetworkNode to another on a network path, a coupling node is transferred to the new node to keep track of the TaskExecuter's current node, and findownerobject() is used to get access to the correct \"owner\" node. Example findownerobject(c) findundorecordbyid (obj view, num id) Description Returns the undo record with the specified id for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); treenode record = findundorecordbyid(ownerobject(c),id); finishundorecord (obj view, num uniqueid) Description Finishes an undo record for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example finishundorecord(view, getundorecordid(record)); firecreateevent (obj object, num x, num y, num z, num iscopy [, num libraryfunctiononly]) Description For developer use. Fires the creation event of the specified object. x, y, and z are the rz the object was dropped at. Example firevalue of 0 islast(model()),0,0,0, 1); first (node container) Deprecated, use treenode.first Description This command is deprecated. Use treenode . first instead. Reference a parent node's first child node. Example flipselected (num firstX, num firstY, num secondX, num secondY[, node roottree]) Flip selected objects across an axis Description Flip selected objects across the axis defined by the two passed xy points Example flipselected(1, 5, 2, 7) This example flips the selected objects across the axis defined by the points point (1, 5) and (2, 7) floor (num num) Deprecated, use Math.floor() Description This command is deprecated. Use Math . floor () instead. Gets the largest integral value not greater than num. Example fluidcontent (obj fluidobject) Gets the current fluid content of fluidobject Description Returns the current fluid content of the specified Fluid Object. It is the same as reading the \"curcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objcontent = fluidcontent(current.outObjects[1]); fluidmaxcontent (obj fluidobject) Gets the max fluid content of fluidobject Description Returns the defined maximum fluid content of the specified Fluid Object. It is the same as reading the \"maxcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objmaxcontent = fluidmaxcontent(current.outObjects[1]); flyactive () Returns 1 if there is an fly path running, 0 otherwise Description Returns 1 if there is a fly path currently being run, 0 otherwise. Example flyactive() flyendnode (node x) Gets a reference to the node that represents the stopping point for the current fly path Description Returns a reference to the node in the tree that represents the stopping point for the current fly path. Example Used in the presentation builder GUI. flypath (obj view, num pathno [, num singlerun]) Description For developer use. This command begins the predefined flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypath(ownerview(c),1); This will run flypath number 1 in the view window containing an event's code. flypathadd (obj view, num pathno) Description For developer use. This command adds a flypath to the flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypathadd(ownerview(c),1); This will add a flypath to flypath number 1 in the view window containing an event's code. flypathreset (obj view, num pathno) Description For developer use. This command clears the points from the flypath numbered pathno in the view specified as view. Once the points have been cleared, a new set of flypath points can be generated. Example flypathreset(ownerview(c),1); This clears the flypath points out of flypath 1 in the view containing an event's code. flystart (obj view) Description For developer use. Start fly mode. Example flystart(ownerview(c)) flystop () Description For developer use. This command stops any active flypaths. Example flystop(); This causes all flypaths that are currently active to stop moving. flyto (obj view, num endtime, num x, num y, num z, num rx, num ry, num rz) Description For developer use. Fly to the specified viewpoint over time. Example flyto(sv(),10000,0,0,20,-50,0,-30); flyupdate () Updates the currently active fly path Description Updates the currently active fly path if there is one Example fmod (num value1, num value2) Deprecated, use Math.fmod() Description This command is deprecated. Use Math . fmod () instead. Remainder of value1/value2 as a double. Example for (initalstatement; whiletrueexpression ; countstatement) Description Perform a number of loops. The initialstatement will be executed once before starting the loop. The whiletrueexpression will be evaluated before executing each loop and the loop will stop as soon as this expression is true. The countstatement is executed at the end of each loop and usually increments a counter. Refer to the help manual under Writing Logic in FlexSim for more information. Example for(int i = 1; i <= 5; i++) { msg(\"for loop\",\"\"); } forobjecthighlightedin (obj view) { } Description This command is deprecated. Use selectedobject() instead. Iterate on the node that is both selected (red) and highlighted (yellow) in the selected view. Reference the selected and highlighted node by using \"a\" within the loop. Example forobjecthighlightedin(sv()) { pt(a.name); pr(); } This prints to the outputconsole the name of the selected, highlighted node in the first level of the model. forobjectlayerunder (node container) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the tree layer directly under the node specified as container. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectlayerunder() command can only be used in flexscript, not C++. Example forobjectlayerunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the first level of the model. forobjectsbefore (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value less than or equal to the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbefore() command can only be used in flexscript, not C++. Example forobjectsbefore(model.subnodes[5])) { pt(a.name); pr(); } This prints to the outputconsole the name of the first 5 objects in the model. forobjectsbehind (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value greater than the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbehind() command can only be used in flexscript, not C++. Example forobjectsbehind(model.subnodes[5]) { pt(a.name); pr(); } This prints to the outputconsole the name of the objects in the model starting with the sixth one. forobjectselectionset (node container) { } Description This command is deprecated. Instead use: for(int i =1; i<= container.subnodes.length; i++) { if(switch_selected(container.subnodes[i])) { pt(container.subnodes[i].name); pr(); } } The block following the command will be iterated upon once for each selected object in the container. The value of the \"a\" command will return the pointer to the object being iterated upon. This command is not available in C++. Example forobjectselectionset(library()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object currently selected in the library tree. forobjecttreeunder (node container) { } Description Execute a block of code for each node that is in the tree under the node specified as container, including all sub-trees. To access the node that is currently active in the loop, the \"a\" command is used. The forobjecttreeunder() command can only be used in flexscript, not C++. Example forobjecttreeunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the model, including those inside other objects. fpc (num value) Prints an ASCII character to the open file Description Prints an ASCII character to the open file. Common values: TAB = 9, LF = 10, CR = 13 Example fpc(9) fpd (num value) Prints an integer value to the open file Description Prints an integer value to the open file. Floating point values will be truncated. Example fpd(3) prints 3 fpd(3.23) prints 3 fpd(3.954) prints 3 fpd(4) prints 4 fpf (num value) Prints a floating point value to the open file Description Prints a floating point value to the open file. Example fpf(1.234) fpm (num feetperminute) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/minute. Example fpm(9) fpr () Prints a return (new line) to the open file Description Prints a return (new line) to the open file. Example fpr() fps (num feetpersecond) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/second. Example fps(9) fpt (str text) Prints a string to the open file Description Prints a string to the open file. Example fpt(\"Hello\") frac (num value) Deprecated, use Math.frac() Description This command is deprecated. Use Math . frac () instead. Gets the decimal part of value. Example freeoperators (obj taskexecuter, obj involved) Release all operators connected to taskexecuter that are working on involved Description Release all operators connected to the specified dispatcher that are currently working on the involved object. This command should be executed from a trigger when you want to release operator(s) that you have called to a process using the requestoperators command or using a utilize task. The first parameter can be either a dispatcher connected to operator(s) that you want to free, or it can be the operator itself. The second parameter is a key for releasing the appropriate operator(s). If you have called the operator(s) using the requestoperators command, then the second parameter of the freeoperators command should match the third parameter of the requestoperators command. If you have given an operator a utilize task, then the second parameter of the freeoperators command should match the involved1 parameter of the utilize task. You would probably execute this command from a trigger like OnProcessFinish or OnSetupFinish. For more information, refer to the task sequence section of the user manual. Example freeoperators(current.centerObjects[1], item); fscheckall (node startingnode) Description For developer use. This command checks for errors in all flexscript nodes under and including the specified startingnode and outputs the results to the compiler console if it finds atleast one error. Example fscheckall(main()); ft (num feet) Gets the number of model length units in the number of feet Description Return the number of model length units in the specified number of feet. Example ft(3) function_n (obj object, num index [, num param_a,...]) Description For developer use. Executes code associated with a node found in the object's eventfunctions group having the specified event code. The event code is not the rank of the node in the eventfunctions group, but it corresponds to one of the following pre-defined FlexSim event : OnReset 1 OnMessage 2 OnEvent 3 OnDraw 4 OnInopen 5 OnOutopen 6 OnReceive 7 OnSend 8 OnEntering 9 OnExiting 10 OnCompile 11 OnCreate 12 OnDestroy 13 OnLoad 14 OnCollision 15 OnClick 16 OnRunend 17 OnRunstart 18 OnInterrupted 19 OnCaptured 20 OnListen 21 OnPredraw 22 OnDrawplanar 23 OnPredrawplanar 24 OnPreListen 25 Example function_n(current,1,1,2,3) Executes the OnReset event function defined on the current object. function_s (obj object, str name [, num param_a,...]) Description For developer use. Executes code associated with the node found in the object's eventfunctions group having the specified name. For a list of the pre-defined system level events in FlexSim refer to function_n() command documentation. Example function_s(current,\"OnReset\",1,2,3) Executes the OnReset event function defined on the current object. gamma (num location, num scale, num shape[, num stream]) Returns a random sample from a gamma distribution Description gamma( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + α β variance = α β ² Probability Density Functions: Possible Applications: Used to model the time to complete some task such as assembly, customer service or machine repair. Comments: The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Shape values less than 1 are rarely used. Example double repairtime = gamma(60, 2, 3.4, 5); The repairtime variable is set equal to a gamma distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. The mean is 100 + (2*3.4) = 106.8. ge (num value1, num value2) Deprecated, use the >= operator Description This command is deprecated. Use the >= operator instead. Example geometric (num prob[, num stream]) Returns a random sample from a geometric distribution Description Generates a discrete random number with a geometric distribution and parameters as specified. Example get (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getactiverole (treenode person) Description Return the person's active role Example getactiverole(token.Person) getactivity (node/obj/str token/processFlow [, str activityName]) Description If the first parameters is a ProcessFlow object you must specify a string for the activity name. To get the current activity of a token, use Token . activity . Example treenode activity = getactivity(processFlow, \"Delay\"); getallocatedfromkey (obj coordtasksequence, num key) Gets a reference to the object allocated for the allocate task for the given key Description Returns a reference to the object that has been allocated for the allocate task specified by the given key. Example treenode allocatedobj = getallocatedfromkey(getcoordinatedtasksequence(current.centerObjects[1], 0), mykey); getanimationvar (obj object, num/str animation, str varName) Gets the current value of an animation variable Description Gets the current value of an animation variable. See setanimationvar() for more information on animation variables. Example treenode curItem = getanimationvar(current, \"Animation1\", \"Item1\"); getapplicationtitle () Description For developer use. Returns the current application's title as a string. Example msg(getapplicationtitle(),\"Hello world.\"); getbatch (obj/str tokenOrBatch[, obj instanceObject, obj/str/num group]) Description Gets the batch in a Batch activity by token or Group By value. If a token is passed in as parameter 1, then the instanceObject and group parameters are not used. Example treenode batch = getbatch(token); treenode batch = getbatch(\"Batch\", current, 3); getbundlefieldname (node datanode, num fieldnr) Gets the name of the nth ranked field (base 0) in the bundle Description Returns the name of the nth ranked field (base 0) in the bundle. Example string fieldname = getbundlefieldname(x, 5); getbundlefieldnr (node datanode, str fieldname) Gets the rank of the bundle field (base 0) Description Returns the rank of the bundle field (base 0). If the bundle field doesn't exist, returns -1. Example int index = getbundlefieldnr(x, \"Field Name\"); getbundlefieldtype (node datanode, num fieldnr) Gets the data type of the bundle field at rank fieldnr (base 0) Description Returns the data type of the bundle field at rank fieldnr (base 0). Available return values are: BUNDLE_FIELD_TYPE_DOUBLE BUNDLE_FIELD_TYPE_FLOAT BUNDLE_FIELD_TYPE_INT BUNDLE_FIELD_TYPE_STR BUNDLE_FIELD_TYPE_VARCHAR BUNDLE_FIELD_TYPE_NODEREF Example int type = getbundlefieldtype(x, 5); getbundleindexentries (node datanode, str/num field, str/num value) Gets all rows with a matching value in the given field Description If this command succeeds, it returns an int or an intarray containing all entries (0-based) that contain the given value for the given field. If it fails, it returns -1. It will fail if the datanode is not a bundle, or if the given field is not an indexed field, or if none of values in the field match the given value. See the addbundlefield command for information on how to make an indexed field. Example int entryNr = getbundleindexentries(data, \"SKU\", \"FS2016-BLU\"); getbundlenrentries (node datanode) Gets the total number of entries in the bundle Description Returns the total number of entries in the bundle. Example int nrentries = getbundlenrentries(x); getbundlenrfields (node datanode) Gets the total number of fields in the bundle Description Returns the total number of fields in the bundle. Example int nrfields = getbundlenrfields(x); getbundlevalue (node datanode, num entrynr, str/num field) Gets the value of the defined entry (base 0) and field (base 0) of the bundle Description Returns the value of the defined entry (base 0) and field (base 0) of the bundle. Example string name = getbundlevalue(x, 5, \"Object Name\"); getcensus ([obj model/group/location]) Description Get the number of people in the model, a Location group, or an individual location Example int census = getcensus(Group(\"PodA\")); getchecked (obj window) Description For developer use. Returns the checked state of a button. Example getchecked(c) getchildtoken (node parentToken [, int childIndex]) Description Deprecated. Use Token . children [], or Token . children .length. Example treenode childToken = getchildtoken(token, 3); int numChildren = getchildtoken(token); getchildtokenrank (node childToken) Description Deprecated. Use Token . childRank . Example int childRank = getchildtokenrank(token); getcolorcomponent (obj object, num index) Deprecated, use the Color class Description This command is deprecated. Use Color . r or Color . g or Color . b or Color . a instead. Gets the rgb color component of object Example getcoordinatedtasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a coordinated task sequence Description Returns a reference to the coordinated task sequence that is associated with allocation request with the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to the coordinated task sequence that it is currently allocated for. Example treenode coordtasksequence = getcoordinatedtasksequence(current.centerObjects[1], 5); getcreationtime (obj object) Gets the time that a flow item was created Description Returns the time that a flowitem was first created. Example time() - getcreationtime(item) getcurrentundorecord (obj view[, int flags = 0x1]) Description Returns a pointer to the treenode associated with the current undo record in the undohistory of the specified view. This is the record that would be undone first when you perform an undo operation. It is also the most recently created record (potentially deep in the undo aggregation hierarchy) when and aggregated undo operation is being created. The flags parameter lets you optionally adjust what should be returned. 0x1 means get the top-most record for a move-size-rotate undo. 0x2 indicates get the top-most record in a normal aggregated undo. See Miscellaneous Concepts > Advanced Undo for more information. Example treenode record = getcurrentundorecord(view); getcurtask (node tasksequence) Gets the current task number of tasksequence Description Returns the current task number of the task sequence Example if(getcurtask(ts) > 5) pt(\"The operator has finished the first five tasks\"); getdashboardcontrol (str id [, node startnode]) Returns a reference to the dashboard control associated with id Description Returns a reference to the dashboard control that has the ID value of id. This command will search through all open dashboards until it finds a control with matching ID. Passing in a value for startnode will cause the command to only search through the dashboard containing startnode. Dashboard controls include edit fields, buttons, comboboxes, etc. Example treenode accelEdit = getdashboardcontrol(\"accelEdit\", c); //Searches through the current dashboard only getdatastat (num stat, num/node nrSamples/parentNode, num sampler [, num p1, num p2, num p3]) Description Calculates and returns a certain statistic of a data set. stat - Can be one of the following values STAT_MEAN - calculates the sample mean of the set STAT_MIN - calculates the minimum value in a defined range of values. p1 is the first element in the range (default is the first element in the set), p2 is the last element in the range (default is the last element in the set), and p3 defines a stride, allowing you to look at every nth value (default 1). If either of p1, p2, or p3 is 0, then it will revert to that value's respective default. STAT_MAX - calculates the maximum element in a defined range of values. p1, p2 and p3 are the same as for STAT_MIN STAT_VARIANCE - calculates the unbiased variance of the data set STAT_STD_DEV - calculates the unbiased standard deviation of the set STAT_SUM - calculates the sum of the set STAT_CONF_INTERVAL_HALF_WIDTH - calculates the confidence interval half-width of the set. Pass in p1 to define the desired confidence percentage. FlexSim will return precise values for percentages at 80%, 90%, 95%, 98%, 99%, and 99.8% and for sample sizes at or below 100 degrees of freedom. For percentages not in this set, FlexSim will \"clamp\" it to the nearest percentage ABOVE the percentage passed in. So if you pass in a 75%, it will return an 80% confidence interval. Since an 80% confidence interval will be a \"wider\" interval, we clamp up to be \"safer\" with the wider interval. Confidence intervals above 99.8 will simply return 0 (i.e. not valid). For degrees of freedom above above 100, it will assume 100 degrees of freedom. nrSamples - defines the number of samples in the set. Note: parameter 2 as a parentNode is deprecated and you should use the parameter 2 as nrSamples option because it encompasses the other and is more flexible. The following deprecated functionality: getdatastat(STAT_MEAN, myNode, 0, 0, 0, 0) can be represented using the newer option with: getdatastat(STAT_MEAN, myNode.subnodes.length, myNode.subnodes[count].value, 0, 0, 0) sampler - an expression that gets the nth value in the sample. Use count for determining which value is to be retrieved. Below are several examples: For calculating the mean of all values in column 5 of global table GT1: getdatastat(STAT_MEAN, Table(\"GT1\").numRows, Table(\"GT1\")[count][5]) For calculating the sum of all values in field \"Time\" of a bundle: getdatastat(STAT_SUM, Table(\"MyBundle\").numRows, Table(\"MyBundle\")[count][\"Time\"]) Example getdatatype (thing) Deprecated, use treenode.dataType Description This command is deprecated. Use treenode . dataType instead. Gets the datatype of a node Example getdatatype(so()) getdirbrowse (str initialdir, str message, node result) Opens a browser window to pick a directory Description Opens a browser window to pick a directory. destnode should have string data, and the directory path will be written to its text. Example getdirbrowse(documentsdir, \"A folder\", destnode) getdrawtextmetric (str text, num fontsize, num metric[, num a]) Description Returns information about the text. If metric is 1, it will return the width of the text. If metric is 2, it will return the height of the text. If metric is 3, it will return the max fitting length of the text using 'a' as the max extent. Example getdrawtextmetric(\"Hello\",12,1,0); getedgedist (obj netnode, num edgenum) Gets the distance of the edge of a network node Description Returns the distance of the specified edge of the network node. Example getedgedist(current, 1) getedgespeedlimit (obj netnode, num edgenum) Gets the speed limit of the edge of a network node Description Returns the speed limit of the specified edge of the network node. Example getedgespeedlimit(current, 1) getentrytime (obj object) Gets the time that a flow item entered the current object it is in Description Returns the last entry time of the item (the time the flowitem last entered another object). Example time() - getentrytime(item) geteventtime (str EventName, num mode[1/2/3]) Gets a UserEvent's event time Description Returns a UserEvent's event time. Mode: 1 - Repeat time intervals, 2 - Exact event time, 3 - Time until event fires Example double remainingtime = geteventtime(\"myevent\",3); getfilebrowse (str extension, str extensiondescription[, str defaultreturn, str location, num savemode, node filelist]) Opens a standard windows file browser dialog window Description This command opens a standard Windows file browser dialog window. The files shown in the window will have the extensions defined in extension. Different extensions should be separated by semicolons (;) in extension. The text passed as description will be used in the file browser to describe the type of file to open. This command returns a string that is the path of the selected file. If no file is selected, or Cancel is pressed, the command returns an empty string. See filebrowse() command. Example string shapefile = getfilebrowse(\"*.3ds; *.wrl\",\"3D shape files\"); This sets the variable shapefile to the path of a file chosen from a file browser that displays files with the .3ds and .wrl extensions. getfilesindirectory (str directory, str extension, node destnode) Description Retrieves all files in the specified directory that match the specified extension, and populates the content of destnode with nodes holding the path to each matching file. The command returns the number of matching files that were found. The extension parameter should be the specific three (or sometimes four) letter extension that you want to get. For example, if you want all .fsm model files, specify the string \"fsm\". Also, if you pass \"directories\" as the extension parameter, then the command will retrieve the list of directories inside the directory. To get all files, no matter the extension, pass \"*\" as the extension parameter. File paths will be set on the string data (as opposed to the name) of nodes inserted into destnode. Example treenode destnode = Model.find(\"Tools\").subnodes.assert(\"Files\"); int nrfiles = getfilesindirectory(documentsdir(), \"*\", destnode); for(int i = 1; i <= nrfiles; i++) { mpt(\"file: \"); mpt(destnode.subnodes[i].value); mpr(); } getframe (obj object) Gets the current Shape Frame being drawn for object Description Returns the current 3D shape frame that is being drawn for the object. If the 3D shape assigned to the object was named myshape.3ds, and if two additional 3D shapes with file names myshapeFRAME1.3ds and myshapeFRAME2.3ds resided in the same directory as myshape.3ds, then the two additional files would be loaded into FlexSim automatically at the same time myshape.3ds was loaded, and setting the object's frame from 0 to 1 to 2 would change the object's shape to each of the shapes defined by the three files in order. Example if(getframe(current) == 3)) setframe(current, 5); getinput (obj involved) Deprecated, use Object.stats.input.value Description This command is deprecated. Use Object . stats .input.value instead. Returns the input statistic of the involved object. Example double inval = getinput(current.centerObjects[1]); getiteminvolved (obj item) Gets the object reference stored in the FixedResource involved variable for the item Description This returns the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getitemvar, and setiteminvolved commands, to store variables on the items the object receives. Example getiteminvolved(current.first) getitemsendto (obj item) Gets the value of the evaluated sendto for the item Description This returns the value of the evaluated sendto for the item if it is in a FixedResource and has been released. Example getitemsendto(item) getitemstate (obj item) Gets the FixedResource state of the flowitem Description Returns the FixedResource state of the flowitem. This will be one of 3 values: FRSTATE_INQUEUE: The flowitem is in-process; it has not been released yet. FRSTATE_READY: The flowitem has been release, but has not found a downstream object that is ready to receive it. FRSTATE_MOVEREQUESTED: The flowitem has been released, and a downstream object is ready to receive it, but the item is waiting to get picked up by a transport. For more information, refer to the FixedResource documentation. Example getitemstate(so()) getitemtype (obj object) Deprecated, use labels Description This command is deprecated. Use labels instead. Returns the itemtype value of a flow item. Example getitemtype(so()) getitemvar (obj item, num var) Gets the value of a FixedResource variable for the item Description This returns the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example getitemvar(current.first, 3) getkinematics (node infonode, num querytype[, num kinematicindex, num updatetime/traveldist]) Gets information from the specified kinematics operation Description Gets information from the specified kinematics operation. For more information, refer to the help documentation on kinematics. Example getkinematics(current.labels[\"kinematics\"], KINEMATIC_ARRIVALTIME, 1, current.size.x); getlabel (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the value of an object's label. Example getlabelnum (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the number value of an object's label. Example getlabelstr (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the string value of an object's label Example getlastacquiredresource (node resource, node token) Description Gets the last object acquired by the token from the resource. Example treenode operator = getlastacquiredresource(operatorResource, token); getlastfiletype () Description For developer use. Returns the type of the last file saved. 1 = Model file 2 = Project file 3 = View file 4 = Session file 0 = Other file Example if (getlastfiletype()) {pt(\"Known file type\"); pr(); } getlinecontrollerdata (obj linecontroller, num datatype, num column) For Dynamo use Description For Dynamo use. Returns data about the LineController's current job, 1 = ProdID, 2 = LineNum, 3 = Target, 4 = StartTime. 5 = Extra Column Example getlinecontrollerdata(current,1,0); getmodelunit (num querytype) Description Returns information about the model's unit settings. FlexSim's typical units are: time - 1 second, length - 1 meter, volume - 1 liter, mass - 1 kilogram. Also may return a name or abbreviation of the current model's units querytype can be one of the following values: TIME_MULTIPLE returns the number of seconds represented by each time unit in the current model LENGTH_MULTIPLE returns the number of meters represented by each length unit in the current model FLUID_MULTIPLE returns the number of liters represented by each fluid unit in the current model FLUID_TYPE returns 0 if the fluid units represent volume, or returns 1 if the fluid units represent mass DATE_TIME_NODE returns a reference to the date/time node in the model units tree START_TIME returns the start time in seconds (since Jan 1, 1601) START_TIME_NODE returns a reference to the start time node in the model units tree CURRENT_TIME returns the current time in seconds (since Jan 1, 1601) CURRENT_TIME_NODE returns a reference to the current time node in the model units tree STOP_TIME returns the next stop time in seconds (since Jan 1, 1601) STOP_TIME_NODE returns a reference to the stop times node in the model units tree START_YEAR returns the year associated with the start time as a number START_MONTH returns the month associated with the start time as a number betweeen 1 (Jan) and 12 (Dec) START_DAY returns the day associated with the start time as a number, where 1 indicates the first day of the month START_DAYOFWEEK returns the day associated with the start time as a number, where 0 indicates Sunday START_HOUR returns the hour associated with the start time as a number between 0 and 23 START_MINUTE returns the minute associated with the start time as a number between 0 and 59 START_SECOND returns the second associated with the start time as a number between 0 and 59 START_MILLISECOND returns the millisecond associated with the start time as a number between 0 and 999 CURRENT_YEAR returns the number of years since the model start time CURRENT_DAY returns the number of days since the model start time CURRENT_HOUR returns the number of hours since the model start time CURRENT_MINUTE returns the number of minutes since the model start time CURRENT_SECOND returns the number of seconds since the model start time CURRENT_MILLISECOND returns the number of milliseconds since the model start time CURRENT_YEAR_OF_TIME returns the year associated with the current time as a number CURRENT_MONTH_OF_YEAR returns the month associated with the current time as a number between 1 (Jan) and 12 (Dec) CURRENT_DAY_OF_MONTH returns the day associated with the current time as a number, where 1 indicates the first day of the month CURRENT_DAY_OF_WEEK returns the day associated with the current time as a number, where 0 indicates Sunday CURRENT_HOUR_OF_DAY returns the hour associated with the current time as a number between 0 and 23 CURRENT_MINUTE_OF_HOUR returns the minute associated with the current time as a number between 0 and 59 CURRENT_SECOND_OF_MINUTE returns the second associated with the current time as a number between 0 and 59 CURRENT_MILLISECOND_OF_SECOND returns the millisecond associated with the current time as a number between 0 and 999 TIME_NAME returns the name of the model time units TIME_PLURAL_NAME returns the plural name of the model time units TIME_ABBREVIATION returns the abbreviation of the model time units LENGTH_NAME returns the name of the model length units LENGTH_PLURAL_NAME returns the plural name of the model length units LENGTH_ABBREVIATION returns the abbreviation of the name of the model length units FLUID_NAME returns the name of the model fluid units FLUID_PLURAL_NAME returns the plural name of the model fluid units FLUID_ABBREVIATION returns the abbreviation of the name of the model fluid units START_TIME_STR returns the start time as a string, formatted by the date and time formats CURRENT_TIME_STR returns the current time as a string, formmatted by the date and time formats STOP_TIME_STR returns the next stop time as a string, formatted by the date and time formats TIME_FORMAT returns the time format used to format date/time strings DATE_FORMAT returns the date format used to format date/time strings Example getmodelunit(LENGTH_MULTIPLE) getmodelunitnum (num querytype) Description This command is deprecated. Use getmodelunit() instead. Example getmodelunitstr (num querytype) Description This command is deprecated. Use getmodelunit() instead. Returns a name or abbreviation of the current model's units. Example getmoverecord (num record) Deprecated Description This command is deprecated. Returns a movement record that has been recorded for the Full History Report. A movement record is created every time a flowitem moves from one object to another if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a MoveRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnummoverecords(). getmoverecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the movement record that is passed in as the first parameter to the function. This record is the return value from a call to getmoverecord(). The value passed to this function as the second parameter indicates which value from the movement record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The ItemID of the flowitem whose movement is recorded by the record. 2 = The time the flowitem moved. 3 = The object that the flowitem moved from. This is returned as an int and should be converted to a treenode using tonode(). 4 = The object that the flowitem moved to. This is returned as an int and should be converted to a treenode using tonode(); 5 = The itemtype of the flowitem at the time it moved. Example See the example for getnummoverecords(). getname (node thenode) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnetnode (obj object, num nodenr) Gets the nth network node connected to object with an A connection line Description Returns the nth network node connected to the object with a \"blue\" or \"station\" connection line Example getnetnode(current, 1) getnetnodespline (obj netnode, num edgenr) Gets a reference to the spline head of netnode's edge edgenr Description Returns a reference to the spline head for the specified edge of the network node. You can use spline() commands to then access location data for that spline. Note that the spline head may not be inside the network node you're passing, but rather may be in the network node on the other side of the edge. You can use the isedgeforward() command to query whether the spline is inside the network node. If not, then spline percentages disances passed to the spline() command will be backwards. Example treenode splinehead = getnetnodespline(netnode, 2); getnetworkdistance (num fromnetnoderank, num tonetnoderank) Gets the network distance between two network nodes Description Returns the network distance between the network nodes. Note that the network nodes are referenced by their member ranks, not by the pointer to the network node. Use rankfromnetnode() to get a network node's member rank. Example getnetworkdistance(rankfromnetnode(current), rankfromnetnode(current.outObjects[1])); getnextnetnode (num fromnn, num tonn) Gets the rank of the next network node from fromnn in order to get to tonn Description Returns the rank of the next network node to go to from one network node in getting to the destination network node. The return value and parameters will all be network node member ranks. Use rankfromnetnode() to get the member rank of a network node, and netnodefromrank() to get the network node from the member rank. Example treenode nextnode = netnodefromrank(getnextnetnode(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\")))); getnextnetnodeoutport (num fromnn, num tonn) Gets the output port of the network node fromnn in order to get to tonn Description Returns the output port, or edge number, to go to in getting from a source network node to a destination network node. Example int outport = getnextnetnodeoutport(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\"))); getnextparametersobject (obj startobject, str guifocus, num doguifocusclass, num searchforward) Description For developer use. Used in parameters window to access the next object when the \"Next\" button on the parameters window is pressed. Example Refer to object parameters properties windows in the view tree getnodename (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnodenum (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getnodestr (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getnroftasks (obj tasksequence) Gets the number of uncompleted tasks in the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the number of tasks that still need to be completed in the tasksequence (including the current task). Example if(getnroftasks(mytasksequence) > 5) pt(\"There are more than 5 tasks in the tasksequence queue.\"); getnummoverecords () Deprecated Description This command is deprecated. Returns the number of movement records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the move records that have been recorded for (int rec = 1; rec <= getnummoverecords(); rec++) { int record = getmoverecord(rec); pd(getmoverecordvalue(record,0)); pt(\" \"); pd(getmoverecordvalue(record,1)); pt(\" \"); pf(getmoverecordvalue(record,2)); pt(\" \"); pt(getmoverecordvalue(record,3).name); pt(\" \"); pt(getmoverecordvalue(record,4).name); pt(\" \"); pd(getmoverecordvalue(record,5)); pt(\" \"); } getnumpeopleresources (obj group [, num availability{0=available/1=acquired}, num priority]) Description Get the number of available/acquired objects in a people resource group. If a priority value is passed resources will also be considered available if a request of that priority would preempt the resource. Example int numAvailable = getnumpeopleresources(Group(\"PodA\")); getnumstaterecords () Deprecated Description This command is deprecated. Returns the number of state change records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the state change records that have been recorded for (int rec = 1; rec <= getnumstaterecords(); rec++) { int record = getstaterecord(rec); pd(getstaterecordvalue(record,0)); pt(\" \"); pf(getstaterecordvalue(record,1)); pt(\" \"); pd(getstaterecordvalue(record,2)); pt(\" \"); pt(getstaterecordvalue(record,3).name); pr(); } getobjectimageindex (obj object) Deprecated, do not use. Description This command is deprecated. Do not use. Returns the index number of the bmp or jpeg image currently assigned to the base of the object. Example getobjectimageindex(item); getobjectshapeindex (obj object) Gets the index number of the 3D shape assigned to object Description Returns the index number of the 3D shape currently assigned to the object. Example getobjectshapeindex(item); getobjecttextureindex (obj object) Gets the index number of the image assigned as the texture for the object's 3D shape Description Returns the index number of the bmp or jpeg image currently assigned as the default texture for the object's 3D shape. Example getobjecttextureindex(item); getoutput (obj involved) Deprecated, use Object.stats.output.value Description This command is deprecated. Use Object . stats .output.value instead. Returns the output statistic of the involved object. Example double outval = getoutput(current.centerObjects[1]); getparenttoken (node token) Description Deprecated. Use Token . parent . Example treenode parentToken = getparenttoken(token); getparentwindow (HWND window) Description For developer use. Returns the parent window of the specified window. Use windowfromnode as a parameter to pass into this function. Example getpath (str truncatedpath) Returns the full file path of the truncated path Description Takes a truncated, or relative file path, and returns the full file path. Example string fullpath = getpath(\"fs3d\\\\texturebox.wrl\"); getpeopleresourceutilization (obj object/group[, num mode{0=ByState/1=ByAcquires}]) Description Returns the utilization percentage of a people object or the average of all members of a people group. Example double utilization = getpeopleresourceutilization(Group(\"PodA\")); getpickingdrawfocus (obj theview, num whattoget, num pickedid) Gets the picking draw focus Description Gets the picking draw focus. Used in OnClick to know what was clicked. The whattoget parameter can be PICK_TYPE, PICK_OBJECT, or PICK_SECONDARY_OBJECT. pickedid should be PICK_PRESSED for the \"pressed\" pick, PICK_HOVERED for the \"hovered\" pick, PICK_RELEASED for the \"released\" pick, or PICK_MOVED for \"mouse moved\" pick. Example int picktype = getpickingdrawfocus(view, PICK_TYPE, 0); getpickingmode (obj view) Gets the picking mode for view Description Gets the picking mode for the specified view. Example int isselectionmode = getpickingmode(view); getpreempt (node tasksequence) Gets the preempt value of the tasksequence Description Returns the preempt value of the tasksequence. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example if(getpreempt(mytasksequence) == PREEMPT_ONLY) pt(\"This tasksequence is a preempting task\"); getpriority (node tasksequence) Gets the priority value of the tasksequence Description Returns the priority value of the tasksequence. Example if(getpriority(mytasksequence) > 5) pt(\"This tasksequence has a priority greater than 5.\"); getprocessflowvar (obj/str processFlow, str varname[, node token]) Description Gets the value for the Process Flow Variable. The processflow parameter can either be a reference to the Process Flow object in the Tools or the name of the Process Flow object. Example double processTime = getprocessflowvar(processflow, \"processTime\"); treenode processor = getprocessflowvar(processflow, \"processor\", token); getproperty (str filename, num property) Description For developer use. Gets the value for the specified property in the specified file. Example getproperty(modeldir() + \"MyModel.fsm\",1); getquerycolcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the number of columns in the result table for the last call to query(). Example getquerymatchcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the total number of rows in the result table for the last call to query() Example getquerymatchtablerow (str/num table, num matchRow) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the source table's row number associated with a matched row in the last query() result. table - If a string, it is the name of the table as defined in the FROM statement. If you used an alias, it should be the table's alias. If a number, it should be the 1-based index of the table in the FROM statement. If there is only one table in the query, this should be 1. For multiple tables, the first table in the FROM is 1, the second is 2, etc. matchRow - The 1-based row of the result table of the query. Note that this command will not work if you use aggregator functions such as MIN(), MAX(), AVG(), etc. in the SELECT clause. When aggregators are used, this command just returns the number of rows in the source table. Example getqueryvalue (num row, num/str col) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns a value in the result table for the last call to query() row - The 1-based row number of the result table col - The 1-based column number of the result table, or the name of the result column. If you have defined aliases in the select statement, the column name should be the alias. Example getrank (node thenode) Deprecated, use treenode.rank Description This command is deprecated. Use treenode . rank instead. Gets the rank of a child node in its parent's sub-tree. Example getreportnum (node report, int column, int rowsback) For Dynamo use Description For Dynamo use. Returns the value from a Report object that is in the specified column. The row is determined by subtracting the rowsback parameter from the number of rows in the table. Example double myval = getreportnum(current,3,0); getrunstate ([int checkProcessingEvent]) Returns 1 if the model is currently running, 0 if not Description Returns 1 if the model is currently running, 0 if not. If you pass a true value, returns whether an event is currently executing. Example if(!getrunstate()){msg(\"Model Stopped\", \"The model is not running right now.\",1);} If executed from the script window, this message will only appear if the model is stopped. gets (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getsdtvalue (node sdtNode, str valName) For developer use Description Primarily for developer use only. Returns the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example getshapeindex (str name) Gets the index of a loaded 3D shape Description Get the index of a loaded shape by its file path name. The file path name used in this command must use double backslashes as shown in the example. Use View -> Media Files to see a complete list of currently loaded shapes with their associated file path names and indexes. Example getshapeindex(\"fs3d\\\\Operator\\\\BasicOperator\\\\Chest.3ds\"); getsoundindex (str name) Gets the index of a loaded sound Description Returns the index of a loaded sound by the name associated with it in the project/media/sounds folder. Example getsoundindex(\"C:/My Sounds/APPLAUSE.WAV\"); getstat (node object, str name, int flag [, var p1, var p2, var p3]) Returns the statistic value for the given object Description It is preferred to use Object . stats instead. Gets the specified statistic from the given object. name - The name of the statistic. Valid names can be enumerated using function_s(object, \"enumerateStatistics\", targetNode) . Documentation for the meaning of the various statistics that an object provides should be found in each object's documentation. The documentation may include spaces in the names of the statistics, for readability. In passing these as the name parameter to getstat(), you should remove all spaces. flag - Can be one of the following values STAT_CURRENT - returns the current value of this statistic STAT_MIN - returns the minimum value of this statistic STAT_MAX - returns the maximum value of this statistic STAT_AVERAGE - returns the average value of this statistic STAT_TIME_AT_VALUE - returns the total simulation time the stat spent at a given value (requires an additional p1/p2/p3 parameter designating the desired value). This is only valid if the stat is tracking its history or profile data, such as in objects' standard \"State\" statistics. See below for more information on this. p1 , p2 , and p3 are for providing \"requirements\" to resolve the correct statistic. For example, a list has several per-partition statistics. In order to get a partition's statistic, you need to pass the desired partition ID as p1. Requirements depend on the statistic that is being retrieved. There are also several special stat names that you can use. They are: \"State\", \"Output\", \"Input\", \"Content\", \"Staytime\". If you use one of these names, the command will return the corresponding standard statistic of the object. Examples: getstat(object, \"Output\", STAT_CURRENT) - returns the current (total) output of the object (same as object.stats.output) getstat(object, \"Content\", STAT_AVERAGE) - returns the average content of the object getstat(object, \"State\", STAT_CURRENT, 0) - returns the current state of the object (same as object.stats.state().value) getstat(object, \"State\", STAT_TIME_AT_VALUE, 0, STATE_IDLE) - returns the total idle time of the object (0 designates the state profile, i.e. the default state profile) getstat(object, \"Staytime\", STAT_MAX) - returns the maximum recorded stay time of the object Note that some stats that do not make sense will not return valid data, such as average state, or average output. STAT_TIME_AT_VALUE If you want to get the STAT_TIME_AT_VALUE access, the statistic needs to track either historical or profile data. If it is an object's standard \"State\" statistic, FlexSim will automatically make it track its profile data, so you don't need to do any extra work for that. For other statistics, however, you will need to explicitly \"subscribe\" to the statistic to make it track its profile or history data. Historical data records each change of value and the corresponding simulation time of that value change. Profile data records the total time the variable was at each value. Only non-negative integer values are valid for profile data. To subscribe to a tracked variable, first find where the tracked variable statistic is in the tree. For example if it's the \"Content\" statistic, you'll likely find it at object>stats/stats_content. Then call the following command on the node: function_s(statNode, \"addSubscriber\", needsHistory, needsProfile, persist). The needsHistory and needsProfile parameters are booleans telling which data you want to track. The persist is a boolean that tells if you want it to track these statistics indefinitely going forward. The tracked variable tries not to continue tracking extra data if it is not needed. If nobody subscribes to its data \"persistently\", then it will discontinue recording the data if it doesn't get subscribers for a while (I think after 5 or so model resets with no subscribers). Recording historical data will allow you to get the STAT_TIME_AT_VALUE access. However, using historical data for getting STAT_TIME_AT_VALUE is slower than if you track profile data. With historical data, it must traverse the entire history to calculate STAT_TIME_AT_VALUE, whereas if you track profile data, it stores the total time at the value directly in the profile data. Example getstatenum (obj object [, num stateprofilenr]) Deprecated, use Object.stats.state().value Description This command is deprecated. Use Object . stats .state().value instead. Returns the state of an object in numeric form. Example getstatenum(current); getstaterecord (num record) Deprecated Description This command is deprecated. Returns a state change record that has been recorded for the Full History Report. A state change record is created every time an object changes state if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a StateRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnumstaterecords(). getstaterecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the state change record that is passed in as the first parameter to the function. This record is the return value from a call to getstaterecord(). The value passed to this function as the second parameter indicates which value from the state change record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The time of the state change. 2 = The state that the object changed to. 3 = The object that changed state. This is returned as an int and should be converted to a treenode using tonode(). Example See the example for getnumstaterecords(). getstatestr (obj object) Deprecated, use Object.stats.state().valueString Description This command is deprecated. Use Object . stats .state().valueString instead. Returns the state of an object as a text string. Example getstatestr(current); getstatetableutilization (Table stateTable, TrackedVariable stateProfile) Description Returns the utilization of a state profile given a state table. See State Table for more information on how to create and modify a state table. Example getstatetableutilization(Table(\"StateTable1\"), Model.find(\"Processor1\").as(Object).stats.state()) getstream (node object) Returns a unique random stream associated with the object Description Returns a unique random stream associated with the object. Returns the number stored in the object's stream attribute. If the object does not yet own a stream attribute, or if its stream attribute is 0, FlexSim will assert the attribute and assign it a unique stream number. If the object passed into the function does not have object data, it will store the unique stream in a subnode. This subnode will be destroyed on model reset and reassigned during the model run as needed. Assigned streams start at stream 101 and increase as they are assigned. Example uniform(0, 1, getstream(current)) getsystemmetric (num metric[, HWND win]) Description For developer use. Returns system screen metrics. These values for metric return the following values (if not specified, values are in logical units): 1: desktop width 2: desktop height 3: the left position of the work area of the monitor under the cursor 4: the right position of the work area of the monitor under the cursor 5: the top position of the work area of the monitor under the cursor 6: the bottom position of the work area of the monitor under the cursor 7: the width of window win in pixels 8: the height of window win in pixels 9: the left position of the monitor under the cursor 10: the right position of the monitor under the cursor 11: the top position of the monitor under the cursor 12: the bottom position of the monitor under the cursor 13: the width of window win 14: the height of window win Example getsystemmetric(1) gettablecell (str/node/num table, num row, num column) Deprecated, use Table.cell Description This command is deprecated. Use Table . cell (). Example gettablecols (str/node/num table) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Gets the number of columns in the table. Example gettableheader (string/num/node table, num row/col, num rowcolnr) Deprecated, use Table.getColHeader() or Table.getRowHeader() Description This command is deprecated. Use Table . getColHeader () or Table . getRowHeader () instead. Gets the value of the header field of a table. Example gettablenum (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the number value in a table cell. Example gettablerows (str/node/num table) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Gets the number of rows in the table. Example gettablestr (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the text value in a table cell. Example gettableviewselection (obj tableview, num val) Description For developer use. Returns values based on the blue selection range in a table view: val 1 returns the start row, val 2 returns the start col, val 3 returns the end row, val 4 returns the end col. Example int startrow = gettableviewselection(c,1); gettaskinvolved (obj tasksequence, num taskrank, num involvednum) Gets a reference to the first or second involved object of the task of the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task classes instead. Returns a reference to either the first or second involved object for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which involved object it is (1 or 2) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the involved of the object's currently active task. Example treenode loaditem = getinvolved(gettasksequence(current.centerObjects[1], 0), 2, 1); gettasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a task sequence Description This command is deprecated. Use the Dispatcher and TaskExecuter class methods and properties instead. Returns a reference to the task sequence that has the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to its currently active task sequence. Example treenode mytasksequence = gettasksequence(current.centerObjects[1], 5); gettasksequencequeue (obj dispatcher) Gets a reference to the dispatcher's tasksequence queue Description This command is deprecated. Use the Dispatcher class properties instead. Returns a reference to the specified dispatcher's task sequence queue. Example treenode tsqueue = gettasksequencequeue(current.centerObjects[1]); gettaskstate (obj tasksequence, num taskrank) Gets the state of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Gets the state of the task at rank taskrank of tasksequence. The following are task states: TASKSTATE_UNFINISHED TASKSTATE_ACTIVE TASKSTATE_FINISHED TASKSTATE_COORDINATED Example if(gettaskstate(gettasksequence(current.centerObjects[1], 0), 2) == TASKSTATE_ACTIVE)... gettasktype (obj tasksequence, num taskrank) Gets the task type of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the task type for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task type of the object's currently active task. Example if(gettasktype(gettasksequence(current.centerObjects[1], 0), 2) == TASKTYPE_LOAD)... gettaskvariable (obj tasksequence, num taskrank, num variablenum) Gets the tasksequence variable for the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns a reference to one of the four task variables for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which task variable it is (1 - 4) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task variable of the object's currently active task. Example double myvar = gettaskvariable(gettasksequence(current.centerObjects[1], 0), 2, 1); gettenavigator (obj taskexecuter) Gets the current navigator that a taskexecuter is connect to Description Returns the current navigator that a taskexecuter (TE) is connected to, either DefaultNavigator or DefaultNetworkNavigator. Example treenode navigator = gettenavigator(current); gettenetnode (obj taskexecuter) Gets the current network node that a taskexecuter is attached to with an A Connection Description Returns the current network node that a taskexecuter (TE) is attached to with a red line. Example treenode netnode = gettenetnode(current); gettenetworkinfo (obj taskexecuter, obj destobj, num info) Gets information regarding the current state of a taskexecuter on a node network Description Returns information regarding the current state of a taskexecuter on a node network. Valid queries are as follows: NETWORK_INFO_DEST_NET_NODE_RANK - returns the destination column/rank of the network node that the TE would travel to were he to be given a travel task to destobj. Usually this will simply be the network node attached to destobj, but if multiple network nodes are attached to destobj, the command will find the closest one. NETWORK_INFO_ORIGIN_NET_NODE_RANK - returns the origin column/rank of the network node that the TE would start from were he to be given a travel task to destobj. Usually this will simply be the current network node where the TE is located, but if that network node has virtual exits, the command will find the virtual exit that renders the shortest travel distance. NETWORK_INFO_DISTANCE - returns the shortest travel distance to the destination object through the network. NETWORK_INFO_CUR_DIST_ALONG_EDGE - Only valid when the TE is actively doing a travel task. This returns the current distance that the TE has traveled along its current network edge. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_ORIGIN_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the origin node at which the TE starts its current travel operation. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_DEST_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the destination node to which the TE is traveling for its current travel operation. For this query, destobj should be NULL. Example int destrank = gettenetworkinfo(current, NULL, NETWORK_INFO_CUR_TRAVEL_DEST_RANK); gettextureindex (str name) Gets the index of a loaded image Description Get the index of a loaded image by name. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to a texture's name. Example gettextureindex(\"myimage\") gettoken (obj instanceObject, obj/str activity, num index) Description Gets the token at the index of the activity for the given owner object (instance). Example treenode token = gettoken(fixedResource, activity, 3); treenode token = gettoken(processor3, \"Wait for Conveyor\", 2); gettokenbyid (num id [, obj/str processFlow]) Description Deprecated. Use Token . byID . Example treenode token = gettokenbyid(54); treenode token = gettokenbyid(23, \"ProcessFlow2\"); gettokenid (node token) Description Deprecated. Use Token . id . Example int tokenID = gettokenid(token); gettokens (obj instanceObject, obj activityOrAsset[, num flags]) Description Gets all the tokens \"inside\" an activity or shared asset. For activities, this is the current set of tokens in the activity. For resources, it is the set of tokens who have acquired the resource. For zones, it is the set of tokens that have entered the zone. For a list, it is the set of tokens who have been pushed to the list. Returns an Array containing the result. instanceObject - The object associated with the desired process flow instance. For general process flows this is the same as the process flow itself. For object process flows, it is the 3D object, i.e. task executer or fixed resource, associated with the process flow instance. If executed from within process flow activity logic, this will usually just be \"current\". If you pass NULL here, it will get tokens for all instances. activityOrAsset - The target activity or shared asset. If NULL, the command will return all active tokens in the entire process flow instance. flags - Defines optional flags. If GET_TOKENS_REQUESTS is passed for a shared asset, it will return the set of tokens requesting the shared asset (i.e. tokens waiting to enter a zone, tokens back ordering on a list, etc.). Example Array tokensInActivity = gettokens(current, getactivity(processFlow, \"Wait For Exit\")); Array resourceOwners = gettokens(current, getactivity(processFlow, \"Resource1\")); gettotalnroftasks (obj tasksequence) Gets the total number of tasks that were ever added to the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the total number of tasks that were ever added to the tasksequence. Example gettotalnroftasks(mytasksequence) gettrackedvariable (str/node trackedvar [, num valtype] ) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example gettreedrawposition (node destnode, node roottree) Description For developer use. Example getundorecordid (obj record) Description Returns the id of the specified undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = getundorecordid(getcurrentundorecord(view)); getutilizedobject (obj dispatcher, obj involved, obj station, num utilizednr) Gets a reference to an operator that is currently executing a utilize task Description Finds and returns a reference to an operator that is currently executing a utilize task with the given involved and station variables. If multiple operators are being used, then utilizednr allows you to distinguish which one you want to reference. Example treenode op = getutilizedobject(current.centerObjects[1], item, current, 1); getvarnode (obj object, str/num var) Gets a node reference to an object's variable Description Returns a reference to the specified variable's node in the specified object. Example treenode schedule = getvarnode(current,\"schedule\"); getvarnum (obj object, str/num var) Gets the value of an object's numeric variable Description Returns the numeric value stored in the specified variable of the specified object. Example double speed = getvarnum(current,\"speed\"); getvarstr (obj object, str/num var) Gets the value of an object's string variable Description Returns the string data stored on the specified variable of the specified object. Example pt(getvarstr(model().subnodes[2],\"creationtrigger\")); getvartype (var) Deprecated, use Variant.type Description This command is deprecated. Use Variant . type instead. Example getvartype(myVar) getviewhwnd (obj view, int windowtype) Gets the HWND handle for a certain window of a view Description Returns a windows HWND handle for a certain window of a view. Each view may use several windows to display data properly. For example, a tree view contains the main window that displays the tree as well as a window that displays the string or number data on a node for editing, as well as a window that displays/edits the name of a node. The windowtype parameter specifies which window handle you want returned, as follows: 1 - the main control (same as using windowfromnode()) 2 - datacontrol - The scintilla code control that displays data of a node in a tree, and in a script view 3 - control - the control that displays/edits a highlighted node's name in the tree 4 - statusbar - the statusbar of the view if it has one 5 - tooltip - the tooltip control of the view 6 - pointercontrol - I think this is only used in a tree that displays list heads Example sendwindowmessage(getviewhwnd(treeview,2), SCI_SETSEL, 4, 8); getviewmenu (obj view, int menutype) Description For developer use. Returns the HMENU reference of the menu based on the menutype. Menutypes: 1: floatingtreemainmenubar 2: custommenu 3: popupmenu 4: thecustompopupmenu Example var menu = menubelow(getviewmenu(c, 4), 0); getviewscale (obj view) Description For developer use. Returns the view scale factor. Example getviewscale(sv()) getviewtext (obj/num window) Description For developer use. Returns the text of a window. Example getviewtext(sv()) glBegin (num primitive) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glColor3d (num red {0-1}, num green {0-1}, num blue {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glColor4d (num red {0-1}, num green {0-1}, num blue {0-1}, num alpha {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glDisable (num setting) Deprecated, use fglDisable() Description This command is deprecated. Use fglDisable() instead. Example glEnable (num setting) Deprecated, use fglEnable() Description This command is deprecated. Use fglEnable() instead. Example glEnd () Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glIsEnabled (num setting) Returns 1 if the OpenGL setting is enabled, 0 otherwise Description Returns 1 if the OpenGL setting is enabled, 0 otherwise. See fglEnable() for list of draw settings. Note that this is an extremely slow operation and is discouraged. You can refer to standard OpenGL documentation for more information if needed. Example glIsEnabled(GL_LIGHTING) glLineWidth (num linewidth) Specifies the line width for subsequent lines draw in OpenGL Description Specifies the line width for subsequent lines drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glLineWidth(3); glLoadIdentity () Deprecated, use fglLoadIdentity() Description This command is deprecated. Use fglLoadIdentity() instead. Example glMatrixMode (num mode) Deprecated, use fglMatrixMode() Description This command is deprecated. Use fglMatrixMode() instead. Example glNormal3d (num x, num y, num z) Deprecated, use fglNormal() Description This command is deprecated. Use fglNormal() instead. Example glNormal3d(1,0,0); globallist (str listName) Deprecated, use List(\"GlobalListName\") Description This command is deprecated. Use List (\"GlobalListName\") instead. References a global list by name. Example glPointSize (num pointsize) Specifies the point size in pixels for subsequent vertices drawn in OpenGL Description Specifies the point size in pixels for subsequent vertices drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glPointSize(5); glPopAttrib () Deprecated, do not use Description This command is deprecated. Do not use. Example glPopMatrix () Deprecated, use fglPopMatrix() Description This command is deprecated. Use fglPopMatrix() instead. Example glPushAttrib (num attribsetting) Deprecated, do not use Description This command is deprecated. Do not use. Example glPushMatrix () Deprecated, use fglPushMatrix() Description This command is deprecated. Use fglPushMatrix() instead. Example glRotated (num degrees, num x, num y, num z) Deprecated, use fglRotate() Description This command is deprecated. Use fglRotate() instead. Example glScaled (num x, num y, num z) Deprecated, use fglScale() Description This command is deprecated. Use fglScale() instead. Example glTexCoord2d (num x 0-1, num y 0-1) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glTranslated (num x, num y, num z) Deprecated, use fglTranslate() Description This command is deprecated. Use fglTranslate() instead. Example glVertex3d (num x, num y, num z) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example go ([num fast]) Starts the simulation run Description This command starts the simulation run. If there are any events in the event queue, they will occur when the clock reaches them. If there are no events in the queue, the clock will stop. This command will not reset the simulation. If fast is 1, then it will not bind objects before starting. This improves speed if you are stopping and starting the simulation often. See also runfunction(). Example stop(); if (msg(\"Model Stopped\",\"Continue?\")==1) { go(); } This stops the model then prompts the user if it should start again. If the user presses \"OK\", the model continues from where it was stopped. graphtohistogram (obj graph, obj histogram, num start, num end, num res, num xyformat) Description For developer use. Generate histogram data from a list of values. This command will generate a histogram inside the node histogram based on the occurrence table given by graph. Mainly used internally by objects. The starting value of the histogram is specified as start. The ending value of the histogram is specified as end. The number of buckets in the histogram is specified as res. If xyformat is 0, it assumes that the graph is a y format occurrence table. If xyformat is 1, it assumed the graph is an xy format occurrence table. Similar to makehisto(). Refer to makehisto() for more information on these similarities. Example graphtohistogram(so(),so().next,1,10,5,0) groupaddmember (str group, obj member) Deprecated, use Group.addMember() Description This command is deprecated. Use Group . addMember () instead. Adds an object to a group. Example groupconnectfrom (obj object, str character) Description For developer use. Connects the object passed in as param(1) to every selected object in the model using the letter passed in as param(2). Typically used in GUIs. Example groupconnectfrom(selectedobject(ownerview(c)),\"A\"); groupconnectto (obj object, str character) Description For developer use. Connects every selected object in the model to the object passed in as param(1) using the letter passed in as param(2). Typically used in GUIs. Example groupconnectto(selectedobject(ownerview(c)),\"A\"); groupcopyconnections (obj object) Description For developer use. Copies the connections on the object passed in as param(1) onto every selected object in the model. Typically used in GUIs Example groupcopyconnections(selectedobject(ownerview(c))); groupmember (str group, num member) Deprecated, use Group[] Description This command is deprecated. Use Group [] instead. Gets a reference to a group member. Example groupnummembers (str group) Deprecated, use Group.length() Description This command is deprecated. Use Group . length instead. Gets the number of members in a group. Example groupremovemember (str group, num/obj member) Deprecated, use Group.removeMember() Description This command is deprecated. Use Group . removeMember () instead. Removes an object from a group. Example groupsetnames (node namenode, num startnum, num append) Description For developer use. Sets the names of all of the selected objects in the model to the string data on namenode. If append is 1, then a number is appended to the end of each name, starting at startnum and increasing by 1 for each object. Example groupsetnames(\"WeldStation\",1,1); gt (num value1, num value2) Deprecated, use the > operator Description This command is deprecated. Use the > operator instead.. Example help () Description For developer use. Display the help system window. Example help() helpcommands (node destnode, num what, str command) Description For developer use. Used to get information about a command. Enter the command name in parameter 3. The return value will be copied into the string data of destnode. \"what\" defines what information is needed, as follows: 1 - returns the xml fragment string that contains the documentation for that command Example helpcommands( hidelabel (obj object[, num off/on]) Deprecated, use switch_hidelabel() Description This command is deprecated. Use switch_hidelabel() instead. This command sets the specified object to show or hide its name and basic statistics on the screen. A value of 1 is show and a value of 0 is hide. If the name and statistics are hidden for an object, they will not be visible in any view window. View windows also have an attribute that controls this connector display of all objects in the view. Example hidelabel(current,0); This sets the object referenced by current so that its name and statistics will not be drawn. hideports (obj object[, num off/on]) Deprecated, use switch_hideconnectors() Description This command is deprecated. Use switch_hideconnectors() instead. This command sets the specified object to show or hide its ports and connections. A value of 1 is show and a value of 0 is hide. If the ports and connections are hidden, they will not be visible in any view window. Example hideports(current,1); This sets the current object to show its ports and connections in all view windows. hideprogressbar () Description For developer use. Hides the progress bar Example hideprogressbar(); highestconnection () Gets the highest numbered server connection index Description Returns the highest numbered server connection index. Example int highconn = highestconnection(); highlightviewtext (node view, num pos, num span, num mode span/lines) Highlights text in a code edit window Description Highlights text in a scintilla code edit window. This is used by the flexscript syntax checker to go to highlight a syntax error in the code edit window. You can either highlight whole lines or individual characters. To highlight individual characters, specify mode as 2. For lines specify mode as 1. For lines, specify pos as the start line to highlight(the first line is line 1) and span the number of lines to highlight. For individual characters, specify pos as the start position and span as the number of characters to highlight (position 0 is the position to the left to the first character) Example highlightviewtext(c, 0, 5, 2) This will highlight the first 5 characters of the scintilla text edit. highlightviewtext(c, 1, 1, 1) This will highlight the first line of the scintilla text edit. holditem (obj item) Holds the item if it has already been released Description Holds the specified item if it has already been released. This in effect \"unreleases\" the item so that it will not leave. This only applies if the item is in a FixedResource and it has already been released and has not been \"allocated\" to a downstream object (it is not waiting for a transport). Example holditem(item) hours (num hours) Gets the number of model time units in the number of hours Description Return the number of model time units in the given number of hours. Example hours(1) Returns 3600 seconds. howmanyattributes () Description For developer use. Returns the number of attributes. Example howmanyattributes() howmanycommands () Description For developer use. Returns the number of commands. Example howmanycommands() hypergeometric (num trials, num successes, num size[, num stream]) Returns a random sample from a hypergeometric distribution Description hypergeometric( t , m , n , stream ) is a discrete probability distribution used to represent the number of successes in t draws without replacement from a population of size n containing exactly m success states. Example i <no parentheses> Description For developer use. This command is used only in event functions. It is used to reference the object that was passed to the value of 0 is) command as the involved object. Example string involvedname = i.name; This sets involvedname to the name of the object that was passed to value of 0 is) as the involved object. if (num condition) { } Description If the condition is true (i.e. the conditional expression returns a 1), then the statement immediately following the closing parenthesis will be executed. If braces { } are what immediately follows the closing parenthesis, then the block of code within the braces will be executed when the condition is true. Nothing is executed if the condition is false (returns a 0), unless an \"else\" has been defined. Refer to the Users Manual for more information. Example if (item.Weight < 100) msg(\"TRUE\", \"\"); This example will display a popup message saying \"TRUE\" when the item's Weight label has a value less than 100 importdataset (node datatree, str filename, num format) Description Import tree dataset from a Comma Separated Value (CSV) file. datatree should be the node to import the data into. There are 3 possible formats to import. If format is 1, then the data is imported as a table, meaning each sub-node of datatree is a row in the table, and each sub-node of each row is a cell in the table. This is the same as using the importtable() command. If format is 2, then the data is imported as a simple data series. The csv file is assumed to have one column, and each row's value is imported into a sub-node of datatree. If format is 3, then the data is imported as a series of x,y pairs. The csv file is assumed to have 2 columns. Row 1 column 1 of the csv file is imported as sub-node 1 of datatree, row 1 column 2 is imported as sub-node 2 of datatree, row 2 column 1 is imported as sub-node 3 of datatree, and so forth. Example importdataset(so(),\"C:\\\\mydataset.csv\",1) importtable (node importnode, str filename[, num importcolheaders = 0, num importrowheaders = 0, str listseparator = 0, str decimalseparator = 0, str thousandseparator = 0]) Imports table data into importnode from a csv file. When importing both row and column headers, the first value in the file will be skipped. When importing into a bundle table, each field will use the data type of its first imported cell (row 1). Description Imports table data into the node from a csv (comma-separated values) file. Example importtable(current.labels[\"data\"], \"C:/modeldata.csv\", 1, 1) in (num inches) Gets the number of model length units in the number of inches Description Return the number of model length units in the specified number of inches. Example in(8) inc (node thenode, num amount) Deprecated, use += operator Description This command is deprecated. Use += operator instead. myNode.value += 2; Increments the value of a node by a defined amount. Example inc(current.mylabel,1) inheritcode () Description For developer use. This command is used for subclass function inheritance. Call this in an event function to call that same event function on the object's classobject. In C++ or DLL code, call _inheritcode(callpoint); Example Flexscript: inheritcode(); C++ or DLL: _inheritcode(callpoint); inititem (obj item) Initializes the FixedResource variables of a flowitem Description Initializes the FixedResource variables of a flowitem, usually done when the flowitem first enters the fixed resource. This is usually already done for you, but may be used in some exceptional cases when developing your own BasicFR object behavior. Example inititem(item) initkinematics (node infonode, obj/num object/x[, num flags/y, num z, num rx, num ry, num rz, num flags, num unused]) Initializes a kinematic operation Description Initialize a kinematic operation. Infonode is a blank node that can hold kinematic information. Object is the object that you want kinematics to be performed on. flags defines various flags for how you want it to behave. The unused parameter deprecated, i.e. you can define this through the flags parameter. Refer to kinematics documentation in the user manual for more information. Example initkinematics(current.labels[\"kinematics\"], current) inittrackedvariable (node theNode, num type[, num startValue, num flags]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example inobject (obj object, num inputportnum) Deprecated, use Object.inObjects[] Description This command is deprecated. Use Object . inObjects [] instead. Reference the upstream object connected to a downstream object's input port. Example inputopen (obj object) Returns 1 if the object's input is open, 0 otherwise Description Returns 1 if the object's input is open, 0 otherwise. The closeinput(), stopinput(), openinput(), and resumeinput() commands affect the return value of this command. The commands like closeip() and closeallip() do NOT affect the return value. Example if(inputopen(current)) current.input.close; insertallocatetask (obj tasksequence, obj dispatcher, num priority, num preempt [, num noblock] ) Inserts an allocate task into the coordinated task sequence Description Inserts an Allocate Task into the specified coordinated task sequence. By default the allocation task is a blocking task, but if noblock is 1, then the allocation does not block further execution of the task sequence. Example insertallocatetask(newts, current.centerObjects[2], 0, 0); insertcopy (obj originalobject, obj containerobject) Creates a copy of the flowitem and moves it into the container object Description Creates a copy of the flowitem and moves it into the container object, causing the OnReceive event of the container to execute. Example insertcopy(item, current); Creates a duplicate of the flowitem and moves it into the current object. insertdeallocatetask (obj tasksequence, num allocationkey [, num noblock] ) Inserts a deallocate task into the coordinated task sequence Description Inserts a Deallocate Task into the specified coordinated task sequence to deallocate the resource specified by allocationkey. By default this task will block, but if noblock is 1, it will not block. Example insertdeallocatetask(newts,forkkey); insertproxytask (obj tasksequence, num executerkey, num type [, num/obj involved1, num/obj involved2 , num var1, num var2, num var3, num var4]) Inserts a proxy task into the coordinated task sequence Description Inserts a proxy task into the specified coordinated task sequence. Example insertproxytask(newts, dispatchkey, TASKTYPE_TRAVEL, current.centerObjects[1], NULL,0,0,0,0); insertsynctask (obj tasksequence, num taskkey) Inserts a sync task into the coordinated task sequence Description Insert a Sync Task for the specified task in a coordinated task sequence. Example insertsynctask(newts, travelkey); inserttask (obj tasksequence, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Inserts a new task to the task sequence Description This command is deprecated. Use TaskSequence.addTask() instead. Inserts a task into the specified tasksequence of the specified type. Depending on the task type, the remaining parameters will have a different meaning. Refer to the Task Type Quick Reference guide in the Users Manual for an explanation of the parameters associated with each task type. Example inserttask(ts, TASKTYPE_TRAVEL, current, NULL); installpackage (str path+filename) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. Install a service pack (.fpk). Example installpackage(\"C:/mypak.fpk\") integrityscan (obj class, obj start) Description For developer use. Checks that attributes have not been deleted from model objects, based on their class object. A search is done starting at the given starting node. Example integrityscan(rank(library(1)),model()) inversegaussian (num location, num scale, num shape[, num stream]) Returns a random sample from an inversegaussian distribution Description inversegaussian( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ³ ⁄ α Probability Density Functions: Possible Applications: Used to model the time to complete some tasks. Comments: The inversegaussian( γ , 1, α ) and wald( γ , α ) distributions are the same. As γ approaches infinity, the distribution becomes more like the normal (Gaussian) distribution. The β parameter has elements of a shape parameter since it affects the skewness and kurtosis (width). Example double repairtime = inversegaussian(60, 2, 4, 5); The repairtime variable is set equal to a inversegaussian distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. inverseweibull (num location, num scale, num shape[, num stream]) Returns a random sample from a inverseweibull distribution Description Generates a continuous random variate from a inverseweibull distribution with parameters as defined. Example invertedweibull (num location, num scale, num shape[, num stream]) Returns a random sample from an inverted weibull distribution Description Generates a continuous random variate from an inverted weibull distribution with parameters as defined. Example ip <no parentheses> Description For developer use. Node pointer meaning 'involved port'. Alias for 'eventdata'. Example ipavailable (obj object, num inputportnum) Description Returns a 1 if the upstream object through the specified object's input port is available. Particularly, it checks if the upstream object exists, if it is stopped, if its output is open, and if the connected output port is open. This function returns 0 if the upstream object isn't available. Example ipavailable(current,1) ipopen (object object, num inputportnum) Description Returns a 1 if the inputportnum on object is open. Otherwise returns zero. Example ipopen(current,1) ipopno (obj object, num inputportnum) Output port number that is connected to inputportnum of object Description This command returns the output port number that is connected to inputportnum of object. Example int otherport = ipopno(current,1); This sets otherport to the port number of the output port that the current object's first input port is connected to. ipready (obj object, num inputportnum) Description Returns a 1 if the inputportnum of object is open and the connecting output port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the input of this object or the output of the connecting object are currently open. Example ipready(current,1) isclasstype (obj object, num/str classtype) Compares the object to classtype, returns 1 for yes, 0 for no Description Returns whether or not the object is of the given classtype. 1 means yes, 0 means no. Possible classtype parameters are: CLASSTYPE_FLEXSIMOBJECT CLASSTYPE_FIXEDRESOURCE CLASSTYPE_TASKEXECUTER CLASSTYPE_NETWORKNODE etc. Example isclasstype(current, CLASSTYPE_DISPATCHER); isedgeforward (obj netnode, num edgenr) Returns 1 if the network node's edge is forward, 0 otherwise Description Returns 1 if the network node's edge is \"forward\" meaning when created, the connection was dragged FROM this network node to the other network node. If the edge is forward, then the spline head is contained by this network node, and the spline distance values go forward from this network node. Example isedgeforward(current, 2) iskeydown ([num key]) Description For developer use. Returns 1 if the specified keyboard key is being held down. If the first parameter is not passed, then the function will return 1 if any key is being held down. Otherwise, the function returns 0. Example iskeydown(74) isprojectcompiled () Description For developer use. Returns 1 if the project has been compiled. Example isprojectcompiled() item <no parentheses> Description This command is deprecated. This should not be used as a special command with the setitem command anymore. Instead, declare a treenode variable type as item, then use item in your code as any other variable type. Example treenode item = model().subnodes[3]; pt(item.name); This sets the object that is ranked 3 in the model to item and prints its name to the output console. iterate (num start, num end, num step) {} Deprecated, use for() or while() commands Description This command is deprecated. Use for() or while() commands instead. Repeatedly execute the following block {} with counter value traversing from start to end being incremented by step. The count command can be used to access the current counter value on each iteration. The return value of count will depend on which iteration is currently being executed. Example iterate(1,9,2) { pd(count);pr(); } Prints the following numbers to the outputconsole: 1,3,5,7,9 johnsonbounded (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a johnson bounded distribution Description Generates a continuous random variate from a johnson bounded distribution with parameters as defined. Example johnsonunbounded (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a johnson unbounded distribution Description Generates a continuous random variate from a johnson unbounded distribution with parameters as defined. Example keyboardfocus ([HWND/node focus]) Gets/Sets keyboard focus Description Used in GUI development. Gets/Sets the keyboard focus. If the focus parameter is left out, then this command will return a reference to the current keyboard focus as an HWND handle. Otherwise, it will set the focus to the keyboard focus to the passed parameter. Use windowfromnode() or getviewhwnd() to get access to the HWND handle of a view node. Example keyboardfocus(windowfromnode(edit)); keyedclick (obj object, num key[, obj view]) Description For developer use. Executes the object's keyed click functionality (X, C, V) Example keyedclick(model().last, 88) label (obj object, str/num label) Deprecated, use treenode.labels[] Description This command is deprecated. Use treenode . labels [] instead. Gets the node reference to an object's label. Example laplace (num location, num scale[, num stream]) Returns a random sample from a laplace distribution Description Generates a continuous random variate from a laplace distribution with parameters as defined. Example last (node container) Deprecated, use treenode.last Description This command is deprecated. Use treenode . last instead. Reference a parent node's last child node. Example lastclickednode () Description For developer use. Returns a pointer to the last clicked node. Example lastclickednode() lastkey () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkey() lastkeydown () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeydown() lastkeyup () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeyup() le (num value1, num value2) Deprecated, use the <= operator Description This command is deprecated. Use the <= operator instead. Example library () Reference to the library node in the main tree Description This command returns a reference to the library node in the main tree. It is used as a fast way of referencing the library. Example treenode SourceObj = library().find(\"?Source\"); This sets the variable SourceObj so that it references the node called Source in the library. license () Gets the current license type Description Get the current license type Example licenseactivation (num operation[, str buffer, var p1, node callback]) Description For developer use. Do various licensing operations. Example licenseactivation(LA_SET_ACTIVATION_SERVER_PARAMS,\"@localhost\",0); listbackorders (obj list[, var partitionId]) Deprecated, use List.backOrders() Description This command is deprecated. Use List . backOrders () instead. References to a list's back orders. Example listboxrefresh (obj listbox) Refreshes the contents of a listbox Description Refreshes the contents of a listbox. Example listboxrefresh(c.find(\"../Collision Members\")) listenerinfo (int info) Description For developer use. This command returns information for use within the OnListen and OnPreListen event functions. The information returned is information that was passed to the event you are listening to. Info 1 will return the engine event code. Engine event codes have macros such as SM_MESSAGE and SM_DRAW. Info 2 and 3 return pointers to associated treenodes. To set up listening, you add a \"listeners\" attribute to the object you want to listen to (Object A). The listeners attribute should have subnodes that are couplings to the object(s) that you want to listen from (Object B). Before an event fires on Object A, Object B's OnPreListen event function will fire. After an event first on Object A, Object B's OnListen event function will fire. You can also filter events by additing a subnode with number data below Object B's coupling node. The number data should be a bitwise sum of the bitshifted event codes you want to listen for. If the coupling has no subnode, the object will default to listening to every event. Example treenode current = c; treenode involved = i; int code = listenerinfo(1); treenode associated = tonode(listenerinfo(2)); treenode coupling = tonode(listenerinfo(3)); print(\"OnListen\"); print(\"current: \", current); print(\"involved: \", involved); print(\"code: \", code); print(\"associated: \", associated); print(\"coupling: \", coupling); listentries (obj list[, var partitionId]) Deprecated, use List.entries() Description This command is deprecated. Use List . entries () instead. References to a list's pushed entries. Example listinlist (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of occurrence of value in list. The list, of length qty, is searched and the position in the list of the value val is returned by this function. Example listinlist(5,3,2,1,2,3,4) This returns the index number 4 because 3 is the fourth number in the list of 5 numbers. listmax (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of highest value. The list, of length qty, is searched and the position in the list of the highest value is returned by this function. Example listmax(5,2,1,2,3,4) This returns a 5 because 4 is the largest value and it is fifth in the list of five numbers. listmaximum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Highest value. The list, of length qty, is searched and the value of the highest value is returned by this function. Example listmaximum(5,2,1,2,3,4) This returns a 4 because it is the highest value in the list. listmean (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Average of values. The mean of the values in the list, of length qty, is returned by this function. Example listmean(5,2,1,2,3,4) This returns 2.5. listmin (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of lowest value. The list, of length qty, is searched and the position in the list of the lowest value is returned by this function. Example listmin(5,2,1,2,3,4) This returns 2 because 1 is the lowest value and it is second in the list. listminimum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Lowest value. The list, of length qty, is searched and the value of the lowest value is returned by this function. Example listminimum(5,2,1,2,3,4) This returns 1 because that is the lowest value in the list. listmul (num qty, num val [, num a,...]) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of list. The product of all the values in the list, of length qty, is returned by this function. Example listmul(5,2,1,2,3,4) This returns the value 48. listpull (str/obj list, str/node query, num requestNum [, num requireNum, str/node/num puller, str/node/num partitionId, num flags]) Deprecated, use List.pull() Description This command is deprecated. Use List . pull () instead. Pulls one or more entries from a list. Example listpush (str/obj list [, str/node/num pushVal, str/node/num partitionId, ...]) Deprecated, use List.push() Description This command is deprecated. Use List . push () instead. Pushes an entry onto a list. Example listremove (obj entryOrBackOrder) Deprecated, use List.backOrders()[backOrderNum].remove() or List.entries()[enterNum].remove() Description This command is deprecated. Use List . backOrders ()[backOrderNum].remove() or List . entries ()[entryNum].remove() instead. Removes an entry or back order from its owning list. Example listsub (num qty, num val [, num a,...]) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. Subtraction of list. The list, of length qty, is traversed and the first value has all subsequent values subtracted from it and then is returned by this function. Example listsub(5,2,1,2,3,4) listsum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the + operator instead. Sum of values. The sum of all the values in the list, of length qty, is returned by this function. Example listsum(5,2,1,2,3,4) loadimage (str file, str name) Description For developer use. Load an image directly. An image file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded images. Each image has a corresponding name and an index. This command will return the index corresponding to the loaded image. Example loadimage(\"c:/myimage.bmp\",\"myimage\") loadselectedfromfile (obj highlightedobj) Description For developer use. Loads previously saved tree file into the highlighted object. Example loadselectedfromfile(selectedobject(ownerview(c))) loadsound (str path+filename) Deprecated, use soundload() Description This command is deprecated. Use soundload() instead. A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. The sound must be a .wav file. Example int applauseindex = loadsound(\"c:/My Music/APPLAUSE.WAV\"); loadstate () Description For developer use. Loads the state of the project. If savestate() has been executed, then this command must be executed before you can run the model again. Example loadstate(); loadthreedobject (str file, str name) Description For developer use. Load a 3D model directly. A shape file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the loaded shape. Example loadthreedobject(\"c:/myshape.wrl\",\"myshape\") loaduserlibrary (str libfile [, obj libraryview, num reloadmedia, num changeitemcurrent, num autoinstall]) Description For developer use. Loads a library from the path specified in libfile. If reloadmedia is true, autoloadallmedia() will be called after loading the library. If autoinstall is true, the library's load and new model autoinstall objects will be added to the model. The libraryview and changeitemcurrent parameters are no longer used. Example loaduserlibrary(cdir() + \"libraries/mylib.fsl\"); local (num index) Deprecated, use local variables Description This command is deprecated. Use local variables like treenode, int, double, string instead. Gets a reference to an indexed local variable as a treenode. You must use localarray() to define how many local variables are used and what data type they should have. Can only be used in flexscript. Example setnodenum(local(1),4); Sets the 1st variable in the localarray to 4. localarray (num qty[, num datatype]) Deprecated, use Array class Description This command is deprecated. Use the Array class instead. Allocate general purpose local array with the given quantity of local variables. Type can be: 1 = num, 2 = str, 3 = coupling, 4 = obj. May only be used in flexscript. Example localarray(1,4) log (num value) Deprecated, use Math.log() Description This command is deprecated. Use Math . log () instead. Natural Logarithm of value. Example log10 (num value) Deprecated, use Math.log10() Description This command is deprecated. Use Math . log10 () instead. Base-10 Logarithm of value. Example logarithmic (num theta[, num stream]) Returns a random sample from a logarithmic distribution Description Generates a discrete random variate from a logarithmic distribution with parameters as defined. Example logevent (num/str index/name[, obj object, obj involved, num p1, num p2, num p3, num p4]) Description Logs an event as an entry in the Event Log. Use the name passed into registereventtype() or the index returned by registereventtype(). Example logevent(\"MyEventType\",current,item,port); logistic (num location, num scale[, num stream]) Returns a random sample from a logistic distribution Description Generates a continuous random variate from a logistic distribution with parameters as defined. Example loglaplace (num location, num scale, num shape[, num stream]) Returns a random sample from a log laplace distribution Description loglaplace( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β α ² ⁄ ( α ²− 1) for α > 1 variance = β ² α ² ( 2 α ² + 1 ) ⁄ ( α ² - 1 )² ( α ² - 4 ) for α > 2 Probability Density Functions: Possible Applications: Rarely used in defining processing times. Comments: This distribution is also known as the double-exponential distribution because its density curve is essentially two exponential curves back-to-back. Example loglaplace(0, 2, 8, 5); A loglaplace distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 8, and random stream number 5. loglogistic (num location, num scale, num shape[, num stream]) Returns a random sample from a log logistic distribution Description loglogistic( γ , β , α , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( 0, ∞ ) α is the shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β ( π ⁄ α )csc( π ⁄ α ) for α > 1 variance = β ²( π ⁄ α ){2csc(2 π ⁄ α ) − ( π ⁄ α )[csc( π ⁄ α )]²} for α > 2 Possible Applications: Used to model the time to perform some task. Example loglogistic(0, 1, 2, 5); A loglogistic distribution with a location (shift) of 0, a scale of 1, a shape factor of 2 and random stream number 5. lognormal (num location, num normalmean, num normalstdev[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. lognormal( location, normalmean, normalstdev, stream ) is a continuous probability distribution. Inputs: location : ( - ∞, ∞ ) normalmean such that ( Math.exp( normalmean ) > 0 ) normalstdev such that ( normalstdev > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( location , ∞ ) mean = location + Math.exp( normalmean + normalstdev² ⁄ 2) variance = Math.exp( 2*normalmean + normalstdev² ) [ Math.exp( normalstdev² ) − 1 ] Probability Density Functions: Possible Applications: Used to model the time to perform some task, and to model quantities that are the product of a large number of other quantities. It can also be used as a rough model in the absence of data. Comments: The probability density for the lognormal distribution takes on shapes similar to gamma( normalstdev, normalmean ) and weibull( normalstdev, normalmean ) densities for normalstdev > 1, but can have a large spike close to x=0 that is often useful. Example lognormal2 (num location, num scale, num shape[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. Example double cycletime = lognormal2(0, 29.8, 0.31, 5); Set the cycletime variable to a lognormal2 distribution with location parameter 0, scale parameter 29.8, shape parameter 0.31, and random stream number 5. lognormalmeanstdev (num mean, num stdev[, num stream]) Returns a random sample from a lognormal distribution Description This command is an alternative to the lognormal2 command, used in the absence of data. You can specify the mean and standard deviation, and the command will calculate from those parameters the proper location, scale, and shape parameters for the lognormal2 command, and return a sample from that distribution. Note that the shape of the distribution is pre-defined to be a bell-shaped curve with a reasonably long right tail. Hence this command isn't as flexible as the lognormal2 command. This command, similar to the triangular distribution, should be used in the absence of data, where you know the mean and standard deviation of the distribution, and you assume that the distribution is right-skewed (it has a longer right tail), but you do not have a real data set to fit to a distribution. Refer to lognormal2 for more information. Relating to the diagram describing the lognormal2 distribution, the lognormalmeanstdev command uses a normalstdev/shape value of 0.75 to define its shape. Note that since the shape of the distribution is hard-set, depending on the mean and standard deviation values, this may return a negative value. Example double cycletime = lognormalmeanstdev(10, 2); This example will return a random value that follows a right-skewed lognormal distribution with a mean of 10 and standard deviation of 2. lt (num value1, num value2) Deprecated, use the < operator Description This command is deprecated. Use the < operator instead. Example main () Deprecated, use maintree() Description This command is deprecated. Use maintree() instead. Get the main tree node. This is one of the two primary databases of FlexSim. Also called the \"Project Tree\". The other primary database is the views tree node also called the \"View Layout Tree\" Example main() mainmenucommand (str name) Description For developer use. Execute a command from the stock main menu. Example mainmenucommand(\"File|Open...\") maintenance (num command[, num state, str strparam]) Description For developer use. Set a maintenance switch. The first parameter designates the operation. The second parameter designates a state to set it to. Maintenance switches: 0. print this list 1. deadlinks 2. atttrbute bind method (0=names, 1=indices, 2=bootstrap) 3. numberprecision 4. display binding report 5. usercollisions 6. post-onsend 7. loadsavemode 8. disablefscheck 9. disablefspreprocess 10. splinetension 11. streamalizer 12. immediately load extended docs 13. save reps at experiment end 14. suppress object library compile 15. suppress global compile 16. set runtime info 17. get runtime info 18. bind c++ functions 19. autorebind c++ functions onoff 20. get presentation mode 21. refresh main menu 22. is optquest enabled 23. flypaths in seconds units 24. chached ports on/off 25. bind on reset on/off 26. set category name (user command group is 22, other 23, 24+ is available) 27. object sizermode 0. default 1. 3-axis 28. show hidden nodes in tree 29. hide 3d cursor 30. supress simclock redraw 31. use parser two 32. grid draw settings: bitwise field: 0x1-auto expand grid, 0x2-show grid axes, 0x4-show grid origin 1000. DDE Example maintenance(0) maintree () Reference to the main tree Description Returns a reference to the main tree. When defining string paths to nodes in the main tree, MAIN can be used as in the following example node(\"MAIN:/project/exec/globals/cppfunctions\"); Example maintree().find(\"project/exec/globals/cppfunctions\"); makeactive (obj viewwindow) Description For developer use. Makes the specified window active. Example makeactive(ownerview(c)); makearray (num qty) Deprecated, use the Array class Description This command is deprecated. Use Array (qty) instead. Array array = Array(4); Initializes a local array. Example makehisto (obj datalist, obj histocontainer, num nrofbuckets) Description For developer use. Builds a histogram structure from the data list and puts it in the destination container node with the given number of buckets. This is similar to graphtohistogram() except that this command creates a more complete structure. To illustrate the operator instead., view a FlexSim object's attribute tree. The makehisto command will create the entire stucture of object>stats/staytime/staytimehisto, whereas graphtohistogram will only populate object>stats/staytime/staytimehisto/data. makehisto also assumes a standard, y data series structure, meaning each sub-node of datalist is its own data point (they are not paired as x/y values). Example makehisto(c.find(\"@>objectfocus+\"), c.find(\">histogram\"), 20) max (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example maxof (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example mediafile (str filename) Description This command will search (by default in fs3d folder) for the filename and returns the full path plus filename if found. Example string fullpath = mediafile(\"fs3d\\\\queue_n_color.3ds\"); This example will return the string \"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\queue_n_color.3ds\" mediapath (str projectpath, str filepath, int mode) Description Returns strip of the project pathfile from filepath to make it relative, where mode denotes as 1=default, 2=getfile, 3=getpath. Example int mode = 1; mediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\program\", \"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\operator.3ds\", mode); If mode=1, returns \"program\" If mode=2, returns \"C:\\Program Files\\Flexsim4\\\" If mode=3, returns \"C:\\Program Files\\Flexsim4\\fs3d\\operator.3ds\" mediareset () Description For developer use. Unload all media. This will unload all currently loaded media from FlexSim: images; shapes; and sounds. Example mediareset() memberadd (obj childobject, str parentname, num type) Description If type = 1, then the childobject is added as a member to a Time Table named \"parentname\". If type = 2, then the childobject is added as a member to a MTBFMTTR object named \"parentname\". This is useful for dynamically assigning operators to different shifts for instance. Example memberadd(model().subnodes[2],\"TimeTable1\",1) memberremove (obj childobject, str parentname, num type) Description If type = 1, then the childobject is removed as a member from a Time Table named \"parentname\". If type = 2, then the childobject is removed as a member from a MTBFMTTR object named \"parentname\". see memberadd() Example memberremove(model().subnodes[2],\"TimeTable1\",1) memberremoveall (str parentname, num type) Description If type = 1, then all members are removed from a Time Table named \"parentname\". If type = 2, then all members are removed from a MTBFMTTR object named \"parentname\". see memberremove() Example memberremoveall(\"TimeTable1\",1) menubelow (HMENU menu, num index) Description For developer use. Get the menu item with the specified index (starting with 0) in the specified menu. Example var menu = menubelow(menumain(),4); menucheck (HMENU menu, num index, num on/off) Description For developer use. Set the check state of the menu item with the specified index (starting with 0) in the specified menu. Example menucheck(menumain(), 2, 1) menugray (HMENU menu, num index, num on/off) Description For developer use. Set the gray state of the menu item with the specified index (starting with 0) in the specified menu. Example menugray(menumain(), 2, 1) menumain () Description For developer use. Returns the HMENU reference of the main menu. Example var menu = menumain(); mergegetlanestate (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergegetlanestate(current, 5) mergegetnumlanes (obj mergeController) Description Deprecated, use Conveyor.MergeController class. Example mergegetnumlanes(current) mergeislaneclear (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergeislaneclear(current, 5) mergereleaselane (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergereleaselane(current, 1) mesh (node meshnode, int pervertexattribs, int flags) Creates an empty mesh and assigns it to meshnode Description Creates an empty mesh and assigns it to meshnode. The pervertexattribs takes a bit-wise ORed combination of the following attributes: MESH_POSITION (Added by default) MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Flags can be any of the following: MESH_STATIC_DRAW MESH_DYNAMIC_DRAW MESH_INDEXED Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE, MESH_STATIC_DRAW) meshaddindex (node meshnode, int index) Adds an indexed vertex to a mesh Description Adds an indexed vertex to the mesh associated with meshnode. This command is ignored if the mesh does not have a MESH_INDEXED flag. Example int newindex = meshaddindex(node(\"/mesh\",model()), 4) meshaddvertex (node meshnode) Adds a vertex to a mesh Description Adds a vertex to the mesh associated with meshnode. Returns the index of the added vertex. Example meshaddvertex(Model.find(\"mesh\")) meshdraw (node meshnode, int drawmode, int offset, int count [, int stride]) Draws a mesh Description Draws the mesh associated with meshnode. The value for drawmode can be any of the following: GL_POINTS GL_LINES GL_LINE_LOOP GL_TRIANGLES GL_TRIANGLE_STRIP GL_TRIANGLE_FAN Offset specifies which vertex index to begin at. Count specifies how many vertexes to set the drawmode. Stride specifies how many vertex indexes to skip between. For an indexed meshed, stride is ignored. Example meshdraw(node(\"/mesh\",model()), GLTRIANGLES, 0, 3, 0) meshinfo (node meshnode, int type[,int index, int param]) Gets the specified information from a mesh Description Gets the specified information from the mesh associated with meshnode. Index is the index of the requested vertex (base 0). Type is specified as one of the following for the mesh (index and param ignored): MESH_PER_VERTEX_ATTRIBS MESH_PER_MESH_ATTRIBS MESH_FLAGS MESH_NR_VERTS MESH_GET_INDEX - Returns the vertex index for the given index (only valid with MESH_INDEXED flag) The following are vertex specific types: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 If specifying a vertex, the following are valid for param: MESH_COLOR_RED MESH_COLOR_GREEN MESH_COLOR_BLUE MESH_COLOR_ALPHA MESH_POS_X MESH_POS_Y MESH_POS_Z MESH_TEX_S MESH_TEX_T Example double xposition = meshinfo(Model.find(\"mesh\"), MESH_POSITION, 6, MESH_POS_X) meshsetattrib (node meshnode, int attribid, double param1 [, double param2, double param3, double param4]) Adds/sets the value of attribid to the vertindex of a mesh Description Sets the value of attribid to be applied to the entire mesh associated with meshnode. The following attributes can be used as the attribid: MESH_NORMAL MESH_AMBIENT MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 MESH_SPECULAR MESH_SHININESS MESH_EMISSIVE Example meshsetattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) meshsetvertexattrib (node meshnode, int vertindex, int attribid, double param1 [, double param2, double param3, double param4]) Sets the value of attribid at the vertindex of a mesh Description Sets the value of attribid at the vertindex of the mesh associated with meshnode. The following attributes can be used as the attribid: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Note: The attribid must be defined previously when creating the mesh. Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE4, MESH_STATIC_DRAW) meshsetvertexattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) min (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2. Example minof (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2 Example minutes (num minutes) Gets the number of model time units in the number of minutes Description Return the number of model time units in the given number of minutes. Example minutes(1); Returns 60 seconds. model () Reference the model's root node Description This command returns a reference to the model node in the main tree. It is used as a fast way of referencing the model. Example treenode SourceObj = Model.find(\"Source1\"); This sets the variable SourceObj so that it references the node called Source1 in the model. modeldir () Gets the path to the currently open model's directory Description Returns that path of the currently open model's directory. Example modeldir(); modeleditmode (num/str mode) Description For developer use. Sets the current model edit mode. You can query the current mode with -1. Example modeleditmode(\"AConnect\"); module (num type, node libnode) Deprecated Description This command is deprecated. Use the DLL functionality provided with version 4 instead. Used with dll plugins. The type can be: MOD_LOAD (1) MOD_UNLOAD (2) MOD_GETFUNCTION (3) MOD_RUNFUNCTION (4) Example module(MOD_UNLOAD,main.find(\"project/exec/dll/1\")) moveobject (obj object, obj location[, num outport]) Moves object to the specified location Description This command moves the object to the specified location through the specified port. The specified port does not have to actually exist, this value is used by the receiving location to be able to reference the port the object came in through. When an object moves into location, the OnReceive event function of location is executed. This includes the OnEntry trigger function. Explicitly calling this on a flowitem with events queued up for it may cause problems. Only use when you know that no events are pending for the object being moved. Example moveobject(current.first,current.centerObjects[1]); This moves the first object that is inside the object referenced by current to the object connected to current's first center port. moveselectedintohighlighted (obj highlightedobj [, node selectedcontainer]) Description For developer use. Moves all selected objects in the model into the highlighted object. Example moveselectedintohighlighted(selectedobject(ownerview(c))) movetablecol (str/num/node table, num column, num newcolumn) Deprecated, use Table.moveCol() Description This command is deprecated. Use Table . moveCol (). instead. Moves a column of a table to newcolumn. Example movetablerow (str/num/node table, num row, num newrow) Deprecated, use Table.moveRow() Description This command is deprecated. Use Table . moveRow (). instead. Moves a row of a table to newrow. Example movetasksequence (obj tasksequence, obj dispatcher) Moves tasksequence into the dispatcher's tasksequence queue Description This command is deprecated. Use TaskSequence.move() instead. Moves the specified tasksequence into the specified dispatcher's tasksequence queue. WARNING!! This command should never be called on a tasksequence that is already being executed by a TaskExecuter. Example movetasksequence(tasksequence, current.centerObjects[1]); mpd (num value) Print an integer to the system console Description Prints the integer value to the system console Example mpd(6); mpf (num value) Print a floating point value to the system console Description Prints the floating point value to the system console. Example mpf(7.69); mph (num milesperhour) Gets the number of model length/time units in the number of miles/hour Description Return the number of model length/time units in the specified number of miles/hour. Example mph(9) mpr () Print a new line to the system console Description Prints a new line to the system console Example mpr(); mpt (str printvalue) Print text to the system console Description Prints the text printvalue to the system console. Example mpt(\"System console printout\"); msg (str caption, str text [, num buttontype]) Display a message dialog Description This command creates a message box with a title bar displaying the caption and the text written inside the box. The buttons displayed on the message box are based on the value for buttontype. If OK or Yes are pressed, msg() returns 1. If No is pressed, msg() returns 0. The value returned when Cancel is pressed depends on the buttontype. If buttontype is 3, Cancel returns -1; otherwise it returns 0. If buttontype is not specified, it is assumed to be 0. Values for buttontype: 0 - OK, Cancel 1 - OK 2 - OK, Cancel 3 - Yes, No, Cancel 4 - Yes, No Example if (msg(\"Finished\", \"Close the database?\") == 1) dbclose(); msgparam (num param) Within an OnMessage trigger, get the value of a message parameter Description Returns a parameter passed to with the Object . message () method or sendmessage() or senddelayedmessage() commands. Only used in OnMessage triggers. Example int msgtype = msgparam(1); treenode item = msgparam(2); Array data = msgparam(3); msgsendingobject () Within an OnMessage trigger, get a reference to the object sending the message Description Returns a reference to the object that sent the message as defined in the Object . message () method or sendmessage() or senddelayedmessage() command. Only used in OnMessage triggesr. Example treenode sender = msgsendingobject; mul (num value1, num value2) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of a and b. This returns the result of the arithmetic expression value1*value2. Example double product = mul(3,4); multisorttable (str/node/num table, num col1[, num col2, num col3, ...]) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by each column (ascending for positive columns, descending for negative columns). Example nametomodelpath (obj node, obj object) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Sets the name of a node to the path of the object relative to the model. Example nametomodelpath(curlistnode, current); ncols (node thenode) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Example ne (num/node value1, num/node value2) Deprecated, use the != operator Description This command is deprecated. Use the != operator instead. Example negbinomial (num successes, num prob[, num stream]) Returns a random sample from a negative binomial distribution Description Generates a discrete random variate from a negative binomial distribution with parameters as defined. Example netnodefromrank (num rank) Returns the network node member at rank rank Description Takes a network node member rank and returns the actual reference to the network node. Example treenode netnode = netnodefromrank(5); next (obj object) Deprecated, use treenode.next Description This command is deprecated. Use treenode . next instead. Reference the next sibling of a node. Example node (str relativepath[, obj startnode]) Deprecated, use treenode.find() Description This command is deprecated. Use treenode . find () instead. Reference a node by named path from a root node. Example nodeadddata (node thenode, num type:num/str/ptr/obj) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Add data to thenode, ie DATATYPE_NUMBER. Example nodebreak (node a) Description For developer use. Breaks a coupling pointer on a node that has coupling data that is pointing to another node. If the node is part of a bi-directional coupling, the other coupling is not affected. Example nodebreak(so()) nodedeldata (node thenode) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Removes all data from the node. Example nodefromwindow (num window) Description For developer use. Get the node of a window handle Example nodefromwindow(windowfromnode(sv())) nodefunction (node thenode [, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode. Thenode must be toggled as either a C++ node or a Flexscript node. If the node is C++, the model must be compiled before calling this command. Any parameters that need to be passed to the function are passed as par1, par2, etc. Up to 10 parameters may be passed. The values that are passed using this command must all be numbers, but can then be accessed and recast from within the function called using the command param(x) where x is the number of the parameter. Example nodefunction(node_v_entrytrigger,tonum(item),portnum); nodefunctionlisten (node theNode, node relayNode[, num flags, par1, par2, ... par10]) Description For developer use. This command will create a listening mechanism where whenever nodefunction() is called on theNode, relayNode will also be executed. flags is a bitwise mask of one of the following values: NFL_PRE_LISTEN : The listening function will be called before theNode is called. NFL_LISTEN : (default) The listening function will be called after theNode is called. NFL_PERSIST : The listener will persist across model resets. NFL_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into that function will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. When the listening node is called, if it returns NFL_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. Example nodefunctionlisten(getvarnode(current, \"entrytrigger\"), current.entrylistener); nodeinsertafter (node targetnode) Creates a new node immediately after targetnode Description This command creates a new node in the tree immediately after the targetnode. The new node has no data attached to it. Data is attached using the nodeadddata() command. Any node in the tree can be passed as targetnode. Example nodeinsertafter(item.find(\">labels\").last).dataType = DATATYPE_NUMBER; This creates a new label on the object referenced by item that holds number data. nodeinsertinto (node containernode) Deprecated, Creates a new node inside containernode Description This command is deprecated. Use treenode . subnodes .add() Example nodejoin (node a, node b) Description For developer use. Join two pointer nodes to form a bi-directional coupling. A bi-directional coupling in FlexSim is a pair of nodes who's data points to each other. FlexSim automatically manages the coupling. If either one of the endpoints is deleted or nullified, FlexSim cleans up to prevent dangling pointers. The two nodes a and b must have coupling data. Example nodejoin(so(),so().next) nodepoint (node a, node b) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value . instead. Points node a to node b. Example nodetomodelpath (node thenode [, num nameflag=1]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode from the model. Example nodetopath (node thenode [, num nameflag=0]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode. Example normal (num mean, num stddev[, num stream]) Returns a random sample from a normal distribution Description normal(μ, σ, stream) is an unbounded continuous probability distribution. Inputs: μ is the location parameter ∈ ( - ∞, ∞ ) σ is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( - ∞, ∞ ) mean = μ variance = σ² Probability Density Functions: Possible Applications: Used to model various types of error such as machined hole diameters for large quantities of parts. This distribution is not used much in simulation because variance found in real processes do not typically follow a symmetric distribution such as this. Comments: The normal distribution is completely symmetric meaning values below the mean have the same probability for occurance as values above the mean. The mode and mean are equal for the normal distribution. When using this distribution, be aware that negative values can be returned, and therefore truncating the distribution at 0 may be necessary as shown in the example below. Example double thickness = Math.max(0.001, normal(5, 1.2)); The thickness is set a normal distribution having a mean of 5 and a standard deviation of 1.2 that is truncated for values less than 0.001. No random stream has been declared, so the default stream number 0 will be used to generate variates from the distribution. not (num/node value1) Deprecated, use the ! operator Description This command is deprecated. Use the ! operator instead. Example notifylinecontroller (node object, int controllernum, num output, num sendinglast [0/1]) For Dynamo use Description For Dynamo use. Informs a LineController connected to the object that material has left the line so the Controller can decide if the run is complete. The number of the LineController to be notified is the contollernum parameter. The object should report how much material (of any kind) has left it since the model began running and whether or not the material leaving is the last material in the object. Example notifylinecontroller(current,1,current.stats.output + 1,(current.subnodes.length == 1)); nrcp (obj object) Deprecated, use Object.centerObjects.length Description This command is deprecated. Use Object . centerObjects .length instead. Number of center ports of object. Example nrip (obj object) Deprecated, use Object.inObjects.length Description This command is deprecated. Use Object . inObjects .length instead. Number of input ports of object Example nrop (obj object) Deprecated, use Object.outObjects.length Description This command is deprecated. Use Object . outObjects .length instead. Number of output ports of object. Example nrows (node thenode) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Example ntravelto (obj traveler, obj spline, num endx, num endy, num endz, num vmax, num acc, num dec, num startspeed, num endspeed) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Causes the object to travel to a given rz and return the simulation time that it will arrive. Similar to the travelto command, but includes a start and end speed definition. Used in the development of the TaskExecuter. Example ntravelto(current, 0, 5, 8, 0, 1, 1, 1, 0, 1) ntraveltoupdate (obj object) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Updates the rz of an object after a ntravelto() command was called on it. Used in the OnPreDraw of the TaskExecuter to update it's position. Example ntraveltoupdate(current) numconnections () Gets the number of server connections that are currently active Description Returns the number of server connections that are currently active. Example int numconns = numconnections(); Sets the numconns variable to the number of server connections that are currently active. numtostring (num value[, num width, num precision]) Deprecated, use string.fromNum() Description This command is deprecated. Use string . fromNum () (static method) instead. Converts value to a string. Example objectconnect (obj object1, obj object2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect two objects, adding needed ports. Object1 will have an output port added, and object2 will have an inport added as needed. Then the ports are connected. Example connect(so(),so().next) objectexists (obj object) Check if an object exists Description If you're trying to test if an object exists when using dot syntax you can omit the objectexists. For example, if (current.labels[\"MyLabel\"]) or if (current.next). This command returns true (1) if the object specified as object exists in the tree. If the object does not exist, this command returns false (0). Example if (objectexists(next(current))) { moveobject(item, next(current), 1); } This checks to see if there is an object in the tree after current. If there is, the object referenced by item is moved into it through port number 1. objectshapecode (obj object) Deprecated, use getshapeindex() Description This command is deprecated. Use getshapeindex() instead. Get the index of the object's default shape. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the objects default shape. Example objectshapecode(so()) objectsoundcode (obj object) Gets the index of object's default sound Description Get the index of the object's default sound. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This function will return the index corresponding to the objects default sound assuming the object has a sound and soundindex attribute (default objects do not at this time) Example objectsoundcode(current) objecttexcode (obj object) Deprecated, use getobjecttextureindex() Description This command is deprecated. Use getobjecttextureindex() instead. Gets the index of the object's default image. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to the objects default texture (image). Example objecttexcode(current) opavailable (obj object, num outputportnum) Description Returns a 1 if the downstream object through the specified object's output port is available. Particularly, it checks if the downstream object exists, if it is stopped, if its input is open, and if the connected input port is open. This function returns 0 if the downstream object isn't available. Example opavailable(current,1) openallip (obj object) Open all input ports of object Description Open all input ports of object. If an input port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openallip(current) openallop (obj object) Open all output ports of object Description Open all output ports of object. If an output port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openallop(current) openflexsimchart ([str filename1] [,str filename2]) Deprecated Description This command is deprecated. Example openglcolor (num red {0-1}, num green {0-1}, num blue {0-1}, num opacity {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example opengllighting (num on/off) Deprecated, use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) Description This command is deprecated. Use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) instead. Example openinput (obj object) Deprecated, use Object.input.open() Description This command is deprecated. Use Object . input .open() instead. This command unblocks the input of the object after it has been previously blocked with the closeinput() command. It is necessary that both the input ports themselves, and the input in general, are open before entry will be allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeinput(). Example if (current.subnodes.length < maxcontent) openinput(current); openip (obj object, num inputportnum) Open one input port of object Description Open just inputportnum of object. Opening an input port of an object will allow entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openip(so(),1) opennodeedge (obj networknode, num edgenum) Opens entry to the networknode's edge Description Opens entry to the networknode's specified edge number. Closing a node's edge with closenodeedge() blocks travelers from entry onto the edge. This command opens the edge up again. Example opennodeedge(current.centerObjects[1], 3); Opens node edge 3 of a NetworkNode connected to center port 1 of the current object. openop (obj object, num outputportnum) Open one output port of object Description Open just outputportnum of object. Opening an output port of an object will allow exiting from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openop(so(),1) openoutput (obj object) Deprecated, use Object.output.open() Description This command is deprecated. Use Object . output .open() instead. This command unblocks the output of the object after it has been previously blocked with the closeoutput() command. It is necessary that both the output ports themselves, and the output in general, are open before exiting is allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeoutput(). Example if (current.subnodes.length > mincontent) openoutput(current); opipno (obj object, num outputportnum) Input port number that is connect to outputportnum of object Description This command returns the input port number that is connected to outputportnum of object. Example int otherport = opipno(current,1); This sets otherport to the number of the input port that current's first output port is connected to. opopen (obj object, num outputportnum) Description Returns a 1 if the outputportnum on object is open. Otherwise returns zero. Example opopen(current,1) opready (obj object, num outputportnum) Description Returns a 1 if the outputportnum of object is open and the connecting input port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the output of this object or the input of the connecting object are currently open. Example opready(current,1) optimizenetwork () Causes the model's network navigator to regenerate its distance table Description Causes the model's network navigator to regenerate its distance table. Use this command if you are dynamically connecting edges in your network during the simulation run. This may take several seconds to do for large networks. Example optimizenetwork() or (num/node condition1, num/node condition2) Deprecated, use the || operator Description This command is deprecated. Use the || operator instead. Example outobject (obj object, num outputportnum) Deprecated, use Object.outObjects[] Description This command is deprecated. Use Object . outObjects [] instead. Reference the downstream object connected to an upstream object's output port. Example outputopen (obj object) Returns 1 if the object's output is open, 0 otherwise Description Returns 1 if the object's output is open, 0 otherwise. The closeoutput(), stopoutput(), openoutput(), and resumeoutput() commands affect the return value of this command. The commands like closeop() and closeallop() do NOT affect the return value. Example if(outputopen(current)) current.output.close; If the output is open for the current object, then close the output. outputtreecontent (node containernode, str path+filename) Writes the data of all nodes in the tree under containernode to a text file Description Writes the data of all nodes in the tree under containernode to a text file on disk. If file does not exist, it will be created. For more functionality, use menu option: Stats | Model Documentation. Example outputtreecontent(model(),\"C:/MyModelDocumentation.txt\") ownerobject (node thenode) Gets the object that \"owns\" the executing node, usually the current object Description This command returns the node with object data attached to it that is the start of the sub-tree that thenode is in. In other words, it returns the object node that contains thenode. The result of this command is cached on thenode, so that subsequent calls to ownerobject(thenode) do not search in the tree, but return the cached result. If thenode subsequently changes parent, ownerobject(thenode) will return the cached result. This command is used in most code fields and trigger fields to set the access variable current. In these fields, c references the node that contains the code, and ownerobject(c) references the object that \"owns\" that node. Example string objname = ownerobject(c).name; This sets objname to the name of the object that contains the node referenced by c. The c usually refers to the node where the code is being written. treenode current = ownerobject(c); This example is present in most code fields in FlexSim, and retrieves access to the \"current\" object. ownerview (obj viewobj) Description For developer use. Get the topmost node of a view structure. Example ownerview(sv()) param (num index) Gets a parameter passed into a function Description This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode), string, int, double, stringarray, intarray, doublearray or treenodearray. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = param(1); Other examples include: double quantity = param(2); var value = param(1); //In this example value could be used as any type pareto (num min, num scale[, num stream]) Returns a random sample from a pareto distribution Description Generates a continuous random variate from a pareto distribution with parameters as defined. Example parg () Description This command is deprecated. Example parg() parnode (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode). The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parval() and parstr() for casting them as numbers and strings respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = parnode(1); parqty () Description For developer use. Get the number of parameters passed into the nodefunction. This is used together with the nodefunction command. The value returned only applies when using Flexscript, not C++. Example parqty() parstr (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a string. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using the param() command. Example If a trigger/field is called with: nodefunction(thefuncnode, passingstr) then within the trigger/field, getting access to the passingstr string passed as the first additional parameter would be done with: string passedstr = parstr(1); particleset () Deprecated, do not use Description This command is deprecated. Used to set values on a \"particle\" object, which is no longer supported. Example parval (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a number. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parnode() and parstr() for casting them as a treenode and string respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, passingval) then within the trigger/field, getting access to the passingval passed as the first additional parameter would be done with: double passedval = parval(1); pc (num asciivalue) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an ASCII character to the output console. Example pd (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an integer to the output console. Example pdir () Description This command returns a string containing the path on the hard drive to the FlexSim's program directory. Example string flexpath = pdir(); This sets flexpath FlexSim's program directory. A typical installation would return C:\\Program Files\\FlexSim7\\program\\ as the string. pearsont5 (num location, num scale, num shape[, num stream]) Returns a random sample from a pearson t 5 distribution Description Generates a continuous random variate from a Person-T5 distribution with parameters as defined. Example pearsont6 (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a pearson t 6 distribution Description Generates a continuous random variate from a Person-T6 distribution with parameters as defined. Example pf (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a floating point number to the output console. Example pfile () Description For developer use. Returns the string attached to the end of the command line used to start the FlexSim application. Example If FlexSim was started with this command line: \"C:\\Program Files\\Flexsim7\\program\\flexsim.exe\" \"mymodel.fsm\" then a call to pfile() would return mymodel.fsm as a string. pi () Deprecated, use Math.pi Description This command is deprecated. Use Math . pi instead. Gets the value of pi (3.14159....). Example pickcolor () Description For developer use. Opens a color picker window to allow the user to pick a color. Use pickedcolorred(), pickedcolorgreen(), pickedcolorblue() commands to retrieve the rgb color component values. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickcolornode (obj colornode) Description For developer use. Open a color picker window to set the rgb color values of the color attribute node of an object. Example pickcolornode(color(current)); Opens a color picker window and then sets the color of the current object to the chosen color. pickedcolorblue () Description For developer use. Returns the blue component of a color picked with the pickcolor() command. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickedcolorgreen () Description For developer use. Returns the green component of a color picked with the pickcolor() command. Example pickcolor(); int greencomponent = pickedcolorgreen(); The greencomponent variable will be set to the rgb value for the green component of the color chosen with pickcolor(). pickedcolorred () Description For developer use. Returns the red component of a color picked with the pickcolor() command. Example pickcolor(); int redcomponent = pickedcolorred(); The redcomponent variable will be set to the rgb value for the red component of the color chosen with pickcolor(). pickfile (str extension, str extensiondescription[, str defaultreturn]) Description For developer use. Opens a file browser for the user to choose a file. The browser will be looking for files with the specified extension. The extensiondescription is any text which describes the type of files allowed. This command will return the full path to the chosen file. Convert the return value with tostr(). See filebrowse() command. Example pickfile(\"*.xls\",\"Excel Workbooks\") picklistapply (obj combobox) Description For developer use. Applies the selected picked option from a picklist combobox. This is done when applylinks is called, or when and OK or Apply button is pressed. Example picklistapply(c) pickoffsetx (obj station, obj item, obj loadingobject) Description This command queries the station for an x offset for the loadingobject to travel from its x center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = pickoffsetx(item.up,item,current); pickoffsety (obj station, obj item, obj loadingobject) Description This command queries the station for a y offset for the loadingobject to travel from its y center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = pickoffsety(item.up,item,current); pickoffsetz (obj station, obj item, obj loadingobject) Description This command queries the station for a z offset for the loadingobject to travel from its z base in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = pickoffsetz(item.up,item,current); pickoptiononselect (obj view) Description For developer use. This command is used by pick list gui controls to modify the combobox text when an option is selected. Example pickoptiononselect(c); placeoffsetx (obj station, obj item, obj unloadingobject) Description This command queries the station for an x offset for the unloadingobject to travel from its x center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = placeoffsetx(current.centerObjects[1],item,current); placeoffsety (obj station, obj item, obj unloadingobject) Description This command queries the station for a y offset for the unloadingobject to travel from its y center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = placeoffsety(current.centerObjects[1],item,current); placeoffsetz (obj station, obj item, obj unloadingobject) Description This command queries the station for a z offset for the unloadingobject to travel from its z base in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = placeoffsetz(current.centerObjects[1],item,current); poisson (num mean[, num stream]) Returns a random sample from a poisson distribution Description Generates a continuous random variate from a poisson distribution with parameters as defined. Example popupmenu (obj view) Description For developer use. Returns a reference to the view's popup menu as an HMenu. Example popupmenu(c) port <no parentheses> Description This command is deprecated. This should not be used as a special command with the setport command anymore. Instead, declare an int variable type as port, then use port in your code as any other variable type. Example int port = param(3); pd(port); This sets port to param(3) and then prints the value to the output console. postclosewindowmessage (obj view) Posts a Windows Message to close the window Description Posts a message onto the Windows message queue to close the window. This allows you to finish any scripting code before the window is actually closed. Example postclosewindowmessage(ownerview(c)); postmovewindowupdate (obj view) Description For developer use. Do not use. Example postwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API PostMessage() command, posting a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example postwindowmessage(windowfromnode(view), WM_COPY, 0,0); pow (num num1, num num2) Deprecated, use Math.pow() Description This command is deprecated. Use Math . pow () instead. Calculates num1 raised to the power of num2. Example pr () Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a new line to the output console. Example prev (obj object) Deprecated, use treenode.prev Description This command is deprecated. Use treenode . prev instead. Reference the previous sibling of a node. Example print ([var value, var value2, ...]) Print the contents of the given parameters and a new line to the console Description This command takes 0 to 20 variants as parameters. Each parameter is printed to the console and separated by a space. After all the parameters are printed a new line character is printed to the console. The output console must be open to write to it. To open the console, use Debug > Output Console in the menu. Example print(\"Number:\", 1); print([1, 2]); This prints \"Number: 1\" and \"Array[2]: {1,2}\" on different lines of the output console. profileevents () Prints descriptions of all events currently in the event queue to the output console Description Prints to the output console descriptions of all of the events currently waiting in the event queue. The output console must be open to write to it. To open console, use menus View | Output Console. Example profileevents() profilekinematics (node infonode, num kinematicindex) Prints information about the specified kinematics operation to the output console Description Prints information about the specified kinematics operation to the output console. For more information, refer to the help documentation on kinematics. Example printkinematics(current.labels[\"kinematics\"], 0); profiletasksequence (node tasksequence) Prints information on a task sequence to the output console Description Prints information on a task sequence to the output console. The output console must be open to write to it. To open the output console, use menus View | Output Console. You can also pass a reference to the TaskExecuter object instead of a specific task sequence. This will profile the object's currently active task sequence. Example profiletasksequence(gettasksequence(so(), 0)); Writes all the tasksequence information to the output console for the active (0) tasksequence of the selected object (so()). programdatadir () Gets the full path to the directory where FlexSim stores program data Description Returns a full path to the directory where FlexSim stores program data, such as the help documents. Example programdatadir() returns a string like \"C:\\ProgramData\\Flexsim\\Flexsim7\\\" pt (str text) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print text to the output console. Example pullitem (obj fixedresource, obj item, num portnr[, num bypassflags]) Description Tells the fixedresource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. If the pull evaluation is true, this command pulls the item immediately. This command returns 1 if the item was successfully pulled and 0 if not. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. You can specify BYPASS_ALL to immediately pull the item regardless of availability. Example pullitem(current, item, 1); // See also Pull Best Item picklist option qstudentt (num confidence [0.9/0.95/0.99], num degreesoffreedom) Description For developer use. Returns the quantity of the studentt distribution value for the given percent confidence and degrees of freedom. Example qstudentt(0.95, nrofsamples - 1) query (str query[, node/num/str p1, node/num/str p2, ...]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example rackdrawfilledcell (obj rack, num bay, num level, num x, num y, num z, num sx, num sy, num sz, num red, num green, num blue) Draws a box in the rack's given bay and level Description Draws a box in the rack's given bay and level. x,y, and z are numbers between 0 and 1 representing the percentage into the cell to start drawing the box. sx, sy, and sz are numbers between 0 and 1 representing the size percentage of the box. Red, green and blue specify the color of the box. To ensure that the boxes are drawn correctly, you should disabled OpenGL textures with fglDisable(GL_TEXTURE_2D) before calling this command in a draw trigger. Example fglDisable(GL_TEXTURE_2D); for (int bay = 1; bay <= 5; bay++) { for (int level = 1; level <= 3; level++) { rackdrawfilledcell(current, bay, level, 0,0,0, 0.5,1,1, 255,0,0); } } fglEnable(GL_TEXTURE_2D); This example draws red boxes in bays 1-5, levels 1-3, that fill half of each cell's volume (sx = 0.5, sy =1, sz = 1). rackdrawvirtualcontent (obj rack, num bayfillperc, num levelfillperc, num itemdepth, num red, num green, num blue, num virtualonly) Draw the rack's virtual content Description Draws the rack's \"virtual\" content. This command will usually only be used if you are recycling flowitems using the rackrecycleitem command. When this command is executed, the rack goes through its content table, and draws a box for every flowitem in the rack, at its appropriate bay and level. If virtualonly is 1, then it will only draw a box in spots where a slot is filled, but no flowitem is present (the flowitem has been recycled). Bayfillperc and levelfillperc are values between 0 and 1, and specify the percent of the cell to fill with the drawn box. Item depth is the size each item takes up in the rack. For a floor storage rack, this the z size of the items. For a regular rack, it is the y size of the items. Example rackdrawvirtualcontent(current, 0.9,0.9,3, 256,0, 0, 1); rackgetbaycontent (obj rack, num bay) Gets the number of flow items in the bay of the rack Description Returns the number of flow items in the specified bay of the rack Example int numitems = rackgetbaycontent(current, 5); Sets numitems to the number of flowitems in bay 5 of the current rack. rackgetbayloc (obj rack, num bay) Gets the x location of bay relative to the rack's origin Description Returns the x location of the given bay of the rack, relative to the rack's origin. Example rackgetbayloc(current, 5); Returns the rz of bay 5. rackgetbayofitem (obj rack, obj item) Gets the bay number of the rack that the item is placed in Description Returns the bay number of the rack that the item is placed in Example int baynum = rackgetbayofitem(current, item); Sets baynum to the bay number containing item in the current rack. rackgetbaysize (obj rack, num bay) Gets the x size of bay of the rack Description Returns the x size of the given bay of the rack. Example rackgetbaysize(current, 5); Returns the size of bay 5. rackgetcellcontent (obj rack, num bay, num level) Gets the number of flow items in bay and level of the rack Description Returns the number of flow items in the specified bay and level of the rack Example int numitems = rackgetcellcontent(current, 5, 3); Sets numitems to the number of flowitems in bay 5, level 3 of the current rack. rackgetcellvar (obj rack, num bay, num level, num varnum, node storagenode) Description Returns the value stored in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example int typeofcellitems = rackgetcellvar(current, 1,5,3, current.labels[\"storageData\"]); rackgetitembybaylevel (obj rack, num bay, num level, num itemrank) Gets a reference to an item in the bay and level of the rack Description Returns a reference to an item in the specified bay and level of the rack. Itemrank specifies the rank of the item in that cell. Example treenode theitem = rackgetitembybaylevel(current, 5, 4, 2); Sets theitem pointer to the second flowitem in bay 5, level 4 of the current object. rackgetitemcellrank (obj rack, obj item) Gets the item's rank within the rack's cell Description Returns the rank of the item within its given cell in a rack. Example int theRank = rackgetitemcellrank(current, item); rackgetlevelloc (obj rack, num bay, num level) Gets the y or z location of the level relative to the rack's origin Description Returns the y or z location of the given level of the rack, relative to the rack's origin. If the rack is a floor storage rack, this returns the y rz. If the rack is a normal rack, this returns the z rz. Example rackgetlevelloc(current, 5, 4); Returns the y or z location of bay 5, level 4. rackgetlevelofitem (obj rack, obj item) Gets the level number of the rack that the item is placed in Description Returns the level number of the rack that the item is placed in Example int levelnum = rackgetlevelofitem(current, item); Set the levelnum variable to the level number containing item in the current rack. rackgetlevelsize (obj rack, num bay, num level) Gets the y or z size of the level of the rack Description Returns the y or z size of the given level of the rack. If the rack is a floor storage rack, this returns the y size. If the rack is a normal rack, this returns the z size. Example rackgetlevelsize(current, 5, 4); Returns the y or z size of bay 5, level 4. rackgetnrofbays (obj rack) Gets the number of bays rack has Description Returns the number of bays that the rack has. Example return duniform(1,rackgetnrofbays(rack)); This returns a random number between one and the number of bays on the rack. This is the same as the \"Random\" option of the place in bay pick list. rackgetnroflevels ( obj rack [,num bay ] ) Gets the number of levels in the bay of the rack Description Returns the number of levels in the specified bay of the rack. If no bay parameter is passed into the function, then the nroflevels in the first bay will be returned. Example return duniform(1,rackgetnroflevels(rack, baynum)); This returns a random number between one and the number of levels on the chosen bay of the rack. This is the same as the \"Random\" option of the place in level pick list. rackrecycleitem (obj rack, obj item, num binrank) Recycles the flowitem into the flowitem bin Description Recycles the flowitem into the flowitem bin specified. This command is for advanced users, and should not be used unless you are prepared to do some debugging. Bin rank should be the rank of the flowitem in the flowitem bin (textured colored box = 5, etc.). When this command is called, the flowitem is recycled, but the spot where it is located is designated as taken, and further flowitems will be put into the rack as if this spot is already filled. This can significantly increase the speed of a model. Subsequent commands to rackgetbaycontent(), rackgetcellcontent(), etc. will return values as if the item were still there. However, rackgetitembybaylevel() will return NULL for an item that has been recycled and has yet to be restored. Make sure the item is not released or waiting for a transport before calling this command. Note that max content of the rack will not work properly if this command is used. Also you will need to eventually restore the item using the rackrestoreitem() command. Example rackrecycleitem(current, item, 5); This recycles the flowitem into the 5th ranked flowitem of the flowitem bin (usually the textured colored box). rackrestoreitem (obj rack, num binrank, num bay, num level, num position) Restores a flowitem from the flowitem bin into the bay and level Description Restores a flowitem from the flowitem bin into the given bay and level. Example rackrestoreitem(current, 5, 7, 3, 1); This restores a flowitem from the 5th ranked flowitem of the flowitem bin (usually the textured colored box) into bay 7, level 3, position 1 of the rack. racksetcellcontent (obj rack, num bay, num level, num contentval) Sets the virtual content of the rack's cell to contentval Description Sets the \"virtual\" content of the rack's cell to the specified value. This should only be used if you are recycling and restoring items to the rack with rackrecycleitem() and rackrestoreitem(). You will usually use this command to set an initial \"virtual\" content on reset. Example racksetcellcontent(current, 5, 3, 2); racksetcellvar (obj rack,num bay, num level, num varnum, num setvalue, node storagenode) Description Sets the value in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. Setvalue is the value to set it to. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example racksetcellvar(current, 5, 3, 2, 4.6, current.labels[\"storageData\"]); This sets the 2nd value of bay 5, level 3 to 4.6 radianstodegrees (num value) Deprecated, use Math.degrees() Description This command is deprecated. Use Math . degrees () instead. Convert radians to degrees Example randantithetic (num on/off) Description Makes number streams antithetic. Using this command, users can switch random streams to generate numbers between 1 and 0; rather than the default of 0 to 1. This is helpful for determining if random numbers are having a big affect on the results of the model. It's also useful when experimenting with massive models and there isn't sufficient time to run the model for multiple iterations as required for good statistical sampling. The user can then choose to do just one regular run and one antithetic run of the model to obtain two diametrically apposed results. These two results can be averaged for an approximation that is somewhat better than if each run of the model used random stream generators without antithetic sampling. Example randantithetic(1); randinit (num stream, num seedvalue[, num seedvalue2, num seedvalue3, num seedvalue4, num seedvalue5, num seedvalue 6]) Initializes a random stream Description Initializes the random number stream by setting its first value to seedvalue. Although there are an unlimited number of random number streams available to the user, only the first one hundred streams numbered 0 through 99 have been initialized when the FlexSim application is opened. To create a new stream, simply execute the randinit() command for the new stream. For instance, executing randinit(105, 7628912) will create a new stream number 105 if it does not currently exist, and set its initial seed value to 7628912. If \"Repeat Random Streams\" has been selected in the Statistics menu, then streams 0 through 99 will be automatically initialized with a default seed value for that stream whenever the model is reset. For streams 100 and above, you must use the randinit() command to set their initial seed values if you wish to repeat their random streams. Any positive integer may be passed in as the seedvalue for a random number stream. If you pass in a seedvalue of 0 for random streams 0 through 99, it is a special case that will initialize them to their default seed values. seedvalues 2 through 6 are only used if you are using FlexSim's Combined MRG random number generator. To enable this generator, call maintenance(49,1) when your model opens. Example Example 1: randinit(5, 73241); Initialize FlexSim's random stream number 5 with a sead value of 73241. Example 2: randinit(2,0); for(int i = 100; i <= 199; i++) { randinit(i, realtime(1) * uniform(0, 1, 2)); } First initialize standard stream number 2 to its default seed value, then execute a loop for 100 iterations to create (if necessary) streams 100 through 199 and set their initial seed value to the product of a random number pulled from stream 2 and the current number of real clock seconds. randnext (num stream) Description For development use. Returns the next random number from the stream. This command is used to pull random samples from probability distribution functions. Example randnext(1); Gets the next random number in the stream of random numbers associated with stream generator number 1. randomwalk (num location, num scale, num shape[, num stream]) Description Generates a continuous random variate from a random walk distribution with parameters as defined. Example randstate (num stream[, seednr]) Gets the current state value for the random number stream Description Returns the current state value for the specified random number stream. This state value may be useful as the seed value in the randinit() command for the purposes of restarting a saved state model from the same point in the random number stream of the initial run. seednr is only needed if you are using FlexSim's Combined MRG random number generator, in which case the seednr should be a value 1-6 defining which seed value you want to get the state on. Refer to randinit() for using the Combined MRG. Example int curstate = randstate(5); Set the curstate variable to the current random integer value stream number 5. rank (obj parent, num index) Deprecated, use treenode.subnodes[] Description This command is deprecated. Use treenode . subnodes [] instead. Reference a child node by rank. Example rankfromnetnode (obj netnode) Returns the member rank of network node netnode Description Takes a network node reference and returns the member rank of that network node. Each network node has a specific \"member rank\", which is used as a row/column reference in the network's distance and next node tables. The first network node that is added to a model gets member rank 1, the second gets member rank 2, and so on. Example int memberrank = rankfromnetnode(current); rankobj (obj container, num rank) Deprecated, use Object.attrs[] Description This command is deprecated. Use the treenode . attrs 's [] operator instead. Gets a reference to the ranked node in the object's attribute sub-tree at rank. Example reacquirepreemptedresource (node token, node instance, node preemptedObject, node info, node activeProcess, num sameAsLast [, num newPriority]) Description Example reacquirepreemptedresource(token, current, preemptedObject, info, activeProcess); realtime ([num timecode = 0]) Gets the real clock time Description Returns the real clock time in a variety of formats based on the timecode: 0 = the number of seconds and milliseconds since midnight, Jan 1, 1970 1 = the number of seconds since midnight, Jan 1, 1970 2 = the number of milliseconds since the last second change 10 = a time string with format hh:mm:ss 11 = a date string with format mm/dd/yy 12 = a date/time string with format Mon Nov 15 15:49:12 2004 Example string curdatetime = realtime(12); reassignnetnode (obj taskexecuter, obj networknode) Description TaskExecuters using a NetworkNode system are always associated with a specific NetworkNode in the system (red line graphic) which continually changes as they travel around. This command reassigns the specified taskexecuter to networknode. Warning!!! Do not execute this command unless the TaskExecuter is on a network, and unless you know the TaskExecuter is not currently executing a travel task. Example reassignnetnode(current, current.centrObjects[5]); Reassign the current TaskExecuter to the NetworkNode connected to its fifth center port. reassignticker (obj fluidobject, obj ticker[, int resortticker]) Reassigns the Fluid Object's ticker Description Changes the Fluid Object passed in as the first parameter from the control of its current Ticker, to the Ticker that is passed in as the second parameter. The object will then have its fluid movement calculated whenever the new Ticker's tick-time elapses. It is recommended that Fluid Objects that are connected to each other always be controlled by the same Ticker. If resortticker is 1, then the new Ticker will immediately resort its list of controlled objects. This may change the order that some fluid objects are evaluated and may have side-effects in the model behavior. Example reassignticker(current,Model.find(\"Ticker2\",1); rebindobjectattributes (node thenode) Rebinds object attributes Description Rebinds object attributes for the given node. If you delete or add an attribute to an object, the object's attribute cache will not immediately reflect that change, so you can call rebindobjectattributes to update the object's attribute cache. This is the same as right-clicking on the object and selecting Edit|Rebind Object Attributes. Example rebindobjectattributes(c) receiveitem (obj station [, num port ] ) Tells the FixedResource to open inputs and receive a flowitem Description Tells the FixedResource station to open its inputs and receive a flowitem. The port parameter is optional, and should only be used if you know exactly which port you want to receive from. If the port parameter is specified, this object will try to receive any item from the upstream object if its corresponding output port is open, ignoring any items' previous send-to return values (similarly to how pull logic works). This function should be executed only once to receive an item, and it should only executed again once you have received (or have confirmed reception of) that item. See also releaseitem() command. This function should generally only be used from within a BasicFR's code fields, as other objects implement receiveitem() on their own. If the object receives an item immediately, then it will return 1, otherwise 0. Example receiveitem(current) recover (num phase) Load recovery files Description Load recovery files. phase: 1 or 2 Example recover(1) recycleitem (obj item , num binrank ) Recycles the flowitem to the flowitem bin Description Recycles the specified flowitem to the flowitem bin. Binrank should be the rank in the flowitem bin to recycle to (texturedcoloredbox = 5, etc.) Example recycleitem(item, 5); redirectconsole (num console:output/system/compiler/trace, obj view) Redirects any prints to a given console Description This redirects any prints to a given console so that they will instead be printed to the view text of the specified view. CONSOLE_OUTPUT redirects the output console, CONSOLE_SYSTEM redirects the system console, CONSOLE_COMPILER redirects the compiler console, CONSOLE_TRANCE redirects the trace console. To redirect it back to its original console, call the command again and specify NULL as the view parameter. Example redirectconsole(2, c); buildnodeflexscript(getvarnode(Model.find(\"Processor1\"), \"exittrigger\")); redirectconsole(2, NULL); This redirects the compiler console to the view c and then builds flexscript on a node in the model. Thus, any errors in building flexscript will be directed to the view c instead of to the compiler console. redirectnetworktraveler (obj traveler, obj newdest) Description Attempts to change the end destination of the traveler to that of the newdest object. Only works if the traveler is currently on a TASKTYPE_TRAVEL task and is on a travel network. Returns 1 if successful. Example redirectnetworktraveler(traveler, Model.find(\"Processor5\")); Redirects the traveler to an object in the model named Processor5 assuming traveler is a pointer to a taskexecuter currently traveling on a network node system and Processor5 is connected to the network. redirectpicklists (obj view) Description For developer use. Adjusts all picklists of a parameters or properties window that has been redirected. Example redo (obj view) Description Redoes the previously undone action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example redo(view); refreshcommandlist () Description For developer use. Refreshes the command list. Example refreshcommandlist() refreshglobalvariables () Description For developer use. Refreshes all global variables to their initial values. Example refreshglobalvariables() refreshmodelcommands () Description System command. Do not use. Example refreshview (obj view) Description For developer use. Regenerate the window from it's view definition. Example refreshview(c) reftable (str/num globaltable) Deprecated, use Table(\"GlobalTableName\") Description This command is deprecated. Use the Table class instead. Gets a reference to a global table. Example Table table = reftable(\"GlobalTable1\") registereventtype (str name) Description Registers a custom event type for use with the Event Log. Returns the index of the eventtype to be used later by other commands such as logevent(). Example int index = registereventtype(\"MyEventType\"); releasebatch (node batch, int failed [, int/str/obj connector]) Description Releases batch from a Batch activity. If failed is 1, all tokens in the batch will be released and the release quantity and label values will be ignored. Example releasebatch(batch, false); releasebatch(batch, true, \"Failed\"); releasebatch(batch, true, getactivity(processFlow, \"Garbage\")); releaseitem (obj flowitem [, num port ]) Releases the flowitem from its current object Description Releases the specified flowitem. A flowitem is released when it is free to exit the object currently containing it, at which time the Send to Port is evaluated. This command should only be used if the flowitem is in a BasicFR object and the flowitem has not been released already, or if it is any FixedResource and has been held with holditem(). The second paramter, port, is optional. If passed, the sendto will not be evaluated, but the item will instead be released out the specified port. If the flowitem exits, releaseitem will return 1. Otherwise it will return 0. See also receiveitem() command. Example releaseitem(item) releasetoken (node token [, int/str/obj connectorOrActivity]) Description Deprecated. Use Token . release (). Example releasetoken(token); releasetoken(token, 3); releasetoken(token, \"To Start\"); releasetoken(token, getactivity(processFlow, \"Start\")); releasewave (node wave) Description Releases the wave from a Synchronize or Join activity. If the wave is in a Synchronize activity, tokens will exit the activity through the same connector rank that they entered through. If the wave is in a Join activity, the first token added to the wave will exit the activity. Example releasewave(wave); relloc (obj object, obj containerobj, num coordinate) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. This command returns the x, y, or z location of an object relative to an object that contains it. The containerobj does not need to be the immediate container, but does need to eventually be a container of the object. Use a coordinate value of 1,2,3 for x,y,z respectively. Example double x = relloc(current,model(),1); double y = relloc(current,model(),2); double z = relloc(current,model(),3); Sets x, y and z to the x,y,z positions of the current object relative to the model space. removeallcouplingreferences (node thenode) Recursively breaks couplings from a node and its subnodes in the tree Description Recursively breaks couplings from a node and its subnodes in the tree. Example removeallcouplingreferences(current); removebundleentry (node datanode, int entrynum) Removes the entry entrynum (base 0) of the bundle Description Removes the entry entrynum (base 0) of the bundle. Example removebundleentry(x, 2); removefirstbundleentry (node datanode) Removes the first entry in the bundle Description Removes the first entry in the bundle. For managing memory footprint of historical data. Example removefirstbundleentry(x); removelastbundleentry (node datanode) Removes the last entry of the bundle Description Removes the last entry of the bundle. Example removefirstbundleentry(x); reordertasks (obj dispatcher) Causes the dispatcher to reorder all its task sequences according to its queue strategy Description Causes the involved Dispatcher/TaskExecuter to reorder all its task sequences according to its queue strategy. Example reordertasks(c) repaintall () Description For developer use. Repaint all windows. Example repaintall() repaintallactive () Description For developer use. Repaint all windows in the active list. Example repaintallactive() repaintview (obj view) Description For developer use. Repaint the window without regenerating. Example repaintview(c) repeat (num nr, expression) Description Executes expression the specified number of times. The expression can use \"count\" to get the 1-based number of the iteration being executed. Example repeat(current.outObjects.length, current.outObjects[count].input.close); This example will close the input of all objects connected to the output ports of current. replacedata_n (obj startnode, num value, num replacement) Description For developer use. Search/Replace number data matched under startnode. Only number data nodes are searched. Returns the total number of matches found. Example replacedata_n(main(),25,42) replacedata_s (obj startnode, str string, str replacement[, num replication]) Description For developer use. Search for a string data match under startnode and replace with the replacement string. Results appear in the output console. This function will recognize and replace substrings. The search is case-sensitive. Replication is currently not used. See searchdata_s(). Returns the total number of matches found. Example replacedata_s(main(),\"jack\",\"john\") replacename (obj startnode, str searchname, str replacement) Description For developer use. Replace all node names found to be a match with searchname that fall under startnode. This function requires an exact match and will not recognize substrings. Returns the total number of matches found. Example replacename(main(),\"jack\",\"john\") report (obj containerobj, str path+filename, num append [0/1]) Description For developer use. Generate a standard report file in \"comma separated value\" (csv) format for all objects under containerobj which are currently selected. If append is 1, then the report will be appended to the end of the file specified. If append is 0, then either the file will be created or the existing file will be cleared before the report is written to it. Example report(model()); reportmode (int mode [0=general, 1=state]) Description For developer use. Set the report mode. (General or state.) Example reportmode(0); repositionhighlightededits (obj view) Description For developer use. Repositions the edit controls for a tree view's highlighted object. Example requestdecision (str/node/num object) Description Request a decision from a ReinforcementLearning object. When training, this will cause the simulation to return a reward for the previous action, make a new observation, and (if the episode is not done) wait for an action from the algorithm. When running normally (not training), this will make an observation and execute the On Request Action trigger of the ReinforcementLearning object in order to make a heuristic decision or predict an action using a trained AI model. Use this command to specify exactly when the AI should make a decision. Example requestdecision(\"ReinforcementLearning1\"); requestoperators (obj dispatcher, obj station, obj involved, num nrofops, num priority, num preempting) Description Request a specified number of operators to come to the station object and work on the involved object until released. The involved object will later need to be passed into the freeoperators() command when releasing the operators. The operator(s) being called must either be the object referenced by dispatcher, or be connected to its output ports. The tasksequence which is sent to the operator(s) will be given a priority and preempting value. The possible values for preempting are as follows: 0 = PREEMPT_NOT 1 = PREEMPT_ONLY 2 = PREEMPT_AND_ABORT_ACTIVE 3 = PREEMPT_AND_ABORT_ALL For each operater that needs to be called, stopobject() will be called on the station, and a tasksequence that looks like the following will be sent to the dispatcher (or operator) object. 1. put a preempt \"bookmark\" in the task sequence (TASKTYPE_MILESTONE) 2. travel to the station (TASKTYPE_TRAVEL) 3. resume the station (TASKTYPE_STOPREQUESTFINISH) 4. be utilized at the station (TASKTYPE_UTILIZE) Example requestoperators(current.centerObjects[1], current, item, 2, 0, PREEMPT_NOT); This calls 2 operators connected to the object that is connected to the first center port of the current object to come to the current object, and work on the item. rerankbesttask (obj object) Description This command forces the object specified as dispatcher to search through its task sequence queue and put the task sequence with the highest priority in the front of its queue. This will not reorder the other task sequences in the queue. Example rerankbesttask(current); reset () Deprecated, use resetmodel() Description This command is deprecated. Use resetmodel() instead. For developer use. This command resets the model. The simulation clock is set to 0, and the OnReset event function is called for every object in the model. The OnReset events generally call the ResetTrigger functions that the users define. The model must be compiled before it can be reset. The resetmodel() command should typically be used instead of reset(). Example reset(); go(); This resets then runs the model. resetexperiment () Description For developer use. Reset the experiment without performing a full model reset. It is typically used internally by the experiment manager. Example resetexperiment() resetlayer (obj layer) Description For developer use. Resets the layer passed. Use resetmodel instead. Example resetmodel ([num buildflexscript]) Resets the model Description Resets the model. Use this command instead of reset(). The parameter specifies whether the engine should build all flexscript functions as well. Example resetmodel() resetstats () Description For developer use. Reset all object statistics without performing a full model reset. It is typically used internally by the experiment manager. Example resetstats() resetuniqueid (obj flowitem) Resets the uniqueid attributes on a flowitem to a value that has not been assigned to another flowitem Description This command resets the uniqueid attribute on a flowitem to a value that has not been assigned to another flowitem already. This attribute is required to collect Full History information for the Full Report. This command should be used if a flowitem has not been destroyed but needs to be considered as a new item for data collection purposes. For example, if a flowitem is being recycled by a modeler (not with the built-in recycling functionality), they should call this when the flowitem is returned to circulation. Flowitems typically only have the uniqueid attribute when Full History collection is enabled. Example resetuniqueid(item); resumeanimation (obj object, num/str animation[, num resumeAtType, num resumeAtVal]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Resumes an animation from some point in the middle of the animation. Example resumeanimation(current, \"Stand\"); resumeinput (obj object) Deprecated, use Object.input.resume() Description This command is deprecated. Use Object . input .resume() instead. This command opens the input of an object just like openinput() does, but because it keeps track of previous stopinput() commands called on the object, it will only open input after all stops have been resumed. Refer to openinput() documentation for additional information. Example resumeinput(current.centerObjects[1]); resumeobject (obj object [, num id, num stateprofile ] ) Deprecated, use Object.resume() Description This command is deprecated. Use Object . resume () instead. Tells the object that it may resume whatever it was doing before stopobject() was called on it. The id value is optional and is for matching stop requests with resume requests. Refer to the stopobject() documentation for more information on this. Example resumeobject(current.centerObjects[1]); resumeoutput (obj object) Deprecated, use Object.output.resume() Description This command is deprecated. Use Object . output .resume() instead. This command opens the output of an object just like openoutput() does, but because it keeps track of previous stopoutput() commands called on the object, it will only open output after all stops have been resumed. Refer to openoutput() documentation for additional information. Example resumeoutput(current.centerObjects[1]); resumetransportsin (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportin command, and notifies those taskexecuters that they can resume their unload operation. The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsin variable. References to specific saved taskexecuters can be referenced by: nroftransportsinnode.subnodes[saverank].value Example resumetransportsin(current); resumetransportsout (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportout command, and notifies those taskexecuters that they can resume their load operation.The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsout variable. References to specific saved taskexecuters can be referenced by: nroftransportsoutnode.subnodes[saverank].value Example resumetransportsout(current); return (num value) Description This command causes a function to stop executing and return value to the function that called it. Example double res = item.rank * 5; return res; This sets the value of res to 5 times the rank of the item referenced by item. The value stored in res is then returned to the function that called this one. richeditaddtext (obj richedit, str text, num protected (0/1)) Deprecated, do not use Description This command is deprecated. Do not use. Example richedittoken (obj richedit, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example rotateselected (double angle, double x, double y[, obj roottree]) Description Rotates all selected objects in the model around the designated origin x/y location Example rotateselected(90, 5, 0) This example rotates selected objects 90 degrees around the location (5,0) round (num value[, num precision]) Deprecated, use Math.round() Description This command is deprecated. Use Math . round () instead. Rounds the value to the nearest integer. Example rundocument (str command, str path+filename) Open a file using the default application for the file type Description Opens a file using the default application used for opening files with the specified extension on your computer. The available commands are: edit, explore, find, open, and print. A return value > 32 means success. Example rundocument(\"open\",\"C:/myfile.doc\"); Opens myfile.doc with whatever application is default for opening *.doc files on your computer. runexpertfit () Description Deprecated, returns 0. Example runexpertfit() runfunction (num noreset) Description For developer use. Block user input/output, perform a model run at maximum speed possible by cpu, and return control when stoptime is met. If stoptime = 0, the stoptime is assumed to be 1000. See go(). Example runfunction(1) runprogram (str commandline) Run an external program Description Run an external program. This command will issue a command to the operating system. The commandline may contain full program arguments. A return value > 31 means success. Example runprogram(\"c:/myprogram.exe\") runspeed (num speed[, num precisionMode]) Sets the simulation speed Description This command sets the speed at which the simulation will run. It is the same as clicking and dragging the slider bar on the Run Control window, but more precise. The speed that the model will attempt to run at is defined as the number of simulation time units per real second. The model may not actually achieve this speed if the computer cpu can not keep up. precisionMode defines the precision to use. If 0, the precision mode will remain what it was before the call. If you pass RUN_SPEED_LOW_PRECISION, it will set to a low precision run speed. If you pass RUN_SPEED_HIGH_PRECISION, it will run in high precision mode. This is used for emulation purposes. The precision mode will be reset to low precision on every reset, so you need to have something in your model set it back on reset or when the model starts to enable high precision mode. Example runspeed(10); go(); This sets the speed to 10 simulation seconds per real second, then runs the model. savebyname (obj tree, str filename) Description For developer use. Saves the specified tree node to a file with the given name. Example savebyname(Model.find(\"MyProcessor\"), \"C:\\\\MyProcessor.t\"); savefpk (node servicepackhead) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. This saves the node to disk as a service pack file (.fpk). A save file dialog box will appear, allowing you to define the path and name of the file. A service pack is nothing more than a node with subnodes. The first subnode is assumed to be toggled flexscript and contain string data with code. When the service pack is loaded using File | Install Service Pack, the first subnode of you service pack will execute automatically. The code will usually copy the other subnodes into the MAIN and VIEW trees. Example savefpk(so()); savemodelprepare () Description For developer use. Prepares the model to be saved, including reseting, etc. Example savemodelprepare(); saveselectedtofile () Description For developer use. Saves all selected objects in the model to a tree file. Example saveselectedtofile() savestate () Description For developer use. Saves the state of the project. Once this command is executed, you can save your project (.fsp), then open in later, compile, execute loadstate(), and run from the previous spot you started from. Example savestate(); savestoppedtransportin (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport in complete trigger of a BasicFR object. If the BasicFR is not ready to receive an item that a taskexecuter is about to unload, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to receive it. When the BasicFR becomes ready to receive the item(s), it should call the resumetransportsin() command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their unload operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportin(current, transporter); return -1; } savestoppedtransportout (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport out complete trigger of a BasicFR object. If the BasicFR is not ready to send an item that a taskexecuter is about to load, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to send the item. When the BasicFR becomes ready to send the item, it should call the resumetransportsout command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their load operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportout(current, transporter); return -1; } savetree (node tree, str extension, str description, str startingpath) Description For developer use. Opens a save file dialog prompting the user for a file name to save. The tree passed in will be saved with the specified name, unless a session is selected. Then the first parameter is ignored. cdir() and pdir() may not be directly used as the path in FlexScript. Example savetree(model(),\"fsm\",\"FlexSim Model\",documentsdir()); scalekinematicstotime (node kinematics, int kinematicnr, double scaletotime) Scales the kinematics to a defined time Description Scales the kinematic(s) to a defined time. This can be used to preserve the characteristics of the kinematics, i.e. accelerate->peak speed->decelerate, but have the total time it takes to perform the kinematics be defined by some other mechanism such as a distribution. If kinematicnr is 0, then the entire set of kinematics will be scaled to the given time. If kinematicnr is greater than 0, then only that kinematic will be scaled. The return value is the new end time of the kinematic(s). Example scalekinematicstotime(kinematics, 0, exponential(0, 10)); scrollinfo (obj/HWND view, num get_set {0-1}, num horz_vert_ctl {0-2}, num scrollinfo {1-4}[, num value]) Description For developer use. Gets or sets scrollinfo for a scrollbar on a view. The value parameter is only used if get_set is 1. The position of the scrollbar (nPos) is changed with scrollinfo 4. You can also get and set the nMin, nMax, and nPage values of the scrollbar with scrollinfo 1, 2, and 3 respectively. Example scrollinfo(TheTable,1,1,4,scrollinfo(c,0,1,4)-amount); searchdata_n (obj startnode, num val) Description For developer use. Search for a number data match under startnode. Only number data nodes are searched. Results appear on the output console. Returns the total number of matches found. Example searchdata_n(main(),25) searchdata_s (obj startnode, str string [, num replication]) Description For developer use. Search for a string data match under startnode. Results appear in the output console. This function will recognize substrings and report which nodes contain them, and how many. The search is case-sensitive. Replication is currently not used. Returns the total number of matches found. Example searchdata_s(main(),\"glVertex()\",1) searchfornode (str/node searchstr, node startnode, num findnr[, num searchobjects]) Description For developer use. Recursively searches the startnode for a node with a name containing the searchstr. The findnr parameter is useful when the search finds multiple nodes containing the given name, specifying a number i here will give you the ith node found. Set searchobjects to 1 to search the object's data nodes. Example searchname (obj startnode, str searchname) Description For developer use. Search for a name match under startnode. Results appear in the output console. The search is case-sensitive. Returns the total number of matches found. Example searchname(main(),\"FixedResource\") seconds (num seconds) Gets the number of model time units in the number of seconds Description Return the number of model time units in the given number of seconds. Example seconds(30); Returns 0.5 minutes. select (obj window) Description For developer use. Select the specified view object. Convert the return value with tonode(). Example select(ownerview(c)) selectall () Description For developer use. Selects all objects in the model. Example selectall() selectedobject (obj window [, num reset]) Description For developer use. Get the highlighted node in a view. Example selectedobject(ownerview(c)) selectedx (obj window) Description For developer use. Get the x position of the highlighted object in a view. Example selectedx(ownerview(c)) selectedy (obj window) Description For developer use. Get the y position of the highlighted object in a view. Example selectedy(ownerview(c)) selectedz (obj window) Description For developer use. Get the z position of the highlighted object in a view. Example selectedz(ownerview(c)) senddelayedmessage (obj toobject, num delaytime, obj fromobject [, num par1, num par2, num par3]) Send a delayed message to an object, firing its OnMessage trigger after the delay time has transpired Description This command is deprecated. Use Object . message () instead. Causes a message to be sent to the toobject from the fromobject after the delaytime has transpired. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three numeric par values passed in as msgparam(1), msgparam(2) and msgparam(3). This is a very usefuly command for creating your own time events during a model run. Example senddelayedmessage(current.outObjects[1], 25, current, 0, 0, 0); Sends a message from the current object to the object connecte to output port 1 of the current object 25 time units after this command is executed. Zeros are passed for all three of the user-defined parameters. sendmessage (obj toobject, obj fromobject [, var par1, var par2, var par3]) Send a message to an object, firing its OnMessage trigger Description This command is deprecated. Use Object . message () instead. Causes a message to be sent immediately to the toobject from the fromobject as in a direct function call. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three par values passed in as msgparam(1), msgparam(2) and msgparam(3). These message parameters are Variants, meaning they can be numbers, strings, treenode references or arrays. Example sendmessage(current.centerObjects[1], current, item, 10); This sends a message to the object connected to current's first center port. A reference to item is passed as par1 and the number 10 as par2. sendonactivatenotify () Description For developer use. Causes each palette windows' OnActivateNotify event to fire. Example sendonactivatenotify(); sendwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API SendMessage() command, sending a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example sendwindowmessage(windowfromnode(view), WM_COPY, 0,0); serveraccept (int noblocking) Gets the server will attempt to accept a client connection Description The server will attempt to accept a client connection. If noblocking = 0, the command blocks until a connection is made. It returns an index used to reference the connection made. The server will attempt to accept a connection from a waiting client. A number will be returned that is the index of the connection established. A return value of 0 indicates that no connection was created. This value will be used in all future server calls. If noblocking = 1, the server will not block FlexSim program execution, but will return a 0 if no client attempts to connect. If noblocking = 0, the server will block (freeze) FlexSim program execution until a client attempts to connect. Connections with clients are only made with this command. Example int client = serveraccept(0); servercloseconnection (int connection) Closes the client connection Description The specified connection to a client is closed. Does not close the main server socket. This should be done when the server is completely finished communicating with a client. Example servercloseconnection(1); serverclosemain () Closes the main server socket and all open connections Description Closes the main server socket and all of the connections that are still open. No more communication can be done until it is created again. All connections should be closed before this is called. Example serverclosemain() servercreatemain (int port) Creates a server socket that is listening for connections to the specified port Description Creates a server socket that is listening for connections on the specified port. Some ports (called well-known ports) are reserved for special applications. Anything port number over 1024 is usually safe to use. Example servercreatemain(1880); serverreceive (int connection, char *buffer, int bufsize, int noblocking) Receives a message from the connection Description Receives a message from the specified connection. This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = serverreceive(1,Buf,15,0); flexscript: string readstr = serverreceive(1, NULL, 15, 0); serversend (int connection, char* message [, num charlength] ) Sends a message to the client connect to connection Description Sends the specified text message to the client that is connected to the specified connection. Returns the number of bytes (characters) sent correctly. The text message to be sent must be converted into a char *. The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example serversend(1,\"MadeConnection\"); set (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setanimationvar (obj object, num/str animation, str varName, num/obj toValue) Sets the value of an animation variable on an object Description Sets the value of an animation variable on an object. Animation variables are attributes of an animation that may need to dynamically change for different runs of the animation, such as surrogates, time between keyframes, or position/rotation/size values of a given keyframe. For example, you may use surrogates in building your animation. You do this by choosing a default visual from the flowitem bin to use as you create the animation. Then when the simulation runs, you substitute real flowitems in for those surrogates when you run the simulation. You do this substitution by setting the value of an animation variable that you've associated with that surrogate to the actual reference to the flowitem. Another example is you may use an animation variable to dynamically define the z position of a keyframe at run-time. Example setanimationvar(current, \"Animation1\", \"Item1\", current.first); setapplicationtitle (str title) Description For developer use. Sets the current application's title. Example setapplicationtitle(\"Custom Application Title\"); setbundlevalue (node datanode, num entrynr, str/num field, num/str val) Sets the value of the entry (base 0) and field (base 0) of the bundle Description Sets the value of the defined entry (base 0) and field (base 0) of the bundle. Example setbundlevalue(x, 5, \"Object Name\", current.name); setcameradirection (obj view, num x, num y, num z, num rx, num ry, num rz) Sets the viewpoint direction of the 3D view Description Set the viewpoint direction of an orthographic or perspective view. (x,y,z) is the location of the focus point of the camera. (rx, ry, rz) is the rotation of the camera. The associated view attribute names are: viewpointx, viewpointy, viewpointradius, viewpointrx, viewpointry, viewpointrz respectively. Example setcameradirection(sv(), 0, 0, 0, -40, 0, 25); setcameravolume (obj view, num w, num h, num nearclip, num farclip, num magnification, num fov, num projtype, num firstperson) Description For developer use. Set the OpenGL camera volume. Sets additional view parameters not set with setcameradirection. Example No example. setcenter (obj object, num x, num y, num z) Deprecated, use Object.setLocation() Description This command is deprecated. Use Object . setLocation () instead. Sets the x, y, and z location of the object's rotational center, relative to its container. Example setchecked (obj view, num value) Description For developer use. Set the checked state of a button. Example setchecked(c,0) ; setcollisioncheck (obj taskexecuter, num checkstate [, num checkinterval]) Sets the state and interval for collision checking on the taskexecuter Description Sets the state and interval for collision checking on the taskexecuter. If checkstate is 1, then check for collisions, else don't. If interval is >0, then reset the \"Time between Collision Checks\" for the taskexecuter specified. Example setcollisioncheck(traveler,1,5); Starts the traveler checking for collisions every 5 time units. setcolor (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the red, green and blue color components of an object Example setcurrent (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setcursor (num cursorid[, num forgetCount = 0]) Sets the visual look of the mouse pointer Description Sets the visual look of the mouse pointer. Valid ids are as follows 1: Arrow 2: IBeam 3: Wait 4: Cross 5: UpArrow 6: Size 7: Icon 8: SizeNWSE 9: SizeNESW 10: SizeWE 11: SizeNS 12: SizeAll 13: No 14: Hand 15: AppStarting 16: Help The forgetCount defines if/when FlexSim should go back to the default cursor. If 0 (default), then FlexSim will keep that cursor until the user calls setcursor() again. If you pass a positive number then FlexSim will reset the cursor back to the default after forgetCount number of mouse move messages are received from the system, if you have not called setcursor() again in that interval. Example setcursor(3) setdrawnamefunction (num boxwidth, num boxheight, node nodefunction[, num pval1, num pval2, num pval3]) Description This command gives direct access to the functionality that displays information in boxes below objects in the model. FlexSim's 3D display mechanism works by performing multiple drawing passes over the objects in the model. First, it gathers and caches data for what needs to be drawn. Then it goes through and draws the object shapes and calls the objects' custom draw functionality. Finally it draws any overlays such as connectors, information boxes, etc. The setdrawnamefunction() command, if called as part of an object's custom draw functionality, i.e. its OnDraw event or its Custom Draw Code trigger, will cause a callback to be fired when the drawing sequence gets to the information box step for that object. To do this, call the command and specify the size that you want the box to be drawn, and pass as the nodefunction parameter a reference to a node holding the code you want to fire to draw the box information, as well as up to 3 parameters that will be passed as param(1), param(2), and param(3) into that nodefunction. Then implement the nodefunction code to draw any information you want, using the drawflattext() command, or any other OpenGL drawing commands. Note that when the nodefunction is call, the OpenGL model view matrix will be set so that the (0,0,0) point is at the top-center of the display box, and one length unit represents one pixel on the screen. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object setdropcoords (obj view[, obj dropnodefrom, obj dropnodeto]) Description For developer use. Sets the dropx() and dropy() coordinate commands for the view based on current mouse location. You can optionally also set the dropnodefrom and dropnodeto parameters, which will define the nodes returned by dropnodefrom() and dropnodeto(). Example setdropcoords() seteventtime (str EventName, num time, num timemode[1/2], num createevent[1/0]) Sets the \"Repeat Event Time\" for the global UserEvent Description Sets the \"Repeat Event Time\" for the specified global UserEvent. If timemode = 1, then timeval will be used directly; otherwise, the timeval - time() will be used. If createevent = 1, then in addition to updating the \"Repeat Event Time\", a single event will be created at the previous time specified. Example seteventtime(\"UserEvent1\",20,1,0); The global userevent named \"UserEvent1\" will have its \"Repeat Event Time\" to 20. setframe (obj object, num/str toframe) Sets the shape frame of an object Description Sets the frame attribute of the object to the framenumber. The frame defines which 3D image to display. This is a nice way of changing the 3D shape of an object on the fly. There are two ways to define frames on an object. First, you can do it through the naming of various 3D files. For example, if the object was assigned Operator.3ds as its default shape, and there are additional files in the same directory as Operator.3ds named OperatorFRAME1.3ds, OperatorFRAME2.3ds and OperatorFRAME3.3ds, then the frame attribute could be set to 0,1,2, or 3 which would change the displayed shape to each of the 3ds files respectively. Secondly, you can add sub-nodes to an obejct's shape attribute, each with a path to the 3D file associated with that frame. Subsequently, frame 1 would be associated with the shape attribute's first sub-node, etc. This is the method used within FlexSim's environment to define shape frames. If toframe is a string, then the latter method is assumed, and it will find the shape attribute sub-node with the corresponding name. One use of this command would be to change the 3d shape in the OnDown trigger to show a \"broken\" shape. Example if(getframe(current) == 3)) setframe(current, 5); setitem (thing) Deprecated do not use Description This command is deprecated. Do not use. Example setiteminvolved (obj item, obj involved) Description This sets the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. Only use this command if you are using the explicit FixedResource class as and object in your model. You can use this command, along with the setitemvar, getitemvar, and getiteminvolved commands, to store variables on the items the object receives. Example setiteminvolved(current.first, current.centerObjects[1]) setitemsendto (obj item, num value) Description This sets the value of the sendto for the item if it is in a FixedResource. Only use this command if you are using an explicit FixedResource class object and want to store a sendto value on the item before releasing it, and then later use the releaseitem() command, passing the port in. If you want to change the evaluated sendto of an item that has already been released, execute holditem(), and then releaseitem() again, instead of this command. Example setitemsendto(item, current.currentsendto) setitemtype (obj object, num value) Deprecated, use labels Description This command is deprecated. Use labels instead. This command sets the itemtype attribute of the object to value. If the object does not have the itemtype attribute, this command does nothing. The attribute itemtype is typically used to distinguish between different types of flowitems that may be of the same class. Example setitemtype(item,duniform(1,3)); This sets the itemtype attribute of the flowitem referenced by item to a random integer between 1 and 3. setitemvar (obj item, num var, num value) Description This sets the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3, and the value parameter should be whatever value you want to set it to. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the getitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example setitemvar(current.first, 3, time()) setkinematicsrotoffset (node infonode, num rx, num ry, num rz) Description Sets the initial kinematics rotational offset for a kinematics operation. For more information, refer to the help documentation on kinematics. Example setkinematicsrotoffset(current.labels[\"kinematics\"], 0, 0, 180); setlabel (obj node, str/num label, num/str/node value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets the value of an object's label. Example setlabelnum (obj object, str/num label, num value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value. Example setlabelstr (obj object, str/num label, str value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value Example setloc (obj object, num x, num y, num z[, num xFactor, num yFactor, num zFactor]) Deprecated, use Object.location Description This command is deprecated. Use Object . location instead. Sets the x, y, and z location of the object relative to its container. Example setmessageloopsleep (num interval, num sleeptime) Description For developer use. Set a sleep time for each cycle of the message loop to decrease cpu load. Use carefully because a large value can make FlexSim unresponsive to user input. Every interval milliseconds, FlexSim will pause for a period of sleeptime milliseconds. This command may help certain laptops that tend to overheat due to excessive cpu usage. Example setmessageloopsleep(1) setname (obj object, str value) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodename (obj/node object, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodenum (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setnodestr (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setobjectbillboard (obj object, num mode) Sets the billboard attribute of the visual tool object Description This command sets the billboard attribute of the visual tool object. The following modes are available: 0: No Billboard, the visual tool will display based on its set rotation. 1: Vertical Billboard (plane only), this will cause the plane to stand vertically in the model and always face toward the camera along the same viewing plane. 2: All Around Billboard (plane only), this will cause the plane always present its face to you no matter what the viewing angle is. 3: Screen Locked Billboard, locks the Visual Tool in front of the view. Example setobjectbillboard(current, 1); setobjectimageindex (obj object, num index) Deprecated, do not use. Description This command is deprecated. Do not use. Sets the index number of the bmp or jpeg image to be assigned to the base of the object (2D shape and base image). For the new index to take effect, the imagebase node of the object must be removed or renamed, so this command renames the imagebase node to \"_imagebase\" for you. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Example setobjectimageindex(item,gettextureindex(\"fs3d\\\\BBsphere.bmp\")); setobjectshapeindex (obj object, num index) Sets the index number for the 3D shape of an object Description Sets the index number for the 3D shape of an object. For the new index to take effect, the shape node of the object must be removed or renamed, so this command renames the shape node to \"_shape\" for you. The index number must be a valid index number of a currently imported 3D shape. To view currently imported 3D shapes and to import more shapes, use View -> Media Files. See setframe() as another solution to changing the 3D shape of an object on the fly. Example setobjectshapeindex(item,getshapeindex(\"fs3d\\\\Processor.3ds\")); setobjecttextureindex (obj object, num index) Sets the index number of the image assigned as a texture for the object's 3D shape Description Sets the index number of the bmp or jpeg image to be assigned as the texture for the object's 3D shape. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Note that this command does not change the object's imageobject attribute so the original texture will return when the model is reset. Example setobjecttextureindex(item,gettextureindex(\"bitmaps\\\\flowitempicture.bmp\")); setpickingdrawfocus (obj theview, obj focus, num what[, obj secondaryfocus, num flags]) Description For developer use. Sets the draw code following this call to be picked as the focus when clicking or dragging. Usually you would use this to draw custom sizers and grippers on your object, and then implement an OnDrag or an OnClick event on the object that would call getpickingdrawfocus() to figure out what part was clicked. flags is a bitwise combination of one \"DETECT_DRAG\" setting, as well as optional \"override\" bits. The override bits aren't used to define picking focus, but will cause FlexSim to override its normal drawing of sizers and bounding boxes. DETECT_DRAG_X, DETECT_DRAG_Y, DETECT_DRAG_Z - will only detect dragging along the given axis, relative to the object being drawn. Use this with the draginfo() command in your OnDrag event to determine where the object is being dragged. DETECT_DRAG_XY, DETECT_DRAG_YZ, DETECT_DRAG_XZ - will only detect dragging along the given plane. Again you would use this with the draginfo() command in the OnDrag event. OVERRIDE_DRAW_SIZER_X, OVERRIDE_DRAW_SIZER_Y, OVERRIDE_DRAW_SIZER_Z, OVERRIDE_DRAW_SIZER_X_NEG, OVERRIDE_DRAW_SIZER_Y_NEG, OVERRIDE_DRAW_SIZER_Z_NEG, OVERRIDE_DRAW_SIZER_ALL - these flags will cause the engine to not draw the flagged sizers OVERRIDE_DRAW_YELLOW_BOX - causes FlexSim to not draw the yellow box around the object when selected OVERRIDE_DRAW_GREEN_BOX - causes FlexSim to not draw the green \"statistics-active\" box around the object OVERRIDE_DRAW_REDBOX - causes FlexSim to not draw the red selection box around the object when selected OVERRIDE_DRAW_HOVERBOX - causes FlexSim to not draw the yellow hover box around the object when hovering over it OVERRIDE_DRAW_ALL - causes FlexSim to not draw any sizers or boxes around the object OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse down\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been pressed on the given object. OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse up\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been released on the given object. OVERRIDE_SET_MOUSE_MOVE_PICK - explicitly sets the view's \"mouse move\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been moved on the given object. OVERRIDE_SET_MOUSE_HOVER_PICK - explicitly sets the view's \"mouse hover\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been hovered over the given object. Example setpickingdrawfocus(view, current, 20, drawsurrogate(current).first.subnodes[3], DETECT_DRAG_Y); setport (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setpreempt (obj tasksequence, num newpreempt) Sets the preempt value of the tasksequence Description Sets the preempt value of the tasksequence to the value of newpreempt. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example setpreempt(tasksequence, PREEMPT_NOT); This example changes the task sequence's preempt value to not preempt. setpriority (obj tasksequence, num newpriority) Sets the priority of the tasksequence Description Sets the priority value of the tasksequence to the value newpriority. Example setpriority(myts, 1); This example sets the priority value of the task sequence myts to the value of 1. setprogressbar (num progress) Description For developer use. Sets the progress bar to the specified value. Should be a value between 0 and 100. Example setprogressbar((numread / numtotal) * 100); setproperty (str filename, num property, str newvalue) Description For developer use. Sets the value for the specified property in the specified file to the newvalue. Example setproperty(modeldir() + \"MyModel.fsm\",1,\"Custom Title\"); setquerynode (node queryNode) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example setrank (obj/node object, num index) Deprecated, use treenode.rank Description This command. Use treenode . rank instead. Sets the rank of a child node in its parent's sub-tree. Example setresetposition (obj object) Sets the reset position of the object Description Sets the reset position of the object to its current position. Example setresetposition(current); setrot (obj object, num rx, num ry, num rz) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Sets the rotation of the object. Example sets (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setsdtvalue (node sdtNode, str valName, num/str/node toVal) For developer use Description Primarily for developer use only. Sets the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example setselectedobject (obj view, obj selected) Description For developer use. Sets the selectedobject (yellow highlighted object) of the view. Note that this is different than so(). The highlighted object is accessed by the selectedobject() command. Example setselectedobject(ownerview(c), model().first) setsize (obj object, num sx, num sy, num sz) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Sets the size of the object. Example setstate (obj object, num state [, num profilenr]) Deprecated, use Object.setState() Description This command is deprecated. Use Object . setState (stateNum); Sets the state of an object. Example setstate_s (obj object, str statename) Description This command is deprecated. Use Object . stats .state().valueString = stateStr; For development use. Set the state of an object using the actual name of one of the states. The state names must be as they appear in a state pie chart. Example setstate_s(current,\"busy\") settable (node table, num sx, num sy[, num type, num overwrite]) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example settableheader (string/num/node table, num row/col, num rowcolnr, string value) Deprecated, use Table.setColHeader() or Table.setRowHeader() Description This command is deprecated. Use Table . setColHeader () or Table . setRowHeader () instead. Sets the value of the header field of a table Example settablenum (str/node/num table, num row, num col, num value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the number value in a table cell. Example settablesize (str/num/node table, num rows, num cols [, num datatype, num overwrite y/n]) Deprecated, use Table.setSize() Description This command is deprecated. Use Table . setSize () instead. Sets the size of a table. Example settablestr (str/node/num table, num row, num col, str value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the text value in a table cell. Example settableviewselection (obj tableview, num startrow, num startcol, num endrow, num endcol[, num rangeselected]) Description For developer use. Sets the blue selection range in a table view. If any of the number parameters are less than 0, it deselects everything. Use 0 to select header cells. Example settableviewselection(c,0,1,2,2); setticker (node thenode[, num tickspersecond]) Description For developer use. Set the ticker script node. If tickspersecond is specified, the code will be executed that many times per second, otherwise the code associated with the node will be executed at each iteration of the windows event loop. The node must be toggled FlexScript or C++. No model events are created in association with the ticker node execution. To turn off ticker execution, use setticker(0). Example setticker(so()) settokencolor (node token, num red{0-255}, num green{0-255}, num blue{0-255} [, num alpha{0-255}]) Description Deprecated. Use Token . setColor . Example settokencolor(token, 100, 100, 0, 255); settokenshape (node token, num index) Description Deprecated. Use Token . setShape . Example settokenshape(token, 16); settrackedvariable (str/node trackedvar, num value[, num rate]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example setundos (num maxundos) Deprecated Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Sets the maximum number of allowable undos. A copy of the entire model will be saved each time a mouse is clicked or a key is pressed. Using the setundos command, you specify the maximum number of model copies that will be remembered for undoing. This command first requires creating a node in the main tree named undo and giving it number data. Example setundos(2); setvarnum (obj object, str/num var, num value) Sets the value of an object's numeric variable Description Set the specified variable on the object to the number passed in as value. Example setvarnum(current.centerObjects[1],\"speed\",1.5); setvarstr (obj object, str/num var, str value) Sets the value of an object's string variable Description Set the string value of the specified variable on the object. Example setvarstr(current,\"cycletime\",\"return exponential(10,1);\"); setviewtext (obj/HWND window, str text) Description For developer use. Set the text of a gui edit field. Example setviewtext(c,\"hello\") shapeinfo (num info[, p1, p2, p3]) Gets or sets information about loaded 3D shapes. Description Gets or sets information about loaded 3D shapes. Example shapeinfo(SHAPEINFO_GET_ANIMATION_COUNT, shapeIndex); shiftpressed () Description For developer use. Test if SHIFT key is pressed. Example shiftpressed() shiftscheduledownfunction (node downBehavior, node table, node downObject, double duration) Description Example shiftscheduledownfunction(lunch, shiftSchedule1, doctor, 400); showcompilerconsole () Description For developer use. Show the compiler console. Example showcompilerconsole() showgraphicinfo (num showhide, str filename) Deprecated, do not use Description This command is deprecated. Do not use. Example showhelp (str topicname) Description For developer use. Opens a help topic specified by the topic name. Example showhelp(\"getting_started\"); showhtmlhelp (str topic) Description For developer use. Open FlexSim's User Manual with the given topic to open. Example showhtmlhelp(\"Welcome_to_Flexsim.html\") showprogressbar (str caption) Description For developer use. Opens the progress bar with the specified caption. The bar's progress will be initialized to 0. Use setprogressbar to update the progess value. Example showprogressbar(\"Loading data, please wait\"); sign (num value) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Sign of value. Example simexec (num cmd, num v1) Description Example sin (num angle) Deprecated, use Math.sin() Description This command is deprecated. Use Math . sin () instead. Gets the sin of an angle in radians. Example skip () Description For developer use. Advance the model run by one step (process exactly one event) and then process any and all events at that same exact model time. Example skip() so () Gets a reference to the last node designated as so() Description This command returns a reference to the last node that was designated the selected object. This command is only used in the scripting window. To designate a node as so, right-click on the node in the tree and select Edit|Designate This Node (so). Any node in the tree can be designated the selected object. Example getnodename(so()) This returns the name of the object that is currently designated the selected object. This command would generally only be used in the scripting window. The final semicolon (;) is not needed in the scripting window. socketend () Shuts down the processes started with socketinit() Description This command shuts down the processes that were started with socketinit(). It should be called when the model has completely finished working with the sockets that it had open. This function returns true if the shut down is successful. See clientsend() for more information. Example socketend(); socketinit () Initializes background processes that allow Windows Sockets to be used Description This command initializes the background processes that allow Windows Sockets to be used. It must be called before any calls to socket commands will work. This function returns true if the initialization is successful. See clientsend() for more information. Example socketinit(); socketx socketx(int serverclient, int cmd, int port=0, char* data=\"\", linkedlist * thenode=SAFENODE) Not implemented yet Description Not implemented yet. Example sorttable (str/node/num table, num column) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by the values in column in ascending order. Example soundchange (obj view, num sound, num volume, num tempo, num repeat, num balance) Change a currently playing sond Description Change a currently playing sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Interesting affects are achieved when the volume and balance are changed based on the viewpoint relative to an object making the object appear to be emitting the sound. Example soundchange(sv(),1,1,1,1,.5) soundload (str path+filename) Load a sound into FlexSim Description A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. Microsoft Wave Format files (.wav) can be loaded and played. Sounds can have their volume, balance and frequency adjusted dynamically. Multiple channels are managed through the Microsoft DirectSound Interface. Example int applauseindex = soundload(\"c:/My Music/APPLAUSE.WAV\"); soundplay (obj view, num soundindex, num volume [, num tempo, num repeat y/n, num balance]) Play a loaded sound Description Play a loaded sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplay(sv(),3,.75,.25,1,.5) Continuously play sound index 3 in the selected view with 3/4 volume, and 1/4 tempo and balanced evenly across both speakers. soundplayfile (obj view, str path+filename, num volume [, num tempo, num repeat, num balance]) Play a sound directly from a file Description Play a sound directly from a file. Sounds are attached to a window by the operating system, so the view parameter is important. The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplayfile(sv(),\"C:/My Sounds/APPLAUSE.WAV\",1,1,0,.5); soundstop (obj view, num sound) Stop a sound playing Description Stop a sound playing. Sounds are attached to a window by the operating system, so the view parameter is important. Example soundstop(sv(),1) spacebase ([num view/object]) Description Set the OpenGL matrix to the scaled space of the current object/view. If the parameter is 0, then the object's base space matrix will be loaded. If the parameter is 1, then the view's space will be loaded, meaning any subsequent draw commands will face the viewer directly and not change scale. This command can only be used in OnDraw event and Custom Draw Code trigger. See drawtoobjectscale() when scaling the OpenGL space by the object's size. Example spacebase(0); spaceglobal () Deprecated, use drawtomodelscale() Description This command is deprecated. Use drawtomodelscale() instead. Set the OpenGL space to the global matrix. Example spaceglobal() spaceobject () Deprecated, use drawtoobjectscale() Description This command is deprecated. Do not use. Use drawtoobjectscale() instead. Example spaceobject() spacerotate (num x, num y, num z) Description Apply rotation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glRotatef( z, 0.0f, 1.0f, 0.0f); glRotatef(-y, 0.0f, 0.0f, 1.0f); glRotatef( x, 1.0f, 0.0f, 0.0f); Example spacerotate(90, 0, 0) This rotates the current coordinate space by 90 degrees around the FlexSim x-axis. Subsequent draw commands will be performed from this new rotation. spacescale (num x, num y, num z) Description Apply scale transform to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glScalef(x,z,y); Example spacescale(2, 1, 1) This scales the current coordinate space by 2 times in the FlexSim x direction. Subsequent draw commands will be performed from this new scaling. spacetranslate (num x, num y, num z) Description Apply translation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glTranslatef(x,z,-y); Example spacetranslate(current.size.x, -current.size.y, 0) This translates to the bottom left corner of the object assuming no translation has previously been applied. Subsequent draw commands will be performed from this new location. spline (obj spline, num perc) Description For developer use. Calculate spline mapping and set the current spline parameters using the spline object spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will not set the precalculated values for the spline object given in spline, as in fastspline().The parameter perc is the position along the spline of interest. This command does not lock precalculated values as when the fastsplineall() or fastsplineupdate() commands are used. A spline can be defined as any chain of objects that are connected from output ports to input ports. Pass the first object in the output port to input port chain as parameter 1. Example spline(splinestartobject,0.6) splinedraw (obj object) Description For developer use. Draw a line along a spline based on the current spline geometry as calculate by the spline(). Example splinedraw() splinedrawextrusion (obj object, num step, num wide, num high, num top, num side) Description For developer use. Draw a spline based on the current spline geometry as calculate by the spline() with a rectangular extrusion. Using parameters of spline object. Example splinedrawextrusion(current,20,1,2,1,1) splinelength () Description For developer use. Current spline parameter. This will return the length of the current spline. Example splinelength() splineposobject (obj object) Description For developer use. Position object according to current spline parameters. Example splineposobject(current) splinerx () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerx() splinery () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinery() splinerz () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerz() splinex () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinex() spliney () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example spliney() splinez () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinez() sqr (num value) Deprecated, use Math.sqr() Description This command is deprecated. Use Math . sqr () instead. Square of value. Example sqrt (num value) Deprecated, use Math.sqrt() Description This command is deprecated. Use Math . sqrt () instead. Square root of value. Example standardpreopen (obj object[, int nobuild]) Description For developer use. Queries if there are any open windows that are the same as the current window being opened. If so, then the current window is closed. Example standardpreopen(c) startanimation (obj object, num/str animation[, num speedtype, num speedvalue, num repeattype, num repeatvalue]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Starts an animation on an object. Example startanimation(current, \"Stand\"); startlisten (obj listener) Description For developer use. Tell the executive that an object is a listener. Not persistent across sessions. This command will add a node in the executive listener list pointing to listener. When a session is reloaded, or after a compile, listeners need to be reset. The listening mechanism can add a significant load to the executive, so use minimally. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. The listener must filter the message to decide whether to respond to the OnListen message. Refer to the Online Reference Guide for the parameters passed into an OnListen message. Example startlisten(so()) startuploadlibraries ([num viewalreadyset]) Description For developer use. Loads libraries on startup. Example startuploadlibraries() statisticaltime () Deprecated, use the Model class Description This command is deprecated. Use Model . statisticalTime instead. Returns the current simulation time with respect to when stats were last reset, such as since the warmup time has passed in an experiment or since resetstats() was executed. Example item.TimeIn = statisticaltime(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. statsenablemask (num mask) Description For developer use. Enable or disable aspects of stats collection. Set a 32 bit enable mask: Sum of flags. Bits: 0 = State; 1 = Flow; 2 = Inside Ports. Example statsenablemask(add(1,2)) step () Description For developer use. Advance the model run by one step. One step means to process exactly one event. Example step() stick (num stickno, num command [, HWND/num win, var/num p]) Description For developer use. This command queries the joystick or controller state or sets functionality for a joystick or controller. stickno defines an id for the joystick or gamepad you want to query. This is a number between 0 and 32. Usually you will only have one joystick connected to your computer, so in this case you should use the value 1 as stickno. If you are using a gamepad, you might need to use stickno 2. For Xbox controllers, stickno will be a value between 0 and 3. For VR controllers, stickno will be either 0 or 1. For Oculus touch controllers, stickno 0 is the left hand and stickno 1 is the right hand. Use stickno -1 to get the status, position, or rotation of a connected VR headset. command defines the operation that the command should perform. This should be one of the macros below: STICK_JOY_STATUS - Queries the connectivity of the joystick. If the joystick is connected properly, then this command will return 0. If the return value is non-zero, then there is some error with the joystick's connectivity, and you can view the system console to see what the error is. The following errors apply: MMSYSERR_NODRIVER - The joystick driver is not present. MMSYSERR_INVALPARAM - Invalid joystick ID or hwnd is NULL. JOYERR_NOCANDO - Cannot capture joystick input because a required service (such as a Windows timer) is unavailable. JOYERR_UNPLUGGED - The specified joystick is not connected to the system. JOYERR_PARMS - Invalid joystick ID or hwnd is NULL. STICK_JOY_XPOS - Current X-coordinate of the joystick. This is a number between 0 and 65535. 0 means the joystick is pushed all the way to the left, 65535 means it is pushed all the way to the right, and 32768 is exactly in the center. If you are using a gamepad, then this is the x position of the left side joystick. STICK_JOY_YPOS - Current Y-coordinate of the joystick. Again this is a number between 0 and 65535. 0 is up, 65535 is down. If you are using a gamepad, this is the position of the gamepad's left joystick. STICK_JOY_ZPOS - Current Z-coordinate of the joystick. If you are using a joystick, this will usually be the current setting of the joystick's throttle. Again it is a value between 0 and 65535. If you are using a gamepad, this represents the y position of the right side joystick. STICK_JOY_BUTTONS - Current state of the 32 joystick buttons. This is bitwise integer with each bit representing the state of a given button. For a joystick, the main trigger button is usually represented by the 0x00000001 bit, other buttons on the stick are 0x00000002 and 0x00000004, and buttons on the base of the joystick are then higher order bits. You will need to test these out on your own as each joystick is a little different. STICK_JOY_SET_CAPTURE - This command sets the joystick capture to a FlexSim window that you specify. This command requires the win and p parameters to be passed in. By executing this command, joystick messages will be sent to the OnStick attribute of the view. For example, if you have an ortho view that you would like to listen to joystick events, you would call this command, passing the ortho view's HWND handle (use windowfromnode()), and a polling period. The period specifies a time interval in milliseconds to repeatedly call the OnStick event. If p is 0, then the OnStick event will only be called when the joystick's state changes. If p is greater than 0, then the OnStick event will simply be called at the end of each sample period interval. Example: stick(1,5, windowfromnode(sv()), 200); This will cause the OnStick event to be called every 200 milliseconds. In order for this to work, you need to add an OnStick attribute to the view (you may also need to rebind the view's attributes after adding it: right-click->Edit|Rebind Object Attributes). STICK_JOY_RELEASE_CAPTURE - This command releases the joystick capture for the window that was previously captured with the 5 command. You need to pass in the win parameter as with command 5. STICK_JOY_RPOS - Current position of the rudder or fourth joystick axis of the joystick. For a joystick, this is usually the rotation of the joystick if your joystick can rotate around its z axis. Again it is a number between 0 and 65535. If you are using a gamepad, it is the x position of the right side joystick. STICK_JOY_UPOS - Current fifth axis position of the joystick. STICK_JOY_VPOS - Current sixth axis position of the joystick. STICK_JOY_POV - Current position of the point-of-view control of the joystick. It is a number between 0 and 35900 and represents the number of degrees times 100. For a gamepad, this represents the directional pad on the left of the gamepad. Up is 0, right is 9000, down is 18000, left is 27000. If the directional pad is not pressed, the value will be 65535. If you are using a joystick, there may be a directional thumb controller on the stick itself that you can press up, down, right, or left, and this will get the setting of that controller. STICK_JOY_CURRENT_BUTTON - Current button number that is pressed. STICK_JOY_FLAGS - Flags indicating the valid information returned about the joystick. STICK_XBOX_STATUS - Queries the connectivity of the Xbox controller. If the controller is connected properly, this returns 0. STICK_XBOX_BUTTONS - Bitmask of the device digital buttons. A set bit indicates that the corresponding button is pressed. STICK_XBOX_LEFT_THUMB_X - Left thumbstick x-axis value. Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick. A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right. STICK_XBOX_LEFT_THUMB_Y - Left thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_X - Right thumbstick x-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_Y - Right thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_LEFT_TRIGGER - The current value of the left trigger analog control. The value is between 0 and 255. STICK_XBOX_RIGHT_TRIGGER - The current value of the right trigger analog control. The value is between 0 and 255. STICK_VR_STATUS - Returns 1 if an Oculus Rift controller is active. Returns 2 if an HTC Vive controller is active. Returns 0 if the controller is inactive. Returns nullvar if the controller is not attached. STICK_VR_THUMB_X - Thumbstick or trackpad x-axis value between -1 and 1. STICK_VR_THUMB_Y - Thumbstick or trackpad y-axis value between -1 and 1. STICK_VR_INDEX_TRIGGER - Index trigger value between 0 and 1. STICK_VR_GRIP_TRIGGER - Grip trigger value between 0 and 1. On HTC Vive, grip button is pressed. STICK_VR_BUTTON_1 - The first button is pressed. A or X on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_2 - The second button is pressed. B or Y on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_3 - The third button is pressed. Enter or Home on Oculus Rift. Menu on HTC Vive. STICK_VR_BUTTON_4 - The fourth button is pressed. Thumbstick on Oculus Rift. Trackpad on HTC Vive. STICK_VR_TOUCH_BUTTON_1 - The first button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_2 - The second button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_3 - The third button is touched. Unused on Oculus Rift. STICK_VR_TOUCH_BUTTON_4 - The fourth button is touched. STICK_VR_TOUCH_THUMB_REST - The thumb rest sensor is touched on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_INDEX_TRIGGER - The index trigger sensor is touched. STICK_VR_TOUCH_POINTING - The hand gesture is pointing on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_THUMB_UP - The hand gesture is thumbs-up on Oculus Rift. Unused on HTC Vive. STICK_VR_HAND_POSITION - The controller position in VR space. STICK_VR_HAND_ROTATION - The controller rotation in VR rotation coordinates. STICK_VR_HAND_WORLD_POSITION - The controller position in FlexSim world space. STICK_VR_HAND_WORLD_ROTATION - The controller rotation in FlexSim rotation coordinates. STICK_VR_HAND_OFFSET_POSITION - The controller's position in FlexSim world space, but with an offset applied based on the controller's rotation. Pass an array as the offset vector in the p parameter. You can use this option to get a point relative to the controller, such as a finger position or where the controller is pointing. STICK_VR_TARGET_FLOOR_POSITION - The target position on the floor that the controller is pointing towards. Pass a value in the p parameter for the maximum distance away from the controller. STICK_VR_SET_VIBRATION - Causes the controller to vibrate. On Oculus Rift, pass an array for the p parameter where the first element is a value between 0 and 1 for the frequency and the second element is a value between 0 and 1 for the amplitude. On HTC Vive, pass a duration in microseconds for the p parameter. STICK_VR_SUBMIT_VIBRATION - Causes the controller to subtly vibrate. On original Oculus Touch controllers, pass an array of amplitudes (0 - 255) for the p parameter to be queued up and executed. Unused on HTC Vive or Oculus Rift S controllers. Example stick(1, STICK_JOY_YPOS); This gets the y position of the joystick id 1 stop ([num fast]) Stops the simulation run Description This command stops the simulation clock from running. The model stops with all of its pending events still in the queue. If the user starts the model again before resetting, the model will continue from the exact time that it stopped at. If fast is 1, then FlexSim will not rebind objects. This will improve speed if you are stopping and starting often. Example stop() stopanimation (obj object, num/str animation) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Stops an animation on an object. Example stopanimation(current, \"Walk\"); stopinput (obj object) Deprecated, use Object.input.stop() Description This command is deprecated. Use Object . input .stop() instead. This command closes the input of the object just like closeinput() does, but it also keeps track of consecutive stopinput() commands, and will only open input after all stops have been resumed. Refer to closeinput() documentation for additional information. Example stopinput(current.centerObjects[1]); stoplisten (obj listener) Description For developer use. Tell the executive that this object is not a listener anymore. This command will remove the pointer to listener from the listeners list if previously added with the startlisten() command. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. Example stoplisten(so()) stopobject (obj object, num state [, num id, num priority, num stateprofile] ) Deprecated, use Object.stop() Description This command is deprecated. Use Object . stop () instead. Tells the object to stop whatever it is doing, go into the state specified (in the state profile if specified), and waits for resumeobject() to be called. Stopobject commands are accumulated, meaning if stopobject is called twice on the same object, the object will not resume its operations until resumeobject has been called twice as well. Stopping an object depends on the type of object that is being stopped. For FixedResources, generally events are delayed indefinitely, input and output is stopped, and all operations going into and out of the object are stopped. This means that TaskExecuters trying to load/unload to or from the object will have to wait until the object has been resumed. For TaskExecuters, events are not delayed, but rather a preempting task sequence with priority of 100,000 is created for the TaskExecuter, with one TE_STOP task in it. Be aware that, if there are several stop requests for the same object, the state for each stop request is not remembered. If an object is requested to stop by entity A with state 12, and then is later requested to stop by entity B for state 14, it will go into state 14 and forget state 12. Even if entity B resumes the object before entity A, the object will remain in state 14 until all stop requests have resumed. The last two parameters, id and priority, are optional and have recently been added to fix the problem in the previous paragraph. If you specify these parameters, then it will store a record of the stop request, instead of just incrementing a value for the number of stops requested. The id is like a key for that stop request. The priority allows the object to prioritize its stop requests. For example, if you have a stop request for the scheduled down state, and another for the breakdown state at the same time, technically the object should be in two states at once, but since a FlexSim object can only be in one state at a time, the priority value breaks the tie and goes into the state of the highest priority stop request. The id value should match an id value that is added to a resumeobject() command later on. This is for matching stop requests with their appropriate resume requests. For example, if you stop an object for scheduled maintenance with and id of 1, once the scheduled maintenance is finished, you will need to resume the object with the same id of 1. Example stopobject(current.centerObjects[1], STATE_BLOCKED); stopoutput (obj object) Deprecated, use Object.output.stop() Description This command is deprecated. Use Object . output .stop() instead. This command closes the output of the object just like closeoutput() does, but it also keeps track of consecutive stopoutput() commands, and will only open output after all stops have been resumed. Refer to closeoutput() documentation for additional information. Example stopoutput(current.centerObjects[1]); stoptime (num time [, num stopNum=1]) Sets the time when the simulation should stop Description This command sets the time at which the simulation should stop running. The model will not necessarily stop at the exact time specified, but will stop at the first system check on or after the specified stop time. The model may stop early if there are no more events to execute. If stopNum is specified, the stop time at that rank will be set. If time is -1, the command returns the stoptime of stopNum. If time is 0 and stopNum is -1, all stop times will be reset such that there is only one disabled stop time at time 0. Example if (stoptime(-1) < 500) stoptime(500); This sets the stoptime to 500 if it was less than 500 to begin with. store () Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. It explicitly stores an archived copy of the current model inside the undo folder of the main tree. Refer to undos() command documentation for more information. Example store(); strascii (num asciivalue) Description This command returns a string that contains the character whose ascii value is character. Example strascii(91) + \"alert(\" + strascii(34) + \"Hello There\" + strascii(34) + \")\" + strascii(93); This returns a string that contains the following phrase: [alert(\"Hello There\")] stringcompare (str text1, str text2) Compare strings for alphabetical order Description Compare strings for alphabetical order. The return value is zero if the strings are the same. If text1 is alphabetically before text2, a negative number is returned. If text1 is alphabetically after text2, a positive number is returned. Same as the strcmp() C++ function. Example stringcompare(\"zenith\",\"beta\") returns 1 comparetext(\"aqua\",\"yellow\") returns -1 stringcopy (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. Returns a substring of string defined by index start (base 1) and length. Example stringlen (str string) Deprecated, use string.length Description This command is deprecated. Use string . length instead. Gets the length of string. Example stringpart (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. This command will return a portion of a string. The new string is defined with a starting character number and a length. A start value of 0 refers to the first character in the original string. Example stringpart(\"Hello\",2,3) returns the sub string \"llo\". stringreplace (str stringtosearch, str searchfor, str replacewith) Deprecated, use string.replace() Description This command is deprecated. Use string . replace () instead. Returns a copy of stringtosearch with all occurrences of searchfor replaced with replacewith. Example stringreturn (str returnstring, ptr callpoint) Description This command is deprecated. You can simply return strings from C++ user commands with the return statement. Prior to FlexSim 7.7, this command was used to return a string from a C++ implementation of a user command. This command was only needed in C++. In FlexScript user commands, you can simply return the string with the return statement. Example C++: stringreturn(result, callpoint); return 0; stringsearch (str stringtosearch, str searchfor, int startindex[, int flags]) Deprecated, use string.search() Description This command is deprecated. Use string . search () instead. Searches the string for the given substring searchfor (base 0). Example stringtoken (str token, str delimit) Finds the next token in a string Description Finds the next token in a string. The first parameter is a string containing delimited tokens. The second parameter is a string with a set of delimiter characters. Works similarly to strtok() in C++. Example string token = \"Jacob,Emma,Michael,Isabella,Ethan\"; string name = stringtoken(token,\",\"); while(stringlen(name)>0) { pt(name);pr(); name = stringtoken(NULL,\",\"); } This prints each name in the list to a different line of the output console. stringtonum (str string) Deprecated, use string.toNum() Description This command is deprecated. Use string . toNum () instead. Converts string to a num. Example stringtopchar (str string) Deprecated, use apchar() Description This command is deprecated. Use apchar() instead. This command returns the string as a pointer to a C++ character. This is used to convert variables of type string to type char* for some C++ commands which only take char*'s. It is not needed in Flexscript. Example setname(current,stringtopchar(\"ThisObjectName\")); This sets the name of the object referenced by current to \"ThisObjectName\". The stringtopchar() command may not be mandatory here, but it is legal. strquote (str string) Deprecated, use \\\" Description This command is deprecated. Use \\\" instead to include quotation marks within a string. Example strquote(\"hello\") sub (num value1, num value2) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. operator instead. of value1 and value2. This returns the result of the arithmetic expression value1-value2. Example double operator instead. = sub(10,4); suspenddraw (num bitmask) Description For developer use. Bit mask. Disables draw in window types. Bits: 0 - TREE; 1 - PLANAR; 2 - SPATIAL Example suspenddraw(1) sv () Gets a reference to the last view desginated as sv() Description This command returns a reference to the last view window that was designated the selected view. To designate a view window, right-click on the window, not on any objects drawn in that window, and select \"Set as (sv)\". Any open view window (e.g. Ortho or VR) can be designated the selected view. Example flypath(sv(),1); This begins flypath number 1 in the view that is currently designated the selected view. swapnoderanks (obj/node parentnode, num index1, num index2) Swap the ranks for two nodes in a parent node's sub-tree Description This command swaps the ranks of two nodes in the parent node's sub-tree. Swapping ranks can be faster than using setrank() especially for very large lists of nodes. Example swapnoderanks(parentNode,4,parentNode.subnodes.length); This swaps the 4th ranked node in parentNode's sub-tree with the last node in parentNode's sub-tree. This can make removing that node from parentNode's sub-tree faster if the list is very long. Note that this will put the last node into the 4th position, so ordering in the tree should not matter to be able to do this. In other words, this would break fifo ordering. swaptablecols (str/num/node table, num column, num column2) Deprecated, use Table.swapCols() Description This command is deprecated. Use Table . swapCols (). instead. Swaps two columns in a table. Example swaptablerows (str/num/node table, num row, num row2) Deprecated, use Table.swapRows() Description This command is deprecated. Use Table . swapRows (). instead. Swaps two rows in a table. Example switch (num value) Description Execute one of several possible cases, based on value Example int msgcase = msgparam(1); switch(msgcase) { case 1:msg(\"\",\"case 1\");break; case 2:msg(\"\",\"case 2\");break; default:msg(\"\",\"case 2\");break; } switch_cppfunc (node thenode[, num off/on]) Get or set the \"C++\" flag of thenode Description Get or set the \"C++\" flag of thenode. A value of 1 is C++, a value of 0 is not C++, a value of -1 gets the current value. If a node is toggled as C++ it will be compiled as a C++ function at time of compile. Example switch_cppfunc(so(),1) switch_destroyonreset (obj thenode[, num off/on]) Get or set the \"destroy on reset\" flag of the object Description Get or set a node's \"destroy on reset\" flag. If the flag is 1, the node will be deleted when the model is reset. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_destroyonreset(so(),1) switch_dllfunc (node dllnode[, num on/off/get]) Description Switches the node's dll toggle on or off. 1 switches it on, 0 off, and -1 gets the current state. Example switch_dllfunc(getvarnode(current, \"exittrigger\"), 1); switch_enablestats (obj object[, num off/on]) Get or set the \"stats\" flag of the object Description Get or set an object's \"stats\" flag. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. Example switch_enablestats(so(),1) switch_expanded (node thenode[, num off/on]) Expand/collaps sub-level nodes of thenode Description Expand or collapse sub-level nodes of thenode in the tree view. This is analogous to clicking the + and - sign of thenode in the tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_expanded(so(),1) switch_flexscript (obj object[, num on/off/query]) Description For developer use. This command switches the flexscript toggle of a node. 0 = toggle node non-flexscript 1 = toggle node as flexscript -1 = query whether node is toggled (1) or not (0) Example switch_flexscript(var_s(current, \"code\"), 1); switch_hashedlist (obj thenode[, num off/on]) Get or set the \"Hashed List\" flag of thenode Description Get or set the \"Hashed List\" flag of the thenode. A value of 1 sets the node to store a hashed list of its subnodes for fast lookup by name, a value of 0 sets the node to not store a hashed list of subnodes, a value of -1 gets the current value. Example switch_hashedlist(so(),1) switch_hidden (obj object[, num off/on]) Description Not implemented Get or set the \"is hidden\" flag of the node object. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. The \"is hidden\" flag is not currently implemented. Example switch_hidden(so(),1) switch_hidebase (obj object[, num off/on]) Deprecated, do not use Description This command is deprecated. Do not use. Get or set the \"Show 2D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. The 2D shape (base) of an object is visible in the Planar view window. Note that view windows also have an attribute named hideallbases that controls the display of 2D shapes (bases) for ALL objects in their view. Example switch_hidebase(so(),1) switch_hideconnectors (obj object[, num off/on]) Get or set the \"Hide Connectors\" flag of the object Description Get or set the \"Hide Connectors\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the connectors will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. Example switch_hideconnectors(so(),1) switch_hidecontents (obj object[, num off/on]) Get or set the \"Show Contents\" flag of the object Description Get or set the \"Show Contents\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the contents of an objects will stop the display of objects (e.g. flowitems) contained within it. Example switch_hidecontents(so(),1) switch_hidelabel (obj object[, num off/on]) Get or set the \"Show Name\" flag of the object Description Get or set the \"Show Name\" flag of the object. A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. A value of -1 gets the current value for the switch. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. Example switch_hidelabel(so(),1) switch_hideshape (obj object[, num off/on]) Get or set the \"Show 3D Shape\" flag of the object Description Get or set the \"Show 3D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. Example switch_hideshape(so(),1) switch_noselect (obj object[, num off/on]) Get or set the \"No Select\" flag of the object Description Get or set the \"No Select\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is unselectable, a value of 0 is selectable, and a value of -1 gets the current value. Setting no select on an object keeps it from being clicked on with the mouse in the 3D view. Example switch_noselect(so(),1) switch_orphancoupling (obj thenode[, num off/on]) Get or set the \"orphan coupling\" flag of the object Description Get or set a node's \"orphan coupling\" flag. If the flag is 1, when the coupling node is copied, the copy won't be destroyed if it no longer points to a valid node. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_orphancoupling(so(),1) switch_preservecoupling (obj thenode[, num off/on]) Get or set the \"preserve coupling\" flag of the object Description Get or set a node's \"preserve coupling\" flag. If the flag is 1, when the coupling node is copied, the copy will also point to its partner. For one-way couplings, the original and the copy will both point at the same partner node. For two-way couplings, a new partner node will be created. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_preservecoupling(so(),1) switch_protected (obj object[, num off/on]) Get or set the \"Protected\" flag of the object Description Get or set the \"Protected\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is protected, a value of 0 is unprotected, and a value of -1 gets the current value. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Example switch_protected(so(),1) switch_selected (obj thenode[, num off/on]) Get or set the \"Selected\" flag of thenode Description Get or set the \"Selected\" flag of thenode (red highlight). A value of 1 is selected, a value of 0 is unselected, a value of -1 gets the current value. Example switch_selected(so(),1) switch_showobject (obj object[, num off/on]) Expand/collaps the object data of an object node Description Expand or collapse the object data of an object node in a tree view. This is analogous to clicking the > next to the object node in a tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_showobject(so(),1) switch_statelocked (obj object[, num off/on]) Description Get or set the \"is code state locked\" flag of the node object. A value of 1 is enable, a value of 0 is disable, a value of -1 gets the current value. If enabled, the node will be locked as either C++ or flexscript depending on what it currently is (the model will not change it when \"Make All Code C++/Flexscript\" is chosen through the main menu. Example switch_statelocked(so(),1) switch_stateused (obj thenode[, num off/on]) Description For developer use. Get or set where a node inside a state profile is used by the object. This flag is automatically set in the setstate() command, so developers can know which states are used by an object, for UI development. Example switch_stateused(so(),1) switch_variable (obj object, str var[, num off/on]) Description For developer use. Add and set; or remove a dynamic switch variable to/from an object. When set to on, a node called var will be added to the structure of object and have a numerical value of 1 assigned to it. When set to off, a node called var, if present will be removed from the structure of object. Used in model update code. Example switch_variable(so(),\"arrivalmode\",1); system_cld Description System Command. Do not use. Example system_clda Description System Command. Do not use. Example system_cli Description System Command. Do not use. Example system_clia Description System Command. Do not use. Example system_cln Description System Command. Do not use. Example system_clna Description System Command. Do not use. Example system_cls Description System Command. Do not use. Example system_cls Description System Command. Do not use. Example system_clsa Description System Command. Do not use. Example system_gld Description System Command. Do not use. Example system_glda Description System Command. Do not use. Example system_gli Description System Command. Do not use. Example system_glia Description System Command. Do not use. Example system_gln Description System Command. Do not use. Example system_glna Description System Command. Do not use. Example system_gls Description System Command. Do not use. Example system_glsa Description System Command. Do not use. Example system_ms Description System Command. Do not use. Example system_sld Description System Command. Do not use. Example system_slda Description System Command. Do not use. Example system_sli Description System Command. Do not use. Example system_slia Description System Command. Do not use. Example system_sln Description System Command. Do not use. Example system_slna Description System Command. Do not use. Example system_sls Description System Command. Do not use. Example system_slsa Description System Command. Do not use. Example systemwindow (num windowtype) Description For developer use. Get HWND handle to a system window: 1-Output 2-System 3-Compiler 4-Trace 5-Commands 6-Attributes 7-Completions 8-app 9-appsb 10-Output Edit 11-Compiler Edit 12-Trace Edit 13-System Edit Example systemwindow(1) tabcontrolrefresh (obj tabcontrolnode) Description For developer use. Refreshes a tab control. Example tabcontrolrefresh(c.find(\"@/tabcontrol\")); tan (num angle) Deprecated, use Math.tan() Description This command is deprecated. Use Math . tan () instead. Gets the tan of an angle in radians. Example templatetocode (obj code, obj edit) Description For developer use. Apply template code to c++. This is used in a picklist's template code drop-down to apply edited template code back to the C++/Flexscript code that created it. Example templatetocode(so(),sv()) textureaxis_s (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture S axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_s(1,0,0,0) textureaxis_t (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture T axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_t(0,0,1,0) thisclass <no parentheses> Description For developer use. This keyword is used in an eventfunction to get the class of the object receiving the call. Example thisclass time () Deprecated, use the Model class Description This command is deprecated. Use Model . time instead. Returns the current simulation time. Example item.TimeIn = time(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. toggleallcodestates (node startpoint, num ascpp) Toggles all code nodes under startpoint as either C++ or flexscript Description Traverses the tree starting at start point and toggles all code nodes to either c++ or flexscript. 1 toggles to c++, 0 toggles to flexscript. This will only change nodes that have not been locked to their code state. This is the same as using the menu option Build|Make all code C++ or Build|Make all code flexscript. Example toggleallcodestates(model(), 1); tonode (thing) Assert type as a node pointer Description Assert type as a node pointer. Only serves a real purpose in C++. Example tonode(getnodenum(couplingnode)) Converts the numeric value of couplingnode to a treenode tonum (thing) Assert type as a number Description Assert type as an arithmetic number. Only serves a real purpose in C++. Example return tonum(current); This returns a pointer to the current object, casting it as a number. toptr (thing) Description For developer use. Assert type as pointer. Assert that the argument thing is of type void*. Only serves a real purpose in C++, but is safe to use in flexscript. Example toptr(so()) tostring (thing) Description For developer use. Assert as pchar string. Assert that the number val is of type char*. Only serves a real purpose in C++, but is safe to use in Flexscript. Example tostring(eventdata) tracemaskevents (num mask) Description For developer use. Set a 32 bit trace mask: Sum of Math.pow(2,N1)+Math.pow(2,N2)... where Nx are the event numbers to be reported in the trace. See View|Trace Debugger... Example tracemaskevents(listsum(Math.pow(2,1),Math.pow(2,2),Math.pow(2,3))) tracemaskobject (obj object) Description For developer use. Set an object to be included in the event reporting in the trace debugger. See View|Trace Debugger... Example tracemaskobject(Model.find(\"Processor3\")) tracemasktime (num start, num end) Description For developer use. Define a start and end time for event reporting in the trace debugger. See View|Trace Debugger... Example tracemasktime(100,200) trackedvariable (str name) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example trackpopup (node thenode) Description Example trafficcontrolinfo (obj trafficcontrol, num info [, num a, num b]) Gets information on a traffic controller Description This command gives you access to various information on a traffic control, as well as lets you direct the traffic control to perform logic. Logic/data that is performed/returned is based on the info parameter, as follows: trafficcontrolinfo(tc, TCI_NR_ACTIVE_TRAVELERS) - returns the total number of active travelers in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER, num travelnr) - returns a reference to the nth active traveler in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_COUPLING, num travelernr) - returns a reference to a coupling node, stored in the Traffic Control's variables tree, that is associated with the nth active traveler. This coupling can be used to stored custom user information regarding that active traveler. To do this, add sub-nodes to the coupling node with nodeinsertinto(), add data, etc. Note that once the active traveler leaves the traffic control area, the coupling, and its sub-nodes, will automatically be destroyed. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_RANK_FROM_TRAVELER, obj traveler) - This command takes a reference to a traveler object and returns which index in the traffic control's active travelers is associated with that traveler. If zero is returned then the object is not an active traveler in the traffic control. trafficcontrolinfo(tc, TCI_NR_MEMBERS) - Returns the total number of network nodes that are members of the traffic control area trafficcontrolinfo(tc, TCI_MEMBER, num membernr) - Returns a reference the nth network node member of the traffic control trafficcontrolinfo(tc, TCI_MEMBER_COUPLING, num membernr) - Returns a reference to a coupling node, stored in the traffic control's variables, that is associated with the nth network node member of the traffic control. Like TCI_ACTIVE_TRAVELER_COUPLING, this node may be used to store data associated with that network node. trafficcontrolinfo(tc, TCI_MEMBER_RANK_FROM_NETWORK_NODE, obj netnode) - Takes a network node reference and returns the member index of that network node in the traffic control. If zero is returned then the network node is not a member of the traffic control. trafficcontrolinfo(tc, TCI_NR_ENTRY_REQUESTS) - Returns the number of entry requests currently in queue waiting to enter the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_TRAVELER, num requestnr) - Returns a reference to the traveler associated with the nth entry request, who is waiting get into the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NETWORK_NODE, num requestnr) - Returns a reference to the network node where the traveler is waiting, associated with the nth entry request trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NODE, num requestnr) - Returns a reference to a node associated with the nth entry request. Like TCI_ACTIVE_TRAVELER_COUPLING, you may add sub-nodes to store data associated with the request. Do not, however, change the data on this node, as this is used by the traffic control logic. trafficcontrolinfo(tc, TCI_ALLOW_ENTRY, num requestnr) - Calling this command will instruct the traffic control to allow the traveler associated with the nth entry request to enter the traffic control area. trafficcontrolinfo(tc, TCI_SET_ENTRY_REQUEST_RANK, num requestnr, num settorank) - Calling this command will cause the traffic control to rerank its nth entry request to the specified rank. Also, a note regarding using the traffic control triggers to override the traffic control's default logic. The traffic control's OnEntryRequest trigger, which fires when a traveler first requests entry into the traffic control area, can take 3 different return values: TC_ON_ENTRY_REQUEST_DEFAULT - If this value is returned from the trigger, the traffic control will perform its normal filtering logic. TC_ON_ENTRY_REQUEST_ALLOW - If this value is returned, the traffic control will ignore its default logic and simply allow the traveler into the area. Note that if this is used, the traffic control will ignore its maximum capacity variable, so depending on the logic you define, the number of travelers in the area may exceed the maximum capacity variable you specify on the traffic control. TC_ON_ENTRY_REQUEST_QUEUE - If this value is returned, the traffic control will ignore its default logic and add the request to its request queue, disallowing the traveler from entering the area at that time. The traffic control's OnExit trigger may take one of two return values: 0 - If this value is returned, the traffic control will perform its default logic, allow other travelers to enter, etc. 1 - If this value is returned, the traffic control will do nothing. In this case the user should use the trigger to explicitly tell the traffic control which traveler(s) to receive using TCI_ALLOW_ENTRY. If you plan on implementing your own custom logic for allowing travelers into the area, then it is recommended that you use the traffic control's default \"Mutual Exclusion\" mode. Example treenode netnode = trafficcontrolinfo(tc, TCI_MEMBER, 2); transfernode (node movenode, node container) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up to set the node's parent (container). This command moves movenode into the container node. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernode(current.labels[\"inactivequeue\"].first, current.labels[\"activequeue\"]); transfernodeobj (node movenode, node container) Moves movenode into the container node's object data Description This command moves movenode into the container node's object data. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernodeobj(current.attrs.find(\"body\"), current.next); transitionport () Description Get the most recently traversed port number by an object in the model. It refers to the last moveobject() call which occurred in the model run. Example transitionport() transportincomplete (obj object, obj item [, num inport, obj transporter]) Notifies the FixedResource object that item will now be moved into it Description This command notifies a downstream FixedResource object that the specified item will now be moved into it from an upstream object. This should only be used if the upstream object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the downstream FixedResource to manage data on how many items are slated to enter the object, but haven't arrived yet. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportincomplete(current.outObjects[port], item, opipno(current, port)); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem transportoutcomplete (obj object, obj item [, num outport, obj transporter]) Notifies the FixedResource object that item will now be moved out of it Description This command notifies the FixedResource object that the specified item will now be moved out of it. This should only be used if the object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the FixedResource to manage data on how many items are still in the object but are ready to leave. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportoutcomplete(current, item, port); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem travelto (obj object, obj spline, num x, num y, num z, num vmax, num acc, num dec) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Calculate current travel parameters for the object. A travel path will be calculated. Once set, the object's position will be calculated based on the travel path as defined by this command. This function returns the time of travel end. This function can be used in conjunction with a spline to create curved travel paths. Example travelto(traveler,NULL,100,100,0,5,1,6) traveltoupdate (obj object [, obj spline]) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Update the object's position based on it's current travel parameters. Explicitly set an object's position based on the time and travel path parameters as calculated from the travelto() command on object, using spline as the path geometry if desired. Example traveltoupdate(current) Updates the current object's position based on the travel parameters set earlier by the traveto() command. This command is usually executed from the Custom Draw Code field. triangular (num min, num max, num mode[, num stream]) Returns a random sample from a triangular distribution Description Generates a continuous random variate from a triangular distribution with parameters as defined. Example trunc (num value) Deprecated, use Math.trunc() Description This command is deprecated. Use Math . trunc () instead. Truncation of value. Example truncatemediapath (str path) Description Returns a truncated media path based on the full path of the file passed. If this file exists relative to the model directory, then the path will be truncated to be relative to the model directory. It will also be truncated if it is relative to the FlexSim install directory. Example truncatemediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\texturebox.wrl\"); This example will return the string \"fs3d\\\\texturebox.wrl\" undo (obj view) Description Undoes the previously recorded action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example undo(view); undos (num off/on) Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. This command is used to turn on (1) and off (0) the automatic saving of model copies each time there is a mouse click or key press. Use the setundos command, to specify the maximum number of model copies that will be remembered for undoing. To function correctly, this command requires first creating a node in the main tree named undo and giving it number data. Example undos(1); uniform (num min, num max[, num stream]) Returns a random number between the min and max values Description uniform( a , b , stream ) is a bounded continuous probability distribution. Inputs: a and b are real numbers with a < b a is the location parameter defining the minimum variate b defines the maximum variate b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = [ a , b ] mean = ( a + b ) ⁄ 2 variance = ( b − a )² ⁄ 12 Possible Applications: Used to approximate a value that is felt to be randomly varying between a and b but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any real number inbetween will be returned. The uniform(0, 1) distribution is essential in generating random variates from all the other distributions and will return a continuous set of random values between and inclusive of 0 and 1. Example uniform(12.3, 27.5, 3); Random number stream 3 will be used to generate a random variate from a uniform distribution having a minimum of 12.3 and a maximum of 27.5. unloadimage (int textureid) Description For developer use. Unload an image from the Media List by index. Example treenode view = node(\"VIEW:/1>Documents/Dashboard/1+/~/GraphPanel/1/1\"); repaintview(view); viewtofile(view, modeldir() + \"test.png\"); unloadimage(gettextureindex(modeldir() + \"test.png\")); int newindex = loadimage(modeldir() + \"test.png\", modeldir() + \"test.png\"); setobjecttextureindex(Model.find(\"Plane1\"), newindex); This example renders a dashboard chart to an image file, unloads that image from the media list, reloads the image back into the media list, and sets the texture index of a plane to that image. up (obj object) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up instead. Reference a node's parent node. Example updateanimation (obj object [, num updatetime, num animationnr]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Updates an animation on an object. Example updateanimation(current); updatekinematics (node infonode, obj object [, num updatetime]) Updates the location of the object based on its kinematics Description Updates the location of the object based on the kinematics operation and the current time. For more information, refer to the help documentation on kinematics. Example updatekinematics(current.labels[\"kinematics\"], current, time()); updatelocations (obj object) Updates the location of the object and the objects inside of it Description This command causes the object to update the location of itself and possibly the objects inside of it. Use this command to refresh locations before querying or executing functionality that would query the location of an object. Example updatelocations(current); updatereport (num/str/node report) For Dynamo use Description For Dynamo use. Causes the specified Report to add a new row to its table and populate it correctly. This is used to add entries that are not time-based. Example updatereport(\"ResultsReport\"); updatestate (obj object [, num profilenr]) Updates the state of the object Description Updates the state of the specified object. Could be used in the OnDraw function of an object to make its states display smoothly while the model is running. Example updatestate(current); updatestates () Updates the states of all objects in the model Description Updates the states of all objects in the model. Additionally, this command also updates the content stats of all the objects. The 'Stop' button and menu option both call this function before executing a stop() so that objects' stats are updated. Otherwise, reports will not reflect the time the object was in its last state. Example updatestates(); updatetoolsmenu () Deprecated, use the Toolbox Description This command is deprecated, use the Toolbox. Updates the tools menu to reflect any additions or deletions to the tools. Example updatetoolsmenu() updateundorecord (obj view, num uniqueid[, num updatetype, num p1, num p2]) Description Updates an undo record for the specified view. The following undo record types should be updated: UNDO_MOVE_SIZE_ROTATE UNDO_MOVE_SIZE_ROTATE_GROUP UNDO_SELECTION_CHANGE See Miscellaneous Concepts > Advanced Undo for more information. Example updateundorecord(view, getundorecordid(record)); uselisteners (num mask) Description Enable or disable listening. Example uselisteners(1) userdatadir () Gets the full path to the directory where FlexSim stores user data Description Returns a full path to the directory where FlexSim stores user data, such as global preferences and compiler settings. Example userdatadir() returns a string like \"C:\\Users\\USERNAME\\AppData\\Roaming\\Flexsim\\Flexsim7\\\" userfunction_n (obj object, num index [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified rank index. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,4,1,2,3) Executes the code associated with a node ranked 4th in the userfunctions group of the current object. userfunction_s (obj object, str name [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead, because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified name. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,\"myfunc\",1,2,3) Executes the code associated with a node named \"myfunc\" in the userfunctions group of the current object. userinput (obj targetnode, str text [, int stop]) Prompts the user for a value in a dialog box Description Prompts the user for a value in a dialog box. The value is placed in the specified node. The model does not stop running while the dialog is open unless the stop parameter is specified. If the stop parameter is specified, then the model stops until the dialog is closed and it returns the value. Example userinput(model().subnodes[3].labels[\"myLabel\"],\"Please enter a value\"); validatename (obj node, num isviewtext [, obj object]) Description For developer use. Makes sure the name of node is a valid FlexSim name, replacing invalid characters with underscores and bringing up a message if changes were made. If isviewtext is 1, it assumes the node passed is an edit field, and it changes the viewtext of the field, instead of the name of the node. If the object parameter is specified, it checks that object's name against all the other names of objects in its container. If there are names that are the same, it will pop up an error message. This command is called when you press the Apply or OK buttons in an object's Properties window. Example validatename(current, 0); var (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by index. Example var(so(),1) var_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by name. Example var_s(current,\"myatt\") vectorprojectx (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojecty (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojectz (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example viewdist (obj view, obj object) Gets the distance from the focus point of view to object Description Returns the distance from the focus point of the view to object. Example if(viewdist(view, current) > 100) ; This command queries whether the distance between the point that the view is looking at and the location of the current object is greater than 100. viewmenucommand (str name, obj view) Description For developer use. Execute a command from the stock view menu. Example viewmenucommand(\"Edit|Copy\") views () Reference to the views tree Description This command returns a reference to the views tree. The views tree contains all of the information about the windows that are currently open as well as all of the available GUIs. When defining string paths to nodes in the view tree, VIEW can be used as in the following example: node(\"VIEW:/standardviews/ortho\"); Example activateview(views().find(\"standardviews/runcontrol\")); This activates the GUI called \"runcontrol\" which is stored in the node called \"standardviews\" of the view tree. viewtofile (obj view, str path[, num width, num height]) Saves the specified view as a bitmap image Description Saves the specified view as a bitmap image to the specified file. Example viewtofile(node(\"VIEW:/active/ortho\"), modeldir() + \"screenshot.bmp\")); webcommand (str name[, p1, p2, p3, ...]) Used to manipulate FlexSim's HTML engine/widgets Description A command used for manipulating FlexSim's HTML engine, html widgets, etc. Example string innerhtml = webcommand(\"getelementinnerhtml\", view, \"title\"); weibull (num location, num scale, num shape[, num stream]) Returns a random sample from a weibull distribution Description weibull( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + ( β ⁄ α ) Γ (1 ⁄ α ) where Γ () is the Gamma function. variance = ( β ² ⁄ α ) { 2 Γ (2 ⁄ α ) − 1 ⁄ α [ Γ (1 ⁄ α ) ] ² } Probability Density Functions: Possible Applications: The weibull distribution is commonly used when there is not sufficient data available because it can take on so many different shapes depending on the shape factor. It is a very common distribution used for representing the time between equipment failures, as well as the time to complete a manual task. Comments: The weibull( γ , β , 1 ) and exponential( γ , β ) distributions are the same. The weibull( γ , β , 2 ) and rayleigh( γ , β ) distributions are the same. The weibull distribution is skewed to the left if α > 3.6 Example weibull(0, 2, 3, 5); A weibull distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 3, and random stream number 5. while (num expression) {} Description Repeatedly execute the following block {} while the expression returns a non-zero value. Be careful with this function because it can cause FlexSim to freeze if the value never becomes false. Example while(current.subnodes.length > 4) { current.last.destroy(); } windowflash (HWND window, num count, num timeout) Description For developer use. Causes the specified window to flash. Count is the number of times to flash the window. Timeout controls the time between flashes. If timeout is 0, the default cursor blink rate is used. Example windowflash(windowfromnode(ownerview(c)),2,125); windowfromnode (obj viewnode) Description For developer use. Get the window handle (HWND) of a view node. Example windowfromnode(c) windowgray (HWND window, num graystate) Description For developer use. Enables or disables the window based on the graystate parameter (1 or 0). Example graywindow(windowfromnode(c),1); windowmenu (obj view) Description For developer use. Returns a reference to the view's menu as an HMenu. Example windowmenu(c) windowmove (HWND window, num x, num y, num sx, num sy[, num refresh]) Description For developer use. Move a window to the specified x,y pixel location and give it the sx,sy size in pixels. If refresh is 1, then the window will repaint itself. Example windowmove(windowfromnode(c),10,10,200,200,1) windowredraw (HWND window, num x, num y, num sx, num sy, int flags) Description For developer use. A wrapper around the RedrawWindow() windows API command. The parameters x, y, sx, and sy define the client rectangle that the call applies to, and flags defines the flags that will be passed to RedrawWindow(). Example windowredraw(windowfromnode(c),10,10,200,200, RDW_INVALIDATE); windowshow (HWND/node thewindow , num show) Description For developer use. Show or hide a window. If the second parameter is 1, then the window will be shown. Otherwise the window will be hidden. Example windowshow(windowfromnode(c)) windowstyle (HWND/obj window [, num style, num useexstyle]) Gets the windowstyle of window Description Used in GUI development. Dynamically gets/sets the window style of the given window. If style is 0, this will simply return the current style of the window. Otherwise, it will set it. If useexstyle is 1, it will apply/get the extended style of the window. Refer to Windows SDK documentation for more information on window styles. Example As an example, this command is used in the perspective view's \"Full Screen\" context menu option to change the style of the perspective window so that it no longer has a title bar when it is in full screen mode. wmp (num cmd, str file, HWND win, num left, num right, num top, num bottom, num controls) Opens the file in Windows Media Player Description Opens the file in Windows Media Player. Example xcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation (). Gets the x location of the rotational center of the object within its container. Example xloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation (). Gets the x location of an object. Example xrot (obj object) Deprecated, use Object.rotation or Object.setRotation() Description This command is deprecated. Use Object . rotation or Object . setRotation () instead. Gets the x rotation of an object (rotation about the x-axis). Example xsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the x size of an object. Example ycenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the y location of the rotational center of the object within its container. Example yloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the y location of an object. Example yrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the y rotation of an object (rotation about the y-axis). Example ysize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the y size of an object. Example zcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the z location of the rotational center of the object within its container. Example zloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the z location of an object. Example zonecheckrequests (obj instanceObject, obj/str zone) Description Reevaluates all tokens in a zone's request list. Example zonecheckrequests(fixedResource, \"Zone 1\") zonegetpartitionvaluefortoken (obj zone, obj token) Description Gets the partition value for a token in the given zone. Example zonegetpartitionvaluefortoken(zone, token) zoneistokeninsubset (obj zone, obj token, str subsetName) Description Determines whether the given token is in the named subset of the given zone Example zoneistokeninsubset(zone, token, \"MySubset\") zrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the z rotation of an object (rotation about the z-axis). Example zsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the z size of an object. Example"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/CommandGroupsIndex.html",
        "title": "Category Command Index",
        "content": "Command Categories AGV Communication Conversions Conveyor Deprecated Development Drawing Events FixedResources Kinematics and Splines Language Media Miscellaneous Model Execution NetworkNodes Object Data Object Functions Object Ports Output People Process Flow Rack Object Statistics Strings Tables TaskExecuter Object Tree Access Tree Node Data User Interface Do no remove, this fixes the anchor on doc.flexsim.com AGV agvaddlistener agvinfo agvreassigncp agvredirect cp cpaddlistener cpallocate cpconnection cpdeallocate cpdistance cpisavailable cpnumconnections cptasksequencequeue Do no remove, this fixes the anchor on doc.flexsim.com Communication Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel. clientclose clientconnect clientcreate clientreceive clientsend excelclose excelcreatesheet excelcreateworkbook exceldeleterange exceldeletesheet excelexporttable excelgetrangeparam excelgetrangesheet excelimporttable excellaunch excelmultitableexport excelmultitableimport excelopen excelquit excelrangereadnum excelrangereadstr excelrangewritenum excelrangewritestr excelreadcell excelreadnum excelreadstr excelsave excelsetrange excelsetsheet excelversion excelwritenum excelwritestr requestdecision rundocument runprogram serveraccept servercloseconnection serverclosemain servercreatemain serverreceive serversend socketend socketinit Do no remove, this fixes the anchor on doc.flexsim.com Conversions Commands for converting units, data types, and spatial coordinate. apchar cm convert days fpm fps ft hours in minutes mph seconds tonode tonum toptr Do no remove, this fixes the anchor on doc.flexsim.com Conveyor conveyorgetmotor conveyorinfo conveyorresumeitem conveyorsenditem conveyorsetspeed conveyorstopitem mergegetlanestate mergegetnumlanes mergeislaneclear mergereleaselane Do no remove, this fixes the anchor on doc.flexsim.com Deprecated Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead. acos add addfullhistorymoverecord addfullhistorystaterecord addlabel addtablecol addtablerow and angle anode anum aptr arraysize asin assertattribute assertlabel assertsubnode atan atan2 att att_s aviadd avifinish avistart bcgetitemkinematics bcgetitemposition bcsetdirection bcsetitemconveystate bitwiseand bitwisenot bitwiseor bitwisexor ceil cell cellrc cellrowcolumn centerobject changeconveyorspeed changetask clearconsole clearcontents clearfullhistory clearglobaltable closeinput closeoutput coloraqua colorarray colorblack colorblue colorbrown colorgray colorgreen colorlightblue colorlime colororange colorpink colorpurple colorrandom colorred colorrgb colorsilver colorteal colorwhite coloryellow comparetext concat connect containerentry containerexit content contentobj cos count cppgettoken cppsettoken createcopy createdelaytask createemptytasksequence createglobaltasksequence createinstance createloadtask createsendmessagetask createstandardtask createtravelloadtask createtraveltask createtraveltolocandwaittask createtraveltoloctask createtravelunloadtask createunloadtask createwaittask current dbchangetable dbclose dbexportnode dbexporttable dbgetfieldname dbgetmetrics dbgetmode dbgetnumcols dbgetnumrows dbgettablecell dbgettablenum dbgettablestr dbimportnode dbimporttable dbopen dbsettablecell dbsettablenum dbsettablestr dbsqlquery dbusername dbviewtable dbwritechanges defaultdragconnection degreestoradians deletetablecol deletetablerow dellabel destroyobject diffsign dispatchtasksequence div divide dumpquery enablefullhistory endwaittask eq excelexportnode excelimportnode excelmacro excelrangeread excelrangewrite excelread excelwrite executetablecell exp exportfullhistory fabs factorial familycreate familydelete familymember familymemberadd familymemberdel familymemberqty fillarray findmatch findmax findmin first floor fmod forobjecthighlightedin forobjectlayerunder forobjectsbefore forobjectsbehind forobjectselectionset frac ge get getcolorcomponent getdatatype getinput getitemtype getlabel getlabelnum getlabelstr getmodelunitnum getmodelunitstr getmoverecord getmoverecordvalue getname getnodename getnodenum getnodestr getnroftasks getnummoverecords getnumstaterecords getobjectimageindex getoutput getquerycolcount getquerymatchcount getquerymatchtablerow getqueryvalue getrank gets getstatenum getstaterecord getstaterecordvalue getstatestr gettablecell gettablecols gettableheader gettablenum gettablerows gettablestr gettaskinvolved gettasksequence gettasksequencequeue gettaskstate gettasktype gettaskvariable gettotalnroftasks gettrackedvariable getvartype glBegin glColor3d glColor4d glDisable glEnable glEnd glLoadIdentity glMatrixMode glNormal3d globallist glPopAttrib glPopMatrix glPushAttrib glPushMatrix glRotated glScaled glTexCoord2d glTranslated glVertex3d groupaddmember groupmember groupnummembers groupremovemember gt helpcommands hidelabel hideports inc inittrackedvariable inobject inserttask installpackage item iterate label last le listbackorders listentries listinlist listmax listmaximum listmean listmin listminimum listmul listpull listpush listremove listsub listsum loadsound local localarray log log10 lognormal lognormalmeanstdev lt main makearray max maxof min minof module movetablecol movetablerow movetasksequence mul multisorttable nametomodelpath ncols ne next node nodeadddata nodedeldata nodepoint nodetomodelpath nodetopath not nrcp nrip nrop nrows ntravelto ntraveltoupdate numtostring objectconnect objectshapecode objecttexcode openflexsimchart openglcolor opengllighting openinput openoutput or outobject parg parnode parstr particleset parval pc pd pf pi port pow pr prev pt query radianstodegrees rank rankobj reftable relloc repeat reset resumeanimation resumeinput resumeobject resumeoutput richeditaddtext richedittoken round runexpertfit savefpk senddelayedmessage sendmessage set setcenter setcolor setcurrent setitem setitemtype setlabel setlabelnum setlabelstr setloc setname setnodename setnodenum setnodestr setobjectimageindex setport setquerynode setrank setrot sets setsize setstate setstate_s settable settableheader settablenum settablesize settablestr settrackedvariable setundos showgraphicinfo sign sin sorttable spaceglobal spaceobject sqr sqrt startanimation statisticaltime stopanimation stopinput stopobject stopoutput store stringcopy stringlen stringpart stringreplace stringreturn stringsearch stringtonum stringtopchar strquote sub swaptablecols swaptablerows switch_hidebase tan time trackedvariable transfernode travelto traveltoupdate trunc undos up updateanimation updatetoolsmenu userfunction_n userfunction_s var var_s vectorprojectx vectorprojecty vectorprojectz xcenter xloc xrot xsize ycenter yloc yrot ysize zcenter zloc zrot zsize Do no remove, this fixes the anchor on doc.flexsim.com Development High-level development commands not typically intended for end users. addcommand backupfile buildall buildnodeflexscript changedisplay cleannodeflexscript cmdcompile cmddelete cmdexit cmdloadbyextension cmdloadsession cmdloadtree cmdnew cmdopen cmdsaveas cmdsavesession cmdsavetree consoleexecutefs copyattributes copycolor copylabel copylabels copyvariable copyvariables copyvisuals daemonstate documentusercommands excelupdatepreferences fgldebuglevel fileisreadonly fillwithatts fscheckall function_n function_s getapplicationtitle getnextparametersobject getproperty gettreedrawposition groupconnectfrom groupconnectto groupcopyconnections help howmanyattributes howmanycommands license licenseactivation maintenance modeleditmode postclosewindowmessage postmovewindowupdate postwindowmessage rebindobjectattributes recover refreshcommandlist refreshglobalvariables refreshmodelcommands sendwindowmessage setapplicationtitle setmessageloopsleep setproperty setticker statsenablemask stick suspenddraw switch_variable toggleallcodestates tracemaskevents tracemaskobject tracemasktime uselisteners Do no remove, this fixes the anchor on doc.flexsim.com Drawing Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window. bindtexture draw3dtext drawbox drawcolumn drawcube drawcylinder drawdisk drawflattext drawfont drawimage drawline drawobject drawpie drawquad drawrect drawrectangle drawshadow drawsphere drawtext drawtomodelscale drawtoobjectscale drawtriangle fglColor fglDisable fglEnable fglinfo fglLoadIdentity fglMatrixMode fglNormal fglPopMatrix fglPushMatrix fglRotate fglScale fglTranslate getdrawtextmetric glIsEnabled glLineWidth glPointSize mesh meshaddindex meshaddvertex meshdraw meshinfo meshsetattrib meshsetvertexattrib setdrawnamefunction spacebase spacerotate spacescale spacetranslate textureaxis_s textureaxis_t Do no remove, this fixes the anchor on doc.flexsim.com Events Commands for creating, searching and manipulating events. addtoeventtypelegend createevent createtickevent delayevents delayeventsofobject destroyevent destroyeventsofobject destroymessageevents eventcode eventdata eventget eventloginfo eventqty listenerinfo logevent registereventtype startlisten stoplisten Do no remove, this fixes the anchor on doc.flexsim.com FixedResources Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object. evaluatepullcriteria getiteminvolved getitemsendto getitemstate getitemvar holditem inititem pullitem receiveitem recycleitem releaseitem resetuniqueid resumetransportsin resumetransportsout savestoppedtransportin savestoppedtransportout setiteminvolved setitemsendto setitemvar transportincomplete transportoutcomplete Do no remove, this fixes the anchor on doc.flexsim.com Kinematics and Splines Commands associated with kinematics and spline math. addkinematic deactivatekinematics dynamicsplineall fastspline fastsplineall fastsplineupdate getkinematics initkinematics profilekinematics scalekinematicstotime setkinematicsrotoffset spline splinedraw splinedrawextrusion splinelength splineposobject splinerx splinery splinerz splinex spliney splinez updatekinematics Do no remove, this fixes the anchor on doc.flexsim.com Language Flexscript or C++ keywords and constructs. a break case continue default else for forobjecttreeunder if return stringcompare switch while Do no remove, this fixes the anchor on doc.flexsim.com Media Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths. applyshapefactors autoloadallmedia autoloadimages autoloadshapes autoloadsounds flyactive flyendnode flypath flypathadd flypathreset flystart flystop flyto flyupdate getshapeindex getsoundindex gettextureindex loadimage loadthreedobject mediareset objectsoundcode shapeinfo soundchange soundload soundplay soundplayfile soundstop unloadimage viewtofile Do no remove, this fixes the anchor on doc.flexsim.com Miscellaneous Miscellaneous commands that have not been categorized. addsystemcontrolleritem commandlineparam contextdragconnection createuserlibrary deleteselected dropuserlibraryobject duplicateselected executefsfile filebrowse firecreateevent flipselected geteventtime getlastfiletype getlinecontrollerdata getmodelunit getreportnum groupsetnames hideprogressbar highestconnection insertcopy integrityscan isprojectcompiled loadselectedfromfile loadstate loaduserlibrary memberadd memberremove memberremoveall moveobject moveselectedintohighlighted notifylinecontroller pickoptiononselect rotateselected savebyname savemodelprepare saveselectedtofile savestate savetree searchfornode seteventtime setprogressbar showprogressbar so startuploadlibraries transfernodeobj updatereport userinput validatename Do no remove, this fixes the anchor on doc.flexsim.com Model Execution Commands for stopping, starting, and managing simulation runs. endreplication fastforward getrunstate go realtime resetexperiment resetlayer resetmodel resetstats runfunction runspeed skip step stop stoptime updatestates Do no remove, this fixes the anchor on doc.flexsim.com NetworkNodes Commands associated with NetworkNode objects and network paths. closenodeedge getedgedist getedgespeedlimit getnetnode getnetnodespline getnetworkdistance getnextnetnode getnextnetnodeoutport gettenavigator gettenetnode gettenetworkinfo isedgeforward netnodefromrank opennodeedge optimizenetwork rankfromnetnode reassignnetnode redirectnetworktraveler trafficcontrolinfo Do no remove, this fixes the anchor on doc.flexsim.com Object Data Commands for accessing and assigning data on objects. assertvariable classobject contentunder emptyfluidobject fluidcontent fluidmaxcontent getanimationvar getcreationtime getentrytime getframe getobjectshapeindex getobjecttextureindex getvarnode getvarnum getvarstr isclasstype reassignticker setanimationvar setframe setobjectbillboard setobjectshapeindex setobjecttextureindex setresetposition setvarnum setvarstr switch_enablestats switch_hideconnectors switch_hidecontents switch_hidelabel switch_hideshape switch_showobject updatelocations updatestate Do no remove, this fixes the anchor on doc.flexsim.com Object Functions Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables. c debug delayednodefunction eventlisten executefsnode i inheritcode ip msgparam msgsendingobject nodefunction nodefunctionlisten param parqty selectall thisclass Do no remove, this fixes the anchor on doc.flexsim.com Object Ports Commands associated with the port connections of an objects. closeallip closeallop closeip closeop cpcpno inputopen ipavailable ipopen ipopno ipready numconnections opavailable openallip openallop openip openop opipno opopen opready outputopen transitionport Do no remove, this fixes the anchor on doc.flexsim.com Output Commands for giving feedback to the modeler for debugging or reporting purposes. endoffile fileclose fileexists fileopen filereadline fpc fpd fpf fpr fpt mpd mpf mpr mpt outputtreecontent print profileevents report reportmode Do no remove, this fixes the anchor on doc.flexsim.com People getactiverole getcensus getnumpeopleresources getpeopleresourceutilization reacquirepreemptedresource shiftscheduledownfunction Do no remove, this fixes the anchor on doc.flexsim.com Process Flow createtoken executesubflow getactivity getbatch getchildtoken getchildtokenrank getlastacquiredresource getparenttoken getprocessflowvar gettoken gettokenbyid gettokenid gettokens releasebatch releasetoken releasewave settokencolor settokenshape zonecheckrequests zonegetpartitionvaluefortoken zoneistokeninsubset Do no remove, this fixes the anchor on doc.flexsim.com Rack Object Commands for accessing and assigning data on Rack objects. rackdrawfilledcell rackdrawvirtualcontent rackgetbaycontent rackgetbayloc rackgetbayofitem rackgetbaysize rackgetcellcontent rackgetcellvar rackgetitembybaylevel rackgetitemcellrank rackgetlevelloc rackgetlevelofitem rackgetlevelsize rackgetnrofbays rackgetnroflevels rackrecycleitem rackrestoreitem racksetcellcontent racksetcellvar Do no remove, this fixes the anchor on doc.flexsim.com Statistics Commands for creating, manipulating, and accessing statistical data; including probability distributions. addbundleentry addbundlefield bernoulli beta binomial calculateconfidence cauchy cempirical clearbundle dataplot dempirical duniform empirical erlang exponential exportdataset extremevalue1a extremevalue1b gamma geometric getbundlefieldname getbundlefieldnr getbundlefieldtype getbundleindexentries getbundlenrentries getbundlenrfields getbundlevalue getdatastat getstat getstatetableutilization getstream graphtohistogram hypergeometric importdataset inversegaussian inverseweibull invertedweibull johnsonbounded johnsonunbounded laplace logarithmic logistic loglaplace loglogistic lognormal2 makehisto negbinomial normal pareto pearsont5 pearsont6 poisson qstudentt randantithetic randinit randnext randomwalk randstate removebundleentry removefirstbundleentry removelastbundleentry setbundlevalue triangular uniform weibull Do no remove, this fixes the anchor on doc.flexsim.com Strings Commands associated with strings, string manipulation and string comparisons. asciistr cdir currentfile documentsdir executestring getdirbrowse getpath modeldir pdir pfile programdatadir replacedata_n replacedata_s replacename searchdata_n searchdata_s searchname strascii stringtoken tostring truncatemediapath userdatadir Do no remove, this fixes the anchor on doc.flexsim.com Tables Commands for accessing, assigning and managing data in tables. exporttable importtable Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter Object Commands associated with TaskExecuter objects and a tasksequence. addsphere changepersonvisuals createcoordinatedtasksequence dispatchcoordinatedtasksequence distancetotravel drawspheres freeoperators getallocatedfromkey getcoordinatedtasksequence getcurtask getpreempt getpriority getutilizedobject insertallocatetask insertdeallocatetask insertproxytask insertsynctask pickoffsetx pickoffsety pickoffsetz placeoffsetx placeoffsety placeoffsetz profiletasksequence reordertasks requestoperators rerankbesttask setcollisioncheck setpreempt setpriority Do no remove, this fixes the anchor on doc.flexsim.com Tree Access Commands for referencing nodes or objects through FlexSim's tree structure. library maintree model views Do no remove, this fixes the anchor on doc.flexsim.com Tree Node Data Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree. $iter checkdllconnection comparetrees createcoupling enablecode findownerobject getsdtvalue nodebreak nodeinsertafter nodeinsertinto nodejoin objectexists ownerobject removeallcouplingreferences setsdtvalue swapnoderanks switch_cppfunc switch_destroyonreset switch_dllfunc switch_expanded switch_flexscript switch_hashedlist switch_noselect switch_orphancoupling switch_preservecoupling switch_protected switch_selected switch_statelocked switch_stateused Do no remove, this fixes the anchor on doc.flexsim.com User Interface Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows. activateview activedocumentnode activedocumentview activeview addviewtext applicationcommand applyalleditstonodes applyeditstonode applylinks applytoedits attlink beginaggregatedundo beginignoreundo callwebscriptmethod checkforexistingview clearundohistory clickcode closeview codetotemplate codetotemplatetext combocurrentnode comborefresh continueaggregatedundo controlpressed createpopup createundorecord createview cursorinfo deselectall distcutoff distfromviewpoint draginfo dropnodefrom dropnodeto dropx dropy dropz endaggregatedundo endignoreundo findundorecordbyid finishundorecord getchecked getcurrentundorecord getdashboardcontrol getfilebrowse getfilesindirectory getparentwindow getpickingdrawfocus getpickingmode getsystemmetric gettableviewselection getundorecordid getviewhwnd getviewmenu getviewscale getviewtext highlightviewtext iskeydown keyboardfocus keyedclick lastclickednode lastkey lastkeydown lastkeyup listboxrefresh mainmenucommand makeactive menubelow menucheck menugray menumain msg nodefromwindow ownerview pickcolor pickcolornode pickedcolorblue pickedcolorgreen pickedcolorred pickfile picklistapply popupmenu redirectconsole redirectpicklists redo refreshview repaintall repaintallactive repaintview repositionhighlightededits scrollinfo select selectedobject selectedx selectedy selectedz sendonactivatenotify setcameradirection setcameravolume setchecked setcursor setdropcoords setpickingdrawfocus setselectedobject settableviewselection setviewtext shiftpressed showcompilerconsole showhelp showhtmlhelp standardpreopen sv systemwindow tabcontrolrefresh templatetocode undo updateundorecord viewdist viewmenucommand webcommand windowflash windowfromnode windowgray windowmenu windowmove windowredraw windowshow windowstyle"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/CommandGroups.html",
        "title": "Category Command Reference",
        "content": "AGV agvaddlistener (obj agv, node listenernode, num flags[, ...]) Description Adds a listener event on the agv Example agvaddlistener(agv, c, AGV_LISTEN_PRE_ARRIVAL); agvinfo (obj agv, num what[, p1, p2, p3, p4]) Description Deprecated, use AGV class. Gets various information about an agv, based on the what parameter: AGV_CURRENT_CP - Returns the agv's current control point AGV_ORIGIN_CP - Returns the agv's origin control point AGV_INTERMEDIATE_DEST_CP - Returns the agv's intermediate destination control point AGV_DEST_CP - Same as AGV_INTERMEDIATE_DEST_CP AGV_FINAL_DEST_CP - Returns the agv's final destination control point AGV_DEST - Returns the agv's destination object AGV_BATTERY_LEVEL - Returns the agv's current battery level as a percentage of battery capacity (0 - 100) AGV_AMP_HOURS - Returns the agv's current battery level in amp hours AGV_START_RECHARGE - Starts the agv recharging. Returns the time it will take to recharge to full capacity. AGV_RECHARGE_TO_LEVEL - Explicitly set's the agv's battery level to p1 (0 - 100). AGV_ADD_ALLOC_POINT - Should be called from the travel initialization trigger. Manually adds a control point/control area for allocation, i.e. a control point or control area that would not otherwise need to be allocated as part of the agv's current travel path. The control point/control area is passed as p1, and the distance at which it must be allocated is passed as p2. The command will return a reference to a node that represents that allocation. Use AGV_SET_ALLOC_POINT_DEALLOC_DIST and AGV_SET_CAN_STOP_AT_ALLOC_POINT to specify further data on that allocation point. AGV_SET_ALLOC_POINT_DEALLOC_DIST - For a manual allocation point that's been added, this sets the travel distance at which the agv can deallocate the object. You should call this at some point after adding the allocation, so that the object will be properly deallocated. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is the deallocation distance. AGV_SET_CAN_STOP_AT_ALLOC_POINT - Sets whether or not the agv can stop at a manually added allocation point. The default is no, i.e. the agv will not stop at the stop distance, but will continue to the next stoppable point before attempting to allocate the object. Setting this to 1 will allow the agv to stop at the manual allocation point to allocate ahead. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is 1 or 0. AGV_ATTACH_TRAILER - Manually attaches a trailer to the AGV. p1: the object to attach. p2: the trailer gap to apply. p3: If 1, the trailer will be attached behind the AGV (attach to the AGV's tail), if 0, the trailer be attached ahead of the AGV (attach to the AGV's head). p4: If 1, the trailer will automatically be detached when the object exits the AGV, if 0, the trailer should be manually detached. AGV_DETACH_TRAILER - Manually detaches a trailer from the AGV. p1: the object that is attached as a trailer. AGV_SPEED - Returns the agv's current speed AGV_PROXIMITY_STATE - Returns 1 if the agv is blocked by proximity on an accumulating path, 0 otherwise. AGV_ACCUM_AHEAD_AGV - Returns the agv ahead of this agv on an accumulating path, if one exists. Example agvinfo(agv, AGV_DEST_CP); agvreassigncp (obj agv, obj controlpoint) Description Deprecated, use AGV class. Reassigns an agv to the specified control point Example agvreassigncp(agv, controlpoint); agvredirect (obj agv, obj object/controlpoint, num mode) Description Deprecated, use AGV class. Redirects the agv to the designated object/control point. mode can be one of the following values: REDIRECT_AND_WAIT - if not redirected before arrival, the agv will wait at the destination until redirected REDIRECT_AS_FINAL - the destination becomes the new final destination for the agv REDIRECT_AND_CONTINUE_ON_ARRIVAL - the agv will continue to the final destination after arriving at the intermediate destination REDIRECT_AND_CONTINUE_ON_PRE_ARRIVAL - the agv will continue to the final destination after pre-arriving at the intermediate destination (it will not decelerate to a stop) Example agvredirect(agv, controlpoint, 1); cp (obj/str object_or_name) Description Returns a reference to an AGV control point Example cp(\"CP547\"); cpaddlistener (obj rootObj, str connectionPath, node listenerNode, num flags[, ...]) Description Adds a listener to events on one or more control points Example cpaddlistener(current, \"Location > LoadPoints\", c, CP_LISTEN_EXIT | CP_LISTEN_AVAILABLE); cpallocate (obj controlPoint, obj allocator, num force) Description Allocates a control point to the claiming object. If successful, a reference to a coupling node representing the allocation will be returned. Example cpallocate(controlPoint, current, 1); cpconnection (obj controlpoint/object, num/str connection, num rank) Description Returns a control point connection. Also, if connection is a string and controlpoint and rank are both 0, then this command will return the index of the given connection. This is for speed, so that you can subsequently use a number for the connection. Example cpconnection(cp, \"ForwardTo\", 1) Returns the first ForwardTo connection on cp cpconnection(cp, \"LookForWork>NextLookForWork\", 1) Traverses two connections to find an object. This is the same as cpconnection(cpconnection(cp, \"LookForWork\", 1), \"NextLookForWork\", 1) cpconnection(cp, \"LookForWork:2>NextLookForWork\", 1) Same as cpconnection(cpconnection(cp, \"LookForWork\", 2), \"NextLookForWork\", 1) int connIndex = cpconnection(0, \"LookForWork\", 0); treenode obj = cpconnection(cp, connRank, 1); Gets the index of the connection, and then uses the index instead of the name. cpdeallocate (obj controlPoint, obj allocator) Description Deallocates a control point from the claiming object. If successful returns 1, otherwise 0. Example cpdeallocate(controlPoint, current); cpdistance (obj fromControlPoint, obj toControlPoint) Description Returns the agv network distance between two control points Example cpdistance(cp1, cp2) cpisavailable (obj controlpoint) Description Returns 1 if the given control point is available. byCriterion is not used right now, but is reserved for future use. Example if (cpisavailable(cp)) { ... } cpnumconnections (obj controlpoint, num/str connection) Description Returns the number of connections a control point has Example cpnumconnections(cp, \"ForwardTo\") cptasksequencequeue (obj controlpoint) Description Returns a reference to the task sequence queue associated with the control point Example treenode tsQueue = cptasksequencequeue(cp); Communication Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel. clientclose (num socket) Closes the client socket Description This command closes the client socket specified as socket. It must be called sometime after clientcreate(). Once a socket is closed, nothing can read from it or write to it. The socket number may be reused again by a later call to clientcreate(). This function returns true if the socket closes correctly. Example clientclose(1); clientconnect (num socket, str hostname, num port) Attempts to connect the client socket Description This command attempts to connect the socket specified by socket to a server running on the machine called hostname, which is listening on the port specified. The number passed as socket is the number that was previously returned by clientcreate(). The string passed as hostname can be either the computer's name (if it is on the same network as the client) or its IP address. This command should not be called until after a successful call to clientcreate() is made. If the socket does not connect, then it is closed and clientcreate() will have to be called again to reopen it. This functions returns true if the socket connects successfully. Example clientconnect(1,\"localhost\",1880); clientcreate () Creates a new client socket with TCP/IP protocol Description This command creates a new client socket that is set to communicate using the TCP/IP protocol. FlexSim can create up to fifty client sockets at one time. Each client can be connected to a different server. This function returns a number that must be stored by the model to reference the socket that was created. If an error occurs, this function returns 0. Example int socknum = clientcreate(); clientreceive (num socket, str buffer, num buffersize, num noblock[1/0]) Receives data sent to the socket Description This command receives data that has been sent to the socket specified as socket. The value of socket is the number that is returned by clientcreate(). This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = clientreceive(1,Buf,15,0); flexscript: string readstr = clientreceive(1, NULL, 15, 0); clientsend (num socket, str message[, num charlength]) Sends a message across the socket Description This command sends a message across the socket specified as socket. The value passed as socket is the number returned by clientcreate(). The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example clientsend(1,\"REQ:service\"); excelclose (num save [1/0]) Close the currently open Excel workbook Description This command closes the currently open Excel workbook. If save is 1, the workbook will be saved before it closes. If save is 0, changes made to the workbook will be discarded. Example See the example for excelopen(). excelcreatesheet (str name) Creates a new worksheet in the currently open Excel workbook Description Creates a new worksheet. The new sheet will be given the specified name. Example excelcreatesheet(\"MyNewSheet\"); excelcreateworkbook () Create an Excel workbook Description This command creates a workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open or create another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelcreateworkbook(); excelsetsheet(\"Sheet1\"); excelwritenum(1,1,1); excelsave(\"NewWorkBook.xlsx\"); excelclose(0); This first creates a link between FlexSim and a new Excel workbook, sets the active sheet in the workbook to \"Sheet1\", writes a 1 to row 1 column 1, saves the workbook, then closes the workbook. exceldeleterange (str rangename) Deletes the specified range of the currently open Excel workbook Description Deletes the specified range. Does not affect the data in the range. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example exceldeleterange(\"MyRange\"); exceldeletesheet (str name [, int allowwarning]) Delete the worksheet in the currently open Excel workbook Description Deletes the specified worksheet. If allowwarning is 1, you will be warned before you delete a sheet with data. Example exceldeletesheet(\"MyNewSheet\"); excelexporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Exports data from a table within FlexSim to the currently open Excel workbook Description Exports data from a table within FlexSim to Excel. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelexporttable(\"Table1\",1,1,5,3); excelgetrangeparam (str rangename, num param) Retrieves a location parameter about the named range of the currently open Excel workbook Description Retrieves a location parameter about the named range. Valid values for param are: 1 = Starting Row Number 2 = Starting Column Number 3 = Ending Row Number 4 = Ending Column Number 5 = Width 6 = Height This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example int width = excelgetrangeparam(\"MyRange\",5); excelgetrangesheet (str rangename) Gets the name of the worksheet associated with rangename of the currently open Excel workbook Description Returns the name of the worksheet where the specified range is located. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example pt(excelgetrangesheet(\"MyRange\")); excelimporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols) Imports data from the currently open Excel workbook to a table in FlexSim Description Imports data from Excel to a table in FlexSim. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelimporttable(\"MyTable\",1,1,5,3); excellaunch ([str launchdir]) Launch Microsoft Excel Description This command opens Microsoft Excel so that it can be accessed by FlexSim. If launchdir is not specified, the path defined in Tools|Excel...|Global Settings will be used. Otherwise, the launchdir must be an accurate path to the location on the hard drive where EXCEL.EXE is located. It is typically something like \"C:/Program Files/Microsoft Office/Office10,\" but may be different depending on the version of Excel installed. It is generally not required to launch Excel before communicating with it. However, if FlexSim is set to communicate with Excel via DDE (by calling maintenance(1000,1), this is not the default behavior) Excel must be running before any communication can be performed. If excellaunch() is called at the beginning of communication, excelquit() must also be called before the user opens a new model, compiles the current model or closes FlexSim. Example excellaunch(\" C:/Program Files/Microsoft Office/Office10\"); excelopen(\"C:/mybook.xls\"); excelsetsheet(\"Sheet1\"); double thenum = excelreadnum(1,1); excelclose(true); excelquit(); This starts Excel, opens a workbook called \"mybook,\" stores a value read from row 1, column 1 from that workbook, then closes the file and Excel. excelmultitableexport () Starts the automatic exporting of data from FlexSim tables to Excel Description Starts the automatic exporting of data from FlexSim tables to Excel sheets as setup in the Excel Import/Export tool. Example excelmultitableexport() excelmultitableimport () Starts the automatic importing of data from Excel to FlexSim tables Description Starts the automatic importing of data from Excel sheets to FlexSim tables as setup in the Excel Import/Export tool. Example excelmultitableimport() excelopen (str workbook) Open the Excel workbook Description This command opens the file called workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelopen(\"mydata.xls\"); excelsetsheet(\"Sheet1\"); double myvalue = excelreadnum(1,2); excelclose(0); This first creates a link between FlexSim and an Excel workbook called \"mydata.xls\", then sets the active sheet in the workbook to \"Sheet1\", sets a local variable called myvalue to the number read from row 1 column 2, then closes the workbook without saving. excelquit () Close Microsoft Excel Description This command closes Microsoft Excel if it is open. After this command is called, no other commands to Excel should be called. Any Excel files that were open should be closed before this command is called. You may get an Excel prompt to save changes to any workbooks that were left open. Use excelclose() to avoid this. This command must be called if excellaunch() was called previously. Example see excellaunch(); excelrangereadnum (str rangename, num row, num column) Read the numeric value from a cell of the specified range of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadnum(\"MyRange\",5,1) excelrangereadstr (str rangename, num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the specified range of the currently open Excel workbook Description Reads a text value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadstr(\"MyRange\",5,1) excelrangewritenum (str rangename, num row, num column, num value) Write the numeric value to a cell of the specified range of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritenum(\"MyRange\",5,1,99.87) excelrangewritestr (str rangename, num row, num column, str value) Write the string value to a cell of the specified range of the currently open Excel workbook Description Writes string value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritestr(\"MyRange\",5,1,\"My String\") excelreadcell (num row, num col[, num flags]) Returns the value of a cell in the active worksheet as a variant Description Returns the value of a cell in the active worksheet as a variant. Flags can be specified to specify what exactly is returned from Excel. Those flags are EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, and EXCEL_DATE_AS_NUM. EXCEL_DATA_NUMBER will read the Excel data as a number. EXCEL_DATA_STRING will read the Excel data as a string. EXCEL_DATE_AS_NUM will interpret any Excel dates as a Flexsim readable date number. Example Variant value = excelreadcell(1, 5, EXCEL_DATA_NUMBER | EXCEL_DATE_AS_NUM); This returns the value of the 5 column in the first row as a number. If it's a date, the number returned will be Flexsim readable as a date. excelreadnum (num row, num column [, num rowchar, num colchar]) Read the numeric value from a cell of the active sheet of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column of the active sheet of the currently open Excel workbook. Example excelreadnum(5,1) excelreadstr (num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the active sheet of the currently open Excel workbook Description Reads a text value from a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelreadstr(5,1) excelsave ([str filename]) Saves the currently open Excel file Description Saves the currently open Excel file. If a filename is passed to this command, the file will be saved with that name. This is the equivalent of selecting Save As from Excel's File menu. If no parameters are passed to this command, the file will be saved with its current name, and the original file will be overwritten. This is the equivalent of selecting Save from Excel's File menu. Example excelsave(\"runresults_001.xls\") excelsetrange (str rangename, num startrow, num startcolumn, num endrow, num endcolumn) Creates or changes a named range of the currently open Excel workbook Description Creates or changes a named range. The range will be on the active sheet. The range's upper-left cell is defined by startrow and startcolumn. The bottom-right cell is defined by endrow and endcolumn. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelsetrange(\"MyRange\",5,5,10,15); excelsetsheet (str sheetname) Sets the active worksheet of the currently open Excel workbook Description This command sets the active worksheet in the currently open Excel workbook. Whenever excelreadnum() or excelreadstr() are called, the value read will come from the active worksheet. The active worksheet may be set many times for the same open workbook. Example See the example for excelopen(). excelversion () Gets the version of Microsoft Excel Description Returns a string that contains the Excel interface version. Example excelversion() excelwritenum (num row, num column, num value [, num rowchar, num colchar]) Write the numeric value to a cell of the active sheet of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritenum(5,1,99.87) excelwritestr (num row, num column, str value [, num rowchar, num colchar]) Write the string value to a cell of the active sheet of the currently open Excel workbook Description Writes string value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritestr(5,1,\"My String\") requestdecision (str/node/num object) Description Request a decision from a ReinforcementLearning object. When training, this will cause the simulation to return a reward for the previous action, make a new observation, and (if the episode is not done) wait for an action from the algorithm. When running normally (not training), this will make an observation and execute the On Request Action trigger of the ReinforcementLearning object in order to make a heuristic decision or predict an action using a trained AI model. Use this command to specify exactly when the AI should make a decision. Example requestdecision(\"ReinforcementLearning1\"); rundocument (str command, str path+filename) Open a file using the default application for the file type Description Opens a file using the default application used for opening files with the specified extension on your computer. The available commands are: edit, explore, find, open, and print. A return value > 32 means success. Example rundocument(\"open\",\"C:/myfile.doc\"); Opens myfile.doc with whatever application is default for opening *.doc files on your computer. runprogram (str commandline) Run an external program Description Run an external program. This command will issue a command to the operating system. The commandline may contain full program arguments. A return value > 31 means success. Example runprogram(\"c:/myprogram.exe\") serveraccept (int noblocking) Gets the server will attempt to accept a client connection Description The server will attempt to accept a client connection. If noblocking = 0, the command blocks until a connection is made. It returns an index used to reference the connection made. The server will attempt to accept a connection from a waiting client. A number will be returned that is the index of the connection established. A return value of 0 indicates that no connection was created. This value will be used in all future server calls. If noblocking = 1, the server will not block FlexSim program execution, but will return a 0 if no client attempts to connect. If noblocking = 0, the server will block (freeze) FlexSim program execution until a client attempts to connect. Connections with clients are only made with this command. Example int client = serveraccept(0); servercloseconnection (int connection) Closes the client connection Description The specified connection to a client is closed. Does not close the main server socket. This should be done when the server is completely finished communicating with a client. Example servercloseconnection(1); serverclosemain () Closes the main server socket and all open connections Description Closes the main server socket and all of the connections that are still open. No more communication can be done until it is created again. All connections should be closed before this is called. Example serverclosemain() servercreatemain (int port) Creates a server socket that is listening for connections to the specified port Description Creates a server socket that is listening for connections on the specified port. Some ports (called well-known ports) are reserved for special applications. Anything port number over 1024 is usually safe to use. Example servercreatemain(1880); serverreceive (int connection, char *buffer, int bufsize, int noblocking) Receives a message from the connection Description Receives a message from the specified connection. This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = serverreceive(1,Buf,15,0); flexscript: string readstr = serverreceive(1, NULL, 15, 0); serversend (int connection, char* message [, num charlength] ) Sends a message to the client connect to connection Description Sends the specified text message to the client that is connected to the specified connection. Returns the number of bytes (characters) sent correctly. The text message to be sent must be converted into a char *. The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example serversend(1,\"MadeConnection\"); socketend () Shuts down the processes started with socketinit() Description This command shuts down the processes that were started with socketinit(). It should be called when the model has completely finished working with the sockets that it had open. This function returns true if the shut down is successful. See clientsend() for more information. Example socketend(); socketinit () Initializes background processes that allow Windows Sockets to be used Description This command initializes the background processes that allow Windows Sockets to be used. It must be called before any calls to socket commands will work. This function returns true if the initialization is successful. See clientsend() for more information. Example socketinit(); Conversions Commands for converting units, data types, and spatial coordinate. apchar (str string) Asserts string as a char* Description Assert type as C style string (e.g. char*). Alias for stringtopchar Example apchar(\"hello\") cm (num centimeters) Gets the number of meters in the number of centimeters Description Returns the number of meters in the specified number of centimeters. Example cm(3) convert (var value, var from, var to) Converts the given value (a time) from one time format to another Description Converts the given value (a time) from one format to another. The from and to arguments only accept the following values: FS_DATETIME XL_DATETIME MODEL_TIME DATE_STR TIME_STR DATETIME_STR FS_DATETIME - the number of seconds since Jan 1, 1601. getmodelunit(START_TIME) returns a value in FS_DATETIME units. XL_DATETIME - the serialized day number, where day 1 is Jan 1, 1900. Feb 10, 2025 1:30 PM is 45698.5625 in XL_DATETIME units. This format is used in Microsoft Excel for dates. MODEL_TIME - the number of model units since the model start time DATE_STR - a string representing the date portion of a datetime value. The resulting text will depend on the date format specified in the model settings. If converting from this format, the value must be formatted according to those settings. TIME_STR - a string representing the time portion of a datetime value. The resulting text will depend on the time format specified in the model settings. If converting from this format, the value must be formatted according to those settings. DATETIME_STR - a string representing the time and date of a datetime value. The resulting text will depend on the time and date formats specified in the model settings. If converting from this format, the value must be formatted according to those settings; the time portion must be first, separated from the date portion by a single space. Note that year 3000 and beyond are not supported by this command. Example convert(42308, XL_DATETIME, MODEL_TIME) // converts an Excel date to a valid model time days (num days) Gets the number of model time units in the give number of days Description Return the number of model time units in the given number of days. Example days(1) Returns 86400 seconds. fpm (num feetperminute) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/minute. Example fpm(9) fps (num feetpersecond) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/second. Example fps(9) ft (num feet) Gets the number of model length units in the number of feet Description Return the number of model length units in the specified number of feet. Example ft(3) hours (num hours) Gets the number of model time units in the number of hours Description Return the number of model time units in the given number of hours. Example hours(1) Returns 3600 seconds. in (num inches) Gets the number of model length units in the number of inches Description Return the number of model length units in the specified number of inches. Example in(8) minutes (num minutes) Gets the number of model time units in the number of minutes Description Return the number of model time units in the given number of minutes. Example minutes(1); Returns 60 seconds. mph (num milesperhour) Gets the number of model length/time units in the number of miles/hour Description Return the number of model length/time units in the specified number of miles/hour. Example mph(9) seconds (num seconds) Gets the number of model time units in the number of seconds Description Return the number of model time units in the given number of seconds. Example seconds(30); Returns 0.5 minutes. tonode (thing) Assert type as a node pointer Description Assert type as a node pointer. Only serves a real purpose in C++. Example tonode(getnodenum(couplingnode)) Converts the numeric value of couplingnode to a treenode tonum (thing) Assert type as a number Description Assert type as an arithmetic number. Only serves a real purpose in C++. Example return tonum(current); This returns a pointer to the current object, casting it as a number. toptr (thing) Description For developer use. Assert type as pointer. Assert that the argument thing is of type void*. Only serves a real purpose in C++, but is safe to use in flexscript. Example toptr(so()) Conveyor conveyorgetmotor (obj conveyor) Description Deprecated, use Conveyor class. Example conveyorgetmotor(conveyor); conveyorinfo (obj conveyor, num info[, p1, p2, p3, p4, p5]) Description Deprecated, use Conveyor class. Example conveyorinfo(conveyor, CONV_INFO_ESTIMATE_CONVEY_TIME); conveyorresumeitem (obj item[, num force]) Description Deprecated, use Conveyor class. Example conveyorresumeitem(item); conveyorsenditem (obj item, obj dest) Description Deprecated, use Conveyor class. Example conveyorsenditem(item, outobject(current, 1)); conveyorsetspeed (obj conveyor, num toSpeed) Description Deprecated, use Conveyor class. Example conveyorsetspeed(conveyor, 1); conveyorstopitem (obj item) Description Deprecated, use Conveyor class. Example conveyorstopitem(item); mergegetlanestate (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergegetlanestate(current, 5) mergegetnumlanes (obj mergeController) Description Deprecated, use Conveyor.MergeController class. Example mergegetnumlanes(current) mergeislaneclear (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergeislaneclear(current, 5) mergereleaselane (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergereleaselane(current, 1) Deprecated Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead. acos (num ratio) Deprecated, use Math.acos() Description This command is deprecated. Use Math . acos () instead. Gets the arccos of an angle in radians. Example add (num value1, num value2) Deprecated, use the + operator Description This command is deprecated. Use the + operator instead. Addition of value1 to value2. This returns the result of the arithmetic expression value1+value2. Example double sum = add(1,2); addfullhistorymoverecord (num flowitemid, num time, obj origin, obj destination, num itemtype) Deprecated Description This command is deprecated. Adds a new entry to the Movement table that is recorded when Full History is enabled. The new entry records that the flowitem identified by flowitemid moved from the orgin object to the destination object and the specified time. The entry also records that the flowitem's itemtype at the time of the movement was the itemtype passed as the third parameter. Users should only have to use this command in very rare situations. Example addfullhistorymoverecord(getnodenum(uniqueid(item)), time(), current, current.outObjects[1], item.type); addfullhistorystaterecord (num time, num state, obj object) Deprecated Description This command is deprecated. Adds a new entry to the State table that is recorded when Full History is enabled. The new entry records that the specified object passed in as the third parameter changed to the specified state at the time that is entered as the first parameter. This should only need to be called if the object is having its state changed by soem command other than setstate(). Example addfullhistorystaterecord(time(), STATE_IDLE, current); addlabel (obj object, str labelname [, num/str value]) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode .LabelName or treenode . labels .assert() instead. Adds a label to object. Example addtablecol (str/num/node table [, num column, num datatype]) Deprecated, use Table.addCol() Description This command is deprecated. Use Table . addCol (). instead. Adds a column to a table. Example addtablerow (str/num/node table [, num row, num datatype]) Deprecated, use Table.addRow() Description This command is deprecated. Use Table . addRow () instead. Adds a row to a table Example and (num/node condition1, num/node condition2) Deprecated, use the && operator Description This command is deprecated. Use the && operator instead.. Example angle (num dx, num dy) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Returns the angle in degrees, rotated clockwise from the positive x axis, of the vector (dx, dy). Calling angle(dx, dy) is the same as calling -Math.degrees(Math.atan2(dy, dx)). Example double myangle = angle(distx, disty) anode (thing) Deprecated, use tonode() Description This command is deprecated. Use tonode() instead. Assert type as node pointer. Example anode(so()) anum (thing) Deprecated, use tonum() Description This command is deprecated. Use tonum() instead. Assert type as arithmetic number. Example anum(so()) aptr (thing) Deprecated, use toptr() Description This command is deprecated. Use toptr() instead. Assert type as pointer Example aptr(so()) arraysize (var array) Deprecated, use array.length Description This command is deprecated. Use Array . length instead. Gets the number of elements in an array. Example asin (num ratio) Deprecated, use Math.asin() Description This command is deprecated. Use Math . asin () instead. Gets the arcsin of an angle in radians. Example assertattribute (obj object, str attributename, num datatype) Deprecated, use Object.attrs.assert() Description This command is deprecated. Use Object . attrs .assert(). Gets a reference to attribute attributename of object, creates the attribute if it does not exist. Example assertlabel (obj object, str labelname, num datatype) Deprecated, use treenode.labels.assert() Description This command is deprecated. Use treenode . labels .assert() instead. Gets a reference to label labelname, creating the label if it does not exist. Example assertsubnode (node containernode, str name[, num datatype]) Deprecated, use treenode.subnodes.assert() Description This command is deprecated. Use treenode . subnodes .assert() instead. Example atan (num ratio) Deprecated, use Math.atan() Description This command is deprecated. Use Math . atan () instead. Gets the arctan of an angle in radians. Example atan2 (num dy, num dx) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Example att (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use var(), var_s() or getvarnode() instead. Example att(current,1) att_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the attribute node of an object by name. An attribute node is one which resides inside the \"variables\" node of the structure of an object. This function will return the pointer to the node called name inside the variables node of object. var_s supercedes this command. Example att_s(current,\"myatt\") aviadd (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avifinish (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avistart (str filename, node viewnode, num fps) Description This command is deprecated. Use the Video Recorder instead. Example bcgetitemkinematics (obj basicconveyor, obj item, num kinematictype {0-main kinematic : 1-time dependent : 2-convey dependent}) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcgetitemkinematics command is used to obtain a reference to one of the three kinematics associated with a flowitem traveling on a BasicConveyor: 0 = The main convey state kinematics. You may get kinematic information from this, but do not change the kinematic by adding kinematics or initializing it. 1 = A user-definable kinematics that is dependent on simulation time. 2 = A user-definable kinematics that is dependent on the convey position of the flowitem on the conveyor. The two user-definable kinematics are available for the user to set up customized kinematic motion in addition to traveling down the length of the conveyor. Use bcgetitemkinematics to get a reference to the desired kinematics node, and then use standard initkinematics() and addkinematic() commands as normal. You will need to use the alternative initkinematics parameter list: initkinematics(node, x, y, z, rx, ry, rz, managerots, localcoords). Also, if you add kinematics to the type 2 convey depend kinematic node, bear in mind that all time units for that kinematic no longer apply to actual simulation time units. Instead, they are interpretted as \"convey units\". For example, a speed of 5 is no longer 5 units per time unit, but is instead 5 units per conveyed unit. Acceleration is not distance per time squared, but distance per conveyed unit squared. Start times are no longer a time to start the kinematic, but a position along the conveyor to start the kinematic at. As an example, let's say you add a kinematic to the convey dependent kinematic node to travel 1 unit in the y direction with \"start time\" 5 and \"max speed\" 0.5. What that translates to for the convey dependent kinematic is that the item will start traveling in the y direction once it reaches 5 units along the conveyor. Also, for every unit that it travels down the length of the conveyor, it will travel 0.5 units in the y direction (0.5 y units per convey unit). Thus it will finish the y kinematic once it has travelled 7 units down the conveyor. If the item is blocked in the middle because of accumulation, say at convey position 6, then its y kinematic will also stop, and not resume until the item resumes along the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example treenode kin = bcgetitemkinematics(current, item, 2); treenode kin2 = bcgetitemkinematics(current, item, 1); initkinematics(kin, 0,0,0, 0,0,0, 0,0); addkinematic(kin, 0,1,1,0.5,1,1,0,0, 5, KINEMATIC_TRAVEL); initkinematics(kin2, 0,0,0, 0,0,0, 0,0); addkinematic(kin2, 0,0,720,360,0,0,0,0, time()+5.0, KINEMATIC_ROTATE); bcgetitemposition (obj basicconveyor, obj item) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object The bcgetitemposition command returns the current position of an item on a BasicConveyor object. The position is measured along the conveyor's length from the head of the conveyor to the flowitem's edge furthest from the head of the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcgetitemposition(current,current.first); bcsetdirection (obj basicconveyor, num direction) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcsetdirection command stops all flowitems on the conveyor and sets the direction of travel to 1=forward and 0=reverse. All flowitems will need to have their convey state reset with the bcsetitemconveystate() command before they will begin moving again. The example below shows how to stop the conveyor, and then have all the flowitems accelerate up to a speed of 1 in the reverse direction. Any additional item kinematics will still be active after a direction change. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcsetdirection(so(),0); for(int i = 1; i <= so().subnodes.length; i++) { treenode item = so().subnodes[i]; bcsetitemconveystate(so(), item, bcgetitemposition(so(), item), 0, 1, 0.2); } bcsetitemconveystate (obj basicconveyor, obj item, num startpoint, num startspeed, num targetspeed, num accdec) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The BasicConveyor object allows flowitems to be moved in and out of the conveyor at any time and at any location. Each flowitem on the BasicConveyor can be assigned and re-assigned its own kinematic profile defining how the flowitem is to move along the conveyor. When one flowitem overtakes another flowitem on the conveyor which is either stopped or traveling at a slower speed, it will slow down immediately to match that flowitem's speed. Although flowitems may travel in either direction along the conveyor, all flowitems will travel in the same direction at any given time. The travel direction of the conveyor is set with the bcsetdirection() command. As flowitems are moved in and out of the conveyor, other flowitems on the conveyor are aware of the increase or decrease in available space along the conveyor, and will accumulate naturally. After a flowitem enters the conveyor, either indirectly with the receiveitem() command or directly with the moveobject() command; it is necessary to define the flowitem's initial kinematic profile. This profile is refered to as the flowitem's \"convey state\", and it is set with the bcsetitemconveystate() command. The convey state for a flowitem can be set multiple times if desired. The following are definitions for the parameters used to define the convey state of a flowitem: basicconveyor = A reference to the conveyor. item = A reference to the flowitem. startpoint = The starting location for the flowitem as measured from the beginning of the conveyor, along the conveyor's length to the flowitem's edge furthest from the head of the conveyor (the leading edge if the conveyor's direction is forward, the trailing edge if the conveyor's direction is backward). startspeed = The initial speed the flowitem will begin traveling at. targetspeed = The target speed the flowitem will try to achieve. If the targetspeed is greater than the startspeed, then the flowitem will accelerate up to the target speed; otherwise it will decelerate down to the target speed. If both the startspeed and the targetspeed are set to 0, the flowitem will be positioned at the startpoint, and will not move. accdec = The acceleration or deceleration used to achieve the target speed over time. A value of 0 indicates infinite acceleration/deceleration; or in other words the flowitem will reach it's targetspeed immediately. No destination or termination speed is required, because the flowitems continue traveling along the conveyor until they either reach the end of the conveyor, run into another flowitem, or their convey state is changed again. The BasicConveyor allows multiple \"Decision Points\" to be defined along its length. These trigger points are convenient locations to update the convey state of a flowitem. In addition to the main convey state kinematic assigned to the flowitem with the bcsetitemconveystate() command, a flowitem has two other kinematic structures associated with it that may be used to apply custom kinematic motion (translation or rotation) in addition to the travel motion along the conveyor. One of the kinematic structures is based on simulated time units, and the other is based on distance units along the length of the conveyor. To access these kinematic structures, use the bcgetitemkinematics() command, then use the initkinematics() and addkinematic() commands to create the custom kinematic motion desired. See bcgetitemkinematics() command documentation for more information. Example bcsetitemconveystate(current, item, position, 0, 60, 0); bitwiseand (num a, num b) Deprecated, use & operator Description This command is deprecated. Use & operator instead. Returns a bitwise AND operation on the two 32 bit integer values. Example int bwa = bitwiseand(0x460, 0x040); This example sets bwa to the value 0x020. bitwisenot (num a) Deprecated, use ~ operator Description This command is deprecated. Use ~ operator instead. Returns the bitwise not of the 32 bit integer value Example int bwn = bitwisenot(0x0); This example sets bwn to the value 0xffffffff bitwiseor (num a, num b) Deprecated, use | operator Description This command is deprecated. Use | operator instead. Returns the bitwise OR of the 32 bit integer values Example int bwo = bitwiseor(0x15, 0x01); This example sets bwo to the value 0x15 bitwisexor (num a, num b) Deprecated, use ^ operator Description This command is deprecated. Use ^ operator instead. Returns the bitwise XOR of the 32 bit integer values Example int bwxo = bitwisexor(0x15, 0x01); This example sets bwxo to the value 0x14 ceil (num num) Deprecated, use Math.ceil() Description This command is deprecated. Use Math . ceil () instead. Gets the smallest integral value not less than num. Example cell (node table, num col, num row) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Example cellrc (obj object, num row, num col) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Gets a reference to the table's cell. Example double val = getnodenum(cellrc(reftable(\"MyTable\"),2,3)); cellrowcolumn (node table, num row, num col) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example centerobject (obj object, num centerportnum) Deprecated, use Object.centerObjects[] Description This command is deprecated. Use Object . centerObjects [] instead. Reference the object connected to an object's center port. Example changeconveyorspeed (obj conveyor, num newspeed ) Deprecated, use conveyor.targetSpeed Description This command is deprecated. Legacy conveyors are no longer supported. Use Conveyor . targetSpeed instead. Changes the speed of the conveyor to newspeed. Example changeconveyorspeed(current, 4); This example changes the conveyor's speed to 4. changetask (obj tasksequence, num taskrank, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Dynamically change a task in tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. This command lets you change a task dynamically. For example, if you want an operator to travel to object B instead of traveling to object A, but a task has already been created for him to travel to object A, you can use this command to change the task. The first parameter (tasksequence) specifies the tasksequence containing the task. The second parameter (taskrank) specifies the rank of the task in the tasksequence. All other parameters are the same as for the inserttask command. This command should only be executed if the task is not the currently active task in the task sequence! Example changetask(gettasksequence(current, 0), 4, TASKTYPE_TRAVEL, current.centerObjects[5]); This example changes the fourth task in the current object's active task sequence to a travel task to travel to the object connected to the 5th center port of the current object. clearconsole () Clears the output console Description This command clears the output console if it is open. The output console is where output from the pt(), pf(), and pr() commands is printed. Example if (v_printerror == 1) { clearconsole(); pt(\"An Error occurred\"); } This clears the output console and prints a simple error message to it if the variable called printerror is equal to 1. clearcontents (node thenode) Deprecated, use treenode.subnodes.clear() Description This command is deprecated. Use treenode . subnodes .clear() instead. Destroys all of the objects/nodes under the node. Example clearfullhistory (int resetuniqueid) Deprecated Description This command is deprecated. Deletes all of the data that has been collected by the Full History system. If resetuniqueid is 1, then the unique IDs of the flowitems that are created after this command is called will being again at 1. Typically, this parameter should be 0, as that will continue numbering so that old flowitems are not confused with new flowitems. Example clearfullhistory(0); clearglobaltable (str/node/num table) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example closeinput (obj object) Deprecated, use Object.input.close() Description This command is deprecated. Use Object . input .close() instead. This command blocks the input of the object. Only the input ports themselves, or the input in general needs to be closed to block entry. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the input ports (squares) for the object, signifying the input ports are blocked. Individual ports may still be open and drawn in green, but entry to the object is still blocked because of the red bar. Compare this command with stopinput(). Example if (current.subnodes.length == getvarnum(current,\"maxcontent\") closeinput(current); This blocks the input ports of current when it has too many objects inside it. closeoutput (obj object) Deprecated, use Object.output.close() Description This command is deprecated. Use Object . output .close() instead. This command blocks the output of the object. Only the output ports themselves, or the output in general needs to be closed to block the exit. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the output ports (squares) for the object, signifying the output ports are blocked. Individual ports may still be open and drawn in green, but exit from the object is still blocked because of the red bar. Compare this command with stopoutput(). Example if (current.subnodes.length == current.mincontent) closeoutput(current); This blocks the output ports of current, if current has too few objects inside it. coloraqua (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . aqua instead. Sets the color of object to aqua. Example colorarray (obj object, num colornumber) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . byNumber () instead. Sets the color of object based on a color index. Example colorblack (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . black instead. Sets an object's color to black. Example colorblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . blue instead. Sets the color of object to blue. Example colorbrown (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . brown instead. Sets the color of object to brown. Example colorgray (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . gray instead. Sets the color of object to gray. Example colorgreen (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . green instead. Sets the color of object to green. Example colorlightblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lightBlue instead. Sets the color of object to lightblue. Example colorlime (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lime instead. Sets the color of object to lime. Example colororange (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . orange instead. Sets the color of object to orange. Example colorpink (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . pink instead. Sets the color of object to pink. Example colorpurple (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . purple instead. Sets the color of object to purple. Example colorrandom (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . random () instead. Sets the color of object to a random color. Example colorred (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . red instead. Sets the color of object to red. Example colorrgb (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the color of an object using red, green and blue components. Example colorsilver (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . silver instead. Sets the color of object to silver. Example colorteal (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . teal instead. Sets the color of object to teal. Example colorwhite (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . white instead. Sets the color of object to white. Example coloryellow (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . yellow instead. Sets the color of object to yellow. Example comparetext (str text1, str text2[, int ignorecase]) Deprecated, use == operator Description This command is deprecated. Use the == operator instead. myStr == \"Hello\" Test for string equality. Example concat (str text1, str text2 [, str text3, ...]) Deprecated, use + operator Description This command is deprecated. Use the + operator instead. \"a\" + \"b\" + \"c\" Concatenates strings together. Example connect (obj object1, num port1, obj object2, num port2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect ports of two objects. The two objects are connected by checking whether the ports exist on the objects in question and then connecting them. The output port of the first object will be connected to the input of the second object. If the ports do not exist, or are already connected then the command will abort. To connect two objects by automatically adding ports, see the command objectconnect(). Example connect(model().subnodes[2],1,model().subnodes[3],2) containerentry (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example containerexit (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example content (node parent) Deprecated, use treenode.subnodes.length Description This command is deprecated. Use treenode . subnodes .length instead. Gets the number of child nodes in a parent node. Example contentobj (obj container) Deprected, use Object.attrs.length Description This command is deprecated. Use Object . attrs .length instead. Gets the content of the object's attribute sub-tree. Example cos (num angle) Deprecated, use Math.cos(). Description This command is deprecated. Use Math . cos () instead. Gets the cos of an angle in radians. Example count () Description The value of the iterator used with several commands such as repeat(), findmatch(), findmin(), and findmax(). The value of count will depend on which iteration is currently being executed. Example findmax(Table(\"MyTable\").numRows, Table(\"MyTable\")[count][5]) This example returns the maximum value found in column 5, among all the rows of the table MyTable. cppgettoken (obj textblock, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example cppsettoken (obj textblock, num tokenindex, str insertiontext) Deprecated, do not use Description This command is deprecated. Do not use. Example createcopy (node thenode, node container [, num samename, num inobject, num cached, num replace]) Copies thenode into the specified container Description This command is deprecated. Use treenode . copy () instead. Copy thenode into the node specified as container. This command is different from createinstance() in that it does not attempt to establish any links between thenode and any class. If an instantiation is required, use createinstance() instead. If samename is 1, the copy will have the same name as thenode. If samename is 0, the newly created node's name will be thenode's name with a random number added to the end. If inobject is 1, the copy will be created in the object data portion of the container. If the container does not have object data, the command does nothing. If cached is 1, a pre-cached version of the node will be copied. This is generally faster. If replace is 1, the copy will overwrite container, instead of being placed inside it. If those parameters are not specified, they default to 0. Example createcopy(Model.find(\"Tools/FlowItemBin/7/1\"), current) createdelaytask (obj dispatcher, num delaytime, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to pause its current task for delaytime seconds. During the time that it is delayed, it will be in the state specified by state. The task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createdelaytask(current.centerObjects[1], 25, SCHEDULED_DOWN, 1, PREEMPT_NOT); createemptytasksequence (obj dispatcher, num priority, num preempting) Creates a new task sequence in the dispatcher's queue and returns a reference to it Description This command is deprecated. Use TaskSequence.create() instead. Creates an empty task sequence in the dispatcher's tasksequence queue. Tasks should be added to this task sequence once it is created, using the inserttask command. The task sequence is dispatched with the dispatchtasksequence command. This command returns a pointer to the newly created tasksequence node. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createemptytasksequence(current.centerObjects[1], 1, PREEMPT_NOT); createglobaltasksequence (str name, obj dispatcher [, obj dp1, obj dp2, obj dp3, obj dp4, obj dp5]) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. Creates an instance of the named global task sequence with the given dynamic parameters 1-5 and dispatches it to the specified dispatcher. Returns a reference to the created global task sequence. Note that this does not dispatch the task sequence. You need to dispatch it yourself using dispatchtasksequence(). Example treenode ts = createglobaltasksequence(\"GlobalTS\", current.centerObjects[1]) dispatchtasksequence(ts) createinstance (obj class, obj location) Description This command is deprecated. Use Object . create () instead. For developer use. This command creates an instance of the class specified as class and places it in the object specified as location. The instance will be given a name that is the name of the class followed by a number. The instance will have all of the variables and attributes of class and it's superclasses. Nodes in the behavior node will not be copied into the instance, as they apply to all instances of the class. The object passed as class should be in the library. Generally, location is the model. The library and the model can be easily referenced using the library() and model() commands. Example createinstance(library().find(\"?Source\"), model()); This creates an instance of the Source class in the model. createloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to load flowitem. The object will not travel to the flowitem before loading it. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createsendmessagetask (obj taskexecuter, obj receiver, num priority, num preempting , num param1, num param2, num param3) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specifies as dispatcher that causes it to send a message to the object specified as receiver. The OnMessage trigger of the receiving object will be executed when the message is sent. The values passed as param1, param2, and param3 will be available in the trigger function using the param() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createsendmessagetask(current, current.centerObjects[1],1,PREEMPT_NOT,5, 6, 7); createstandardtask (obj taskexecuter, obj origin, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to origin, load flowitem, travel to destination and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createstandardtaskcurrent.centerObjects[1],current.centerObjects[2],current.centerObjects[3],item, 1, PREEMPT_NOT); createtravelloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and load flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createtraveltask (obj taskexecuter, obj destination, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination. It will travel until its front edge reaches destination. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltask( current.centerObjects[1], current.centerObjects[2], 1, PREEMPT_NOT); createtraveltolocandwaittask (obj taskexecuter, num relativeloc, num x, num y, num z, num endspeed, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. Once the object reaches that point, it will wait in the state specified as state until an endwaittask() command is issued to it. For a list of legal states, see setstate(). If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltolocandwaittask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, STATE_IDLE, 1, PREEMPT_NOT); createtraveltoloctask (obj dispatcher, num relativeloc, num x, num y, num z, num endspeed, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltoloctask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, 1, PREEMPT_NOT); createtravelunloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createunloadtask (obj dispatcher, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to unload flowitem into the object specified by destination. The object will not travel to the location before unloading. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createwaittask (obj taskexecuter, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specified as dispatcher that causes the object to not perform new task sequences that it is given until it has been released. The object can be released with the endwaittask() command. The object will be in the state specified by state while it is waiting. For a list of possible states, see setstate() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createwaittask(current.centerObjects[1], STATE_IDLE, 1, PREEMPT_NOT); current <no parentheses> Description This command is deprecated. This should not be used as a special command with the setcurrent command anymore. Instead, declare a treenode variable type as current, then use current in your code as any other variable type. Example treenode current = model().subnodes[3]; pt(current.name); This sets the object that is ranked 3 in the model to current and prints its name to the output console. dbchangetable (str tablename) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbchangetable(\"Inventory\"); This closes the currently open table and opens a table called Inventory. dbclose () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (current.donegatheringdata == 1) dbclose(); If the label donegatheringdata on current is set to 1, the current database is closed. dbexportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Description This command is deprecated. Use Database.Connection instead. The starting row and column in the table are specified as well as how many rows and columns to export. Example dbexportnode(so(),1,1,4,5); dbexporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbexportnode(\"MyTable4\",2,2,3,3); dbgetfieldname (num column) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string ColName = dbgetfieldname(1); This sets ColName to the name of the first column in the current database. dbgetmetrics () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgetmetrics() dbgetmode () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (dbgetmode() != DBMODE_CLOSED) ColName = dbgetfieldname(1); If the database is open, ColName is set to the name of the first column in the database. dbgetnumcols () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumcols(); x++) Table(\"MyTable\")[1][x] = stringtonum(dbgettablecell(1,x)); This copies the values from a column in the database to a column in a GlobalTable. dbgetnumrows () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumrows(); x++) Table(\"MyTable\")[x][1] = stringtonum(dbgettablecell(x,1)); This copies the values from a row in the database to a row in a GlobalTable. dbgettablecell (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double tablevalue = stringtonum(dbgettablecell(1,1)); This sets tablevalue to the number that is stored in the first row and first column of the database. dbgettablenum (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double val = dbgettablenum(2,3); dbgettablestr (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string val = dbgettablenum(2,3); dbimportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(so(),1,1,4,5); dbimporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(\"MyTable4\",2,2,3,3); dbopen (str databasename, str command {SQL string or Tablename}, num usetable [, num showlogin]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbopen(\"itemdrive\",\"timetable\",1); This opens a database with the alias \"itemdrive\" and opens the table called \"timetable\" in Table mode. dbopen(\"warehouse\",\"select * from inventory\",0); This opens a database with the alias \"warehouse\" and performs a SQL query on it. The database is open in SQL mode. dbsettablecell (num row, num col, str value) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<= model().subnodes.length; x++) dbsettablecell(x,1,model().subnodes[x].name); This places the names of all of the objects in the model into the first column of the current database. dbsettablenum (num row, num col, num val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsettablenum(2,3,56.5); dbsettablestr (num row, num col, str val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgettablestr(1,1,\"John\"); dbsqlquery (str query[, num forwardOnlyCursor]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsqlquery(\"select processtime from timetable where type='1'\"); This returns a new table based on the SQL query passed. dbsqlquery(\"update timetable set processtime=type*2\"); This updates the database based on the query passed. dbusername (str username, str password) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbusername(\"user1\",\"abc123XYZ\"); This sets the username to \"user1\" and the password to \"abc123XYZ\". These values will be used to access a database the next time dbopen() is called. dbusername(\"\",\"\"); This clears out the last set username and password. The next time dbopen() is called, the database will be accessed without a username or password. dbviewtable () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbviewtable(); dbwritechanges () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbwritechanges() defaultdragconnection (obj fromobject, obj toobject, char characterpressed) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Either connects or disconnects ports between fromobject and toobject according to the specified characterpressed. This command mimics the keyboard and mouse combinations used to connect/disconnect object ports. For instance an 'A' would be as if the letter \"A\" were held down on the keyboard while click-dragging from the fromobject to the toobject. For 'A' and 'Q' it connects and disconnects output ports to input ports. For 'S' and 'W' it connects and disconnects central ports. Can only be used in C++, not flexscript. Example defaultdragconnection(model().subnodes[count], model().subnodes[2], 'A') degreestoradians (num degrees) Deprecated, use Math.radians() Description This command is deprecated. Use Math . radians () instead. Convert degrees to radians. Example deletetablecol (str/num/node table, num column) Deprecated, use Table.deleteCol() Description This command is deprecated. Use Table . deleteCol (). instead. Removes a column from a table. Example deletetablerow (str/num/node table, num row) Deprecated, use Table.deleteRow() Description This command is deprecated. Use Table . deleteRow () instead. Removes a row from a table. Example dellabel (obj object, str/num label) Deprecated, use treenode.labels[\"LabelName\"].destroy() Description This command is deprecated. Use treenode . labels [\"LableName\"]. destroy () instead. Deletes the specified label from the node called \"labels\" on the specified object. The specified label can either be the labelname as a string or the label's rank as a number. If the label does not exist in that node, this command does nothing. Example dellabel(current,\"MyLabel\") destroyobject (node thenode) Deprecated, use treenode.destroy() Description This command is deprecated. Use treenode . destroy () instead. Destroys thenode. Example diffsign (num value1, num value2) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Example dispatchtasksequence (obj tasksequence) Dispatches the task sequence, initiating handling/execution of the task sequence Description This command is deprecated. Use TaskSequence.dispatch() instead. Tells the dispatcher/taskexecuter in which the specified task sequence resides to handle that task sequence. Users should create the task sequence using the createemptytasksequence command, then add tasks using the inserttask command, then cause the task sequence to be handled using the dispatchtasksequence command. Example dispatchtasksequence(newtasksequence); div (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use the / operator instead. Division of value1 by value2. If value2 is zero, the calculation is aborted and zero is returned. Example div(10,2) divide (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use / operator instead. This is an alias for div(). Example divide(10,2) dumpquery (node dumpNode[, num asTable]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Dumps the full result table for the last call to query() into a node. If asTable is 1, it will dump the result as table data. If asTable is 0, it will dump it as bundle data. Example enablefullhistory (num on/off) Deprecated Description This command is deprecated. Turns Full History collection on and off. If the parameter passed in is 1, Full History will be turned on. If it is 0, it will be turned off. This command should not be called directly. Instead, use the Enable Full History menu option to turn Full History on or off. Example enablefullhistory(1); // Turns Full History collection on endwaittask (obj taskexecuter) Deprecated, use Process Flow or freeoperators() Description This command is deprecated. Use Process Flow instead or the freeoperators() command instead. This command releases the object specified as dispatcher from a wait task issued by the createwaittask(). Once the object is released, it will return to the state that it was previously in, and it will begin to perform any task sequences that are in its tasksequence queue. Example endwaittask(current.centerObjects[1]); eq (num/node value1, num/node value2) Deprecated, use the == operator Description This command is deprecated. Use the == operator instead.. Example excelexportnode (node table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelexporttable() Description This command is deprecated. Use excelexporttable() instead. Example excelexportnode(reftable(\"Table1\"),1,1,5,3); excelimportnode (obj node, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelimporttable() Description This command is deprecated. Use excelimporttable() instead Example excelimportnode(so(),1,1,5,3); excelmacro (str macro) Deprecated Description This command is deprecated. This command allows the user to send an Excel 4.0 macro command to Excel. This language is no longer maintained by Microsoft and may be removed from future versions of Excel. Example excelmacro(\"select(\\\"r1c1:r5c5\\\")\"); This selects the section of the workbook beginning at row 1, column 1 to row 5, column 5. excelrangeread (str rangename[treenode target], num row, num col[, num numRows, num numCols, num flags]) Reads an Excel range and dumps it to a treenode Description This function is overloaded so that it has two functions depending on which arguments you pass in. The first (where you pass in a string) is deprecated. Use excelrangereadnum() and excelrangereadstr() instead. The second (where you pass in a treenode) will read a range in Excel and assign all of the data in that range to the target treenode. If the treenode has bundle data, the excel data will be set on the bundle. Otherwise, subnodes will be inserted under the target treenode that will have the Excel data set on them as either string or number data, in the same format as Global Tables. The origin of the range is specified by the row and col passed in, and the second pair of numbers will specify the size of the range. If 0 is passed in for any one of these, Flexsim will automatically choose the boundary in that direction of the Excel range that has data. Flags can be passed in to change exactly what is read from Excel. Those flags are EXCEL_DATA_AUTOMATIC, EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, EXCEL_DATE_AS_NUM, EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_DATA_AUTOMATIC will assign string or number data based on what the datatype of the Excel cell is. This is the default behavior. EXCEL_DATA_NUMBER will force all Excel data to be read as a number. EXCEL_DATA_STRING will force all Excel data to be read as a string. EXCEL_DATE_AS_NUM will read any Excel dates as numbers readable by Flexsim as dates. Otherwise, the data will come in as a string. EXCEL_USE_COLUMNHEADERS will take the first row of data and use it as names for the table columns instead of data. EXCEL_USE_ROWHEADERS will take the first column of data and use it as names for the table rows instead of data. Example treenode myTable = node (\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangeread(myTable, 1, 1, 5, 0, EXCEL_DATA_AUTOMATIC | EXCEL_USE_COLUMNHEADERS); This will read data from the active sheet starting at cell A1. It will read the first five rows, and read as many columns as have data in them. The first row will be used as names for the columns of the Global Table we're writing to. Therefore, if the Excel sheet has 10 columns with data in them, a total of 40 nodes will be inserted under the data variable of the Global Table. Each of those nodes will have the datatype of their corresponding Excel cell. excelrangewrite (treenode source, num row, num col, num flags) Reads data from a source table node and writes it to the active Excel sheet Description This function will write all the of the data from the source table node to the active Excel sheet. If the treenode has bundle data, this will read the bundle and write it to the sheet, otherwise it will look for child nodes with data on them, like a Global Table. The row and col passed in specify where on the Excel sheet to begin writing the data. All of the data on the source node will always be written. Flags can be passed in to change the use of headers. Those flags are EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_USE_COLUMNHEADERS will write any existing column headers as a separate row in the Excel table. EXCEL_USE_ROWHEADERS will write any existing row headers as a separate column in the Excel table. Example treenode myTable = node(\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangewrite(myTable, 1, 1, EXCEL_USE_ROWHEADERS | EXCEL_USE_COLUMNHEADERS); This will take all of the data in GlobalTable1 and write it to the active Excel sheet, starting at cell A1. Before it writes any of the actual data, there will be a row of column headers and column of row headers. excelread (num row, num col) Deprecated, use excelreadnum(), excelreadstr() or excelreadcell() Description This command is deprecated. Use excelreadnum(), excelreadstr() or excelreadcell() instead. Example excelwrite (str data, num row, num col) Deprecated, use excelwritenum() and excelwritestr() Description This command is deprecated. Use excelwritenum() and excelwritestr() instead. Example executetablecell (str/node/num table, num row, num column) Deprecated, use Table.executeCell() or the Table's [] operators Description This command is deprecated. Use Table . executeCell () or the Table class's [] operators instead. Executes the table cell's text as Flexscript. Example exp (num value) Deprecated, use Math.exp() Description This command is deprecated. Use Math . exp () instead. Returns (e ^ value) where e is 2.7183. Example exportfullhistory ([str filename, num scenario, num replication]) Deprecated Description This command is deprecated. Writes to a database (.mdb file) the Full History data that was collected during a run. If a file name is passed to this command, that name willbe used for the database. If no file name is passed in, the user will be prompted for a file to save the data to. If the file (either passed in or selected from a dialog) does not exist, it will be created. Example exportfullhistory(\"myrundata.mdb\"); fabs (num value) Deprecated, use Math.fabs() Description This command is deprecated. Use Math . fabs () instead. Absolute value of the argument. Example factorial (num value) Deprecated, use Math.factorial() Description This command is deprecated. Use Math . factorial () instead. Factorial of value. Example familycreate (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Create a new family (a list of nodes used for organizing relational information). Example familycreate(item,\"family1\") familydelete (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Delete a family. Example familydelete(item,\"family1\") familymember (obj familycontainer, str name, num index) Description This command is deprecated. Use the Group class instead. Returns a pointer to a member of the specified family. Example familymember(item,\"family1\",2) familymemberadd (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Adds a new family member to the specified familycontainer. Example familymemberadd(item,\"family1\",item.subnodes[1]) familymemberdel (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Removes a family member from the specified familycontainer. Example familymemberdel(item,\"family1\",item.subnodes[2]) familymemberqty (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Returns the size of the specified family. Example familymemberqty(item,\"family1\") fillarray (array thearray, num/treenode/string val1[, num/treenode/string val2, ...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class to construct the array using an array literal: Array arr = [1, 2, 3]; Fill a local array with values. Example findmatch (num nr, num matchexpression[, returnexpression = count, num reverseorder = 0]) Description Performs a matching test a defined number of times, and when a match is found, returns a user-definable value associated with that match. Within the match expression and return expression, \"count\" can be used to determine which iteration your are on in the check. This can be used to search in a list of things for a matching item or criterion. If returnexpression is not included in the call, then findmatch() will return the count associated with the matching expression. If no matches are found, findmatch() will return 0. If reverseorder is 1, then it will go backwards, assigning count to nr first, then nr - 1, etc. down to 1. If returnexpression is left out, then findmatch will return the count associated with the found match. Example int portNr = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5); This example will return the output port number that corresponds to the first object it finds connected to current's output ports that has a content less than 5. treenode object = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5, current.outObjects[count]); This example is similar to the previous example except it will return the object itself instead of the associated port number. int item2Rank = findmatch(current.subnodes.length, current.subnodes[count].type == 2); This example will return the rank number of the first item found in current's queue that has an item type of 2. findmax (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the maximum value found, or a user-definable return value associated with that maximum value. Within the value expression, return expression and criterion, \"count\" can be used to determine which iteration you are on in the check. If the return expression is not defined, the maximum value found will be returned. Additionally, you can specify a criterion to filter out values as invalid. If criterion is defined and nothing meets the criterion, 0 will be returned. Example double latestCreation = findmax(current.subnodes.length, getcreationtime(current.subnodes[count])); This example will return the maximum creation time of all items in current. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length; This example will return the input port number associated with the object with the largest queue of items. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length, count, getitemstate(current.inObjects[count].first) == FR_STATE_READY); This example is the same as the previous example, but additionally in includes a criterion that the first item in the upstream object must also have been released. findmin (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the minimum value found, or a user-definable return value associated with that minimum value. findmin() is the same as findmax() except it finds the minimum value instead of the maximum value. For more information, refer to the documentation for findmax(). Example Refer to findmax() first (node container) Deprecated, use treenode.first Description This command is deprecated. Use treenode . first instead. Reference a parent node's first child node. Example floor (num num) Deprecated, use Math.floor() Description This command is deprecated. Use Math . floor () instead. Gets the largest integral value not greater than num. Example fmod (num value1, num value2) Deprecated, use Math.fmod() Description This command is deprecated. Use Math . fmod () instead. Remainder of value1/value2 as a double. Example forobjecthighlightedin (obj view) { } Description This command is deprecated. Use selectedobject() instead. Iterate on the node that is both selected (red) and highlighted (yellow) in the selected view. Reference the selected and highlighted node by using \"a\" within the loop. Example forobjecthighlightedin(sv()) { pt(a.name); pr(); } This prints to the outputconsole the name of the selected, highlighted node in the first level of the model. forobjectlayerunder (node container) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the tree layer directly under the node specified as container. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectlayerunder() command can only be used in flexscript, not C++. Example forobjectlayerunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the first level of the model. forobjectsbefore (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value less than or equal to the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbefore() command can only be used in flexscript, not C++. Example forobjectsbefore(model.subnodes[5])) { pt(a.name); pr(); } This prints to the outputconsole the name of the first 5 objects in the model. forobjectsbehind (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value greater than the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbehind() command can only be used in flexscript, not C++. Example forobjectsbehind(model.subnodes[5]) { pt(a.name); pr(); } This prints to the outputconsole the name of the objects in the model starting with the sixth one. forobjectselectionset (node container) { } Description This command is deprecated. Instead use: for(int i =1; i<= container.subnodes.length; i++) { if(switch_selected(container.subnodes[i])) { pt(container.subnodes[i].name); pr(); } } The block following the command will be iterated upon once for each selected object in the container. The value of the \"a\" command will return the pointer to the object being iterated upon. This command is not available in C++. Example forobjectselectionset(library()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object currently selected in the library tree. frac (num value) Deprecated, use Math.frac() Description This command is deprecated. Use Math . frac () instead. Gets the decimal part of value. Example ge (num value1, num value2) Deprecated, use the >= operator Description This command is deprecated. Use the >= operator instead. Example get (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getcolorcomponent (obj object, num index) Deprecated, use the Color class Description This command is deprecated. Use Color . r or Color . g or Color . b or Color . a instead. Gets the rgb color component of object Example getdatatype (thing) Deprecated, use treenode.dataType Description This command is deprecated. Use treenode . dataType instead. Gets the datatype of a node Example getdatatype(so()) getinput (obj involved) Deprecated, use Object.stats.input.value Description This command is deprecated. Use Object . stats .input.value instead. Returns the input statistic of the involved object. Example double inval = getinput(current.centerObjects[1]); getitemtype (obj object) Deprecated, use labels Description This command is deprecated. Use labels instead. Returns the itemtype value of a flow item. Example getitemtype(so()) getlabel (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the value of an object's label. Example getlabelnum (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the number value of an object's label. Example getlabelstr (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the string value of an object's label Example getmodelunitnum (num querytype) Description This command is deprecated. Use getmodelunit() instead. Example getmodelunitstr (num querytype) Description This command is deprecated. Use getmodelunit() instead. Returns a name or abbreviation of the current model's units. Example getmoverecord (num record) Deprecated Description This command is deprecated. Returns a movement record that has been recorded for the Full History Report. A movement record is created every time a flowitem moves from one object to another if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a MoveRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnummoverecords(). getmoverecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the movement record that is passed in as the first parameter to the function. This record is the return value from a call to getmoverecord(). The value passed to this function as the second parameter indicates which value from the movement record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The ItemID of the flowitem whose movement is recorded by the record. 2 = The time the flowitem moved. 3 = The object that the flowitem moved from. This is returned as an int and should be converted to a treenode using tonode(). 4 = The object that the flowitem moved to. This is returned as an int and should be converted to a treenode using tonode(); 5 = The itemtype of the flowitem at the time it moved. Example See the example for getnummoverecords(). getname (node thenode) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnodename (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnodenum (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getnodestr (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getnroftasks (obj tasksequence) Gets the number of uncompleted tasks in the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the number of tasks that still need to be completed in the tasksequence (including the current task). Example if(getnroftasks(mytasksequence) > 5) pt(\"There are more than 5 tasks in the tasksequence queue.\"); getnummoverecords () Deprecated Description This command is deprecated. Returns the number of movement records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the move records that have been recorded for (int rec = 1; rec <= getnummoverecords(); rec++) { int record = getmoverecord(rec); pd(getmoverecordvalue(record,0)); pt(\" \"); pd(getmoverecordvalue(record,1)); pt(\" \"); pf(getmoverecordvalue(record,2)); pt(\" \"); pt(getmoverecordvalue(record,3).name); pt(\" \"); pt(getmoverecordvalue(record,4).name); pt(\" \"); pd(getmoverecordvalue(record,5)); pt(\" \"); } getnumstaterecords () Deprecated Description This command is deprecated. Returns the number of state change records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the state change records that have been recorded for (int rec = 1; rec <= getnumstaterecords(); rec++) { int record = getstaterecord(rec); pd(getstaterecordvalue(record,0)); pt(\" \"); pf(getstaterecordvalue(record,1)); pt(\" \"); pd(getstaterecordvalue(record,2)); pt(\" \"); pt(getstaterecordvalue(record,3).name); pr(); } getobjectimageindex (obj object) Deprecated, do not use. Description This command is deprecated. Do not use. Returns the index number of the bmp or jpeg image currently assigned to the base of the object. Example getobjectimageindex(item); getoutput (obj involved) Deprecated, use Object.stats.output.value Description This command is deprecated. Use Object . stats .output.value instead. Returns the output statistic of the involved object. Example double outval = getoutput(current.centerObjects[1]); getquerycolcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the number of columns in the result table for the last call to query(). Example getquerymatchcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the total number of rows in the result table for the last call to query() Example getquerymatchtablerow (str/num table, num matchRow) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the source table's row number associated with a matched row in the last query() result. table - If a string, it is the name of the table as defined in the FROM statement. If you used an alias, it should be the table's alias. If a number, it should be the 1-based index of the table in the FROM statement. If there is only one table in the query, this should be 1. For multiple tables, the first table in the FROM is 1, the second is 2, etc. matchRow - The 1-based row of the result table of the query. Note that this command will not work if you use aggregator functions such as MIN(), MAX(), AVG(), etc. in the SELECT clause. When aggregators are used, this command just returns the number of rows in the source table. Example getqueryvalue (num row, num/str col) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns a value in the result table for the last call to query() row - The 1-based row number of the result table col - The 1-based column number of the result table, or the name of the result column. If you have defined aliases in the select statement, the column name should be the alias. Example getrank (node thenode) Deprecated, use treenode.rank Description This command is deprecated. Use treenode . rank instead. Gets the rank of a child node in its parent's sub-tree. Example gets (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getstatenum (obj object [, num stateprofilenr]) Deprecated, use Object.stats.state().value Description This command is deprecated. Use Object . stats .state().value instead. Returns the state of an object in numeric form. Example getstatenum(current); getstaterecord (num record) Deprecated Description This command is deprecated. Returns a state change record that has been recorded for the Full History Report. A state change record is created every time an object changes state if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a StateRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnumstaterecords(). getstaterecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the state change record that is passed in as the first parameter to the function. This record is the return value from a call to getstaterecord(). The value passed to this function as the second parameter indicates which value from the state change record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The time of the state change. 2 = The state that the object changed to. 3 = The object that changed state. This is returned as an int and should be converted to a treenode using tonode(). Example See the example for getnumstaterecords(). getstatestr (obj object) Deprecated, use Object.stats.state().valueString Description This command is deprecated. Use Object . stats .state().valueString instead. Returns the state of an object as a text string. Example getstatestr(current); gettablecell (str/node/num table, num row, num column) Deprecated, use Table.cell Description This command is deprecated. Use Table . cell (). Example gettablecols (str/node/num table) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Gets the number of columns in the table. Example gettableheader (string/num/node table, num row/col, num rowcolnr) Deprecated, use Table.getColHeader() or Table.getRowHeader() Description This command is deprecated. Use Table . getColHeader () or Table . getRowHeader () instead. Gets the value of the header field of a table. Example gettablenum (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the number value in a table cell. Example gettablerows (str/node/num table) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Gets the number of rows in the table. Example gettablestr (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the text value in a table cell. Example gettaskinvolved (obj tasksequence, num taskrank, num involvednum) Gets a reference to the first or second involved object of the task of the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task classes instead. Returns a reference to either the first or second involved object for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which involved object it is (1 or 2) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the involved of the object's currently active task. Example treenode loaditem = getinvolved(gettasksequence(current.centerObjects[1], 0), 2, 1); gettasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a task sequence Description This command is deprecated. Use the Dispatcher and TaskExecuter class methods and properties instead. Returns a reference to the task sequence that has the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to its currently active task sequence. Example treenode mytasksequence = gettasksequence(current.centerObjects[1], 5); gettasksequencequeue (obj dispatcher) Gets a reference to the dispatcher's tasksequence queue Description This command is deprecated. Use the Dispatcher class properties instead. Returns a reference to the specified dispatcher's task sequence queue. Example treenode tsqueue = gettasksequencequeue(current.centerObjects[1]); gettaskstate (obj tasksequence, num taskrank) Gets the state of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Gets the state of the task at rank taskrank of tasksequence. The following are task states: TASKSTATE_UNFINISHED TASKSTATE_ACTIVE TASKSTATE_FINISHED TASKSTATE_COORDINATED Example if(gettaskstate(gettasksequence(current.centerObjects[1], 0), 2) == TASKSTATE_ACTIVE)... gettasktype (obj tasksequence, num taskrank) Gets the task type of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the task type for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task type of the object's currently active task. Example if(gettasktype(gettasksequence(current.centerObjects[1], 0), 2) == TASKTYPE_LOAD)... gettaskvariable (obj tasksequence, num taskrank, num variablenum) Gets the tasksequence variable for the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns a reference to one of the four task variables for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which task variable it is (1 - 4) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task variable of the object's currently active task. Example double myvar = gettaskvariable(gettasksequence(current.centerObjects[1], 0), 2, 1); gettotalnroftasks (obj tasksequence) Gets the total number of tasks that were ever added to the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the total number of tasks that were ever added to the tasksequence. Example gettotalnroftasks(mytasksequence) gettrackedvariable (str/node trackedvar [, num valtype] ) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example getvartype (var) Deprecated, use Variant.type Description This command is deprecated. Use Variant . type instead. Example getvartype(myVar) glBegin (num primitive) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glColor3d (num red {0-1}, num green {0-1}, num blue {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glColor4d (num red {0-1}, num green {0-1}, num blue {0-1}, num alpha {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glDisable (num setting) Deprecated, use fglDisable() Description This command is deprecated. Use fglDisable() instead. Example glEnable (num setting) Deprecated, use fglEnable() Description This command is deprecated. Use fglEnable() instead. Example glEnd () Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glLoadIdentity () Deprecated, use fglLoadIdentity() Description This command is deprecated. Use fglLoadIdentity() instead. Example glMatrixMode (num mode) Deprecated, use fglMatrixMode() Description This command is deprecated. Use fglMatrixMode() instead. Example glNormal3d (num x, num y, num z) Deprecated, use fglNormal() Description This command is deprecated. Use fglNormal() instead. Example glNormal3d(1,0,0); globallist (str listName) Deprecated, use List(\"GlobalListName\") Description This command is deprecated. Use List (\"GlobalListName\") instead. References a global list by name. Example glPopAttrib () Deprecated, do not use Description This command is deprecated. Do not use. Example glPopMatrix () Deprecated, use fglPopMatrix() Description This command is deprecated. Use fglPopMatrix() instead. Example glPushAttrib (num attribsetting) Deprecated, do not use Description This command is deprecated. Do not use. Example glPushMatrix () Deprecated, use fglPushMatrix() Description This command is deprecated. Use fglPushMatrix() instead. Example glRotated (num degrees, num x, num y, num z) Deprecated, use fglRotate() Description This command is deprecated. Use fglRotate() instead. Example glScaled (num x, num y, num z) Deprecated, use fglScale() Description This command is deprecated. Use fglScale() instead. Example glTexCoord2d (num x 0-1, num y 0-1) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glTranslated (num x, num y, num z) Deprecated, use fglTranslate() Description This command is deprecated. Use fglTranslate() instead. Example glVertex3d (num x, num y, num z) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example groupaddmember (str group, obj member) Deprecated, use Group.addMember() Description This command is deprecated. Use Group . addMember () instead. Adds an object to a group. Example groupmember (str group, num member) Deprecated, use Group[] Description This command is deprecated. Use Group [] instead. Gets a reference to a group member. Example groupnummembers (str group) Deprecated, use Group.length() Description This command is deprecated. Use Group . length instead. Gets the number of members in a group. Example groupremovemember (str group, num/obj member) Deprecated, use Group.removeMember() Description This command is deprecated. Use Group . removeMember () instead. Removes an object from a group. Example gt (num value1, num value2) Deprecated, use the > operator Description This command is deprecated. Use the > operator instead.. Example helpcommands (node destnode, num what, str command) Description For developer use. Used to get information about a command. Enter the command name in parameter 3. The return value will be copied into the string data of destnode. \"what\" defines what information is needed, as follows: 1 - returns the xml fragment string that contains the documentation for that command Example helpcommands( hidelabel (obj object[, num off/on]) Deprecated, use switch_hidelabel() Description This command is deprecated. Use switch_hidelabel() instead. This command sets the specified object to show or hide its name and basic statistics on the screen. A value of 1 is show and a value of 0 is hide. If the name and statistics are hidden for an object, they will not be visible in any view window. View windows also have an attribute that controls this connector display of all objects in the view. Example hidelabel(current,0); This sets the object referenced by current so that its name and statistics will not be drawn. hideports (obj object[, num off/on]) Deprecated, use switch_hideconnectors() Description This command is deprecated. Use switch_hideconnectors() instead. This command sets the specified object to show or hide its ports and connections. A value of 1 is show and a value of 0 is hide. If the ports and connections are hidden, they will not be visible in any view window. Example hideports(current,1); This sets the current object to show its ports and connections in all view windows. inc (node thenode, num amount) Deprecated, use += operator Description This command is deprecated. Use += operator instead. myNode.value += 2; Increments the value of a node by a defined amount. Example inc(current.mylabel,1) inittrackedvariable (node theNode, num type[, num startValue, num flags]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example inobject (obj object, num inputportnum) Deprecated, use Object.inObjects[] Description This command is deprecated. Use Object . inObjects [] instead. Reference the upstream object connected to a downstream object's input port. Example inserttask (obj tasksequence, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Inserts a new task to the task sequence Description This command is deprecated. Use TaskSequence.addTask() instead. Inserts a task into the specified tasksequence of the specified type. Depending on the task type, the remaining parameters will have a different meaning. Refer to the Task Type Quick Reference guide in the Users Manual for an explanation of the parameters associated with each task type. Example inserttask(ts, TASKTYPE_TRAVEL, current, NULL); installpackage (str path+filename) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. Install a service pack (.fpk). Example installpackage(\"C:/mypak.fpk\") item <no parentheses> Description This command is deprecated. This should not be used as a special command with the setitem command anymore. Instead, declare a treenode variable type as item, then use item in your code as any other variable type. Example treenode item = model().subnodes[3]; pt(item.name); This sets the object that is ranked 3 in the model to item and prints its name to the output console. iterate (num start, num end, num step) {} Deprecated, use for() or while() commands Description This command is deprecated. Use for() or while() commands instead. Repeatedly execute the following block {} with counter value traversing from start to end being incremented by step. The count command can be used to access the current counter value on each iteration. The return value of count will depend on which iteration is currently being executed. Example iterate(1,9,2) { pd(count);pr(); } Prints the following numbers to the outputconsole: 1,3,5,7,9 label (obj object, str/num label) Deprecated, use treenode.labels[] Description This command is deprecated. Use treenode . labels [] instead. Gets the node reference to an object's label. Example last (node container) Deprecated, use treenode.last Description This command is deprecated. Use treenode . last instead. Reference a parent node's last child node. Example le (num value1, num value2) Deprecated, use the <= operator Description This command is deprecated. Use the <= operator instead. Example listbackorders (obj list[, var partitionId]) Deprecated, use List.backOrders() Description This command is deprecated. Use List . backOrders () instead. References to a list's back orders. Example listentries (obj list[, var partitionId]) Deprecated, use List.entries() Description This command is deprecated. Use List . entries () instead. References to a list's pushed entries. Example listinlist (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of occurrence of value in list. The list, of length qty, is searched and the position in the list of the value val is returned by this function. Example listinlist(5,3,2,1,2,3,4) This returns the index number 4 because 3 is the fourth number in the list of 5 numbers. listmax (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of highest value. The list, of length qty, is searched and the position in the list of the highest value is returned by this function. Example listmax(5,2,1,2,3,4) This returns a 5 because 4 is the largest value and it is fifth in the list of five numbers. listmaximum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Highest value. The list, of length qty, is searched and the value of the highest value is returned by this function. Example listmaximum(5,2,1,2,3,4) This returns a 4 because it is the highest value in the list. listmean (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Average of values. The mean of the values in the list, of length qty, is returned by this function. Example listmean(5,2,1,2,3,4) This returns 2.5. listmin (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of lowest value. The list, of length qty, is searched and the position in the list of the lowest value is returned by this function. Example listmin(5,2,1,2,3,4) This returns 2 because 1 is the lowest value and it is second in the list. listminimum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Lowest value. The list, of length qty, is searched and the value of the lowest value is returned by this function. Example listminimum(5,2,1,2,3,4) This returns 1 because that is the lowest value in the list. listmul (num qty, num val [, num a,...]) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of list. The product of all the values in the list, of length qty, is returned by this function. Example listmul(5,2,1,2,3,4) This returns the value 48. listpull (str/obj list, str/node query, num requestNum [, num requireNum, str/node/num puller, str/node/num partitionId, num flags]) Deprecated, use List.pull() Description This command is deprecated. Use List . pull () instead. Pulls one or more entries from a list. Example listpush (str/obj list [, str/node/num pushVal, str/node/num partitionId, ...]) Deprecated, use List.push() Description This command is deprecated. Use List . push () instead. Pushes an entry onto a list. Example listremove (obj entryOrBackOrder) Deprecated, use List.backOrders()[backOrderNum].remove() or List.entries()[enterNum].remove() Description This command is deprecated. Use List . backOrders ()[backOrderNum].remove() or List . entries ()[entryNum].remove() instead. Removes an entry or back order from its owning list. Example listsub (num qty, num val [, num a,...]) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. Subtraction of list. The list, of length qty, is traversed and the first value has all subsequent values subtracted from it and then is returned by this function. Example listsub(5,2,1,2,3,4) listsum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the + operator instead. Sum of values. The sum of all the values in the list, of length qty, is returned by this function. Example listsum(5,2,1,2,3,4) loadsound (str path+filename) Deprecated, use soundload() Description This command is deprecated. Use soundload() instead. A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. The sound must be a .wav file. Example int applauseindex = loadsound(\"c:/My Music/APPLAUSE.WAV\"); local (num index) Deprecated, use local variables Description This command is deprecated. Use local variables like treenode, int, double, string instead. Gets a reference to an indexed local variable as a treenode. You must use localarray() to define how many local variables are used and what data type they should have. Can only be used in flexscript. Example setnodenum(local(1),4); Sets the 1st variable in the localarray to 4. localarray (num qty[, num datatype]) Deprecated, use Array class Description This command is deprecated. Use the Array class instead. Allocate general purpose local array with the given quantity of local variables. Type can be: 1 = num, 2 = str, 3 = coupling, 4 = obj. May only be used in flexscript. Example localarray(1,4) log (num value) Deprecated, use Math.log() Description This command is deprecated. Use Math . log () instead. Natural Logarithm of value. Example log10 (num value) Deprecated, use Math.log10() Description This command is deprecated. Use Math . log10 () instead. Base-10 Logarithm of value. Example lognormal (num location, num normalmean, num normalstdev[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. lognormal( location, normalmean, normalstdev, stream ) is a continuous probability distribution. Inputs: location : ( - ∞ , ∞ ) normalmean such that ( Math.exp( normalmean ) > 0 ) normalstdev such that ( normalstdev > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( location , ∞ ) mean = location + Math.exp( normalmean + normalstdev² ⁄ 2) variance = Math.exp( 2*normalmean + normalstdev² ) [ Math.exp( normalstdev² ) − 1 ] Probability Density Functions: Possible Applications: Used to model the time to perform some task, and to model quantities that are the product of a large number of other quantities. It can also be used as a rough model in the absence of data. Comments: The probability density for the lognormal distribution takes on shapes similar to gamma( normalstdev, normalmean ) and weibull( normalstdev, normalmean ) densities for normalstdev > 1, but can have a large spike close to x=0 that is often useful. Example lognormalmeanstdev (num mean, num stdev[, num stream]) Returns a random sample from a lognormal distribution Description This command is an alternative to the lognormal2 command, used in the absence of data. You can specify the mean and standard deviation, and the command will calculate from those parameters the proper location, scale, and shape parameters for the lognormal2 command, and return a sample from that distribution. Note that the shape of the distribution is pre-defined to be a bell-shaped curve with a reasonably long right tail. Hence this command isn't as flexible as the lognormal2 command. This command, similar to the triangular distribution, should be used in the absence of data, where you know the mean and standard deviation of the distribution, and you assume that the distribution is right-skewed (it has a longer right tail), but you do not have a real data set to fit to a distribution. Refer to lognormal2 for more information. Relating to the diagram describing the lognormal2 distribution, the lognormalmeanstdev command uses a normalstdev/shape value of 0.75 to define its shape. Note that since the shape of the distribution is hard-set, depending on the mean and standard deviation values, this may return a negative value. Example double cycletime = lognormalmeanstdev(10, 2); This example will return a random value that follows a right-skewed lognormal distribution with a mean of 10 and standard deviation of 2. lt (num value1, num value2) Deprecated, use the < operator Description This command is deprecated. Use the < operator instead. Example main () Deprecated, use maintree() Description This command is deprecated. Use maintree() instead. Get the main tree node. This is one of the two primary databases of FlexSim. Also called the \"Project Tree\". The other primary database is the views tree node also called the \"View Layout Tree\" Example main() makearray (num qty) Deprecated, use the Array class Description This command is deprecated. Use Array (qty) instead. Array array = Array(4); Initializes a local array. Example max (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example maxof (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example min (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2. Example minof (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2 Example module (num type, node libnode) Deprecated Description This command is deprecated. Use the DLL functionality provided with version 4 instead. Used with dll plugins. The type can be: MOD_LOAD (1) MOD_UNLOAD (2) MOD_GETFUNCTION (3) MOD_RUNFUNCTION (4) Example module(MOD_UNLOAD,main.find(\"project/exec/dll/1\")) movetablecol (str/num/node table, num column, num newcolumn) Deprecated, use Table.moveCol() Description This command is deprecated. Use Table . moveCol (). instead. Moves a column of a table to newcolumn. Example movetablerow (str/num/node table, num row, num newrow) Deprecated, use Table.moveRow() Description This command is deprecated. Use Table . moveRow (). instead. Moves a row of a table to newrow. Example movetasksequence (obj tasksequence, obj dispatcher) Moves tasksequence into the dispatcher's tasksequence queue Description This command is deprecated. Use TaskSequence.move() instead. Moves the specified tasksequence into the specified dispatcher's tasksequence queue. WARNING!! This command should never be called on a tasksequence that is already being executed by a TaskExecuter. Example movetasksequence(tasksequence, current.centerObjects[1]); mul (num value1, num value2) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of a and b. This returns the result of the arithmetic expression value1*value2. Example double product = mul(3,4); multisorttable (str/node/num table, num col1[, num col2, num col3, ...]) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by each column (ascending for positive columns, descending for negative columns). Example nametomodelpath (obj node, obj object) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Sets the name of a node to the path of the object relative to the model. Example nametomodelpath(curlistnode, current); ncols (node thenode) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Example ne (num/node value1, num/node value2) Deprecated, use the != operator Description This command is deprecated. Use the != operator instead. Example next (obj object) Deprecated, use treenode.next Description This command is deprecated. Use treenode . next instead. Reference the next sibling of a node. Example node (str relativepath[, obj startnode]) Deprecated, use treenode.find() Description This command is deprecated. Use treenode . find () instead. Reference a node by named path from a root node. Example nodeadddata (node thenode, num type:num/str/ptr/obj) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Add data to thenode, ie DATATYPE_NUMBER. Example nodedeldata (node thenode) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Removes all data from the node. Example nodepoint (node a, node b) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value . instead. Points node a to node b. Example nodetomodelpath (node thenode [, num nameflag=1]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode from the model. Example nodetopath (node thenode [, num nameflag=0]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode. Example not (num/node value1) Deprecated, use the ! operator Description This command is deprecated. Use the ! operator instead. Example nrcp (obj object) Deprecated, use Object.centerObjects.length Description This command is deprecated. Use Object . centerObjects .length instead. Number of center ports of object. Example nrip (obj object) Deprecated, use Object.inObjects.length Description This command is deprecated. Use Object . inObjects .length instead. Number of input ports of object Example nrop (obj object) Deprecated, use Object.outObjects.length Description This command is deprecated. Use Object . outObjects .length instead. Number of output ports of object. Example nrows (node thenode) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Example ntravelto (obj traveler, obj spline, num endx, num endy, num endz, num vmax, num acc, num dec, num startspeed, num endspeed) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Causes the object to travel to a given rz and return the simulation time that it will arrive. Similar to the travelto command, but includes a start and end speed definition. Used in the development of the TaskExecuter. Example ntravelto(current, 0, 5, 8, 0, 1, 1, 1, 0, 1) ntraveltoupdate (obj object) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Updates the rz of an object after a ntravelto() command was called on it. Used in the OnPreDraw of the TaskExecuter to update it's position. Example ntraveltoupdate(current) numtostring (num value[, num width, num precision]) Deprecated, use string.fromNum() Description This command is deprecated. Use string . fromNum () (static method) instead. Converts value to a string. Example objectconnect (obj object1, obj object2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect two objects, adding needed ports. Object1 will have an output port added, and object2 will have an inport added as needed. Then the ports are connected. Example connect(so(),so().next) objectshapecode (obj object) Deprecated, use getshapeindex() Description This command is deprecated. Use getshapeindex() instead. Get the index of the object's default shape. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the objects default shape. Example objectshapecode(so()) objecttexcode (obj object) Deprecated, use getobjecttextureindex() Description This command is deprecated. Use getobjecttextureindex() instead. Gets the index of the object's default image. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to the objects default texture (image). Example objecttexcode(current) openflexsimchart ([str filename1] [,str filename2]) Deprecated Description This command is deprecated. Example openglcolor (num red {0-1}, num green {0-1}, num blue {0-1}, num opacity {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example opengllighting (num on/off) Deprecated, use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) Description This command is deprecated. Use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) instead. Example openinput (obj object) Deprecated, use Object.input.open() Description This command is deprecated. Use Object . input .open() instead. This command unblocks the input of the object after it has been previously blocked with the closeinput() command. It is necessary that both the input ports themselves, and the input in general, are open before entry will be allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeinput(). Example if (current.subnodes.length < maxcontent) openinput(current); openoutput (obj object) Deprecated, use Object.output.open() Description This command is deprecated. Use Object . output .open() instead. This command unblocks the output of the object after it has been previously blocked with the closeoutput() command. It is necessary that both the output ports themselves, and the output in general, are open before exiting is allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeoutput(). Example if (current.subnodes.length > mincontent) openoutput(current); or (num/node condition1, num/node condition2) Deprecated, use the || operator Description This command is deprecated. Use the || operator instead. Example outobject (obj object, num outputportnum) Deprecated, use Object.outObjects[] Description This command is deprecated. Use Object . outObjects [] instead. Reference the downstream object connected to an upstream object's output port. Example parg () Description This command is deprecated. Example parg() parnode (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode). The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parval() and parstr() for casting them as numbers and strings respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = parnode(1); parstr (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a string. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using the param() command. Example If a trigger/field is called with: nodefunction(thefuncnode, passingstr) then within the trigger/field, getting access to the passingstr string passed as the first additional parameter would be done with: string passedstr = parstr(1); particleset () Deprecated, do not use Description This command is deprecated. Used to set values on a \"particle\" object, which is no longer supported. Example parval (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a number. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parnode() and parstr() for casting them as a treenode and string respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, passingval) then within the trigger/field, getting access to the passingval passed as the first additional parameter would be done with: double passedval = parval(1); pc (num asciivalue) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an ASCII character to the output console. Example pd (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an integer to the output console. Example pf (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a floating point number to the output console. Example pi () Deprecated, use Math.pi Description This command is deprecated. Use Math . pi instead. Gets the value of pi (3.14159....). Example port <no parentheses> Description This command is deprecated. This should not be used as a special command with the setport command anymore. Instead, declare an int variable type as port, then use port in your code as any other variable type. Example int port = param(3); pd(port); This sets port to param(3) and then prints the value to the output console. pow (num num1, num num2) Deprecated, use Math.pow() Description This command is deprecated. Use Math . pow () instead. Calculates num1 raised to the power of num2. Example pr () Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a new line to the output console. Example prev (obj object) Deprecated, use treenode.prev Description This command is deprecated. Use treenode . prev instead. Reference the previous sibling of a node. Example pt (str text) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print text to the output console. Example query (str query[, node/num/str p1, node/num/str p2, ...]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example radianstodegrees (num value) Deprecated, use Math.degrees() Description This command is deprecated. Use Math . degrees () instead. Convert radians to degrees Example rank (obj parent, num index) Deprecated, use treenode.subnodes[] Description This command is deprecated. Use treenode . subnodes [] instead. Reference a child node by rank. Example rankobj (obj container, num rank) Deprecated, use Object.attrs[] Description This command is deprecated. Use the treenode . attrs 's [] operator instead. Gets a reference to the ranked node in the object's attribute sub-tree at rank. Example reftable (str/num globaltable) Deprecated, use Table(\"GlobalTableName\") Description This command is deprecated. Use the Table class instead. Gets a reference to a global table. Example Table table = reftable(\"GlobalTable1\") relloc (obj object, obj containerobj, num coordinate) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. This command returns the x, y, or z location of an object relative to an object that contains it. The containerobj does not need to be the immediate container, but does need to eventually be a container of the object. Use a coordinate value of 1,2,3 for x,y,z respectively. Example double x = relloc(current,model(),1); double y = relloc(current,model(),2); double z = relloc(current,model(),3); Sets x, y and z to the x,y,z positions of the current object relative to the model space. repeat (num nr, expression) Description Executes expression the specified number of times. The expression can use \"count\" to get the 1-based number of the iteration being executed. Example repeat(current.outObjects.length, current.outObjects[count].input.close); This example will close the input of all objects connected to the output ports of current. reset () Deprecated, use resetmodel() Description This command is deprecated. Use resetmodel() instead. For developer use. This command resets the model. The simulation clock is set to 0, and the OnReset event function is called for every object in the model. The OnReset events generally call the ResetTrigger functions that the users define. The model must be compiled before it can be reset. The resetmodel() command should typically be used instead of reset(). Example reset(); go(); This resets then runs the model. resumeanimation (obj object, num/str animation[, num resumeAtType, num resumeAtVal]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Resumes an animation from some point in the middle of the animation. Example resumeanimation(current, \"Stand\"); resumeinput (obj object) Deprecated, use Object.input.resume() Description This command is deprecated. Use Object . input .resume() instead. This command opens the input of an object just like openinput() does, but because it keeps track of previous stopinput() commands called on the object, it will only open input after all stops have been resumed. Refer to openinput() documentation for additional information. Example resumeinput(current.centerObjects[1]); resumeobject (obj object [, num id, num stateprofile ] ) Deprecated, use Object.resume() Description This command is deprecated. Use Object . resume () instead. Tells the object that it may resume whatever it was doing before stopobject() was called on it. The id value is optional and is for matching stop requests with resume requests. Refer to the stopobject() documentation for more information on this. Example resumeobject(current.centerObjects[1]); resumeoutput (obj object) Deprecated, use Object.output.resume() Description This command is deprecated. Use Object . output .resume() instead. This command opens the output of an object just like openoutput() does, but because it keeps track of previous stopoutput() commands called on the object, it will only open output after all stops have been resumed. Refer to openoutput() documentation for additional information. Example resumeoutput(current.centerObjects[1]); richeditaddtext (obj richedit, str text, num protected (0/1)) Deprecated, do not use Description This command is deprecated. Do not use. Example richedittoken (obj richedit, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example round (num value[, num precision]) Deprecated, use Math.round() Description This command is deprecated. Use Math . round () instead. Rounds the value to the nearest integer. Example runexpertfit () Description Deprecated, returns 0. Example runexpertfit() savefpk (node servicepackhead) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. This saves the node to disk as a service pack file (.fpk). A save file dialog box will appear, allowing you to define the path and name of the file. A service pack is nothing more than a node with subnodes. The first subnode is assumed to be toggled flexscript and contain string data with code. When the service pack is loaded using File | Install Service Pack, the first subnode of you service pack will execute automatically. The code will usually copy the other subnodes into the MAIN and VIEW trees. Example savefpk(so()); senddelayedmessage (obj toobject, num delaytime, obj fromobject [, num par1, num par2, num par3]) Send a delayed message to an object, firing its OnMessage trigger after the delay time has transpired Description This command is deprecated. Use Object . message () instead. Causes a message to be sent to the toobject from the fromobject after the delaytime has transpired. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three numeric par values passed in as msgparam(1), msgparam(2) and msgparam(3). This is a very usefuly command for creating your own time events during a model run. Example senddelayedmessage(current.outObjects[1], 25, current, 0, 0, 0); Sends a message from the current object to the object connecte to output port 1 of the current object 25 time units after this command is executed. Zeros are passed for all three of the user-defined parameters. sendmessage (obj toobject, obj fromobject [, var par1, var par2, var par3]) Send a message to an object, firing its OnMessage trigger Description This command is deprecated. Use Object . message () instead. Causes a message to be sent immediately to the toobject from the fromobject as in a direct function call. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three par values passed in as msgparam(1), msgparam(2) and msgparam(3). These message parameters are Variants, meaning they can be numbers, strings, treenode references or arrays. Example sendmessage(current.centerObjects[1], current, item, 10); This sends a message to the object connected to current's first center port. A reference to item is passed as par1 and the number 10 as par2. set (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setcenter (obj object, num x, num y, num z) Deprecated, use Object.setLocation() Description This command is deprecated. Use Object . setLocation () instead. Sets the x, y, and z location of the object's rotational center, relative to its container. Example setcolor (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the red, green and blue color components of an object Example setcurrent (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setitem (thing) Deprecated do not use Description This command is deprecated. Do not use. Example setitemtype (obj object, num value) Deprecated, use labels Description This command is deprecated. Use labels instead. This command sets the itemtype attribute of the object to value. If the object does not have the itemtype attribute, this command does nothing. The attribute itemtype is typically used to distinguish between different types of flowitems that may be of the same class. Example setitemtype(item,duniform(1,3)); This sets the itemtype attribute of the flowitem referenced by item to a random integer between 1 and 3. setlabel (obj node, str/num label, num/str/node value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets the value of an object's label. Example setlabelnum (obj object, str/num label, num value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value. Example setlabelstr (obj object, str/num label, str value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value Example setloc (obj object, num x, num y, num z[, num xFactor, num yFactor, num zFactor]) Deprecated, use Object.location Description This command is deprecated. Use Object . location instead. Sets the x, y, and z location of the object relative to its container. Example setname (obj object, str value) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodename (obj/node object, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodenum (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setnodestr (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setobjectimageindex (obj object, num index) Deprecated, do not use. Description This command is deprecated. Do not use. Sets the index number of the bmp or jpeg image to be assigned to the base of the object (2D shape and base image). For the new index to take effect, the imagebase node of the object must be removed or renamed, so this command renames the imagebase node to \"_imagebase\" for you. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Example setobjectimageindex(item,gettextureindex(\"fs3d\\\\BBsphere.bmp\")); setport (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setquerynode (node queryNode) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example setrank (obj/node object, num index) Deprecated, use treenode.rank Description This command. Use treenode . rank instead. Sets the rank of a child node in its parent's sub-tree. Example setrot (obj object, num rx, num ry, num rz) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Sets the rotation of the object. Example sets (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setsize (obj object, num sx, num sy, num sz) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Sets the size of the object. Example setstate (obj object, num state [, num profilenr]) Deprecated, use Object.setState() Description This command is deprecated. Use Object . setState (stateNum); Sets the state of an object. Example setstate_s (obj object, str statename) Description This command is deprecated. Use Object . stats .state().valueString = stateStr; For development use. Set the state of an object using the actual name of one of the states. The state names must be as they appear in a state pie chart. Example setstate_s(current,\"busy\") settable (node table, num sx, num sy[, num type, num overwrite]) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example settableheader (string/num/node table, num row/col, num rowcolnr, string value) Deprecated, use Table.setColHeader() or Table.setRowHeader() Description This command is deprecated. Use Table . setColHeader () or Table . setRowHeader () instead. Sets the value of the header field of a table Example settablenum (str/node/num table, num row, num col, num value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the number value in a table cell. Example settablesize (str/num/node table, num rows, num cols [, num datatype, num overwrite y/n]) Deprecated, use Table.setSize() Description This command is deprecated. Use Table . setSize () instead. Sets the size of a table. Example settablestr (str/node/num table, num row, num col, str value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the text value in a table cell. Example settrackedvariable (str/node trackedvar, num value[, num rate]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example setundos (num maxundos) Deprecated Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Sets the maximum number of allowable undos. A copy of the entire model will be saved each time a mouse is clicked or a key is pressed. Using the setundos command, you specify the maximum number of model copies that will be remembered for undoing. This command first requires creating a node in the main tree named undo and giving it number data. Example setundos(2); showgraphicinfo (num showhide, str filename) Deprecated, do not use Description This command is deprecated. Do not use. Example sign (num value) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Sign of value. Example sin (num angle) Deprecated, use Math.sin() Description This command is deprecated. Use Math . sin () instead. Gets the sin of an angle in radians. Example sorttable (str/node/num table, num column) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by the values in column in ascending order. Example spaceglobal () Deprecated, use drawtomodelscale() Description This command is deprecated. Use drawtomodelscale() instead. Set the OpenGL space to the global matrix. Example spaceglobal() spaceobject () Deprecated, use drawtoobjectscale() Description This command is deprecated. Do not use. Use drawtoobjectscale() instead. Example spaceobject() sqr (num value) Deprecated, use Math.sqr() Description This command is deprecated. Use Math . sqr () instead. Square of value. Example sqrt (num value) Deprecated, use Math.sqrt() Description This command is deprecated. Use Math . sqrt () instead. Square root of value. Example startanimation (obj object, num/str animation[, num speedtype, num speedvalue, num repeattype, num repeatvalue]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Starts an animation on an object. Example startanimation(current, \"Stand\"); statisticaltime () Deprecated, use the Model class Description This command is deprecated. Use Model . statisticalTime instead. Returns the current simulation time with respect to when stats were last reset, such as since the warmup time has passed in an experiment or since resetstats() was executed. Example item.TimeIn = statisticaltime(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. stopanimation (obj object, num/str animation) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Stops an animation on an object. Example stopanimation(current, \"Walk\"); stopinput (obj object) Deprecated, use Object.input.stop() Description This command is deprecated. Use Object . input .stop() instead. This command closes the input of the object just like closeinput() does, but it also keeps track of consecutive stopinput() commands, and will only open input after all stops have been resumed. Refer to closeinput() documentation for additional information. Example stopinput(current.centerObjects[1]); stopobject (obj object, num state [, num id, num priority, num stateprofile] ) Deprecated, use Object.stop() Description This command is deprecated. Use Object . stop () instead. Tells the object to stop whatever it is doing, go into the state specified (in the state profile if specified), and waits for resumeobject() to be called. Stopobject commands are accumulated, meaning if stopobject is called twice on the same object, the object will not resume its operations until resumeobject has been called twice as well. Stopping an object depends on the type of object that is being stopped. For FixedResources, generally events are delayed indefinitely, input and output is stopped, and all operations going into and out of the object are stopped. This means that TaskExecuters trying to load/unload to or from the object will have to wait until the object has been resumed. For TaskExecuters, events are not delayed, but rather a preempting task sequence with priority of 100,000 is created for the TaskExecuter, with one TE_STOP task in it. Be aware that, if there are several stop requests for the same object, the state for each stop request is not remembered. If an object is requested to stop by entity A with state 12, and then is later requested to stop by entity B for state 14, it will go into state 14 and forget state 12. Even if entity B resumes the object before entity A, the object will remain in state 14 until all stop requests have resumed. The last two parameters, id and priority, are optional and have recently been added to fix the problem in the previous paragraph. If you specify these parameters, then it will store a record of the stop request, instead of just incrementing a value for the number of stops requested. The id is like a key for that stop request. The priority allows the object to prioritize its stop requests. For example, if you have a stop request for the scheduled down state, and another for the breakdown state at the same time, technically the object should be in two states at once, but since a FlexSim object can only be in one state at a time, the priority value breaks the tie and goes into the state of the highest priority stop request. The id value should match an id value that is added to a resumeobject() command later on. This is for matching stop requests with their appropriate resume requests. For example, if you stop an object for scheduled maintenance with and id of 1, once the scheduled maintenance is finished, you will need to resume the object with the same id of 1. Example stopobject(current.centerObjects[1], STATE_BLOCKED); stopoutput (obj object) Deprecated, use Object.output.stop() Description This command is deprecated. Use Object . output .stop() instead. This command closes the output of the object just like closeoutput() does, but it also keeps track of consecutive stopoutput() commands, and will only open output after all stops have been resumed. Refer to closeoutput() documentation for additional information. Example stopoutput(current.centerObjects[1]); store () Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. It explicitly stores an archived copy of the current model inside the undo folder of the main tree. Refer to undos() command documentation for more information. Example store(); stringcopy (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. Returns a substring of string defined by index start (base 1) and length. Example stringlen (str string) Deprecated, use string.length Description This command is deprecated. Use string . length instead. Gets the length of string. Example stringpart (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. This command will return a portion of a string. The new string is defined with a starting character number and a length. A start value of 0 refers to the first character in the original string. Example stringpart(\"Hello\",2,3) returns the sub string \"llo\". stringreplace (str stringtosearch, str searchfor, str replacewith) Deprecated, use string.replace() Description This command is deprecated. Use string . replace () instead. Returns a copy of stringtosearch with all occurrences of searchfor replaced with replacewith. Example stringreturn (str returnstring, ptr callpoint) Description This command is deprecated. You can simply return strings from C++ user commands with the return statement. Prior to FlexSim 7.7, this command was used to return a string from a C++ implementation of a user command. This command was only needed in C++. In FlexScript user commands, you can simply return the string with the return statement. Example C++: stringreturn(result, callpoint); return 0; stringsearch (str stringtosearch, str searchfor, int startindex[, int flags]) Deprecated, use string.search() Description This command is deprecated. Use string . search () instead. Searches the string for the given substring searchfor (base 0). Example stringtonum (str string) Deprecated, use string.toNum() Description This command is deprecated. Use string . toNum () instead. Converts string to a num. Example stringtopchar (str string) Deprecated, use apchar() Description This command is deprecated. Use apchar() instead. This command returns the string as a pointer to a C++ character. This is used to convert variables of type string to type char* for some C++ commands which only take char*'s. It is not needed in Flexscript. Example setname(current,stringtopchar(\"ThisObjectName\")); This sets the name of the object referenced by current to \"ThisObjectName\". The stringtopchar() command may not be mandatory here, but it is legal. strquote (str string) Deprecated, use \\\" Description This command is deprecated. Use \\\" instead to include quotation marks within a string. Example strquote(\"hello\") sub (num value1, num value2) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. operator instead. of value1 and value2. This returns the result of the arithmetic expression value1-value2. Example double operator instead. = sub(10,4); swaptablecols (str/num/node table, num column, num column2) Deprecated, use Table.swapCols() Description This command is deprecated. Use Table . swapCols (). instead. Swaps two columns in a table. Example swaptablerows (str/num/node table, num row, num row2) Deprecated, use Table.swapRows() Description This command is deprecated. Use Table . swapRows (). instead. Swaps two rows in a table. Example switch_hidebase (obj object[, num off/on]) Deprecated, do not use Description This command is deprecated. Do not use. Get or set the \"Show 2D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. The 2D shape (base) of an object is visible in the Planar view window. Note that view windows also have an attribute named hideallbases that controls the display of 2D shapes (bases) for ALL objects in their view. Example switch_hidebase(so(),1) tan (num angle) Deprecated, use Math.tan() Description This command is deprecated. Use Math . tan () instead. Gets the tan of an angle in radians. Example time () Deprecated, use the Model class Description This command is deprecated. Use Model . time instead. Returns the current simulation time. Example item.TimeIn = time(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. trackedvariable (str name) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example transfernode (node movenode, node container) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up to set the node's parent (container). This command moves movenode into the container node. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernode(current.labels[\"inactivequeue\"].first, current.labels[\"activequeue\"]); travelto (obj object, obj spline, num x, num y, num z, num vmax, num acc, num dec) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Calculate current travel parameters for the object. A travel path will be calculated. Once set, the object's position will be calculated based on the travel path as defined by this command. This function returns the time of travel end. This function can be used in conjunction with a spline to create curved travel paths. Example travelto(traveler,NULL,100,100,0,5,1,6) traveltoupdate (obj object [, obj spline]) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Update the object's position based on it's current travel parameters. Explicitly set an object's position based on the time and travel path parameters as calculated from the travelto() command on object, using spline as the path geometry if desired. Example traveltoupdate(current) Updates the current object's position based on the travel parameters set earlier by the traveto() command. This command is usually executed from the Custom Draw Code field. trunc (num value) Deprecated, use Math.trunc() Description This command is deprecated. Use Math . trunc () instead. Truncation of value. Example undos (num off/on) Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. This command is used to turn on (1) and off (0) the automatic saving of model copies each time there is a mouse click or key press. Use the setundos command, to specify the maximum number of model copies that will be remembered for undoing. To function correctly, this command requires first creating a node in the main tree named undo and giving it number data. Example undos(1); up (obj object) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up instead. Reference a node's parent node. Example updateanimation (obj object [, num updatetime, num animationnr]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Updates an animation on an object. Example updateanimation(current); updatetoolsmenu () Deprecated, use the Toolbox Description This command is deprecated, use the Toolbox. Updates the tools menu to reflect any additions or deletions to the tools. Example updatetoolsmenu() userfunction_n (obj object, num index [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified rank index. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,4,1,2,3) Executes the code associated with a node ranked 4th in the userfunctions group of the current object. userfunction_s (obj object, str name [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead, because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified name. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,\"myfunc\",1,2,3) Executes the code associated with a node named \"myfunc\" in the userfunctions group of the current object. var (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by index. Example var(so(),1) var_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by name. Example var_s(current,\"myatt\") vectorprojectx (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojecty (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojectz (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example xcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation (). Gets the x location of the rotational center of the object within its container. Example xloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation (). Gets the x location of an object. Example xrot (obj object) Deprecated, use Object.rotation or Object.setRotation() Description This command is deprecated. Use Object . rotation or Object . setRotation () instead. Gets the x rotation of an object (rotation about the x-axis). Example xsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the x size of an object. Example ycenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the y location of the rotational center of the object within its container. Example yloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the y location of an object. Example yrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the y rotation of an object (rotation about the y-axis). Example ysize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the y size of an object. Example zcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the z location of the rotational center of the object within its container. Example zloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the z location of an object. Example zrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the z rotation of an object (rotation about the z-axis). Example zsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the z size of an object. Example Development High-level development commands not typically intended for end users. addcommand (obj codenode, str commandname, str description, str parameters, str example [, str cppprefix, str shortdescription]) Description For developer use. Adds a Flexscript command to the current list of available commands. The new command is available until the next compile. The Tools | User Commands menu is for end-users to create their own commands. Example addcommand(...) backupfile (str filepath) Description For developer use. Backs up the file by appending a ! onto the specified file's name. Note that this doesn't copy the file. You would do this before an overwrite of a file. Example backupfile(modeldir() + \"mydocument.htm\"); buildall () Description For developer use. This command builds Flexscript trees for all of the nodes in the tree that are designated as Flexscript nodes. A Flexscript node must have a Flexscript tree made before it can run. This option is available in the main menu under Build -> Build All Flexscript. This must be done before running a model with Flexscript written anywhere in it. It should also be done after making any changes to GUIs. Example buildall(); This builds Flexscript trees for all Flexscript nodes in the tree. buildnodeflexscript (node codenode) Description For developer use. This command builds Flexscript trees for the node specified as node if it is designated as a Flexscript node. A Flexscript node must have a Flexscript tree made before it can run. Example buildnodeflexscript(Table(\"mytable\").cell(1,2)); This builds a Flexscript tree for the node at row 1 column 2 of the GlobalTable named \"mytable\", if it is a Flexscript node. changedisplay (num width, num height, num depth, num fullscreen, num test) Change resolution Description Change resolution Example changedisplay(1024,768,0,0,0) cleannodeflexscript (node startnode) Description For developer use. This command recursively deletes Flexscript trees starting at the node specified. Example cleannodeflexscript(model()); This cleans all the Flexscript nodes in the model. cmdcompile () Description For developer use. Compile the project. Example cmdcompile() cmddelete (node thenode) Description For developer use. Use destroyobject(). Delete thenode. Example cmddelete(model().subnodes[4])) cmdexit () Description For developer use. Closes FlexSim. Example cmdexit() cmdloadbyextension (str filename, num silent) Description For developer use. Load a file by name and extension. Recognizes: Project (fsp), Session (fss), Model (fsm), View Layout (fsv). If silent is 0, the user will be asked to confirm that they are opening the correct file. Example cmdloadbyextension(\"c:/mysession.fss\",0) cmdloadsession (str filename) Description For developer use. Load a session by name. Example cmdloadsession(\"c:/mysession.fss\") cmdloadtree (obj desttree, str filename [, num nobuild]) Description For developer use. Load a tree by file path into desttree. By default, after loading, all flexscript will be built. If nobuild is 1, flexscript will not be built. Set nobuild to 1 if you are executing this command from a script node that is toggled as flexscript, or else your script will not finish properly. Example cmdloadtree(node(\"MAIN:/project/model/2\"),\"c:/mytree.t\")) cmdnew () Description For developer use. Start a new model. This command will clear the contents of the model by deleting all objects in the model. Example cmdnew() cmdopen () Description For developer use. Open a new model. This command will cause an Open Model Dialog box to appear from which a model file can be selected for opening. Example cmdopen() cmdsaveas () Description For developer use. Save the model. This command will cause an SaveAs Model Dialog box to appear from which a model file name can be specified for saving. Example cmdsaveas() cmdsavesession (str filename) Description For developer use. Save a session by name. Example cmdsavesession(\"c:/mysession.fss\") cmdsavetree (obj tree, str filename) Save a Tree by name Description Save a Tree by name Example cmdsavetree(node(\"MAIN:/project/library/1\"),\"c:\\\\mytree.t\")) consoleexecutefs (HWND input, HWND output) Description For developer use. Execute the console code as Flexscript. Example copyattributes (obj destination, obj source, num mask) Description For developer use. Copy the attributes from one object to another. Use mask parameter to enable specific groups (from least significant): ATTCOPY_ALL ATTCOPY_SPATIAL ATTCOPY_OFFSETS ATTCOPY_VISUAL ATTCOPY_MEDIA ATTCOPY_LABELS ATTCOPY_VARIABLES ATTCOPY_DESCRIPTIVE ATTCOPY_TABLES Use the OR operator (|) to combine these values into a single value for the mask parameter. Example copyattributes(library().subnodes[1],model().subnodes[1],ATTCOPY_SPATIAL | ATTCOPY_VISUAL) copycolor (obj highlightedobj) Description For developer use. Copies the color of the highlighted object to all of the selected objects Example copycolor(current) copylabel (obj highlightedobject, str/obj labelnamenode) Description For developer use. Copies the label with the name specified by parameter 2 or stored on the string data of the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copylabel(selectedobject(ownerview(c)), c.find(\">labelname\")) copylabels (obj highlightedobj[, num mode]) Description For developer use. Copies all labels from the parameter 1 object to all selected objects in the model. By default it clears out all existing labels and replaces them with the labels on the parameter 1 object. If mode is 1, existing labels will be overwritten by any incoming labels with the same name, but will otherwise be left alone. If mode is 2, only labels that the selected objects do not already have will be copied. Example copylabels(selectedobject(ownerview(c)), c.find(\">labelname\")) copyvariable (obj fromobject, obj variablenamenode) Description For developer use. Copies the variable with the name held by the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copyvariable(selectedobject(ownerview(c)), c.find(\">variablename\")) copyvariables (obj fromobject) Description For developer use. Copies all variables from the parameter 1 object to all selected objects in the model. Example copyvariables(selectedobject(ownerview(c))) copyvisuals (obj highlightedobj [, num copyshapefactorsalso]) Description For developer use. Copies all visuals from the parameter 1 object to all selected objects in the model. Example copyvisuals(selectedobject(ownerview(c)),1) daemonstate (num thing) Description For developer use. Returns the stats of: 1 - clock 2 - flythrough 3 - ticker Example daemonstate(1) documentusercommands () Description For developer use. Accesses the current model's command documenation and updates a file called usercommands.xml so that the user commands are included in the command documentation Example documentusercommands(); excelupdatepreferences () SYSTEM USE ONLY Description SYSTEM USE ONLY - used to update global variables to match preferences. Called in startupRT.txt and in OnSelect of Excel Preferences GUI. Example excelupdatepreferences() fgldebuglevel (num level [0-3]) Description For developer use. Set the OpenGL debug level. The higher the number, the more scrutiny is put on the system, and the more reporting is done. 0 is none, 3 is maximum. Example fgldebuglevel(3) fileisreadonly (str filename) Description For developer use (Dynamo). Looks for the string \"READONLY\" in the PROPERTY_COMMENTS of the specified file. Example fileisreadonly(pdir() + \"\\\\flexsim.exe\") fillwithatts (obj object, num attgroup) Description For developer use. Fill an object with attribute from an attribute group. Example fillwithatts(so(),1) fscheckall (node startingnode) Description For developer use. This command checks for errors in all flexscript nodes under and including the specified startingnode and outputs the results to the compiler console if it finds atleast one error. Example fscheckall(main()); function_n (obj object, num index [, num param_a,...]) Description For developer use. Executes code associated with a node found in the object's eventfunctions group having the specified event code. The event code is not the rank of the node in the eventfunctions group, but it corresponds to one of the following pre-defined FlexSim event : OnReset 1 OnMessage 2 OnEvent 3 OnDraw 4 OnInopen 5 OnOutopen 6 OnReceive 7 OnSend 8 OnEntering 9 OnExiting 10 OnCompile 11 OnCreate 12 OnDestroy 13 OnLoad 14 OnCollision 15 OnClick 16 OnRunend 17 OnRunstart 18 OnInterrupted 19 OnCaptured 20 OnListen 21 OnPredraw 22 OnDrawplanar 23 OnPredrawplanar 24 OnPreListen 25 Example function_n(current,1,1,2,3) Executes the OnReset event function defined on the current object. function_s (obj object, str name [, num param_a,...]) Description For developer use. Executes code associated with the node found in the object's eventfunctions group having the specified name. For a list of the pre-defined system level events in FlexSim refer to function_n() command documentation. Example function_s(current,\"OnReset\",1,2,3) Executes the OnReset event function defined on the current object. getapplicationtitle () Description For developer use. Returns the current application's title as a string. Example msg(getapplicationtitle(),\"Hello world.\"); getnextparametersobject (obj startobject, str guifocus, num doguifocusclass, num searchforward) Description For developer use. Used in parameters window to access the next object when the \"Next\" button on the parameters window is pressed. Example Refer to object parameters properties windows in the view tree getproperty (str filename, num property) Description For developer use. Gets the value for the specified property in the specified file. Example getproperty(modeldir() + \"MyModel.fsm\",1); gettreedrawposition (node destnode, node roottree) Description For developer use. Example groupconnectfrom (obj object, str character) Description For developer use. Connects the object passed in as param(1) to every selected object in the model using the letter passed in as param(2). Typically used in GUIs. Example groupconnectfrom(selectedobject(ownerview(c)),\"A\"); groupconnectto (obj object, str character) Description For developer use. Connects every selected object in the model to the object passed in as param(1) using the letter passed in as param(2). Typically used in GUIs. Example groupconnectto(selectedobject(ownerview(c)),\"A\"); groupcopyconnections (obj object) Description For developer use. Copies the connections on the object passed in as param(1) onto every selected object in the model. Typically used in GUIs Example groupcopyconnections(selectedobject(ownerview(c))); help () Description For developer use. Display the help system window. Example help() howmanyattributes () Description For developer use. Returns the number of attributes. Example howmanyattributes() howmanycommands () Description For developer use. Returns the number of commands. Example howmanycommands() license () Gets the current license type Description Get the current license type Example licenseactivation (num operation[, str buffer, var p1, node callback]) Description For developer use. Do various licensing operations. Example licenseactivation(LA_SET_ACTIVATION_SERVER_PARAMS,\"@localhost\",0); maintenance (num command[, num state, str strparam]) Description For developer use. Set a maintenance switch. The first parameter designates the operation. The second parameter designates a state to set it to. Maintenance switches: 0. print this list 1. deadlinks 2. atttrbute bind method (0=names, 1=indices, 2=bootstrap) 3. numberprecision 4. display binding report 5. usercollisions 6. post-onsend 7. loadsavemode 8. disablefscheck 9. disablefspreprocess 10. splinetension 11. streamalizer 12. immediately load extended docs 13. save reps at experiment end 14. suppress object library compile 15. suppress global compile 16. set runtime info 17. get runtime info 18. bind c++ functions 19. autorebind c++ functions onoff 20. get presentation mode 21. refresh main menu 22. is optquest enabled 23. flypaths in seconds units 24. chached ports on/off 25. bind on reset on/off 26. set category name (user command group is 22, other 23, 24+ is available) 27. object sizermode 0. default 1. 3-axis 28. show hidden nodes in tree 29. hide 3d cursor 30. supress simclock redraw 31. use parser two 32. grid draw settings: bitwise field: 0x1-auto expand grid, 0x2-show grid axes, 0x4-show grid origin 1000. DDE Example maintenance(0) modeleditmode (num/str mode) Description For developer use. Sets the current model edit mode. You can query the current mode with -1. Example modeleditmode(\"AConnect\"); postclosewindowmessage (obj view) Posts a Windows Message to close the window Description Posts a message onto the Windows message queue to close the window. This allows you to finish any scripting code before the window is actually closed. Example postclosewindowmessage(ownerview(c)); postmovewindowupdate (obj view) Description For developer use. Do not use. Example postwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API PostMessage() command, posting a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example postwindowmessage(windowfromnode(view), WM_COPY, 0,0); rebindobjectattributes (node thenode) Rebinds object attributes Description Rebinds object attributes for the given node. If you delete or add an attribute to an object, the object's attribute cache will not immediately reflect that change, so you can call rebindobjectattributes to update the object's attribute cache. This is the same as right-clicking on the object and selecting Edit|Rebind Object Attributes. Example rebindobjectattributes(c) recover (num phase) Load recovery files Description Load recovery files. phase: 1 or 2 Example recover(1) refreshcommandlist () Description For developer use. Refreshes the command list. Example refreshcommandlist() refreshglobalvariables () Description For developer use. Refreshes all global variables to their initial values. Example refreshglobalvariables() refreshmodelcommands () Description System command. Do not use. Example sendwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API SendMessage() command, sending a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example sendwindowmessage(windowfromnode(view), WM_COPY, 0,0); setapplicationtitle (str title) Description For developer use. Sets the current application's title. Example setapplicationtitle(\"Custom Application Title\"); setmessageloopsleep (num interval, num sleeptime) Description For developer use. Set a sleep time for each cycle of the message loop to decrease cpu load. Use carefully because a large value can make FlexSim unresponsive to user input. Every interval milliseconds, FlexSim will pause for a period of sleeptime milliseconds. This command may help certain laptops that tend to overheat due to excessive cpu usage. Example setmessageloopsleep(1) setproperty (str filename, num property, str newvalue) Description For developer use. Sets the value for the specified property in the specified file to the newvalue. Example setproperty(modeldir() + \"MyModel.fsm\",1,\"Custom Title\"); setticker (node thenode[, num tickspersecond]) Description For developer use. Set the ticker script node. If tickspersecond is specified, the code will be executed that many times per second, otherwise the code associated with the node will be executed at each iteration of the windows event loop. The node must be toggled FlexScript or C++. No model events are created in association with the ticker node execution. To turn off ticker execution, use setticker(0). Example setticker(so()) statsenablemask (num mask) Description For developer use. Enable or disable aspects of stats collection. Set a 32 bit enable mask: Sum of flags. Bits: 0 = State; 1 = Flow; 2 = Inside Ports. Example statsenablemask(add(1,2)) stick (num stickno, num command [, HWND/num win, var/num p]) Description For developer use. This command queries the joystick or controller state or sets functionality for a joystick or controller. stickno defines an id for the joystick or gamepad you want to query. This is a number between 0 and 32. Usually you will only have one joystick connected to your computer, so in this case you should use the value 1 as stickno. If you are using a gamepad, you might need to use stickno 2. For Xbox controllers, stickno will be a value between 0 and 3. For VR controllers, stickno will be either 0 or 1. For Oculus touch controllers, stickno 0 is the left hand and stickno 1 is the right hand. Use stickno -1 to get the status, position, or rotation of a connected VR headset. command defines the operation that the command should perform. This should be one of the macros below: STICK_JOY_STATUS - Queries the connectivity of the joystick. If the joystick is connected properly, then this command will return 0. If the return value is non-zero, then there is some error with the joystick's connectivity, and you can view the system console to see what the error is. The following errors apply: MMSYSERR_NODRIVER - The joystick driver is not present. MMSYSERR_INVALPARAM - Invalid joystick ID or hwnd is NULL. JOYERR_NOCANDO - Cannot capture joystick input because a required service (such as a Windows timer) is unavailable. JOYERR_UNPLUGGED - The specified joystick is not connected to the system. JOYERR_PARMS - Invalid joystick ID or hwnd is NULL. STICK_JOY_XPOS - Current X-coordinate of the joystick. This is a number between 0 and 65535. 0 means the joystick is pushed all the way to the left, 65535 means it is pushed all the way to the right, and 32768 is exactly in the center. If you are using a gamepad, then this is the x position of the left side joystick. STICK_JOY_YPOS - Current Y-coordinate of the joystick. Again this is a number between 0 and 65535. 0 is up, 65535 is down. If you are using a gamepad, this is the position of the gamepad's left joystick. STICK_JOY_ZPOS - Current Z-coordinate of the joystick. If you are using a joystick, this will usually be the current setting of the joystick's throttle. Again it is a value between 0 and 65535. If you are using a gamepad, this represents the y position of the right side joystick. STICK_JOY_BUTTONS - Current state of the 32 joystick buttons. This is bitwise integer with each bit representing the state of a given button. For a joystick, the main trigger button is usually represented by the 0x00000001 bit, other buttons on the stick are 0x00000002 and 0x00000004, and buttons on the base of the joystick are then higher order bits. You will need to test these out on your own as each joystick is a little different. STICK_JOY_SET_CAPTURE - This command sets the joystick capture to a FlexSim window that you specify. This command requires the win and p parameters to be passed in. By executing this command, joystick messages will be sent to the OnStick attribute of the view. For example, if you have an ortho view that you would like to listen to joystick events, you would call this command, passing the ortho view's HWND handle (use windowfromnode()), and a polling period. The period specifies a time interval in milliseconds to repeatedly call the OnStick event. If p is 0, then the OnStick event will only be called when the joystick's state changes. If p is greater than 0, then the OnStick event will simply be called at the end of each sample period interval. Example: stick(1,5, windowfromnode(sv()), 200); This will cause the OnStick event to be called every 200 milliseconds. In order for this to work, you need to add an OnStick attribute to the view (you may also need to rebind the view's attributes after adding it: right-click->Edit|Rebind Object Attributes). STICK_JOY_RELEASE_CAPTURE - This command releases the joystick capture for the window that was previously captured with the 5 command. You need to pass in the win parameter as with command 5. STICK_JOY_RPOS - Current position of the rudder or fourth joystick axis of the joystick. For a joystick, this is usually the rotation of the joystick if your joystick can rotate around its z axis. Again it is a number between 0 and 65535. If you are using a gamepad, it is the x position of the right side joystick. STICK_JOY_UPOS - Current fifth axis position of the joystick. STICK_JOY_VPOS - Current sixth axis position of the joystick. STICK_JOY_POV - Current position of the point-of-view control of the joystick. It is a number between 0 and 35900 and represents the number of degrees times 100. For a gamepad, this represents the directional pad on the left of the gamepad. Up is 0, right is 9000, down is 18000, left is 27000. If the directional pad is not pressed, the value will be 65535. If you are using a joystick, there may be a directional thumb controller on the stick itself that you can press up, down, right, or left, and this will get the setting of that controller. STICK_JOY_CURRENT_BUTTON - Current button number that is pressed. STICK_JOY_FLAGS - Flags indicating the valid information returned about the joystick. STICK_XBOX_STATUS - Queries the connectivity of the Xbox controller. If the controller is connected properly, this returns 0. STICK_XBOX_BUTTONS - Bitmask of the device digital buttons. A set bit indicates that the corresponding button is pressed. STICK_XBOX_LEFT_THUMB_X - Left thumbstick x-axis value. Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick. A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right. STICK_XBOX_LEFT_THUMB_Y - Left thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_X - Right thumbstick x-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_Y - Right thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_LEFT_TRIGGER - The current value of the left trigger analog control. The value is between 0 and 255. STICK_XBOX_RIGHT_TRIGGER - The current value of the right trigger analog control. The value is between 0 and 255. STICK_VR_STATUS - Returns 1 if an Oculus Rift controller is active. Returns 2 if an HTC Vive controller is active. Returns 0 if the controller is inactive. Returns nullvar if the controller is not attached. STICK_VR_THUMB_X - Thumbstick or trackpad x-axis value between -1 and 1. STICK_VR_THUMB_Y - Thumbstick or trackpad y-axis value between -1 and 1. STICK_VR_INDEX_TRIGGER - Index trigger value between 0 and 1. STICK_VR_GRIP_TRIGGER - Grip trigger value between 0 and 1. On HTC Vive, grip button is pressed. STICK_VR_BUTTON_1 - The first button is pressed. A or X on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_2 - The second button is pressed. B or Y on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_3 - The third button is pressed. Enter or Home on Oculus Rift. Menu on HTC Vive. STICK_VR_BUTTON_4 - The fourth button is pressed. Thumbstick on Oculus Rift. Trackpad on HTC Vive. STICK_VR_TOUCH_BUTTON_1 - The first button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_2 - The second button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_3 - The third button is touched. Unused on Oculus Rift. STICK_VR_TOUCH_BUTTON_4 - The fourth button is touched. STICK_VR_TOUCH_THUMB_REST - The thumb rest sensor is touched on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_INDEX_TRIGGER - The index trigger sensor is touched. STICK_VR_TOUCH_POINTING - The hand gesture is pointing on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_THUMB_UP - The hand gesture is thumbs-up on Oculus Rift. Unused on HTC Vive. STICK_VR_HAND_POSITION - The controller position in VR space. STICK_VR_HAND_ROTATION - The controller rotation in VR rotation coordinates. STICK_VR_HAND_WORLD_POSITION - The controller position in FlexSim world space. STICK_VR_HAND_WORLD_ROTATION - The controller rotation in FlexSim rotation coordinates. STICK_VR_HAND_OFFSET_POSITION - The controller's position in FlexSim world space, but with an offset applied based on the controller's rotation. Pass an array as the offset vector in the p parameter. You can use this option to get a point relative to the controller, such as a finger position or where the controller is pointing. STICK_VR_TARGET_FLOOR_POSITION - The target position on the floor that the controller is pointing towards. Pass a value in the p parameter for the maximum distance away from the controller. STICK_VR_SET_VIBRATION - Causes the controller to vibrate. On Oculus Rift, pass an array for the p parameter where the first element is a value between 0 and 1 for the frequency and the second element is a value between 0 and 1 for the amplitude. On HTC Vive, pass a duration in microseconds for the p parameter. STICK_VR_SUBMIT_VIBRATION - Causes the controller to subtly vibrate. On original Oculus Touch controllers, pass an array of amplitudes (0 - 255) for the p parameter to be queued up and executed. Unused on HTC Vive or Oculus Rift S controllers. Example stick(1, STICK_JOY_YPOS); This gets the y position of the joystick id 1 suspenddraw (num bitmask) Description For developer use. Bit mask. Disables draw in window types. Bits: 0 - TREE; 1 - PLANAR; 2 - SPATIAL Example suspenddraw(1) switch_variable (obj object, str var[, num off/on]) Description For developer use. Add and set; or remove a dynamic switch variable to/from an object. When set to on, a node called var will be added to the structure of object and have a numerical value of 1 assigned to it. When set to off, a node called var, if present will be removed from the structure of object. Used in model update code. Example switch_variable(so(),\"arrivalmode\",1); toggleallcodestates (node startpoint, num ascpp) Toggles all code nodes under startpoint as either C++ or flexscript Description Traverses the tree starting at start point and toggles all code nodes to either c++ or flexscript. 1 toggles to c++, 0 toggles to flexscript. This will only change nodes that have not been locked to their code state. This is the same as using the menu option Build|Make all code C++ or Build|Make all code flexscript. Example toggleallcodestates(model(), 1); tracemaskevents (num mask) Description For developer use. Set a 32 bit trace mask: Sum of Math.pow(2,N1)+Math.pow(2,N2)... where Nx are the event numbers to be reported in the trace. See View|Trace Debugger... Example tracemaskevents(listsum(Math.pow(2,1),Math.pow(2,2),Math.pow(2,3))) tracemaskobject (obj object) Description For developer use. Set an object to be included in the event reporting in the trace debugger. See View|Trace Debugger... Example tracemaskobject(Model.find(\"Processor3\")) tracemasktime (num start, num end) Description For developer use. Define a start and end time for event reporting in the trace debugger. See View|Trace Debugger... Example tracemasktime(100,200) uselisteners (num mask) Description Enable or disable listening. Example uselisteners(1) Drawing Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window. bindtexture (num textureid) Description This function is used in an OpenGL call sequence. When OpenGL commands are being used to draw a scene, this command will bind the texture loaded into FlexSim with the index textureid. Once bound, a texture will be used to render any polygons drawn subsequently. Texture mapping is the application (or mapping) of an image (or texture) to the surface of a polygon or other graphics primitive. Example bindtexture(10) Use loaded texture with index number 10 for rendering any subsequent polygons draw3dtext (str text[, num asBitmap]) Draws text in a 3d view Description This command is similar to drawtext(), but can only be used in a 3D view, and its parameter set is stripped down to provide direct access to the text rendering procedure. Whereas drawtext() does some automatic scaling based on the current object, as well as some OpenGL state changes, etc., draw3dtext() calls the text drawing procedure directly, so any positioning, scaling, color settings, etc., should be done with OpenGL commands, i.e. glTranslated(), glScaled(), glColor3d(), etc. Example draw3dtext(current.name); drawbox (num x, num y, num z, num sx, num sy, num sz, num glbegin) Draws a simple box Description Draws a simple box. If glbegin is 1, then it will call glBegin before drawing. This command is a shortcut way to draw an OpenGL type cube that allows more control over lighting, coloring, and texturing than the drawcube() command. Example drawbox(5,0,0, 2,1,3, 1); drawcolumn (num x, num y, num z, num totalsides, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D column Description A very versatile command that can draw anything with multiple sides and a height such as a square, a pentagon, a pyramid, and even a cylinder (if the total number of sides is large). Draws a column with its origin (center of base) positioned at x, y, z. The column is then defined by the number of sides, a base radius, a top radius, and a height. The column can be rotated in degrees about each axis with rx, ry, rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the column from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the column. The location, size and rotation of the column are by default relative to the object it is drawn on. The parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcolumn(0,0,0, 5 ,4,2, 6 ,0,0,0, 175,175,175, .6, 3, 5,1); drawcube (num x, num y, num z, num sx, num sy, num sz, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D cube Description Draws a cube with its origin (bottom left corner) positioned at x, y, z. Its length, width, and height is defined by sx, sy, and sz respectively. It can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cube from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the cube. The location, size and rotation of the cube are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcube(0,0,0, 5,3,2, 0,0,0, 175,175,175, .6, 3, 1,1); drawcylinder (num x, num y, num z, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draws a 3D clyinder Description This command draws a hollow cylinder with its origin (center of base) positioned at x, y, z. The cylinder's dimensions are defined by a base radius, a top radius and a height. Use the drawdisk() command to cap off the ends of the cylinder. The cylinder can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cylinder from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing around the outside circumference of the cylinder. The location, size and rotation of the cylinder are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcylinder(0,0,0, 1,1, 5, 0,0,0, 175,175,175, .6,3); drawdisk (num x, num y, num z, num innerradius, num outerradius, num startangle, num sweepangle, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D disk Description Draws a flat planar disk with its origin (center of radius) positioned at x, y, z. The disk's dimensions are defined by an inner radius, an outer radius, a start angle, and a sweep angle. A sweep angle of 360 makes a complete circle. An innerradius greater than 0 will create a disk with a hole in the middle of it. The disk can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the disk from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing across the face of the disk. The location, size and rotation of the disk are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawdisk(0,0,0, .5,2, 90,270, 0,0,0, 175,175,175, 1,3); drawflattext (str text) Description This command can only be used in a 3D view. It draws a texture-mapped text string. This uses the same functionality that draws the names and stats below objects. If scaled correctly, it draws a very crisp, readable text. Use this in conjunction with setdrawnamefunction() to customize the data that is shown in the box below objects. Unlike drawtext(), this command's parameter set is much more stripped down, so you should use gl commands (i.e. fglTranslate(), fglScale(), fglColor(), etc.) to set up the location, size, and render settings before drawing the text. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object drawfont (num font) Specifies the font to be used with drawtext() Description Call before drawtext, to define font to be drawn. After drawtext is called, the font will be reset to default. There are currently 12 font types (numbers 0 through 11). Example drawfont(2) drawimage (obj view, str imagepath, num x, num y, num width, num height, num scaling) Draws an image Description Draws the image at imagepath in the view. The scaling value specifies how the image will be positioned and scaled. NO_SCALE (or 0): Draws the image at location x,y with the width and height being based on the size of the image. SCALE_DOWN: Draws the image centered in the rectangle created by x,y,width,height and scales the image proportionally down to fit if necessary. SCALE_UP_DOWN: Draws the image centered in the rectangle created by x,y,width, height and scales the image proportionally up or down to fit. SCALE_INDEPENDENT: Draws the image at x,y with the size of width and height. Example drawimage(c, \"buttons\\\\visible_eye.png\", 0, 10, 0, 0, 0); drawline (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar line Description This command draws a planar line with a starting point of xloc1, yloc1, zloc1, and an ending point of xloc2, yloc2, zloc2. The color is defined by the red, green, blue color components ranging from 0 to 1. Example fglDisable(GL_LIGHTING); drawline(view, 0, 0, 0, 2, 2, 2, 1, 0, 0); fglEnable(GL_LIGHTING); This example draws a line from point (0,0,0) to point (2,2,2). The line will be red in color. drawobject (obj view, num shapeindex, num textureindex[, num animation, treenode shapedata]) Draws a 3D shape Description Draws a 3d object with the specified shape and texture indices. Example drawtomodelscale(current); drawobject(view,getshapeindex(\"fs3d//texturebox.wrl\"),gettextureindex(\"flexsim.bmp\")); Set the drawing scale to that of the model, then draw the texturebox.wrl shape using flexsim.bmp as a texture. drawpie (obj view, num x, num y, num z, num x2, num y2, num z2, num startangle, num endangle, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a flat pie shape Description Draws a flat pie shape with its origin (center of radius) positioned at the midpoint between [x1,y1,z1] and [x2,y2,z2]. The angles are measured in degrees counterclockwise from the positive x axis. Negative angles are measured clockwise. The pie is filled from the start angle to the endangle counterclockwise. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawpie(view,3,3,0,0,0,0,45,90,0.5,0,0); drawquad (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num x4, num y4, num z4, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar quadrilateral Description This command draws a planar quadrilateral with vertices defined by x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, and z4. The color is defined by the red, green, blue color components ranging from 0 to 1. The resultant shape and lighting is dependent on the order or sequence in which the vertices are defined. If vertices are all in one plane, consider using drawrectangle() command. Example drawquad(view, 0, 0, 1, 0, 0, 0, 2, 2, 2, 4, 5, 6, 1, 0, 0); This example draws a quadrilateral with vertices defined by the following four points: (0,0,0), (1,0,0), (2,2,2), and (4,5,6). The quadrilateral will be red in color. drawrect (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar rectangle Description This command draws a planar rectangle with opposite corners defined by x1, y1, z1, and x2, y2, and z2. Both points must lie in a plane parallel to the xy plane. The color is defined by the red, green, blue color components ranging from 0 to 1. This command can be called in a planar, 3D, graph, or panel view. See also drawquad() Example drawrect(view, 0,0,.5, 1, 1, .5, 1, 0, 0); Draws a red rectangle with opposite corners (0,0,.5) and (1,1,.5). drawrectangle (num x, num y, num z, num length, num width, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draw a 3D rectangle Description Draws a flat planar rectangle with a user-defined location, length, width, rotation, and color. The drawquad() command must be used to draw a rectangle that is not parallel with the x, y or z plane. An optional opacity parameter will change the rectangle from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times across the face of the rectangular plane as texturing. The location, size and rotation of the rectangle are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawrectangle(0,0,0, 2,3, 0,0,0, 175,175,175, .6, 1, 2,3); drawshadow (num phase (1,2,3)) In OnDraw: draw shadow volume Description In OnDraw: draw shadow volume Example drawshadow(1); drawsphere (num x, num y, num z, num radius, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D sphere Description Draws a hollow sphere with its origin (center of sphere) positioned at x, y, z. The sphere's dimensions are defined by a single radius. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the sphere from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be wrapped over the surface of the sphere as a texture. The location, size and rotation of the sphere are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawsphere(0,0,0,5,175,175,175,1,3); drawtext (obj view, str text, num x, num y, num z [, num width, num height, num thickness, num rx, num ry, num rz, num red {0-1}, num green {0-1}, num blue {0-1} , num opacity {0-1}, num flags]) Draws text Description This command draws text at a location defined by x, y, and z. The width parameter is not used. The text width and height is determined by the height parameter. The rotation is defined by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 1. You can define the flags parameter as follows: 0x1 = bold, 0x2 = italic, 0x4 = underline. The flags parameter only applies to non-3d views The opacity if used should be a number ranging between 0 (full transparency) to 1 (opaque). Call drawfont() command to change font type before calling drawtext() if desired. This command can be used in a planar, 3D, graph or panel view. Example drawtext(view, \"Hello\", 0,0,0, 0,.3,.1, 90,0,0, 1,0,0, .8); This example draws \"Hello\" at location (0,0,0) with size 0.3, thickness 0.1, rotation (90,0,0), an rgb color (1,0,0), and opacity of 0.8. drawtomodelscale (obj object) Gets the current drawing scale of the model Description Returns the current drawing scale to that of the model after a previous call of drawtoobjectscale(). This is equivalent to the following OpenGL function: glScalef(1/object.location.x,1/object.location.y,1/object.location.z); Example drawtomodelscale(current); drawtoobjectscale (obj object) Scale subsequent draw commands to the size of the object Description This command causes all subsequent draw commands to be scaled according to the size of the object. This is equivalent to the following OpenGL function: glScalef(object.location.x,object.location.y,object.location.z); By default, the scale is originally set to that of the object. Example drawtoobjectscale(current); drawtriangle (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar triangle Description This command draws a planar triangle with vertices defined by xloc1, yloc1, zloc1, xloc2, yloc2, zloc2, xloc3, yloc3, and zloc3. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawtriangle(view, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0); This example draws a triangle with vertices defined by the following three points: (0,0,0), (1,0,0), and (0,1,0). The triangle will be red in color. fglColor (num red {0-1}, num green {0-1}, num blue {0-1}[, num alpha {0-1}]) Sets the color for drawing a mesh in OpenGL Description Sets the color for drawing a mesh in OpenGL. The rgb color components are between 0 and 1. The optional alpha component is between 0 (transparent) and 1 (opaque). Example fglDisable (num setting) Disables an OpenGL draw setting Description Disables an OpenGL draw setting. See glEnable() for list of draw settings. You can refer to standard OpenGL documentation for more information if needed. Example fglDisable(GL_LIGHTING); fglEnable (num setting) Enables an OpenGL draw setting Description Enables an OpenGL draw setting. Note that for optimization purposes, FlexSim's drawing engine does not automatically restore the enabled/disabled state of a given setting, so it is up to you, if you use this command, to restore the setting to its default after you have executed your drawing functionality. Failing to restore a setting to its default will result in weird rendering of other objects in the model. Common OpenGL draw settings: GL_LIGHTING Turns lighting on and off. Turn it on if polygons do not change color when they turn away from the viewer. Default: enabled. GL_CULL_FACE Turns back-face culling on and off Turn it off if you want both sides (front and back) of all polygons drawn. Default: disabled. GL_TEXTURE_2D Turns texturing on and off. Turn it off if a texture is being displayed and you don't want it there. Default: enabled. You can refer to standard OpenGL documentation on glEnable() for more information if needed. Example fglEnable(GL_LIGHTING); fglinfo (num operation, obj view) Gets information about a 3D view's draw state Description This command gives you access to various information about the draw state of a 3d view. Logic/data that is performed/returned is based on the operation parameter, as follows: FGL_INFO_SHADERTYPE - returns what part of the draw pass is happening, such as rendering the shadow map (SHADERTYPE_RENDER_SHADOWS), blurring the shadow map (SHADERTYPE_BLUR), or rendering the objects to the screen (SHADERTYPE_DEFAULT). Example /*do not draw this object when rendering the shadow map*/ if (fglinfo(FGL_INFO_SHADERTYPE, view) == SHADERTYPE_RENDER_SHADOWS) return 0; fglLoadIdentity () Description Loads the identity matrix into the current OpenGL drawing context, or in other words, replaces the current matrix with the identity matrix. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Loading the identity matrix is simply a way of resetting things to the origin, so there's no rotation, translation or scaling. The default position is (0,0,0) and the default orientation is looking down the negative z-axis. You can refer to standard OpenGL documentation for more information if needed. Example fglLoadIdentity() fglMatrixMode (num mode) Specifies which matrix stack is the target for subsequent matrix operations Description Specifies which matrix stack is the target for subsequent matrix operations. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW which is used when moving objects around the scene. You can refer to standard OpenGL documentation for more information if needed. Example fglMatrixMode(GL_MODELVIEW); fglNormal (num x, num y, num z) Sets the normal vector for shading subsequent vertices in OpenGL Description Sets the normal vector for shading subsequent vertices in OpenGL drawing. Polygons will be flat shaded unless normals are applied to them. A normal is a vector that is perpendicular to the polygon and points in the direction the polygon is facing. Remember polygons with vertices defined in a counter-clockwise winding points forward per the \"right-hand rule\". Polygon shading is based on the angle between the normals and the light source. Normals are applied to each vertex in the same way colors are, but is usually just defined at the start of each polygon definition. When a polygon's normals point directly at the light source, they are brightly shaded; and are darker shaded when the angles are skewed. You can refer to standard OpenGL documentation for more information if needed. Example fglNormal(1,0,0); fglPopMatrix () Pops the current OpenGL drawing context from the matrix stack Description Pops the current OpenGL drawing context from the matrix stack, or in other words returns to the space on the top of the stack. The OpenGL stack stores the space matrix in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPopMatrix(); fglPushMatrix () Pushes the current OpenGL drawing context onto the matrix stack Description Pushes the current OpenGL drawing context onto the matrix stack which can later be retrieved with glPopMatrix(). If you are drawing more than one object and you don't want the glTranslated, glRotated or glScaled to affect the next objects, you should use glPushMatrix and glPopMatrix. The OpenGL stack stores the space matrices in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPushMatrix(); fglRotate (num degrees, num x, num y, num z) Rotates the current OpenGL drawing context by degrees around axis x,y,z Description Rotates the current OpenGL drawing context by degrees around an axis defined by the vertex (x,y,z). Anything drawn after a rotation is based on the new rotation of the axes. See glVertex3d for definition of the OpenGL xyz coordinate system. You can refer to standard OpenGL documentation for more information if needed. Example fglRotate(90,1,0,0); fglScale (num x, num y, num z) Scales the current OpenGL drawing context by x,y,z Description Scales the current OpenGL drawing context by the given scale parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after this command is based on the change in scale of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglScale(2,4,1); fglTranslate (num x, num y, num z) Translates the current OpenGL drawing context by x,y,z Description Translates the current OpenGL drawing context by the given translation parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after a translation is based on the new location of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglTranslate(15, 4, 0); getdrawtextmetric (str text, num fontsize, num metric[, num a]) Description Returns information about the text. If metric is 1, it will return the width of the text. If metric is 2, it will return the height of the text. If metric is 3, it will return the max fitting length of the text using 'a' as the max extent. Example getdrawtextmetric(\"Hello\",12,1,0); glIsEnabled (num setting) Returns 1 if the OpenGL setting is enabled, 0 otherwise Description Returns 1 if the OpenGL setting is enabled, 0 otherwise. See fglEnable() for list of draw settings. Note that this is an extremely slow operation and is discouraged. You can refer to standard OpenGL documentation for more information if needed. Example glIsEnabled(GL_LIGHTING) glLineWidth (num linewidth) Specifies the line width for subsequent lines draw in OpenGL Description Specifies the line width for subsequent lines drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glLineWidth(3); glPointSize (num pointsize) Specifies the point size in pixels for subsequent vertices drawn in OpenGL Description Specifies the point size in pixels for subsequent vertices drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glPointSize(5); mesh (node meshnode, int pervertexattribs, int flags) Creates an empty mesh and assigns it to meshnode Description Creates an empty mesh and assigns it to meshnode. The pervertexattribs takes a bit-wise ORed combination of the following attributes: MESH_POSITION (Added by default) MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Flags can be any of the following: MESH_STATIC_DRAW MESH_DYNAMIC_DRAW MESH_INDEXED Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE, MESH_STATIC_DRAW) meshaddindex (node meshnode, int index) Adds an indexed vertex to a mesh Description Adds an indexed vertex to the mesh associated with meshnode. This command is ignored if the mesh does not have a MESH_INDEXED flag. Example int newindex = meshaddindex(node(\"/mesh\",model()), 4) meshaddvertex (node meshnode) Adds a vertex to a mesh Description Adds a vertex to the mesh associated with meshnode. Returns the index of the added vertex. Example meshaddvertex(Model.find(\"mesh\")) meshdraw (node meshnode, int drawmode, int offset, int count [, int stride]) Draws a mesh Description Draws the mesh associated with meshnode. The value for drawmode can be any of the following: GL_POINTS GL_LINES GL_LINE_LOOP GL_TRIANGLES GL_TRIANGLE_STRIP GL_TRIANGLE_FAN Offset specifies which vertex index to begin at. Count specifies how many vertexes to set the drawmode. Stride specifies how many vertex indexes to skip between. For an indexed meshed, stride is ignored. Example meshdraw(node(\"/mesh\",model()), GLTRIANGLES, 0, 3, 0) meshinfo (node meshnode, int type[,int index, int param]) Gets the specified information from a mesh Description Gets the specified information from the mesh associated with meshnode. Index is the index of the requested vertex (base 0). Type is specified as one of the following for the mesh (index and param ignored): MESH_PER_VERTEX_ATTRIBS MESH_PER_MESH_ATTRIBS MESH_FLAGS MESH_NR_VERTS MESH_GET_INDEX - Returns the vertex index for the given index (only valid with MESH_INDEXED flag) The following are vertex specific types: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 If specifying a vertex, the following are valid for param: MESH_COLOR_RED MESH_COLOR_GREEN MESH_COLOR_BLUE MESH_COLOR_ALPHA MESH_POS_X MESH_POS_Y MESH_POS_Z MESH_TEX_S MESH_TEX_T Example double xposition = meshinfo(Model.find(\"mesh\"), MESH_POSITION, 6, MESH_POS_X) meshsetattrib (node meshnode, int attribid, double param1 [, double param2, double param3, double param4]) Adds/sets the value of attribid to the vertindex of a mesh Description Sets the value of attribid to be applied to the entire mesh associated with meshnode. The following attributes can be used as the attribid: MESH_NORMAL MESH_AMBIENT MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 MESH_SPECULAR MESH_SHININESS MESH_EMISSIVE Example meshsetattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) meshsetvertexattrib (node meshnode, int vertindex, int attribid, double param1 [, double param2, double param3, double param4]) Sets the value of attribid at the vertindex of a mesh Description Sets the value of attribid at the vertindex of the mesh associated with meshnode. The following attributes can be used as the attribid: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Note: The attribid must be defined previously when creating the mesh. Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE4, MESH_STATIC_DRAW) meshsetvertexattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) setdrawnamefunction (num boxwidth, num boxheight, node nodefunction[, num pval1, num pval2, num pval3]) Description This command gives direct access to the functionality that displays information in boxes below objects in the model. FlexSim's 3D display mechanism works by performing multiple drawing passes over the objects in the model. First, it gathers and caches data for what needs to be drawn. Then it goes through and draws the object shapes and calls the objects' custom draw functionality. Finally it draws any overlays such as connectors, information boxes, etc. The setdrawnamefunction() command, if called as part of an object's custom draw functionality, i.e. its OnDraw event or its Custom Draw Code trigger, will cause a callback to be fired when the drawing sequence gets to the information box step for that object. To do this, call the command and specify the size that you want the box to be drawn, and pass as the nodefunction parameter a reference to a node holding the code you want to fire to draw the box information, as well as up to 3 parameters that will be passed as param(1), param(2), and param(3) into that nodefunction. Then implement the nodefunction code to draw any information you want, using the drawflattext() command, or any other OpenGL drawing commands. Note that when the nodefunction is call, the OpenGL model view matrix will be set so that the (0,0,0) point is at the top-center of the display box, and one length unit represents one pixel on the screen. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object spacebase ([num view/object]) Description Set the OpenGL matrix to the scaled space of the current object/view. If the parameter is 0, then the object's base space matrix will be loaded. If the parameter is 1, then the view's space will be loaded, meaning any subsequent draw commands will face the viewer directly and not change scale. This command can only be used in OnDraw event and Custom Draw Code trigger. See drawtoobjectscale() when scaling the OpenGL space by the object's size. Example spacebase(0); spacerotate (num x, num y, num z) Description Apply rotation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glRotatef( z, 0.0f, 1.0f, 0.0f); glRotatef(-y, 0.0f, 0.0f, 1.0f); glRotatef( x, 1.0f, 0.0f, 0.0f); Example spacerotate(90, 0, 0) This rotates the current coordinate space by 90 degrees around the FlexSim x-axis. Subsequent draw commands will be performed from this new rotation. spacescale (num x, num y, num z) Description Apply scale transform to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glScalef(x,z,y); Example spacescale(2, 1, 1) This scales the current coordinate space by 2 times in the FlexSim x direction. Subsequent draw commands will be performed from this new scaling. spacetranslate (num x, num y, num z) Description Apply translation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glTranslatef(x,z,-y); Example spacetranslate(current.size.x, -current.size.y, 0) This translates to the bottom left corner of the object assuming no translation has previously been applied. Subsequent draw commands will be performed from this new location. textureaxis_s (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture S axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_s(1,0,0,0) textureaxis_t (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture T axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_t(0,0,1,0) Events Commands for creating, searching and manipulating events. addtoeventtypelegend (str name, num parameter, num value, str legendname) Description The eventtype legend allows you to associate a string with a given value for a given parameter in that eventtype. Passing a negative number for 'parameter' allows you to add a preceeding string to explain the parameter. If the 'parameter' is negative and the 'value' is -1, then it assumes the number is a pointer to a node and will display the node's path as a string. Example addtoeventtypelegend(index,-1,-1,\"resource: \"); // for p1, display the text \"resource: \" and display the path for the object addtoeventtypelegend(index,-2,0,\"covermode: \"); // for p2, display the text \"covermode: \" addtoeventtypelegend(index,2,1,\"YellowToGreen\"); // for p2, a value of 1 should display \"YellowToGreen\" instead of the number 1 addtoeventtypelegend(index,2,2,\"RedToGreen\"); // for p2, a value of 2 should display \"RedToGreen\" instead of the number 2 addtoeventtypelegend(index,3,0,\"\"); // for p3, this makes zeroes blank addtoeventtypelegend(index,4,0,\"\"); // for p4, this makes zeroes blank createevent (obj object, num time, num code[, str data, node involved]) Description For developer use. This command creates an event that will occur sometime in the future in the model's run. The event will be created for the object specified by object. It will occur time seconds from the time that this command is called. If an event needs to occur that the same simulation time that it was created at, time should be 0. When the event occurs, the OnTimerEvent event function of the class of object will be called. This function will be passed code, data, and involved. These values can be accessed in OnTimerEvent as eventcode, eventdata, and i. Generally, eventcode is used to determine what type of event is being created or executed. Eventdata is used as a description of the event for the user's benefit. It is generally not important to the execution of OnTimerEvent. Any objects that are involved in the event, such as a flowitem that is entering or exiting, are passed as involved and are referenced in OnTimerEvent as i. There are predefined values for code that the user should use listed below: 1 - EVENT_OPENINPUTS 2 - EVENT_OPENOUTPUTS 3 - EVENT_PROCESSFINISH 4 - EVENT_CREATEPART 5 - EVENT_DESTROYPRODUCT 6 - EVENT_CONVEYEND 7 - EVENT_BEGINLOADTIME 8 - EVENT_BEGINUNLOADTIME 9 - EVENT_ENDLOADTIME 10 - EVENT_ENDUNLOADTIME 11 - EVENT_ENDDELAYTIME 12 - EVENT_BEGINDOWNTIME 13 - EVENT_ENDDOWNTIME 14 - EVENT_ENDWAITTIME 15 - EVENT_MEETBATCHQTY 16 - EVENT_ENDTRAVELTIME 17 - EVENT_ENDSETUP If a user wishes to create their own types of events, they should use values for code that are greater than 100. See also eventcode and eventdata. Example if (current.subnodes.length >= current.mincontent) { createevent(current,5,EVENT_OPENOUTPUTS,\"openoutputs\",involved); } This creates an event that will occur in 5 simulation seconds that will open the output ports of the object specified as current, for the flowitem specified by involved, if the content of current is less than the label called mincontent of the object referenced by current. createtickevent (obj fluidobject) Creates a tick event for fluidobject and all objects assigned to that Ticker Description Creates a Tick event for the Fluid Object that is passed in and all of the other Fluid Objects that are controlled by the same Ticker. This allows the user to cause fluid material to move at times that are not the Ticker's normal tick times. The user can also pass a specific Ticker as the parameter to this command. Example createtickevent(current); delayevents (num value) Description For developer use. Delay all events in the eventlist. The times of all events in the eventlist will be incremented by value. Example delayevents(20) delayeventsofobject (obj object, num value) Description For developer use. Delay events of object. The timed events of object are incremented by value, and the eventlist re-sorted. Value may be positive or negative. Example delayeventsofobject(model().subnodes[2],20) destroyevent (node event) Description For developer use. Destroys a particular event from the event list. Example destroyevent(node(\"MAIN:/1/exec/events\").last) destroyeventsofobject (obj object [, num simtime, num code, str data, node involved]) Destroys events associated with object Description Destroys events associated with the given object. The first parameter, object, is the only required parameter. Other parameters are optional and provide a filter for choosing which events to destroy, as follows: time: If greater than or equal to the time that that the command is called, this parameter will filter events by their time. If the event's time is not equal to the time passed in, then the event will not be destroyed. Pass -1 if you don't want this as a filter. code: If greater than 0, this parameter filters events by their event code. If the event's code is not equal to the code passed in, the event will not be destroyed. data: If not NULL, this parameter filters events by the data string associated with the event. If the event's data string is not equal to the string passed in, the event will not be destroyed. involved: If not NULL, this parameter filters events by their involved node or object. If the event's involved node is not equal to the node passed in, the event will not be destroyed. Example destroyeventsofobject(model().subnodes[2]) destroymessageevents (obj object, num time, obj fromobj[, num param1, num param2, num param3]) Destroys message events associated with object Description Destroys message events associated with the given object. If no message parameters are included, all message events will be destroyed. Example destroymessageevents(current, time(), NULL, 8) eventcode <no parentheses> Description For developer use. This command returns the number value that was passed to the createevent() command as code. It is only used in the OnTimerEvent function of the library objects. It is generally used to identify the type of event that is occurring. This command should not have parentheses when it is called. See also createevent() and eventdata. Example if (eventcode == EVENT_OPENINPUTS) thisobjectdata->openinputs(); This calls a method called openinputs() on the object referenced by thisobjectdata if the value EVENT_OPENINPUTS was passed to the createevent() function. eventdata <no parentheses> Description For developer use. This command returns the string value that was passed to the createevent() command as data. It is only used in the OnTimerEvent function of the library objects. Generally, it is used as a description to the user of the type of event that is occurring. It is not generally used in the execution of the OnTimerEvent function, for speed reasons. This command should not have parentheses when it is called. See also createevent() and eventcode. Example if (comparetext(eventdata,\"openinputs\")) { thisobjectdata->openinputs(); } This calls a method called openinputs on the object referenced by thisobjectdata if the string value passed to createevent() is equal to \"openinputs\". eventget (num index, num thing) An event attribute for the event at index Description Returns an event attribute at the specified index in MAIN:/project/exec/events. thing can be: 1 = client 2 = time 3 = code 4 = data 5 = involved 6 = event node Example eventget(2,3) eventloginfo (num operation, num n1) Description For developer use. Returns a string value describing something related to the Event Log. Operations: ELI_GET_OBJECTPATH 1 - returns the path of the object at index n1 from the objectpaths array. ELI_GET_INVOLVEDPATH 2 - returns the path of the object at index n1 from the involvedpaths array. ELI_GET_OTHERPATH 3 - returns the path of the object at index n1 from the otherpaths array. ELI_EVENTTYPE_NAME 4 - returns the name of the eventtype at index n1 from the eventtypes array. ELI_LOGGEDEVENTTYPE_NAME 5 - returns the name of the logged eventtype at index n1 from the loggedeventtypes array. Other operations relating to the Event Log that return number values can be accessed using the applicationcommand() function: \"seteventlogging\" - enables or disables logging for eventtype n1. \"geteventlogging\" - returns whether logging is enabled for eventtype n1. \"getobjectpathslistsize\" - returns the size of the objectpaths array. \"getinvolvedpathslistsize\" - returns the size of the involvedpaths array. \"getotherpathslistsize\" - returns the size of the otherpaths array. \"geteventtypeslistsize\" - returns the size of the eventtypes array. \"getloggedeventtypeslistsize\" - returns the size of the loggedeventtypes array. \"geteventtypecode\" - returns the index of the eventtype by name passed as n1. Example string objectpath = eventloginfo(ELI_GET_OBJECTPATH,1); eventqty () Gets the number of events currently pending Description Returns the number of events currently pending. Example eventqty() listenerinfo (int info) Description For developer use. This command returns information for use within the OnListen and OnPreListen event functions. The information returned is information that was passed to the event you are listening to. Info 1 will return the engine event code. Engine event codes have macros such as SM_MESSAGE and SM_DRAW. Info 2 and 3 return pointers to associated treenodes. To set up listening, you add a \"listeners\" attribute to the object you want to listen to (Object A). The listeners attribute should have subnodes that are couplings to the object(s) that you want to listen from (Object B). Before an event fires on Object A, Object B's OnPreListen event function will fire. After an event first on Object A, Object B's OnListen event function will fire. You can also filter events by additing a subnode with number data below Object B's coupling node. The number data should be a bitwise sum of the bitshifted event codes you want to listen for. If the coupling has no subnode, the object will default to listening to every event. Example treenode current = c; treenode involved = i; int code = listenerinfo(1); treenode associated = tonode(listenerinfo(2)); treenode coupling = tonode(listenerinfo(3)); print(\"OnListen\"); print(\"current: \", current); print(\"involved: \", involved); print(\"code: \", code); print(\"associated: \", associated); print(\"coupling: \", coupling); logevent (num/str index/name[, obj object, obj involved, num p1, num p2, num p3, num p4]) Description Logs an event as an entry in the Event Log. Use the name passed into registereventtype() or the index returned by registereventtype(). Example logevent(\"MyEventType\",current,item,port); registereventtype (str name) Description Registers a custom event type for use with the Event Log. Returns the index of the eventtype to be used later by other commands such as logevent(). Example int index = registereventtype(\"MyEventType\"); startlisten (obj listener) Description For developer use. Tell the executive that an object is a listener. Not persistent across sessions. This command will add a node in the executive listener list pointing to listener. When a session is reloaded, or after a compile, listeners need to be reset. The listening mechanism can add a significant load to the executive, so use minimally. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. The listener must filter the message to decide whether to respond to the OnListen message. Refer to the Online Reference Guide for the parameters passed into an OnListen message. Example startlisten(so()) stoplisten (obj listener) Description For developer use. Tell the executive that this object is not a listener anymore. This command will remove the pointer to listener from the listeners list if previously added with the startlisten() command. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. Example stoplisten(so()) FixedResources Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object. evaluatepullcriteria (obj fixedresource, obj item, num portnr[, num bypassflags]) Causes the FixedResource object to re-fire its pull requirement Description Tells the FixedResource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. This command returns the value returned by the pull requirement field if the item can be pulled. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. Example evaluatepullcriteria(current, item, 1); // See also Pull Best Item picklist option getiteminvolved (obj item) Gets the object reference stored in the FixedResource involved variable for the item Description This returns the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getitemvar, and setiteminvolved commands, to store variables on the items the object receives. Example getiteminvolved(current.first) getitemsendto (obj item) Gets the value of the evaluated sendto for the item Description This returns the value of the evaluated sendto for the item if it is in a FixedResource and has been released. Example getitemsendto(item) getitemstate (obj item) Gets the FixedResource state of the flowitem Description Returns the FixedResource state of the flowitem. This will be one of 3 values: FRSTATE_INQUEUE: The flowitem is in-process; it has not been released yet. FRSTATE_READY: The flowitem has been release, but has not found a downstream object that is ready to receive it. FRSTATE_MOVEREQUESTED: The flowitem has been released, and a downstream object is ready to receive it, but the item is waiting to get picked up by a transport. For more information, refer to the FixedResource documentation. Example getitemstate(so()) getitemvar (obj item, num var) Gets the value of a FixedResource variable for the item Description This returns the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example getitemvar(current.first, 3) holditem (obj item) Holds the item if it has already been released Description Holds the specified item if it has already been released. This in effect \"unreleases\" the item so that it will not leave. This only applies if the item is in a FixedResource and it has already been released and has not been \"allocated\" to a downstream object (it is not waiting for a transport). Example holditem(item) inititem (obj item) Initializes the FixedResource variables of a flowitem Description Initializes the FixedResource variables of a flowitem, usually done when the flowitem first enters the fixed resource. This is usually already done for you, but may be used in some exceptional cases when developing your own BasicFR object behavior. Example inititem(item) pullitem (obj fixedresource, obj item, num portnr[, num bypassflags]) Description Tells the fixedresource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. If the pull evaluation is true, this command pulls the item immediately. This command returns 1 if the item was successfully pulled and 0 if not. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. You can specify BYPASS_ALL to immediately pull the item regardless of availability. Example pullitem(current, item, 1); // See also Pull Best Item picklist option receiveitem (obj station [, num port ] ) Tells the FixedResource to open inputs and receive a flowitem Description Tells the FixedResource station to open its inputs and receive a flowitem. The port parameter is optional, and should only be used if you know exactly which port you want to receive from. If the port parameter is specified, this object will try to receive any item from the upstream object if its corresponding output port is open, ignoring any items' previous send-to return values (similarly to how pull logic works). This function should be executed only once to receive an item, and it should only executed again once you have received (or have confirmed reception of) that item. See also releaseitem() command. This function should generally only be used from within a BasicFR's code fields, as other objects implement receiveitem() on their own. If the object receives an item immediately, then it will return 1, otherwise 0. Example receiveitem(current) recycleitem (obj item , num binrank ) Recycles the flowitem to the flowitem bin Description Recycles the specified flowitem to the flowitem bin. Binrank should be the rank in the flowitem bin to recycle to (texturedcoloredbox = 5, etc.) Example recycleitem(item, 5); releaseitem (obj flowitem [, num port ]) Releases the flowitem from its current object Description Releases the specified flowitem. A flowitem is released when it is free to exit the object currently containing it, at which time the Send to Port is evaluated. This command should only be used if the flowitem is in a BasicFR object and the flowitem has not been released already, or if it is any FixedResource and has been held with holditem(). The second paramter, port, is optional. If passed, the sendto will not be evaluated, but the item will instead be released out the specified port. If the flowitem exits, releaseitem will return 1. Otherwise it will return 0. See also receiveitem() command. Example releaseitem(item) resetuniqueid (obj flowitem) Resets the uniqueid attributes on a flowitem to a value that has not been assigned to another flowitem Description This command resets the uniqueid attribute on a flowitem to a value that has not been assigned to another flowitem already. This attribute is required to collect Full History information for the Full Report. This command should be used if a flowitem has not been destroyed but needs to be considered as a new item for data collection purposes. For example, if a flowitem is being recycled by a modeler (not with the built-in recycling functionality), they should call this when the flowitem is returned to circulation. Flowitems typically only have the uniqueid attribute when Full History collection is enabled. Example resetuniqueid(item); resumetransportsin (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportin command, and notifies those taskexecuters that they can resume their unload operation. The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsin variable. References to specific saved taskexecuters can be referenced by: nroftransportsinnode.subnodes[saverank].value Example resumetransportsin(current); resumetransportsout (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportout command, and notifies those taskexecuters that they can resume their load operation.The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsout variable. References to specific saved taskexecuters can be referenced by: nroftransportsoutnode.subnodes[saverank].value Example resumetransportsout(current); savestoppedtransportin (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport in complete trigger of a BasicFR object. If the BasicFR is not ready to receive an item that a taskexecuter is about to unload, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to receive it. When the BasicFR becomes ready to receive the item(s), it should call the resumetransportsin() command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their unload operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportin(current, transporter); return -1; } savestoppedtransportout (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport out complete trigger of a BasicFR object. If the BasicFR is not ready to send an item that a taskexecuter is about to load, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to send the item. When the BasicFR becomes ready to send the item, it should call the resumetransportsout command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their load operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportout(current, transporter); return -1; } setiteminvolved (obj item, obj involved) Description This sets the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. Only use this command if you are using the explicit FixedResource class as and object in your model. You can use this command, along with the setitemvar, getitemvar, and getiteminvolved commands, to store variables on the items the object receives. Example setiteminvolved(current.first, current.centerObjects[1]) setitemsendto (obj item, num value) Description This sets the value of the sendto for the item if it is in a FixedResource. Only use this command if you are using an explicit FixedResource class object and want to store a sendto value on the item before releasing it, and then later use the releaseitem() command, passing the port in. If you want to change the evaluated sendto of an item that has already been released, execute holditem(), and then releaseitem() again, instead of this command. Example setitemsendto(item, current.currentsendto) setitemvar (obj item, num var, num value) Description This sets the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3, and the value parameter should be whatever value you want to set it to. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the getitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example setitemvar(current.first, 3, time()) transportincomplete (obj object, obj item [, num inport, obj transporter]) Notifies the FixedResource object that item will now be moved into it Description This command notifies a downstream FixedResource object that the specified item will now be moved into it from an upstream object. This should only be used if the upstream object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the downstream FixedResource to manage data on how many items are slated to enter the object, but haven't arrived yet. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportincomplete(current.outObjects[port], item, opipno(current, port)); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem transportoutcomplete (obj object, obj item [, num outport, obj transporter]) Notifies the FixedResource object that item will now be moved out of it Description This command notifies the FixedResource object that the specified item will now be moved out of it. This should only be used if the object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the FixedResource to manage data on how many items are still in the object but are ready to leave. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportoutcomplete(current, item, port); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem Kinematics and Splines Commands associated with kinematics and spline math. addkinematic (node infonode, num x, num y, num z, num targetspeed, num acc, num dec, num startspeed, num endspeed, num starttime, num type ) Adds one kinematic operation to a set of kinematics Description Adds one kinematic operation to a set of kinematics. For more information, refer to the user manual documentation on kinematics. Example addkinematic(current.labels[\"kinematics\"], 1, 0, 0, 5,0,0, 0,0, time(), KINEMATIC_TRAVEL); deactivatekinematics (node kinematicsnode) Causes kinematics to do nothing when updatekinematics() is called Description Causes kinematics to do nothing when updatekinematics() is subsequently called instead of updating the object. Call this in the reset trigger of an object to free the object to move it around in the ortho view. Example deactivatekinematics(current.labels[\"kinLabel\"]); dynamicsplineall (node starttree) Description For developer use. Un-cache all splines for objects under starttree. Any splines in the model become editable or \"unlocked\". Spline rendering becomes slower in editable mode. In editable mode, splines can be edited dynamically. Example dynamicsplineall(model()) fastspline (obj spline, num perc [0-1]) Description For developer use. Get a spline mapping from a cached spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will use the precalculated values for the spline object given in spline. The parameter perc is the position along the spline of interest. The precalculated values are evaluated when the fastsplineall() or fastsplineupdate() commands are used. Example fastspline(splinestartnode,1) This activates the spline pointed to splinestartnode at its furthest point (100 percent along the spline). fastsplineall (obj starttree {model}, num res) Description For developer use. Cache all splines at once. The geometry for all splines in the model are evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinery(), splinery(), splinery(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineall(model(),20) fastsplineupdate (obj spline, num res) Description For developer use. Cache a spline's shape to increase it's speed. The geometry for all splines in the model are re-evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineupdate(so(),20) getkinematics (node infonode, num querytype[, num kinematicindex, num updatetime/traveldist]) Gets information from the specified kinematics operation Description Gets information from the specified kinematics operation. For more information, refer to the help documentation on kinematics. Example getkinematics(current.labels[\"kinematics\"], KINEMATIC_ARRIVALTIME, 1, current.size.x); initkinematics (node infonode, obj/num object/x[, num flags/y, num z, num rx, num ry, num rz, num flags, num unused]) Initializes a kinematic operation Description Initialize a kinematic operation. Infonode is a blank node that can hold kinematic information. Object is the object that you want kinematics to be performed on. flags defines various flags for how you want it to behave. The unused parameter deprecated, i.e. you can define this through the flags parameter. Refer to kinematics documentation in the user manual for more information. Example initkinematics(current.labels[\"kinematics\"], current) profilekinematics (node infonode, num kinematicindex) Prints information about the specified kinematics operation to the output console Description Prints information about the specified kinematics operation to the output console. For more information, refer to the help documentation on kinematics. Example printkinematics(current.labels[\"kinematics\"], 0); scalekinematicstotime (node kinematics, int kinematicnr, double scaletotime) Scales the kinematics to a defined time Description Scales the kinematic(s) to a defined time. This can be used to preserve the characteristics of the kinematics, i.e. accelerate->peak speed->decelerate, but have the total time it takes to perform the kinematics be defined by some other mechanism such as a distribution. If kinematicnr is 0, then the entire set of kinematics will be scaled to the given time. If kinematicnr is greater than 0, then only that kinematic will be scaled. The return value is the new end time of the kinematic(s). Example scalekinematicstotime(kinematics, 0, exponential(0, 10)); setkinematicsrotoffset (node infonode, num rx, num ry, num rz) Description Sets the initial kinematics rotational offset for a kinematics operation. For more information, refer to the help documentation on kinematics. Example setkinematicsrotoffset(current.labels[\"kinematics\"], 0, 0, 180); spline (obj spline, num perc) Description For developer use. Calculate spline mapping and set the current spline parameters using the spline object spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will not set the precalculated values for the spline object given in spline, as in fastspline().The parameter perc is the position along the spline of interest. This command does not lock precalculated values as when the fastsplineall() or fastsplineupdate() commands are used. A spline can be defined as any chain of objects that are connected from output ports to input ports. Pass the first object in the output port to input port chain as parameter 1. Example spline(splinestartobject,0.6) splinedraw (obj object) Description For developer use. Draw a line along a spline based on the current spline geometry as calculate by the spline(). Example splinedraw() splinedrawextrusion (obj object, num step, num wide, num high, num top, num side) Description For developer use. Draw a spline based on the current spline geometry as calculate by the spline() with a rectangular extrusion. Using parameters of spline object. Example splinedrawextrusion(current,20,1,2,1,1) splinelength () Description For developer use. Current spline parameter. This will return the length of the current spline. Example splinelength() splineposobject (obj object) Description For developer use. Position object according to current spline parameters. Example splineposobject(current) splinerx () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerx() splinery () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinery() splinerz () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerz() splinex () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinex() spliney () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example spliney() splinez () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinez() updatekinematics (node infonode, obj object [, num updatetime]) Updates the location of the object based on its kinematics Description Updates the location of the object based on the kinematics operation and the current time. For more information, refer to the help documentation on kinematics. Example updatekinematics(current.labels[\"kinematics\"], current, time()); Language Flexscript or C++ keywords and constructs. a <no parentheses> Description This command is used to reference objects during iterations of certain flexscript commands such as forobjectlayerunder() and forobjecttreeunder(). This command does not require parentheses, and can only be used in C++. Example See forobjecttreeunder(). break Description Break out of a loop or the case of a switch statement {} Example break; case value: Description One case in a switch statement {} Example case 5: { msg(\"case statement\",\"\"); } continue Description Continues immediately to the next iteration of a for or while loop without executing any of the remaining code in the current loop. Example if(thisloopnotneeded) continue; default : Description The default case in a switch statement {} Example default: { msg(\"case statement\",\"\"); } else { } Description Used in conjunction with the \"if\" statement to declare what (if any) code should be executed when the condition for the \"if\" is false. Example if( item.Weight < 100 ) { msg(\"TRUE\",\"\"); } else { msg(\"FALSE\",\"\"); } This example will display the TRUE message when the value of the item's Weight label is less than 100, and the FALSE message when it is not. for (initalstatement; whiletrueexpression ; countstatement) Description Perform a number of loops. The initialstatement will be executed once before starting the loop. The whiletrueexpression will be evaluated before executing each loop and the loop will stop as soon as this expression is true. The countstatement is executed at the end of each loop and usually increments a counter. Refer to the help manual under Writing Logic in FlexSim for more information. Example for(int i = 1; i <= 5; i++) { msg(\"for loop\",\"\"); } forobjecttreeunder (node container) { } Description Execute a block of code for each node that is in the tree under the node specified as container, including all sub-trees. To access the node that is currently active in the loop, the \"a\" command is used. The forobjecttreeunder() command can only be used in flexscript, not C++. Example forobjecttreeunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the model, including those inside other objects. if (num condition) { } Description If the condition is true (i.e. the conditional expression returns a 1), then the statement immediately following the closing parenthesis will be executed. If braces { } are what immediately follows the closing parenthesis, then the block of code within the braces will be executed when the condition is true. Nothing is executed if the condition is false (returns a 0), unless an \"else\" has been defined. Refer to the Users Manual for more information. Example if (item.Weight < 100) msg(\"TRUE\", \"\"); This example will display a popup message saying \"TRUE\" when the item's Weight label has a value less than 100 return (num value) Description This command causes a function to stop executing and return value to the function that called it. Example double res = item.rank * 5; return res; This sets the value of res to 5 times the rank of the item referenced by item. The value stored in res is then returned to the function that called this one. stringcompare (str text1, str text2) Compare strings for alphabetical order Description Compare strings for alphabetical order. The return value is zero if the strings are the same. If text1 is alphabetically before text2, a negative number is returned. If text1 is alphabetically after text2, a positive number is returned. Same as the strcmp() C++ function. Example stringcompare(\"zenith\",\"beta\") returns 1 comparetext(\"aqua\",\"yellow\") returns -1 switch (num value) Description Execute one of several possible cases, based on value Example int msgcase = msgparam(1); switch(msgcase) { case 1:msg(\"\",\"case 1\");break; case 2:msg(\"\",\"case 2\");break; default:msg(\"\",\"case 2\");break; } while (num expression) {} Description Repeatedly execute the following block {} while the expression returns a non-zero value. Be careful with this function because it can cause FlexSim to freeze if the value never becomes false. Example while(current.subnodes.length > 4) { current.last.destroy(); } Media Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths. applyshapefactors (obj object) Applies all of the shape factors to object Description This command applies all of the shape factors to the object if it has any. Example applyshapefactors(item); autoloadallmedia ([node thenode]) Description For developer use. This command loads all of the media (images and shapes) required by the current views, library, and model. Images are either .bmp or .jpg graphics files. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many images or shapes that need to be loaded. This command is not available in C++. Example autoloadallmedia(); This reloads all of the media needed for the current model. autoloadimages () Description For developer use. This command loads all of the images required by the current views, library, and model. Images are either .bmp or .jpg graphics files. This command may take some time to complete, if there are many images that need to be loaded. This command is not available in C++. Example autoloadimages(); This reloads all of the images needed for the current model. autoloadshapes () Description For developer use. This command loads all 3D shapes required by the current views, library, and model. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many shapes that need to be loaded. This command is not available in C++. Example autoloadshapes(); This reloads all of the shapes needed for the current model. autoloadsounds () Description For developer use. This command loads all sounds required by the current views, library, and model as declared by \"sound\" attributes on the objects. This command may take some time to complete, if there are many sounds that need to be loaded. This command is not available in C++. Example autoloadsounds(); This reloads all of the sounds needed for the current model. flyactive () Returns 1 if there is an fly path running, 0 otherwise Description Returns 1 if there is a fly path currently being run, 0 otherwise. Example flyactive() flyendnode (node x) Gets a reference to the node that represents the stopping point for the current fly path Description Returns a reference to the node in the tree that represents the stopping point for the current fly path. Example Used in the presentation builder GUI. flypath (obj view, num pathno [, num singlerun]) Description For developer use. This command begins the predefined flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypath(ownerview(c),1); This will run flypath number 1 in the view window containing an event's code. flypathadd (obj view, num pathno) Description For developer use. This command adds a flypath to the flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypathadd(ownerview(c),1); This will add a flypath to flypath number 1 in the view window containing an event's code. flypathreset (obj view, num pathno) Description For developer use. This command clears the points from the flypath numbered pathno in the view specified as view. Once the points have been cleared, a new set of flypath points can be generated. Example flypathreset(ownerview(c),1); This clears the flypath points out of flypath 1 in the view containing an event's code. flystart (obj view) Description For developer use. Start fly mode. Example flystart(ownerview(c)) flystop () Description For developer use. This command stops any active flypaths. Example flystop(); This causes all flypaths that are currently active to stop moving. flyto (obj view, num endtime, num x, num y, num z, num rx, num ry, num rz) Description For developer use. Fly to the specified viewpoint over time. Example flyto(sv(),10000,0,0,20,-50,0,-30); flyupdate () Updates the currently active fly path Description Updates the currently active fly path if there is one Example getshapeindex (str name) Gets the index of a loaded 3D shape Description Get the index of a loaded shape by its file path name. The file path name used in this command must use double backslashes as shown in the example. Use View -> Media Files to see a complete list of currently loaded shapes with their associated file path names and indexes. Example getshapeindex(\"fs3d\\\\Operator\\\\BasicOperator\\\\Chest.3ds\"); getsoundindex (str name) Gets the index of a loaded sound Description Returns the index of a loaded sound by the name associated with it in the project/media/sounds folder. Example getsoundindex(\"C:/My Sounds/APPLAUSE.WAV\"); gettextureindex (str name) Gets the index of a loaded image Description Get the index of a loaded image by name. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to a texture's name. Example gettextureindex(\"myimage\") loadimage (str file, str name) Description For developer use. Load an image directly. An image file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded images. Each image has a corresponding name and an index. This command will return the index corresponding to the loaded image. Example loadimage(\"c:/myimage.bmp\",\"myimage\") loadthreedobject (str file, str name) Description For developer use. Load a 3D model directly. A shape file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the loaded shape. Example loadthreedobject(\"c:/myshape.wrl\",\"myshape\") mediareset () Description For developer use. Unload all media. This will unload all currently loaded media from FlexSim: images; shapes; and sounds. Example mediareset() objectsoundcode (obj object) Gets the index of object's default sound Description Get the index of the object's default sound. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This function will return the index corresponding to the objects default sound assuming the object has a sound and soundindex attribute (default objects do not at this time) Example objectsoundcode(current) shapeinfo (num info[, p1, p2, p3]) Gets or sets information about loaded 3D shapes. Description Gets or sets information about loaded 3D shapes. Example shapeinfo(SHAPEINFO_GET_ANIMATION_COUNT, shapeIndex); soundchange (obj view, num sound, num volume, num tempo, num repeat, num balance) Change a currently playing sond Description Change a currently playing sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Interesting affects are achieved when the volume and balance are changed based on the viewpoint relative to an object making the object appear to be emitting the sound. Example soundchange(sv(),1,1,1,1,.5) soundload (str path+filename) Load a sound into FlexSim Description A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. Microsoft Wave Format files (.wav) can be loaded and played. Sounds can have their volume, balance and frequency adjusted dynamically. Multiple channels are managed through the Microsoft DirectSound Interface. Example int applauseindex = soundload(\"c:/My Music/APPLAUSE.WAV\"); soundplay (obj view, num soundindex, num volume [, num tempo, num repeat y/n, num balance]) Play a loaded sound Description Play a loaded sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplay(sv(),3,.75,.25,1,.5) Continuously play sound index 3 in the selected view with 3/4 volume, and 1/4 tempo and balanced evenly across both speakers. soundplayfile (obj view, str path+filename, num volume [, num tempo, num repeat, num balance]) Play a sound directly from a file Description Play a sound directly from a file. Sounds are attached to a window by the operating system, so the view parameter is important. The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplayfile(sv(),\"C:/My Sounds/APPLAUSE.WAV\",1,1,0,.5); soundstop (obj view, num sound) Stop a sound playing Description Stop a sound playing. Sounds are attached to a window by the operating system, so the view parameter is important. Example soundstop(sv(),1) unloadimage (int textureid) Description For developer use. Unload an image from the Media List by index. Example treenode view = node(\"VIEW:/1>Documents/Dashboard/1+/~/GraphPanel/1/1\"); repaintview(view); viewtofile(view, modeldir() + \"test.png\"); unloadimage(gettextureindex(modeldir() + \"test.png\")); int newindex = loadimage(modeldir() + \"test.png\", modeldir() + \"test.png\"); setobjecttextureindex(Model.find(\"Plane1\"), newindex); This example renders a dashboard chart to an image file, unloads that image from the media list, reloads the image back into the media list, and sets the texture index of a plane to that image. viewtofile (obj view, str path[, num width, num height]) Saves the specified view as a bitmap image Description Saves the specified view as a bitmap image to the specified file. Example viewtofile(node(\"VIEW:/active/ortho\"), modeldir() + \"screenshot.bmp\")); Miscellaneous Miscellaneous commands that have not been categorized. addsystemcontrolleritem (obj systemcontroller, num productid, num linenum, num target, num starttime [, num newcolumn1, num newcolumn2, num newcolumn3, num newcolumn4]) For Dynamo use Description For Dynamo use. Adds a new line item to a SystemController's schedule during a model run. Does not actually add a new row to the table. The parameters are the same data that the SystemController's schedule requires. The newcolumn parameters are numbers that could have been added to each row of the SystemController's schedule table. Example addsystemcontrolleritem(current.centerObjects[1],0,1,1,0); commandlineparam (str param) Description Returns the specified commandline parameter that was passed in if FlexSim is being run from the commandline. Example commandlineparam(\"nrofops\"); This example will return the \"nrofops\" commandline parameter. If a batch opens FlexSim with the line: flexsim.exe myfile.fsm -nrofops 8 Then within FlexSim, commandlineparam(\"nrofops\") will return \"8\". You can use either the unix-style hyphen (-) or the windows-style forward slash (/) to define a command-line parameter contextdragconnection (obj fromobject, obj toobject, str/num characterpressed) Creates an A or S connection between objects Description This command mimicks holding the specified letter down on the keyboard, clicking on the fromobject and then dragging to the toobject with the mouse. Whatever context sensitive action takes place when using the actual keyboard and mouse combinations, will occur when this command is executed. This command can be used in both Flexscript and C++. Example contextdragconnection(model().subnodes[5], model().subnodes3], \"A\"); createuserlibrary () Description For developer use. This command creates a new user library Example createuserlibrary(); deleteselected () Description For developer use. Deletes all selected objects in the model. Example deleteselected() dropuserlibraryobject (obj object [, obj ontoobject, num x, num y, num z, obj ontoview, num viewalreadyset]) Description For developer use. Drops the specified object as if it were dragged from a user library into the model. Example dropuserlibraryobject(node(\"MAIN:/project/userlibrary/1/1\")); duplicateselected () Description For developer use. Duplicates all selected objects in the model. Example duplicateselected() executefsfile (str filename, num direct) Description For developer use. Executes Flexscript code in a file. The specified file is loaded and its content is executed. The contents of the file are assumed to be valid Flexscript code. If direct is 0, then FlexSim's program directory will be concatenated onto the front of filename, otherwise filename will remain as it is. Example executefsfile(\"c:/myscript.fs\",1) filebrowse (str extension, str description, str startpath) Opens a file selection dialog Description Opens a file selection dialog that allows the user to select the specified file type(s). Different types should be separated by semicolons(;). The dialog's default directory is the path specified. The commands pdir() and cdir() can only be passed as the path parameter in C++. Example string filename = filebrowse(\"*.fsm; *.fsp; *.fsv; *.fss\",\"FlexSim Files\",pdir()); firecreateevent (obj object, num x, num y, num z, num iscopy [, num libraryfunctiononly]) Description For developer use. Fires the creation event of the specified object. x, y, and z are the rz the object was dropped at. Example firevalue of 0 islast(model()),0,0,0, 1); flipselected (num firstX, num firstY, num secondX, num secondY[, node roottree]) Flip selected objects across an axis Description Flip selected objects across the axis defined by the two passed xy points Example flipselected(1, 5, 2, 7) This example flips the selected objects across the axis defined by the points point (1, 5) and (2, 7) geteventtime (str EventName, num mode[1/2/3]) Gets a UserEvent's event time Description Returns a UserEvent's event time. Mode: 1 - Repeat time intervals, 2 - Exact event time, 3 - Time until event fires Example double remainingtime = geteventtime(\"myevent\",3); getlastfiletype () Description For developer use. Returns the type of the last file saved. 1 = Model file 2 = Project file 3 = View file 4 = Session file 0 = Other file Example if (getlastfiletype()) {pt(\"Known file type\"); pr(); } getlinecontrollerdata (obj linecontroller, num datatype, num column) For Dynamo use Description For Dynamo use. Returns data about the LineController's current job, 1 = ProdID, 2 = LineNum, 3 = Target, 4 = StartTime. 5 = Extra Column Example getlinecontrollerdata(current,1,0); getmodelunit (num querytype) Description Returns information about the model's unit settings. FlexSim's typical units are: time - 1 second, length - 1 meter, volume - 1 liter, mass - 1 kilogram. Also may return a name or abbreviation of the current model's units querytype can be one of the following values: TIME_MULTIPLE returns the number of seconds represented by each time unit in the current model LENGTH_MULTIPLE returns the number of meters represented by each length unit in the current model FLUID_MULTIPLE returns the number of liters represented by each fluid unit in the current model FLUID_TYPE returns 0 if the fluid units represent volume, or returns 1 if the fluid units represent mass DATE_TIME_NODE returns a reference to the date/time node in the model units tree START_TIME returns the start time in seconds (since Jan 1, 1601) START_TIME_NODE returns a reference to the start time node in the model units tree CURRENT_TIME returns the current time in seconds (since Jan 1, 1601) CURRENT_TIME_NODE returns a reference to the current time node in the model units tree STOP_TIME returns the next stop time in seconds (since Jan 1, 1601) STOP_TIME_NODE returns a reference to the stop times node in the model units tree START_YEAR returns the year associated with the start time as a number START_MONTH returns the month associated with the start time as a number betweeen 1 (Jan) and 12 (Dec) START_DAY returns the day associated with the start time as a number, where 1 indicates the first day of the month START_DAYOFWEEK returns the day associated with the start time as a number, where 0 indicates Sunday START_HOUR returns the hour associated with the start time as a number between 0 and 23 START_MINUTE returns the minute associated with the start time as a number between 0 and 59 START_SECOND returns the second associated with the start time as a number between 0 and 59 START_MILLISECOND returns the millisecond associated with the start time as a number between 0 and 999 CURRENT_YEAR returns the number of years since the model start time CURRENT_DAY returns the number of days since the model start time CURRENT_HOUR returns the number of hours since the model start time CURRENT_MINUTE returns the number of minutes since the model start time CURRENT_SECOND returns the number of seconds since the model start time CURRENT_MILLISECOND returns the number of milliseconds since the model start time CURRENT_YEAR_OF_TIME returns the year associated with the current time as a number CURRENT_MONTH_OF_YEAR returns the month associated with the current time as a number between 1 (Jan) and 12 (Dec) CURRENT_DAY_OF_MONTH returns the day associated with the current time as a number, where 1 indicates the first day of the month CURRENT_DAY_OF_WEEK returns the day associated with the current time as a number, where 0 indicates Sunday CURRENT_HOUR_OF_DAY returns the hour associated with the current time as a number between 0 and 23 CURRENT_MINUTE_OF_HOUR returns the minute associated with the current time as a number between 0 and 59 CURRENT_SECOND_OF_MINUTE returns the second associated with the current time as a number between 0 and 59 CURRENT_MILLISECOND_OF_SECOND returns the millisecond associated with the current time as a number between 0 and 999 TIME_NAME returns the name of the model time units TIME_PLURAL_NAME returns the plural name of the model time units TIME_ABBREVIATION returns the abbreviation of the model time units LENGTH_NAME returns the name of the model length units LENGTH_PLURAL_NAME returns the plural name of the model length units LENGTH_ABBREVIATION returns the abbreviation of the name of the model length units FLUID_NAME returns the name of the model fluid units FLUID_PLURAL_NAME returns the plural name of the model fluid units FLUID_ABBREVIATION returns the abbreviation of the name of the model fluid units START_TIME_STR returns the start time as a string, formatted by the date and time formats CURRENT_TIME_STR returns the current time as a string, formmatted by the date and time formats STOP_TIME_STR returns the next stop time as a string, formatted by the date and time formats TIME_FORMAT returns the time format used to format date/time strings DATE_FORMAT returns the date format used to format date/time strings Example getmodelunit(LENGTH_MULTIPLE) getreportnum (node report, int column, int rowsback) For Dynamo use Description For Dynamo use. Returns the value from a Report object that is in the specified column. The row is determined by subtracting the rowsback parameter from the number of rows in the table. Example double myval = getreportnum(current,3,0); groupsetnames (node namenode, num startnum, num append) Description For developer use. Sets the names of all of the selected objects in the model to the string data on namenode. If append is 1, then a number is appended to the end of each name, starting at startnum and increasing by 1 for each object. Example groupsetnames(\"WeldStation\",1,1); hideprogressbar () Description For developer use. Hides the progress bar Example hideprogressbar(); highestconnection () Gets the highest numbered server connection index Description Returns the highest numbered server connection index. Example int highconn = highestconnection(); insertcopy (obj originalobject, obj containerobject) Creates a copy of the flowitem and moves it into the container object Description Creates a copy of the flowitem and moves it into the container object, causing the OnReceive event of the container to execute. Example insertcopy(item, current); Creates a duplicate of the flowitem and moves it into the current object. integrityscan (obj class, obj start) Description For developer use. Checks that attributes have not been deleted from model objects, based on their class object. A search is done starting at the given starting node. Example integrityscan(rank(library(1)),model()) isprojectcompiled () Description For developer use. Returns 1 if the project has been compiled. Example isprojectcompiled() loadselectedfromfile (obj highlightedobj) Description For developer use. Loads previously saved tree file into the highlighted object. Example loadselectedfromfile(selectedobject(ownerview(c))) loadstate () Description For developer use. Loads the state of the project. If savestate() has been executed, then this command must be executed before you can run the model again. Example loadstate(); loaduserlibrary (str libfile [, obj libraryview, num reloadmedia, num changeitemcurrent, num autoinstall]) Description For developer use. Loads a library from the path specified in libfile. If reloadmedia is true, autoloadallmedia() will be called after loading the library. If autoinstall is true, the library's load and new model autoinstall objects will be added to the model. The libraryview and changeitemcurrent parameters are no longer used. Example loaduserlibrary(cdir() + \"libraries/mylib.fsl\"); memberadd (obj childobject, str parentname, num type) Description If type = 1, then the childobject is added as a member to a Time Table named \"parentname\". If type = 2, then the childobject is added as a member to a MTBFMTTR object named \"parentname\". This is useful for dynamically assigning operators to different shifts for instance. Example memberadd(model().subnodes[2],\"TimeTable1\",1) memberremove (obj childobject, str parentname, num type) Description If type = 1, then the childobject is removed as a member from a Time Table named \"parentname\". If type = 2, then the childobject is removed as a member from a MTBFMTTR object named \"parentname\". see memberadd() Example memberremove(model().subnodes[2],\"TimeTable1\",1) memberremoveall (str parentname, num type) Description If type = 1, then all members are removed from a Time Table named \"parentname\". If type = 2, then all members are removed from a MTBFMTTR object named \"parentname\". see memberremove() Example memberremoveall(\"TimeTable1\",1) moveobject (obj object, obj location[, num outport]) Moves object to the specified location Description This command moves the object to the specified location through the specified port. The specified port does not have to actually exist, this value is used by the receiving location to be able to reference the port the object came in through. When an object moves into location, the OnReceive event function of location is executed. This includes the OnEntry trigger function. Explicitly calling this on a flowitem with events queued up for it may cause problems. Only use when you know that no events are pending for the object being moved. Example moveobject(current.first,current.centerObjects[1]); This moves the first object that is inside the object referenced by current to the object connected to current's first center port. moveselectedintohighlighted (obj highlightedobj [, node selectedcontainer]) Description For developer use. Moves all selected objects in the model into the highlighted object. Example moveselectedintohighlighted(selectedobject(ownerview(c))) notifylinecontroller (node object, int controllernum, num output, num sendinglast [0/1]) For Dynamo use Description For Dynamo use. Informs a LineController connected to the object that material has left the line so the Controller can decide if the run is complete. The number of the LineController to be notified is the contollernum parameter. The object should report how much material (of any kind) has left it since the model began running and whether or not the material leaving is the last material in the object. Example notifylinecontroller(current,1,current.stats.output + 1,(current.subnodes.length == 1)); pickoptiononselect (obj view) Description For developer use. This command is used by pick list gui controls to modify the combobox text when an option is selected. Example pickoptiononselect(c); rotateselected (double angle, double x, double y[, obj roottree]) Description Rotates all selected objects in the model around the designated origin x/y location Example rotateselected(90, 5, 0) This example rotates selected objects 90 degrees around the location (5,0) savebyname (obj tree, str filename) Description For developer use. Saves the specified tree node to a file with the given name. Example savebyname(Model.find(\"MyProcessor\"), \"C:\\\\MyProcessor.t\"); savemodelprepare () Description For developer use. Prepares the model to be saved, including reseting, etc. Example savemodelprepare(); saveselectedtofile () Description For developer use. Saves all selected objects in the model to a tree file. Example saveselectedtofile() savestate () Description For developer use. Saves the state of the project. Once this command is executed, you can save your project (.fsp), then open in later, compile, execute loadstate(), and run from the previous spot you started from. Example savestate(); savetree (node tree, str extension, str description, str startingpath) Description For developer use. Opens a save file dialog prompting the user for a file name to save. The tree passed in will be saved with the specified name, unless a session is selected. Then the first parameter is ignored. cdir() and pdir() may not be directly used as the path in FlexScript. Example savetree(model(),\"fsm\",\"FlexSim Model\",documentsdir()); searchfornode (str/node searchstr, node startnode, num findnr[, num searchobjects]) Description For developer use. Recursively searches the startnode for a node with a name containing the searchstr. The findnr parameter is useful when the search finds multiple nodes containing the given name, specifying a number i here will give you the ith node found. Set searchobjects to 1 to search the object's data nodes. Example seteventtime (str EventName, num time, num timemode[1/2], num createevent[1/0]) Sets the \"Repeat Event Time\" for the global UserEvent Description Sets the \"Repeat Event Time\" for the specified global UserEvent. If timemode = 1, then timeval will be used directly; otherwise, the timeval - time() will be used. If createevent = 1, then in addition to updating the \"Repeat Event Time\", a single event will be created at the previous time specified. Example seteventtime(\"UserEvent1\",20,1,0); The global userevent named \"UserEvent1\" will have its \"Repeat Event Time\" to 20. setprogressbar (num progress) Description For developer use. Sets the progress bar to the specified value. Should be a value between 0 and 100. Example setprogressbar((numread / numtotal) * 100); showprogressbar (str caption) Description For developer use. Opens the progress bar with the specified caption. The bar's progress will be initialized to 0. Use setprogressbar to update the progess value. Example showprogressbar(\"Loading data, please wait\"); so () Gets a reference to the last node designated as so() Description This command returns a reference to the last node that was designated the selected object. This command is only used in the scripting window. To designate a node as so, right-click on the node in the tree and select Edit|Designate This Node (so). Any node in the tree can be designated the selected object. Example getnodename(so()) This returns the name of the object that is currently designated the selected object. This command would generally only be used in the scripting window. The final semicolon (;) is not needed in the scripting window. startuploadlibraries ([num viewalreadyset]) Description For developer use. Loads libraries on startup. Example startuploadlibraries() transfernodeobj (node movenode, node container) Moves movenode into the container node's object data Description This command moves movenode into the container node's object data. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernodeobj(current.attrs.find(\"body\"), current.next); updatereport (num/str/node report) For Dynamo use Description For Dynamo use. Causes the specified Report to add a new row to its table and populate it correctly. This is used to add entries that are not time-based. Example updatereport(\"ResultsReport\"); userinput (obj targetnode, str text [, int stop]) Prompts the user for a value in a dialog box Description Prompts the user for a value in a dialog box. The value is placed in the specified node. The model does not stop running while the dialog is open unless the stop parameter is specified. If the stop parameter is specified, then the model stops until the dialog is closed and it returns the value. Example userinput(model().subnodes[3].labels[\"myLabel\"],\"Please enter a value\"); validatename (obj node, num isviewtext [, obj object]) Description For developer use. Makes sure the name of node is a valid FlexSim name, replacing invalid characters with underscores and bringing up a message if changes were made. If isviewtext is 1, it assumes the node passed is an edit field, and it changes the viewtext of the field, instead of the name of the node. If the object parameter is specified, it checks that object's name against all the other names of objects in its container. If there are names that are the same, it will pop up an error message. This command is called when you press the Apply or OK buttons in an object's Properties window. Example validatename(current, 0); Model Execution Commands for stopping, starting, and managing simulation runs. endreplication (num onlyifexperimenting) Ends the current experimenter replication Description Will end the current experimenter replication. Use this if your experiment's end time is dependent on a certain condition becoming true instead of a set end time. Specify 1 for onlyifexperimenting to make sure that you only stop if you are running the experiment. Example if(current.stats.output >= 5000) endreplication(1); fastforward () Description For developer use. Saves off the current runspeed, sets the run speed to max, suspends draw, and then runs to the next stop time. Once the next stop time is reached drawing is resumed and the runspeed is restored. Example fastforward() getrunstate ([int checkProcessingEvent]) Returns 1 if the model is currently running, 0 if not Description Returns 1 if the model is currently running, 0 if not. If you pass a true value, returns whether an event is currently executing. Example if(!getrunstate()){msg(\"Model Stopped\", \"The model is not running right now.\",1);} If executed from the script window, this message will only appear if the model is stopped. go ([num fast]) Starts the simulation run Description This command starts the simulation run. If there are any events in the event queue, they will occur when the clock reaches them. If there are no events in the queue, the clock will stop. This command will not reset the simulation. If fast is 1, then it will not bind objects before starting. This improves speed if you are stopping and starting the simulation often. See also runfunction(). Example stop(); if (msg(\"Model Stopped\",\"Continue?\")==1) { go(); } This stops the model then prompts the user if it should start again. If the user presses \"OK\", the model continues from where it was stopped. realtime ([num timecode = 0]) Gets the real clock time Description Returns the real clock time in a variety of formats based on the timecode: 0 = the number of seconds and milliseconds since midnight, Jan 1, 1970 1 = the number of seconds since midnight, Jan 1, 1970 2 = the number of milliseconds since the last second change 10 = a time string with format hh:mm:ss 11 = a date string with format mm/dd/yy 12 = a date/time string with format Mon Nov 15 15:49:12 2004 Example string curdatetime = realtime(12); resetexperiment () Description For developer use. Reset the experiment without performing a full model reset. It is typically used internally by the experiment manager. Example resetexperiment() resetlayer (obj layer) Description For developer use. Resets the layer passed. Use resetmodel instead. Example resetmodel ([num buildflexscript]) Resets the model Description Resets the model. Use this command instead of reset(). The parameter specifies whether the engine should build all flexscript functions as well. Example resetmodel() resetstats () Description For developer use. Reset all object statistics without performing a full model reset. It is typically used internally by the experiment manager. Example resetstats() runfunction (num noreset) Description For developer use. Block user input/output, perform a model run at maximum speed possible by cpu, and return control when stoptime is met. If stoptime = 0, the stoptime is assumed to be 1000. See go(). Example runfunction(1) runspeed (num speed[, num precisionMode]) Sets the simulation speed Description This command sets the speed at which the simulation will run. It is the same as clicking and dragging the slider bar on the Run Control window, but more precise. The speed that the model will attempt to run at is defined as the number of simulation time units per real second. The model may not actually achieve this speed if the computer cpu can not keep up. precisionMode defines the precision to use. If 0, the precision mode will remain what it was before the call. If you pass RUN_SPEED_LOW_PRECISION, it will set to a low precision run speed. If you pass RUN_SPEED_HIGH_PRECISION, it will run in high precision mode. This is used for emulation purposes. The precision mode will be reset to low precision on every reset, so you need to have something in your model set it back on reset or when the model starts to enable high precision mode. Example runspeed(10); go(); This sets the speed to 10 simulation seconds per real second, then runs the model. skip () Description For developer use. Advance the model run by one step (process exactly one event) and then process any and all events at that same exact model time. Example skip() step () Description For developer use. Advance the model run by one step. One step means to process exactly one event. Example step() stop ([num fast]) Stops the simulation run Description This command stops the simulation clock from running. The model stops with all of its pending events still in the queue. If the user starts the model again before resetting, the model will continue from the exact time that it stopped at. If fast is 1, then FlexSim will not rebind objects. This will improve speed if you are stopping and starting often. Example stop() stoptime (num time [, num stopNum=1]) Sets the time when the simulation should stop Description This command sets the time at which the simulation should stop running. The model will not necessarily stop at the exact time specified, but will stop at the first system check on or after the specified stop time. The model may stop early if there are no more events to execute. If stopNum is specified, the stop time at that rank will be set. If time is -1, the command returns the stoptime of stopNum. If time is 0 and stopNum is -1, all stop times will be reset such that there is only one disabled stop time at time 0. Example if (stoptime(-1) < 500) stoptime(500); This sets the stoptime to 500 if it was less than 500 to begin with. updatestates () Updates the states of all objects in the model Description Updates the states of all objects in the model. Additionally, this command also updates the content stats of all the objects. The 'Stop' button and menu option both call this function before executing a stop() so that objects' stats are updated. Otherwise, reports will not reflect the time the object was in its last state. Example updatestates(); NetworkNodes Commands associated with NetworkNode objects and network paths. closenodeedge (obj object, num edgenum) Closes entry to the networknode's edge Description Closes entry to the networknode's specified edge number. The edge's color will turn orange indicating it is closed. Open or close status of an edge will only be checked by a traveler when traveling from one node to the next (not when entering a node from an offset) Example closenodeedge(current.centerObjects[1], 3); getedgedist (obj netnode, num edgenum) Gets the distance of the edge of a network node Description Returns the distance of the specified edge of the network node. Example getedgedist(current, 1) getedgespeedlimit (obj netnode, num edgenum) Gets the speed limit of the edge of a network node Description Returns the speed limit of the specified edge of the network node. Example getedgespeedlimit(current, 1) getnetnode (obj object, num nodenr) Gets the nth network node connected to object with an A connection line Description Returns the nth network node connected to the object with a \"blue\" or \"station\" connection line Example getnetnode(current, 1) getnetnodespline (obj netnode, num edgenr) Gets a reference to the spline head of netnode's edge edgenr Description Returns a reference to the spline head for the specified edge of the network node. You can use spline() commands to then access location data for that spline. Note that the spline head may not be inside the network node you're passing, but rather may be in the network node on the other side of the edge. You can use the isedgeforward() command to query whether the spline is inside the network node. If not, then spline percentages disances passed to the spline() command will be backwards. Example treenode splinehead = getnetnodespline(netnode, 2); getnetworkdistance (num fromnetnoderank, num tonetnoderank) Gets the network distance between two network nodes Description Returns the network distance between the network nodes. Note that the network nodes are referenced by their member ranks, not by the pointer to the network node. Use rankfromnetnode() to get a network node's member rank. Example getnetworkdistance(rankfromnetnode(current), rankfromnetnode(current.outObjects[1])); getnextnetnode (num fromnn, num tonn) Gets the rank of the next network node from fromnn in order to get to tonn Description Returns the rank of the next network node to go to from one network node in getting to the destination network node. The return value and parameters will all be network node member ranks. Use rankfromnetnode() to get the member rank of a network node, and netnodefromrank() to get the network node from the member rank. Example treenode nextnode = netnodefromrank(getnextnetnode(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\")))); getnextnetnodeoutport (num fromnn, num tonn) Gets the output port of the network node fromnn in order to get to tonn Description Returns the output port, or edge number, to go to in getting from a source network node to a destination network node. Example int outport = getnextnetnodeoutport(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\"))); gettenavigator (obj taskexecuter) Gets the current navigator that a taskexecuter is connect to Description Returns the current navigator that a taskexecuter (TE) is connected to, either DefaultNavigator or DefaultNetworkNavigator. Example treenode navigator = gettenavigator(current); gettenetnode (obj taskexecuter) Gets the current network node that a taskexecuter is attached to with an A Connection Description Returns the current network node that a taskexecuter (TE) is attached to with a red line. Example treenode netnode = gettenetnode(current); gettenetworkinfo (obj taskexecuter, obj destobj, num info) Gets information regarding the current state of a taskexecuter on a node network Description Returns information regarding the current state of a taskexecuter on a node network. Valid queries are as follows: NETWORK_INFO_DEST_NET_NODE_RANK - returns the destination column/rank of the network node that the TE would travel to were he to be given a travel task to destobj. Usually this will simply be the network node attached to destobj, but if multiple network nodes are attached to destobj, the command will find the closest one. NETWORK_INFO_ORIGIN_NET_NODE_RANK - returns the origin column/rank of the network node that the TE would start from were he to be given a travel task to destobj. Usually this will simply be the current network node where the TE is located, but if that network node has virtual exits, the command will find the virtual exit that renders the shortest travel distance. NETWORK_INFO_DISTANCE - returns the shortest travel distance to the destination object through the network. NETWORK_INFO_CUR_DIST_ALONG_EDGE - Only valid when the TE is actively doing a travel task. This returns the current distance that the TE has traveled along its current network edge. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_ORIGIN_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the origin node at which the TE starts its current travel operation. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_DEST_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the destination node to which the TE is traveling for its current travel operation. For this query, destobj should be NULL. Example int destrank = gettenetworkinfo(current, NULL, NETWORK_INFO_CUR_TRAVEL_DEST_RANK); isedgeforward (obj netnode, num edgenr) Returns 1 if the network node's edge is forward, 0 otherwise Description Returns 1 if the network node's edge is \"forward\" meaning when created, the connection was dragged FROM this network node to the other network node. If the edge is forward, then the spline head is contained by this network node, and the spline distance values go forward from this network node. Example isedgeforward(current, 2) netnodefromrank (num rank) Returns the network node member at rank rank Description Takes a network node member rank and returns the actual reference to the network node. Example treenode netnode = netnodefromrank(5); opennodeedge (obj networknode, num edgenum) Opens entry to the networknode's edge Description Opens entry to the networknode's specified edge number. Closing a node's edge with closenodeedge() blocks travelers from entry onto the edge. This command opens the edge up again. Example opennodeedge(current.centerObjects[1], 3); Opens node edge 3 of a NetworkNode connected to center port 1 of the current object. optimizenetwork () Causes the model's network navigator to regenerate its distance table Description Causes the model's network navigator to regenerate its distance table. Use this command if you are dynamically connecting edges in your network during the simulation run. This may take several seconds to do for large networks. Example optimizenetwork() rankfromnetnode (obj netnode) Returns the member rank of network node netnode Description Takes a network node reference and returns the member rank of that network node. Each network node has a specific \"member rank\", which is used as a row/column reference in the network's distance and next node tables. The first network node that is added to a model gets member rank 1, the second gets member rank 2, and so on. Example int memberrank = rankfromnetnode(current); reassignnetnode (obj taskexecuter, obj networknode) Description TaskExecuters using a NetworkNode system are always associated with a specific NetworkNode in the system (red line graphic) which continually changes as they travel around. This command reassigns the specified taskexecuter to networknode. Warning!!! Do not execute this command unless the TaskExecuter is on a network, and unless you know the TaskExecuter is not currently executing a travel task. Example reassignnetnode(current, current.centrObjects[5]); Reassign the current TaskExecuter to the NetworkNode connected to its fifth center port. redirectnetworktraveler (obj traveler, obj newdest) Description Attempts to change the end destination of the traveler to that of the newdest object. Only works if the traveler is currently on a TASKTYPE_TRAVEL task and is on a travel network. Returns 1 if successful. Example redirectnetworktraveler(traveler, Model.find(\"Processor5\")); Redirects the traveler to an object in the model named Processor5 assuming traveler is a pointer to a taskexecuter currently traveling on a network node system and Processor5 is connected to the network. trafficcontrolinfo (obj trafficcontrol, num info [, num a, num b]) Gets information on a traffic controller Description This command gives you access to various information on a traffic control, as well as lets you direct the traffic control to perform logic. Logic/data that is performed/returned is based on the info parameter, as follows: trafficcontrolinfo(tc, TCI_NR_ACTIVE_TRAVELERS) - returns the total number of active travelers in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER, num travelnr) - returns a reference to the nth active traveler in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_COUPLING, num travelernr) - returns a reference to a coupling node, stored in the Traffic Control's variables tree, that is associated with the nth active traveler. This coupling can be used to stored custom user information regarding that active traveler. To do this, add sub-nodes to the coupling node with nodeinsertinto(), add data, etc. Note that once the active traveler leaves the traffic control area, the coupling, and its sub-nodes, will automatically be destroyed. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_RANK_FROM_TRAVELER, obj traveler) - This command takes a reference to a traveler object and returns which index in the traffic control's active travelers is associated with that traveler. If zero is returned then the object is not an active traveler in the traffic control. trafficcontrolinfo(tc, TCI_NR_MEMBERS) - Returns the total number of network nodes that are members of the traffic control area trafficcontrolinfo(tc, TCI_MEMBER, num membernr) - Returns a reference the nth network node member of the traffic control trafficcontrolinfo(tc, TCI_MEMBER_COUPLING, num membernr) - Returns a reference to a coupling node, stored in the traffic control's variables, that is associated with the nth network node member of the traffic control. Like TCI_ACTIVE_TRAVELER_COUPLING, this node may be used to store data associated with that network node. trafficcontrolinfo(tc, TCI_MEMBER_RANK_FROM_NETWORK_NODE, obj netnode) - Takes a network node reference and returns the member index of that network node in the traffic control. If zero is returned then the network node is not a member of the traffic control. trafficcontrolinfo(tc, TCI_NR_ENTRY_REQUESTS) - Returns the number of entry requests currently in queue waiting to enter the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_TRAVELER, num requestnr) - Returns a reference to the traveler associated with the nth entry request, who is waiting get into the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NETWORK_NODE, num requestnr) - Returns a reference to the network node where the traveler is waiting, associated with the nth entry request trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NODE, num requestnr) - Returns a reference to a node associated with the nth entry request. Like TCI_ACTIVE_TRAVELER_COUPLING, you may add sub-nodes to store data associated with the request. Do not, however, change the data on this node, as this is used by the traffic control logic. trafficcontrolinfo(tc, TCI_ALLOW_ENTRY, num requestnr) - Calling this command will instruct the traffic control to allow the traveler associated with the nth entry request to enter the traffic control area. trafficcontrolinfo(tc, TCI_SET_ENTRY_REQUEST_RANK, num requestnr, num settorank) - Calling this command will cause the traffic control to rerank its nth entry request to the specified rank. Also, a note regarding using the traffic control triggers to override the traffic control's default logic. The traffic control's OnEntryRequest trigger, which fires when a traveler first requests entry into the traffic control area, can take 3 different return values: TC_ON_ENTRY_REQUEST_DEFAULT - If this value is returned from the trigger, the traffic control will perform its normal filtering logic. TC_ON_ENTRY_REQUEST_ALLOW - If this value is returned, the traffic control will ignore its default logic and simply allow the traveler into the area. Note that if this is used, the traffic control will ignore its maximum capacity variable, so depending on the logic you define, the number of travelers in the area may exceed the maximum capacity variable you specify on the traffic control. TC_ON_ENTRY_REQUEST_QUEUE - If this value is returned, the traffic control will ignore its default logic and add the request to its request queue, disallowing the traveler from entering the area at that time. The traffic control's OnExit trigger may take one of two return values: 0 - If this value is returned, the traffic control will perform its default logic, allow other travelers to enter, etc. 1 - If this value is returned, the traffic control will do nothing. In this case the user should use the trigger to explicitly tell the traffic control which traveler(s) to receive using TCI_ALLOW_ENTRY. If you plan on implementing your own custom logic for allowing travelers into the area, then it is recommended that you use the traffic control's default \"Mutual Exclusion\" mode. Example treenode netnode = trafficcontrolinfo(tc, TCI_MEMBER, 2); Object Data Commands for accessing and assigning data on objects. assertvariable (obj object, str variablename, num datatype) Gets a reference to variable variablename of object, creates the variable if it does not exist Description This command returns a reference to a variable with the given name. If the variable does not exist, one is created with the defined data type. Example treenode newvar = assertvariable(Model.find(\"/Processor1\"),\"MyVariable\", DATATYPE_NUMBER); classobject (obj object) Returns the class object of an instance Description Returns the class object of an instance. Example if(classobject(current) == library().find(\"?Processor\")) { pt(\"Processor1 is an instance of the Processor class.\");pr(); } This prints a message to the output console if current is a Processor. contentunder (node thenode [, num objectsonly) Description This command returns the number of nodes in the tree that are inside the node specified as thenode plus the number of nodes that may be contained in any sub-trees that begin at that layer. If thenode does not contain any other nodes, this command returns 0. If objectsonly is not specified or 0, any node in the FlexSim tree can be passed as thenode. If objectsonly is not 0, any node passed in as thenode that isn't an object will return 0. Example if (contentunder(current) >= getvarnum(current,\"maxcontent\")) { current.input.close; } This closes the inputs of current if the number of objects contained under current is greater than or equal to the variable called maxcontent of the object referenced by thisobjectdata. emptyfluidobject (obj object) Sets the contents of the fluid object to 0 Description Sets the contents of the fluid object to 0. Example emptyfluidobject(current); fluidcontent (obj fluidobject) Gets the current fluid content of fluidobject Description Returns the current fluid content of the specified Fluid Object. It is the same as reading the \"curcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objcontent = fluidcontent(current.outObjects[1]); fluidmaxcontent (obj fluidobject) Gets the max fluid content of fluidobject Description Returns the defined maximum fluid content of the specified Fluid Object. It is the same as reading the \"maxcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objmaxcontent = fluidmaxcontent(current.outObjects[1]); getanimationvar (obj object, num/str animation, str varName) Gets the current value of an animation variable Description Gets the current value of an animation variable. See setanimationvar() for more information on animation variables. Example treenode curItem = getanimationvar(current, \"Animation1\", \"Item1\"); getcreationtime (obj object) Gets the time that a flow item was created Description Returns the time that a flowitem was first created. Example time() - getcreationtime(item) getentrytime (obj object) Gets the time that a flow item entered the current object it is in Description Returns the last entry time of the item (the time the flowitem last entered another object). Example time() - getentrytime(item) getframe (obj object) Gets the current Shape Frame being drawn for object Description Returns the current 3D shape frame that is being drawn for the object. If the 3D shape assigned to the object was named myshape.3ds, and if two additional 3D shapes with file names myshapeFRAME1.3ds and myshapeFRAME2.3ds resided in the same directory as myshape.3ds, then the two additional files would be loaded into FlexSim automatically at the same time myshape.3ds was loaded, and setting the object's frame from 0 to 1 to 2 would change the object's shape to each of the shapes defined by the three files in order. Example if(getframe(current) == 3)) setframe(current, 5); getobjectshapeindex (obj object) Gets the index number of the 3D shape assigned to object Description Returns the index number of the 3D shape currently assigned to the object. Example getobjectshapeindex(item); getobjecttextureindex (obj object) Gets the index number of the image assigned as the texture for the object's 3D shape Description Returns the index number of the bmp or jpeg image currently assigned as the default texture for the object's 3D shape. Example getobjecttextureindex(item); getvarnode (obj object, str/num var) Gets a node reference to an object's variable Description Returns a reference to the specified variable's node in the specified object. Example treenode schedule = getvarnode(current,\"schedule\"); getvarnum (obj object, str/num var) Gets the value of an object's numeric variable Description Returns the numeric value stored in the specified variable of the specified object. Example double speed = getvarnum(current,\"speed\"); getvarstr (obj object, str/num var) Gets the value of an object's string variable Description Returns the string data stored on the specified variable of the specified object. Example pt(getvarstr(model().subnodes[2],\"creationtrigger\")); isclasstype (obj object, num/str classtype) Compares the object to classtype, returns 1 for yes, 0 for no Description Returns whether or not the object is of the given classtype. 1 means yes, 0 means no. Possible classtype parameters are: CLASSTYPE_FLEXSIMOBJECT CLASSTYPE_FIXEDRESOURCE CLASSTYPE_TASKEXECUTER CLASSTYPE_NETWORKNODE etc. Example isclasstype(current, CLASSTYPE_DISPATCHER); reassignticker (obj fluidobject, obj ticker[, int resortticker]) Reassigns the Fluid Object's ticker Description Changes the Fluid Object passed in as the first parameter from the control of its current Ticker, to the Ticker that is passed in as the second parameter. The object will then have its fluid movement calculated whenever the new Ticker's tick-time elapses. It is recommended that Fluid Objects that are connected to each other always be controlled by the same Ticker. If resortticker is 1, then the new Ticker will immediately resort its list of controlled objects. This may change the order that some fluid objects are evaluated and may have side-effects in the model behavior. Example reassignticker(current,Model.find(\"Ticker2\",1); setanimationvar (obj object, num/str animation, str varName, num/obj toValue) Sets the value of an animation variable on an object Description Sets the value of an animation variable on an object. Animation variables are attributes of an animation that may need to dynamically change for different runs of the animation, such as surrogates, time between keyframes, or position/rotation/size values of a given keyframe. For example, you may use surrogates in building your animation. You do this by choosing a default visual from the flowitem bin to use as you create the animation. Then when the simulation runs, you substitute real flowitems in for those surrogates when you run the simulation. You do this substitution by setting the value of an animation variable that you've associated with that surrogate to the actual reference to the flowitem. Another example is you may use an animation variable to dynamically define the z position of a keyframe at run-time. Example setanimationvar(current, \"Animation1\", \"Item1\", current.first); setframe (obj object, num/str toframe) Sets the shape frame of an object Description Sets the frame attribute of the object to the framenumber. The frame defines which 3D image to display. This is a nice way of changing the 3D shape of an object on the fly. There are two ways to define frames on an object. First, you can do it through the naming of various 3D files. For example, if the object was assigned Operator.3ds as its default shape, and there are additional files in the same directory as Operator.3ds named OperatorFRAME1.3ds, OperatorFRAME2.3ds and OperatorFRAME3.3ds, then the frame attribute could be set to 0,1,2, or 3 which would change the displayed shape to each of the 3ds files respectively. Secondly, you can add sub-nodes to an obejct's shape attribute, each with a path to the 3D file associated with that frame. Subsequently, frame 1 would be associated with the shape attribute's first sub-node, etc. This is the method used within FlexSim's environment to define shape frames. If toframe is a string, then the latter method is assumed, and it will find the shape attribute sub-node with the corresponding name. One use of this command would be to change the 3d shape in the OnDown trigger to show a \"broken\" shape. Example if(getframe(current) == 3)) setframe(current, 5); setobjectbillboard (obj object, num mode) Sets the billboard attribute of the visual tool object Description This command sets the billboard attribute of the visual tool object. The following modes are available: 0: No Billboard, the visual tool will display based on its set rotation. 1: Vertical Billboard (plane only), this will cause the plane to stand vertically in the model and always face toward the camera along the same viewing plane. 2: All Around Billboard (plane only), this will cause the plane always present its face to you no matter what the viewing angle is. 3: Screen Locked Billboard, locks the Visual Tool in front of the view. Example setobjectbillboard(current, 1); setobjectshapeindex (obj object, num index) Sets the index number for the 3D shape of an object Description Sets the index number for the 3D shape of an object. For the new index to take effect, the shape node of the object must be removed or renamed, so this command renames the shape node to \"_shape\" for you. The index number must be a valid index number of a currently imported 3D shape. To view currently imported 3D shapes and to import more shapes, use View -> Media Files. See setframe() as another solution to changing the 3D shape of an object on the fly. Example setobjectshapeindex(item,getshapeindex(\"fs3d\\\\Processor.3ds\")); setobjecttextureindex (obj object, num index) Sets the index number of the image assigned as a texture for the object's 3D shape Description Sets the index number of the bmp or jpeg image to be assigned as the texture for the object's 3D shape. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Note that this command does not change the object's imageobject attribute so the original texture will return when the model is reset. Example setobjecttextureindex(item,gettextureindex(\"bitmaps\\\\flowitempicture.bmp\")); setresetposition (obj object) Sets the reset position of the object Description Sets the reset position of the object to its current position. Example setresetposition(current); setvarnum (obj object, str/num var, num value) Sets the value of an object's numeric variable Description Set the specified variable on the object to the number passed in as value. Example setvarnum(current.centerObjects[1],\"speed\",1.5); setvarstr (obj object, str/num var, str value) Sets the value of an object's string variable Description Set the string value of the specified variable on the object. Example setvarstr(current,\"cycletime\",\"return exponential(10,1);\"); switch_enablestats (obj object[, num off/on]) Get or set the \"stats\" flag of the object Description Get or set an object's \"stats\" flag. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. Example switch_enablestats(so(),1) switch_hideconnectors (obj object[, num off/on]) Get or set the \"Hide Connectors\" flag of the object Description Get or set the \"Hide Connectors\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the connectors will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. Example switch_hideconnectors(so(),1) switch_hidecontents (obj object[, num off/on]) Get or set the \"Show Contents\" flag of the object Description Get or set the \"Show Contents\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the contents of an objects will stop the display of objects (e.g. flowitems) contained within it. Example switch_hidecontents(so(),1) switch_hidelabel (obj object[, num off/on]) Get or set the \"Show Name\" flag of the object Description Get or set the \"Show Name\" flag of the object. A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. A value of -1 gets the current value for the switch. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. Example switch_hidelabel(so(),1) switch_hideshape (obj object[, num off/on]) Get or set the \"Show 3D Shape\" flag of the object Description Get or set the \"Show 3D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. Example switch_hideshape(so(),1) switch_showobject (obj object[, num off/on]) Expand/collaps the object data of an object node Description Expand or collapse the object data of an object node in a tree view. This is analogous to clicking the > next to the object node in a tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_showobject(so(),1) updatelocations (obj object) Updates the location of the object and the objects inside of it Description This command causes the object to update the location of itself and possibly the objects inside of it. Use this command to refresh locations before querying or executing functionality that would query the location of an object. Example updatelocations(current); updatestate (obj object [, num profilenr]) Updates the state of the object Description Updates the state of the specified object. Could be used in the OnDraw function of an object to make its states display smoothly while the model is running. Example updatestate(current); Object Functions Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables. c <no parentheses> Description This command is used to reference the active node during a function's execution. If the function was called using nodefunction(), c returns a reference to the node on which the function is written. If the function is an event function, c returns a reference to the object that contains the event. Example treenode current = ownerobject(c); debug ([num operation, num/obj p2, num/obj p3]) Acts like a breakpoint in Flexscript to start debugging Description For developer use. This command is used to control the Flexscript step debugger. Calling this command without any parameters will behave as if there is a breakpoint at that line of code. Operations: DEBUG_STOP 0 DEBUG_STEP 1 DEBUG_CONTINUE 2 DEBUG_IS_STOPPED 3 DEBUG_GET_LINE_NR 4 DEBUG_DUMP_VARIABLES 5 DEBUG_STOP_SIMULATION 6 DEBUG_REFRESH_BREAK_POINTS 7 DEBUG_ADD_BREAK_POINT 8 DEBUG_DELETE_BREAK_POINT 9 DEBUG_GET_WATCH_VARIABLE 10 DEBUG_ENABLE_CODE_PROFILING 11 DEBUG_PRINT_CODE_PROFILING_INFO 12 DEBUG_RESET_CODE_PROFILING 13 Example debug(); delayednodefunction (node thenode, double timeDelay[, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode after a defined delay time. It works the same as the nodefunction() command, except it delays firing the node for the given delay time. Example delayednodefunction(current.myFunc, tonum(item)); eventlisten (obj object, str eventName, node relayNode[, num flags, par1, par2, ... par10]) Description This command will create a listening mechanism where whenever the defined event is called on object, relayNode will also be executed. flags is a bitwise mask of one of the following values: EVENT_PRE_LISTEN : The listening function will be called before theNode is called. EVENT_LISTEN : (default) The listening function will be called after theNode is called. EVENT_PERSIST : The listener will persist across model resets. EVENT_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into the event will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. EVENT_LISTEN_ONCE : The listening mechanism will automatically be removed after the first event firing. When the listening node is called, if it returns EVENT_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. To get a list of the events that can be listened to on an object, call function_s(object, \"enumerateEvents\", destNode). The object will dump a table onto destNode that contains information on all the events that can be listened to on the object. Some events may have \"requirements\". This means that in order to properly bind to the event, you have to pass additional parameters in. The enumeration table will give information on the number of requirements and their names. When requirements are needed they displace and shift par1, par2, etc. For example, if an event has 2 requirements, these requirements will take up par1 and par2 of the eventlisten() call, and par3 will then become param(1) in relayNode's code. Example eventlisten(current, \"OnEntry\", current.entrylistener); executefsnode (node thenode, node c[, node i, node/num/str eventdata, int nobuild]) Execute a node as Flexscript Description Dynamically execute a node as Flexscript. If the node is not already Flexscript, the nobuild parameter should be 0. Used to parse string data into Flexscript to execute, such as from a global table or label. The c and i parameters can be accessed in the function as c and i. The eventdata parameter can be accessed as eventdata if it is a string or as eventcode (an integer) if it is a number. If eventdata is a node, it can be accessed using tonode(eventdata) in the function. Example executefsnode(current.labels[\"myFunc\"],NULL,NULL,NULL,0) This executes the script on current's myFunc label, passing NULL into the function for c,i,and eventdata. i <no parentheses> Description For developer use. This command is used only in event functions. It is used to reference the object that was passed to the value of 0 is) command as the involved object. Example string involvedname = i.name; This sets involvedname to the name of the object that was passed to value of 0 is) as the involved object. inheritcode () Description For developer use. This command is used for subclass function inheritance. Call this in an event function to call that same event function on the object's classobject. In C++ or DLL code, call _inheritcode(callpoint); Example Flexscript: inheritcode(); C++ or DLL: _inheritcode(callpoint); ip <no parentheses> Description For developer use. Node pointer meaning 'involved port'. Alias for 'eventdata'. Example msgparam (num param) Within an OnMessage trigger, get the value of a message parameter Description Returns a parameter passed to with the Object . message () method or sendmessage() or senddelayedmessage() commands. Only used in OnMessage triggers. Example int msgtype = msgparam(1); treenode item = msgparam(2); Array data = msgparam(3); msgsendingobject () Within an OnMessage trigger, get a reference to the object sending the message Description Returns a reference to the object that sent the message as defined in the Object . message () method or sendmessage() or senddelayedmessage() command. Only used in OnMessage triggesr. Example treenode sender = msgsendingobject; nodefunction (node thenode [, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode. Thenode must be toggled as either a C++ node or a Flexscript node. If the node is C++, the model must be compiled before calling this command. Any parameters that need to be passed to the function are passed as par1, par2, etc. Up to 10 parameters may be passed. The values that are passed using this command must all be numbers, but can then be accessed and recast from within the function called using the command param(x) where x is the number of the parameter. Example nodefunction(node_v_entrytrigger,tonum(item),portnum); nodefunctionlisten (node theNode, node relayNode[, num flags, par1, par2, ... par10]) Description For developer use. This command will create a listening mechanism where whenever nodefunction() is called on theNode, relayNode will also be executed. flags is a bitwise mask of one of the following values: NFL_PRE_LISTEN : The listening function will be called before theNode is called. NFL_LISTEN : (default) The listening function will be called after theNode is called. NFL_PERSIST : The listener will persist across model resets. NFL_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into that function will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. When the listening node is called, if it returns NFL_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. Example nodefunctionlisten(getvarnode(current, \"entrytrigger\"), current.entrylistener); param (num index) Gets a parameter passed into a function Description This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode), string, int, double, stringarray, intarray, doublearray or treenodearray. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = param(1); Other examples include: double quantity = param(2); var value = param(1); //In this example value could be used as any type parqty () Description For developer use. Get the number of parameters passed into the nodefunction. This is used together with the nodefunction command. The value returned only applies when using Flexscript, not C++. Example parqty() selectall () Description For developer use. Selects all objects in the model. Example selectall() thisclass <no parentheses> Description For developer use. This keyword is used in an eventfunction to get the class of the object receiving the call. Example thisclass Object Ports Commands associated with the port connections of an objects. closeallip (obj object) Close all input ports of object Description Close all input ports of object. Closing all input ports of an object will block entry to the object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeallip(current) closeallop (obj object) Close all output ports of object Description Close all output ports of object. Closing all output ports of an object will block the exit of that object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeallop(current) closeip (obj object, num inputportnum) Close one input port of object Description Close just inputportnum of object. Closing an input port of an object will block entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeip(current,1) closeop (obj object, num outputportnum) Close one output port of object Description Close just outputportnum of object. Closing an output port of an object will block the exit from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeop(current,1) cpcpno (obj object, num port) Description This command returns the center port number that is connected to the specified center port number of object. Example int otherport = cpcpno(current,1); This sets otherport to the number of the port that current's first center port is connected to. inputopen (obj object) Returns 1 if the object's input is open, 0 otherwise Description Returns 1 if the object's input is open, 0 otherwise. The closeinput(), stopinput(), openinput(), and resumeinput() commands affect the return value of this command. The commands like closeip() and closeallip() do NOT affect the return value. Example if(inputopen(current)) current.input.close; ipavailable (obj object, num inputportnum) Description Returns a 1 if the upstream object through the specified object's input port is available. Particularly, it checks if the upstream object exists, if it is stopped, if its output is open, and if the connected output port is open. This function returns 0 if the upstream object isn't available. Example ipavailable(current,1) ipopen (object object, num inputportnum) Description Returns a 1 if the inputportnum on object is open. Otherwise returns zero. Example ipopen(current,1) ipopno (obj object, num inputportnum) Output port number that is connected to inputportnum of object Description This command returns the output port number that is connected to inputportnum of object. Example int otherport = ipopno(current,1); This sets otherport to the port number of the output port that the current object's first input port is connected to. ipready (obj object, num inputportnum) Description Returns a 1 if the inputportnum of object is open and the connecting output port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the input of this object or the output of the connecting object are currently open. Example ipready(current,1) numconnections () Gets the number of server connections that are currently active Description Returns the number of server connections that are currently active. Example int numconns = numconnections(); Sets the numconns variable to the number of server connections that are currently active. opavailable (obj object, num outputportnum) Description Returns a 1 if the downstream object through the specified object's output port is available. Particularly, it checks if the downstream object exists, if it is stopped, if its input is open, and if the connected input port is open. This function returns 0 if the downstream object isn't available. Example opavailable(current,1) openallip (obj object) Open all input ports of object Description Open all input ports of object. If an input port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openallip(current) openallop (obj object) Open all output ports of object Description Open all output ports of object. If an output port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openallop(current) openip (obj object, num inputportnum) Open one input port of object Description Open just inputportnum of object. Opening an input port of an object will allow entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openip(so(),1) openop (obj object, num outputportnum) Open one output port of object Description Open just outputportnum of object. Opening an output port of an object will allow exiting from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openop(so(),1) opipno (obj object, num outputportnum) Input port number that is connect to outputportnum of object Description This command returns the input port number that is connected to outputportnum of object. Example int otherport = opipno(current,1); This sets otherport to the number of the input port that current's first output port is connected to. opopen (obj object, num outputportnum) Description Returns a 1 if the outputportnum on object is open. Otherwise returns zero. Example opopen(current,1) opready (obj object, num outputportnum) Description Returns a 1 if the outputportnum of object is open and the connecting input port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the output of this object or the input of the connecting object are currently open. Example opready(current,1) outputopen (obj object) Returns 1 if the object's output is open, 0 otherwise Description Returns 1 if the object's output is open, 0 otherwise. The closeoutput(), stopoutput(), openoutput(), and resumeoutput() commands affect the return value of this command. The commands like closeop() and closeallop() do NOT affect the return value. Example if(outputopen(current)) current.output.close; If the output is open for the current object, then close the output. transitionport () Description Get the most recently traversed port number by an object in the model. It refers to the last moveobject() call which occurred in the model run. Example transitionport() Output Commands for giving feedback to the modeler for debugging or reporting purposes. endoffile () Returns 1 if the end of the currently open file has been reached Description Returns 1 if the end of the currently open file has been reached. Used with fileopen() Example while(!endoffile()){string nextline = filereadline();} fileclose () Closes the FlexSim file interface Description Closes the FlexSim file interface and saves any data written to the file while it was open. Example fileclose() fileexists (str filepath) Returns 1 if the file exists, 0 otherwise Description Returns 1 if the file exists, otherwise 0. Example if(fileexists(\"C:/myfile.txt\")) { fileopen(\"C:/myfile.txt\"); fpt(\"Hello World\"); fileclose(); } fileopen (str filename [, str opentype]) Opens the FlexSim file interface Description Opens the FlexSim file interface. Returns 1 if successful. Returns 0 if an error is encountered. Parameter 2 can be \"w\" for writing, \"r\" for reading, or \"a\" for appending. Default is \"w\". Use the commands fpt(), fpr(), fpf(), etc. to write to the opened text file. Use filereadline() to read a line from the file. Using this command, you can only have one file open at a time. To write to multiple files simultaneously, use the C standard fopen/fclose commands or C++ standard fstream classes in C++ or through a dll. If in write mode, the contents of the file will be cleared, and the file pointer will be set to the top of the file. The file must be closed to save any data written to the file. Example fileopen(\"C:/myfile.txt\", \"w\"); filereadline () Reads a line from the currently open file Description Reads a line from the currently open file. Used with fileopen() Example string nextline = filereadline(); fpc (num value) Prints an ASCII character to the open file Description Prints an ASCII character to the open file. Common values: TAB = 9, LF = 10, CR = 13 Example fpc(9) fpd (num value) Prints an integer value to the open file Description Prints an integer value to the open file. Floating point values will be truncated. Example fpd(3) prints 3 fpd(3.23) prints 3 fpd(3.954) prints 3 fpd(4) prints 4 fpf (num value) Prints a floating point value to the open file Description Prints a floating point value to the open file. Example fpf(1.234) fpr () Prints a return (new line) to the open file Description Prints a return (new line) to the open file. Example fpr() fpt (str text) Prints a string to the open file Description Prints a string to the open file. Example fpt(\"Hello\") mpd (num value) Print an integer to the system console Description Prints the integer value to the system console Example mpd(6); mpf (num value) Print a floating point value to the system console Description Prints the floating point value to the system console. Example mpf(7.69); mpr () Print a new line to the system console Description Prints a new line to the system console Example mpr(); mpt (str printvalue) Print text to the system console Description Prints the text printvalue to the system console. Example mpt(\"System console printout\"); outputtreecontent (node containernode, str path+filename) Writes the data of all nodes in the tree under containernode to a text file Description Writes the data of all nodes in the tree under containernode to a text file on disk. If file does not exist, it will be created. For more functionality, use menu option: Stats | Model Documentation. Example outputtreecontent(model(),\"C:/MyModelDocumentation.txt\") print ([var value, var value2, ...]) Print the contents of the given parameters and a new line to the console Description This command takes 0 to 20 variants as parameters. Each parameter is printed to the console and separated by a space. After all the parameters are printed a new line character is printed to the console. The output console must be open to write to it. To open the console, use Debug > Output Console in the menu. Example print(\"Number:\", 1); print([1, 2]); This prints \"Number: 1\" and \"Array[2]: {1,2}\" on different lines of the output console. profileevents () Prints descriptions of all events currently in the event queue to the output console Description Prints to the output console descriptions of all of the events currently waiting in the event queue. The output console must be open to write to it. To open console, use menus View | Output Console. Example profileevents() report (obj containerobj, str path+filename, num append [0/1]) Description For developer use. Generate a standard report file in \"comma separated value\" (csv) format for all objects under containerobj which are currently selected. If append is 1, then the report will be appended to the end of the file specified. If append is 0, then either the file will be created or the existing file will be cleared before the report is written to it. Example report(model()); reportmode (int mode [0=general, 1=state]) Description For developer use. Set the report mode. (General or state.) Example reportmode(0); People getactiverole (treenode person) Description Return the person's active role Example getactiverole(token.Person) getcensus ([obj model/group/location]) Description Get the number of people in the model, a Location group, or an individual location Example int census = getcensus(Group(\"PodA\")); getnumpeopleresources (obj group [, num availability{0=available/1=acquired}, num priority]) Description Get the number of available/acquired objects in a people resource group. If a priority value is passed resources will also be considered available if a request of that priority would preempt the resource. Example int numAvailable = getnumpeopleresources(Group(\"PodA\")); getpeopleresourceutilization (obj object/group[, num mode{0=ByState/1=ByAcquires}]) Description Returns the utilization percentage of a people object or the average of all members of a people group. Example double utilization = getpeopleresourceutilization(Group(\"PodA\")); reacquirepreemptedresource (node token, node instance, node preemptedObject, node info, node activeProcess, num sameAsLast [, num newPriority]) Description Example reacquirepreemptedresource(token, current, preemptedObject, info, activeProcess); shiftscheduledownfunction (node downBehavior, node table, node downObject, double duration) Description Example shiftscheduledownfunction(lunch, shiftSchedule1, doctor, 400); Process Flow createtoken (obj instanceObject, obj/str activity, int start) Description Deprecated. Use Token . create . Example treenode token = createtoken(node(\"Operator1\", model()), \"Start\", 0); setlabel(token, \"type\", 1); releasetoken(token); executesubflow (obj/str processFlow [, obj instanceObject, str startActivity, str finishActivity]) Description Creates a token in a Process Flow Sub Flow which starts that sub flow. Once the created token hits a Finish activity it will return the value evaluted from the Return Value field. instanceObject: If the instanceObject is specified then current may be used by the activities in the Sub Flow to get access to the instanceObject. This can be useful when multiple objects execute the same Sub Flow but require object specific data. If no Start activity is specified, the activities in the Sub Flow will be searched and the first Start activity will be used. If multiple Finish activities are contained in the Sub Flow, the return value will be evaluated from whichever Finish activity the token enters. However, if internal sub flows cause other tokens to enter a Finish activity, it may be necessary to specify the Finish activity name so the correct return value is evaluated. NOTE: It is important that the activities used in the Sub Flow do not create delays or wait. If the token is interrupted by a delay or wait, the token will not arrive at the Finish activity when the executesubflow function finishes. Example return executesubflow(\"SubFlow1\", processor); getactivity (node/obj/str token/processFlow [, str activityName]) Description If the first parameters is a ProcessFlow object you must specify a string for the activity name. To get the current activity of a token, use Token . activity . Example treenode activity = getactivity(processFlow, \"Delay\"); getbatch (obj/str tokenOrBatch[, obj instanceObject, obj/str/num group]) Description Gets the batch in a Batch activity by token or Group By value. If a token is passed in as parameter 1, then the instanceObject and group parameters are not used. Example treenode batch = getbatch(token); treenode batch = getbatch(\"Batch\", current, 3); getchildtoken (node parentToken [, int childIndex]) Description Deprecated. Use Token . children [], or Token . children .length. Example treenode childToken = getchildtoken(token, 3); int numChildren = getchildtoken(token); getchildtokenrank (node childToken) Description Deprecated. Use Token . childRank . Example int childRank = getchildtokenrank(token); getlastacquiredresource (node resource, node token) Description Gets the last object acquired by the token from the resource. Example treenode operator = getlastacquiredresource(operatorResource, token); getparenttoken (node token) Description Deprecated. Use Token . parent . Example treenode parentToken = getparenttoken(token); getprocessflowvar (obj/str processFlow, str varname[, node token]) Description Gets the value for the Process Flow Variable. The processflow parameter can either be a reference to the Process Flow object in the Tools or the name of the Process Flow object. Example double processTime = getprocessflowvar(processflow, \"processTime\"); treenode processor = getprocessflowvar(processflow, \"processor\", token); gettoken (obj instanceObject, obj/str activity, num index) Description Gets the token at the index of the activity for the given owner object (instance). Example treenode token = gettoken(fixedResource, activity, 3); treenode token = gettoken(processor3, \"Wait for Conveyor\", 2); gettokenbyid (num id [, obj/str processFlow]) Description Deprecated. Use Token . byID . Example treenode token = gettokenbyid(54); treenode token = gettokenbyid(23, \"ProcessFlow2\"); gettokenid (node token) Description Deprecated. Use Token . id . Example int tokenID = gettokenid(token); gettokens (obj instanceObject, obj activityOrAsset[, num flags]) Description Gets all the tokens \"inside\" an activity or shared asset. For activities, this is the current set of tokens in the activity. For resources, it is the set of tokens who have acquired the resource. For zones, it is the set of tokens that have entered the zone. For a list, it is the set of tokens who have been pushed to the list. Returns an Array containing the result. instanceObject - The object associated with the desired process flow instance. For general process flows this is the same as the process flow itself. For object process flows, it is the 3D object, i.e. task executer or fixed resource, associated with the process flow instance. If executed from within process flow activity logic, this will usually just be \"current\". If you pass NULL here, it will get tokens for all instances. activityOrAsset - The target activity or shared asset. If NULL, the command will return all active tokens in the entire process flow instance. flags - Defines optional flags. If GET_TOKENS_REQUESTS is passed for a shared asset, it will return the set of tokens requesting the shared asset (i.e. tokens waiting to enter a zone, tokens back ordering on a list, etc.). Example Array tokensInActivity = gettokens(current, getactivity(processFlow, \"Wait For Exit\")); Array resourceOwners = gettokens(current, getactivity(processFlow, \"Resource1\")); releasebatch (node batch, int failed [, int/str/obj connector]) Description Releases batch from a Batch activity. If failed is 1, all tokens in the batch will be released and the release quantity and label values will be ignored. Example releasebatch(batch, false); releasebatch(batch, true, \"Failed\"); releasebatch(batch, true, getactivity(processFlow, \"Garbage\")); releasetoken (node token [, int/str/obj connectorOrActivity]) Description Deprecated. Use Token . release (). Example releasetoken(token); releasetoken(token, 3); releasetoken(token, \"To Start\"); releasetoken(token, getactivity(processFlow, \"Start\")); releasewave (node wave) Description Releases the wave from a Synchronize or Join activity. If the wave is in a Synchronize activity, tokens will exit the activity through the same connector rank that they entered through. If the wave is in a Join activity, the first token added to the wave will exit the activity. Example releasewave(wave); settokencolor (node token, num red{0-255}, num green{0-255}, num blue{0-255} [, num alpha{0-255}]) Description Deprecated. Use Token . setColor . Example settokencolor(token, 100, 100, 0, 255); settokenshape (node token, num index) Description Deprecated. Use Token . setShape . Example settokenshape(token, 16); zonecheckrequests (obj instanceObject, obj/str zone) Description Reevaluates all tokens in a zone's request list. Example zonecheckrequests(fixedResource, \"Zone 1\") zonegetpartitionvaluefortoken (obj zone, obj token) Description Gets the partition value for a token in the given zone. Example zonegetpartitionvaluefortoken(zone, token) zoneistokeninsubset (obj zone, obj token, str subsetName) Description Determines whether the given token is in the named subset of the given zone Example zoneistokeninsubset(zone, token, \"MySubset\") Rack Object Commands for accessing and assigning data on Rack objects. rackdrawfilledcell (obj rack, num bay, num level, num x, num y, num z, num sx, num sy, num sz, num red, num green, num blue) Draws a box in the rack's given bay and level Description Draws a box in the rack's given bay and level. x,y, and z are numbers between 0 and 1 representing the percentage into the cell to start drawing the box. sx, sy, and sz are numbers between 0 and 1 representing the size percentage of the box. Red, green and blue specify the color of the box. To ensure that the boxes are drawn correctly, you should disabled OpenGL textures with fglDisable(GL_TEXTURE_2D) before calling this command in a draw trigger. Example fglDisable(GL_TEXTURE_2D); for (int bay = 1; bay <= 5; bay++) { for (int level = 1; level <= 3; level++) { rackdrawfilledcell(current, bay, level, 0,0,0, 0.5,1,1, 255,0,0); } } fglEnable(GL_TEXTURE_2D); This example draws red boxes in bays 1-5, levels 1-3, that fill half of each cell's volume (sx = 0.5, sy =1, sz = 1). rackdrawvirtualcontent (obj rack, num bayfillperc, num levelfillperc, num itemdepth, num red, num green, num blue, num virtualonly) Draw the rack's virtual content Description Draws the rack's \"virtual\" content. This command will usually only be used if you are recycling flowitems using the rackrecycleitem command. When this command is executed, the rack goes through its content table, and draws a box for every flowitem in the rack, at its appropriate bay and level. If virtualonly is 1, then it will only draw a box in spots where a slot is filled, but no flowitem is present (the flowitem has been recycled). Bayfillperc and levelfillperc are values between 0 and 1, and specify the percent of the cell to fill with the drawn box. Item depth is the size each item takes up in the rack. For a floor storage rack, this the z size of the items. For a regular rack, it is the y size of the items. Example rackdrawvirtualcontent(current, 0.9,0.9,3, 256,0, 0, 1); rackgetbaycontent (obj rack, num bay) Gets the number of flow items in the bay of the rack Description Returns the number of flow items in the specified bay of the rack Example int numitems = rackgetbaycontent(current, 5); Sets numitems to the number of flowitems in bay 5 of the current rack. rackgetbayloc (obj rack, num bay) Gets the x location of bay relative to the rack's origin Description Returns the x location of the given bay of the rack, relative to the rack's origin. Example rackgetbayloc(current, 5); Returns the rz of bay 5. rackgetbayofitem (obj rack, obj item) Gets the bay number of the rack that the item is placed in Description Returns the bay number of the rack that the item is placed in Example int baynum = rackgetbayofitem(current, item); Sets baynum to the bay number containing item in the current rack. rackgetbaysize (obj rack, num bay) Gets the x size of bay of the rack Description Returns the x size of the given bay of the rack. Example rackgetbaysize(current, 5); Returns the size of bay 5. rackgetcellcontent (obj rack, num bay, num level) Gets the number of flow items in bay and level of the rack Description Returns the number of flow items in the specified bay and level of the rack Example int numitems = rackgetcellcontent(current, 5, 3); Sets numitems to the number of flowitems in bay 5, level 3 of the current rack. rackgetcellvar (obj rack, num bay, num level, num varnum, node storagenode) Description Returns the value stored in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example int typeofcellitems = rackgetcellvar(current, 1,5,3, current.labels[\"storageData\"]); rackgetitembybaylevel (obj rack, num bay, num level, num itemrank) Gets a reference to an item in the bay and level of the rack Description Returns a reference to an item in the specified bay and level of the rack. Itemrank specifies the rank of the item in that cell. Example treenode theitem = rackgetitembybaylevel(current, 5, 4, 2); Sets theitem pointer to the second flowitem in bay 5, level 4 of the current object. rackgetitemcellrank (obj rack, obj item) Gets the item's rank within the rack's cell Description Returns the rank of the item within its given cell in a rack. Example int theRank = rackgetitemcellrank(current, item); rackgetlevelloc (obj rack, num bay, num level) Gets the y or z location of the level relative to the rack's origin Description Returns the y or z location of the given level of the rack, relative to the rack's origin. If the rack is a floor storage rack, this returns the y rz. If the rack is a normal rack, this returns the z rz. Example rackgetlevelloc(current, 5, 4); Returns the y or z location of bay 5, level 4. rackgetlevelofitem (obj rack, obj item) Gets the level number of the rack that the item is placed in Description Returns the level number of the rack that the item is placed in Example int levelnum = rackgetlevelofitem(current, item); Set the levelnum variable to the level number containing item in the current rack. rackgetlevelsize (obj rack, num bay, num level) Gets the y or z size of the level of the rack Description Returns the y or z size of the given level of the rack. If the rack is a floor storage rack, this returns the y size. If the rack is a normal rack, this returns the z size. Example rackgetlevelsize(current, 5, 4); Returns the y or z size of bay 5, level 4. rackgetnrofbays (obj rack) Gets the number of bays rack has Description Returns the number of bays that the rack has. Example return duniform(1,rackgetnrofbays(rack)); This returns a random number between one and the number of bays on the rack. This is the same as the \"Random\" option of the place in bay pick list. rackgetnroflevels ( obj rack [,num bay ] ) Gets the number of levels in the bay of the rack Description Returns the number of levels in the specified bay of the rack. If no bay parameter is passed into the function, then the nroflevels in the first bay will be returned. Example return duniform(1,rackgetnroflevels(rack, baynum)); This returns a random number between one and the number of levels on the chosen bay of the rack. This is the same as the \"Random\" option of the place in level pick list. rackrecycleitem (obj rack, obj item, num binrank) Recycles the flowitem into the flowitem bin Description Recycles the flowitem into the flowitem bin specified. This command is for advanced users, and should not be used unless you are prepared to do some debugging. Bin rank should be the rank of the flowitem in the flowitem bin (textured colored box = 5, etc.). When this command is called, the flowitem is recycled, but the spot where it is located is designated as taken, and further flowitems will be put into the rack as if this spot is already filled. This can significantly increase the speed of a model. Subsequent commands to rackgetbaycontent(), rackgetcellcontent(), etc. will return values as if the item were still there. However, rackgetitembybaylevel() will return NULL for an item that has been recycled and has yet to be restored. Make sure the item is not released or waiting for a transport before calling this command. Note that max content of the rack will not work properly if this command is used. Also you will need to eventually restore the item using the rackrestoreitem() command. Example rackrecycleitem(current, item, 5); This recycles the flowitem into the 5th ranked flowitem of the flowitem bin (usually the textured colored box). rackrestoreitem (obj rack, num binrank, num bay, num level, num position) Restores a flowitem from the flowitem bin into the bay and level Description Restores a flowitem from the flowitem bin into the given bay and level. Example rackrestoreitem(current, 5, 7, 3, 1); This restores a flowitem from the 5th ranked flowitem of the flowitem bin (usually the textured colored box) into bay 7, level 3, position 1 of the rack. racksetcellcontent (obj rack, num bay, num level, num contentval) Sets the virtual content of the rack's cell to contentval Description Sets the \"virtual\" content of the rack's cell to the specified value. This should only be used if you are recycling and restoring items to the rack with rackrecycleitem() and rackrestoreitem(). You will usually use this command to set an initial \"virtual\" content on reset. Example racksetcellcontent(current, 5, 3, 2); racksetcellvar (obj rack,num bay, num level, num varnum, num setvalue, node storagenode) Description Sets the value in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. Setvalue is the value to set it to. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example racksetcellvar(current, 5, 3, 2, 4.6, current.labels[\"storageData\"]); This sets the 2nd value of bay 5, level 3 to 4.6 Statistics Commands for creating, manipulating, and accessing statistical data; including probability distributions. addbundleentry (node datanode[, field1val, field2val, ...]) Adds a new entry to the bundle (base 0) Description Adds a new entry to the bundle (base 0). All fields must be added before adding entries. The optional field values will be added to the fields in the given order. Up to 29 field values can be given. For bundles with more fields, use setbundlevalue. Example int lastentry = addbundleentry(x, time(), current.subnodes.length); addbundlefield (node datanode, str fieldname, num type[, num maxstrsize]) Adds a field to the bundle Description Adds a field to the bundle with the given field name. Returns the field rank (base 0) of the added field. All fields for a bundle must be added before any entries are added. The type is a bitwise flag that must be one of the following values: BUNDLE_FIELD_TYPE_DOUBLE : stores a 64-bit double BUNDLE_FIELD_TYPE_FLOAT : stores a 32-bit float BUNDLE_FIELD_TYPE_INT : stores a 32-bit integer BUNDLE_FIELD_TYPE_STR : stores a string. If used, you should also define the maximum string size, which will be the space allocated for each string entry. If maxstrsize is unspecified, the default will be 32 bytes. The field will be able to store strings at least as long as the specified length, and any longer strings will be truncated. BUNDLE_FIELD_TYPE_VARCHAR: stores a string. This field type does not impose a limit on string length. This field type is recommended if you need variable string lengths, or if strings are frequently repeated. BUNDLE_FIELD_TYPE_NODEREF : stores a reference to a node BUNDLE_FIELD_TYPE_BINARY : stores a 1 or 0 as a single bit. Bits are allocated in blocks of 32, so that one binary field requires 32 bits. However, 32 binary fields can share a single block. You can optionally bitwise combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_INDEX_MAP. All values in this type of field will be indexed for quick lookup ( O(log n) ) using getbundleindexentries(). You can optionally combine BUNDLE_FIELD_TYPE_INT, BUNDLE_FIELD_TYPE_STR, BUNDLE_FIELD_TYPE_VARCHAR, or BUNDLE_FIELD_TYPE_NODEREF with BUNDLE_FIELD_INDEX_HASH. All values in this type of field will be indexed for quick lookup ( O(1) ) using getbundleindexentries(). This type of field is only recommended for use with bundles that rarely, if ever, change size while the model is running. You can optionally combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_NULLABLE, to allow those fields to contain null values. If a field is nullable, you can pass a null Variant in to setbundlevalue(), and it is possible to get a null Variant from getbundlevalue(). Example addbundlefield(x, \"Object Name\", BUNDLE_FIELD_TYPE_STR | BUNDLE_FIELD_NULLABLE, 64); bernoulli (num prob, num succeed-value, num fail-value[, num stream]) Returns one of two possible values, based on the given probability Description bernoulli( p , a , b , stream ) is a discrete probability distribution. Inputs: p is the probability that a will be returned; where p ∈ ( 0, 100 ) 100 − p is the probability that b will be returned. a ∈ ( - ∞ , ∞ ) b ∈ ( - ∞ , ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , b } mean = ( a p + b (100− p ) ) ⁄ 100 variance = ( p ⁄ 100)(1 − p ⁄ 100) when a =1 and b =0 Possible Applications: Used to model a random occurrence that has two possible outcomes such as a pass/fail test. It is possible to generate more than two values by nesting bernoulli commands; however, it is better to use empirical distributions in these cases. Comments: The bernoulli( p , 1, 0) and binomial(1, p ) distributions are the same. Example treenode curoperator = current.centerObjects[bernoulli(90,1,2,1)]; The bernoulli command in this example has a 90 percent probability of returning 1 otherwise it will return 2, using random number stream 1. It is used within a centerObject reference such that 90 percent of the time curoperator references the object connected to center port 1 of the current object, otherwise curoperator references the object connected to center port 2. beta (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a beta distribution Description beta( a , b , α 1 , α 2 , stream ) is a bounded continuous probability distribution. Inputs: a is the lower-endpoint parameter ∈ ( - ∞ , ∞ ) b is the upper-endpoint parameter( b > a ) α 1 is the 1 st shape parameter ( 0, ∞ ) α 2 is the 2 nd shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( a , b ) mean = a + α 1 ( b − a ) ⁄ ( α 1 + α 2 ) variance = α 1 α 2 ( b − a )² ⁄ ( α 1 + α 2 )²( α 1 + α 2 + 1) Probability Density Functions: Possible Applications: The beta distribution is often used to model task durations in the absence of real data because it can be definitively bounded between a minimum and maximum value, and it can take on a number of different probability density shapes depending on the two shape parameters used. For most real world task durations, the density shape will have a longer right tail than a left, so if you know the mean μ and the mode (most likely value) m , you can back calculate suitable shape parameters with the following equations: α 1 ≅ ( μ − a )(2 m − a − b ) ⁄ ( m − μ )( b − a ) α 2 ≅ α 1 ( b − μ ) ⁄ ( μ − a ) Comments: The beta( a , b , 1, 1) and uniform( a , b ) distributions are the same. The density is symmetric about ( a + b ) ⁄ 2 when α 1 = α 2 . The density will have a hump and longer right tail when α 2 > α 1 > 1. The mean and mode are equal when α 1 = α 2 > 1. Example double ptime = beta(8, 12, 1.3, 3, 5); The ptime variable is set equal to a beta distribution having a minimum value of 8, a maximum value of 12, and shape factors of 1.3 and 3 for α 1 and α 2 respectively. FlexSim's random stream number 5 will be used to generate variates from the distribution. The distribution density will have a nice humped curve with a long right tail. binomial (num trials, num prob[, num stream]) Returns a random sample from a binomial distribution Description binomial( t , p , stream ) is a discrete probability distribution used to represent the number of successes in t independent Bernoulli trials with probability p of sucess on each trial. Inputs: t is the number of independent trials { 1, 2, ..., ∞ }. p is the probability of success for any given trial (0, 100) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { 0, 1, 2, ..., t } mean = t p ⁄ 100 variance = t ( p ⁄ 100 )( 1 − p ⁄ 100 ) Possible Applications: The binomial distribution is useful for modeling the number of defective parts in a batch of size t , or the actual number of people in random size groups, or maybe the number of items ordered from inventory. Comments: The binomial(1, p ) and bernoulli( p , 1, 0 ) distributions are the same. The binomial( t , p ) distribution is symmetric when p = 50 percent. Example int fparts = binomial(item.batchsize, 10, 5); The number of failed parts will be written to the fparts variable based on a 10% probability that any given part will fail within a batch quantity defined by a label on the flowitem named \"batchsize\". FlexSim's random stream number 5 will be used to generate variates from the distribution. calculateconfidence (num stddev, num nrofdatapoints, num confidence) Description For developer use. Calculates the confidence interval for the given standard deviation and number of data points. The return value is the distance on one side of the interval from the sample mean. This uses the t distribution to calculate the confidence interval. Confidence values must be either 90, 95, or 99. This is used in the experimenter to calculate the confidence intervals for the mean of performance measures for each scenario. Example calculateconfidence(5.82, nrofsamples, 90) cauchy (num location, num scale[, num stream]) Returns a random sample from a cauchy distribution Description Generates a continuous random variate from a cauchy distribution with parameters as defined. Example cempirical (str/node/num table[, num stream]) Returns a random sample from a continuous empirical distribution Description A continuous empirical distribution with percentages and values defined in the table specified. Empirical distributions reference tables created by the user that contain a list of values and probability percentages associated with each value. Probability percentages must be entered in column 1 starting with row 1 of the table, and the associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. There are three commands in FlexSim that can be used to generate random variates from the empirical distributions defined in tables. The three commands are dempirical(), empirical() and cempirical(). The first one is a discrete distribution and will return the explicit values listed in the table. The next two are bounded continuous distributions, meaning they return a continous number within a range. The values in column 2 for the continuous distributions must be in ascending order because they will interpolate values between two adjacent values in the table. Let's assume we have a table with 4 rows and 2 columns. In column one are the percentages 10, 20, 30 and 40 adding up to 100 percent. In column two are the values 0.1, 0.2, 0.3 and 0.4. Now let's see the differences between the discrete empirical command and the two continuous empirical commands. The discrete command will only generate random variates that match exactly the values that were entered into column two of the table. The continuous commands will generate random variates that are real numbers uniformly distributed between two adjacent numbers in column two of the table. The difference between the two continuous commands is in how the bounds of the uniform ranges are defined. The command dempirical(\"mytable\") will return the number 0.1 for ten percent of the samples, the number 0.2 for twenty percent of the samples, the number 0.3 for thirty percent of the samples, and the number 0.4 for forty percent of the samples assuming a very large sample set. The command empirical(\"mytable\") will return a number uniformly distributed between 0.1 and 0.2 for ten percent of the samples, a number uniformly distributed between 0.2 and 0.3 for twenty percent of the samples, a number uniformly distributed between 0.3 and 0.4 for thirty percent of the samples and a number uniformly distributed between 0.4 and 0.4 for forty percent of the samples. If you want the last forty percent to be between 0.4 and 0.5 instead of 0.4, add a 5th row with column one being a value of 0 and column two being 0.5 or the desired upper bound. The command cempirical(\"mytable\") will return a number uniformly distributed between 0.0 and 0.1 for ten percent of the samples, a number uniformly distributed between 0.1 and 0.2 for twenty percent of the samples, a number uniformly distributed between 0.2 and 0.3 for thirty percent of the samples and a number uniformly distributed between 0.3 and 0.4 for forty percent of the samples. You can define a lower bound for the first ten percent to be a value different than 0.0 by adding a row to the beginning of the table (row 1) where column one is a value of 0 and column two is 0.05 or the desired lower bound. Here is a summary in tabular form showing the possible return values (\"x\") for each of the three distribution functions: Here is an example of adding a \"dummy\" first row so that cempirical() starts at 0.05 instead of 0.0 (notice that row 1 has a probability of 0 percent): Here is an example of adding a \"dummy\" last row so that empirical() has a range between each value including the last (any number can be entered for the percent of the last row because the percents already add up to 100% with the previous row, so it doesn't matter what it is): When using ExpertFit to determine an empirical distribution that matches your data, you need to be aware that if your data has been defined as integers, then ExpertFit will fit it for use with dempirical(), and if your data has been defined as real numbers, ExpertFit will fit it for use with empirical(). When your data set is composed of real numbers, ExpertFit will show the same percentage for the last value as for the previous to last value, but you'll notice that the percents add up to 100% with the second to last entry. Example cempirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. cempirical(current.labels[\"ptime\"] 5); Returns a random variate from a continuous empirical distribution defined in a node table defined on a label named \"ptime\" of the current object, and using random number stream 5. clearbundle (node datanode[, num resetflags = 0]) Clears all bundle data Description Clears the bundle data associated with datanode. This will clear all entries as well as all fields in the bundle. resetflags is a bitwise mask for flags to initialize the bundle by. Valid values are: BUNDLE_FLAG_UNPAGED = 0x1 - The bundle's entries will be stored in an unpaged, contiguous block of memory. BUNDLE_FLAG_IR_OPT = 0x10 - The bundle will use additional memory (32 bits per row) to improve insert/remove performance for rows in the middle of the bundle. Example clearbundle(x); dataplot (obj tree, num type, num action, num x, num y, num z) Description For developer use. This command lets you create, reset or add data to a histogram, x/y chart, or a data series. The first three parameters define the associated node in the tree as well as the operation to do. The last three parameters, x,y and z, define the appropriate data for the operation. The first parameter should be the main node in the tree that holds the graph/histo data. The second parameter should be either 1, 2, or 3, and defines the type of data that the node holds. 1 means graphx data. For this data type the node contains a list of sub-nodes, and each sub-node contains a number that is a unique point in a data series. 2 means graphxy. For this data type, the node again contains a list of sub-nodes but this time the sub-nodes are paired together as x/y pairs. Nodes ranked 1 and 2 hold the x and y values for one data point, nodes 3 and 4 hold x and y values for the next data point, etc. A type parameter of 3 means histo data. Here the node holds data associated with a histogram. The action parameter should be either 1, 2, or 3, and defines the action that you want to do. 1 means a create operation. This is only needed for histogram type data, as it needs to set up the node's sub-tree structure. To create a histogram plot, pass the minimum value for the histogram as the x parameter, the maximum value of the histogram as the y value, and the number of divisions, or buckets, as the z parameter. An action parameter value of 2 means you want to reset the data. This will clear the content of the node for graphx or graphxy data, and will reset the histogram values for histogram data. An action parameter value of 3 means you want to add a data point. For graphx and histo data, pass the data point as the x parameter. For graphxy data, pass the as the x and y paramters. In summary: Type: 1-graphx/2-graphxy/3-histo. Action: 1-create (only needed for histo data)/2-reset/3-add point. Data: x,y are data points [histo create: x=start, y=end, z=nr of divisions]. Example dataplot(stats_contentgraph(model.find(\"Processor2\")),2,3,8.6,5,0); This adds a point to Processor2's content graph for time 8.6 and content 5. This example is only for demonstration purposes. You should never need to do this since the Processor automatically maintains its content graph. dempirical (str/node/num table[, num stream]) Returns a random sample from a discrete empirical distribution Description A discrete empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example int ptype = dempirical(\"prodtypes\", 5); Assigns a value to the ptype variable using a discrete empirical distribution defined in a global table named \"prodtypes\" using random number stream 5. dempirical(current.labels[\"route\"], 5); Returns a random variate from a discrete empirical distribution defined in a node table defined on the label named \"route\" of the current object, and using random number stream 5. duniform (num min, num max[, num stream]) Returns random integer between the min and max Description duniform( a , b , stream ) is a bounded discrete probability distribution. Inputs: a is the lower-endpoint parameter b is the upper-endpoint parameter a and b are integer numbers where a < b b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , a +1, ..., b } mean = ( a + b ) ⁄ 2 variance = ( ( b − a + 1)²− 1 ) ⁄ 12 Possible Applications: Used to approximate a quantity that is felt to be randomly varying between a and b , but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any discrete (integer) number inbetween will be returned. Example duniform(1, 6, 3); Random number stream 3 will be used to generate a random variate from a discrete uniform distribution having a minimum value of 1 and a maximum value of 6. This simulates the roll of a dice. empirical (str/node/num table[, num stream]) Description A continuous empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example empirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. empirical(current.labels[\"ptime\"], 5); Returns a random variate from a continuous empirical distribution defined in a table defined on a label named \"ptime\" on the current object using random number stream 5. erlang (num location, num scale, num shape[, num stream]) Returns a random sample from an erlang distribution Description erlang( γ , β , m , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) m is the shape parameter ∈ {1, 2, ... } stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + m β variance = m β ² Possible Applications: Used to model the time to complete some task such as assembly, customer service and machine repair. Comments: When γ = 0, this distribution is known as the m-Erlang( β ) distribution. The exponential( γ , β ) and erlang( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Example double servicetime = erlang(60, 2, 4, 5); The servicetime variable is set equal to a erlang distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, using random stream number 5. The mean is 100 + (2*4) = 108. exponential (num location, num scale [, num stream]) Returns a random sample from an exponential distribution Description exponential( γ , β , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ² Possible Applications: Often used to model the interarrival times of a continous stream of customers and/or customer orders into a system. It is also a popular distribution for modeling the time between failure of mechanical equipment. Comments: Variates less than the mean occur much more frequently than variates greater than the mean. The exponential distribution is the only continuous distribution with the memoryless property of producing totally independent variates. If the location parameter ( γ ) is set to zero, then β becomes the mean, and the distribution's variates will range between zero and infinity. The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. Example exponential(0, 10, 5); An exponential distribution with a location of 0 and a scale of 10 (mean = 10). FlexSim's random stream number 5 will be used to generate variates from the distribution. exportdataset (node datatree, str filename, num format[, str wrOption = \"w\"]) Description Export tree dataset to .CSV (Comma Separated Value) format. the format parameter can be: 1 = table 2 = graph 3 = graphxy This implements the opposite functionality of importdataset(). Refer to importdataset() for more information. Example exportdataset(so(),\"mydataset.csv\",1) extremevalue1a (num location, num scale[, num stream]) Returns a random sample from a extremevalue1a distribution Description Generates a continuous random variate from a extremevalue1a distribution with parameters as defined. Example extremevalue1b (num location, num scale[, num stream]) Returns a random sample from a extremevalue1b distribution Description Generates a continuous random variate from a extremevalue1b distribution with parameters as defined. Example gamma (num location, num scale, num shape[, num stream]) Returns a random sample from a gamma distribution Description gamma( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + α β variance = α β ² Probability Density Functions: Possible Applications: Used to model the time to complete some task such as assembly, customer service or machine repair. Comments: The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Shape values less than 1 are rarely used. Example double repairtime = gamma(60, 2, 3.4, 5); The repairtime variable is set equal to a gamma distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. The mean is 100 + (2*3.4) = 106.8. geometric (num prob[, num stream]) Returns a random sample from a geometric distribution Description Generates a discrete random number with a geometric distribution and parameters as specified. Example getbundlefieldname (node datanode, num fieldnr) Gets the name of the nth ranked field (base 0) in the bundle Description Returns the name of the nth ranked field (base 0) in the bundle. Example string fieldname = getbundlefieldname(x, 5); getbundlefieldnr (node datanode, str fieldname) Gets the rank of the bundle field (base 0) Description Returns the rank of the bundle field (base 0). If the bundle field doesn't exist, returns -1. Example int index = getbundlefieldnr(x, \"Field Name\"); getbundlefieldtype (node datanode, num fieldnr) Gets the data type of the bundle field at rank fieldnr (base 0) Description Returns the data type of the bundle field at rank fieldnr (base 0). Available return values are: BUNDLE_FIELD_TYPE_DOUBLE BUNDLE_FIELD_TYPE_FLOAT BUNDLE_FIELD_TYPE_INT BUNDLE_FIELD_TYPE_STR BUNDLE_FIELD_TYPE_VARCHAR BUNDLE_FIELD_TYPE_NODEREF Example int type = getbundlefieldtype(x, 5); getbundleindexentries (node datanode, str/num field, str/num value) Gets all rows with a matching value in the given field Description If this command succeeds, it returns an int or an intarray containing all entries (0-based) that contain the given value for the given field. If it fails, it returns -1. It will fail if the datanode is not a bundle, or if the given field is not an indexed field, or if none of values in the field match the given value. See the addbundlefield command for information on how to make an indexed field. Example int entryNr = getbundleindexentries(data, \"SKU\", \"FS2016-BLU\"); getbundlenrentries (node datanode) Gets the total number of entries in the bundle Description Returns the total number of entries in the bundle. Example int nrentries = getbundlenrentries(x); getbundlenrfields (node datanode) Gets the total number of fields in the bundle Description Returns the total number of fields in the bundle. Example int nrfields = getbundlenrfields(x); getbundlevalue (node datanode, num entrynr, str/num field) Gets the value of the defined entry (base 0) and field (base 0) of the bundle Description Returns the value of the defined entry (base 0) and field (base 0) of the bundle. Example string name = getbundlevalue(x, 5, \"Object Name\"); getdatastat (num stat, num/node nrSamples/parentNode, num sampler [, num p1, num p2, num p3]) Description Calculates and returns a certain statistic of a data set. stat - Can be one of the following values STAT_MEAN - calculates the sample mean of the set STAT_MIN - calculates the minimum value in a defined range of values. p1 is the first element in the range (default is the first element in the set), p2 is the last element in the range (default is the last element in the set), and p3 defines a stride, allowing you to look at every nth value (default 1). If either of p1, p2, or p3 is 0, then it will revert to that value's respective default. STAT_MAX - calculates the maximum element in a defined range of values. p1, p2 and p3 are the same as for STAT_MIN STAT_VARIANCE - calculates the unbiased variance of the data set STAT_STD_DEV - calculates the unbiased standard deviation of the set STAT_SUM - calculates the sum of the set STAT_CONF_INTERVAL_HALF_WIDTH - calculates the confidence interval half-width of the set. Pass in p1 to define the desired confidence percentage. FlexSim will return precise values for percentages at 80%, 90%, 95%, 98%, 99%, and 99.8% and for sample sizes at or below 100 degrees of freedom. For percentages not in this set, FlexSim will \"clamp\" it to the nearest percentage ABOVE the percentage passed in. So if you pass in a 75%, it will return an 80% confidence interval. Since an 80% confidence interval will be a \"wider\" interval, we clamp up to be \"safer\" with the wider interval. Confidence intervals above 99.8 will simply return 0 (i.e. not valid). For degrees of freedom above above 100, it will assume 100 degrees of freedom. nrSamples - defines the number of samples in the set. Note: parameter 2 as a parentNode is deprecated and you should use the parameter 2 as nrSamples option because it encompasses the other and is more flexible. The following deprecated functionality: getdatastat(STAT_MEAN, myNode, 0, 0, 0, 0) can be represented using the newer option with: getdatastat(STAT_MEAN, myNode.subnodes.length, myNode.subnodes[count].value, 0, 0, 0) sampler - an expression that gets the nth value in the sample. Use count for determining which value is to be retrieved. Below are several examples: For calculating the mean of all values in column 5 of global table GT1: getdatastat(STAT_MEAN, Table(\"GT1\").numRows, Table(\"GT1\")[count][5]) For calculating the sum of all values in field \"Time\" of a bundle: getdatastat(STAT_SUM, Table(\"MyBundle\").numRows, Table(\"MyBundle\")[count][\"Time\"]) Example getstat (node object, str name, int flag [, var p1, var p2, var p3]) Returns the statistic value for the given object Description It is preferred to use Object . stats instead. Gets the specified statistic from the given object. name - The name of the statistic. Valid names can be enumerated using function_s(object, \"enumerateStatistics\", targetNode) . Documentation for the meaning of the various statistics that an object provides should be found in each object's documentation. The documentation may include spaces in the names of the statistics, for readability. In passing these as the name parameter to getstat(), you should remove all spaces. flag - Can be one of the following values STAT_CURRENT - returns the current value of this statistic STAT_MIN - returns the minimum value of this statistic STAT_MAX - returns the maximum value of this statistic STAT_AVERAGE - returns the average value of this statistic STAT_TIME_AT_VALUE - returns the total simulation time the stat spent at a given value (requires an additional p1/p2/p3 parameter designating the desired value). This is only valid if the stat is tracking its history or profile data, such as in objects' standard \"State\" statistics. See below for more information on this. p1 , p2 , and p3 are for providing \"requirements\" to resolve the correct statistic. For example, a list has several per-partition statistics. In order to get a partition's statistic, you need to pass the desired partition ID as p1. Requirements depend on the statistic that is being retrieved. There are also several special stat names that you can use. They are: \"State\", \"Output\", \"Input\", \"Content\", \"Staytime\". If you use one of these names, the command will return the corresponding standard statistic of the object. Examples: getstat(object, \"Output\", STAT_CURRENT) - returns the current (total) output of the object (same as object.stats.output) getstat(object, \"Content\", STAT_AVERAGE) - returns the average content of the object getstat(object, \"State\", STAT_CURRENT, 0) - returns the current state of the object (same as object.stats.state().value) getstat(object, \"State\", STAT_TIME_AT_VALUE, 0, STATE_IDLE) - returns the total idle time of the object (0 designates the state profile, i.e. the default state profile) getstat(object, \"Staytime\", STAT_MAX) - returns the maximum recorded stay time of the object Note that some stats that do not make sense will not return valid data, such as average state, or average output. STAT_TIME_AT_VALUE If you want to get the STAT_TIME_AT_VALUE access, the statistic needs to track either historical or profile data. If it is an object's standard \"State\" statistic, FlexSim will automatically make it track its profile data, so you don't need to do any extra work for that. For other statistics, however, you will need to explicitly \"subscribe\" to the statistic to make it track its profile or history data. Historical data records each change of value and the corresponding simulation time of that value change. Profile data records the total time the variable was at each value. Only non-negative integer values are valid for profile data. To subscribe to a tracked variable, first find where the tracked variable statistic is in the tree. For example if it's the \"Content\" statistic, you'll likely find it at object>stats/stats_content. Then call the following command on the node: function_s(statNode, \"addSubscriber\", needsHistory, needsProfile, persist). The needsHistory and needsProfile parameters are booleans telling which data you want to track. The persist is a boolean that tells if you want it to track these statistics indefinitely going forward. The tracked variable tries not to continue tracking extra data if it is not needed. If nobody subscribes to its data \"persistently\", then it will discontinue recording the data if it doesn't get subscribers for a while (I think after 5 or so model resets with no subscribers). Recording historical data will allow you to get the STAT_TIME_AT_VALUE access. However, using historical data for getting STAT_TIME_AT_VALUE is slower than if you track profile data. With historical data, it must traverse the entire history to calculate STAT_TIME_AT_VALUE, whereas if you track profile data, it stores the total time at the value directly in the profile data. Example getstatetableutilization (Table stateTable, TrackedVariable stateProfile) Description Returns the utilization of a state profile given a state table. See State Table for more information on how to create and modify a state table. Example getstatetableutilization(Table(\"StateTable1\"), Model.find(\"Processor1\").as(Object).stats.state()) getstream (node object) Returns a unique random stream associated with the object Description Returns a unique random stream associated with the object. Returns the number stored in the object's stream attribute. If the object does not yet own a stream attribute, or if its stream attribute is 0, FlexSim will assert the attribute and assign it a unique stream number. If the object passed into the function does not have object data, it will store the unique stream in a subnode. This subnode will be destroyed on model reset and reassigned during the model run as needed. Assigned streams start at stream 101 and increase as they are assigned. Example uniform(0, 1, getstream(current)) graphtohistogram (obj graph, obj histogram, num start, num end, num res, num xyformat) Description For developer use. Generate histogram data from a list of values. This command will generate a histogram inside the node histogram based on the occurrence table given by graph. Mainly used internally by objects. The starting value of the histogram is specified as start. The ending value of the histogram is specified as end. The number of buckets in the histogram is specified as res. If xyformat is 0, it assumes that the graph is a y format occurrence table. If xyformat is 1, it assumed the graph is an xy format occurrence table. Similar to makehisto(). Refer to makehisto() for more information on these similarities. Example graphtohistogram(so(),so().next,1,10,5,0) hypergeometric (num trials, num successes, num size[, num stream]) Returns a random sample from a hypergeometric distribution Description hypergeometric( t , m , n , stream ) is a discrete probability distribution used to represent the number of successes in t draws without replacement from a population of size n containing exactly m success states. Example importdataset (node datatree, str filename, num format) Description Import tree dataset from a Comma Separated Value (CSV) file. datatree should be the node to import the data into. There are 3 possible formats to import. If format is 1, then the data is imported as a table, meaning each sub-node of datatree is a row in the table, and each sub-node of each row is a cell in the table. This is the same as using the importtable() command. If format is 2, then the data is imported as a simple data series. The csv file is assumed to have one column, and each row's value is imported into a sub-node of datatree. If format is 3, then the data is imported as a series of x,y pairs. The csv file is assumed to have 2 columns. Row 1 column 1 of the csv file is imported as sub-node 1 of datatree, row 1 column 2 is imported as sub-node 2 of datatree, row 2 column 1 is imported as sub-node 3 of datatree, and so forth. Example importdataset(so(),\"C:\\\\mydataset.csv\",1) inversegaussian (num location, num scale, num shape[, num stream]) Returns a random sample from an inversegaussian distribution Description inversegaussian( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ³ ⁄ α Probability Density Functions: Possible Applications: Used to model the time to complete some tasks. Comments: The inversegaussian( γ , 1, α ) and wald( γ , α ) distributions are the same. As γ approaches infinity, the distribution becomes more like the normal (Gaussian) distribution. The β parameter has elements of a shape parameter since it affects the skewness and kurtosis (width). Example double repairtime = inversegaussian(60, 2, 4, 5); The repairtime variable is set equal to a inversegaussian distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. inverseweibull (num location, num scale, num shape[, num stream]) Returns a random sample from a inverseweibull distribution Description Generates a continuous random variate from a inverseweibull distribution with parameters as defined. Example invertedweibull (num location, num scale, num shape[, num stream]) Returns a random sample from an inverted weibull distribution Description Generates a continuous random variate from an inverted weibull distribution with parameters as defined. Example johnsonbounded (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a johnson bounded distribution Description Generates a continuous random variate from a johnson bounded distribution with parameters as defined. Example johnsonunbounded (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a johnson unbounded distribution Description Generates a continuous random variate from a johnson unbounded distribution with parameters as defined. Example laplace (num location, num scale[, num stream]) Returns a random sample from a laplace distribution Description Generates a continuous random variate from a laplace distribution with parameters as defined. Example logarithmic (num theta[, num stream]) Returns a random sample from a logarithmic distribution Description Generates a discrete random variate from a logarithmic distribution with parameters as defined. Example logistic (num location, num scale[, num stream]) Returns a random sample from a logistic distribution Description Generates a continuous random variate from a logistic distribution with parameters as defined. Example loglaplace (num location, num scale, num shape[, num stream]) Returns a random sample from a log laplace distribution Description loglaplace( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β α ² ⁄ ( α ²− 1) for α > 1 variance = β ² α ² ( 2 α ² + 1 ) ⁄ ( α ² - 1 )² ( α ² - 4 ) for α > 2 Probability Density Functions: Possible Applications: Rarely used in defining processing times. Comments: This distribution is also known as the double-exponential distribution because its density curve is essentially two exponential curves back-to-back. Example loglaplace(0, 2, 8, 5); A loglaplace distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 8, and random stream number 5. loglogistic (num location, num scale, num shape[, num stream]) Returns a random sample from a log logistic distribution Description loglogistic( γ , β , α , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( 0, ∞ ) α is the shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β ( π ⁄ α )csc( π ⁄ α ) for α > 1 variance = β ²( π ⁄ α ){2csc(2 π ⁄ α ) − ( π ⁄ α )[csc( π ⁄ α )]²} for α > 2 Possible Applications: Used to model the time to perform some task. Example loglogistic(0, 1, 2, 5); A loglogistic distribution with a location (shift) of 0, a scale of 1, a shape factor of 2 and random stream number 5. lognormal2 (num location, num scale, num shape[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. Example double cycletime = lognormal2(0, 29.8, 0.31, 5); Set the cycletime variable to a lognormal2 distribution with location parameter 0, scale parameter 29.8, shape parameter 0.31, and random stream number 5. makehisto (obj datalist, obj histocontainer, num nrofbuckets) Description For developer use. Builds a histogram structure from the data list and puts it in the destination container node with the given number of buckets. This is similar to graphtohistogram() except that this command creates a more complete structure. To illustrate the operator instead., view a FlexSim object's attribute tree. The makehisto command will create the entire stucture of object>stats/staytime/staytimehisto, whereas graphtohistogram will only populate object>stats/staytime/staytimehisto/data. makehisto also assumes a standard, y data series structure, meaning each sub-node of datalist is its own data point (they are not paired as x/y values). Example makehisto(c.find(\"@>objectfocus+\"), c.find(\">histogram\"), 20) negbinomial (num successes, num prob[, num stream]) Returns a random sample from a negative binomial distribution Description Generates a discrete random variate from a negative binomial distribution with parameters as defined. Example normal (num mean, num stddev[, num stream]) Returns a random sample from a normal distribution Description normal(μ, σ, stream) is an unbounded continuous probability distribution. Inputs: μ is the location parameter ∈ ( - ∞ , ∞ ) σ is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( - ∞ , ∞ ) mean = μ variance = σ² Probability Density Functions: Possible Applications: Used to model various types of error such as machined hole diameters for large quantities of parts. This distribution is not used much in simulation because variance found in real processes do not typically follow a symmetric distribution such as this. Comments: The normal distribution is completely symmetric meaning values below the mean have the same probability for occurance as values above the mean. The mode and mean are equal for the normal distribution. When using this distribution, be aware that negative values can be returned, and therefore truncating the distribution at 0 may be necessary as shown in the example below. Example double thickness = Math.max(0.001, normal(5, 1.2)); The thickness is set a normal distribution having a mean of 5 and a standard deviation of 1.2 that is truncated for values less than 0.001. No random stream has been declared, so the default stream number 0 will be used to generate variates from the distribution. pareto (num min, num scale[, num stream]) Returns a random sample from a pareto distribution Description Generates a continuous random variate from a pareto distribution with parameters as defined. Example pearsont5 (num location, num scale, num shape[, num stream]) Returns a random sample from a pearson t 5 distribution Description Generates a continuous random variate from a Person-T5 distribution with parameters as defined. Example pearsont6 (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a pearson t 6 distribution Description Generates a continuous random variate from a Person-T6 distribution with parameters as defined. Example poisson (num mean[, num stream]) Returns a random sample from a poisson distribution Description Generates a continuous random variate from a poisson distribution with parameters as defined. Example qstudentt (num confidence [0.9/0.95/0.99], num degreesoffreedom) Description For developer use. Returns the quantity of the studentt distribution value for the given percent confidence and degrees of freedom. Example qstudentt(0.95, nrofsamples - 1) randantithetic (num on/off) Description Makes number streams antithetic. Using this command, users can switch random streams to generate numbers between 1 and 0; rather than the default of 0 to 1. This is helpful for determining if random numbers are having a big affect on the results of the model. It's also useful when experimenting with massive models and there isn't sufficient time to run the model for multiple iterations as required for good statistical sampling. The user can then choose to do just one regular run and one antithetic run of the model to obtain two diametrically apposed results. These two results can be averaged for an approximation that is somewhat better than if each run of the model used random stream generators without antithetic sampling. Example randantithetic(1); randinit (num stream, num seedvalue[, num seedvalue2, num seedvalue3, num seedvalue4, num seedvalue5, num seedvalue 6]) Initializes a random stream Description Initializes the random number stream by setting its first value to seedvalue. Although there are an unlimited number of random number streams available to the user, only the first one hundred streams numbered 0 through 99 have been initialized when the FlexSim application is opened. To create a new stream, simply execute the randinit() command for the new stream. For instance, executing randinit(105, 7628912) will create a new stream number 105 if it does not currently exist, and set its initial seed value to 7628912. If \"Repeat Random Streams\" has been selected in the Statistics menu, then streams 0 through 99 will be automatically initialized with a default seed value for that stream whenever the model is reset. For streams 100 and above, you must use the randinit() command to set their initial seed values if you wish to repeat their random streams. Any positive integer may be passed in as the seedvalue for a random number stream. If you pass in a seedvalue of 0 for random streams 0 through 99, it is a special case that will initialize them to their default seed values. seedvalues 2 through 6 are only used if you are using FlexSim's Combined MRG random number generator. To enable this generator, call maintenance(49,1) when your model opens. Example Example 1: randinit(5, 73241); Initialize FlexSim's random stream number 5 with a sead value of 73241. Example 2: randinit(2,0); for(int i = 100; i <= 199; i++) { randinit(i, realtime(1) * uniform(0, 1, 2)); } First initialize standard stream number 2 to its default seed value, then execute a loop for 100 iterations to create (if necessary) streams 100 through 199 and set their initial seed value to the product of a random number pulled from stream 2 and the current number of real clock seconds. randnext (num stream) Description For development use. Returns the next random number from the stream. This command is used to pull random samples from probability distribution functions. Example randnext(1); Gets the next random number in the stream of random numbers associated with stream generator number 1. randomwalk (num location, num scale, num shape[, num stream]) Description Generates a continuous random variate from a random walk distribution with parameters as defined. Example randstate (num stream[, seednr]) Gets the current state value for the random number stream Description Returns the current state value for the specified random number stream. This state value may be useful as the seed value in the randinit() command for the purposes of restarting a saved state model from the same point in the random number stream of the initial run. seednr is only needed if you are using FlexSim's Combined MRG random number generator, in which case the seednr should be a value 1-6 defining which seed value you want to get the state on. Refer to randinit() for using the Combined MRG. Example int curstate = randstate(5); Set the curstate variable to the current random integer value stream number 5. removebundleentry (node datanode, int entrynum) Removes the entry entrynum (base 0) of the bundle Description Removes the entry entrynum (base 0) of the bundle. Example removebundleentry(x, 2); removefirstbundleentry (node datanode) Removes the first entry in the bundle Description Removes the first entry in the bundle. For managing memory footprint of historical data. Example removefirstbundleentry(x); removelastbundleentry (node datanode) Removes the last entry of the bundle Description Removes the last entry of the bundle. Example removefirstbundleentry(x); setbundlevalue (node datanode, num entrynr, str/num field, num/str val) Sets the value of the entry (base 0) and field (base 0) of the bundle Description Sets the value of the defined entry (base 0) and field (base 0) of the bundle. Example setbundlevalue(x, 5, \"Object Name\", current.name); triangular (num min, num max, num mode[, num stream]) Returns a random sample from a triangular distribution Description Generates a continuous random variate from a triangular distribution with parameters as defined. Example uniform (num min, num max[, num stream]) Returns a random number between the min and max values Description uniform( a , b , stream ) is a bounded continuous probability distribution. Inputs: a and b are real numbers with a < b a is the location parameter defining the minimum variate b defines the maximum variate b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = [ a , b ] mean = ( a + b ) ⁄ 2 variance = ( b − a )² ⁄ 12 Possible Applications: Used to approximate a value that is felt to be randomly varying between a and b but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any real number inbetween will be returned. The uniform(0, 1) distribution is essential in generating random variates from all the other distributions and will return a continuous set of random values between and inclusive of 0 and 1. Example uniform(12.3, 27.5, 3); Random number stream 3 will be used to generate a random variate from a uniform distribution having a minimum of 12.3 and a maximum of 27.5. weibull (num location, num scale, num shape[, num stream]) Returns a random sample from a weibull distribution Description weibull( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + ( β ⁄ α ) Γ (1 ⁄ α ) where Γ () is the Gamma function. variance = ( β ² ⁄ α ) { 2 Γ (2 ⁄ α ) − 1 ⁄ α [ Γ (1 ⁄ α ) ] ² } Probability Density Functions: Possible Applications: The weibull distribution is commonly used when there is not sufficient data available because it can take on so many different shapes depending on the shape factor. It is a very common distribution used for representing the time between equipment failures, as well as the time to complete a manual task. Comments: The weibull( γ , β , 1 ) and exponential( γ , β ) distributions are the same. The weibull( γ , β , 2 ) and rayleigh( γ , β ) distributions are the same. The weibull distribution is skewed to the left if α > 3.6 Example weibull(0, 2, 3, 5); A weibull distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 3, and random stream number 5. Strings Commands associated with strings, string manipulation and string comparisons. asciistr (str string [, num index]) Description This command returns the ascii value of the character at the specified index (0-based) of the string. If index is not specified, the first character of the string is used. Example asciistr(\"fred\",1) returns 114, the ascii value of 'r' cdir () Description Returns a string of the path to FlexSim's install directory. Example string userpath = cdir(); For a standard installation this will return C:\\Program Files\\Flexsim3\\ currentfile () Gets the path to the currently open model Description Returns the path of the currently open model. Example currentfile(); documentsdir () Gets the full path to the currently active user's FlexSim Projects folder in My Documents Description Returns a full path to the currently active user's FlexSim Projects folder in My Documents Example documentsdir() executestring (str thestring[, node c, node i, obj eventdata]) Executes a string as flexscript Description Executes the given string as flexscript. Parameters 2-4 are the same as executefsnode. Example executestring(\"profileevents()\"); getdirbrowse (str initialdir, str message, node result) Opens a browser window to pick a directory Description Opens a browser window to pick a directory. destnode should have string data, and the directory path will be written to its text. Example getdirbrowse(documentsdir, \"A folder\", destnode) getpath (str truncatedpath) Returns the full file path of the truncated path Description Takes a truncated, or relative file path, and returns the full file path. Example string fullpath = getpath(\"fs3d\\\\texturebox.wrl\"); modeldir () Gets the path to the currently open model's directory Description Returns that path of the currently open model's directory. Example modeldir(); pdir () Description This command returns a string containing the path on the hard drive to the FlexSim's program directory. Example string flexpath = pdir(); This sets flexpath FlexSim's program directory. A typical installation would return C:\\Program Files\\FlexSim7\\program\\ as the string. pfile () Description For developer use. Returns the string attached to the end of the command line used to start the FlexSim application. Example If FlexSim was started with this command line: \"C:\\Program Files\\Flexsim7\\program\\flexsim.exe\" \"mymodel.fsm\" then a call to pfile() would return mymodel.fsm as a string. programdatadir () Gets the full path to the directory where FlexSim stores program data Description Returns a full path to the directory where FlexSim stores program data, such as the help documents. Example programdatadir() returns a string like \"C:\\ProgramData\\Flexsim\\Flexsim7\\\" replacedata_n (obj startnode, num value, num replacement) Description For developer use. Search/Replace number data matched under startnode. Only number data nodes are searched. Returns the total number of matches found. Example replacedata_n(main(),25,42) replacedata_s (obj startnode, str string, str replacement[, num replication]) Description For developer use. Search for a string data match under startnode and replace with the replacement string. Results appear in the output console. This function will recognize and replace substrings. The search is case-sensitive. Replication is currently not used. See searchdata_s(). Returns the total number of matches found. Example replacedata_s(main(),\"jack\",\"john\") replacename (obj startnode, str searchname, str replacement) Description For developer use. Replace all node names found to be a match with searchname that fall under startnode. This function requires an exact match and will not recognize substrings. Returns the total number of matches found. Example replacename(main(),\"jack\",\"john\") searchdata_n (obj startnode, num val) Description For developer use. Search for a number data match under startnode. Only number data nodes are searched. Results appear on the output console. Returns the total number of matches found. Example searchdata_n(main(),25) searchdata_s (obj startnode, str string [, num replication]) Description For developer use. Search for a string data match under startnode. Results appear in the output console. This function will recognize substrings and report which nodes contain them, and how many. The search is case-sensitive. Replication is currently not used. Returns the total number of matches found. Example searchdata_s(main(),\"glVertex()\",1) searchname (obj startnode, str searchname) Description For developer use. Search for a name match under startnode. Results appear in the output console. The search is case-sensitive. Returns the total number of matches found. Example searchname(main(),\"FixedResource\") strascii (num asciivalue) Description This command returns a string that contains the character whose ascii value is character. Example strascii(91) + \"alert(\" + strascii(34) + \"Hello There\" + strascii(34) + \")\" + strascii(93); This returns a string that contains the following phrase: [alert(\"Hello There\")] stringtoken (str token, str delimit) Finds the next token in a string Description Finds the next token in a string. The first parameter is a string containing delimited tokens. The second parameter is a string with a set of delimiter characters. Works similarly to strtok() in C++. Example string token = \"Jacob,Emma,Michael,Isabella,Ethan\"; string name = stringtoken(token,\",\"); while(stringlen(name)>0) { pt(name);pr(); name = stringtoken(NULL,\",\"); } This prints each name in the list to a different line of the output console. tostring (thing) Description For developer use. Assert as pchar string. Assert that the number val is of type char*. Only serves a real purpose in C++, but is safe to use in Flexscript. Example tostring(eventdata) truncatemediapath (str path) Description Returns a truncated media path based on the full path of the file passed. If this file exists relative to the model directory, then the path will be truncated to be relative to the model directory. It will also be truncated if it is relative to the FlexSim install directory. Example truncatemediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\texturebox.wrl\"); This example will return the string \"fs3d\\\\texturebox.wrl\" userdatadir () Gets the full path to the directory where FlexSim stores user data Description Returns a full path to the directory where FlexSim stores user data, such as global preferences and compiler settings. Example userdatadir() returns a string like \"C:\\Users\\USERNAME\\AppData\\Roaming\\Flexsim\\Flexsim7\\\" Tables Commands for accessing, assigning and managing data in tables. exporttable (node exportnode, str filename[, num exportcolumnnames = 0, num exportrownames = 0, str listseparator = 0, str decimalseparator = 0]) Export a table in .CSV format Description Export a table in .CSV (Comma Separated Value) format. Example exporttable(so(),\"mytable.csv\",1, 1) This exports the table designated as so(), including row and column headers. importtable (node importnode, str filename[, num importcolheaders = 0, num importrowheaders = 0, str listseparator = 0, str decimalseparator = 0, str thousandseparator = 0]) Imports table data into importnode from a csv file. When importing both row and column headers, the first value in the file will be skipped. When importing into a bundle table, each field will use the data type of its first imported cell (row 1). Description Imports table data into the node from a csv (comma-separated values) file. Example importtable(current.labels[\"data\"], \"C:/modeldata.csv\", 1, 1) TaskExecuter Object Commands associated with TaskExecuter objects and a tasksequence. addsphere (obj object, num x, num y, num z, num radius) Description For developer use. Adds a collision sphere with the specified radius to the specified object at location x, y, z relative to the object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed. Example addsphere(Processor1, 2, -1.25, .75, 1); changepersonvisuals (treenode person, string category, num/string index [, Array color]) Change the person's visuals (Head, Hair, Skin Texture, Clothes) Description Change the person's visuals (Head, Hair, Skin Texture, Clothes). This can be done dynamically during the model run. Example changepersonvisuals(person, \"Shirt\", \"Scrubs\", Color.red) createcoordinatedtasksequence (obj dispatcher) Create a new, empty coordinated task sequence Description Create a new, empty coordinated task sequence on the specified Dispatcher. Must be followed at some point by dispatchcoordinatedtasksequence. Example createcoordinatedtasksequence(current.centerObjects[1]); dispatchcoordinatedtasksequence (obj tasksequence) Dispatches the coordinated task sequence Description Dispatches the specified coordinated task sequence. Must be called after calling createcoordinatedtasksequence(). Example dispatchcoordinatedtasksequence(newts); distancetotravel (obj traveler, obj destination) Gets the distance a traveler would need to travel to reach destination Description Returns the distance that a traveler (Operator, Transporter, etc) would need to travel in order to reach the given destination. If the object is connected to a network, then it will return the travel distance along the network. Example distancetotravel(current.centerObjects[1], current); drawspheres (obj object, obj view) Description For developer use. Draws the collision spheres assigned to the specified object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed Example drawspheres(current,view); freeoperators (obj taskexecuter, obj involved) Release all operators connected to taskexecuter that are working on involved Description Release all operators connected to the specified dispatcher that are currently working on the involved object. This command should be executed from a trigger when you want to release operator(s) that you have called to a process using the requestoperators command or using a utilize task. The first parameter can be either a dispatcher connected to operator(s) that you want to free, or it can be the operator itself. The second parameter is a key for releasing the appropriate operator(s). If you have called the operator(s) using the requestoperators command, then the second parameter of the freeoperators command should match the third parameter of the requestoperators command. If you have given an operator a utilize task, then the second parameter of the freeoperators command should match the involved1 parameter of the utilize task. You would probably execute this command from a trigger like OnProcessFinish or OnSetupFinish. For more information, refer to the task sequence section of the user manual. Example freeoperators(current.centerObjects[1], item); getallocatedfromkey (obj coordtasksequence, num key) Gets a reference to the object allocated for the allocate task for the given key Description Returns a reference to the object that has been allocated for the allocate task specified by the given key. Example treenode allocatedobj = getallocatedfromkey(getcoordinatedtasksequence(current.centerObjects[1], 0), mykey); getcoordinatedtasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a coordinated task sequence Description Returns a reference to the coordinated task sequence that is associated with allocation request with the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to the coordinated task sequence that it is currently allocated for. Example treenode coordtasksequence = getcoordinatedtasksequence(current.centerObjects[1], 5); getcurtask (node tasksequence) Gets the current task number of tasksequence Description Returns the current task number of the task sequence Example if(getcurtask(ts) > 5) pt(\"The operator has finished the first five tasks\"); getpreempt (node tasksequence) Gets the preempt value of the tasksequence Description Returns the preempt value of the tasksequence. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example if(getpreempt(mytasksequence) == PREEMPT_ONLY) pt(\"This tasksequence is a preempting task\"); getpriority (node tasksequence) Gets the priority value of the tasksequence Description Returns the priority value of the tasksequence. Example if(getpriority(mytasksequence) > 5) pt(\"This tasksequence has a priority greater than 5.\"); getutilizedobject (obj dispatcher, obj involved, obj station, num utilizednr) Gets a reference to an operator that is currently executing a utilize task Description Finds and returns a reference to an operator that is currently executing a utilize task with the given involved and station variables. If multiple operators are being used, then utilizednr allows you to distinguish which one you want to reference. Example treenode op = getutilizedobject(current.centerObjects[1], item, current, 1); insertallocatetask (obj tasksequence, obj dispatcher, num priority, num preempt [, num noblock] ) Inserts an allocate task into the coordinated task sequence Description Inserts an Allocate Task into the specified coordinated task sequence. By default the allocation task is a blocking task, but if noblock is 1, then the allocation does not block further execution of the task sequence. Example insertallocatetask(newts, current.centerObjects[2], 0, 0); insertdeallocatetask (obj tasksequence, num allocationkey [, num noblock] ) Inserts a deallocate task into the coordinated task sequence Description Inserts a Deallocate Task into the specified coordinated task sequence to deallocate the resource specified by allocationkey. By default this task will block, but if noblock is 1, it will not block. Example insertdeallocatetask(newts,forkkey); insertproxytask (obj tasksequence, num executerkey, num type [, num/obj involved1, num/obj involved2 , num var1, num var2, num var3, num var4]) Inserts a proxy task into the coordinated task sequence Description Inserts a proxy task into the specified coordinated task sequence. Example insertproxytask(newts, dispatchkey, TASKTYPE_TRAVEL, current.centerObjects[1], NULL,0,0,0,0); insertsynctask (obj tasksequence, num taskkey) Inserts a sync task into the coordinated task sequence Description Insert a Sync Task for the specified task in a coordinated task sequence. Example insertsynctask(newts, travelkey); pickoffsetx (obj station, obj item, obj loadingobject) Description This command queries the station for an x offset for the loadingobject to travel from its x center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = pickoffsetx(item.up,item,current); pickoffsety (obj station, obj item, obj loadingobject) Description This command queries the station for a y offset for the loadingobject to travel from its y center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = pickoffsety(item.up,item,current); pickoffsetz (obj station, obj item, obj loadingobject) Description This command queries the station for a z offset for the loadingobject to travel from its z base in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = pickoffsetz(item.up,item,current); placeoffsetx (obj station, obj item, obj unloadingobject) Description This command queries the station for an x offset for the unloadingobject to travel from its x center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = placeoffsetx(current.centerObjects[1],item,current); placeoffsety (obj station, obj item, obj unloadingobject) Description This command queries the station for a y offset for the unloadingobject to travel from its y center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = placeoffsety(current.centerObjects[1],item,current); placeoffsetz (obj station, obj item, obj unloadingobject) Description This command queries the station for a z offset for the unloadingobject to travel from its z base in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = placeoffsetz(current.centerObjects[1],item,current); profiletasksequence (node tasksequence) Prints information on a task sequence to the output console Description Prints information on a task sequence to the output console. The output console must be open to write to it. To open the output console, use menus View | Output Console. You can also pass a reference to the TaskExecuter object instead of a specific task sequence. This will profile the object's currently active task sequence. Example profiletasksequence(gettasksequence(so(), 0)); Writes all the tasksequence information to the output console for the active (0) tasksequence of the selected object (so()). reordertasks (obj dispatcher) Causes the dispatcher to reorder all its task sequences according to its queue strategy Description Causes the involved Dispatcher/TaskExecuter to reorder all its task sequences according to its queue strategy. Example reordertasks(c) requestoperators (obj dispatcher, obj station, obj involved, num nrofops, num priority, num preempting) Description Request a specified number of operators to come to the station object and work on the involved object until released. The involved object will later need to be passed into the freeoperators() command when releasing the operators. The operator(s) being called must either be the object referenced by dispatcher, or be connected to its output ports. The tasksequence which is sent to the operator(s) will be given a priority and preempting value. The possible values for preempting are as follows: 0 = PREEMPT_NOT 1 = PREEMPT_ONLY 2 = PREEMPT_AND_ABORT_ACTIVE 3 = PREEMPT_AND_ABORT_ALL For each operater that needs to be called, stopobject() will be called on the station, and a tasksequence that looks like the following will be sent to the dispatcher (or operator) object. 1. put a preempt \"bookmark\" in the task sequence (TASKTYPE_MILESTONE) 2. travel to the station (TASKTYPE_TRAVEL) 3. resume the station (TASKTYPE_STOPREQUESTFINISH) 4. be utilized at the station (TASKTYPE_UTILIZE) Example requestoperators(current.centerObjects[1], current, item, 2, 0, PREEMPT_NOT); This calls 2 operators connected to the object that is connected to the first center port of the current object to come to the current object, and work on the item. rerankbesttask (obj object) Description This command forces the object specified as dispatcher to search through its task sequence queue and put the task sequence with the highest priority in the front of its queue. This will not reorder the other task sequences in the queue. Example rerankbesttask(current); setcollisioncheck (obj taskexecuter, num checkstate [, num checkinterval]) Sets the state and interval for collision checking on the taskexecuter Description Sets the state and interval for collision checking on the taskexecuter. If checkstate is 1, then check for collisions, else don't. If interval is >0, then reset the \"Time between Collision Checks\" for the taskexecuter specified. Example setcollisioncheck(traveler,1,5); Starts the traveler checking for collisions every 5 time units. setpreempt (obj tasksequence, num newpreempt) Sets the preempt value of the tasksequence Description Sets the preempt value of the tasksequence to the value of newpreempt. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example setpreempt(tasksequence, PREEMPT_NOT); This example changes the task sequence's preempt value to not preempt. setpriority (obj tasksequence, num newpriority) Sets the priority of the tasksequence Description Sets the priority value of the tasksequence to the value newpriority. Example setpriority(myts, 1); This example sets the priority value of the task sequence myts to the value of 1. Tree Access Commands for referencing nodes or objects through FlexSim's tree structure. library () Reference to the library node in the main tree Description This command returns a reference to the library node in the main tree. It is used as a fast way of referencing the library. Example treenode SourceObj = library().find(\"?Source\"); This sets the variable SourceObj so that it references the node called Source in the library. maintree () Reference to the main tree Description Returns a reference to the main tree. When defining string paths to nodes in the main tree, MAIN can be used as in the following example node(\"MAIN:/project/exec/globals/cppfunctions\"); Example maintree().find(\"project/exec/globals/cppfunctions\"); model () Reference the model's root node Description This command returns a reference to the model node in the main tree. It is used as a fast way of referencing the model. Example treenode SourceObj = Model.find(\"Source1\"); This sets the variable SourceObj so that it references the node called Source1 in the model. views () Reference to the views tree Description This command returns a reference to the views tree. The views tree contains all of the information about the windows that are currently open as well as all of the available GUIs. When defining string paths to nodes in the view tree, VIEW can be used as in the following example: node(\"VIEW:/standardviews/ortho\"); Example activateview(views().find(\"standardviews/runcontrol\")); This activates the GUI called \"runcontrol\" which is stored in the node called \"standardviews\" of the view tree. Tree Node Data Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree. $iter (num index) See User Manual > Miscellaneous Concepts > SQL Queries Description See Miscellaneous Concepts > SQL Queries for more information. Example checkdllconnection (node dllnode, num force) Returns 1 if the node is properly connected with a dll function Description Returns 1 if the node is properly connected with a dll function. Otherwise returns 0. If force is 1, then if the node is not connected, it will attempt to bind it to a dll function, and will return 1 if successful, 0 if not. The node must be toggled as DLL and have proper data specifying the path to the dll and the function name. Example if(!checkdllconnection(getvarnode(current, \"exittrigger\"), 1)) msg(\"DLL Error\",\"Error connecting to dll.\") This will attempt to connect and object's exit trigger node with a dll function, and will print a message if it is unsuccessful. comparetrees (obj tree1, obj tree2) Description For developer use. Test trees for equality. Example comparetrees(node(\"MAIN:/project/model/1\"),node(\"MAIN:/project/model/2\")) createcoupling (node container1, node container2) Creates a pointer coupling inside the two container nodes Description Creates a pointer coupling inside the two container nodes Example createcoupling(current.labels[\"items\"], item.labels[\"owner\"]); enablecode (node codenode [, num mode]) Makes the node a code node Description If mode is 0, then the node is set to FlexScript unless the node is already a code node and then it leaves the node as is. If mode is non-zero, then it forces a given toggle: 1-FlexScript, 2-C++, 3-DLL. This command is used in the code edit window to toggle the node as FlexScript or DLL. Example enablecode(getvarnode(current, \"exittrigger\")); findownerobject (node thenode) Description Like ownerobject(), this command returns the object node containing thenode. Unlike ownerobject(), this command does not cache the result, but searches in the tree for the \"owner\" node. For example when a TaskExecuter transfers from one NetworkNode to another on a network path, a coupling node is transferred to the new node to keep track of the TaskExecuter's current node, and findownerobject() is used to get access to the correct \"owner\" node. Example findownerobject(c) getsdtvalue (node sdtNode, str valName) For developer use Description Primarily for developer use only. Returns the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example nodebreak (node a) Description For developer use. Breaks a coupling pointer on a node that has coupling data that is pointing to another node. If the node is part of a bi-directional coupling, the other coupling is not affected. Example nodebreak(so()) nodeinsertafter (node targetnode) Creates a new node immediately after targetnode Description This command creates a new node in the tree immediately after the targetnode. The new node has no data attached to it. Data is attached using the nodeadddata() command. Any node in the tree can be passed as targetnode. Example nodeinsertafter(item.find(\">labels\").last).dataType = DATATYPE_NUMBER; This creates a new label on the object referenced by item that holds number data. nodeinsertinto (node containernode) Deprecated, Creates a new node inside containernode Description This command is deprecated. Use treenode . subnodes .add() Example nodejoin (node a, node b) Description For developer use. Join two pointer nodes to form a bi-directional coupling. A bi-directional coupling in FlexSim is a pair of nodes who's data points to each other. FlexSim automatically manages the coupling. If either one of the endpoints is deleted or nullified, FlexSim cleans up to prevent dangling pointers. The two nodes a and b must have coupling data. Example nodejoin(so(),so().next) objectexists (obj object) Check if an object exists Description If you're trying to test if an object exists when using dot syntax you can omit the objectexists. For example, if (current.labels[\"MyLabel\"]) or if (current.next). This command returns true (1) if the object specified as object exists in the tree. If the object does not exist, this command returns false (0). Example if (objectexists(next(current))) { moveobject(item, next(current), 1); } This checks to see if there is an object in the tree after current. If there is, the object referenced by item is moved into it through port number 1. ownerobject (node thenode) Gets the object that \"owns\" the executing node, usually the current object Description This command returns the node with object data attached to it that is the start of the sub-tree that thenode is in. In other words, it returns the object node that contains thenode. The result of this command is cached on thenode, so that subsequent calls to ownerobject(thenode) do not search in the tree, but return the cached result. If thenode subsequently changes parent, ownerobject(thenode) will return the cached result. This command is used in most code fields and trigger fields to set the access variable current. In these fields, c references the node that contains the code, and ownerobject(c) references the object that \"owns\" that node. Example string objname = ownerobject(c).name; This sets objname to the name of the object that contains the node referenced by c. The c usually refers to the node where the code is being written. treenode current = ownerobject(c); This example is present in most code fields in FlexSim, and retrieves access to the \"current\" object. removeallcouplingreferences (node thenode) Recursively breaks couplings from a node and its subnodes in the tree Description Recursively breaks couplings from a node and its subnodes in the tree. Example removeallcouplingreferences(current); setsdtvalue (node sdtNode, str valName, num/str/node toVal) For developer use Description Primarily for developer use only. Sets the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example swapnoderanks (obj/node parentnode, num index1, num index2) Swap the ranks for two nodes in a parent node's sub-tree Description This command swaps the ranks of two nodes in the parent node's sub-tree. Swapping ranks can be faster than using setrank() especially for very large lists of nodes. Example swapnoderanks(parentNode,4,parentNode.subnodes.length); This swaps the 4th ranked node in parentNode's sub-tree with the last node in parentNode's sub-tree. This can make removing that node from parentNode's sub-tree faster if the list is very long. Note that this will put the last node into the 4th position, so ordering in the tree should not matter to be able to do this. In other words, this would break fifo ordering. switch_cppfunc (node thenode[, num off/on]) Get or set the \"C++\" flag of thenode Description Get or set the \"C++\" flag of thenode. A value of 1 is C++, a value of 0 is not C++, a value of -1 gets the current value. If a node is toggled as C++ it will be compiled as a C++ function at time of compile. Example switch_cppfunc(so(),1) switch_destroyonreset (obj thenode[, num off/on]) Get or set the \"destroy on reset\" flag of the object Description Get or set a node's \"destroy on reset\" flag. If the flag is 1, the node will be deleted when the model is reset. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_destroyonreset(so(),1) switch_dllfunc (node dllnode[, num on/off/get]) Description Switches the node's dll toggle on or off. 1 switches it on, 0 off, and -1 gets the current state. Example switch_dllfunc(getvarnode(current, \"exittrigger\"), 1); switch_expanded (node thenode[, num off/on]) Expand/collaps sub-level nodes of thenode Description Expand or collapse sub-level nodes of thenode in the tree view. This is analogous to clicking the + and - sign of thenode in the tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_expanded(so(),1) switch_flexscript (obj object[, num on/off/query]) Description For developer use. This command switches the flexscript toggle of a node. 0 = toggle node non-flexscript 1 = toggle node as flexscript -1 = query whether node is toggled (1) or not (0) Example switch_flexscript(var_s(current, \"code\"), 1); switch_hashedlist (obj thenode[, num off/on]) Get or set the \"Hashed List\" flag of thenode Description Get or set the \"Hashed List\" flag of the thenode. A value of 1 sets the node to store a hashed list of its subnodes for fast lookup by name, a value of 0 sets the node to not store a hashed list of subnodes, a value of -1 gets the current value. Example switch_hashedlist(so(),1) switch_noselect (obj object[, num off/on]) Get or set the \"No Select\" flag of the object Description Get or set the \"No Select\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is unselectable, a value of 0 is selectable, and a value of -1 gets the current value. Setting no select on an object keeps it from being clicked on with the mouse in the 3D view. Example switch_noselect(so(),1) switch_orphancoupling (obj thenode[, num off/on]) Get or set the \"orphan coupling\" flag of the object Description Get or set a node's \"orphan coupling\" flag. If the flag is 1, when the coupling node is copied, the copy won't be destroyed if it no longer points to a valid node. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_orphancoupling(so(),1) switch_preservecoupling (obj thenode[, num off/on]) Get or set the \"preserve coupling\" flag of the object Description Get or set a node's \"preserve coupling\" flag. If the flag is 1, when the coupling node is copied, the copy will also point to its partner. For one-way couplings, the original and the copy will both point at the same partner node. For two-way couplings, a new partner node will be created. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_preservecoupling(so(),1) switch_protected (obj object[, num off/on]) Get or set the \"Protected\" flag of the object Description Get or set the \"Protected\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is protected, a value of 0 is unprotected, and a value of -1 gets the current value. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Example switch_protected(so(),1) switch_selected (obj thenode[, num off/on]) Get or set the \"Selected\" flag of thenode Description Get or set the \"Selected\" flag of thenode (red highlight). A value of 1 is selected, a value of 0 is unselected, a value of -1 gets the current value. Example switch_selected(so(),1) switch_statelocked (obj object[, num off/on]) Description Get or set the \"is code state locked\" flag of the node object. A value of 1 is enable, a value of 0 is disable, a value of -1 gets the current value. If enabled, the node will be locked as either C++ or flexscript depending on what it currently is (the model will not change it when \"Make All Code C++/Flexscript\" is chosen through the main menu. Example switch_statelocked(so(),1) switch_stateused (obj thenode[, num off/on]) Description For developer use. Get or set where a node inside a state profile is used by the object. This flag is automatically set in the setstate() command, so developers can know which states are used by an object, for UI development. Example switch_stateused(so(),1) User Interface Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows. activateview (obj viewnode) Description For developer use. This command makes a GUI window active and visible. It should be used to open a window that is stored in the view tree without creating a copy of the view in the active tree, in order to make direct changes that will be saved in the view tree instead of being deleted when the window is closed. Generally, the command createview() should be used to open GUI windows. Use makeactive() if you want to make an already open view the active, or top, window. Example activateview(views.find(\"standardviews/other/FindReplace\")); This opens the node called FindReplace in the folder called standardviews/other in the view tree. activedocumentnode () Gets the currently active document window Description Returns the currently active document window. If the active document window is a tabbed window, it will return the active tab page node. Example treenode activedoc = activedocumentnode(); activedocumentview () Gets the currently active document window as an HWND Description Returns the currently active document window as an HWND. To get the node associated with the window, use activedocumentnode(). Example treenode activedoc = nodefromwindow(activedocumentview()); activeview () Gets the currently active window as an HWND Description Returns the currently active window as an HWND. To get the node associated with the window, use nodefromwindow() Example treenode viewnode = nodefromwindow(activeview()); addviewtext (node view, string text) Description For developer use. Add text to the specified window. Example addviewtext(sv(),\"Hello\") applicationcommand (str name[, p1, p2, p3, ...]) Description For developer use. Execute a command based on its name. This command will search for the named node in VIEW:/nodefunctions, then in MAIN:/project/exec/globals/nodefunctions, then in VIEW:/commands, and lastly in the FlexSim Engine. If it finds a toggled node, it will call nodefunction on that node passing in up to 10 number parameters. If it finds an untoggled node, it will call executefsnode() on that node passing in n1 as c, n2 as i, and n3 as eventcode. Example applicationcommand(\"outputconsole\"); applyalleditstonodes ([obj view]) Description For developer use. Applies all view edits. This is done before a compile or save. Example applyalleditstonodes applyeditstonode (obj view, obj editednode) Description For developer use. Applies view changes to a node. This is usually only needed for a table view, and is essentially the same as mouse-clicking off of the table's currently active cell. This is the opposite of applytoedits. Example applyeditstonode(ownerview(c), current) applylinks (node view [, num refresh]) Description For developer use. This command applies all of the hotlinks and coldlinks in the view window specified as view. If refresh is 1, then the links will be refreshed, meaning the values from the model will be retrieved and set on the window controls themselves. If refresh is 0, then the values in the model will be set according to what the user specified in the view. This command is used in Flexscript GUI programming. Example applylinks(ownerview(c)); This applies all of the links in the window that is currently designated as the selected view. applytoedits (obj view, obj editednode) Description For developer use. Applies programmatic changes to a node if that node has been selected in a view. This is usually only needed for a table view. This is the opposite of applyeditstonode(). Example applytoedits(ownerview(c), current) attlink (node viewdatanode, str path) Description For developer use. Find a node by text path, relative to the view's objectfocus. This command will return the node on the path relative to the object focus of the ownerview of viewdatanode. For example, let viewdatanode be a node inside the structure of a view, such as an OnPress event node. Then, let the objectfocus of the parent view point to an object in the model called \"Processor\". Now, whatever is passed to the path argument of attlink() will be relative to the Processor object. So, if \">variables\" was passed to path in the attlink call, then attlink would return the pointer to \"variables\" of the Processor. If the node does not exist, attlink will return a null \"safenode\" which signals a failure to find the requested node. The return value can be tested for validity with the objectexists() command. Example attlink(so(),\">variables\") // where so() is data node inside view beginaggregatedundo (obj view, str description) Description Begins an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the next endaggregatedundo() command will be encapsulated into a single undoable operation. Returns the id for the created record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = beginaggregatedundo(c.find(\"@/TheTable\"),\"Name Change\"); beginignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example beginignoreundo(); callwebscriptmethod (obj view, str domid, str methodname, int type [, num/str data ...]) Description Call a method on a DOM element in the HTML document of an HTML view. You must define the type of data of any parameters that are to be passed into the method. The following types are available: CWSM_DOUBLE CWSM_STRING CWSM_NODE CWSM_BUNDLE CWSM_BUNDLE_HEADER CWSM_BUNDLE_DATA CWSM_JSON The last parameter passed into the method must be CWSM_END. When using the CWSM_JSON type, the json string must start with json:. For example, json:{\"title\":\"My Title\"} Example callwebscriptmethod(view, \"chart\", \"updateData\", CWSM_DOUBLE, time(), CWSM_NODE, getvarnode(current, \"data\"), CWSM_STRING, \"My Title\", CWSM_END); This examples calls the method named updateData on the element with id \"chart\". checkforexistingview (obj view [, num mode]) Description For developer use. Checks to see if there are any currently active windows that match this window. Compares the beginning of each name of each window in the active view node with the beginning of the name of the specified view. Along with comparing the beginning of the names, this compares each objectfocus as well. If mode is specified and is not 0, it will compare the viewfocus instead of the objectfocus. Example checkforexistingview(c) clearundohistory ([obj view]) Description Deletes all undo records in the undohistory of the specified view. If no view is specified, it will clear the global undo history used by the 3D and tree windows. Example clearundohistory(view); clickcode () Description For developer use. Returns the type of click in a view. Used in the OnClick event. DOUBLE_CLICK returns 1 LEFT_PRESS returns 2 LEFT_RELEASE returns 3 RIGHT_PRESS returns 4 RIGHT_RELEASE returns 5 Example if(clickcode()==2) { pt(\"Clicked!!\");pr(); } This prints the statement \"Clicked!!\" to the output console when the left mouse button is pressed. closeview (node viewnode) Description For developer use. This command closes the view specified as viewnode. If viewnode is not a viewwindow or GUI, this command does nothing. The view is not removed from the active views folder, however. Use destroyobject() to remove it. Example treenode activewindows = views().find(\"active\"); while (activewindows.subnodes.length != 0) { closeview(activewindows.first); } This closes all of the windows that are in the active node of the views tree. This will generally close all of the windows that are currently open. codetotemplate (obj code, obj edit) Description For developer use. Converts C++/Flexscript code into template code and sets the view text of edit to the template code. The code parameter should reference a node that contains text with C++/Flexscript code on it. This is used in a picklist's template code drop-down to create template code from the actual C++/Flexscript code. Example codetotemplate(so(),sv()) codetotemplatetext (node codeobject, node toobjecttext [, num firstcommentonly]) Description For developer use. Converts C++/Flexscript code into template code. Sets the text in toobjecttext to the template code of the code found in codeobject's text Example combocurrentnode (obj combonode) Description For developer use. Returns the current node of the specified picklist combobox. Example createview( \"VIEW:/standardviews/picklisttemplate\",\"\", combocurrentnode(c.find(\"../pickoptions\").getPath(0, 1) ); comborefresh (obj combonode) Description For developer use. Refreshes a picklist combobox contents. Example comborefresh(current); continueaggregatedundo (obj view) Description Continues the previously-finished aggregated undo record for the specified view. This is used if some other logic created and finished an aggregated undo, but you want it to append any subsequent changes onto the previously finished undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = continueaggregatedundo(c.find(\"@/TheTable\")); controlpressed () Description For devloper use. Test if CTRL key is pressed Example controlpressed() createpopup (str viewpath, str objectfocus, str viewfocus, obj relativeto, num x, num y, num sx, num sy) Creates a new popup window Description Similar to the createview command in that it creates a new window. However, FlexSim manages this window so that whenever the user clicks outside of the window, the window will be closed. Code template pop-ups use this command to create a drop-down in which you can edit the template code. The pop-up view must contain a style attribute with the WS_POPUP style. You also specify a view node \"relative to\" which the popup's location will be set (usually whatever view you're writing code on). Also specify an offset location in pixels from relativeto's top-left corner, and a size of the pop-up. Example treenode combobox = c.find(\"../pickoptions\"); createpopup( \"VIEW:/standardviews/picklisttemplate\", combobox.find(\">pickprimary+\").getPath(0,1), combocurrentnode(combobox).getPath(0,1), combobox, 0,20,combobox.location.x, 150 ); This code is similar to what is used to create the template code pop-up for many of FlexSim's edit fields. createundorecord (obj view, obj object, num undocode[, num p1, num p2, num p3]) Description Creates an undo record for the specified view. Returns the uniqueid for the created record. Undo codes: UNDO_AGGREGATED 1 UNDO_MOVE_SIZE_ROTATE 2 UNDO_MOVE_SIZE_ROTATE_GROUP 3 UNDO_SELECTION_CHANGE 4 UNDO_CREATE_OBJECT 5 UNDO_DELETE_OBJECT 6 UNDO_CHANGE_DATA 7 UNDO_CHANGE_RANK 8 UNDO_CHANGE_NAME 9 UNDO_MOVE_OBJECT 10 UNDO_DELETE_COUPLING 11 UNDO_AGGREGATED_FIRST_RECORD 12 UNDO_DESTROY_BRANCH 13 UNDO_CHANGE_FLAGS 14 UNDO_REPLACE_OBJECT 15 UNDO_CUSTOM 16 UNDO_CALLBACK 17 See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); createview (str viewpath[, str objectfocus, str viewfocus]) Description For developer use. This command creates a new GUI window in the active node of the views tree. This window is a copy of the window whose path is given in viewpath. The window will have an object focus of objectfocus and a view focus of viewfocus. Objectfocus and viewfocus are generally the same for most GUI windows. They should be the path of the node that this GUI window is representing. Example createview(\"VIEW:/standardviews/other/FindReplace\",\"MAIN:/project/model/Tools/precision\",\"MAIN:/project/model/Tools/precision\"); This creates the Find Replace GUI. cursorinfo (obj/num view, num operation, num x/y/z, num pos/move) Description For developer use. This command represents a lot of functionality wrapped up into one command. It is a way of getting information regarding the position/state of the mouse for a window control. view : the associated view, such as an ortho or planar view. This can also be an HWND (stored in a double). operation : the type of operation you want to do: 1 - gets x or y positions of the cursor in a planar view 2 - get orthographic or perspective view coordinates 3 - get current mouse button state. return value: 0 : no buttons down 1 : left down 2 : right down 3 : right and left down 4 : double left click 4 - update the cursor position 5 - gets x or y positions of the cursor relative to the view 6 - gets x or y positions of the cursor in screen coordinates 7 - sets the x or y position of the cursor xyz : 1(x), 2(y), or 3(z); not used for operation 3. For operation 4, if xyz=1, the cursor position will be updated with objects being drawing, if xyz=2 it will be updated with only the floor drawn. pos/move : 1(pos) or 2(move); 1 gets absolute mouse position, and 2 gets the change since last update. only used for operations 1-2. The best way to test this functionality out is just by trial and error. Add an OnMouseMove attribute to the ortho view (make sure you rebind the view's attributes after you've added it: Build|Rebind Object Attributes), then print information to the output console. Example cursorinfo(c,2,1,1) deselectall () Description For developer use. Deselects all objects in the model. Example deselectall() distcutoff (num radius) Sets a globally applied cutoff radius for object drawing Description Sets a globally applied cutoff radius (from the viewpoint) for object drawing. Example discutoff(10) distfromviewpoint (obj object, obj view) How far from the viewpoint object is in the window view Description Returns how far from the viewpoint the object specified as object is in the view window specified as view. This value is only meaningful if view is a reference to a Perspective window. Example double dist = distfromviewpoint(model().subnodes[2],sv()); This sets dist to the distance from the first object in the model to the viewer's eye. draginfo (num operation[, num val]) Gets or set values related to draggin the mouse Description Get or set values related to dragging the mouse. Operations: DRAG_INFO_DX 1 - gets dx DRAG_INFO_DY 2 - gets dy DRAG_INFO_DZ 3 - gets dz DRAG_INFO_MDX 4 - gets mdx DRAG_INFO_MDY 5 - gets mdy DRAG_INFO_BUTTON_STATE 6 - gets the button state DRAG_INFO_SET_DX 7 - sets dx to val DRAG_INFO_SET_DY 8 - sets dy to val DRAG_INFO_SET_DZ 9 - sets dz to val DRAG_INFO_SET_MDX 10 - sets mdx to val DRAG_INFO_SET_MDY 11 - sets mdy to val DRAG_INFO_SET_BUTTON_STATE 12 - sets the button state to val Example double dx = draginfo(DRAG_INFO_DX); dropnodefrom () Description For developer use. Returns the view from which a node was dropped. Example dropnodefrom() dropnodeto () Description For developer use. Returns the view into which a node was dropped. Example dropnodeto() dropx () Gets the x position of a drop action Description Get the x position of a drop action Example dropx() dropy () Gets the y position of a drop action Description Get the y position of a drop action Example dropy() dropz () Gets the z position of a drop action Description Get the z position of a drop action Example dropz() endaggregatedundo (obj view, num id) Description Ends an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the previous beginaggregatedundo() command will be encapsulated into a single undoable operation. Pass the id returned by the beginaggregatedundo() function. See Miscellaneous Concepts > Advanced Undo for more information. Example endaggregatedundo(c.find(\"@/TheTable\"),id); endignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example endignoreundo(); findundorecordbyid (obj view, num id) Description Returns the undo record with the specified id for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); treenode record = findundorecordbyid(ownerobject(c),id); finishundorecord (obj view, num uniqueid) Description Finishes an undo record for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example finishundorecord(view, getundorecordid(record)); getchecked (obj window) Description For developer use. Returns the checked state of a button. Example getchecked(c) getcurrentundorecord (obj view[, int flags = 0x1]) Description Returns a pointer to the treenode associated with the current undo record in the undohistory of the specified view. This is the record that would be undone first when you perform an undo operation. It is also the most recently created record (potentially deep in the undo aggregation hierarchy) when and aggregated undo operation is being created. The flags parameter lets you optionally adjust what should be returned. 0x1 means get the top-most record for a move-size-rotate undo. 0x2 indicates get the top-most record in a normal aggregated undo. See Miscellaneous Concepts > Advanced Undo for more information. Example treenode record = getcurrentundorecord(view); getdashboardcontrol (str id [, node startnode]) Returns a reference to the dashboard control associated with id Description Returns a reference to the dashboard control that has the ID value of id. This command will search through all open dashboards until it finds a control with matching ID. Passing in a value for startnode will cause the command to only search through the dashboard containing startnode. Dashboard controls include edit fields, buttons, comboboxes, etc. Example treenode accelEdit = getdashboardcontrol(\"accelEdit\", c); //Searches through the current dashboard only getfilebrowse (str extension, str extensiondescription[, str defaultreturn, str location, num savemode, node filelist]) Opens a standard windows file browser dialog window Description This command opens a standard Windows file browser dialog window. The files shown in the window will have the extensions defined in extension. Different extensions should be separated by semicolons (;) in extension. The text passed as description will be used in the file browser to describe the type of file to open. This command returns a string that is the path of the selected file. If no file is selected, or Cancel is pressed, the command returns an empty string. See filebrowse() command. Example string shapefile = getfilebrowse(\"*.3ds; *.wrl\",\"3D shape files\"); This sets the variable shapefile to the path of a file chosen from a file browser that displays files with the .3ds and .wrl extensions. getfilesindirectory (str directory, str extension, node destnode) Description Retrieves all files in the specified directory that match the specified extension, and populates the content of destnode with nodes holding the path to each matching file. The command returns the number of matching files that were found. The extension parameter should be the specific three (or sometimes four) letter extension that you want to get. For example, if you want all .fsm model files, specify the string \"fsm\". Also, if you pass \"directories\" as the extension parameter, then the command will retrieve the list of directories inside the directory. To get all files, no matter the extension, pass \"*\" as the extension parameter. File paths will be set on the string data (as opposed to the name) of nodes inserted into destnode. Example treenode destnode = Model.find(\"Tools\").subnodes.assert(\"Files\"); int nrfiles = getfilesindirectory(documentsdir(), \"*\", destnode); for(int i = 1; i <= nrfiles; i++) { mpt(\"file: \"); mpt(destnode.subnodes[i].value); mpr(); } getparentwindow (HWND window) Description For developer use. Returns the parent window of the specified window. Use windowfromnode as a parameter to pass into this function. Example getpickingdrawfocus (obj theview, num whattoget, num pickedid) Gets the picking draw focus Description Gets the picking draw focus. Used in OnClick to know what was clicked. The whattoget parameter can be PICK_TYPE, PICK_OBJECT, or PICK_SECONDARY_OBJECT. pickedid should be PICK_PRESSED for the \"pressed\" pick, PICK_HOVERED for the \"hovered\" pick, PICK_RELEASED for the \"released\" pick, or PICK_MOVED for \"mouse moved\" pick. Example int picktype = getpickingdrawfocus(view, PICK_TYPE, 0); getpickingmode (obj view) Gets the picking mode for view Description Gets the picking mode for the specified view. Example int isselectionmode = getpickingmode(view); getsystemmetric (num metric[, HWND win]) Description For developer use. Returns system screen metrics. These values for metric return the following values (if not specified, values are in logical units): 1: desktop width 2: desktop height 3: the left position of the work area of the monitor under the cursor 4: the right position of the work area of the monitor under the cursor 5: the top position of the work area of the monitor under the cursor 6: the bottom position of the work area of the monitor under the cursor 7: the width of window win in pixels 8: the height of window win in pixels 9: the left position of the monitor under the cursor 10: the right position of the monitor under the cursor 11: the top position of the monitor under the cursor 12: the bottom position of the monitor under the cursor 13: the width of window win 14: the height of window win Example getsystemmetric(1) gettableviewselection (obj tableview, num val) Description For developer use. Returns values based on the blue selection range in a table view: val 1 returns the start row, val 2 returns the start col, val 3 returns the end row, val 4 returns the end col. Example int startrow = gettableviewselection(c,1); getundorecordid (obj record) Description Returns the id of the specified undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = getundorecordid(getcurrentundorecord(view)); getviewhwnd (obj view, int windowtype) Gets the HWND handle for a certain window of a view Description Returns a windows HWND handle for a certain window of a view. Each view may use several windows to display data properly. For example, a tree view contains the main window that displays the tree as well as a window that displays the string or number data on a node for editing, as well as a window that displays/edits the name of a node. The windowtype parameter specifies which window handle you want returned, as follows: 1 - the main control (same as using windowfromnode()) 2 - datacontrol - The scintilla code control that displays data of a node in a tree, and in a script view 3 - control - the control that displays/edits a highlighted node's name in the tree 4 - statusbar - the statusbar of the view if it has one 5 - tooltip - the tooltip control of the view 6 - pointercontrol - I think this is only used in a tree that displays list heads Example sendwindowmessage(getviewhwnd(treeview,2), SCI_SETSEL, 4, 8); getviewmenu (obj view, int menutype) Description For developer use. Returns the HMENU reference of the menu based on the menutype. Menutypes: 1: floatingtreemainmenubar 2: custommenu 3: popupmenu 4: thecustompopupmenu Example var menu = menubelow(getviewmenu(c, 4), 0); getviewscale (obj view) Description For developer use. Returns the view scale factor. Example getviewscale(sv()) getviewtext (obj/num window) Description For developer use. Returns the text of a window. Example getviewtext(sv()) highlightviewtext (node view, num pos, num span, num mode span/lines) Highlights text in a code edit window Description Highlights text in a scintilla code edit window. This is used by the flexscript syntax checker to go to highlight a syntax error in the code edit window. You can either highlight whole lines or individual characters. To highlight individual characters, specify mode as 2. For lines specify mode as 1. For lines, specify pos as the start line to highlight(the first line is line 1) and span the number of lines to highlight. For individual characters, specify pos as the start position and span as the number of characters to highlight (position 0 is the position to the left to the first character) Example highlightviewtext(c, 0, 5, 2) This will highlight the first 5 characters of the scintilla text edit. highlightviewtext(c, 1, 1, 1) This will highlight the first line of the scintilla text edit. iskeydown ([num key]) Description For developer use. Returns 1 if the specified keyboard key is being held down. If the first parameter is not passed, then the function will return 1 if any key is being held down. Otherwise, the function returns 0. Example iskeydown(74) keyboardfocus ([HWND/node focus]) Gets/Sets keyboard focus Description Used in GUI development. Gets/Sets the keyboard focus. If the focus parameter is left out, then this command will return a reference to the current keyboard focus as an HWND handle. Otherwise, it will set the focus to the keyboard focus to the passed parameter. Use windowfromnode() or getviewhwnd() to get access to the HWND handle of a view node. Example keyboardfocus(windowfromnode(edit)); keyedclick (obj object, num key[, obj view]) Description For developer use. Executes the object's keyed click functionality (X, C, V) Example keyedclick(model().last, 88) lastclickednode () Description For developer use. Returns a pointer to the last clicked node. Example lastclickednode() lastkey () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkey() lastkeydown () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeydown() lastkeyup () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeyup() listboxrefresh (obj listbox) Refreshes the contents of a listbox Description Refreshes the contents of a listbox. Example listboxrefresh(c.find(\"../Collision Members\")) mainmenucommand (str name) Description For developer use. Execute a command from the stock main menu. Example mainmenucommand(\"File|Open...\") makeactive (obj viewwindow) Description For developer use. Makes the specified window active. Example makeactive(ownerview(c)); menubelow (HMENU menu, num index) Description For developer use. Get the menu item with the specified index (starting with 0) in the specified menu. Example var menu = menubelow(menumain(),4); menucheck (HMENU menu, num index, num on/off) Description For developer use. Set the check state of the menu item with the specified index (starting with 0) in the specified menu. Example menucheck(menumain(), 2, 1) menugray (HMENU menu, num index, num on/off) Description For developer use. Set the gray state of the menu item with the specified index (starting with 0) in the specified menu. Example menugray(menumain(), 2, 1) menumain () Description For developer use. Returns the HMENU reference of the main menu. Example var menu = menumain(); msg (str caption, str text [, num buttontype]) Display a message dialog Description This command creates a message box with a title bar displaying the caption and the text written inside the box. The buttons displayed on the message box are based on the value for buttontype. If OK or Yes are pressed, msg() returns 1. If No is pressed, msg() returns 0. The value returned when Cancel is pressed depends on the buttontype. If buttontype is 3, Cancel returns -1; otherwise it returns 0. If buttontype is not specified, it is assumed to be 0. Values for buttontype: 0 - OK, Cancel 1 - OK 2 - OK, Cancel 3 - Yes, No, Cancel 4 - Yes, No Example if (msg(\"Finished\", \"Close the database?\") == 1) dbclose(); nodefromwindow (num window) Description For developer use. Get the node of a window handle Example nodefromwindow(windowfromnode(sv())) ownerview (obj viewobj) Description For developer use. Get the topmost node of a view structure. Example ownerview(sv()) pickcolor () Description For developer use. Opens a color picker window to allow the user to pick a color. Use pickedcolorred(), pickedcolorgreen(), pickedcolorblue() commands to retrieve the rgb color component values. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickcolornode (obj colornode) Description For developer use. Open a color picker window to set the rgb color values of the color attribute node of an object. Example pickcolornode(color(current)); Opens a color picker window and then sets the color of the current object to the chosen color. pickedcolorblue () Description For developer use. Returns the blue component of a color picked with the pickcolor() command. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickedcolorgreen () Description For developer use. Returns the green component of a color picked with the pickcolor() command. Example pickcolor(); int greencomponent = pickedcolorgreen(); The greencomponent variable will be set to the rgb value for the green component of the color chosen with pickcolor(). pickedcolorred () Description For developer use. Returns the red component of a color picked with the pickcolor() command. Example pickcolor(); int redcomponent = pickedcolorred(); The redcomponent variable will be set to the rgb value for the red component of the color chosen with pickcolor(). pickfile (str extension, str extensiondescription[, str defaultreturn]) Description For developer use. Opens a file browser for the user to choose a file. The browser will be looking for files with the specified extension. The extensiondescription is any text which describes the type of files allowed. This command will return the full path to the chosen file. Convert the return value with tostr(). See filebrowse() command. Example pickfile(\"*.xls\",\"Excel Workbooks\") picklistapply (obj combobox) Description For developer use. Applies the selected picked option from a picklist combobox. This is done when applylinks is called, or when and OK or Apply button is pressed. Example picklistapply(c) popupmenu (obj view) Description For developer use. Returns a reference to the view's popup menu as an HMenu. Example popupmenu(c) redirectconsole (num console:output/system/compiler/trace, obj view) Redirects any prints to a given console Description This redirects any prints to a given console so that they will instead be printed to the view text of the specified view. CONSOLE_OUTPUT redirects the output console, CONSOLE_SYSTEM redirects the system console, CONSOLE_COMPILER redirects the compiler console, CONSOLE_TRANCE redirects the trace console. To redirect it back to its original console, call the command again and specify NULL as the view parameter. Example redirectconsole(2, c); buildnodeflexscript(getvarnode(Model.find(\"Processor1\"), \"exittrigger\")); redirectconsole(2, NULL); This redirects the compiler console to the view c and then builds flexscript on a node in the model. Thus, any errors in building flexscript will be directed to the view c instead of to the compiler console. redirectpicklists (obj view) Description For developer use. Adjusts all picklists of a parameters or properties window that has been redirected. Example redo (obj view) Description Redoes the previously undone action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example redo(view); refreshview (obj view) Description For developer use. Regenerate the window from it's view definition. Example refreshview(c) repaintall () Description For developer use. Repaint all windows. Example repaintall() repaintallactive () Description For developer use. Repaint all windows in the active list. Example repaintallactive() repaintview (obj view) Description For developer use. Repaint the window without regenerating. Example repaintview(c) repositionhighlightededits (obj view) Description For developer use. Repositions the edit controls for a tree view's highlighted object. Example scrollinfo (obj/HWND view, num get_set {0-1}, num horz_vert_ctl {0-2}, num scrollinfo {1-4}[, num value]) Description For developer use. Gets or sets scrollinfo for a scrollbar on a view. The value parameter is only used if get_set is 1. The position of the scrollbar (nPos) is changed with scrollinfo 4. You can also get and set the nMin, nMax, and nPage values of the scrollbar with scrollinfo 1, 2, and 3 respectively. Example scrollinfo(TheTable,1,1,4,scrollinfo(c,0,1,4)-amount); select (obj window) Description For developer use. Select the specified view object. Convert the return value with tonode(). Example select(ownerview(c)) selectedobject (obj window [, num reset]) Description For developer use. Get the highlighted node in a view. Example selectedobject(ownerview(c)) selectedx (obj window) Description For developer use. Get the x position of the highlighted object in a view. Example selectedx(ownerview(c)) selectedy (obj window) Description For developer use. Get the y position of the highlighted object in a view. Example selectedy(ownerview(c)) selectedz (obj window) Description For developer use. Get the z position of the highlighted object in a view. Example selectedz(ownerview(c)) sendonactivatenotify () Description For developer use. Causes each palette windows' OnActivateNotify event to fire. Example sendonactivatenotify(); setcameradirection (obj view, num x, num y, num z, num rx, num ry, num rz) Sets the viewpoint direction of the 3D view Description Set the viewpoint direction of an orthographic or perspective view. (x,y,z) is the location of the focus point of the camera. (rx, ry, rz) is the rotation of the camera. The associated view attribute names are: viewpointx, viewpointy, viewpointradius, viewpointrx, viewpointry, viewpointrz respectively. Example setcameradirection(sv(), 0, 0, 0, -40, 0, 25); setcameravolume (obj view, num w, num h, num nearclip, num farclip, num magnification, num fov, num projtype, num firstperson) Description For developer use. Set the OpenGL camera volume. Sets additional view parameters not set with setcameradirection. Example No example. setchecked (obj view, num value) Description For developer use. Set the checked state of a button. Example setchecked(c,0) ; setcursor (num cursorid[, num forgetCount = 0]) Sets the visual look of the mouse pointer Description Sets the visual look of the mouse pointer. Valid ids are as follows 1: Arrow 2: IBeam 3: Wait 4: Cross 5: UpArrow 6: Size 7: Icon 8: SizeNWSE 9: SizeNESW 10: SizeWE 11: SizeNS 12: SizeAll 13: No 14: Hand 15: AppStarting 16: Help The forgetCount defines if/when FlexSim should go back to the default cursor. If 0 (default), then FlexSim will keep that cursor until the user calls setcursor() again. If you pass a positive number then FlexSim will reset the cursor back to the default after forgetCount number of mouse move messages are received from the system, if you have not called setcursor() again in that interval. Example setcursor(3) setdropcoords (obj view[, obj dropnodefrom, obj dropnodeto]) Description For developer use. Sets the dropx() and dropy() coordinate commands for the view based on current mouse location. You can optionally also set the dropnodefrom and dropnodeto parameters, which will define the nodes returned by dropnodefrom() and dropnodeto(). Example setdropcoords() setpickingdrawfocus (obj theview, obj focus, num what[, obj secondaryfocus, num flags]) Description For developer use. Sets the draw code following this call to be picked as the focus when clicking or dragging. Usually you would use this to draw custom sizers and grippers on your object, and then implement an OnDrag or an OnClick event on the object that would call getpickingdrawfocus() to figure out what part was clicked. flags is a bitwise combination of one \"DETECT_DRAG\" setting, as well as optional \"override\" bits. The override bits aren't used to define picking focus, but will cause FlexSim to override its normal drawing of sizers and bounding boxes. DETECT_DRAG_X, DETECT_DRAG_Y, DETECT_DRAG_Z - will only detect dragging along the given axis, relative to the object being drawn. Use this with the draginfo() command in your OnDrag event to determine where the object is being dragged. DETECT_DRAG_XY, DETECT_DRAG_YZ, DETECT_DRAG_XZ - will only detect dragging along the given plane. Again you would use this with the draginfo() command in the OnDrag event. OVERRIDE_DRAW_SIZER_X, OVERRIDE_DRAW_SIZER_Y, OVERRIDE_DRAW_SIZER_Z, OVERRIDE_DRAW_SIZER_X_NEG, OVERRIDE_DRAW_SIZER_Y_NEG, OVERRIDE_DRAW_SIZER_Z_NEG, OVERRIDE_DRAW_SIZER_ALL - these flags will cause the engine to not draw the flagged sizers OVERRIDE_DRAW_YELLOW_BOX - causes FlexSim to not draw the yellow box around the object when selected OVERRIDE_DRAW_GREEN_BOX - causes FlexSim to not draw the green \"statistics-active\" box around the object OVERRIDE_DRAW_REDBOX - causes FlexSim to not draw the red selection box around the object when selected OVERRIDE_DRAW_HOVERBOX - causes FlexSim to not draw the yellow hover box around the object when hovering over it OVERRIDE_DRAW_ALL - causes FlexSim to not draw any sizers or boxes around the object OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse down\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been pressed on the given object. OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse up\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been released on the given object. OVERRIDE_SET_MOUSE_MOVE_PICK - explicitly sets the view's \"mouse move\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been moved on the given object. OVERRIDE_SET_MOUSE_HOVER_PICK - explicitly sets the view's \"mouse hover\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been hovered over the given object. Example setpickingdrawfocus(view, current, 20, drawsurrogate(current).first.subnodes[3], DETECT_DRAG_Y); setselectedobject (obj view, obj selected) Description For developer use. Sets the selectedobject (yellow highlighted object) of the view. Note that this is different than so(). The highlighted object is accessed by the selectedobject() command. Example setselectedobject(ownerview(c), model().first) settableviewselection (obj tableview, num startrow, num startcol, num endrow, num endcol[, num rangeselected]) Description For developer use. Sets the blue selection range in a table view. If any of the number parameters are less than 0, it deselects everything. Use 0 to select header cells. Example settableviewselection(c,0,1,2,2); setviewtext (obj/HWND window, str text) Description For developer use. Set the text of a gui edit field. Example setviewtext(c,\"hello\") shiftpressed () Description For developer use. Test if SHIFT key is pressed. Example shiftpressed() showcompilerconsole () Description For developer use. Show the compiler console. Example showcompilerconsole() showhelp (str topicname) Description For developer use. Opens a help topic specified by the topic name. Example showhelp(\"getting_started\"); showhtmlhelp (str topic) Description For developer use. Open FlexSim's User Manual with the given topic to open. Example showhtmlhelp(\"Welcome_to_Flexsim.html\") standardpreopen (obj object[, int nobuild]) Description For developer use. Queries if there are any open windows that are the same as the current window being opened. If so, then the current window is closed. Example standardpreopen(c) sv () Gets a reference to the last view desginated as sv() Description This command returns a reference to the last view window that was designated the selected view. To designate a view window, right-click on the window, not on any objects drawn in that window, and select \"Set as (sv)\". Any open view window (e.g. Ortho or VR) can be designated the selected view. Example flypath(sv(),1); This begins flypath number 1 in the view that is currently designated the selected view. systemwindow (num windowtype) Description For developer use. Get HWND handle to a system window: 1-Output 2-System 3-Compiler 4-Trace 5-Commands 6-Attributes 7-Completions 8-app 9-appsb 10-Output Edit 11-Compiler Edit 12-Trace Edit 13-System Edit Example systemwindow(1) tabcontrolrefresh (obj tabcontrolnode) Description For developer use. Refreshes a tab control. Example tabcontrolrefresh(c.find(\"@/tabcontrol\")); templatetocode (obj code, obj edit) Description For developer use. Apply template code to c++. This is used in a picklist's template code drop-down to apply edited template code back to the C++/Flexscript code that created it. Example templatetocode(so(),sv()) undo (obj view) Description Undoes the previously recorded action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example undo(view); updateundorecord (obj view, num uniqueid[, num updatetype, num p1, num p2]) Description Updates an undo record for the specified view. The following undo record types should be updated: UNDO_MOVE_SIZE_ROTATE UNDO_MOVE_SIZE_ROTATE_GROUP UNDO_SELECTION_CHANGE See Miscellaneous Concepts > Advanced Undo for more information. Example updateundorecord(view, getundorecordid(record)); viewdist (obj view, obj object) Gets the distance from the focus point of view to object Description Returns the distance from the focus point of the view to object. Example if(viewdist(view, current) > 100) ; This command queries whether the distance between the point that the view is looking at and the location of the current object is greater than 100. viewmenucommand (str name, obj view) Description For developer use. Execute a command from the stock view menu. Example viewmenucommand(\"Edit|Copy\") webcommand (str name[, p1, p2, p3, ...]) Used to manipulate FlexSim's HTML engine/widgets Description A command used for manipulating FlexSim's HTML engine, html widgets, etc. Example string innerhtml = webcommand(\"getelementinnerhtml\", view, \"title\"); windowflash (HWND window, num count, num timeout) Description For developer use. Causes the specified window to flash. Count is the number of times to flash the window. Timeout controls the time between flashes. If timeout is 0, the default cursor blink rate is used. Example windowflash(windowfromnode(ownerview(c)),2,125); windowfromnode (obj viewnode) Description For developer use. Get the window handle (HWND) of a view node. Example windowfromnode(c) windowgray (HWND window, num graystate) Description For developer use. Enables or disables the window based on the graystate parameter (1 or 0). Example graywindow(windowfromnode(c),1); windowmenu (obj view) Description For developer use. Returns a reference to the view's menu as an HMenu. Example windowmenu(c) windowmove (HWND window, num x, num y, num sx, num sy[, num refresh]) Description For developer use. Move a window to the specified x,y pixel location and give it the sx,sy size in pixels. If refresh is 1, then the window will repaint itself. Example windowmove(windowfromnode(c),10,10,200,200,1) windowredraw (HWND window, num x, num y, num sx, num sy, int flags) Description For developer use. A wrapper around the RedrawWindow() windows API command. The parameters x, y, sx, and sy define the client rectangle that the call applies to, and flags defines the flags that will be passed to RedrawWindow(). Example windowredraw(windowfromnode(c),10,10,200,200, RDW_INVALIDATE); windowshow (HWND/node thewindow , num show) Description For developer use. Show or hide a window. If the second parameter is 1, then the window will be shown. Otherwise the window will be hidden. Example windowshow(windowfromnode(c)) windowstyle (HWND/obj window [, num style, num useexstyle]) Gets the windowstyle of window Description Used in GUI development. Dynamically gets/sets the window style of the given window. If style is 0, this will simply return the current style of the window. Otherwise, it will set it. If useexstyle is 1, it will apply/get the extended style of the window. Refer to Windows SDK documentation for more information on window styles. Example As an example, this command is used in the perspective view's \"Full Screen\" context menu option to change the style of the perspective window so that it no longer has a title bar when it is in full screen mode."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/DeveloperAdvancedUser/ConnectingToExternalCode/ConnectingToExternalCode.html",
        "title": "Connecting to External Code",
        "content": "Overview In addition to using FlexSim's internal FlexScript modeling language, FlexSim allows you to connect to external code. You can connect to external python code, C# code, or C/C++ code . Connecting to External Code vs. Controlling FlexSim Externally Connecting to external code is related to, but slightly different than, controlling FlexSim with some other language or system. When you are connecting to external code, your FlexSim model, as it runs, calls specific functions that are defined externally. On the other hand, when you are controlling FlexSim externally, some other code spawns an instance of FlexSim, opens a model, runs it, and retrieves information from that model. Connecting and controlling can actually work in tandem, but it is important to distinguish their meanings. See Controlling FlexSim Externally for more information. The Code Editor Connecting to external code happens through the code editor . At the bottom of the window is a button, standing for External . Press this button to toggle the code node for an external connection. When you press it, a dialog will appear telling you that connecting to external code requires a different text format, asking if you want to proceed. Choose which language you want to format it for, and press OK. It will change the code to be formatted for an external connection. Code that is formatted for an external connection takes the form: <prefix> \"<module_id>\" \"<function_id>\" There may be gray markup comments around the text. This allows edit fields to display it in a readable way. You can ignore them or remove them. The different identifiers and their meanings depend on the language you are connecting to, and are explained in their respective sections below. Connecting to Python When connecting to python, the text must take the format: external python \"<python_module_name>\" \"<python_function_name>\" The prefix (the text before the first double quote) may be decorated with other text such as markup, a colon, etc., but it must contain the text external python . The <python_module_name> must be the name of a python module, i.e. the name of a python file, excluding the .py file extension. This module may be a standard python module that is part of your currently active python environment, or it may be a python module that you have placed in your model directory, or a subdirectory of your model. Python Modules in Subdirectories You can also place python files in subdirectories of your model. To do this: Create the python file in the designated subdirectory. Add a blank file called __init__.py in the same directory. This file signals to python that it can search this directory for submodules. Define the <python_module_name> part of the connection string using dots as delimiters in the path. For example, if your subdirectory name is PyModules and your python file name is MyModule.py , the the python module name in the connection string should be PyModules.MyModule . The <python_function_name> must be the name of a globally accessible function that is defined in that python module. Once you have defined the correct connection string, FlexSim will call the defined python function whenever the node is evaluated, i.e. whenever treenode.evaluate() is called on that node. You can configure this in standard library object fields, like OnEntry or OnExit triggers, or you can set up your own nodes and call them directly from FlexScript. For example, you can define a user command that connects to python, or you can define a label node that holds this connection string, and simply call: Variant decision = current.labels[\"PythonCode\"].evaluate() You can pass parameters into the function, and get the return value out, then continue in your FlexScript logic. Minimal FlexSim API in Python FlexSim does not provide a robust programming API for accessing FlexSim classes and commands from python. This is intentional. The goal in providing python access is to allow users to implement algorithms in python that are intended to be used in live systems. FlexSim thus becomes a virtual commissioning environment, where functionality can be robustly tested before being deployed to a live system. As such, calling FlexSim-specific commands and methods within python would create a tight binding requirement between python and FlexSim, defeating the purpose of using python. FlexSim's design enforces a loose coupling between FlexSim and python. The single integrating functionality is to convert FlexSim types to and from python types. When a python function is called from FlexSim, FlexSim converts passed parameters to native python objects. Maps are converted to python dicts , Arrays a converted to python lists , strings are converted to python strings , and numbers are converted to python floats. Then, when the python function returns, the return value is converted back to FlexSim native types. When to use Python vs. FlexScript Given the minimal FlexSim programming API provided in python, the choice of which language to use in which situation is important. We suggest the following guidelines in making this choice. Use FlexScript to: Write large blocks of code - FlexScript's raw execution speed is orders of magnitude faster than python's, and simply converting to and from python native types is computationally non-trivial. Thus, if you are writing a lot of logic, with nested looping, etc. then we suggest using FlexScript. Access FlexSim APIs directly - As mentioned above, python does not provide access to FlexScript's classes and commands . As such, if you need to access these, use FlexScript. Use python to: Implement functionality intended for use in a live system - If you are implementing functionality that you want to later integrate directly into your factory/system, then you should implement it in python. Use python libraries for making optimal decisions - For example, you may want to use a solver like gurobi or cplex to make some optimal decision in your model. This may be to find an optimal schedule for the day, or to decide how much ordered material to ship from which supplier to which retailer in a supply chain simulation. This goal overlaps with the first reason above, namely you want to use the same decision making in the simulation that you would use in a live system. Here you should use python to implement this functionality. Use python libraries for data processing/interchange - For example, you may use a library like pandas to export or import data to/from a format that is not supported by FlexSim internally, such as HDF5, Parquet, etc. Python Versions FlexSim currently supports python versions 3.7, 3.8, 3.9, 3.10, and 3.11. Define which python version you want FlexSim to connect to in the Code tab of the Global Preferences window. FlexSim also provides the full source code that connects FlexSim to python as an open source project, hosted at www.github.com/flexsim/FlexSimPy . Generally, to build for a different version of python: Download the source code Configure it to build for your version. This may involve downloading the proper SDKs that fit your version. Build the dll Place the built dll in the FlexSim/program/python/ Define the version you are targeting in Global Preferences For more detailed information on this, refer to the documentation at the github repository , or ask a question at answers.flexsim.com . Connecting to a C# DLL FlexSim also lets you connect to a C# dll. As with connecting to Python or C++, this allows you to use libraries written in C#, a widely supported language. Many libraries are provided in both Python and in C#. FlexSim's C# connection is compiled against .NET 8. In order to successfully connect to a C# dll, that dll should also be compiled against .NET 8. However, .NET works to maximize backwards compatibility, so it is possible that a dll built for earlier versions of .NET will also work. In addition, .NET 8 or later must be installed in order to use C# code. You can download an installer from https://dotnet.microsoft.com . .NET vs .NET Framework A C# dll can be built for .NET or the .NET Framework. In spite of the similar names, these are two separate product lines. FlexSim does not support connecting to dlls built for the .NET Framework. When connecting to C#, the text must take the format: external C# \"<MyDLL>\" \"<MyMethod>\" The prefix (the text before the first double quote) may be decorated with other text such as markup, a colon, etc., but it must contain the text external C# . The <MyDLL> must be the name of a C# dll. You can optionally include the .dll extension if desired. If your dll is part of a module, you can specify which module as follows: module:<ModuleName>/<MyDLL> where <ModuleName> is the name of your module. <MyMethod> must be a fully-expanded method. For example, consider the following C# code: namespace CoolStuff { public class Methods { public static int Add(int a, int b) { return a + b; } } } If the above code was part of CoolStuff.dll, you would format the text as follows: external C# \"CoolStuff\" \"CoolStuff.Methods.Add\" Method Requirements In order for FlexSim to successfully call a C# method, the method must meet the following requirements: It must be static . It must be public . The return type (if not void) and all arguments (if any) must be supported C# types. The following table shows the set of supported C# types. In addition, the table shows the requirements that an input value must meet so FlexSim can convert it from a Variant to the C# type. Method Overloads FlexSim finds all methods with the method name in the C# dll. When the method is called, FlexSim searches for the correct overload. An overload is only correct if: the number of values passed matches the parameter count, and all values can be converted to each parameter's type. If a suitable overload is not found, the method is not called. Target Type Argument Value Requirements bool arg.type == VAR_TYPE_NUMBER and arg == 0 || arg == 1 unsigned int arg.type == VAR_TYPE_NUMBER and arg >= 0 && arg <= 4294967295 int arg.type == VAR_TYPE_NUMBER and arg >= -2147483648 && arg <= 2147483647 double arg.type == VAR_TYPE_NUMBER string arg.type == VAR_TYPE_STRING List<int> arg.type == VAR_TYPE_ARRAY and for (int i = 1; i <= arg.length; i++) // arg[i] converts to int List<double> arg.type == VAR_TYPE_ARRAY and for (int i = 1; i <= arg.length; i++) // arg[i] converts to double List<string> arg.type == VAR_TYPE_ARRAY and for (int i = 1; i <= arg.length; i++) // arg[i] converts to string List<List<double>> arg.type == VAR_TYPE_ARRAY and for (int i = 1; i <= arg.length; i++) // arg[i] converts to List<double> Dictionary<string, double> arg.type == VAR_TYPE_MAP and Map m = arg; for (var iter = m.begin(); iter; iter++) // iter.key converts to string // iter.value converts to double Dictionary<double, double> arg.type == VAR_TYPE_MAP and Map m = arg; for (var iter = m.begin(); iter; iter++) // iter.key converts to double // iter.value converts to double Connecting to a C/C++ DLL FlexSim also lets you connect a code field to an external C/C++ dll. The advantage of this is two-fold. First, and probably most important, it gives you the full advantages of C/C++, including execution speed, connectivity to third party functionality, C++'s standard template library, etc. Second, it allows you to hide your code if you would like to protect certain intellectual property. Security Warning When trying to connect to an external C/C++ dll, you will receive a security warning message box confirming whether you trust the dll. External C/C++ dlls will only be loaded if this warning is accepted. External C/C++ dlls will not be loaded when running FlexSim without a UI for displaying warning messages, including when running the Experimenter. If you wish to use external C/C++ dlls without the warning messages, use the Module SDK instead of the DLL Maker. Installed modules will be loaded without this warning message. Do not install modules from publishers you do not trust. Module SDK FlexSim's Module SDK can provide a lot more flexibility compared to just connecting a node's code to an external dll. If you intend to create extensions to FlexSim that you maintain over time, you should refer to the Module SDK documentation. When connecting to a dll, the connection text must follow the format: \"relative/path/to/mydll.dll\" \"function_id\" You can put anything before, between, or after the two sets of quotes (i.e. it doesn't need a specific <prefix> like python). The first quotes should contain a path to a dll, relative to your model. The second quote should contain the name of a globally accessible, non-name-mangled function in the DLL. The function must have a specific signature, explained below. Building Your DLL There are multiple steps involved with building the DLL so that it properly connects with Flexsim. First, download the DLL Maker Visual Studio project. It can be accessed in downloads section of your FlexSim account page. Second, you add a function to some C++ source file in the project. An example function is provided in the DLL Maker project: #include \"FlexsimDefs.h\" visible double mydllfunction1(FLEXSIMINTERFACE) { pt(\"This will print to the Output Console\");pr(); return 0; } First you should include flexsimdefs.h. This defines certain macros as well as declares the Flexsim commands, so you can have access to those commands. Then the declaration should be as follows: visible double the_function_name(FLEXSIMINTERFACE) Once you've declared the function appropriately, you can access parameters and write code similar to how you would write code in a trigger or other code piece in Flexsim. Access parameters passed in with parnode(), parval(), etc. DLL Maker Compatibility The DLL Maker is intended to maximize forward-compatility, so that, if you implement a dll in one version, that dll will continue to work in future versions of FlexSim. Because of this, the amount of FlexSim-wide functionality that you can access is restricted. Generally you can only access FlexSim's global user commands, not FlexSim's dot syntax methods and properties. Putting the DLL in the Proper Location The location where the dll is placed is very important, so you'll want to configure your Visual Studio project to place the DLL in the proper location. Here are some suggestions for configuring the Visual Studio project if you are building your dll just to be used for a specific model. Place the DLL Maker folder in the same directory as the model .fsm file that you have saved. Then open Visual Studio by double-clicking on DLL Maker\\DLL Maker.vcxproj. In the Solution Explorer on the left, right-click on the DLL Maker project (not Solution 'DLL Maker', but the project icon below that), and choose Properties. In the \"Configuration\" drop-down at the top, choose \"All Configurations\". In the tree on the left go to Configuration Properties > Linker > General. In the Output File field, type: ../dllname.dll (replace \"dllname.dll\" with whatever you want to name your dll). Then click OK. This will cause the Project to put the dll into your model directory, so that when you configure your dll path in Flexsim, you can just put it as \"dllname.dll\" since it's already in the same directory as your model. Once you've defined the function on the dll side, built it and placed it in the correct location, the code node that you have configured previously will properly connect to the dll. Rebuilding the DLL While Flexsim is Still Open Often you may want to rebuild the DLL after Flexsim has already connected to it. If you don't explicitly disconnect Flexsim from using those dlls, Visual Studio will give you build errors saying it can't write to the dll file. To disconnect, choose from Flexsim's menu: File|System|Disconnect DLLs. If you have draw code that connects to the dll, you'll need to first minimize all your ortho/perspective windows, then choose File|System|Disconnect DLLs."
    }
]
[
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/Overview/Overview.html",
        "title": "AdskInterop",
        "content": "Overview The AdskInterop module from Autodesk adds interoperability features between FlexSim and Autodesk applications, such as AutoCAD, Inventor, and Revit. Autodesk Account Sign in to your Autodesk account to access online servers that integrate with your desktop software. 3D Import Formats With the AdskInterop module installed, additional 3D shape formats are available for customizing the shape of objects. These formats include ipt, iam, and rvt. Module Dependency A model saved with shapes using these formats will require the AdskInterop module to also be installed on any other computer that opens the saved model. Without the module installed, the shapes will not render. The AdskInterop module also replaces the default dwg importer used by the Model Background tool with a new importer that renders geometry using the FlexSim Mesh API rather than a custom renderer. This improves compatiility with other FlexSim 3D graphics features, such as using a Core Profile OpenGL Context, stereoscopic 3D, and VR. Data Access The AdskInterop module adds a new AutoCAD FlexScript API. With this API, you can access more data from dwg files, including the structure of the drawing and properties about its entities. Using this data, you can auto-build objects and position them according to locations in the drawing. In addition to reading data, you can also write information back into the dwg file. For example, you could adjust the drawing based on the results of experimenting with the layout of objects in the simulation. The images above demonstrate using FlexScript to create bed and wall objects based on the locations of polylines in blocks in particular layers in the dwg file. Factory The AdskInterop module adds a Factory menu to the main menu. Factory Assets and Factory Properties open Factory Design Utilities windows. Vault Assets are accessable after logging into a Vault server. Autodesk Vault Professional Autodesk Vault Professional must be configured to access Vault assets."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/WhatsNew/WhatsNew.html",
        "title": "Release Notes and History",
        "content": "The following is a list of features and fixes that have been included in the latest AdskInterop releases. AdskInterop 25.2.0 Added support for loading iges files. Adjusted the shape loading to be on a separate process to load multiple shapes at once. Added a local file cache of loaded shape meshes to improve subsequent media load times. Added integration with Factory Design Utilities (FDU). AdskInterop 25.1.0 Fixed missing layers in some .dwg files. AdskInterop 25.0.0 Added support for loading jt and step files. Backwards Compatibility Note: The shape factors of jt and step files will be different than with the previous importer. AdskInterop 24.2.2 Added support for loading ipt, iam, and rvt files. Added a new AutoCAD FlexScript API. Updated dwg importer using the Mesh API."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FDU/FDU.html",
        "title": "Factory Design Utilities",
        "content": "Overview The AdskInterop module from Autodesk adds interoperability features between FlexSim and Autodesk Factory Design Utilities (FDU). This integration includes the Factory Asset Browser, Factory Properties, and FDU layouts. Asset Browser You can use the Factory Asset Browser window to create instances of factory assets in your simulation model. Performance When dragging assets into the 3D view, the asset's 3D geometry must be processed and triangulated into meshes for FlexSim to render. The first time you create a particular shape, it may take a few moments for the shape to load and appear. You can add simulation logic and data to your asset instances by clicking on them and adjusting their FlexSim object properties, including their simulation class. User Cloud Assets can be accessed when signed in to your Autodesk Account . Vault Assets can be accessed when logged in to a Vault server . Factory Properties You can use the Factory Properties window to adjust the properties of factory asset instances. Performance When adjusting properties that modify geometry, the updates are sent to a local Inventor service to recalculate. The updated geometry is then reprocessed and triangulated into meshes for FlexSim to render. This process requires heavy calculations and may be slow. For asset geometric changes, you may want to use Inventor directly. Layouts You can save a new layout by adding factory assets to a model and saving the model. You can also load an existing layout, adjust it, and save your changes to the layout by saving the model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Arc.html",
        "title": "FlexScript Class - AutoCAD.Arc",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates an arc in a DWG file. This class is a FlexScript wrapper for the AcDbArc class. Properties center Gets/sets the location of the center of the arc. endAngle Gets/sets the end angle of the arc. radius Gets/sets the radius of the circle associated with the arc. startAngle Gets/sets the start angle of the arc. totalAngle Gets the total angle of the arc. Methods create Creates a new AutoCAD.Arc object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Arc .center Vec3 center Description Gets/sets the location of the center of the arc. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Arc .endAngle double endAngle Description Gets/sets the end angle of the arc. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Arc .radius double radius Description Gets/sets the radius of the circle associated with the arc. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Arc .startAngle double startAngle Description Gets/sets the start angle of the arc. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Arc .totalAngle readonly double totalAngle Description Gets the total angle of the arc. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Arc .create() AutoCAD.Arc create( ) Returns AutoCAD.Arc A new AutoCAD.Arc object. Description Creates a new AutoCAD.Arc object. var arc = AutoCAD.Arc.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.BlockReference.html",
        "title": "FlexScript Class - AutoCAD.BlockReference",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a block reference in a DWG file. This class is a FlexScript wrapper for the AcDbBlockReference class. Properties blockTableRecord Gets the id of block reference's block definition. dynamicBlockTableRecord Gets the id of the reference's dynamic block definition. isDynamicBlock True if the block references a dynamic block. position Gets/sets the position of block reference. properties A 0-based array of AutoCAD.DynamicBlockProperty 's. Use length to see the number of properties, and the [] array operator to access a dynamic block property. rotation Gets/sets the rotation of block reference. scaleFactors Gets/sets the scale factor of block reference. Methods create Creates a new AutoCAD.BlockReference object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .blockTableRecord readonly AutoCAD.ObjectId blockTableRecord Description Gets the id of block reference's block definition. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .dynamicBlockTableRecord readonly AutoCAD.ObjectId dynamicBlockTableRecord Description Gets the id of the reference's dynamic block definition. If a block is a dynamic block, the references to that block will have two id's that reference their block definitions. First, the blockTableRecord, references a 'hidden' block definition that defines the block that is customized for that specific reference, with its specific parameters. The 'dynamicBlockTableRecord' references the original, named block definition that the user actually defines/edits in the Block Editor. Note that the FlexScript AutoCAD.BlockReference class combines both the AcDbBlockReference as well as the AcDbDynBlockReference class together. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .isDynamicBlock readonly int isDynamicBlock Description True if the block references a dynamic block. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .position Vec3 position Description Gets/sets the position of block reference. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .properties properties Description A 0-based array of AutoCAD.DynamicBlockProperty 's. Use length to see the number of properties, and the [] array operator to access a dynamic block property. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .rotation double rotation Description Gets/sets the rotation of block reference. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .scaleFactors Vec3 scaleFactors Description Gets/sets the scale factor of block reference. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockReference .create() AutoCAD.BlockReference create( ) Returns AutoCAD.BlockReference A new AutoCAD.BlockReference object. Description Creates a new AutoCAD.BlockReference object. var blockReference = AutoCAD.BlockReference.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.BlockTable.html",
        "title": "FlexScript Class - AutoCAD.BlockTable",
        "content": "Inherits from AutoCAD.Object Description A class that encapsulates a DWG database's block table. This class is a FlexScript wrapper for the AcDbBlockTable class. Methods getAt Gets the block table record with the defined name. newIterator Gets an iterator over the records in the block table. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTable .getAt() AutoCAD.BlockTableRecord getAt( string blockName , int openMode ) Parameters blockName The name of the block. openMode The mode by which to open the object. 0 for read only, 1 for write-enabled. Description Gets the block table record with the defined name. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTable .newIterator() AutoCAD.BlockTableIterator newIterator( int atBeginning = 1 , int skipDeleted = 1 ) Description Gets an iterator over the records in the block table."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.BlockTableIterator.html",
        "title": "FlexScript Class - AutoCAD.BlockTableIterator",
        "content": "Description A class that encapsulates an iterator over a DWG block table. This class is a FlexScript wrapper for the AcDbBlockTableIterator class. Methods done Returns true if the iterator has finished traversing the table. getRecord Gets the block table record that the iterator is currently pointing at. start Resets the iterator. step Steps the iterator to its next record. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableIterator .done() bool done( ) Description Returns true if the iterator has finished traversing the table. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableIterator .getRecord() AutoCAD.BlockTableRecord getRecord( int openMode = 0 , int openErasedRec = 0 ) Parameters openMode The mode by which to open the object. 0 means read-only, 1 means write-enabled openErasedRec 1 means open records that have been erased, 0 otherwise. Description Gets the block table record that the iterator is currently pointing at. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableIterator .start() void start( ) Description Resets the iterator. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableIterator .step() void step( ) Description Steps the iterator to its next record."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.BlockTableRecord.html",
        "title": "FlexScript Class - AutoCAD.BlockTableRecord",
        "content": "Inherits from AutoCAD.Object Description A class that encapsulates a DWG block table record. This class is a FlexScript wrapper for the AcDbBlockTableRecord class. Properties blockInsertUnits The insert units of the block. comments Gets/sets the comments of the block isDynamic True if the block table record defines a dynamic block. name Gets/sets the name of the block origin The base point of the block. unitsPerMeter The number of units in one meter for this block. Methods newIterator Gets an iterator over the entities of the block table record. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .blockInsertUnits blockInsertUnits Description The insert units of the block. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .comments comments Description Gets/sets the comments of the block Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .isDynamic isDynamic Description True if the block table record defines a dynamic block. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .name name Description Gets/sets the name of the block Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .origin origin Description The base point of the block. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .unitsPerMeter unitsPerMeter Description The number of units in one meter for this block. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecord .newIterator() AutoCAD.BlockTableRecordIterator newIterator( int atBeginning = 1 , int skipDeleted = 1 ) Description Gets an iterator over the entities of the block table record."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.BlockTableRecordIterator.html",
        "title": "FlexScript Class - AutoCAD.BlockTableRecordIterator",
        "content": "Description A class that encapsulates an iterator over a DWG block table record. This class is a FlexScript wrapper for the AcDbBlockTableREcordIterator class. Methods done Returns true if the iterator has finished traversing the record. getEntity Gets the entity that the iterator is currently pointing at. start Resets the iterator. step Steps the iterator to its next entry. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecordIterator .done() bool done( ) Description Returns true if the iterator has finished traversing the record. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecordIterator .getEntity() AutoCAD.Entity getEntity( int openMode = 0 ) Parameters openMode The mode by which to open the object. 0 means read-only, 1 means write-enabled Description Gets the entity that the iterator is currently pointing at. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecordIterator .start() void start( ) Description Resets the iterator. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.BlockTableRecordIterator .step() void step( ) Description Steps the iterator to its next entry."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Circle.html",
        "title": "FlexScript Class - AutoCAD.Circle",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a circle in a DWG file. This class is a FlexScript wrapper for the AcDbCircle class. AutoCAD.Database db = AutoCAD.Database(\"C:\\\\Path\\\\to\\\\my\\\\file.dwg\"); if (!db) return 0; var iter = db.getBlockTable().getAt(\"*Model_Space\").newIterator(); for (iter.start(); !iter.done(); iter.step()) { var ent = iter.getEntity(); if (ent.is(AutoCAD.Circle)) { var circle = ent.as(AutoCAD.Circle); Vec3 startPoint = circle.startPoint; Vec3 endPoint = circle.endPoint; Vec3 center = circle.center; double radius = circle.radius; double diameter = circle.diameter; double circumference = circle.circumference; ... } } Properties center The center point of the circle. circumference The circumference of the circle. diameter The diameter of the circle. endPoint The end point of the circle. radius The radius of the circle. startPoint The start point of the circle. Methods create Creates a new AutoCAD.Circle object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .center Vec3 center Description The center point of the circle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .circumference double circumference Description The circumference of the circle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .diameter double diameter Description The diameter of the circle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .endPoint Vec3 endPoint Description The end point of the circle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .radius double radius Description The radius of the circle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .startPoint Vec3 startPoint Description The start point of the circle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Circle .create() AutoCAD.Circle create( ) Returns AutoCAD.Circle A new AutoCAD.Circle object. Description Creates a new AutoCAD.Circle object. var circle = AutoCAD.Circle.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Database.html",
        "title": "FlexScript Class - AutoCAD.Database",
        "content": "Description A class that represents an AutoCAD DWG file. This class wraps a subset of the RealDWG AcDbDatabase class functionality. Properties insunits The insertion units for the database. unitsPerMeter The number of database units in one meter. Methods getBlockTable Retrieves the database's block table. saveAs Writes the database to the dwg file path. Constructor Database Creates a database for reading and/or writing. Static Methods openObject Opens a database-resident object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Database .insunits int insunits Description The insertion units for the database. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Database .unitsPerMeter double unitsPerMeter Description The number of database units in one meter. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Database .getBlockTable() AutoCAD.BlockTable getBlockTable( int openMode ) Parameters openMode The mode by which to open the table. 0 means read only, 1 means write-enabled. Description Retrieves the database's block table. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Database .saveAs() void saveAs( string filePath ) Parameters filePath The path to the dwg file that you want to write to. Description Writes the database to the dwg file path. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Database Constructor Database( ) Database( int defaultDrawing ) Database( string filePath , writeEnabled = 0 ) Parameters defaultDrawing 1 if you want the database to be created with a default set of tables needed for a blank AutoCAD drawing, 0 if you want a completely empty database. filePath The path to the dwg you want to open. writeEnabled 1 if you want to open the file with writing enabled, 0 otherwise. Description Creates a database for reading and/or writing. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Database .openObject() static AutoCAD.BlockTable openObject( int openMode ) Parameters openMode The mode by which to open the table. 0 means read only, 1 means write-enabled. Description Opens a database-resident object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Dictionary.html",
        "title": "FlexScript Class - AutoCAD.Dictionary",
        "content": "Inherits from AutoCAD.Object Description Stores key-value pairs. The key is a text value and the value is an AutoCAD.ObjectId . This class wraps a subset of the RealDWG AcDbDictionary class functionality. Applications sometimes store extra data in an object's extension dictionary. You can use this class to access that data: AutoCAD.ObjectId extDictId = obj.extensionDictionary; if (extDictId) { var extDict = db.openObject(extDictId).as(AutoCAD.Dictionary); if (extDict.contains(\"APPLICATION_ID\")) { AutoCAD.Xrecord record = extDict.getAt(\"APPLICATION_ID\").as(AutoCAD.Xrecord); TypedValueAray values = record.rbChain(); for (int i = 0; i < values.length; i++) { // Use the values in the dictionary. } } } Properties newIterator Returns an iterator over the contents of the dictionary. numEntries Returns the number of entries in the dictionary. Methods contains Checks whether a given key exists. getAt Returns the AutoCAD.Object associated with the given key. remove Removes the key and its associated value. setAt Adds or replaces the value associated with the specified key. Static Methods create Creates a new Dictionary object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .newIterator readonly AutoCAD.DictionaryIterator newIterator Description Returns an iterator over the contents of the dictionary. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .numEntries readonly int numEntries Description Returns the number of entries in the dictionary. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .contains() int contains( string key ) Parameters key The key to check Returns int True (1) if the key is present. False (0) otherwise. Description Checks whether a given key exists. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .getAt() AutoCAD.Object getAt( string key , int openMode = 0 ) Parameters key The key for the retrieved value openMode The mode by which to open the object. 0 for read only, 1 for write-enabled. Returns AutoCAD.Object The object associated with the key. Description Returns the AutoCAD.Object associated with the given key. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .remove() remove( string key ) Parameters key The key to remove. Description Removes the key and its associated value. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .setAt() setAt( string key , Object value ) Parameters key The key for the new value value The value to insert or replace Description Adds or replaces the value associated with the specified key. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dictionary .create() static AutoCAD.Dictionary create( ) Returns AutoCAD.Dictionary The newly created Dictionary object. Description Creates a new Dictionary object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.DictionaryIterator.html",
        "title": "FlexScript Class - AutoCAD.DictionaryIterator",
        "content": "Description An object that traverses AutoCAD.Dictionary objects. This class wraps a subset of the RealDWG AcDbDatabase class functionality. This class allows you to loop over a Dictionary as follows: AutoCAD.Dictionary dict; for (var iter = dict.newIterator; !iter.done; iter.next()) { // Access iter.name, iter.objectId, etc. } Properties done True (1) if the iterator is past the end of the Dictionary. Otherwise, returns False (0). name The key name at the current iterator position objectId The AutoCAD.ObjectId at the current iterator position. Methods getObject Opens the AutoCAD.Object associated with the ObjectId at the current iterator position. next Advances the iterator to the next position in the Dictionary. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DictionaryIterator .done readonly int done Description True (1) if the iterator is past the end of the Dictionary. Otherwise, returns False (0). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DictionaryIterator .name readonly name Description The key name at the current iterator position Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DictionaryIterator .objectId readonly AutoCAD.ObjectId objectId Description The AutoCAD.ObjectId at the current iterator position. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DictionaryIterator .getObject() AutoCAD.Object getObject( int openMode = 0 ) Parameters openMode The mode by which to open the object. 0 for read only, 1 for write-enabled. Returns AutoCAD.Object The Object at the current iterator position. Description Opens the AutoCAD.Object associated with the ObjectId at the current iterator position. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DictionaryIterator .next() int next( ) Returns int True (1) i Description Advances the iterator to the next position in the Dictionary."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Dimension.html",
        "title": "FlexScript Class - AutoCAD.Dimension",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a dimension in a DWG file. This class is a FlexScript wrapper for the AcDbDimension class. Properties arrowFirstIsFlipped Gets/sets whether the first arrow is flipped or not. arrowSecondIsFlipped Gets/sets whether the second arrow is flipped or not. blockTransform Gets the matrix that describes the mapping from the dim block table record's MCS (microspace coordinate system) out to the WCS (world coordinate system). centerMarkSize Gets the size of the center mark. dimBlockId Gets/sets the Object ID of the Table Record cointaing the entities that this dimension displays. dimBlockPosition The relative position point of the block referenced by the dimension (in WCS). dimensionText The dimension annotation text string (including any multiline text formatting characters). horizontalRotation Gets/sets the horizontal rotation value (in radians) of the dimension. inspection Gets/sets whether or not the inspection flag is set. inspectionFrame Gets/sets the inspection frame style. inspectionLabel Gets/sets the string text of the inspection label. inspectionRate Gets/sets the value of the inspection rate. isUsingDefaultTextPosition Whether or not the text is in the default position for the dimension. measurement The measurement value for this dimension. textPosition Gets/sets the text position point. textRotation Gets/sets the rotation angle (in radians) of the dimension's annotation text. Methods recomputeDimBlock Updates the block table record the dimension references to match any changes made to the dimension since the last time the block table record was updated. removeTextField If this object contains a text field, this function removes it from the extension dictionary and deletes the field object. resetTextDefinedSize Resets dimension text defined width and defined height to MText in dimension block. useDefaultTextPosition Sets the dimension to use the default text position so that the text position is automatically updated whenever the dimension is changed in such a way that the default text position changes. useSetTextPosition Sets the dimension not to use the default text position so that the text remains unmoved when the dimension's default text position changes (that is, no automatic text position updates will occur). Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .arrowFirstIsFlipped int arrowFirstIsFlipped Description Gets/sets whether the first arrow is flipped or not. If 1, then the first arrow is flipped; 0 if not. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .arrowSecondIsFlipped int arrowSecondIsFlipped Description Gets/sets whether the second arrow is flipped or not. If 1, then the second arrow is flipped; 0 if not. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .blockTransform readonly Array blockTransform Description Gets the matrix that describes the mapping from the dim block table record's MCS (microspace coordinate system) out to the WCS (world coordinate system). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .centerMarkSize readonly double centerMarkSize Description Gets the size of the center mark. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .dimBlockId AutoCAD.ObjectId dimBlockId Description Gets/sets the Object ID of the Table Record cointaing the entities that this dimension displays. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .dimBlockPosition Vec3 dimBlockPosition Description The relative position point of the block referenced by the dimension (in WCS). The block position is the insertion point of the block referenced by the dimension, relative to the primary definition point (DXF group code 10) of the dimension itself. The block position (in WCS) is added to the dimension primary definition point (also in WCS) to get the actual insertion point for the anonymous block that is referenced by the dimension. So, for example, changing a dimension's block position from (0,0,0) to (0,0,1) (in WCS) will cause the dimension to display as though it has been moved 1 unit along the WCS Z axis. For a dimension newly created via any dimension command, the block position will be (0,0,0). For copies of existing dimensions, or if a dimension is moved, the block position will be the offset vector (in WCS) from where the original dimension was located. For example, moving a dimension 1 unit down the WCS Y axis will cause AutoCAD to update the block position value from (0,0,0) to (0,-1,0) (in WCS coordinates). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .dimensionText string dimensionText Description The dimension annotation text string (including any multiline text formatting characters). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .horizontalRotation double horizontalRotation Description Gets/sets the horizontal rotation value (in radians) of the dimension. If the default text is the only text in the dimension, this function will return an empty string (for example, ''). If the dimension contains user-defined text along with the default text, this function will return the text with the default text denoted with angle brackets (for example, 'This is the default text <>'). If the dimension contains no text, (for example using the '.' syntax), it will return the '.'. Finally, if the text is user defined but there is no default text, only the user-defined text is returned. Call measurement to obtain the default measurement and computed text. Alternately, to identify the substring in the block table record is, you can look at the Text entity within the block table record (the object ID for this block table record can be obtained via dimBlockId). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .inspection int inspection Description Gets/sets whether or not the inspection flag is set. If 1, then the flag is set; if 0, then it is not. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .inspectionFrame int inspectionFrame Description Gets/sets the inspection frame style. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .inspectionLabel string inspectionLabel Description Gets/sets the string text of the inspection label. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .inspectionRate string inspectionRate Description Gets/sets the value of the inspection rate. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .isUsingDefaultTextPosition int isUsingDefaultTextPosition Description Whether or not the text is in the default position for the dimension. If 1, then the text is using the default position; if 0, then it is not. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .measurement readonly double measurement Description The measurement value for this dimension. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .textPosition Vec3 textPosition Description Gets/sets the text position point. This is the middle center point of the text (which is itself an MText object with middle-center justification). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .textRotation double textRotation Description Gets/sets the rotation angle (in radians) of the dimension's annotation text. This is the angle from the dimension's horizontal axis to the horizontal axis used by the text. The angle is in the dimension's OCS X-Y plane with positive angles going counterclockwise when looking down the OCS Z axis towards the OCS origin. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .recomputeDimBlock() recomputeDimBlock( int forceUpdate ) Parameters forceUpdate Whether or not to force an update. Description Updates the block table record the dimension references to match any changes made to the dimension since the last time the block table record was updated. If forceUpdate is 1, then the block table record will be updated regardless of whether or not the dimension has had any changes since the last time the block table record was updated. If forceUpdate is 0, then the block table record will only be updated if the dimension has been changed since it was opened, is not currently erased, and is not in the middle of an Undo operation. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .removeTextField() removeTextField( ) Description If this object contains a text field, this function removes it from the extension dictionary and deletes the field object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .resetTextDefinedSize() resetTextDefinedSize( ) Description Resets dimension text defined width and defined height to MText in dimension block. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .useDefaultTextPosition() useDefaultTextPosition( ) Description Sets the dimension to use the default text position so that the text position is automatically updated whenever the dimension is changed in such a way that the default text position changes. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Dimension .useSetTextPosition() useSetTextPosition( ) Description Sets the dimension not to use the default text position so that the text remains unmoved when the dimension's default text position changes (that is, no automatic text position updates will occur)."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.DynamicBlockProperty.html",
        "title": "FlexScript Class - AutoCAD.DynamicBlockProperty",
        "content": "Description A class that encapsulates a dynamic block property associated with an AutoCAD.BlockReference . This class is a FlexScript wrapper for the AcDbDynBlockReferenceProperty class. Properties name Gets the name of the property. value Gets/sets the property's value. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DynamicBlockProperty .name string name Description Gets the name of the property. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.DynamicBlockProperty .value Variant value Description Gets/sets the property's value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Ellipse.html",
        "title": "FlexScript Class - AutoCAD.Ellipse",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates an ellipse in a DWG file. This class is a FlexScript wrapper for the AcDbEllipse class. AutoCAD.Database db = AutoCAD.Database(\"C:\\\\Path\\\\to\\\\my\\\\file.dwg\"); if (!db) return 0; var iter = db.getBlockTable().getAt(\"*Model_Space\").newIterator(); for (iter.start(); !iter.done(); iter.step()) { var ent = iter.getEntity(); if (ent.is(AutoCAD.Ellipse)) { var ellipse = ent.as(AutoCAD.Ellipse); Vec3 center = ellipse.center; double startAngle = ellipse.startAngle; double endAngle = ellipse.endAngle; double majorRadius = ellipse.majorRadius; double minorRadius = ellipse.minorRadius; double radiusRatio = ellipse.radiusRatio; Vec3 majorAxis = ellipse.majorAxis; Vec3 minorAxis = ellipse.minorAxis; ... } } Properties center The center point of the ellipse. endAngle The end angle of the ellipse. majorAxis The major axis of the ellipse. majorRadius The major radius of the ellipse. minorAxis The minor axis of the ellipse. minorRadius The minor radius of the ellipse. radiusRatio The ratio of the ellipse's major radius to its minor radius. startAngle The start angle of the ellipse. Methods create Creates a new AutoCAD.Ellipse object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .center Vec3 center Description The center point of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .endAngle double endAngle Description The end angle of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .majorAxis readonly Vec3 majorAxis Description The major axis of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .majorRadius double majorRadius Description The major radius of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .minorAxis readonly Vec3 minorAxis Description The minor axis of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .minorRadius double minorRadius Description The minor radius of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .radiusRatio double radiusRatio Description The ratio of the ellipse's major radius to its minor radius. The returned value will be in the range 1e-6 to 1.0. When setting this value, you should supply a number within the same range. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .startAngle double startAngle Description The start angle of the ellipse. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Ellipse .create() AutoCAD.Ellipse create( ) Returns AutoCAD.Ellipse A new AutoCAD.Ellipse object. Description Creates a new AutoCAD.Ellipse object. var ellipse = AutoCAD.Ellipse.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Entity.html",
        "title": "FlexScript Class - AutoCAD.Entity",
        "content": "Inherits from AutoCAD.Object Description A class that encapsulates a drawable element of a DWG file. This class is a FlexScript wrapper for the AcDbEntity class. Properties color Gets/sets the entity's color. colorIndex Gets/sets the entity's color index. entityType Returns the class name of the entity. layer Gets/sets the entity's layer name. linetype Gets/sets the entity's linetype. linetypeScale Gets/sets the entity's linetype scale. lineWeight Gets/sets the entity's line weight. material Gets/sets the entity's material. plotStyleName Gets/sets the entity's plot style name. visibility Gets/sets the entity's visibility. Methods is True if the object is an instance of the defined FlexScript type. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .color Color color Description Gets/sets the entity's color. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .colorIndex int colorIndex Description Gets/sets the entity's color index. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .entityType readonly string entityType Description Returns the class name of the entity. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .layer string layer Description Gets/sets the entity's layer name. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .linetype string linetype Description Gets/sets the entity's linetype. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .linetypeScale double linetypeScale Description Gets/sets the entity's linetype scale. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .lineWeight int lineWeight Description Gets/sets the entity's line weight. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .material string material Description Gets/sets the entity's material. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .plotStyleName string plotStyleName Description Gets/sets the entity's plot style name. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .visibility int visibility Description Gets/sets the entity's visibility. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Entity .is() bool is( flexScriptType ) Parameters flexScriptType The type. Description True if the object is an instance of the defined FlexScript type. AutoCAD.Object obj = db.openObject(objId); if (obj.is(AutoCAD.BlockReference)) { AutoCAD.BlockReference ref = obj.as(AutoCAD.BlockReference); ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Handle.html",
        "title": "FlexScript Class - AutoCAD.Handle",
        "content": "Description A class that encapsulates a database-unique persistent identifier of an object. This class is a FlexScript wrapper for the AcDbHandle class. Properties high The high-order integer of the handle. low The low-order integer of the handle. Methods Handle Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Handle .high readonly int high Description The high-order integer of the handle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Handle .low readonly int low Description The low-order integer of the handle. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Handle .Handle() AutoCAD.Handle Handle( ) AutoCAD.Handle Handle( int low , int high )"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.KnotParam.html",
        "title": "FlexScript Class - AutoCAD.KnotParam",
        "content": "Description A class that encapsulates an AcGe::KnotParameterization in a DWG file. This class is a FlexScript wrapper for the KnotParameterization enumeration. The AutocAD.KnotParam values are used primarily with AutoCAD.Spline functions and properties, such as setFitData . Static Properties kChord = 0 kCustomParameterization = 15 kNotDefinedKnotParam = 16 kSqrtChord = 1 kUniform = 2 Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.KnotParam .kChord static readonly int kChord = 0 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.KnotParam .kCustomParameterization static readonly int kCustomParameterization = 15 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.KnotParam .kNotDefinedKnotParam static readonly int kNotDefinedKnotParam = 16 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.KnotParam .kSqrtChord static readonly int kSqrtChord = 1 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.KnotParam .kUniform static readonly int kUniform = 2 Description"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Line.html",
        "title": "FlexScript Class - AutoCAD.Line",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a line in a DWG file. This class is a FlexScript wrapper for the AcDbLine class. Properties endPoint Gets/sets the line's end point. startPoint Gets/sets the line's start point. Methods create Creates a new AutoCAD.Line object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Line .endPoint Vec3 endPoint Description Gets/sets the line's end point. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Line .startPoint Vec3 startPoint Description Gets/sets the line's start point. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Line .create() AutoCAD.Line create( ) Returns AutoCAD.Line A new AutoCAD.Line object. Description Creates a new AutoCAD.Line object. var line = AutoCAD.Line.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Mline.html",
        "title": "FlexScript Class - AutoCAD.Mline",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates an Mline in a DWG file. This class is a FlexScript wrapper for the AcDbMline class. AutoCAD.Database db = AutoCAD.Database(\"C:\\\\Path\\\\to\\\\my\\\\file.dwg\"); if (!db) return 0; var iter = db.getBlockTable().getAt(\"*Model_Space\").newIterator(); for (iter.start(); !iter.done(); iter.step()) { var ent = iter.getEntity(); if (ent.is(AutoCAD.Mline)) { var mline = ent.as(AutoCAD.Mline); int numVerts = mline.numVerticies; double scale = mline.scale; Vec3 vertex = mline.getVertexAt(numVerts-1); Vec3 randomPoint = (duniform(-1, 1), duniform(-1, 1), duniform(-1, 1)); // The search will use virtual extension and include the caps. Vec3 closestPoint = mline.getClosestPointTo(randomPoint, 1); ... } } Properties numVerticies The number of verticies in the Mline. scale The scale of the Mline. Methods create Creates a new AutoCAD.Mline object. getClosestPointTo Finds the point on the Mline that is closest to givenPoint. getVertexAt Gets the vertex as index. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Mline .numVerticies readonly int numVerticies Description The number of verticies in the Mline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Mline .scale double scale Description The scale of the Mline. This controls the overall width of the Mline. This scale factor is based on the width established in the MlineStyle definition. A scale factor of 2 produces an Mline object twice as wide as the style definition. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Mline .create() AutoCAD.Mline create( ) Returns AutoCAD.Mline A new AutoCAD.Mline object. Description Creates a new AutoCAD.Mline object. var mline = AutoCAD.Mline.create(); Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Mline .getClosestPointTo() Vec3 getClosestPointTo( Vec3 givenPoint , int extended = 0 , int excludeCaps = 0 ) Parameters givenPoint The input point to find the nearest point on the Mline to. extended Whether or not the search should include \"virtual\" extension of Mline. If 0, then the search will not include \"virtual\" extension. excludeCaps Whether or not endcaps should be included in the nearest point search. If 0, then caps will NOT be excluded (i.e. caps WILL be included in the search). Returns Vec3 The closest point on the Mline to the given point. Description Finds the point on the Mline that is closest to givenPoint. If extend is 1, then the Mline will be \"virtually\" extended to find the closest point. If excludeCaps is 1, then any endcaps on the mline will be ignored. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Mline .getVertexAt() Vec3 getVertexAt( int index ) Parameters index The index (0-based) of the vertex you want to get. Returns Vec3 The coordinates of the vertex at the desired index in the Mline object. Description Gets the vertex as index."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.MText.html",
        "title": "FlexScript Class - AutoCAD.MText",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates an MText in a DWG file. This class is a FlexScript wrapper for the AcDbMText class. Properties actualHeight The overall height of the bounding rectangle that surrounds the formatted text. actualWidth The overall width of the bounding rectangle that surrounds the formatted text. ascent The height of the maximum ascender for the first line of the text. attachment A value describing the attachment point for the MText object. backgroundColorOn Gets/sets whether the background color is in use for this object. backgroundFillColor Gets/sets the background color for this object. backgroundFillOn Gets/sets whether background fill is on. backgroundScaleFactor Gets/sets the background scale factor. columnAutoHeight Gets/sets the auto height setting. columnCount Gets/sets the number of columns. columnFlowReversed Gets/sets the flow reversed setting, which determines how columns are added. columnGutterWidth Gets/sets the column gutter width. columnWidth Gets/sets the width of each column. contents Gets/sets the contents of the MText object. contentsRTF Gets/sets the contents in an RTF encoded string of the MText object. descent Gets the height of the maximum descender for the last line of the text. direction Gets/sets a vector representing the X axis (\"horizontal\") for the text. height Gets/sets the height of this object. lineSpacingFactor Gets/sets the line spacing factor. location Gets/sets the insertion point of the MText object. rotation Gets/sets the rotation in radians. showBorders Gets/sets whether borders are visible. text Gets/sets the contents of the text string with formatting removed. textHeight Gets/sets the nominal text height of the MText object. width Gets/sets the maximum width setting used by the MText object for word wrap formatting. Methods getBoundingPoints Returns an Array with 4 points defining the bounding box of text as displayed on screen. getBoundingPointsByLine Returns a multidimensional Array of points that represent 4 corners of the boundary box of each line of text. getColumnHeight Gets the height of the specified column. removeField Removes the field specified by the parameter. setAttachmentMovingLocation Changes the attachment of the MText object, like the attachment property can; however, it also moves the location in order to keep the current extent unchanged. setColumnHeight Sets the height of the specified column. setDynamicColumns Sets the column type to kDynamicColumns with specified width, gutter, and auto height setting. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .actualHeight readonly double actualHeight Description The overall height of the bounding rectangle that surrounds the formatted text. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .actualWidth readonly double actualWidth Description The overall width of the bounding rectangle that surrounds the formatted text. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .ascent readonly double ascent Description The height of the maximum ascender for the first line of the text. This value can be used with the descent property to help align multiple AcDbMText objects in a table or grid. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .attachment int attachment Description A value describing the attachment point for the MText object. The attachment point value determines how the text will be oriented around the insertion point of the MText object. For example, if the attachment point is kMiddleCenter, then the text body will be displayed such that the insertion point appears at the geometric center of the text body. View the AutoCAD.MText.AttachmentPoint class for what the return values represent. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .backgroundColorOn int backgroundColorOn Description Gets/sets whether the background color is in use for this object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .backgroundFillColor Color backgroundFillColor Description Gets/sets the background color for this object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .backgroundFillOn int backgroundFillOn Description Gets/sets whether background fill is on. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .backgroundScaleFactor double backgroundScaleFactor Description Gets/sets the background scale factor. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .columnAutoHeight int columnAutoHeight Description Gets/sets the auto height setting. Specifies whether dynamic columns use the MText height or a per-column user-defined height. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .columnCount int columnCount Description Gets/sets the number of columns. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .columnFlowReversed int columnFlowReversed Description Gets/sets the flow reversed setting, which determines how columns are added. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .columnGutterWidth double columnGutterWidth Description Gets/sets the column gutter width. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .columnWidth double columnWidth Description Gets/sets the width of each column. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .contents contents Description Gets/sets the contents of the MText object. Formatting data used for word wrap calculations is removed before the string is copied. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .contentsRTF contentsRTF Description Gets/sets the contents in an RTF encoded string of the MText object. Fonts, colors, tabs, and indents are preserved. Bullets and numbered lists are mapped to hanging paragraphs using the implied setting for tabs and indents. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .descent readonly double descent Description Gets the height of the maximum descender for the last line of the text. This value can be used with the ascent property to help align multiple AcDbMText objects in a table or grid. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .direction Vec3 direction Description Gets/sets a vector representing the X axis (\"horizontal\") for the text. This direction vector is used to determine the text flow direction. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .height double height Description Gets/sets the height of this object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .lineSpacingFactor double lineSpacingFactor Description Gets/sets the line spacing factor. This should be a value between 0.25 and 4.00. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .location Vec3 location Description Gets/sets the insertion point of the MText object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .rotation double rotation Description Gets/sets the rotation in radians. The angle between the X axis of the OCS for the normal vector of the current AutoCAD editor's UCS and the projection of the MText object's direction vector onto the plane of the AutoCAD editor's current UCS. Positive angles are counterclockwise when looking down the UCS normal towards the UCS origin. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .showBorders int showBorders Description Gets/sets whether borders are visible. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .text readonly text Description Gets/sets the contents of the text string with formatting removed. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .textHeight double textHeight Description Gets/sets the nominal text height of the MText object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .width double width Description Gets/sets the maximum width setting used by the MText object for word wrap formatting. It is possible that none of the lines resulting from word wrap formatting will reach this width value. Words which exceed this width value will not be broken, but will extend beyond the given width. The AcDbMText::actualWidth() member function returns the actual width of the text, regardless of the maximum width setting. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .getBoundingPoints() Array getBoundingPoints( ) Returns Array An Array with 4 points. Description Returns an Array with 4 points defining the bounding box of text as displayed on screen. Index 1: top-left corner index 2: top-right corner index 3: bottom-left corner index 4: bottom-right corner Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .getBoundingPointsByLine() Array getBoundingPointsByLine( ) Returns Array a multidimensional Array of points. Description Returns a multidimensional Array of points that represent 4 corners of the boundary box of each line of text. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .getColumnHeight() double getColumnHeight( int colIndex ) Parameters colIndex The index of the column to get a height for. Returns double The height of the specificed column. Description Gets the height of the specified column. Only valid for dynamic, manual height columns. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .removeField() removeField( AutoCAD.ObjectId objectId ) removeField( string fieldName ) Parameters objectId The id of the object to remove. fieldName The name of the field to remove. Description Removes the field specified by the parameter. If you supply an AutoCAD.ObjectId, then the field whose object ID matches that ObjectId will be removed from this object's extension dictionary. If you supply a string, then the field with that name will be removed from the object's extension dictionary and the removed field object's ID will be returned. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .setAttachmentMovingLocation() setAttachmentMovingLocation( int attachmentPoint ) Parameters attachmentPoint The new attachment point to set and move to. Description Changes the attachment of the MText object, like the attachment property can; however, it also moves the location in order to keep the current extent unchanged. For more details, check the documentation . Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .setColumnHeight() setColumnHeight( int colIndex , double newHeight ) Parameters colIndex The index of the column. newHeight The new height. Description Sets the height of the specified column. Only valid for dynamic, manual height columns. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText .setDynamicColumns() setDynamicColumns( double width , double gutter , int autoHeight ) Parameters width Input new column width. gutter Input new column gutter. autoHeight Input new auto-height setting. Description Sets the column type to kDynamicColumns with specified width, gutter, and auto height setting."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.MText.AttachmentPoint.html",
        "title": "FlexScript Class - AutoCAD.MText.AttachmentPoint",
        "content": "Description A class that encapsulates an MText::AttachmentPoint in a DWG file. This class is a FlexScript wrapper for the AcDbMText::AttachmentPoint enumeration. The AutoCAD.MText.AttachmentPoint values are used in AutoCAD.MText functions and properties, such as the setAttachmentMovingLocation method. Static Properties kBaseAlign = 13 kBaseCenter = 11 kBaseFit = 17 kBaseLeft = 10 kBaseMid = 21 kBaseRight = 12 kBottomAlign = 14 kBottomCenter = 8 kBottomFit = 18 kBottomLeft = 7 kBottomMid = 22 kBottomRight = 9 kMiddleAlign = 15 kMiddleCenter = 5 kMiddleFit = 19 kMiddleLeft = 4 kMiddleMid = 23 kMiddleRight = 6 kTopAlign = 16 kTopCenter = 2 kTopFit = 20 kTopLeft = 1 kTopRight = 3 Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBaseAlign static readonly int kBaseAlign = 13 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBaseCenter static readonly int kBaseCenter = 11 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBaseFit static readonly int kBaseFit = 17 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBaseLeft static readonly int kBaseLeft = 10 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBaseMid static readonly int kBaseMid = 21 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBaseRight static readonly int kBaseRight = 12 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBottomAlign static readonly int kBottomAlign = 14 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBottomCenter static readonly int kBottomCenter = 8 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBottomFit static readonly int kBottomFit = 18 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBottomLeft static readonly int kBottomLeft = 7 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBottomMid static readonly int kBottomMid = 22 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kBottomRight static readonly int kBottomRight = 9 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kMiddleAlign static readonly int kMiddleAlign = 15 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kMiddleCenter static readonly int kMiddleCenter = 5 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kMiddleFit static readonly int kMiddleFit = 19 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kMiddleLeft static readonly int kMiddleLeft = 4 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kMiddleMid static readonly int kMiddleMid = 23 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kMiddleRight static readonly int kMiddleRight = 6 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kTopAlign static readonly int kTopAlign = 16 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kTopCenter static readonly int kTopCenter = 2 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kTopFit static readonly int kTopFit = 20 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kTopLeft static readonly int kTopLeft = 1 Description Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.MText.AttachmentPoint .kTopRight static readonly int kTopRight = 3 Description"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Object.html",
        "title": "FlexScript Class - AutoCAD.Object",
        "content": "Description A class that encapsulates a DWG database-resident object. This class is a FlexScript wrapper for the AcDbObject class. Properties extensionDictionary Return the ID of the extensionDictionary associated with this object. id The object's identifier. isReadEnabled Returns 1 if the object is currently open for reading; 0 otherwise. isWriteEnabled Returns 1 if the object is currently open for writing and is not currently sending notifications; 0 otherwise. Methods createExtensionDictionary Adds an extension dictionary to the object. erase Marks the object's 'erased' bit as true. is True if the object is an instance of the defined FlexScript type. setXData Sets the xData associated with this object. xData Gets the xData associated with this object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .extensionDictionary readonly AutoCAD.ObjectId extensionDictionary Description Return the ID of the extensionDictionary associated with this object. Returns an invalid id if the extensionDictionary does not exist. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .id readonly AutoCAD.ObjectId id Description The object's identifier. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .isReadEnabled readonly int isReadEnabled Description Returns 1 if the object is currently open for reading; 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .isWriteEnabled readonly int isWriteEnabled Description Returns 1 if the object is currently open for writing and is not currently sending notifications; 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .createExtensionDictionary() void createExtensionDictionary( ) Description Adds an extension dictionary to the object. If the extension dictionary already exists, an error is recorded. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .erase() void erase( ) Description Marks the object's 'erased' bit as true. When the file is saved again, objects whose 'erased' bit is marked as true will be excluded from the file, and will thus not exist when loaded again. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .is() bool is( flexScriptType ) Parameters flexScriptType The type. Description True if the object is an instance of the defined FlexScript type. AutoCAD.Object obj = db.openObject(objId); if (obj.is(AutoCAD.BlockReference)) { AutoCAD.BlockReference ref = obj.as(AutoCAD.BlockReference); ... } Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .setXData() setXData( AutoCAD.TypedValueArray data ) Parameters data The new values for the xData. Description Sets the xData associated with this object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Object .xData() AutoCAD.TypedValueArray xData( string appName = 0 ) Parameters appName The optional application name. Returns AutoCAD.TypedValueArray The array of xData for this object. Description Gets the xData associated with this object. If the appliaction name is not specified, all xdata is returned, otherwise only the xdata for the specified name is returned. If there is no xData, this method returns an empty array."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.ObjectId.html",
        "title": "FlexScript Class - AutoCAD.ObjectId",
        "content": "Description A class that encapsulates the identifier for a DWG database-resident object. Use in conjunction with AutoCAD.Database . openObject (). This class is a FlexScript wrapper for the AcDbObjectId class. Properties handle The handle associated with the object. isNull True the object id references no object. Operators bool Returns true if the ObjectId is valid. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.ObjectId .handle readonly AutoCAD.Handle handle Description The handle associated with the object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.ObjectId .isNull readonly bool isNull Description True the object id references no object. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.ObjectId .operator bool int operator bool( ) Description Returns true if the ObjectId is valid."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Point.html",
        "title": "FlexScript Class - AutoCAD.Point",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a point in a DWG file. This class is a FlexScript wrapper for the AcDbPoint class. AutoCAD.Database db = AutoCAD.Database(\"C:\\\\Path\\\\to\\\\my\\\\file.dwg\"); if (!db) return 0; var iter = db.getBlockTable().getAt(\"*Model_Space\").newIterator(); for (iter.start(); !iter.done(); iter.step()) { var ent = iter.getEntity(); if (ent.is(AutoCAD.Point)) { var point = ent.as(AutoCAD.Point); Vec3 position = point.position; ... } } Properties position The position of the point. Methods create Creates a new AutoCAD.Point object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Point .position Vec3 position Description The position of the point. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Point .create() AutoCAD.Point create( ) Returns AutoCAD.Point A new AutoCAD.Point object. Description Creates a new AutoCAD.Point object. var point = AutoCAD.Point.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Polyline.html",
        "title": "FlexScript Class - AutoCAD.Polyline",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a polyline in a DWG file. This class is a FlexScript wrapper for the AcDbPolyline class. Properties numVerts Gets the polyline's number of vertices. Methods addVertexAt Adds a vertex at the defined index. create Creates a new AutoCAD.Polyline object. getPointAt Gets the line's vertex at the defined index. removeVertexAt Removes the vertex at the defined index. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Polyline .numVerts int numVerts Description Gets the polyline's number of vertices. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Polyline .addVertexAt() void addVertexAt( int index , Vec3 loc , double bulge = 0 , double startWidth = 0 , double endWidth = 0 ) Parameters index The 0-based index of the vertex. loc The location of the vertex. bulge The bulge of the vertex. startWidth The start width of the vertex. endWidth The end width of the vertex. Description Adds a vertex at the defined index. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Polyline .create() AutoCAD.Polyline create( ) Returns AutoCAD.Polyline A new AutoCAD.Polyline object. Description Creates a new AutoCAD.Polyline object. var polyline = AutoCAD.Polyline.create(); Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Polyline .getPointAt() Vec3 getPointAt( int index ) Parameters index The 0-based index of the vertex. Description Gets the line's vertex at the defined index. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Polyline .removeVertexAt() void removeVertexAt( int index ) Parameters index The 0-based index of the vertex. Description Removes the vertex at the defined index."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.RotatedDimension.html",
        "title": "FlexScript Class - AutoCAD.RotatedDimension",
        "content": "Inherits from AutoCAD.Dimension Description A class that encapsulates a rotated dimension in a DWG file. This class is a FlexScript wrapper for the AcDbRotatedDimension class. Properties dimLinePoint Gets/sets the definition point (in WCS coordinates) that specifies where the dimension line will be (that is, this point will be somewhere on the dimension line). oblique Gets/sets the extension line obliquing angle (in radians) for the dimension. rotation Gets/sets the dimension's rotation angle in radians. xLine1Point Gets/sets the definition point (in WCS coordinates) that's used as the start point for the first extension line of the dimension. xLine2Point Gets/sets the definition point (in WCS coordinates) that's used as the start point for the second extension line of the dimension. Static Methods create Creates a new AutoCAD.RotatedDimension object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.RotatedDimension .dimLinePoint Vec3 dimLinePoint Description Gets/sets the definition point (in WCS coordinates) that specifies where the dimension line will be (that is, this point will be somewhere on the dimension line). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.RotatedDimension .oblique double oblique Description Gets/sets the extension line obliquing angle (in radians) for the dimension. This angle is relative to the AcDbRotatedDimension::rotation() value. Positive angles are counterclockwise when looking down the dimension's OCS Z axis towards the origin. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.RotatedDimension .rotation double rotation Description Gets/sets the dimension's rotation angle in radians. The rotation angle is the angle between the dimension's OCS X axis and the axis of the distance being dimensioned. Positive angles are counterclockwise when looking down the OCS positive Z axis towards the origin. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.RotatedDimension .xLine1Point Vec3 xLine1Point Description Gets/sets the definition point (in WCS coordinates) that's used as the start point for the first extension line of the dimension. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.RotatedDimension .xLine2Point Vec3 xLine2Point Description Gets/sets the definition point (in WCS coordinates) that's used as the start point for the second extension line of the dimension. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.RotatedDimension .create() static AutoCAD.RotatedDimension create( ) Returns AutoCAD.RotatedDimension A new AutoCAD.RotatedDimension object. Description Creates a new AutoCAD.RotatedDimension object. var rotatedDimension = AutoCAD.RotatedDimension.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Spline.html",
        "title": "FlexScript Class - AutoCAD.Spline",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates a spline in a DWG file. This class is a FlexScript wrapper for the AcDbSpline class. Properties degree The degree of the spline's polynomial representation. A value in the range 1 to 25. fitTolerance The tolerance value used for curve fitting. hasFitData Returns 1 if the spline has fit data associated with it, otherwise 0. isNull Returns 1 if the spline has no underlying gelib object to maintain the spline information, otherwise 0. isRational Returns 1 if the spline is rational, otherwise 0. numControlPoints Returns the number of control points in the spline. numFitPoints Returns the number of fit points associated with the spline. type Returns the type of spline. Methods elevateDegree Increases the degree of the spline to degree. getControlPointAt Gets the value of the control point at position index in the list of control points. getFitData If the spline has fit data, then this method gets all the fit points, fit tolerance, knot parameterization, and, if tangents exist, the start and end tangents of the spline. getFitPointAt Gets the fit point at index. getFitTangents Gets the start point and end point tangent vectors. getNurbsData Gets the NURBS data of the spline which includes the degree, if the spline is rational, if the spline is closed, if the spline is periodic, the control point coordinates, knot values, weights for the control points, control point tolerance, and knot value tolerance. getWeightAt Returns the weight of the control point at index. insertControlPointAt Add a control point on the spline at the given knot parameter. insertFitPointAt Adds point to the list of fit points and refits the spline. insertKnot Inserts a new knot into the spline at the location on the spline defined by param. purgeFitData Purges the fit data if the spline is a fitted spline. rebuild Rebuild the spline with the degree and number of control points. removeControlPointAt Remove a control point at the given index. removeFitPointAt Removes the fit point at index in the list of fit points of the spline and refits the spline. setControlPointAt Sets point to be the control point at the index position in the control points list replacing the point value that was previously at index position. setFitData setFitPointAt Sets point to be the fit point at the index position in the fit points list (replacing the point value previously at index) and then refits the spline. setFitTangents Sets the start end tangents of spline to be startTangent and endTangent respectively and refits the spline. setNurbsData This function replaces any existing spline data with the data passed in. setWeightAt Changes the weight of the point at the index location in the control points array to weight. Static Methods create Creates a new AutoCAD.Spline object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .degree readonly int degree Description The degree of the spline's polynomial representation. A value in the range 1 to 25. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .fitTolerance double fitTolerance Description The tolerance value used for curve fitting. This is the maximum distance (in drawing units) that the spline curve is allowed to deviate from the fit points. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .hasFitData readonly int hasFitData Description Returns 1 if the spline has fit data associated with it, otherwise 0. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .isNull readonly int isNull Description Returns 1 if the spline has no underlying gelib object to maintain the spline information, otherwise 0. For more information, reference the AcDbSpline class. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .isRational readonly int isRational Description Returns 1 if the spline is rational, otherwise 0. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .numControlPoints readonly int numControlPoints Description Returns the number of control points in the spline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .numFitPoints readonly int numFitPoints Description Returns the number of fit points associated with the spline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .type int type Description Returns the type of spline. The spline was either created by fit points or by control points. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .elevateDegree() elevateDegree( int degree ) Parameters degree The new degree to elevate to. Description Increases the degree of the spline to degree. Increases the degree (which is the same as the order -1) of the spline to degree. Once incremented it cannot be decremented. The valid range is between (current degree) and 25. The spline's order is the degree + 1. Elevating degree won't change the shape. When the spline is periodic, elevating degree will make it non-periodic. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .getControlPointAt() Vec3 getControlPointAt( int index ) Parameters index Input index (0 based) of the point to get. Returns Vec3 The control point coordinates. Description Gets the value of the control point at position index in the list of control points. If index is negative or more than the number of control points in the spline, then point is set to the last control point. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .getFitData() Array getFitData( ) Returns Array An array holding all the fit data information. Description If the spline has fit data, then this method gets all the fit points, fit tolerance, knot parameterization, and, if tangents exist, the start and end tangents of the spline. ... // iter is a block table's iterator AutoCAD.entity ent = iter.getEntity(); var spline = ent.as(AutoCAD.Spline); Array fitData = spline.fitData; Array fitPoints = fitData[1]; int tangentsExist = fitData[2]; Array startTangent = fitData[3]; Array endTangent = fitData[4]; int knotParam = fitData[5]; int degree = fitData[6]; double fitTolerance = fitData[7]; ... Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .getFitPointAt() Vec3 getFitPointAt( int index ) Parameters index The index of the fit point to get. Returns Vec3 The fit point coordinates. Description Gets the fit point at index. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .getFitTangents() Array getFitTangents( ) Returns Array An array with the coordinates for the start and end tangents. Description Gets the start point and end point tangent vectors. ... // iter is a block table's iterator AutoCAD.entity ent = iter.getEntity(); var spline = ent.as(AutoCAD.Spline); Array tangents = spline.getFitTangents(); Vec3 startTangent = tangents[1]; Vec3 endTangent = tangents[2]; ... Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .getNurbsData() Array getNurbsData( ) Returns Array An array with the coordinates for the start and end tangents. Description Gets the NURBS data of the spline which includes the degree, if the spline is rational, if the spline is closed, if the spline is periodic, the control point coordinates, knot values, weights for the control points, control point tolerance, and knot value tolerance. ... // iter is a block table's iterator AutoCAD.entity ent = iter.getEntity(); var spline = ent.as(AutoCAD.Spline); Array nurbsData = spline.getNurbsData(); int degree = nurbsData[1]; int isRational = nurbsData[2]; int isClosed = nurbsData[3]; int isPeriodic = nurbsData[4]; Array controlPoints = nurbsData[5]; Array knots = nurbsData[6]; Array weights = nurbsData[7]; double controlPointTolerance = nurbsData[8]; double knotTolerance = nurbsData[9]; ... Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .getWeightAt() double getWeightAt( int index ) Parameters index Input index (0 based) of the control point. Returns double The weight of the control point at index. Description Returns the weight of the control point at index. Weights can only exist for rational splines, so if the spline is not rational, -1 is returned. If index is negative or greater than the number of control points, then 1 is returned. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .insertControlPointAt() insertControlPointAt( int index , Vec3 controlPoint , double weight = 1.0 ) Parameters index Input knot parameter. controlPoint Input control point. weight Input weight. Description Add a control point on the spline at the given knot parameter. If the spline is non-rational, the weight value will be ignored. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .insertFitPointAt() insertFitPointAt( int index , Vec3 point ) Parameters index Input index (0 based) where new fit point is to be inserted. point Input new fit point. Description Adds point to the list of fit points and refits the spline. point is added at the index position in the fit points list. If index is negative, then point is added at the beginning of the spline. If index is greater than the number of fit points in the spline, then point is added at the end of the spline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .insertKnot() insertKnot( double param ) Parameters param Input parameter where the knot is to be added. Description Inserts a new knot into the spline at the location on the spline defined by param. The param value must be within the spline's parameter range. To obtain the spline's parameter range, use the getNurbsData() method to obtain an array of the current knot values. The first knot value is the spline's start parameter value, while the last knot is the spline's end parameter. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .purgeFitData() purgeFitData( ) Description Purges the fit data if the spline is a fitted spline. Once the fit data has been removed, the spline uses its control point or NURBS data. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .rebuild() rebuild( int degree , int numControlPoints ) Parameters degree The new degree. numControlPoints The new number of control points. Description Rebuild the spline with the degree and number of control points. This will change the shape of the spline. The degree can't be higher than 11. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .removeControlPointAt() removeControlPointAt( int index ) Parameters index Input index. Description Remove a control point at the given index. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .removeFitPointAt() removeFitPointAt( int index ) Parameters index Index (0 based) of the fit point to be removed. Description Removes the fit point at index in the list of fit points of the spline and refits the spline. There must be at least three fit points in the spline for this function to succeed. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .setControlPointAt() setControlPointAt( int index , Vec3 point ) Parameters index Input index (0 based) of the control point to replace. point Input new control point. Description Sets point to be the control point at the index position in the control points list replacing the point value that was previously at index position. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .setFitData() setFitData( Array fitPoints , int isPeriodic , int knotParam , int degree = 3 , double fitTolerance = 0.0 ) setFitData( Array fitPoints , Vec3 startTangent , Vec3 endTangent , int knotParam , int degree = 3 , double fitTolerance = 0.0 ) Parameters fitPoints Array of points through which to fit the curve. isPeriodic Whether to create a periodic spline fitting the array of points or not. knotParam Knot parameterization which defines the knot values. degree Degree of the spline to be created (in the range 1 to 11). fitTolerance Tolerance to which the spline should approximate fitPoints. startTangent Input start tangent for spline. endTangent Input end tangent for spline. Description spline.setFitData(fitPoints, isPeriodic, AutoCAD.KnotParam.kUniform, 4, 0.2); Resets a spline that attempts to fit a curve to the array of points within the tolerance fitTolerance. A fitTolerance of 0 causes the curve to be interpolated precisely through all the points in the points array. The curve degree may be in the range 1 to 11. The periodic specifies whether to create a periodic spline fitting the array of points or not. The knotParam specifies the way that the knots are created. The different knot sequences have an impact on the curve shape. AutoCAD provides three options : kChord, kSqrtChord and kUniform. kUniform is the default value. spline.setFitData(fitPoints, startTangent, endTangent, AutoCAD.knotParam.kUniform, 3, 0); Replaces any existing spline data (fit or NURBS) with the fit data fitPoints, startTangent, endTangent, knot parameterization, fitTolerance. fitPoints must contain 2 or more points. The magnitude of startTangent and endTangent affects the shape of the curve. degree has no effect; a spline with degree=3 is always constructed when interpolating a series of fit points. If fitTolerance is 0, then the spline passes through all the fit points; otherwise the spline passes within fitTolerance of each fit point. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .setFitPointAt() setFitPointAt( int index , Vec3 point ) Parameters index Input index (0 based) of the fit point to replace. point Input new fit point. Description Sets point to be the fit point at the index position in the fit points list (replacing the point value previously at index) and then refits the spline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .setFitTangents() setFitTangents( Vec3 startTangent , Vec3 endTangent ) Parameters startTangent New start tangent vector. endTangent New end tangent vector. Description Sets the start end tangents of spline to be startTangent and endTangent respectively and refits the spline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .setNurbsData() setNurbsData( int degree , int rational , int closed , int periodic , Array controlPoints , Array knots , Array weights , double controlPointTolerance = 0.0 , double knotTolerance = 0.0 ) Parameters degree Input degree of spline (in the range 1 to 25). rational Whether or not the spline is to be rational. closed Whether or not the spline is to be closed. periodic Whether or not the spline is to be periodic. controlPoints Input array of control points. knots Input array of knot values. weights Input array of weights for control points. controlPointTolerance Input control points tolerance (in drawing units). knotTolerance Input knot tolerance (in drawing units). Description This function replaces any existing spline data with the data passed in. periodic should only be set to 1 if the spline is closed. A periodic spline is a spline with period T such that the point at parameter value t + T is the same as the point at parameter value t for any value of t. The weights array is only used when rational is 1. If used, it must have the same number of entries as the controlPoints array. All weight values must be greater than 0.0. If periodic is 0, then the length of the knots array must be greater than the length of the controlPoints array by degree + 1. If periodic is 1, then the length of the knots array must be greater than the controlPoints array by 1. The first and last control points must NOT be identical. The knotTolerance value is used to determine which knot values are to be treated as the same. If the difference between two knot values is less than knotTolerance, then the two values are treated as the same (and the first of the two values will be used). The controlPointTolerance value is used to determine if two control points are to be treated as the same point. If the distance between two control points is less than controlPointTolerance, then those two points are treated as the same point. If the first and last control points are within controlPointTolerance, the spline is closed regardless of the closed value. When creating periodic spline, we accept two format of data: The length of knot vector must be greater than length of the control array by 1. The first and the last control points must NOT be identical. The knot vector and control array must have same length, and the first and the last control points must be identical. The first format is preferred and will be returned when calling getNurbsData(), even if you use set data using the second format. The knot vector should contains distinct knot value. For example, if we want to create a periodic spline with four control points, the knot vector could be (0, 1, 2, 3, 4). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .setWeightAt() setWeightAt( int index , double weight ) Parameters index Input index (0 based) of the control point at which to change the weight. weight Input new weight value. Description Changes the weight of the point at the index location in the control points array to weight. If the spline is not a rational spline, then it is converted to a rational spline. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Spline .create() static AutoCAD.Spline create( ) Returns AutoCAD.Spline A new AutoCAD.Spline object. Description Creates a new AutoCAD.Spline object. var spline = AutoCAD.Spline.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Text.html",
        "title": "FlexScript Class - AutoCAD.Text",
        "content": "Inherits from AutoCAD.Entity Description A class that encapsulates text in a DWG file. This class is a FlexScript wrapper for the AcDbText class. AutoCAD.Database db = AutoCAD.Database(\"C:\\\\Path\\\\to\\\\my\\\\file.dwg\"); if (!db) return 0; var iter = db.getBlockTable().getAt(\"*Model_Space\").newIterator(); for (iter.start(); !iter.done(); iter.step()) { var ent = iter.getEntity(); if (ent.is(AutoCAD.Text)) { var text = ent.as(AutoCAD.Text); string textString = text.textString; Vec3 position = text.position; Vec3 alignmentPoint = text.alignmentPoint; double oblique = text.oblique; double rotation = text.rotation; double height = text.height; double widthFactor = text.widthFactor; ... } } Properties alignmentPoint The alignment point of the Text. height The height of the Text. Used as a scale factor for both height and width of the text. oblique The oblique angle (in radians) of the Text. The angle from the text's vertical; that is, the top of the text \"slants\" relative to the bottom, similar to italics . position The insertion point of the Text. rotation The rotation angle of the Text. This is relative to the X axis of the text's own object coordinate system (OCS). textString The text string of the Text to display. widthFactor The width factor of the Text. Applied to the text's width to allow the width to be adjusted independently of the height. Methods create Creates a new AutoCAD.Text object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .alignmentPoint Vec3 alignmentPoint Description The alignment point of the Text. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .height double height Description The height of the Text. Used as a scale factor for both height and width of the text. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .oblique double oblique Description The oblique angle (in radians) of the Text. The angle from the text's vertical; that is, the top of the text \"slants\" relative to the bottom, similar to italics . Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .position Vec3 position Description The insertion point of the Text. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .rotation double rotation Description The rotation angle of the Text. This is relative to the X axis of the text's own object coordinate system (OCS). Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .textString string textString Description The text string of the Text to display. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .widthFactor double widthFactor Description The width factor of the Text. Applied to the text's width to allow the width to be adjusted independently of the height. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Text .create() AutoCAD.Text create( ) Returns AutoCAD.Text A new AutoCAD.Text object. Description Creates a new AutoCAD.Text object. var text = AutoCAD.Text.create();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.TypedValue.html",
        "title": "FlexScript Class - AutoCAD.TypedValue",
        "content": "Description An element of a AutoCAD.TypedValueArray . This class holds data found in a single resbuf element. When converting a resbuf to a TypedValue, FlexSim stores the original restype value in the type property. FlexSim then attempts to convert the original resval value to a Variant . If the value cannot be converted, the following occurs: The value property is set to null. The isOpaque property is set to True (1). The original data is stored internally. In this way, the original data is stored either as a Variant or as an opaque value. This allows you to safely modify an element in a TypedValueArray and write it back to the database. Properties isOpaque True (1) if the data could not be converted to a Variant value, False (0) otherwise. type Returns the type of the element. value Returns the value of the element. For opaque elements, this property returns null. Methods set Sets the type and value of the element. Constructor AutoCAD.TypedValue Creates a new element. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValue .isOpaque readonly int isOpaque Description True (1) if the data could not be converted to a Variant value, False (0) otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValue .type readonly int type Description Returns the type of the element. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValue .value readonly Variant value Description Returns the value of the element. For opaque elements, this property returns null. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValue .set() set( int type , Variant value ) Parameters type The new type of the element. value The new value of the element. Description Sets the type and value of the element. Calling this method overwrites the original data, even if the data was opaque. It is up to the user to specify the correct type and value combination. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValue Constructor AutoCAD.TypedValue( int type , Variant value ) Parameters type The type of the new element. value The value of the new element. Description Creates a new element. It is up to the user to specify the correct type and value combination."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.TypedValueArray.html",
        "title": "FlexScript Class - AutoCAD.TypedValueArray",
        "content": "Description A zero-based array of AutoCAD.TypedValue s. This class holds values stored in an AutoCAD resbuf* chain. Functions that return a resbuf* in the ObjectARX API retun a TypedValueArray in FlexScript. Properties length The number of values in the array. Methods push Append a value to the array. Operators [] Access elements by zero-based index Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValueArray .length readonly int length Description The number of values in the array. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValueArray .push() push( AutoCAD.TypedValue value ) Parameters value The value to append Description Append a value to the array. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.TypedValueArray .operator [] AutoCAD.TypedValue operator []( int ) Parameters The zero-based index of the element. Returns AutoCAD.TypedValue The element at the specified index. Description Access elements by zero-based index"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/AdskInterop/FlexScriptAPI/AutoCAD.Xrecord.html",
        "title": "FlexScript Class - AutoCAD.Xrecord",
        "content": "Inherits from AutoCAD.Object Description A class that encapsulates an Xrecord in a DWG file. This class wraps a subset of the RealDWG AcDbXrecord class functionality. Usually, Xrecord objects are stored by an application in the object's AutoCAD.Object . extensionDictionary . Methods appendRbChain Add data to the Xrecord without reading the existing data. rbChain Read the data associated with the Xrecord setFromRbChain Replace the data associated with the Xrecord. Static Methods create Creates a new Xrecord object. Details Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Xrecord .appendRbChain() appendRbChain( AutoCAD.TypedValueArray values ) Parameters values The values to append. Description Add data to the Xrecord without reading the existing data. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Xrecord .rbChain() AutoCAD.TypedValueArray rbChain( ) Returns AutoCAD.TypedValueArray The values associated with the Xrecord. Description Read the data associated with the Xrecord Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Xrecord .setFromRbChain() setFromRbChain( AutoCAD.TypedValueArray values ) Parameters values The new values to associate with Description Replace the data associated with the Xrecord. If the input array is empty, this function does nothing. To delete the data, replace it with an array containing a single value. Do no remove, this fixes the anchor on doc.flexsim.com AutoCAD.Xrecord .create() static AutoCAD.Xrecord create( ) Returns AutoCAD.Xrecord The newly created Xrecord object. Description Creates a new Xrecord object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/EmulationOverview/EmulationOverview.html",
        "title": "Emulation",
        "content": "Overview and Key Concepts The Emulation tool creates a link between FlexSim and external PLCs or clients/servers that communicate with PLCs. This tool can create multiple connections and define variables for each of those connections. This tool supports multiple protocols, including Modbus, OPC DA, OPC UA, MQTT and manufacturer specific like Allen-Bradley, Siemens, Beckhoff and Mitsubishi. The Emulation tool is accessed from the Toolbox. Licensing Emulation License allow FlexSim user access to all Emulation connections. Modbus RTU/TCP and OPC DA connections are freely available to all FlexSim users. In the same FlexSim model, user can create an unlimited number of connections mixing different protocols. Limitations are only related to model complexity, computer and communication network performance. The Connections Tab The Connections tab has the following properties: - Adds a new connection. - Removes the connection. The following connection types are available: Connection Description Modbus RTU A connection to a modbus slave or master using a serial (RS-232 or RS-485) port. Modbus TCP/IPv4 A connection to a modbus client or server over ethernet using TCP/IPv4. Modbus TCP/IPv6 A connection to a modbus client or server over ethernet using TCP/IPv6. OPC DA A connection to a local or remote OPC server using the Data Access (DA) protocol. OPC UA A connection to a local or remote OPC server using the UA (unified architecture) protocol. Allen-Bradley A connection to an Allen-Bradley PLC that support the CIP/EIP protocol. Siemens S7 A connection to a Siemens SIMATIC S7 PLC, using Snap7 libraries. Siemens PLCSIM Advanced A connection to a local or remote Siemens SIMATIC S7-PLCSIM Advanced V3.0 instance. Beckhoff A connection to PLCs or PLC simulators of the Beckhoff family. Mitsubishi A connection to Mitsubishi MELSEC iQ-R or Q/L series PLCs using the MC (MELSEC Communication) protocol. MQTT A connection to a MQTT broker. MQTT connection can publish and subscribe topics. Each connection's properties will be explained below. Modbus RTU Modbus RTU connections can be real, meaning FlexSim will communicate through a physical serial port on the computer, or they can be virtual, meaning a software program emulates a serial port. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to the Modbus Slave or Master through a serial port (virtual or real). This occurs on model reset for slave connections and when the model starts running for master connections. Serial Port - The serial port to create the connection on. Slave / Master - Specify if the connection is a Slave or Master. Slave connections allow other modbus devices/applications to connect to FlexSim. Baud Rate - The baud rate of the connection. The baud rate defines the number of signaling events across the transmission per time. Parity - Specify if the connection has a parity. This is a method for detecting errors in transmissions. Slave ID - Define the Slave ID of the connection. Multi-Register - Specify the endianness of the connection or the order of byte transmission. Stop Bits - Specify the number of stop bits or bits at the end of each character in the transmission. Data Bits - Specify the number of data bits each character in the transmission can be. Change Interval - The time interval, in model time units, for FlexSim to poll the slave for changes. This is only available for master connections. Modbus TCP/IPv4 and IPv6 The properties for IPv4 and IPv6 are identical. The only change is in which protocol is used in setting up the connection. Modbus TCP connections can be real, meaning FlexSim will communicate through a physical ethernet port on the computer, or they can be virtual, meaning a software program emulates a TCP connection. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to the Modbus Client or Server through an ethernet port. This occurs on model reset for server connections and when the model starts running for client connections. Address - The ip address of the connection. Use localhost to create a connection with a virtual client or server or specify the ip address in the form of 190.123.10.1. Type - Specify if the connection is a Client or Server. Server connections allow other modbus devices/applications to connect to FlexSim. Change Interval - The time interval, in model time units, for FlexSim to poll the server for changes. This is not used for Server connections. Multi-Register - Specify the endianness of the connection or the order of byte transmission. Port - The port of the connection. Slave ID - Define the Slave ID of the connection. When Type is Client the value identify the ID of the remote device, otherwise define the ID of this service. Valid value are in range 1 - 247, 0 is for broacasting, 255 used to restored default value. 248-254 are invalid values. OPC DA OPC DA connections can be real, meaning FlexSim will communicate through a physical ethernet port on the computer, or they can be virtual, meaning a software program emulates a TCP connection. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to an OPC DA server. This occurs when the model starts running. Address - The IP address of the server to connect to. Use 'localhost' to create a connection with a server on this computer or specify the IP address. A server can host more than a OPC DA server that can be listed using the 'Browse' button. Update Rate - The time interval, in model time units, for FlexSim to poll the server for changes. Server - The server to connect to. This is a Prod ID of a Browse - Click the browse button to display a list of possible servers to connect to at the defined address. Asynchronous Write - If checked, writing data to the server will cause FlexSim to wait until the write operation is complete before continuing execution. User Name - Used for server authentication if a user name is required to connect to the OPC server. Password - Used for server authentication if a password is required to connect to the OPC server. OPC UA OPC UA connections can be real, meaning FlexSim will communicate through a physical ethernet port on the computer, or they can be virtual, meaning a software program emulates a TCP connection. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to an OPC server. This occurs when the model starts running. Discovery Server - The IP address of the discovery server. Use localhost to discover servers on this computer, or specify the IP address. Discovery Server use TCP port 4840, by default. To use another port append this number to the IP address, separated by a \":\". Then you can press the Browse button to browse for specific end point URLs to connect to. Enable Debug Output - When checked, FlexSim will output information to the system console as it communicates with the server. End Point URL - The specific URL defining the server and protocol to connect to. You can auto-fill this field using the Browse button. Security Policy - Defines the set of security algorithms and key length to use when communicating with the server. None - No security is applied. Basic128Rsa15 - Uses an Aes 128 symmetric encryption algorithm, a SHA1 key hash, and RSA-PKCS15 asymmetric signature algorithm. Note that this policy is no longer considered secure, since SHA-1 was broken in 2017. Basic256 - Uses an Aes 256 symmetric encryption algorithm, a SHA1 key hash, and RSA-PKCS15 asymmetric signature algorithm. Note that this policy is no longer considered secure, since SHA-1 was broken in 2017. Basic256Sha256 - Uses an Aes 256 symmetric encryption algorithm, a SHA2-256 key hash, and RSA-PKCS15 asymmetric signature algorithm. Message Security Mode - Defines the message security mode. None - No security is applied. Sign - Messages are signed but not encrypted. Sign&Encrypt - Messages are signed and encrypted. User Identity - Define how, or if, the client user will be identified. The following options are available: Anonymous - No authentication will be used. User Name - Specify the user name and password to authenticate with the server. Certificate - Use this option if you have a server generated certificate that has been downloaded to the computer running FlexSim. Check Configuration - Press this button to check that the entered settings correctly connect to the target UA server. Cerificate Path - The file path to the certificate. Private Key - The private key associated with the specified certificate. User Name - The user name to authenticate with the server. Password - The password of the certificate or the user. Poll For Changes - When checked, all Control Variable's values of the connection will be sampled together at the specified interval. This option will disable the standard OPC UA subscription mechanism to read data values. Change Interval - Define the sampling interval when using 'Poll For Changes' option. Group Writing - When checked, all Sensor Variable's values of the connection will be written together at the specified interval. Using this option Sensor Variable values will no send immediately to the OPC UA sensor when changing in FlexSim, but together at next 'Write Interval'. Write Interval - Define the writing interval when using 'Group Writing' option. Read/Write Test - Allow to perform read/write test to estimate performances. It is available only when \"Poll For Changes\" or \"Group Writing\" are selected. When \"Poll For Changes\" is checked press the button to perform a read test. The result will display a GUI with 3 values: minimum / avg / maximum: Otherwise if \"Group Writing\" is selected press the button to perform a write test. The result will display a GUI with 3 values: minimum / avg / maximum: A Control o Sensor variable required for read/write test Add Control Variable to the connection to perform the read test or a Sensor Variable to perform the write test. Trace Data Issues - When checked further information when communicate with the OPC UA server will be displayed in the output/system console. Allen-Bradley Allen-Bradley connections can be real, meaning FlexSim will communicate through a physical ethernet port on the computer, or they can be virtual, meaning a software program emulates a TCP connection. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to an Allen-Bradley PLC. This occurs when the model starts running. Address - The ip address of the connection. Use localhost to create a connection with an emulated PLC on this computer or specify the ip address in the form of 190.123.10.1. Change Interval - The time interval, in model time units, for FlexSim to poll the PLC for changes. PLC Type - The type, or family, of PLC this connection will be connected to. The correct PLC type needs to be specified in order for the connection to work properly. Messaging - This option is only available for certain PLC Types. When available, there are two options, Connected and Unconnected. Connected messaging causes FlexSim and the PLC to create an explicit connection where multiple messages can be communicated over a period of time. Unconnected messages are sent from FlexSim to the PLC as single requests. Time Out - The time interval, in milliseconds, that FlexSim will use when reading or writing values to the PLC. A time out failure will Asynchronous Write - If checked, writing data to the PLC will cause FlexSim to wait until the write operation is complete before continuing execution. Enable Debug Output - When checked, FlexSim will output information to the system console as it communicates with the PLC. Siemens S7 S7 connection sets FlexSim communicate with Siemens SIMATIC-S7 PLCs. It's based on popular Snap7 Libraries and it's compatible with CPU families 300, 400, WinAC, 1200, 1500, CP343 and CP443 Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to an S7 PLC. This occurs when the model starts running. Address - The ip address of the PLC to connect to. Rank / Slot - Rank and slot of the PLC: this fields must be filled according with the required PLC. PLC Family Rank Slot Notes S7 300 CPU 0 2 Always S7 400 CPU Not Fixed Follow the hardware configuration WinAC CPU Not Fixed. Follow the hardware configuration S7 1200 CPU 0 0 Slot can be 0 or 1 S7 1500 CPU 0 0 Slot can be 0 or 1 CP 343 0 0 Or Follow the hardware configuration CP 443 Not Fixed Follow the hardware configuration WinAC IE 0 0 Or Follow the hardware configuration Test Connection - Press button to check the connection to the requested PLC using the specified address, slot and rank. Sampling interval - The sampling interval (in ms) to use to read data from PLC. Use global writing thread - Forces FlexSim to write values to PLC using a single thread that caches writing requests and sends all at once to optimize connection times. Writing interval - If Use global writing thread is selected, this is the interval time (in ms) of the writing thread Import PLC Tags - Press button to import PCL Tags from a TIA Portal Excel output into a connection table. Open Tags table - Press button to open the table containing PCL Tags imported from TIA Portal. Synchronize vars - Press button to create/update controls and sensors according with import table. Synchronize table - Press button to update import table according with connection controls and sensors. Siemens PLCSIM Advanced Siemens SIMATIC S7-PLCSIM Advanced v3.0 installation is required To work with this connection type valid(s) Siemens SIMATIC S7-PLCSIM Advanced v3.0 must be installed locally and/or remotely PLCSIM Advanced connections can be related to local or remote sessions of Siemens SIMATIC S7-PLCSIM Advanced v3.0: connections don't depend from underlying simulated PLC. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to a PLCSIM Advanced instance. This occurs when the model starts running. Use Virtual Ethernet Adapter - when checked, it makes FlexSim connect to PLCSIM Advanced via TCP/IP. This way is suitable for both local or remote connections. If it's not checked FlexSim communicates via Softbus, only suitable for local connections. IP address / Port - Connection parameters for TCP/IP connections. Connection - The connection combo lists the instances found on the PLCSIM Advanced: only a running instance can be used during simulation. Press the button close to this control to test the connection and to update the instances list Sampling interval - The sampling interval (in ms) to use to read data from PLC. Use global writing thread - Forces FlexSim to write values to PLC using a single thread that caches writing requests and sends all at once to optimize connection times. Writing interval - If Use global writing thread is selected, this is the interval time (in ms) of the writing thread Import PLC Tags - Press button to import PCL Tags from the selected instance. Open Tags table - Press button to open the table containing PCL Tags imported from TIA Portal. Synchronize vars - Press button to create/update controls and sensors according with import table. Synchronize table - Press button to update import table according with connection controls and sensors. Beckhoff Beckhoff connections don't depend from underlying simulated PLC. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to a PLCSIM Advanced instance. This occurs when the model starts running. Address - the AMS NetID of the system to connect to. Port number - Connection parameters for TCP/IP connections. Test Connection - Press button to check the connection to the requested system using the specified address and port number. Sampling interval - The sampling interval (in ms) to use to read data from PLC. Use global writing thread - Forces FlexSim to write values to PLC using a single thread that caches writing requests and sends all at once to optimize connection times. Writing interval - If Use global writing thread is selected, this is the interval time (in ms) of the writing thread Import PLC Tags - Press button to import PCL Tags from the selected instance. Open Tags table - Press button to open the table containing PCL Tags imported from TIA Portal. Synchronize vars - Press button to create/update controls and sensors according with import table. Synchronize table - Press button to update import table according with connection controls and sensors. Mitsubishi Mitsubishi connection lets FlexSim communicate with physical MELSEC iQ-R or Q/L series PLCs. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to a PLCSIM Advanced instance. This occurs when the model starts running. Address - The IP address of the PLC. Port number - TCP port, usually 4095. PLC Type - The type, or family, of PLC this connection will be connected to. Supported families are: PLC Family Description iQ-R series All PLC of the iQ-R series with a built-in Ethernet interface. Q series - built-in Ethernet All PLC of the Q series with a built-in Ethernet interface. Q series - external Ethernet All PLC of the Q series without Ethernet interface but with Ethernet module installed on the same base unit. L series - built-in Ethernet All PLC of the L series with a built-in Ethernet interface. L series - external Ethernet All PLC of the L series without Ethernet interface but with Ethernet module installed on the same base unit. Test Connection - Press button to check the connection to the requested system using the specified address and port number. Use global writing thread - Forces FlexSim to write values to PLC using a single thread that caches writing requests and sends all at once to optimize connection times. Writing interval - If Use global writing thread is selected, this is the interval time (in ms) of the writing thread Import PLC Tags - Press button to import PCL Tags from the selected instance. Open Tags table - Press button to open the table containing PCL Tags imported from TIA Portal. Synchronize vars - Press button to create/update controls and sensors according with import table. Synchronize table - Press button to update import table according with connection controls and sensors. MQTT MQTT connection lets FlexSim to communicate with MQTT brokers as publisher/subscriver client. Name - The name of the connection. Used for identifying the connection in FlexSim. Active - If checked, a connection will be created to connect FlexSim to a PLCSIM Advanced instance. This occurs when the model starts running. Address - The IP address of the MQTT broker. Port number - The TCP port. The default unencrypted MQTT port is 1883. The encrypted port is 8883. Test Connection - Press button to check the connection to the requested system using the specified address and port number. ID - The ID of the client. If left blank, a random ID will be used. QoS - Quality of Service. Available values are 0,1,2: QoS Publisher Subscriber 0: at most once Will send a message only once. Might receive or might not receive the message. 1: at least once Will send a message at least once as long as an acknowledgement is received or the command to end the transmission is received. It is likely to receive the message at least once (it is possible that the message can be received more than once). 2: exactly once Will only send a message once. Will only receive the message once. Username - The username for this connection. Only required if the broker requires a username/password. Password - The password for this connection. Only required if the broker requires a username/password. Version - Protocol version to be used. SSL - Specify the SSL options for this connection: Method Description None This connection won't use SSL. PSK Use pre-Shared Key (PSK) authentication method. This method requires you to provide a PSK key and a identity string. See below for detail. CA/Cert Use Transport Layer Security (TLS) and Secure Sockets Layer (SSL) provide a secure communication channel. This method requires to provide: PEM encoded trusted CA certificate file. PEM encoded certificate file for this client. PEM encoded private key for this client. If the key file is encrypted, the passphrase for the key. See below for detail. PSK Identity - The identity of this client. May be used as the username depending on the server settings. PSK - The pre-shared-key string in hex format with no leading “0x”. CA File - Path to a file containing the PEM encoded trusted CA certificate file. Certificate - Path to a file containing the PEM encoded certificate file for this client. Can be left empty: in this case no client certificate will be used. Private Key - path to a file containing the PEM encoded private key for this client. This parameter is not required when the 'Certificate' field is empty. Passkey - The decryption key for the Private Key. Only required if the Private Key is encrypted. The Variables Tab The Variables tab has the following properties: Filters There are three ways of filtering the Variables List: Connections - Only display connections of this type. Variables - This can be either local variables, which are variables created using the Emulation tool window, or it can display process flow variables that are dynamically created. Variable Types - Only display variables of this type. Icon Description Adds a variable. Duplicates the selected variable. Removes the selected variable. Moves the selected variable up in the list. Moves the selected variable down in the list. Variables List Displays a list of variables. There are three types of variables that can be added, Sensors (PLC Inputs), Controls (PLC Outputs) and Data. Sensors (PLC Inputs) Sensors are used to write data to the PLC, server or data variable. If you read from a sensor, the value returned will be the local value stored in FlexSim. If the sensor's connection is active, then changing its value will cause that value to be written to the PLC or server. If the connection is inactive, the value will only be changed locally. Controls (PLC Outputs) Controls are used to read data from the PLC, server or data variable. A control can only be changed if the control's connection is inactive. This allows your internal ladder logic to act as the PLC and make changes to controls which can start/stop motors, etc. If you attempt to change a control's value when its connection is active, an exception will be thrown. When you read from a control, the returned value depends on how the control is setup. If the control is set to Subscribe to Changes or Poll for External Changes (depending on the connection type), the server will notify FlexSim of the changed value (subscribing) or FlexSim will ask for changes using events (polling). If you later try and read the value from these controls, the returned value will be the cached value from the last time FlexSim read the value. If Subscribe to Changes or Poll for External Changes is not checked, reading a control's value will reach out to the PLC or server and read the value synchronously (FlexSim will wait until it receives the value back before the simulation will continue) or asynchronously. Data Some connection types, like the Allen-Bradley Connection, have an additional data variable type that pulls data from the server/PLC and then links to sensor and control type variables. These variables are not associated with an object in the model. The properties of these variables are described below. Modbus Register Properties for Modbus Register variables are very similar between the Sensor and Control. These properties are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Register Type - The type of register. This can be Coil, Discrete Input, Holding Register, Input Register. For holding and Input register, the data type drop down button defines what data type the register is. Register # - Define the register's address (0 - 9999). Initial Value - The initial value of the register. This is only available for Server or Slave type connections that store their own data. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and server if the connection is active). Poll for External Changes - Polls the slave or server for changes to the control's value. This is only available for master and client type connections. Actions - When polling for changes, a FlexSim event will be created based upon the connection's Change Interval . When the event fires it will read values from the server. If the control's value has changed, the control's actions will be evaluated. Each action is evaluated from the top down until the new value matches the Value field or it hits a Default . The Action will then be fired and no further actions will be tested. Click on the to add a new action. Value - The value to match. Action - Actions to take when the new value matches the Value . OPC DA Tag Properties for OPC Tag variables are very similar between the Sensor and Control. These properties are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Tag ID - The path of the tag on the server. Click on the Browse button to display a list of the server's available tags. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and server if the connection is active). Subscribe to Changes - Subscribes to changes on the server. FlexSim will be notified when the value changes. % Deadband - When subscribing to analog changes, the % deadband can filter out small changes to the control's value (noise). Actions - When subscribing to changes, a change notification will be sent to FlexSim when the control's value changes. Actions allow you to define what happens with that notification based upon the new value. Each action is evaluated from the top down until the new value matches the Value field or it hits a Default . The Action will then be fired and no further actions will be tested. Click on the to add a new action. Value - The value to match. Action - Actions to take when the new value matches the Value . OPC UA Variable Properties for OPC UA Variables are very similar between the Sensor and Control. These properties are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Display Name - The path of the variable on the server. Click on the Browse button to display and select from a list of the server's available tags (see below for detail about nodes browsing and selection). Node ID - Displays the UA id string of the variable. Whole Array - Available when selected variable is an array. Check to read/write whole array. Uncheck to read/write a single array element. Index - When Whole Array is unchecked define the array index to read/write. Write of a single index element may be unsupported by OPC UA Server Writing of a single array element is defined by the OPC UA standard as an optional functionality. OPC UA servers frequently doesn't support this. Check if this functionality is available in your OPC UA Server Description - Displays the UA description of the variable. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and server if the connection is active). Subscribe to Changes - Subscribes to changes on the server. FlexSim will be notified when the value changes. Sampling Interval [ms] - Defines how often the variable will be sampled from the serve to detect changes to the variable. Actions - When subscribing to changes, a change notification will be sent to FlexSim when the control's value changes. Actions allow you to define what happens with that notification based upon the new value. Each action is evaluated from the top down until the new value matches the Value field or it hits a Default . The Action will then be fired and no further actions will be tested. Click on the to add a new action. Value - The value to match. Action - Actions to take when the new value matches the Value . The Browse button allow to browse the node trees of the OPC UA server of the associated connection. The root is always called 'Objects'. Under they are the nodes tree structure of the OPC UA server. The 'Server' node is always present and contains nodes about server configuration and properties. The subsequent nodes are the user defines nodes. To select a node simply select the item an press \"Select Tag\" button. Only nodes of class variable can be selected. If a variable node is an array the suffix \"[Array]\" is present and the list of available elements are shown. User can select the node of the array to read/write the whole array or a sub-node to read/write a single element. If the node of the array is selected the Whole Array checkbox will be checked, otherwise will be not checked and the Index field will contain the selected index. Allen-Bradley Tag Allen-Bradley tags communicate directly with the PLC to read and write data. Allen-Bradley controls and sensors are then linked to a tag where they will get and set values of the tag. This allows you to pull in large amounts of data from the PLC in a single network request rather than one request per variable. A tag can point to a single element or multiple elements. When linked to multiple elements, FlexSim will treat the tag data as an array. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. CPU Path - For PLCs that require additional routing, this is the path to the CPU that the tag will communicate with. For example, 1, 0 . Tag Name - The name of the tag on the PLC. This must be the full name of the tag. If accessing a single element from an array, specify the element using TestBigTag[10,42] . Click on the Browse button to display a list of the PLC's available tags. Element Type - Defines the data type of each element in the tag. Element Size - The data size of each element in bytes. Element Count - The number of elements for the tag. Allen-Bradley Variable Properties for Allen-Bradley Variables are very similar between the Sensor and Control. These properties are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Allen-Bradley Tag - The Allen-Bradley tag this variable is associated with. Offset - The first element (0 based) in the Allen-Bradley Tag to start reading from. For example, if the tag's value is [3, 5, 6, 9] and offset is set to 2, the control value will start at 6 . Element Count - For controls only. This is the number of elements to read from the Allen-Bradley Tag from the Offset . For element counts great than 1, the value will be an array. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Asynchronous Write - For sensors only. this option is only available if the connection is not set to use Asynchronous Write . If unchecked, FlexSim will wait until the write operation is complete before continuing execution. Otherwise FlexSim will continue running and not wait for the write operation to finish. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and PLC if the connection is active). Check for Changes - If checked, the linked Allen-Bradley Tag will be set to poll the PLC for changes to the tag. If the control variable's data has been changed, the tag will cause the variable's value to be updated. Actions - When checking for changes, a FlexSim event will be created based upon the connection's Change Interval . When the event fires it will read values from the PLC. If the control's value has changed, the control's actions will be evaluated. Each action is evaluated from the top down until the new value matches the Value field or it hits a Default . The Action will then be fired and no further actions will be tested. Click on the to add a new action. Value - The value to match. Action - Actions to take when the new value matches the Value . Siemens S7 and Siemens PLCSIM Advanced Control Properties for both S7 and PLCSIM Advanced controls are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Data Type - The Siemens data type the control is associated to: pls note that non all data types are present since not all data types are managed by FlexSim. Bit # - Bit number: the bit number in the byte for Boolean data type controls, as reported by TIA Portal. Address - The address of the tag as reported by TIA Portal. Use custom sampling interval - When checked, it make FlexSim use a custm sampling thread for this control. Otherwise the connection's sampling thread is used. Sampling interval - The sampling interval (in ms) to use where a custom sampling thread is used. Associated Object - Links this variable with an object in the model. The associated object defines the current object in triggers invoked ad sampled value change. Actions - Press button to select the actions to perform when a sampled value changes. Siemens S7 and Siemens PLCSIM Advanced Sensor Properties for both S7 and PLCSIM Advanced sensors are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Data Type - The Siemens data type the control is associated to: pls note that non all data types are present since not all data types are managed by FlexSim. Bit # - Bit number: the bit number in the byte for Boolean data type controls, as reported by TIA Portal. Address - The address of the tag as reported by TIA Portal. Initial value - The initial value to set in the PLC at reset. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and server if the connection is active) Beckhoff Control Properties for Beckhoff controls are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Data Type - The Beckhoff data type the control is associated to: pls note that non all data types are present since not all data types are managed by FlexSim. Index Group - Index group of the variable you want to associate to the control. Address - The address of variable you want to associate to the control. Use custom sampling interval - When checked, it make FlexSim use a custm sampling thread for this control. Otherwise the connection's sampling thread is used. Sampling interval - The sampling interval (in ms) to use where a custom sampling thread is used. Associated Object - Links this variable with an object in the model. The associated object defines the current object in triggers invoked ad sampled value change. Actions - Press button to select the actions to perform when a sampled value changes. Beckhoff Sensor Properties for Beckhoff sensors are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Data Type - The Beckhoff data type the control is associated to: pls note that non all data types are present since not all data types are managed by FlexSim. Index Group - Index group of the variable you want to associate to the control. Address - The address of variable you want to associate to the control. Initial value - The initial value to set in the PLC at reset. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and server if the connection is active). Mitsubishi Control Properties for Mitsubishi controls are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Data Type - The MC data type the control is associated to. Currently are supported Bit, Word [unsigned], Double Word [unsigned]. Address - The address of variable you want to associate to the control. In a MELSEC system the address is string composed by a device name followed by a device number (an offset). FlexSim currently support following device names: Device Name Symbol Type Special Relay SM Bit Special Register SD Word Input X Bit Output Y Bit Latch Relay L Bit Internal Relay M Bit Data Register D Word Use custom sampling interval - When checked, it make FlexSim use a custom sampling thread for this control. Otherwise the connection's sampling thread is used. Sampling interval - The sampling interval (in ms) to use where a custom sampling thread is used. Associated Object - Links this variable with an object in the model. The associated object defines the current object in triggers invoked ad sampled value change. Actions - Press button to select the actions to perform when a sampled value changes. Mitsubishi Sensor Properties for Mitsubishi sensors are described below. Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Data Type - he MC data type the control is associated to. Currently are supported Bit, Word [unsigned], Double Word [unsigned].. Index Group - Index group of the variable you want to associate to the control. Address - The address of variable you want to associate to the control. Initial value - The initial value to set in the PLC at reset. Associated Object - Links this variable with an object in the model. The associated object defines which Write Events are available for sensors. In the pick options for Write Events and Actions , current is the associated object. Write Events - If the sensor has an associated object, events on that object can be listened to. Click on the to add a new event. Event - The event to listen to. Write Value - The value to write to the sensor (and server if the connection is active). MQTT Control (subscriber) Properties for Mitsubishi controls are described below. The MQTT Control is as a MQTT subscriber . Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Topic - And UTF-8 string that define the topic to subscribe. MQTT Sensor (publisher) Properties for MQTT Sensors are described below. The MQTT Sensor is as a MQTT publisher . Alias - The name of the variable. Used for identifying the variable in FlexSim. Connection - The connection this variable is associated with. Topic - And UTF-8 string that define the topic to publish."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/WhatsNew/WhatsNew.html",
        "title": "Release Notes and History",
        "content": "The following is a list of features and fixes that have been included in the latest Emulation releases. Emulation 25.0.1 (February 25, 2025) Updated the Emulation installer to allow installation alongside a previous version. Emulation 25.0.0 (December 19, 2024) Improved performance and compatibility on Allen-Bradley connection; tag browsing is temporary unavailable. Mitsubishi MC connection now supports PLC Q and L Series with built-in Ethernet interface. Backwards Compatibility Note: Now MC connection should have explicitly defined the PLC type and the data type. Please refer to the Mitsubishi MC Protocol configuration page and Mitsubishi MC Control variable configuration page. Emulation 24.2.0 Added capability to select MQTT Protocol version. Emulation 24.1.0 Added capability to OPC UA Protocol to handle arrays. Can read a whole array or single element and can write a whole array or single element, if supported by the server. Added Slave ID support for Modbus TCP/IPv4 and TCP/IPv6 connections. Emulation 24.0.0 (December 6, 2023) Added support for Mitsubishi PLC using MC protocol. Added support for connecting to an MQTT Broker . Emulation 23.0.0 (December 5, 2022) Added support for additional protocols: Beckhoff, S7, and PLCSIM Advanced. Improved OPC UA connections with support for polling control variables and group writing of sensor variables. Using Emulation connections now requires an Emulation license. Modbus and OPC DA connections will work without an additional license. Fixed Modbus bugs and improved its error handling. Emulation 22.0.5 (July 8, 2022) Fixed small bug with Allen-Bradley protocol. Emulation 21.0.4 (April 2, 2021) Fixed a threading bug in OPC UA controls. Emulation 21.0.3 (March 3, 2021) Fixed a threading bug in OPC DA controls. Emulation 20.2.0 (August 11, 2020) Added Allen-Bradley connections. Emulation 20.0.7 (June 17, 2020) Fixed a bug with reading uint_16 registers as a server. Emulation 20.0.6 (May 8, 2020) Fixed issues with the Emulation Modbus protocol. When FlexSim is set as a server, clients were unable to connect to, write to or poll FlexSim consistently. Updated Modbus variable's register # field to display the actual stored register number rather than a 1-based number to accurately reflect which registers are being used. Emulation 20.0.5 (April 17, 2020) Fixed script that generates self-signed certificates for OPC UA not working for directories with spaces in the name. Emulation 20.0.4 (April 10, 2020) Enabled generation of self-signed certificates for OPC UA. Emulation 20.0.0 (December 6, 2019) Added support for OPC UA connections. Emulation 19.0.7 (November 13, 2019) Fixed modbus not reconnecting properly after a reset. Emulation 18.2.3 (December 27, 2018) Added pick options to the value field of control actions. Emulation 18.2.1 (September 6, 2018) Fixed an exception on reset with binding statistics of internal emulation variables. Emulation 18.2.0 (August 8, 2018) Fixed Modbus polling for changes. Fixed the Modbus panels in the Variable shared asset so they show the associated object now. Emulation 18.1.0 (April 9, 2018) Updated the Emulation module and added it to the toolbox."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/UsingEmulation/KeyConceptsEmulation/KeyConceptsEmulation.html",
        "title": "Key Concepts About Emulation",
        "content": "When to Use Emulation Emulation is a term that refers to the ability to create simulated programmable logic controller (PLC) logic. If you are simulating a system that will eventually use PLCs, you can use emulation to develop and test the PLC logic within FlexSim without needing to create the ladder logic in other software. Not every simulation project will necessarily benefit from using emulation. The following are the likely scenarios in which you might use FlexSim's emulation tool: Designing PLC logic that will be handed off to a different team member who will program the actual ladder logic. As the simulation expert, your expertise might be in designing efficient manufacturing systems, not necessarily in programming PLCs. Using the emulation tool, you can design the ideal logic that the PLCs in your system should use. Then, you can use the emulation tool to communicate how that logic should work to the employee who will program the actual PLC for the real-world system. Testing the accuracy of the PLC logic after it has been programmed. After the ladder logic of the PLC has been implemented, you can connect FlexSim to the actual system and determine if the PLC logic has been programmed correctly. As the simulation model runs and gets input from the actual system in real time, you can compare the simulation model with the results from the system to validate that the PLC was programmed correctly. If these scenarios apply to your simulation project, then emulation might be a useful tool for you. Overview of an Emulation Project The process for building an emulation simulation project is shown in the following image: The following sections will explain each phase of the process and link to other relevant topics for more detail. Add Objects to the 3D Model Begin by adding objects to your 3D model the way you would with any other simulation project. Create PLC Logic in Process Flow Where an emulation project differs from a normal simulation project is the way you'll build the model's logic in process flow. If you want to use emulation in your simulation project, you should integrate PLC-centric logic into your model's process flow early in the model-building process. You'll do this by building your logic in such a way that it resembles the inputs and outputs of a PLC controller. Hand Off Simulation Model to PLC Programmer After building the model logic, you should test and validate your simulation model until you feel confident that you've designed an optimal system. At this point, you can then hand off the simulation model to a PLC programmer and explain the model logic to them. Since the process flow will be designed in a PLC-centric way, it should be fairly easy for a PLC programmer to translate the process flow into ladder logic. Validate PLC Logic After the PLC has been programmed, you can then use FlexSim to validate that the PLC logic was programmed correctly. You can connect FlexSim directly to the PLC or to the server that the PLC will use. As FlexSim runs and communicates with the PLC, you can compare the results of the simulation model when it was running its internal logic. By comparing the two systems, you'll be able to confirm that the logic is correct or make subtle adjustments to the simulation model or PLC as needed. Tools for Emulating PLC Logic You can emulate PLC logic using two different methods in FlexSim. You can add variables and build the logic in the Process Flow tool or you can use the Emulation tool in the Toolbox. In some respects, the tool you choose to use will be a matter of personal preference. However, this guide will generally focus on building emulation in the Process Flow tool because it is good for model documentation and communicates logic in a clear way. Be aware that some of the screenshots in this topic will come from the Emulation tool. Key Terms The following are a few terms that are important to understanding the emulation tool in FlexSim: PLC PLC is a common abbreviation for programmable logic controller. PLCs are computers dedicated to interacting with machinery in manufacturing systems. These specialized computers generally act as the brains of an automated manufacturing system, connecting the system's inputs and outputs to control the system's overall behavior. Connections In the context of FlexSim's emulation tool, the term connections refers to connections between FlexSim's emulation tool and a server or PLC. Currently, FlexSim can connect via OPC and Modbus. When you're setting up a connection to a server in FlexSim, you can decide whether to make that connection active or inactive. If the connection is active, FlexSim will read and write data directly from an actual server or PLC. If the connection is inactive, it will instead pull data from the theoretical simulation model you created in FlexSim. Variables In this context, the term variable refers to any inputs and outputs that are received or sent by the PLC. FlexSim has two types of variables: sensors (inputs) and controls (outputs). Sensors (PLC Inputs) Sensors are the inputs to the PLC. Inputs tell the PLC about the manufacturing environment. For example, sensors might be connected to: Position detectors Photo eyes Temperature sensors Limit switches Or any other equipment that monitors the system Sensors provide environmental data from inputs to the PLC and then the PLC will decide what actions to take based on that data. Each sensor can be associated with a series of events . You can specify which events you want that sensor to listen to. For example, if you are listening to a photo eye, you might set up the sensor to listen to the \"On Cover\" and \"On Uncover\" events. The specific events that are available for each sensor depends on what kind of object the sensor is connected to in the simulation model. See Key Concepts About Events for more information. Controls (PLC Outputs) Controls are the PLC's outputs. The controls tell the system how to respond and what to do. For example, controls could issue instructions to: Open a valve on a door or a lock Control a motor that drives a particular process Issue a warning Cause chutes to open and close Tell a motor running a conveyor belt to start, stop, or move to a particular position Based on the inputs (values) it receives, the PLC will issue controls that will tell the system what actions to take. Ladder Logic Ladder logic is a programming language that is used to develop the software for PLCs used in industrial control applications. While you will not use actual ladder logic in FlexSim, you can use process flow activities to communicate how a PLC's ladder logic should be programmed. Active vs. Inactive Connections When you first set up your emulation project, you'll need to create a server connection. You'll connect all the variables (the sensors and controls) to this connection. By default, this server connection will be inactive, which means that the server connection will only be internal to FlexSim. When the simulation model runs, the server will get inputs from the simulation model. You should leave the server connection inactive if you are building a theoretical or future-state model that has not yet been implemented. When you move into the phase of the emulation project where you need to test the PLC logic, you can then make the server connection active. You'll need to connect your computer to the actual server and then set up the credentials in FlexSim to access the server. You'll also need to assign all the emulation variables to their appropriate variables on the server. When you run your simulation model while the server is active, you should ideally only run the model at a speed of 1.00, which means that the model will run in real time. You'll want to keep the simulation model and the actual system running at the same speed so that you can test the PLC logic and compare the actual system with the simulation model. See Validating PLC Logic for more information. Best Practices The following sections outlines a few best practices that you should consider when designing PLC logic in FlexSim: Collaborate with the PLC Programmer Since the end-goal of an emulation project is to hand off the simulation model to a PLC programmer, you should consider working with the PLC programmer to ensure that the way you build the logic in process flow matches the programmer's expectations. For example, you might want to get advice on how to organize the process flow logic in a way that is easy for the programmer to follow and understand. Document Your Logic Since the goal of emulation is to facilitate communication between the simulation expert and the PLC programmer, it's crucial that you add documentation to your process flow. At the very least, make sure you use clear activity and variable names that indicate the purpose of those elements in the process flow. Consider adding explanatory text to your process flow as well."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/UsingEmulation/DesigningPLCLogic/DesigningPLCLogic.html",
        "title": "Designing PLC Logic",
        "content": "Overview If you'll recall from the Key Concepts About Emulation topic, the following is the basic process for building an emulation simulation project: In this topic, you'll learn more about the phase in which you create the PLC logic in a process flow: Before reading this topic, consider reading the chapter about Conveyors for more information about working with conveyor objects in FlexSim. You might also want to consider completing the Emulation Tutorial if you'd like hands-on experience with the principles discussed in this topic. Before Starting an Emulation Project Before starting an emulation project, it will be good to know which kind of protocol your future system will use. Although you can change these settings later, it helps to know which kind of protocol your system will use before you design the PLC logic in process flow. FlexSim currently supports the following protocols: OPC DA Modbus TCP/IPv4 Modbux TCP/IPv6 Modbus RTU After you know which type of protocol you're using, it might also be helpful to learn about what kinds of logical inputs it can accept, such as boolean values, strings, numbers, etc. Talking to the eventual PLC programmer about these concerns could help. Adding Variables The first step in setting up an emulation project is to add variables to your process flow. Variables are a special type of process flow shared asset that can store different values, reference objects and nodes or take on the functionality of another class. For emulation, Variables can be used as server connections, sensors (PLC inputs) or controls (PLC outputs). See Key Concepts About Emulation - Key Terms for a more comprehensive explanation of the differences between these types of variables. See the Process Flow Variable Reference topic for information on configuring the Process Flow Variable in specific cases. Adding Sensors (PLC Inputs) When adding sensor variables to a process flow, keep in mind that sensors will input values from the 3D model and write those values to the server. When you're setting up a sensor, you need to determine which events in the simulation model will change the value for that sensor on the server. Be aware that the range of possible values will depend on the type of server you are using and the types of sensor inputs that are available. To add a sensor to your process flow: With a process flow open and active, add a Variable (under Shared Assets ) in the process flow. In Quick Properties, click the arrow next to the Variable or Value box to open a menu. Point to Internal Emulation Variable , then point to Sensors (PLC Inputs) , then select the type of server you'll use in this project. You can tie this variable to an object in the 3D model using the Associated Object box. You can either sample an object using the Sampler button or select an object from the menu. Under the Write Events group, click the Add button to open a menu. The menu is context-sensitive and will display the events that are available for that type of object. Select the event you want to assign a value to. In the new event's Value box, type the appropriate value for this event. This value is what will be written to the server. Repeat the previous two steps as needed. Alternatively, you could set up the sensor in the Emulation tool and then link the process flow variable to that sensor in the tool instead. See Using the Emulation Tool for more information. Adding Controls (PLC Outputs) When adding control variables to a process flow, keep in mind that controls will output values to the 3D model. Controls only read values from a server; they never write them. When you're setting up a control, you need to determine which actions the control will take when it receives a specific value from the server. Be aware that the range of possible values will depend on the type of server you are using and the types of control output settings that are available. To add a control to your process flow: With a process flow open and active, add a Variable (under Shared Assets ) in the process flow. In Quick Properties, click the arrow next to the Variable or Value box to open a menu. Point to Internal Emulation Variable , then point to Controls (PLC Outputs) , then select the type of server you'll use in this project. You can tie this variable to an object in the 3D model using the Associated Object box. You can either sample an object using the Sampler button or select an object from the menu. Under the Actions group, click the Add button to add a new action. In the new action's Value box, type the appropriate value for this action. This value will be what is read from the server. Next to the Action box, click the Add button to open a menu of picklist options. Select an appropriate picklist for the action you want the 3D object to take. Then set the properties that are relevant for that picklist option. Make Sure Each Action Has a Unique Value You should not have actions with the same value because it will cause logical errors in the simulation. When the server is trying to find a matching value, it will only take the first matching value it finds. If you have two actions with the same value, only the first action will ever get executed. Be aware that you can use the Default value as an action of last resort. If none of the other values are found, the server will use the default value. Click on the next to the Value box to set the value to Default . Repeat the previous three steps as needed. Alternatively, you could set up controls in the Emulation tool and then link the process flow variable to that sensor in the tool instead. See Using the Emulation Tool for more information. Adding Server Connections When adding a server connection, the important thing to keep in mind is whether the server is inactive or active. See Key Concepts About Emulation - Active vs. Inactive Connections for information about the differences. To set up a server connection: With a process flow open and active, add a Variable shared asset (under Shared Assets ) to the process flow. In Quick Properties, click the arrow next to the Variable or Value box to open a menu. Point to Internal Emulation Connection , then select the type of server you'll use in this project. By default, newly created connections will be inactive. This is indicated by the Active box displaying a 0 . Connect a sensor or control variable to the newly created connection by clicking the Exclamation Point button next to a sensor or control to enter sampling mode. Click the server connection variable you just made to sample it. The variable will now be connected to the server. Repeat the previous steps to connect additional sensor or control variables to the server. Alternatively, you could set up the server connection in the Emulation tool. See Using the Emulation Tool for more information. Creating connections from sensors and controls For a faster way of creating connections, click on the Sampler button next to the Connection box in a sensor or control variable and click on white space in the process flow view. This will give you a menu where you can select the appropriate connection to create. Once create, the sensor or control will automatically be connected to the new connection. Building PLC Logic in a Process Flow In many respects you'll build the PLC logic in a process flow the same way you would build the logic in any process flow. The Emulation Tutorial provides an example of some of the logic you could possibly build in an emulation project. When building you can use some additional activities to read from and write to your sensors and controls: Set Variable - Use this activity to set the value of an emulation variable when a token reaches this activity in a process flow. You can connect this activity to one of the emulation variables you want to change. You'll indicate the value that the emulation variable should be set to. Get Variable - This works similar to a Set Variable activity, but you can use this activity to get the value of an emulation variable when a token reaches this activity in a process flow. Using the Emulation Tool You can alternatively use the Emulation tool to set up your connections, sensors, and controls. Opening the Emulation Tool You can open the Emulation tool from the Toolbox. The Emulation tool can be found under the Connectivity sub-menu. Adding Connections Use the Connections tab to add a connection. The options that are available for connections are the same ones available for a connection variable in the process flow. Adding Variables Then use the Variables tab to add sensors and controls. Again, the options that are available will mirror the same properties that you'll find in the process flow variables. Linking Process Flow Variables to the Emulation Tool To link a process flow variable to the emulation tool: Make sure the connections and variables have already been set up in the Emulation tool. With a process flow open and active, add a Variable shared asset (under Shared Assets ) to the process flow. In Quick Properties, click the arrow next to the Variable or Value box to open a menu. Point to Emulation Variable , then point to the type of server you set up in the emulation tool, then select the variable you want to link from the Emulation tool. Alternatively, you can use the Sampler button next to the Variable or Value box and click on the emulation tool in the Toolbox or the connection or variable in the emulation tool window. Process Flow Instances in Emulation Projects If desired, you can use the ability of process flows to create instances in an emulation project. Process flow instances might be ideal if you have two or more objects in your 3D model that will use identical logic and might possibly each use identical PLC servers that all have the same logic but with different variables. For example, perhaps you've got a machine that is a labeler or a packaging machine and it will need an entire PLC dedicated to it. However, you might have 50 of these kinds of machines throughout your system that will run identical logic. You could create a fixed resource object for this labeler and emulate the PLC logic for it using a fixed resource process flow. Then, you'd add copies of this fixed resource object to the 3D model. When the model runs, each fixed resource would run its own instance (copy) of the process flow. There are a few things you need to consider when working with process flow instances, which will be explained in the following sections: Global vs. Local Variables When you are using emulation variables in an object process flow, you have the option to set their Type property to either global or local : Global - Setting the variable type to global will mean that all the instances of that process flow will connect to the same server (for connections) or reference the same variable on the server (for sensors and controls). Local - Setting the variable type to local will mean that each instance of that process flow will use its own dedicated server (for connections) or unique variable on the server (for sensors and controls). Creating Unique Connections In this section we'll refer to properties of an OPC DA Connection, but the premise is the same for other protocols. If your connection type is set to Local so that each instance will create a new connection, you'll need to define the address and server for each instance. If all of the servers are running on the same computer, then the Address will remain the same for all connections. In this case, you would make the Server property dynamic. You could possibly use the code current.ServerName to get the value of a label on the object. If the servers are running on different computers, then you'll need to make the Address property dynamic to define a different address for each instance. This could be done in the same way the Server was made dynamic. Creating Unique Sensor and Control Variables In this section we'll refer to properties of an OPC DA Tag, but the premise is the same for other protocols. When you get to the stage in which you are going to validate the PLC logic, you'll need to be able to assign a unique tag ID to each instance of the fixed resource: Set the Tag Instance Specifier - You can use this property on the variable to set define a unique group or name that will be used to define the tag ID. To make this property dynamic and adaptable to each instance, you could possibly use the code current.name to get the name of the object. Then you could name each object based on what group they will use. As another alternative, you can set each object to have the same label such as GroupName and then give each object its own unique value. In the Tag Instance Specifier, you'd then use the code current.GroupName to get the value of that label for each object. Set the Tag ID - After you've set the tag instance specifier, you can then reference it in the Tag ID property. You can use the code %s to dynamically reference the tag instance specifier. Add additional text to define the specific tag ID for the variable. For example, %s.PhotoEyes.A13 or PhotoEyes.%sA13 See Process Flow Instances for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/UsingEmulation/ValidatingPLCLogic/ValidatingPLCLogic.html",
        "title": "Validating PLC Logic",
        "content": "Overview of Validating PLC Logic Before reading this topic, you might want to ensure you are familiar with the concepts in Key Concepts About Emulation and Validating PLC Logic . In this topic, you'll learn more about the phase in which you validate PLC logic by connecting your model to a PLC or server. We'll refer to an OPC DA Connection, but the setup is similar for other connection types. Once the PLCs have been programmed, you could possibly use FlexSim to then validate whether the PLCs had been programmed correctly before they are actually implemented in a manufacturing system. To validate this logic, you'd need to connect FlexSim to a PLC server. After inputting all of the server's permissions, you'd also have to assign all your emulation variables to their appropriate tag IDs on the server. You'd then make the connection shared asset active in FlexSim so that it will directly read or write values on the actual server. This will also cause your internal ladder logic to stop working. Sensors will no longer trigger their on Change event, meaning that any event listening activities will no longer be notified when a sensor variable is changed. Instead, this logic will be handled by the PLC. At this point you could run the simulation model and test that the PLCs are operating the way they should operate in the actual system. In theory, you would have created a simulation of your future business system in FlexSim. So, the PLC will directly control the elements in the simulation model. You can then observe how the actual PLC has been programmed and compare it to the way the simulation model ran before the PLC was directly connected to the model. Connecting the Server To connect a PLC server to a FlexSim simulation model: Connect the server to the computer on which you'll run the simulation model. You can either run the model on the same computer the server is on or you could connect to it remotely. If connecting remotely, you'll need to ensure that the computer running FlexSim can connect with the computer running the server. You may need to talk to your network administrator to get that working. Find your connection variable (either in a process flow or in the Emulation tool) and set it to active. You can set it to active by changing the Active property to 1 . In the Address box, type the server's IP Address if needed. You can use localhost if you're running it locally on the same machine as the simulation model. In the Server box, browse to find the server you'll connect to at the address you specified. If required, you can enter in the necessary credentials in the User Name and Password boxes. Set the Update Rate for communicating with the server. If needed, you can check the Asynchronous update box. This will cause FlexSim to send write events to the server and then continue running the model without waiting for a response from the server. Reading Data Reading data from the server is also done synchronously. Adding Tag IDs You read and write data to an OPC server by defining the tag ID of the data. You can think of a tag ID as a path to where the data is stored. You need to assign tag IDs to all the variables (sensors and controls) that you've added to your simulation model. Each sensor and control has been assigned a tag ID in the PLC server so you need to make sure they are linked together with the same tag ID. To update the tag ID: Open the variable's Quick Properties. Enter the tag ID in the Tag ID box. If you are connected to an OPC server, you can click the Browse button to open the server and browse to the variable's tag ID on the server. If the variable is a control, you should consider checking the Subscribe to Changes box. This will notify you when the value for the control changes on the OPC server. If needed, you can use the % Deadband if the server uses analog data such as voltage drops or increases to track changes. You can indicate a percentage deadband to filter out small changes and only receive notifications from the server when the voltage change is significant. Running the Simulation Model One thing you need to pay attention to when running the simulation model while connected to an active server is the speed at which you are running the model. While you can technically set the run speed to a greater value, you should ideally run it at the 1.00 speed, which means it will run in real time. Be aware that FlexSim will run in high precision time when the server is active. High precision run time means it will keep the run speed of FlexSim in sync with the run speed of the computer. Stepping will be unavailable while you are connected to an active server. During the simulation run, it might be good to open the server and watch the values change. You'll be able to better ensure that they match what happens in the simulation model. The ladder logic used with Sensors should no longer be used when the connection is active. You should ensure that there are no tokens moving through this ladder logic during the simulation run."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/UsingEmulation/ProcessFlowVariableReference/ProcessFlowVariableReference.html",
        "title": "Process Flow Variable Reference",
        "content": "Overview Emulation adds features to the Process Flow Variable . In addition to its default uses, the value of a variable can also point at these Emulation objects: Emulation Connection - You can reference an Emulation Connection or create an Internal Emulation Connection. Internal Emulation Connections that have their Type set to Local will create a variable for each instance of the process flow. For more information on Emulation Connections see the Emulation topic. Emulation Variable - You can reference an Emulation Variable or create an Internal Emulation Variable. Internal Emulation Variables that have their Type set to Local will create a variable for each instance of the process flow. For more information on Emulation Variables see the Emulation topic. Properties If you choose to point a Process Flow Variable at an internal Emulation Connection or Variable, the properties of the Process Flow Variable will update to show one of the following options: Internal Emulation Connection If the option Internal Emulation Connection is selected from the drop down of the Variable or Value box, the properties will change to: The properties for the internal connection are the same as in the Emulation tool. For information about these properties, see the Emulation page. Internal Emulation Variable If the option Internal Emulation Variable is selected from the drop down of the Variable or Value e box, the properties will change to: Allen-Bradley Tag The properties for the internal variable are mostly the same as in the Emulation tool. For information about these properties, see the Emulation page. The Allen-Bradley Tag variable has one added property: Tag Instance Specifier - The tag instance specifier is most useful when the variable is set to the Local type. The string defined by this box can be inserted anywhere in the Tag Name box by using %s in the Tag Name string. Allen-Bradley Variable (Sensor and Control) The properties for the internal variable are the same as in the Emulation tool. For information about these properties, see the Emulation page. Modbus Register (Sensor and Control) The properties for the modbus register internal variable are the same as in the Emulation tool. For information about these properties, see the Emulation page. OPC DA Tag (Sensor and Control) The properties for the internal variable are mostly the same as in the Emulation tool. For information about these properties, see the Emulation page. The OPC Tag variable has one added property: Tag Instance Specifier - The tag instance specifier is most useful when the variable is set to the Local type. The string defined by this box can be inserted anywhere in the Tag ID box by using %s in the Tag ID string. OPC UA Variable (Sensor and Control) The properties for the internal variable are mostly the same as in the Emulation tool. For information about these properties, see the Emulation page. The OPC UA variable has one added property: Tag Instance Specifier - The tag instance specifier is most useful when the variable is set to the Local type. The string defined by this box can be inserted anywhere in the Tag ID box by using %s in the Tag ID string. Internal Emulation Variable Connections When creating Internal Emulation Variables, you will define the Connection that the variable will use. The connection can be tied to the Emulation Tool, or it can reference another Variable shared asset that is an Internal Emulation Connection or references an Emulation Connection. This allows you to keep all of your Emulation logic inside of Process Flow, without the need to use the Emulation Tool window."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/modules/Emulation/BasicTutorial/EmulationTutorialOverview/EmulationTutorialOverview.html",
        "title": "Basic Emulation Tutorial",
        "content": "This tutorial will teach you the basics of building an emulation simulation project. Emulation is a term that refers to the ability to create simulated programmable logic controller (PLC) logic. In this tutorial, you'll simulate PLC logic that will control a conveyor. The conveyor's logic will be entirely handled by the emulation shared assets in process flow. The conveyor logic in this model will be fairly simple: you'll start by designing a system that will delay a flow item on a conveyor for 5 seconds after it hits a photo eye: In the second tutorial task, you'll build the PLC logic for two converging conveyors with a restricted area: Tasks Covered This tutorial will cover the following tasks: 1 Build Basic PLC Ladder Logic In this tutorial task, you'll learn how to use process flow variables and the Set Variable activity to emulate PLC ladder logic. You'll use process flow activities and variable shared assets to control the logic of a simple conveyor system. 2 Add Area Restriction PLC Logic In this task, you'll learn how to use the Get Variable activity to get the state of a photo eye variable. You'll design an emulation system in which photo eyes will communicate with each other to restrict the flow of items to a specific area. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Key Concepts About Emulation Designing PLC Logic Validating PLC Logic"
    }
]
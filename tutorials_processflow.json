[
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial1UsingSharedAssets/UsingSharedAssetsOverview/UsingSharedAssetsOverview.html",
        "title": "Tutorial 1 - Using Shared Assets",
        "content": "The Process Flow tool is designed to help you build custom logic for your simulation model. This is the first tutorial in a set of tutorials that will introduce you to some of the full capabilities of the Process Flow tool. In this tutorial, you'll learn more about the Process Flow tool's three shared assets: lists, resources, and zones. Using resources and lists, you'll create tasks for two operators in a 3D model to work on. The main task the operators will work on is transporting flow items from a queue to one of two processors. However, when the operators have traveled more than 100 meters, they will get thirsty and need to take break to go to the drinking fountain. When you're finished with the first two tutorials, your simulation model will look similar to the following image: In the last tutorial, you'll learn how to use zones to get basic statistical information from the simulation model by designing a process flow that will track the total price of all the items that are currently being processed in the simulation model. Tasks Covered This tutorial will cover the following tasks: Task 1.1 Use a List and a Resource In this task, you'll learn how to use resources and lists to build a transportation task sequence in a process flow for two operators. You'll also learn how to link resources and lists to 3D objects in the model. A lot of the model's functionality will come from the careful management of labels, so you'll also learn how to manage and coordinate labels throughout a process flow. Task 1.2 Make a Resource Act Like a List In this task, you'll add process flow logic that will occasionally interrupt the operator's normal transportation task sequences. Every time the operator travels more than 100 meters, they'll stop their normal tasks to get a drink of water. In order to create this logic, you'll build an additional section in the process flow for a water break task sequence and you'll configure the resource so that it has some of the same functionality as a list. Task 1.3 Add a Zone to Collect Data In this task, you'll learn how to use zones by designing a process flow that will track the total price of all the items that are currently being processed in the simulation model. Zones are useful for both statistics gathering and adding constraints to a model. This tutorial will primarily demonstrate the statistical functionality of the zone. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Key Concepts About Shared Assets Key Concepts About Lists Key Concepts About Labels Sub Process Flows"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial1UsingSharedAssets/1-1UseListResource/1-1UseListResource.html",
        "title": "Tutorial Task 1.1 - Use a List and a Resource",
        "content": "Task Overview In this first tutorial task, you'll learn how to build a process flow using shared assets . Process flows have three types of shared assets that have different purposes, as explained in the following table: Shared Asset Explanation Resource Represents a limited supply of some resource that can be acquired and released. It can be used to simulate a supply of goods, services, time, materials, employees, etc. List Allows you to push or pull tokens, flow items, task executers, numbers, strings, etc. to a list. This is a useful asset for syncing multiple tokens within a process flow or as a more dynamic resource. Process flows can use a list that is local to the process flow itself or could be tied to a Global List in the simulation model. Zone Can collect statistical information not available for standard activities. It can also restrict access to a section of the process flow based on certain statistics or other criteria. Consider reading Key Concepts About Shared Assets for a more details explanation of the three shared assets in a process flow and how they differ from other types of process flow activities. In this tutorial task, you'll learn how to use resources and lists to build a transportation task sequence in a process flow for two operators. You'll also learn how to link resources and lists to 3D objects in the model. In this model, the list will track the flow items that need to be transported and the resources will represent the operators that are assigned to complete a transportation task. When you're finished, your process flow will look similar to the following image: And it will control the two operators as they load flow items from a queue and unload them at one of two processors in the 3D model: Using Labels to Connect to the 3D Model In this model, you'll use labels extensively to link tokens in a process flow to objects in the 3D model. Process flows can control the logic of the 3D model using labels that contain a reference to a 3D object in the model. As the token moves through the activities in the process flow, the activity's logic can be applied to the object in the 3D model using this reference. Consider reading Key Concepts About Labels for a deeper understanding of how to work with labels in a process flow. In this model, you'll use labels to: Link tokens to flow items in the 3D model - You'll create a label named pulledItem to link tokens in a process flow to the flow items that need to be transported in the 3D model. You'll also copy the value of this item to a label called FlowItem to tokens in the section of the process flow that handles the transportation task sequence. Assign task sequences to an operator - When you acquire a resource in this process flow, you'll create a label on the token called operator that will link the resource to one of the two operators in the 3D model. After the operator has been assigned to a transportation task, this label will be used to dynamically assign this operator to complete all the tasks in the transportation task sequence. Dynamically set flow item destinations - A label named destination on the flow item will track which processor the flow item should be transported to. The process flow will copy the value of this label to a matching label on a token called itemDestination and use this in the transportation task sequence. Step 1 Build the 3D Model In this step, you'll build a basic 3D model. When you're finished, your 3D model should look similar to the following image: To build this model: Drag the following objects from the Library and place them in the model in this order from left to right: 1 Source 1 Queue 2 Processors 1 Operator 1 Sink 1 Shape (under the Visual group) Move the objects so that they are roughly in the same layout as shown in the image at the beginning of this step. For clarity, rename the objects as follows: Object New Name Source1 Source Queue1 Queue Operator1 Operator Sink1 Sink Shape1 Fountain Displaying the Shape Name To display the shape's name, right-click the shape. Navigate to Edit then select Show Name . Create port connections (A-connects) from: Source to Queue Queue to Processor1 and Processor2 Processor1 and Processor2 to Sink Check to make sure that your model looks similar to the image shown in the beginning of this section. Step 2 Create an Item List In this step, you'll create a global list that will track the items that are ready for transport from the queue to the processors. Since this list will contain items, you'll create an item list. Then, you'll change the queue's settings so that it will push all entering items to this new list. To create the list and update the queue: In the left pane, click the Toolbox tab. In the Toolbox, click the Add button to open a menu. Point to Global List , then select Item List . The list properties window will open automatically. In the name box at the top of the properties window, change the name of the item list to ItemsToTransport . You'll use the default settings for this item list, so click the OK button to save the changes and close the window. Confirm that the ItemsToTransport list shows up in the Toolbox under the Global Lists group. In the 3D model, click the Queue to bring up its properties on the right. Under the Output tab, check the Use Transport checkbox. Click the arrow next to the box beneath the Use Transport checkbox to open a menu. Point to Use List , then select Push to Item List (No Task Sequence) to open some picklist options. Confirm that the List box displays the ItemsToTransport list is the currently selected list. Notice also that when the queue pushes the flow items to the list, it will create three labels on the item, as listed in the Store Data on Item box. What Do These Labels Mean? The only label that matters for this tutorial is the destination label. This label will store a reference to the port that was open when the queue pushed the flow item to the list. You'll use this label in a much later step to tell the operator where the flow item should be transported. Consider saving your simulation model. Step 3 Create a Group and Add a Parameter In this step, you will create a Group and add a Parameter to the model. These tools will help us make our model more robust and scalable when working with our Operators. Let's start by creating a Group for our Operators: In the Toolbox on the right, click the Add button and select the Group option. You should see a Group Properties window now. Change the name of the Group to Operators . Under the Members section, click the Sampler button to enter sampling mode. Select the original Operator we made in the 3D model. Your Group Properties window should now look like this: Why Use a Group? A Group is a Global Tool that allows us to reference multiple objects at once. That means we can reference these Operators anywhere in the model. This can be useful later if we want to start collecting statistics on the members of the group or the group as a whole. It's also useful if we want to pull any member from a group to perform a task. Next, let's create a Parameter that will control how many Operators are in the group: Back in the Toolbox, you should see Model Parameter Tables . Under that, you should see an option titled Parameters - double-click that to open it. There should already be a default parameter. In the name column, change the cell to say NumOperators . Select the cell in the Value column. You'll see a drop down arrow - click it. A popup with several sections will open. We'll be updating these settings. In the Type section, select the dropdown and change it to Integer . In the Reference section, click the Sampler button to enter sampling mode. Find the Operators group in the Toolbox and sample it. A path to the Group should appear in the edit field. In the On Set section, click the Add button and select Delete and Copy Group Members . What Does This Option Do? The On Set section lets you define behavior that will be run every time the value is changed and when you reset the model. You can read more in the Using Model Parameters documentation. The Delete and Copy Group Members option will delete all members of the group except one. Then it will copy that member as many times as defined in the value section. For this tutorial, that means it will create however many Operators we define. After these changes, the popup should look like this: Click off the popup to close it. The last two columns in the Parameter table are there to document the parameter so you can remember what it does - they have no effect on how the model runs. Change the Parameter's Value to be 2. When you're done with all these steps, it should look like this: Now we have a Group of Operators that will fluctuate in size depending on what value we give our NumOperators Parameter. Since it has a value of 2, we should have 2 Operators when we Reset the model. Consider saving your simulation model. Step 4 Add Activities to a Transport Task Sequence In this step, you'll add activities to a general process flow to build a simple loading and unloading task sequence. This process flow will have three sections: The Shared Assets section will contain a List shared asset and a Resource shared asset. The Task Creation section will create transportation tasks for the operators. The Transport Tasks section will contain the basic loading and unloading task sequence. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select Add a General Process Flow . In Properties in the Process Flow Name box, delete the current text and rename the process flow OperatorTasks . In the Library under the Display group, add 3 Container shapes to the new process flow. For clarity, rename the three Process shapes as follows: Shared Assets Task Creation Transport Tasks From the Library, add the following shared assets to the Shared Assets shape: A List (under Shared Assets ) A Resource (under Shared Assets ) For clarity, rename these shared assets as: Shared Asset New Name List List: ItemsToTransport Resource Resources: Operators From the Library, add the following activities to the Task Creation shape: A Schedule Source (under Token Creation ) A Pull from List (under Shared Assets ) A Create Tokens (under Basic ) Create a connector from the Schedule Source to the Pull from List . (Point your mouse over the bottom middle of the activity until your mouse changes to a connector icon. Click and drag the connector until it snaps to the other activity.) Join the Pull from List and Create Tokens activities into a stacked block. Create a connector that loops from the end of the Create Tokens activity back to the Pull from List activity. For clarity, rename these activities as: Activity New Name Source Source: Start Simulation Pull from List Pull from ItemsToTransport List Create Tokens Create Token in Transport Tasks In the Transport Tasks shape, add the following activities to create a stacked block: An Assign Labels (under Basic ) An Acquire Resource (under Shared Assets ) A Create Task Sequence (under Task Sequences ) A Load (under Task Sequences ) An Unload (under Task Sequences ) A Travel > Travel To Object (under Task Sequences ) A Finish Task Sequence (under Task Sequences ) A Release Resource (under Shared Assets ) A Sink (under Basic ) For clarity, rename these activities as: Activity New Name Assign Labels Assign Labels: Destination Acquire Acquire Operator Create TS Create Task Sequence Load Load Item at Queue Unload Unload Item at Destination Travel Travel Back to Queue Finish TS Finish Task Sequence Release Release Operator Sink Sink: Finish Task Consider saving your simulation model. Step 5 Link the Shared Assets to the 3D Model In this relatively short step, you'll learn how to link shared assets in the process flow to objects in the 3D model. You'll link the ItemsToTransport list in the process flow to the global list by the same name that you created in step 2. After that, you'll link the resource shared asset to the group you made in step 3. You could change the number of resources available using the Parameter Table to experiment with how many operators you might need to complete common tasks. To make these changes: In the process flow, click the List: ItemsToTransport shared asset to select it. In Properties, click the arrow next to the List box to open a menu. Point to Global List , then select ItemsToTransport . Click the Resources: Operators shared asset to select it. In Properties next to the Reference box, click the Sampler button to enter sampling mode. Click the Operators Group in the Toolbox to sample it. The Count section should automatically change to say Number of Group Members . Press the Reset button on the simulation control panel. In the 3D model, you should see a second Operator created next to your first one. If you open the Operators group, you should see an Operator_2 added under the original. Consider saving your simulation model. Step 6 Edit the Task Creation Activities In this step, you'll edit the properties for the activities in the Task Creation section of the process flow. The following is an overview of how each activity in this section will function: Activity Explanation Source: Start Simulation This Scheduled Source activity will create one token as soon as the simulation starts and sends the token to the Pull From List activity. After it creates this token, it won't create any additional tokens. The one token will simply loop continuously through the other two activities until the simulation ends. Pull from ItemsToTransportList You'll link this activity to the ItemsToTransportList so that it will pull items from this list every time a token enters it. If there are no items on the list, the token will create a back order and will wait at this activity until an item is available. You'll also add a label called pulledItem to the token which will contain a reference to the flow item that was pulled from the list. Create Tokens in Transport Tasks When a token enters this activity, it will create a token in the first activity in the Transport Tasks section of the process flow. The newly created token will initiate the transport task sequence. You'll also assign a label to the newly created token that contains a reference to the flow item that was pulled from the list. Since you don't want the token in the Create Tokens activity to wait while the transport tasks are being completed, you'll create it as an independent token (as opposed to a child token). See Sub Process Flows for more information about child tokens. To edit these properties: Click the Scheduled Source activity to select it. You'll use the default properties for this activity, so confirm that the settings match the following image: Click the Pull From ItemsToTransport List activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. Click the List: ItemsToTransport shared asset in the process flow to sample it. A blue line will appear to show that the list is now linked. In Properties, confirm that the Assign To option is selected. In the box beneath it, change the text to token.pulledItem for clarity. What Does This Label Do? When the Pull From List activity pulls a flow item from the ItemsToTransport list, it adds a label to the entering token. This label contains a reference to the item in the 3D model that was pulled from the list. While you could have used the default label name of pulled , it is often helpful to assign more intuitive names to labels for better model management. For the purposes of this tutorial, you're changing the name of the label to pulledItem so that you'll more clearly see the other places in this process flow that will reference this label. With the Create Token in Transport Tasks activity selected as well, click the Exclamation Point button next to this activity to enter sampling mode. Click the Assign Labels: Destination activity to sample it. A blue line will appear to show that the tokens will be created in this activity. In Properties, click the Create As menu and select Independent Tokens . Under the Assign Labels to Created Tokens , click the Add button to add a label to the child token that will be created. In the Name box, type FlowItem . Click the arrow next to the Value box to open a menu. Point to Token Label , then select pulledItem . What Does This Label Do? When a token enters the Create Tokens activity, it will create an independent token in the Assign Labels activity in the Transport Task section of the process flow. You'll create a label on this newly created token called FlowItem that will copy the value of the label of the pulledItem label, which contains a reference to the item that was pulled from the ItemsToTransport list. Consider saving your simulation model. Step 7 Edit the Transport Task Sequence In this step, you'll edit the properties for the activities in the Transport Tasks section of the process flow to create a simple transportation task sequence. The following is an overview of how each activity in this section will function: Activity Explanation Assign Labels: Destination When the queue pushes a flow item to the ItemsToTransport list, it creates a label on the flow item named destination that assigns the flow item to one of the two downstream processors. This activity will create a label named itemDestination that will reference this label. This creates a dynamic reference that will tell the operator which processor the flow item should be transported to. Acquire Operator This activity will attempt to get one of the operators. When an operator is available, the transport tasks will be assigned to that operator. If an operator isn't available, the token will wait at this activity until one becomes available. You'll create a label called operator on the token to track which operator has been assigned to these tasks. Create Task Sequence This activity sets up the series of the tasks as a sequence of tasks to be carried out by the assigned operator. Load Item at Queue Tells the operator which flow item needs to be picked up and where to pick up the flow item. Unload Item at Destination Tells the operator which processor it should transport the flow item to. Travel Back to Queue Sends the operator back to the queue to begin another set of tasks. Finish Task Sequence This activity designates the sequence of tasks as finished. Release Operator Releases the operator so that it can work on another set of tasks. Sink: Finish Task Destroys the token that was used for this set of transportation tasks. To create this logic: Click the stacked block in the Transport Tasks to select it. There should be a default label labelName with value 0 . In the Name box, replace labelName with itemDestination . Click the arrow next to the Value box to open a menu. Point to Token Label , then select FlowItem . The box will now read token.FlowItem . Add .destination to the end of the FlexScript in this box. What Does This Label Do? Recall that in step 2.9 that the queue creates a label on the flow item called destination . Also recall from step 6.10 that when the Create Tokens activity sends a new token to this activity, it creates a label called FlowItem that contains a reference to the flow item that needs to be transported. The code token.FlowItem.destination accesses the destination label on the flow item that is referenced in the FlowItem label. This label tells the operator which processor should receive the flow item. Next to the Acquire Operator activity, click the Exclamation Point button to enter sampling mode. Click the Resources: Operators in the process flow to sample it. A blue line will appear to show that the resource is now linked. In Properties for the Acquire Operator activity, change the Assign To label to token.operator . What Does This Label Do? When the Acquire Resource activity successfully acquires a resource, it adds a label to the token to track which operator in the 3D model will be used for the rest of the travel task sequence. You'll name this label operator and it will contain a reference to the operator in the 3D model. You'll refer to this label in all of the activities in the task sequence. Click the Create Task Sequence activity to select it. In Properties, click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label and select Operator . This will assign the task sequence we are creating to the operator previously acquired. Leave the other settings as their default values. You'll notice that this activity creates a new label on the token called taskSequence . All of the tasks in this sequence will be assigned to the sequence via this label. In Properties for the Load Item at Queue activity, make sure the default for Executer / Task Sequence reads token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select FlowItem . In Properties for the Unload Item at Destination activity, make sure the default for Executer / Task Sequence reads token.taskSequence . Click the arrow next to the Item box to open a menu. Point to Token Label and select FlowItem . Click the arrow next to the Station box to open a menu. Point to Token Label and select itemDestination . In Properties for the Travel Back to Queue activity, make sure the default for Executer / Task Sequence reads token.taskSequence . Then, next to the Destination box, click the Sampler button to enter sampling mode. Select the Queue in the 3D model to open a menu. Select Queue from the menu to sample it. We can leave the Finish Task Sequence as its default settings. Make sure the Task Sequence box reads token.taskSequence . This designates the end of the sequence of tasks to be carried out. In Properties for the Release Operator activity, click the arrow next to the Resource(s) Assigned To box to open a menu. Point to Token Label and select operator . Consider saving your simulation model. Step 8 Test the Simulation Model At this point, you should probably run the simulation model to ensure that the basic travel task sequence is running correctly. Reset and run the model. In the 3D model, the task executers should alternate between transporting flow items to the processors. Watch as the tokens first move through the Task Creation section pulling items from the list and sending tokens to the Transport Tasks section. Notice that when a flow item isn't available for transport, it creates a red back order on the list shared asset. Notice also that when the operators are assigned to the task, they show up as being allocated in the Resources shared asset. While the operators perform the transportation task in the 3D model, the flow items move through the task sequence. Conclusion Now you've built a basic transport task sequence using lists and resources. In the next tutorial, you'll learn how to make a resource act a little like the list in order to get some advanced functionality from it. Continue on to Tutorial Task 1.2 - Make a Resource Act Like a List ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial1UsingSharedAssets/1-2MakeResourceActList/1-2MakeResourceActList.html",
        "title": "Tutorial Task 1.2 - Make a Resource Act Like a List",
        "content": "Task Overview Up to this point, you've built a basic transportation task sequence for the two task executers in the model. You can actually create this basic functionality without using the Process Flow tool. However, the real power in using the Process Flow tool is how easy it is to create custom model logic, especially for task sequences. In this tutorial task, you'll add process flow logic that will occasionally interrupt the operator's normal transportation task sequences. You'll design logic that will send operators to a get a drink from the drinking fountain every time they travel more than 100 meters. In order to create this logic, you'll build an additional section in the process flow for a water break task sequence. Also, recall from the previous tutorial that the resource shared asset is linked to the two operators in the 3D model. In order to create the water break tasks, you'll need the resource shared asset to keep track of the distance the operators have traveled. For that reason, you'll need to change the resource so that it acts a little more like the list. Lists can track and update data about the entries on the list; you can also build queries that pull entries from the list that match specific criteria. Fortunately, resources actually have an internal list that you can set up to have the same functionality as a list. In this tutorial task, you'll learn how to set up the resource's internal list to track the total distance the operators have traveled in the simulation model and the distance they've traveled since their last water break. You'll also design a query so that your water break task sequence will pull any operators who have traveled more than 100 meters since their last water break. When you're finished, your model will work similar to the following image: Step 1 Use the Internal List on a Resource Now that your basic transportation task sequence is set up, you'll create a series of tasks that will occasionally pull the operator away from their normal transportation tasks and send them to get a drink of water. You'll want to simulate the operator getting a drink from the drinking fountain after the operator has traveled more than 100 meters. By now you may have noticed that the list and resource shared assets have somewhat similar functions. In fact, resources are simply a special kind of list. The resource you're using in this process flow actually keeps an internal list of the available operators. The Acquire Resource and Release Resource activities push and pull operators from this list. In this step, you'll need to add some fields to this internal list in order to add the water break functionality in a later step. You'll add two fields: lastDrinkTotalTravel - You'll add a field that creates a label on the operator called lastDrinkTotalTravel . This label will track the distance the operator has traveled since it took its last water break. The process flow will update this label after each operator takes a water break. totalTravel - You'll also add a field that tracks the total distance the operator has traveled since the simulation began running. All operator 3D objects keep track of their total distance traveled as a standard (default) statistic in FlexSim. So, you'll add a field to the resource's list that gets the current value of the statistic. To add these fields to the resource's internal list: Click the Resources: Operators shared asset to select it. In Properties, click the Advanced button to open this resource's list properties. In the Fields tab, click the Add button to open a menu. Select Label to add a label field to the list. Change the name of the label field to lastDrinkTotalTravel . Click the Add button to open a menu. Point to TaskExecuter , then select totalTravel . You'll use the default settings, so confirm that they look similar to the following image: What Does This Expression Mean? The expression getvarnum(value, \"totaltraveldist\") gets the total distance traveled from the operator objects in the 3D model. Because this statistic is a number, you'll use the gervarnum command to access this statistic, which stands for get variable number . The list's value refers to the operator on the list, which is the list entry. As was mentioned in in the introduction to this step, the total distance traveled is one of the standard statistics that is available for operators; the name of this variable in FlexScript is totaltraveldist . Consider saving your simulation model. Step 2 Add a Water Break Task Sequence In this step, you'll add some more activities to the process flow. These activities will control the water break functionality. When you're finished, your process flow will look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: Make sure the process flow is open and active. In the Library under the Display group, add an additional Container shape to the new process flow. For clarity, rename the Process shape Water Breaks . Add a Schedule Source to the Water Breaks shape. In the Water Breaks shape, add the following activities to create a stacked block: An Acquire Resource activity (under Shared Assets ) A Create Task Sequence (under Task Sequences ) A Travel > Travel to Object activity (under Task Sequences ) A Delay activity (under Task Sequences ) An Assign Labels activity (under Basic ) A Finish Task Sequence (under Task Sequences ) A Release Resource activity (under Shared Assets ) Create a connector from the Schedule Source to the Acquire Resource . (Point your mouse over the bottom middle of the activity until your mouse changes to a connector icon. Click and drag the connector until it snaps to the other activity.) Create a connector that loops from the end of the Release Resource activity back to the Acquire Resource activity. For clarity, rename the activities as follows: Activity New Name Source Source: Start Simulation Acquire Acquire: Get Thirsty Operator Create TS Create Task Sequence Travel Travel to Water Fountain Delay Delay: Drinking Assign Labels Assign Labels: lastDrinkTotalTravel Finish TS Finish Task Sequence Release Release Operator Consider saving your simulation model. Step 3 Edit the Activity Properties In this step, you'll edit the properties for the activities in the Water Break section of the process flow to create a simple transportation task sequence. The following is an overview of how each activity in this section will function: Activity Explanation Source: Start Simulation This Scheduled Source activity will create one token as soon as the simulation starts. It will then send the token to the Acquire: Get Thirsty Operator activity. After it creates this token, it won't create any additional tokens. The one token will simply loop continuously through the other activities until the simulation ends. Acquire: Get Thirsty Operator This activity will check the resource's internal list for any operators who have traveled more than 100 meters since their last water break. When an operator on the list matches that criteria, it will acquire that operator. If an operator doesn't match that criteria, it will create a back order on the list. You'll create a label called thirstyOperator on the token to track which operator has been assigned to take a water break. Create Task Sequence This activity sets up the series of the tasks as a sequence of tasks to be carried out by the assigned operator. Travel to Water Fountain Sends the operator to the water fountain. Delay: Drinking This task will simulate the length of time it takes an operator to get a drink from the fountain. Assign Labels: lastDrinkTotalTravel This activity will record the time the operator last got a drink from the fountain. Finish Task Sequence This activity designates the sequence of tasks as finished. Release Operator Releases the operator so that it can work on another transportation task sequence. To edit these activity properties: Click the Scheduled Source activity to select it. You'll use the default properties for this activity, so confirm that the settings match the following image: Next to the Acquire: Get Thirsty Operator activity, click the Exclamation Point button to enter sampling mode. Click the Resources: Operators in the process flow to sample it. A blue line will appear to show that the resource is now linked. In Properties for the Acquire: Get Thirsty Operator activity, change the Assign to Label box to token.thirstyOperator . What Does This Label Do? When the Acquire Resource activity successfully acquires a resource, it adds a label to the token to track which operator in the 3D model will be pulled away to get a water break. You'll name this label thirstyOperator and it will contain a reference to the operator in the 3D model that needs a water break. You'll refer to this label in all of the activities in the water break sequence. In the Query box, delete the current text and type WHERE totalTravel - lastDrinkTotalTravel > 100 . What Does This Query Do? This query accesses the fields that are available in the resource's internal list. It subtracts the value of the totalTravel field from the lastDrinkTotalTravel . If that value is greater than 100, it will acquire the resource. Click the Create Task Sequence activity to select it. In Properties, click the arrow next to the Task Executer / Dispatcher box to open a menu. Point to Token Label and select thirstyOperator . This will assign the task sequence we are creating to the operator previously acquired. Leave the other settings as their default values. You'll notice that this activity creates a new label on the token called taskSequence . All of the tasks in this sequence will be assigned to the sequence via this label. In Properties for the Travel to Water Fountain activity make sure the default for Executer / Task Sequence reads token.taskSequence . Next to the Destination box, click the Sampler button to enter sampling mode. Click the Fountain shape in the 3D model to open a menu. Select Fountain from the menu. In Properties for the Delay: Drinking activity make sure the default for Executer / Task Sequence reads token.taskSequence . Then, change the Delay Time to 30 . In Properties for the Assign Labels: lastDrinkTotalTravel activity, click the arrow next to the Assign Labels To box to open a menu. Point to Token Label and select thirstyOperator . In the Name box, delete the current text and type lastDrinkTotalTravel . In the Value box, type getvarnum(token.thirstyOperator, \"totaltraveldist\") . What Does This Label Do? This activity will update the value to the lastDrinkTotalTravel label on the operator that is currently linked to this token. (It uses the reference to the operator in the 3D model from the thirstyOperator label to know which operator to change.) This expression works almost identically to the expression you used in step 1.6, so you can refer to that step for an explanation of how this expression works. The only difference is that it will update this value on the operator that is referenced in the thirstyOperator label rather than a value on the resource's internal list. We can leave the Finish Task Sequence as its default settings. Make sure the Task Sequence box reads token.taskSequence . This designates the end of the sequence of tasks to be carried out. In Properties for the Release Operator activity, click the arrow next to the Resource(s) Assigned To box to open a menu. Point to Token Label and select thirstyOperator . Consider saving your simulation model. Step 4 Add Labels to the Operators In this step, you'll add the lastDrinkTotalTravel label to the operators and set its initial value to 0. You need to do this in order for the logic to work. Unless you set the initial value to 0, this label will return a NULL value when calculating how long it has been since the operator last took a drink. If that happens, the Acquire: Get Thirsty Operator activity won't be able to successfully pull an operator from the resource's internal list. To add these labels: Reset the model. Click the Operator to bring up its properties on the right. Under the Labels section, click the Add button to open a menu. Select Add Number Label. Double click the labelName box, delete the current text and type lastDrinkTotalTravel . Confirm that the label's initial value is set to 0 . Check the Automatically Reset checkbox. Repeat this process for the second operator. Consider saving your model. Step 5 Run the Simulation Model In this step, you'll run the simulation model to ensure that it is functioning correctly. Before running the model: On the simulation control panel, click the Reset and Run buttons. Run the simulation for a second and then click the Stop button. In the process flow, click the Resources: Operators shared asset to select it. In Properties, click the View Entries button to view the resource's internal list. Back on the simulation control panel, click the Reset and Run buttons. Be aware that the following model is being run at speed 10.00: As the model runs, notice that when the operators travel more than 100 meters, they go to get a drink from the drinking fountain. After their first drink, the resource's list begins tracking the amount of travel from their last drink. Conclusion Now you've seen some of the different possible uses for both resources and lists. In the next tutorial task, you'll learn how to use the last type of shared asset: the zone. Continue on to Tutorial Task 1.3 - Add a Zone to Collect Data ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial1UsingSharedAssets/1-3AddZone/1-3AddZone.html",
        "title": "Tutorial Task 1.3 - Add a Zone to Collect Data",
        "content": "Task Overview Up to this point in the tutorial, you've learned how to use the list and resource shared assets. In this tutorial task, you'll learn how to use the third shared asset: zones. Zones are useful for both statistics gathering and adding constraints to a model. This tutorial task will primarily demonstrate the statistical functionality of the zone. You'll design a process flow that will track the total price of all the items that are currently being processed in the simulation model. Step 1 Add a Zone In this step, you'll randomly assign each flow item a price between $1 and $100 by adding a label named Price to the flow items. Then, you'll add a zone to the process flow that references this label to calculate the total price of all the items that are currently being processed in the simulation model. These items will each be represented by a token in the zone section of the process flow that you will build in a later step. To set up this label and create a zone in the process flow: In the 3D model, click the Source to bring up its properties on the right. Under the Triggers section, click the Add button to open a menu. Select On Creation to add this new trigger. Next to the new On Creation trigger, click the Add button to open a menu. Point to Data , then select Set Label to open the label picklist options. In the Label box, type \"Price\" . In the Value box, type uniform(1,100) . How Does This Work? When the source creates a new flow item, it will automatically add a label to the item named Price that will assign a value between 1 and 100, including decimal values. The Zone will reference this label to calculate the total price of the items that have been processed in the system. Make sure the process flow is open and active. In the Library under the Shared Assets group, add a Zone to the Shared Assets shape in the process flow. Rename the zone to Zone: Price Calculation . In Properties for the Zone , click the More Properties button to open its properties. In the Subsets tab, click the Add button to add a new subset. In the Subset Name box, type AllTokens . In the Subset Calculations group, click the Add button to add a row to the subset calculations table. In the cell under the Calculation name column, delete the current text and type TotalPrice . In the cell under the Label/expression to sum column, delete the current text and type MyItem.Price . What Does This Expression Mean? In a future step in the tutorial, you'll create a custom label on the tokens that will enter the zone called MyItem . This label will link each token in the zone section of the process flow to each flow item in the 3D model. The expression MyItem.Price will get the value of the Price label on the flow item that you created earlier in this step. Click the OK button to save the changes and close the window. Consider saving your model. Step 2 Add Price Analysis Activities In this step, you'll add some more activities to the process flow. These activities will control the price calculation functionality of the zone. When you're finished, your process flow will look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: In the Library under the Display group, add an additional Container shape to the new process flow. For clarity, rename the Process shape Price Analysis . In the Price Analysis shape, add the following activities to create a stacked block: An Event-Triggered Source activity (under Token Creation ) An Enter Zone activity (under Shared Assets ) A Wait for Event activity (under Basic ) An Exit Zone activity (under Shared Assets ) A Sink activity (under Basic ) For clarity, rename the activities as follows: Activity New Name Source Source: Item is Created Enter Zone Enter Zone: Price Calculation Wait for Event Wait for Item to Enter Sink Exit Zone Exit Zone: Price Calculation Consider saving your simulation model. Step 3 Edit the Activity Properties In this step, you'll edit the properties for the activities in the Price Analysis section of the process flow. The following is an overview of how each activity in this section will function: Activity Explanation Source: Item is Created The Event-Triggered Source is an event-listening activity, which means that it will create a token every time a specific event occurs in the simulation model. In this process flow, the Event-Triggered source will create a token every time the source in the 3D model creates a flow item. It links the token to the flow item by assigning a label to the newly created token called MyItem that will contain a reference to the specific flow item that was created. Enter Zone: Price Calculation This activity will cause the new token to enter the Price Calculation zone. Wait for Item to Enter Sink The Wait for Event activity is also an event-listening activity. This activity will listen to the sink in the 3D model. Every time a flow item enters the sink, it will match the token to its corresponding flow item using the MyItem label. Exit Zone: Price Calculation After the flow item has entered the sink, its corresponding token will leave the Price Calculation zone. To edit these activity properties: Click the stacked block of activities in the Price Analysis shape to select it. Next to the Source: Item is Created activity, click the Exclamation Point button to enter sampling mode. In the 3D model, click the Source to open a menu. Select On Creation to sample this event. In Properties for the Source: Item is Created activity, find the Label Assignment table. In the Created Item row under the Label Name column, type MyItem . Click the cell in the Created Item row under the Operation column to open a menu. Select assign . What Does the Label Assignment Table Do? Object-based events have specific parameters associated with them. These parameters contain basic information about the event, such as which flow item or token triggered the event. You can use the Label Assignment table to preserve any relevant information from these parameters with a custom label. In this example, the Event-Triggered Source will create a new token every time the source in the 3D model creates a new flow item. You'll use the Created Item parameter to assign a label called MyItem on the newly created token that contains a reference to the created flow item that triggered this event. This label links the token to the flow item and you'll reference it throughout this section of the process flow. Next to the Enter Zone: Price Calculation activity, click the Exclamation Point button to enter sampling mode. Click the Zone: Price Calculation to link it to the zone. A blue line will appear to show that the zone is now linked. Next to the Wait for Item to Enter Sink activity, click the Exclamation Point button to enter sampling mode. In the 3D model, click the Sink to open a menu. Select On Entry to sample this event. In Properties for the Wait for Item to Enter Sink activity, find the Label Assignment/Matching table. In the Entering Item row under the Label Name column, click inside the blank cell. Click the arrow that now appears next to the cell to open a menu. Select MyItem . In the Entering Item row under the Operation column, click inside the blank cell. Click the arrow that now appears in the cell to open a menu. Select match . What Does the Label Matching Table Do? The Label Matching table can function much like the Label Assignment table, but it can also create a custom label that matches a label from another event-listening activity. In this case, the Wait For Event will match the MyItem label on the token from the Event-Triggered Source. This table tells the activity to listen specifically for an entering item with the same ID as the one used earlier in the process flow. When the label matches the label on the token, it will release it to the next downstream activity. Next to the Exit Zone: Price Calculation activity, click the Exclamation Point button to enter sampling mode. Click the Zone: Price Calculation to link. A blue line will appear to show that the zone is now linked. Consider saving your simulation model. Step 4 Run the Model and Calculate the Total Price In this step, you'll run the model and calculate the total price of the items that are currently being processed in the simulation model: In the process flow, click the Zone: Price Calculation to select it. In Properties, click the View Status button to open the zone's statistics and status window. Make sure you have the Subsets tab open. On the simulation control bar, click the Reset and Run buttons to start the model. As you watch the zone's statistics, notice that the current TotalPrice calculation fluctuates up and down. This calculation tells you the total price of all the items that are currently in the system. You could possibly use this calculation to see how much money is being lost by having too many items queued in the system, for example. You could also substitute this calculation for something else. For example, the zone could calculate the current weight of all the items that are currently in the system. While this tutorial has illustrated the statistical uses for a zone, be aware that zones can also control access to the zone as well. For example, it could stop allowing tokens into the zone once a maximum capacity has been reached or it could add other constraints as needed. You could also use a statistics collector with the zone to calculate the total price of all the items that have been processed in the simulation model. See Key Concepts About Shared Assets for more information. Conclusion This concludes the shared assets tutorial. Hopefully you've learned a little more about the capabilities of the three shared assets and have a better idea of some of their broad potential to simulate a wide variety of model logic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial2TaskSequences/TaskSequencesOverview/TaskSequencesOverview.html",
        "title": "Tutorial 2 - Task Sequences",
        "content": "This tutorial will teach you how to create task sequences in the Process Flow module and link them to a 3D model. For this tutorial, you will create a model with two processors that are manned by two operators. Each operator will use the same task sequence to transport flow items to the next downstream object. You'll begin by creating a simple task sequence inside a sub flow that will tell the operator to load and unload the flow items. Then, you will make the task sequence more complex by adding tasks that will make the operator clean the processors after they finish transporting the flow items to the next destination. Tasks Covered This tutorial will cover the following tasks: Task 2.1 Build a Basic Task Sequence In this task, you'll build a simple task sequence for loading and unloading flow items that will be used by two different operators in the 3D model. You'll learn how to link this process flow to a 3D model and get an introduction to the concept of process flow instances. Task 2.2 Customize the Task Sequence In this task, you'll see how you can customize a task sequence to make it more complex. You'll add a set of tasks to the task sequence that will require the operator to clean the processor after every item has been transported. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Key Concepts About Labels Process Flow Instances Process Flow Sub Flows"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial2TaskSequences/2-1BuildBasicTask/2-1BuildBasicTask.html",
        "title": "Tutorial Task 2.1 - Build a Basic Task Sequence",
        "content": "Task Overview In this tutorial task, you'll learn how to create a very basic task sequence in a process flow. You'll learn how to link this process flow to a 3D model so that it will control task executers in the model. This tutorial task will also introduce you to the concept of process flow instances. You'll build a simple task sequence for loading and unloading flow items that will be used by two different operators in the 3D model. When you're finished with this task, your 3D model should look like this: Using Labels to Connect to the 3D Model In this model, you'll use labels extensively to link tokens in a process flow to objects in the 3D model. Process flows can control the logic of the 3D model using labels that contain a reference to a 3D object in the model. As the token moves through the activities in the process flow, the activity's logic can be applied to the object in the 3D model using this reference. Consider reading Key Concepts About Labels for a deeper understanding of how to work with labels in a process flow. In this model, you'll use labels to: Link tokens to flow items in the 3D model - You'll create a label named item to link tokens in a process flow to the flow items that need to be transported in the 3D model. Dynamically set flow item destinations - A label named destination on the flow item will track which processor the flow item should be transported to. The process flow will reference this label in the transportation task sequence. Step 1 Build the 3D Model In this step, you'll add the basic objects that will represent your production line in your 3D simulation model. You'll also change the properties of a shape object to make it look like a cleaning supplies closet. Be aware that the closet won't be used until the next task in the tutorial when you create a more advanced task sequence. When you're finished, your model will look like this: To create this model: In a new model, add the following 3D objects from the Library: 1 Source 2 Processors 1 Sink 2 Operators 1 Shape (found under the Visual group) For clarity, rename the 3D objects as follows: Object New Name Source Source (remove any numerals) Sink Sink (remove any numerals) First Processor Processor A Second Processor Processor B First Operator Operator A Second Operator Operator B Shape Supply Closet Displaying the Shape Name To display the shape's name, right click the object, and select Edit then select Show Name . Create port connections (A-connects) between the following objects: From the Source to Processor A From Processor A to Processor B From Processor B to the Sink Create center port connections (S-connects) between the following objects: From Processor A to Operator A From Processor B to Operator B Click the Supply Closet shape to bring up its properties on the right. Under the Visual Tool section, open the Visual Display menu and select Cube . Under the Visuals section, click the arrow next to the Color box and select the dark brown color. Under the Position, Rotation, and Size group, find the Size boxes and type the following numbers: X-Size : 1.50 Y-Size : 0.75 Z-Size : 3.00 Check to make sure that your final 3D model looks like the image in the beginning of this step. Step 2 Build a Task Sequence Sub Flow Now you'll create a simple task sequence that both operators will use whenever they need to load and unload a flow item. You'll create a sub flow because process flows can easily use sub flows to assign task sequences to task executers. In this step, you'll set the process flow to run a separate instance each time an operator runs the sub flow. That means that each operator will use the same sub flow to provide them with the basic template for the task sequence. But each operator will run its own instance of the process flow, which is like running its own copy of the process flow. One advantage of this method is that any shared assets used by the operators will be local to the two operators. See Sub Process Flows and Process Flow Instances for more information. In this step, you'll only add the activities to the process flow. You'll edit the properties and create the logic in a later step. When you're finished, your process flow will look like this: To build this process flow: On the main toolbar, click the Process Flow button to open a menu. Select Add a Sub Flow to open a new process flow. In Properties, in the Process Flow Name box, delete the current text and type TransportItems . Under the Process Flow Instances group, open the Instance Creation menu and select Per Instance . From the Library, add the following activities to the process flow, arranging them in a stacked block in this exact order: A Start activity (under the Sub Flow group) A Load activity (under the Task Sequences group) An Unload activity (under the Task Sequences group) A Finish activity (under the Sub Flow group) For clarity, rename the activities as follows: Activity New Name Start Start Sub Flow Load Load Item Unload Unload Item Finish Finish Sub Flow Check to make sure that your process flow looks similar to the image at the beginning of this step. Step 3 Attach 3D Objects to the Process Flow Now you'll link this sub flow to the objects simulation model. On the processor, you'll use a special picklist option called Use Task Sequence Sub Flow that will allow you to dynamically run the task sequence every time the processor uses an operator to transport a flow item. You'll set the picklist options so that the processor will assign the task to the operator connected to its center port. To attach the 3D objects: In the 3D model, click Processor A to bring up its properties on the right. Under the Output section, check the Use Transport checkbox. Click the arrow next to the Use Transport box to open a menu. Select Customized Logic then ProcessFlow: Use Task Sequence Sub Flow from the menu to open the options for this picklist. Click the arrow next to the Owner Object to open a menu. Select current.centerObjects[1] from the menu. Check to ensure that the selected sub flow in the Sub Flow box is TransportItems , which is the sub flow you created in the previous tutorial step. Click the arrow next to the Activity box to open a menu. Select Start . You'll use the default labels in the picklist. What Do These Labels Mean? These labels will be copied onto the token that is created to represent this task in the sub flow. The labels will contain dynamic references to the relevant 3D objects. Notice that the item label is set to point at the flow item that currently needs transportation. You'll reference this label in the next tutorial step. Notice that the toObject label is set to point to the destination object. For Processor A, this will be Processor B because that is the downstream object connected to its output port. Take note of this label because you'll reference this label in the next tutorial step. Repeat the previous steps for Processor B . Consider saving your simulation model. Step 4 Add Dynamic References to the Sub Flow The following table provides an overview of how the activities in this process flow will function: Activity Explanation Start Sub Flow All new tasks generated by the processor will create a token which starts here in the process flow. Load Item The operator connected to the processor's center port will load the flow item. Unload Item The operator will take the flow item to the downstream fixed resource connected to the processor's output port. Finish When the sub flow is complete, the token will enter this activity and be destroyed, indicating the task is now complete. In this step, you'll edit the activities in your sub flow so that it is dynamic, meaning it will change based on conditions that are unique to each instance (each processor and operator) that are attached to the sub flow. As a reminder, each time an operator picks up a flow item from the processor and transports it to its destination, that will act as a separate instance of a sub flow. You'll use the current keyword to refer to whichever object instance is attached to the sub flow. In this case, this will be either Operator A or Operator B, depending on which processor created the task sequence. Using the current keyword allows both operators to run separate copies (instances) of the same task sequence. Running instances is more efficient since you'll only need to build the task sequence once, rather than building one for each operator. You'll also add references to labels on the token. When the processor calls this task sequence sub flow, it will create a token to represent the task that needs to be completed. Recall that in the previous tutorial step, you set up the labels that would be assigned to this token. The item label contains a dynamic reference to the flow item that needs transportation and the toObject label contains a dynamic reference to the downstream object that will receive the flow item. To edit these properties on the process flow: With the process flow open, click the stacked block to select it. In Properties, under the Load Item activity, click the arrow next to the Executer / Task Sequence box to open a menu. Select current (Instance Object) . Repeat this step for the Unload Item activity as well. Confirm that both the Load Item and Unload Item activity have token.item listed in the Item box. In the Unload Item activity, in the Station box, delete the existing text and type token.toObject . When you're finished, the Properties should look similar to this image: Step 5 View Instances During a Simulation Run In this step, you'll learn how to open up process flow instances so that you can view them during a simulation run: Reset and run the simulation model. Let the simulation run long enough for both operators to begin working on the loading task sequences. Click a blank space in the process flow to ensure nothing is selected. In Properties, under the Process Flow Instances group, notice that the two operators should appear in the Attached Objects (instances) list. Click Operator A in the list to select it. Click the Open PF View button. A new tab in the process flow will open to show the process flow instance for Operator A. Return to the original process flow and repeat the previous steps to open the process flow instance for Operator B as well. If desired, you can split the pane so that you can see all three process flows at the same time. See Arranging Windows and Tabs for more information. If you paused the simulation model, resume running the model now. As the simulation runs, you'll see the operators loading and unloading flow items in the 3D model. In the TransportItems process flow, you'll see one or two tokens moving through the process flow each time an operator loads and unloads a flow item. Notice also that each of the two process flow instances of the operators correlate with the operators in the 3D model and with the TransportItems process flow. Conclusion At this stage, your process flow is very basic and doesn't operate much differently than the standard pre-programmed logic that is available with the Use Transport property on fixed resource. However, in the next tutorial task, you'll see how a process flow allows you to add additional custom tasks that make it much easier to assign complex task sequences to task executers. Continue on to Tutorial Task 2.2 - Customize the Task Sequence ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial2TaskSequences/2-2CustomizeTask/2-2CustomizeTask.html",
        "title": "Tutorial Task 2.2 - Customize the Task Sequence",
        "content": "Task Overview At this point in the tutorial, you've essentially re-created the standard transportation logic that task executers use to load and unload 3D objects in the model. You didn't need to create a process flow to create this logic because it was already possible using the logic available on 3D objects alone. The real power of process flow is when you want to create a custom task sequence for your task executers. Process flow makes it much easier to create custom task sequences for your simulation model. In this tutorial task, you'll customize the basic task sequence you created in the previous tutorial task to add custom logic. You'll build a custom task sequence in which the operators will go to the supply closet to get cleaning supplies and clean the processor after every item has been processed and transported. When you're finished, your simulation model will look and function similar to the following image: Step 1 Add Additional Tasks to the Task Sequence In this step, you'll edit the task sequence to make it a little more complicated. You'll add additional task activities that will make the operators clean the processors after they finish transporting the flow items to the next destination. If you look at the process flow activities available in the Library, you'll notice that there are many possible logical functions to choose from. But these activities are only the most common types of logical functions that are available in FlexSim. You can use the Custom Code activity to implement any of the other additional pre-programmed logic that is already available in FlexSim. You can also use it to create custom FlexScript code if needed. In this step, you'll use the Custom Code activity to turn the processors on and off before and after cleaning. You'll only add and rename the new task activities for now. You'll edit the properties in a later step. When you're finished, your process flow should look similar to the following image: To add the activities: Press the Reset button on the simulation control bar to stop the current simulation run. To avoid confusion, close the two instances of the process flow so that only the TransportItems process flow is open. In the process flow, click the stacked block of activities to select it. Click the Scissors button in between the Start Sub Flow and Load Item activities to separate them. Separate the Unload Item and Finish Sub Flow activities as well. From the Library, under the Basic group, drag a Custom Code activity after the Start Sub Flow activity to make a stacked block. Drag the stacked block that contains the Load Item and Unload Item activities to add it to the end of the Custom Code activity. After the Unload activity, add the following activities to the stacked block (in this order): A Travel activity (under the Task Sequences group) An Acquire Resource activity (under the Shared Assets group) A Travel activity (under the Task Sequences group) A Delay activity (under the Basic group) A Custom Code activity (under the Basic group) A Travel activity (under the Task Sequences group) A Release Resource activity (under the Shared Assets group) Drag the Finish Sub Flow activity to the end of the stacked block. Add a Resource activity to the side of the stacked block without connecting it. For clarity, rename the new activities as follows: Activity New Name The first Custom Code Custom Code: Close Ports The first Travel Travel to Supply Closet Acquire Acquire Cleaning Supplies The second Travel Travel to Processor Delay Delay: Clean Processor The second Custom Code Custom Code: Open Ports The third Travel Travel to Supply Closet Release Release: Return Supplies Resource Resource: Cleaning Supplies When you're finished, check to make sure your process flow looks similar to the image at the beginning of this step. Step 2 Edit Activity Properties In this step, you'll edit the properties of all the new activities you added to the task sequence. The following table provides an overview of how the activities in this process flow will function: Activity Explanation Start Sub Flow All new tasks generated by the processor will create a token which starts here in the process flow. Custom Code: Close Ports This activity will close the processor's ports so that it stops receiving flow items until it has been cleaned. Load Item The operator connected to the processor's center port will load the flow item. Unload Item The operator will take the flow item to the downstream fixed resource connected to the processor's output port. Travel to Supply Closet The operator will travel to the supply closet. Acquire Cleaning Supplies The operator will get the cleaning supplies from the supply closet. Travel to Processor The operator will travel back to the processor. Delay: Clean Processor This activity will represent the amount of time it takes to clean the processor. Travel to Supply Closet The operator will return to the supply closet. Release: Return Supplies The operator will return the supplies to the supply closet. Finish When the sub flow is complete, the token will enter this activity and be destroyed, indicating the task is now complete. Resource: Cleaning Supplies This resource will represent the cleaning supplies that will be used to clean the processor. You'll set this resource so that it is globally accessible, which means that both operators (both instances) will use the same resource. Only one set of supplies will be available at a time. The steps will be logically organized by the activity types rather than the order they appear in the task sequence. Click the activity block to select it. You'll start by editing the two Custom Code activities so that they close and open the processor's ports at the right point in the task sequence. In Properties under the Custom Code: Close Ports group, click the Add button next to the Custom Code box to open a menu of available picklists. Point to Control , then Close and Open Ports to open its picklist options. Leave the Action menu set to closeinput so that it will close the incoming port of the current processor. Click the arrow next to the Object box to open a menu. Select token.labelName . In this box, change labelName to fromObject . This setting will make a dynamic reference to the object listed in the token's fromObject label. (This label assigns the current processor to this property. See Step 4 of Tutorial 1.1 as a reminder.) In other words, the incoming port from the current processor will be closed. Repeat steps 2-4 for the Custom Code: Open Ports activity with one small change: in the picklist options, select openinput in the Action menu. This will open the incoming port of the current processor after the operator finishes cleaning it. Now you'll edit the properties for all the Travel activities so that they are assigned to the correct operator. In Properties for the Travel to Supply Closet activity, click the arrow next to the Executer/Task Sequence box to open a menu. Select current (Instance Object) . Repeat the previous step for Travel to Processor and the second Travel to Supply Closet activities. Now you'll edit the properties for all the Travel activities so that they are assigned to the correct Destination. In Properties under the first Travel to Supply Closet group, next to the Destination click the Sampler button to enter sampling mode. Select the Supply Closet object in the 3D model to open a menu. Select Supply Closet from the menu. Repeat steps 8-9 for the second Travel to Supply Closet activity. In Properties under the Travel to Processor activity, click in the Destination box and type token.fromObject to make a dynamic reference to the object listed in the token's fromObject label. (This label assigns the current processor as the destination. See Step 4 of Tutorial 1.1 as a reminder.) Next, you'll link the Resource: Cleaning Supplies shared asset to the process flow. With the stacked block still selected, click the Exclamation icon next to the Acquire Cleaning Supplies activity to enter sampling mode, then click the Resource: Cleaning Supplies shared asset. Click the Resource: Cleaning Supplies shared asset to select it. Click the Type menu and select Global . Consider saving your model. Step 4 Run the Simulation Model Now it's time to run the simulation model to see the custom task sequence in action. Reset and run the simulation model: As the model runs, you'll see the two operators traveling to the supply closet and cleaning the processor in addition to loading and unloading the flow items. The tokens in the process flow indicate which task each operator is currently working on. At this point, you could possibly experiment with making two sets of cleaning supplies available to see if it speeds up the system's overall throughput. Or you could possibly design logic in which the operator only cleans the processor after every fifth item is processed. Conclusion This completes the task sequence process flow tutorial. Consider completing the other tutorials to get a deeper understanding of process flow instances, sub flows, and other important topics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial3SubProcessFlows/SubProcessFlowsOverview/SubProcessFlowsOverview.html",
        "title": "Tutorial 3 - Sub Process Flows",
        "content": "This tutorial will teach you the basics about building a sub flow in the Process Flow tool. You'll build a sub flow that can apply an irregular pattern of processing times to a processor so that every 3 flow items has a fast processing time followed by 2 items with a slow processing time. When you're finished with the first two tutorials, your simulation model will look similar to the following image: Tasks Covered This tutorial will cover the following tasks: Task 3.1 Build a Basic Sub Flow In this task, you'll learn some of the basics about building a sub flow in the Process Flow tool by building an internal sub flow to dynamically determine a processor's processing time. You'll learn about the basic components of the sub flow and how to link it to a 3D model. You'll also learn about how to control label access with parent and child tokens. Task 3.2 Add Multiple Finish Activities In this task, you'll change the sub flow so that it will assign the processor's process time based on the type of flow item it is processing. Flow items with a product type of 1 will be assigned a faster process time than flow items with a product type of 2. You'll also assign different colors to the flow items based on their product type. You'll create this logic by adding a Decide activity in the sub flow that will send tokens to one of two Finish activities. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Process Flow Sub Flows Key Concepts About Labels"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial3SubProcessFlows/3-1BuildBasicSubFlow/3-1BuildBasicSubFlow.html",
        "title": "Tutorial Task 3.1 - Build a Basic Sub Flow",
        "content": "Task Overview In this tutorial task, you'll learn some of the basics about building a sub flow in the Process Flow tool. A sub process flow is a separate process flow that begins running when it is triggered by another activity or event in a different process flow. Think of sub flows as chunks of self-contained logic that will get executed when they are triggered by certain events in the simulation model or general process flow. Sub flows can cut down on the need to create a certain block of process flow activities in multiple places throughout your process flows. You could use sub flows to perform calculations or to simulate more complex procedures that are triggered by specific activities or events in the main process flow. See Process Flow Sub Flows for more information about the key concepts related to sub flows. In this tutorial, you'll build an internal sub flow to dynamically determine a processor's processing time. When you're finished, your 3D model and process flow will look similar to the following image: Basic Components of a Sub Flow Sub flows begin when a Create Tokens or Run Sub Flow activity sends a token to a Start activity on the sub flow. The sub flow ends when it moves through all the activities in the sub flow and reaches a Finish activity. Parent and Child Tokens When a Create Tokens or Run Sub Flow activity sends a token to a sub flow, it usually creates a new token. Based on your own unique model logic requirements, you will have to decide what kind of relationship this newly created token in the sub flow should have with the token that created it in the main process flow. There are three basic options: Independent Tokens - Created tokens will have no association with the original token. As soon as the token has created the independent token, it will move to the next downstream activity in the main process flow. Independent tokens could potentially copy the labels from the original token if needed. Child Tokens - Created tokens will be child tokens of the original token. The original token in the main process flow will become the parent token. Child tokens could potentially have read or write access to the labels on the parent token. Sibling Tokens - Created tokens will be sibling tokens of the original token. In other words, they will have the same parent as the original token. In this tutorial task, you'll work primarily with child and parent tokens. The child token in the sub flow will need to have access to the labels on the parent token in the main process flow. Step 1 Build the 3D Model In this step, you'll build a basic 3D model. When you're finished, your 3D model should look similar to the following image: To build this model: Drag the following objects from the Library and place them in the model in this order from left to right: 1 Source 1 Queue 1 Processor 1 Sink Move the objects so that they are roughly in the same layout as shown in the image at the beginning of this step. For clarity, rename the objects as follows: Object New Name Source1 Source Queue1 Queue Processor1 Processor Sink1 Sink Create port connections (A-connects) from: Source to Queue Queue to Processor Processor to Sink Check to make sure that your model looks similar to the image shown in the beginning of this section. Step 2 Add Activities to a Process Flow In this step, you'll add activities to a general process flow to build a process flow that will change the processor's process times. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Select General Process Flow . In Properties in the Process Flow Name box, delete the current text and rename the process flow ProcessingTimes . In the Library under the Display group, add 3 Container shapes to the new process flow. For clarity, rename the three Process shapes as follows: Fast Processing Times Slow Processing Times Override Processing Time From the Library, add the following activities to the Fast Processing Times shape: A Schedule Source activity (under Token Creation ) An Assign Labels activity (under Basic ) 3 Run Sub Flow activities (under Sub Flow ) For clarity, rename these activities as: Activity New Name Source Source: Start Simulation Assign Labels Assign Labels: Set to Fast First Run Sub Flow Run Sub Flow: Fast Time 1 Second Run Sub Flow Run Sub Flow: Fast Time 2 Third Run Sub Flow Run Sub Flow: Fast Time 3 Create a connector from the Source to the Assign Labels activity. (Hover your mouse over the bottom middle of the activity until your mouse changes to a connector icon. Click and drag the connector until it snaps to the other activity.) Join the Assign Labels and Run Sub Flow activities into a stacked block. From the Library, add the following activities to the Slow Processing Times shape: An Assign Labels activity (under Basic ) 2 Run Sub Flow activities (under Sub Flow ) For clarity, rename these activities as: Activity New Name Assign Labels Assign Labels: Set to Slow First Run Sub Flow Run Sub Flow: Slow Time 1 Second Run Sub Flow Run Sub Flow: Slow Time 2 Create a connector from the end of the stacked block in the Fast Processing Times shape to the first activity in the Slow Processing Times shape. Create a connector that loops from the end of the Run Sub Flow: Slow Time 2 activity back to the Assign Labels: Set to Fast activity. From the Library, add the following activities to the Override Process Times shape to create a stacked block: A Start activity (under Sub Flow ) A Wait for Event activity (under Basic ) A Finish activity (under Sub Flow ) For clarity, rename these activities as: Activity New Name Start Start Sub Flow Wait for Event Wait for Event: Process Time Finish Finish and Override Process Time Consider saving your simulation model. Step 3 Edit the Activity Properties In this step, you'll edit the properties for the activities in the process flow. The following is an overview of how each activity will function: Activity Explanation Source: Start Simulation This Scheduled Source activity will create one token as soon as the simulation starts and sends the token to the Assign Labels activity. After it creates this token, it won't create any additional tokens. The one token will simply loop continuously through the other activities until the simulation ends. You'll use the default properties for this activity. Assign Labels Activities Both of the Assign Labels activities will create and set a label called processTime that will be referenced by the sub flow as it controls the processor's process time. The first Assign Labels activity will set the label to 2 and the second activity will set it to 10 . Run Sub Flow Activities The Run Sub Flow activities will create a child token in the Start sub flow activity. The parent token will remain in the Run Sub Flow activity until the child token reaches the end of the sub flow. When the child token finishes the sub flow, the token will move to the next downstream activity. Start Sub Flow All Sub Flows need to begin with a Start activity, which receives the child token created by the Run Sub Flow activities. It then releases the child token to the next activity. Wait for Event: Process Time Wait for Event activities are event-listening activities. That means a token will wait at this activity until the event that is being listened to occurs. This activity will listen to the processor for the process time event. When the processor is ready to begin the process time, the token will get released to the Finish activity. You'll also set this activity to override the process time. Finish and Override Process Time The Finish activity will provide the processor with a process time return value. After it has provided this return value, it will destroy the child token and alert its parent token in the Run Sub Flow activity that the child token has finished the sub flow. To edit these properties: In the Properties for the Assign Labels: Set to Fast activity, click the Add button to add a new label. In the new label's Name box, delete the existing text and type processTime . In the Value box and type 2.00 to represent 2 simulation time units. How Will This Label Be Used? The processTime label will be referenced to override the process time of the processor. Repeat these steps for the Assign Labels: Set to Slow , except this time change the Value box to 10 to represent 10 simulation time units. Click the Run Sub Flow: Fast Time 1 activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. A blue line will appear to show that the activities are now linked. Click the Start Sub Flow activity to sample it. Repeat the previous steps for all the Run Sub Flow activities. Child and Parent Labels Notice that the Label Access on Parent Only checkbox is checked by default on Run Sub Flow activities. This checkbox restricts access to the labels on the child tokens, meaning the labels will not be copied to the child token. In this case, the processTime label will stay on the parent token, but the child token will be able to reference the value of that label. Click the Wait for Event: Process Time activity to select it. Click the Exclamation Point button next to this activity to enter sampling mode. In the 3D model, click the Processor to open a menu. Select Processor: Process Time from the menu to sample this event. The name of the processor will now appear next to the activity to show that they are linked. In Properties for the Wait for Event: Process Time activity, check the Will Override Return Value checkbox. Click the Finish and Override Process Time activity to select it. In Properties, click the arrow next to the Return Value box to open a menu. Point to Token Label , then select processTime . How Does the Return Value Override Work? Normally, event-listening activities trigger a series of events that occur independently of the rest of the activities in a process flow. Checking the Will Override Return Value box on the event-listening activity signals that it will override the return value for this event. The Finish activity eventually provides the return value using the processTime label on the parent token. Consider saving your simulation model. Step 4 Run the Model Reset and run the model. You'll notice that Source creates a token at time 0, then the token enters the Set to Fast Time activity and its processTime label is set to 2. The token then moves to the first Fast Time 1 activity where a child token is created and sits at the Wait for Process Time activity in the sub flow. As soon as the processor in the model receives an item, the Wait for Event releases the token and the process time is overridden. The child token is then destroyed and the parent token moves to the next Run Sub Flow activity to start the sub flow over again. This will continue as each item enters the processor. Once the token finishes Slow Time 2, it will move back to the top to continue the pattern again. If you were to pause the simulation and click one of the tokens in the sub flow, you'd see a blue line showing the parent-child connection between tokens: Not only was the logic easily created without any coding, but you can also visibly see where the processor is in its set of process times. This can be a valuable debugging tool or it can be useful for collecting statistics. Statistics could be gathered separately or collectively for an activity or area to record how long the processor spent in any given state. Conclusion In the next tutorial task, you'll learn about another way to build sub flows by adding multiple finish activities. Continue on to Tutorial Task 3.2 - Add Multiple Finish Activities ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial3SubProcessFlows/3-2AddMultipleFinish/3-2AddMultipleFinish.html",
        "title": "Tutorial Task 3.2 - Add Multiple Finish Activities",
        "content": "Task Overview One of the nice things about building model logic in process flow is that there is often more than one way to build the same logic. In this tutorial task, you'll build a slightly different version of the model you built in the previous tutorial task. In this model, you'll base the processor's process time on the type of flow item it is processing. Flow items with a product type of 1 will be assigned a faster process time than flow items with a product type of 2. You'll also assign different colors to the flow items based on their product type. You'll create this logic by adding a Decide activity in the sub flow that will send tokens to one of two Finish activities based on the value of the productType label on the tokens. The two Finish activities will assign a different processing time to the flow item. When you're finished, your 3D model and process flow will look similar to the following image: Step 1 Add and Rename Activities in the Process Flow In this step, you'll make a few changes to add a few more activities to the process flow that will control the processor's changing process times. When you're finished, your process flow should look similar to the following image: For now, you'll merely add, rename, and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: Click the stacked block in the Override Processing Times shape to select it. Click the Scissors button between the Wait for Event: Process Time and the Finish and Override Process Time activity to separate them. From the Library, add a Decide activity (under Basic ) to the end of the Wait for Event: Process Time activity's stacked block. Add 2 Change Visual activities and position them side by side below the stacked block. (Do not connect them to the stacked block.) Move the Finish and Override Process Time activity to the end of the first Change Visual activity to create a stacked block. From the Library, add a second Finish activity to the end of the second Change Visual activity to create a second stacked block. For clarity, rename these activities as: Activity New Name Decide Decide by ProductType First Change Visual Change Visual: Red Second Change Visual Change Visual: Blue First Finish Finish ProductType1 Second Finish Finish ProductType2 Create a connector going from the Decide by ProductType activity to the Change Visual: Red activity. Repeat the previous step to create a connector to the Change Visual: Blue activity as well. For clarity, rename the following activities in the rest of the process flow: Activity New Name Assign Labels: Set to Fast Assign Labels: Set ProductType to 1 Assign Labels: Set to Slow Assign Labels: Set ProductType to 2 Consider saving your model. Step 2 Edit the Activity Properties In this step, you'll edit the properties for the new activities in the process flow. The following is an overview of how each activity will function after this step: Activity Explanation Assign Labels Activities In the previous tutorial task, both of the Assign Labels activity will create and set a label called processTime . In this step, you'll remove this label and change it to productType that will be referenced by the sub flow as it controls the processor's process time and visuals. The first Assign Labels activity will set the label to 1 and the second activity will set it to 2 . Wait for Event: Process Time This activity will still listen to the processor for the process time event. However, you'll also add a label named MyItem that contains a reference to the item that triggers this event. Decide by ProductType This activity will evaluate the productType label and send tokens with a productType of 1 to the first Change Visual activity and those with a producType of 2 to the second Change Visual activity. Change Visual Activities These activities will change the color of the flow items to blue or red based on their productType. Finish Activities In the previous activity, the Finish activity referenced the processTime label to provide the processor with a process time return value. This time, you'll change the values to static values. The first Finish activity will assign a return value of 2 and the second will assign a return value of 10 . To edit these properties: In the Fast Processing Times shape, click the Assign Labels: Set ProductType to 1 activity to select it. In Properties, delete the current text that is in the Name box and type productType instead. In the Value box, delete the current text and type 1.00 instead. Repeat the previous steps for the Assign Labels: Set ProductType to 2 activity but instead change the Value to 2.00 . In the Override Processing Times shape, click the Wait for Event: Process Time activity to select it. In Properties, find the Label Matching/Assignment table. In the Item row under the Label Name column, type MyItem . Click in the cell under the Operation column to open a menu. Select assign . What Does the Label Matching/Assignment Table Do? Object-based events have specific parameters associated with them. These parameters contain basic information about the event, such as which flow item or token triggered the event. You can use the Label Matching/Assignment table to preserve any relevant information from these parameters with a custom label. In this example, the Wait for Event activity will release the token every time a flow item triggers the process time event. You'll use the Item parameter to add a label called MyItem on the current token that contains a reference to the created flow item that triggered this event. This label links the token to the flow item and you'll reference it to change the item's color. Click the Decide by ProductType activity to select it. In Properties, click the arrow next to the Send Token To box to open a menu. Point to Token Label , then select productType . Double Check Your Outgoing Connector Rankings Decide activities use connector rankings similar to the way 3D objects use port rankings. The Decide activity will send tokens with a ProductType of 1 to the first connector and those with a type of 2 to the second connector. Make sure that connector 1 goes to the Change Visual: Red activity. Click the Change Visual: Red activity to select it. In Properties, click the Add button to open a menu. Select Set Object Color to open some picklist options. In the Object box, delete the current text and type token.MyItem . Click the arrow next to the Color box to open a menu. Select Red . Repeat the previous steps for the Change Visual: Blue activity, but instead select Blue . Click the Finish ProductType 1 activity to select it. In Properties, in the Return Value box, delete the current text and type 2.00 . (Notice this is the same fast processing time used in the previous tutorial task.) Repeat the previous steps for the Finish ProductType 2 activity, instead changing the Return Value to 10.00 . Consider saving your model. Step 3 Run the Model Reset and run the model. You'll notice now that the processing times are determined by the productType label, with the fast items having a type 1 and colored red and slow items having a type of 2 and colored blue. Adapting This Model for Future Use Keep in mind that the Override Return Value functionality only works if there are activities that don't delay the token from the moment it leaves the Wait for Event activity and enters the Finish activity. In this case, the Change Visual activity implements its logic instantly so it doesn't interrupt the processor's immediate need for a return value. If you were to put a Delay activity after the Change Visual activity, it would mess up the model's functionality. Conclusion This concludes the Sub Flow tutorial. Hopefully you can see the many potential uses of sub flows to create simple but effective and customizable logic. For example, it would be easy to build off this basic sub flow to add more custom logic. You could see how you could add a task sequence sub flow in between the fast and slow items to simulate product changeover times."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial4Instances/InstancesOverview/InstancesOverview.html",
        "title": "Tutorial 4 - Process Flow Instances",
        "content": "In this tutorial, you will build a 3D model and process flow that will simulate a workstation in which a sticker machine affixes a sticker to a product as it comes through the production line. When the sticker machine depletes a roll of stickers, the machine operator needs to get a new sticker roll from storage and then install the new roll on the machine. In order to reduce machine changeover times, the machine automatically switches to the second sticker roll when the first roll is depleted. While the second roll is in use, the machine operator will get the new sticker roll and install it before the machine needs to switch back to the first roll. If the second roll is depleted before a new roll is retrieved, the sticker machine must stop until it has at least one roll. The plant you are trying to simulate needs 8 different sticker machines. This tutorial will teach you some best practices that will make the task of cloning sections of a model much easier. In particular, it will give you a deeper understanding of how process flow instances can help you simplify your models. Lastly, this tutorial will also demonstrate how easy it is to create this kind of complex logic in FlexSim using the Process Flow tool. Tasks Covered This tutorial will cover the following tasks: Task 4.1 Build the 3D Model and Process Flow In this task, you will build the basic 3D model and process flow of your sticker system. This model will form the basis for the rest of the tasks in this tutorial. Task 4.2 Create Clones Using Copy and Paste Because you need to simulate a plant that has multiple sticker machines, you'll need to make clones of the objects in your 3D model as well as the process flows that control them. This task will guide you through the method that most people intuitively consider using when they need to make clones: copy and paste. This task will teach you some best practices that can be useful if you intend to use the copy and paste method. Task 4.3 Create Clones Using Instances In this task, you'll learn a more efficient method for creating clones using process flow instances. This tutorial task will explain some of the key concepts related to these two tools. It will also demonstrate how different process flow instances work during a simulation run. Task 4.4 Change Instances Simultaneously In this task, you'll improve your original object process flow so that it will include an animation of the sticker rolls as they are being transported and loaded by the RollOperator. As the sticker machine uses the rolls, they will shrink in size. You'll also see how easy it is to make major modifications to a fixed resource process flow and update all attached instances simultaneously. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Types of Process Flows Process Flow Instances"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial4Instances/4-1BuildModel/4-1BuildModel.html",
        "title": "Tutorial Task 4.1 - Build the 3D Model and Process Flow",
        "content": "Task Overview Your goal in this task is to build a 3D model and process flow that will simulate a workstation in which a sticker machine attaches a sticker to a product as it comes through the production line. (See the Tutorial Overview for more detailed information about this simulation model.) In this task, you will build the first phase of your 3D model of the sticker system and create the basic logic that will control the 3D model using the Process Flow tool. Step 1 Build the 3D Model In this step, you'll add the basic objects that will represent your production line in your 3D simulation model. Then, you'll add the objects you'll need to simulate the tool changeover when an employee replaces a roll of stickers on the sticker machine. When you're finished, your model will look like this: To create this model: First you'll create the main production line for your business system. With the Library open, drag the following objects into your 3D model in this order: Source Queue Processor Sink Create port connections (A-connects) between each of these objects in the order you added them to the model: Next, add an additional Queue which will act as a storage area for the sticker rolls. Place the Queue a short distance from the Processor in the model. Add an Operator to the model. The Operator will replace the sticker rolls with a new roll once they've been depleted. Place the Operator somewhere between the Processor and the Queue. For clarity, rename the following objects: Object New Name Processor StickerMachine Queue (the second one) RollStorage Operator RollOperator Check to ensure that your model looks similar to the image of the model shown in the beginning of this step. Step 2 Add Activities to the Roll Refill Process Flow In this step, you'll add the activities that will control the logic of the sticker roll refill process flow. You'll also add a list (a shared asset) to your process flow. For now, you'll only add the activities, rename them, and create connections between them. You'll change the property settings for the activities in a later step. When you're finished, your process flow should look like this: To create this process flow: On the main toolbar, click Process Flow , then select Add a General Process Flow . In the Process Flow Library , drag a Container shape (under Display ) into your process flow. Rename this shape as Sticker Roll Refill . Inside the new shape, add the following activities in this order (without connecting them or making them stacked blocks): Schedule Source (under Token Creation ) Push to List (under Shared Assets ) Create Task Sequence (under Task Sequences ) 2 Travel activities (under Task Sequences ) Finish Task Sequence (under Task Sequences ) Add a List asset (under Shared Assets ) below the Sticker Roll Refill shape. (It will be outside of the shape because this list will be used by multiple activities in the process flow.) Rename the following activities and assets: Object New Name Source Source: Starting 2 Rolls Push to List Push to List: Sticker Rolls Create TS Create TS: Get New Roll Travel (the first one) Travel: Pick Up Roll Travel (the second one) Travel: Install New Roll List List: Sticker Rolls in Use Resize the activities to display their full names if needed. Join the Create TS: Get New Roll activity and the two Travel activities together in a stacked block. Create connections from the Source to the Push to List , then another connection from Push to List to the stacked block with the Travel activities. Create a connection from the stacked block to the Push to List activity. Consider saving your simulation model. Step 3 Build the Roll Refill Logic In this step, you will edit the properties for the activities you added in the previous step. The following table provides an overview of how the activities in the Sticker Roll Refill process flow will function: Activity Explanation Schedule Source: Starting 2 Rolls When the simulation model begins, this activity creates tokens to represent the first two rolls of stickers on the sticker machine in the 3D model. When the Schedule Source creates these two tokens, it will add a label called rollQuantity that will represent the number of stickers that are on the sticker roll when it is first installed on the machine. The rollQuantity label will start with an initial value of 20 stickers. Push to List: Sticker Rolls When a new roll is installed on the sticker machine, that roll is added to the List: Sticker Rolls in Use. When a roll is empty (because the rollQuantity has been reduced to 0), the token will move to the Travel: Get New Roll activity. Create TS: Get New Roll When a roll of stickers is empty, this activity will create a new task sequence, which is a series of tasks that will be assigned to the RollOperator. This new task sequence will be called getRoll . By creating a new getRoll task sequence every time a roll of stickers is empty, you'll prevent the RollOperator from being interrupted or diverted to work on other tasks while it is picking up and installing the new roll of stickers. Travel: Pick Up Roll This activity will add a travel task to the getRoll task sequence. In this task sequence, the RollOperator will travel to the RollStorage queue to get a new roll of stickers. Travel: Install New Roll This activity will add a second travel task to the getRoll task sequence. After the RollOperator travels to the RollStorage queue, it will return to the sticker machine and install the new roll of stickers. The token will then loop back to the Push to List activity and the cycle will repeat itself indefinitely. Finish TS This activity declares the sequence of tasks as finished. List: Sticker Rolls in Use You'll add an additional field to this list that will track and update the rollQuantity label. Every time a flow item is processed by the sticker machine in the 3D model, the list will reduce the rollQuantity by 1. Keep in mind that this list will interact with both the Roll Refill and the Roll Usage process flows at the same time. To create this functionality: Click the Schedule Source to select it. In Properties: Under Arrivals , double-click the cell under the Quantity column and type 2 . Under Assign Labels to Created Tokens , click the Add button to add a new label. In the Name box, type rollQuantity . In the Value box, type 20.00 . Click the Push to List activity to select it. Then click the No Link icon to enter sampling mode. Click the List: Sticker Rolls in Use to link them together. Click the stacked block of Task Sequence activities to select them. In Properties under Create TS: Get New Roll : Find the Executer/Task Sequence box. Click the Sampler button next to this box to enter sampling mode. Click the RollOperator in the 3D model to open a menu. Select RollOperator to assign the task sequence to this operator. Next you'll change the name of the label that contains the task sequence. Click inside the box underneath the Assign To option and type Label: getRoll . In Properties under Travel: Pick Up Roll : Click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label , then select getRoll . Find the Destination box. Click the Sampler button next to this box to enter sampling mode. Click the RollStorage queue in the 3D model to open a menu. Select RollStorage to select the queue as the travel destination. In Properties under Travel: Install New Roll : Click the arrow next to the Executer / Task Sequence box to open a menu. Point to Token Label , then select getRoll . Find the Destination box. Click the Sampler button to enter sampling mode. Click the StickerMachine processor in the 3D model to open a menu. Select StickerMachine to select the machine as the travel destination. In the Properties under Finish TS : Click on the box below Task Sequence and enter token.getRoll . Lastly, you'll set up the properties for the list. Click the Sticker Rolls in Use list to select it. In Properties: Click the Advanced button to open up the advanced list properties. You'll add a field to this list that will reference and update the rollQuantity label. With the Field tab open, click the Add button to open a menu. Select Label . In the Label Field box, type rollQuantity . Make sure the Dynamic checkbox is cleared, then click OK to save the changes. Consider saving your simulation model. Step 4 Add Activities to the Roll Usage Process Flow In this step, you'll add the activities that will control the logic of the sticker roll usage process flow. For now, you'll only add the activities, rename them, and create connections between them. You'll change the property settings for the activities in a later step. When you're finished, your process flow should look like this: To create this process flow: In Process Flow Library, drag a Container shape (under Display ) into your process flow. Rename this shape as Sticker Roll Usage . Create a stacked block with: Event-Triggered Source (under Token Creation ) Pull From List (under Shared Assets ) Underneath the first stacked block, create another stacked block with: Custom Code (under Basic ) Another Pull From List Another Custom Code Add a Sink activity underneath the second stacked block. Rename the following activities: Object New Name Source Source: Flow Item Enters Pull from List Pull from List: Sticker Rolls Custom Code Custom: Stop Machine Pull from List Pull from List: Sticker Rolls Custom Code Custom: Resume Machine Sink Sink: Flow Item Exits Create a connection from the first stacked block to the Sink activity. Click the connection you just created to select it. In Properties in the Name box, type Succeed . Adjusting the Position and Font Size of the Connection Name You can click the connection name and drag it to the outside of the connecting arrow to make it more visually appealing if needed. You can also adjust the font size of the text in Properties if needed. (The images in this step use a font size of 18.) Create a connection from the first stacked block to the stacked block directly below it. Click the connection you just created to select it. In Properties in the Name box, type Fail . Make Sure Your Connectors Are Ranked Correctly In order for your process flow to function correctly, make sure that the Succeed connector is ranked 1 and the Fail connector is ranked 2. To check the rankings, click the connector and look at the number displayed in the Rank box in Properties. Use the arrows next to this box to change the connector's rank. Create a connection from the second stacked block to the Sink activity. Consider saving your simulation model. Step 5 Build the Roll Usage Logic In this step, you will edit the properties for the activities you added in the previous step. The following is an overview of how the activities in the Sticker Roll Usage process flow will function: Activity Explanation Event-Triggered Source: Flow Item Enters This activity will listen to the sticker machine in the 3D model. Every time a flow item enters the sticker machine, it will create a new token to represent and track that specific flow item. Pull from List: Sticker Rolls This activity will pull from the List: Sticker Rolls in Use. When it does so, the list will reduce the quantity of the rollQuantity label by 1. (This label is on the tokens that represent the two rolls of labels in the Roll Refill process flow.) If the rollQuantity is 0 (because the roll is empty and a replacement roll hasn't been installed yet), the token will fail and it will be sent to the Custom Code: Stop Machine activity. If the rollQuantity is not 0, it will succeed (simulating that the sticker machine successfully affixes the sticker to the flow item) and the token will be sent to the Sink activity. List: Sticker Rolls in Use Every time a flow item is processed by the sticker machine in the 3D model, the list will reduce the rollQuantity by 1. Keep in mind that when the rollQuantity reduces to 0, it will also simultaneously trigger the travel task sequences in the Roll Refill process flow. In other words, once the roll is empty, the RollOperator will travel to the RollStorage queue to pick up another roll. Custom Code: Stop Machine This activity will stop the sticker machine if both rolls of stickers are empty on the machine. The token will then move to the next activity in this sequence. Pull from List: Sticker Rolls While the token is in this activity, it will continually attempt to pull from the List: Sticker Rolls in Use. If it fails, it will remain in this activity and try again. It will not succeed until the RollOperator installs a new roll on the sticker machine and the rollQuantity label returns to 20. After this token successfully pulls a sticker from the list, it will move to the next activity in the sequence. Custom Code: Resume Machine This activity that will restart the sticker machine after the RollOperator installs a new roll of stickers on the machine. Sink: Flow Item Exits This activity will remove the token from the process flow once the flow item exits the sticker machine. To create this functionality: Click the first stacked block in the Sticker Roll Usage shape to select it. Next to the Source: Flow Item Enters , click the No Link icon to enter sampling mode. Click the StickerMachine in the 3D model to open a menu. Select StickerMachine: On Entry . Notice that the following properties automatically update in Properties: With the first stacked block still selected, click the No Link icon next to the Pull from List: Sticker Rolls activity to enter sampling mode. Click the List: Sticker Rolls in Use to link them together. In Properties of List: Sticker Rolls in Use , press Advanced to open that list's full properties window. Go to the General tab. Clear the Assign SELECT Values to Puller Labels checkbox, and check the Use First SELECT Value as Quantifier checkbox. Press OK to apply and close the properties window. In Properties of the Pull from List: Sticker Rolls activity: Click the arrow next to the Query box to open a menu. Point to SELECT , then select rollQuantity . What does SELECT mean? Normally when you pull from a list, you pull a token from a list. However, given the Use First SELECT Value as Quantifier setting defined above, if you use the SELECT clause, it will select a label on the token and pull a quantity from that label instead. So, in this case, the Pull From List activity will pull from the rollQuantity label, reducing its count by 1. This action simulates the sticker machine affixing a sticker from the roll onto the flow item, which depletes the number of remaining stickers on the roll. Check the Use Max Wait Timer box. After clicking this box, an additional set of properties will appear underneath this checkbox. What will the Max Wait Timer do? The Max Wait Timer will fire if the token is unable to pull a sticker from the roll (because the rollQuantity is 0). This property determines what will happen if the query fails. In this process flow, you'll set it to fire immediately after it fails (so you'll leave the Time property set to 0). And you'll send failed tokens to the outgoing connector named Fail . Next to the OnWaitTimerFired box, click the Edit Properties button to edit the actions that will occur when tokens fail. Click the arrow next to the Release Token action to expand its properties. In the Destination box, type \"Fail\" . NOTE: Typing 2 as the Destination would have the same effect since this is the connector ranked 2. Click the second stacked block in the Sticker Roll Usage shape to select it. In Properties under Custom Code: Stop Machine : Click the Add button next to the Custom Code box to open a menu. Point to Control , then select Stop Object . The Stop Object properties will open. Click the Sampler button next to the Object box to enter sampling mode. Click the StickerMachine in the 3D model. With the second stacked block still selected, click the No Link icon next to the Pull from List: Sticker Rolls activity to enter sampling mode. Click the List: Sticker Rolls in Use to link them together. In Properties under Pull from List: Sticker Rolls , click the arrow next to the Query box to open a menu. Point to SELECT , then select rollQuantity . In Properties under Custom Code: Resume Machine : Click the Add button next to the Custom Code box to open a menu. Point to Control , then select Resume Object . Click the Sampler button next to the Object box to enter sampling mode. Click the StickerMachine in the 3D model. Consider saving your simulation model. Step 6 Run the Simulation Model Now it's time to test the model to make sure that it's running correctly. Before you run the model, open the entries for the Sticker Rolls in Use List so that you can see the list in action: Click the List: Sticker Rolls in Use to select it. In Properties, click the View Entries button to open the list entries. It will be blank before you run your model. Splitting the List Entry Pane Consider splitting the list entries pane with the 3D model while you run your simulation model. This will help you view all the components of your simulation model in action at the same time. See Arranging Windows and Tabs for more information. Now reset and run your model and watch it in action. As you run the model: The two rolls of stickers appear in the Sticker Roll Refill process flow. As each flow item enters the sticker machine, the rollQuantity reduces by 1. When one roll reaches 0, it disappears from the list and the RollOperator travels to the RollStorage queue for another roll. While the RollOperator is traveling, the sticker machine begins using stickers from the second roll of stickers. After the RollOperator installs the roll on the sticker machine, it appears on the list again and the process repeats itself. Since the RollStorage queue is fairly close to the sticker machine, the RollOperator always successfully installs the new roll before the second roll is depleted. But if you want to see the sticker machine stop when it runs out of stickers, try moving the RollStorage queue far away from the sticker machine and/or reduce the number of stickers on a roll (by reducing the starting number on the rollQuantity label in the Schedule Source). Conclusion Now that you've built the basic 3D model and process flow for your sticker system, it's time to make clones of the sticker systems. The next two tasks in this tutorial will compare and contrast different methods for creating clones of 3D models and process flows. When you complete those tasks, you'll have a better understanding of why it's more effective to use process flow instances to create clones. Continue on to Tutorial Task 4.2 - Create Clones Using Copy and Paste ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial4Instances/4-2CopyPaste/4-2CopyPaste.html",
        "title": "Tutorial Task 4.2 - Create Clones Using Copy and Paste",
        "content": "Task Overview In the previous tutorial task , you built a sticker machine that could run continuously while a roll operator refilled rolls of stickers. Now that you've successfully created one sticker machine system, you need to simulate a plant that has multiple sticker machines. That means you'll need to make clones of the objects in your 3D model as well as the process flows that control them. There are many different ways you can clone objects and process flows in a simulation model, but some methods are more efficient than others. This task will guide you through the method that most people intuitively consider using when they need to make clones: copy and paste. This task will teach you some best practices that can be useful if you intend to use the copy and paste method. The copy and paste method will work well for small models or simple process flow logic. However, by the time you are finished with this task, you might begin to see how the copy and paste method can become difficult to manage and scale once you begin building complex simulation models. The next tutorial task will teach an alternative method that uses process flow instances to clone process flow logic on multiple objects. Step 1 Copy and Paste Multiple 3D Objects The first two steps in this task will cover the copy and paste method for cloning 3D objects and process flows. In this step, you'll learn how to copy multiple 3D objects and process flows at the same time. This step of the task will also demonstrate how to use a few visual objects and tools to organize your different sticker machine systems so that you don't confuse one system for another. One visual object that you'll use in this step is the plane . Planes are useful because: They can act as containers for objects in the 3D model, making it easier to maintain the model. When you set up a plane as a container, you can move, copy, or delete all the objects inside the plane at the same time. You can use a plane as a visual reference to organize sections of your 3D model. You can change the color of planes to distinguish one area in your model from another, which also helps with model maintenance. In this step, you'll use a plane to make the process of copying your sticker systems a little easier. You'll also use planes to visually distinguish one sticker system from another. When you're finished with this step, your 3D model should look approximately like the following image: To copy your sticker system: Make sure your simulation model is open and that you can clearly see the 3D model view. In the Library under the Visual group, drag a Plane into your model and position it under the objects. Click the plane to select it. Using the colored cones, resize the plane so that it is centered underneath all the objects, except the RollOperator and RollStorage queue. You Won't Copy the RollOperator and RollStorage You won't make a copy of the RollOperator and RollStorage queue because these two objects will be a shared resource between the different sticker machine systems. In your 3D model, hold the Shift key and draw a box over all the objects to select them. A red box will appear around the selected objects. Hold the Ctrl key and click the Plane to deselect it. It will still have a yellow border around it to indicate that it is the currently highlighted. On the main menu, click View , then Edit Selected Objects . This tool will open in the right pane (where you normally see Properties). Under the Edit group, click the Move into Highlighted button. Recentering the 3D Objects If your objects suddenly get de-centered, click them while they still have the red highlighting and recenter them on the plane. Click the X in the corner of the Edit Selected Objects pane to close this tool and return to Properties. Hold the Shift key and click in a blank area of the model to deselect the objects. Test to ensure that you successfully moved the objects into the plane by clicking the plane and moving it around. If you were successful, all the objects should move together when you move the plane. Move the plane so that it is to the right of the RollOperator and RollStorage queue. In the 3D model, hold the Shift key and draw a box around the Plane and all the objects inside it. A red box will appear around the selected objects. Press Ctrl+C to copy it to the clipboard. Position your mouse in the approximate area of the model where you want to place the copied objects. Press Ctrl+V to paste the plane. Hold the Shift key and click in a blank area of the model to deselect the objects. Click the second Plane to select it. In Quick Properties, change its name to Plane2 . Then, click the arrow next to the color box to open the color selector. Select the lightest blue color. Rename all of the objects inside Plane2 so that there is a 2 after the object name. For example, Source should become Source2 , Queue should become Queue2 , etc. Check that your 3D model looks similar to the image at the beginning of this step. Step 2 Copy and Paste the Process Flows Now that you've successfully copied your 3D objects, you'll copy the process flows in this step. You'll update the actual activity properties in a later step. This step will also demonstrate other visual tools that you can use to keep your process flows organized and easy to maintain. Fortunately, container shapes act just like planes do in the 3D model: they can act as containers so that you can easily move, copy, or delete all the activities inside the shape. Like planes, you can change the visual display of container shapes to help you keep your process flow well-organized. In this step, you'll change the color of the copied shapes to match the light blue color of the second plane you created in the 3D model in Step 1. When you're finished, your copied process flows should look like the following image: To create these copies: With the process flow open, click the Sticker Roll Refill shape to select it. Press Ctrl+C to copy it to the clipboard. Position your mouse in the approximate area of the process flow where you want to place the copied shape. Press Ctrl+V to paste the shape. Rename this shape Sticker Roll Refill 2 . With Sticker Roll Refill 2 still selected, in Properties check the Fill checkbox. Click the arrow next to the Color box to open the color selector. Select the lightest blue color (to match the color of Plane2 ). Repeat steps 1-6 for the Sticker Roll Usage shape (renaming it Sticker Roll Usage 2 ). Click the List: Sticker Rolls in Use to select it. Press Ctrl+C to copy it to the clipboard. Position your mouse in between Sticker Roll Refill 2 and Sticker Rolls Usage 2 . Press Ctrl+V to paste the list. Rename the list List 2: Sticker Rolls in Use . Check that your process flow looks similar to the image at the beginning of this step. Step 3 Update the Copied Process Flow Activities In this step, you'll update the properties of the activities in the copied process flows. Be aware that you might want to split the model view between the process flow and the 3D model for this step. Challenge Yourself As a challenge, you might want to see if you can figure out all the different properties that you'll need to update on these activities before reading the steps in this section. Then try running the model before reading on to see if you remembered all the properties that needed to be updated. To update the properties in this process flow: In the Sticker Roll Refill 2 process flow, click the Push to List: Sticker Rolls . (Notice that it is still linked to the list in the original process flow.) In Properties: Click the Sampler button next to the List Reference box to enter sampling mode. Click List 2: Sticker Rolls in Use to link it to the Push to List activity. Repeat the previous step for the two Pull from List activities in the Sticker Roll Usage 2 process flow. Click the stacked block of Task Sequence activities in the Sticker Roll Refill 2 process flow to select them. In Properties under Travel: Install New Roll , click the Sampler button next to the Destination box to enter sampling mode. Click StickerMachine2 in the 3D model to open a menu. Select Plane 2/StickerMachine2 from the menu. Click the first stacked block in the Sticker Roll Usage 2 process flow to select it. In Properties under Source: Flow Item Enters : Click the Sampler button next to the Object button. Click StickerMachine2 in the 3D model to open a menu. Select StickerMachine2: On Entry from the menu. Click the second stacked block in the Sticker Roll Usage 2 process flow to select it. In Properties under Custom: Stop Machine : Click the Edit Properties button next to the Custom Code box. Click the Sampler button next to the Object box to enter sampling mode. Click StickerMachine2 in the 3D model to select it. Repeat the previous step for the Custom Code: Resume Machine activity. Update the Custom Code Properties Sticker Roll Usage 1 Most of the properties in FlexSim automatically update when you put objects into a plane, but the Custom Code activities unfortunately don't update automatically. Repeat the previous two steps for the Custom Code activities in the Sticker Roll Usage 1 to avoid having problems when you run your simulation model. Step 4 Run and Test the Simulation Model Now it's time to test the model to make sure that it's running correctly. Before you run the model, open the entries for both of the Sticker Rolls in Use List so that you can see the lists in action. View List Entries To open the entries, click on each list. Then in Properties, click the View Entries button. Now reset and run your model and watch it in action. The two sticker machine systems should operate nearly identically. Minor Differences in Models You might notice some minor differences between the two sticker systems. The sources and sticker machines are using different number streams to generate random distributions so one queue might be larger than another or one operator might refill the roll faster than the other one. Conclusion Now that you've tried cloning your simulation model using the cut and paste method, you are probably aware of some of its advantages and disadvantages. In the next task, you'll learn an alternative method for cloning simulation models using process flow instances . Hopefully after the next step, you'll see how using process flow instances is superior to the cut and paste method. Continue on to Tutorial Task 4.3 - Create Clones Using Instances ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial4Instances/4-3Instances/4-3Instances.html",
        "title": "Tutorial Task 4.3 - Create Clones Using Instances",
        "content": "Task Overview In the previous tutorial task , you used the copy and paste method to create one clone of your sticker system. While the copy and paste method is intuitive, it doesn't scale well for large models. Not only is it tedious to update all the properties of every clone, it also greatly increases the chance that you might forget to update a specific property. Failing to update one or more properties could cause your model to break and increase the amount of time needed to troubleshoot the model. In this task, you'll learn a more efficient method for creating clones using process flow instances. The following subsections will explain some of the key concepts related to these two tools. Key Concepts About Process Flow Instances As you know, process flows control the logic of your simulation system. In the first tutorial task , you created a general process flow . General process flows are useful for creating the global logic that will affect multiple objects in your 3D model. However, if you may have noticed, the process flow logic you created in the previous tutorial tasks primarily controls the sticker machine, which is a fixed resource object. For that reason, it might be better to use an object process flow . Fixed resource process flows allow you to attach a fixed resource object to a specific process flow and run its own instance of that process flow. In other words, you could attach each sticker machine to an object process flow and each individual machine will run its own copy of the process flow logic. Think of the object process flow as the template for all the different copies of the logic that will be running on each processor. See Types of Process Flows and Process Flow Instances for more information. In this tutorial task, you'll copy the logic from your general process flow into a fixed resource process flow and then attach a clone of your sticker machines to it. After you test the new process flow to ensure it's working, you'll then create additional clones (instances) of this process flow by attaching additional sticker machine clones to it. By the time you're finished with the next two tutorial tasks, you should have a fairly good understanding of the practical applications for process flow instances. Global Versus Local When something in a process flow is global , that means it is accessible to all instances of the process flow. For example, if a list is globally defined, all the tokens from each instance will be pushed and pulled from one big list. When something in a process flow is local , that means it is accessible only to each specific instance of the process flow. For example, if a list is locally defined, all the tokens from each instance can only be pushed and pulled from the instance's specific list. Other objects outside that instance will not be able to pull from the local list. Step 1 Create Another Clone of the 3D Objects In this task, you'll create an additional clone of the sticker system. When you're finished, your new sticker system should look like the following image: To create this copy: In the 3D model, hold the Shift key and draw a box around Plane2 and all the objects inside it. A red box will appear around the selected objects. Press Ctrl+C to copy it to the clipboard. Position your mouse in the approximate area of the model where you want to place the copied objects. Press Ctrl+V to paste the plane. Hold the Shift key and click in a blank area of the model to deselect the objects. Make sure the third Plane is selected. In Properties, change its name to Plane3 . Then, click the arrow next to the color box to open the color selector. Select the lightest green color. Rename all of the objects inside Plane3 so that there is a 3 after the object name. For example, Source should become Source3 , Queue should become Queue3 , etc. Check to make sure your 3D model looks similar to the image at the beginning of this step. Step 2 Create an Object Process Flow In this step, you'll create the new object process flow. Then, you'll copy all the activities from the general process flow over to the new process flow. Lastly, you'll attach Sticker Machine 3 to this process flow: On the toolbar, click the Process Flow button to open a menu. Point to Add an Object Process Flow , then select Blank . In Properties, double-click the text in the name box. Type Sticker Roll Logic and press Enter to change the name of the process flow. Click the ProcessFlow tab to return to your original process flow. Click the Sticker Roll Refill shape to select it. Press Ctrl+C to copy it to the clipboard. Click the newly created Sticker Roll Logic tab. Position your mouse in the approximate area of the process flow where you want to place the copied shape. Press Ctrl+V to paste the shape. Repeat steps 2-5 for the List: Sticker Rolls in Use asset and the Sticker Roll Usage shape. Click inside a blank space on the Object Process Flow to ensure nothing is selected and this process flow is active. In Properties: Under Attached Objects (instances) click the Sampler button to enter sampling mode. In the 3D model, click StickerMachine3 to attach it to this process flow. Consider saving your simulation model. Step 3 Edit the Process Flow Activities In this step, you'll update the properties in your process flow so that it can easily be applied to multiple process flow instances at one time. You'll update the List: Sticker Rolls in Use so that it is a local list rather than a global list. In this step, you'll use the current keyword for the first time. The current keyword references a token's instance object. In this case, you'll use the keyword current to set the Roll Operator's destination when it is ready to load a new sticker roll onto the sticker machine. Using current will tell the Roll Operator to travel to the object that is attached to this specific instance of the process flow. Using this keyword will ensure that the destination changes based on which sticker machine is attached to a specific instance. To create this functionality: In the Sticker Roll Logic object process flow, click the List: Sticker Rolls in Use asset to select it. In Properties: Click the Type menu and select Local . In the Sticker Roll Refill shape, click the Push to List: Sticker Rolls to select it. (Notice that this activity is still linked to the list in the original process flow.) In Properties: Next to the List Reference box, click the Sampler button to enter sampling mode. Click List: Sticker Rolls in Use to link it to the Push to List activity. Repeat the previous steps for the two Pull from List activities in the Sticker Roll Usage process flow. Click the stacked block of Task Sequence activities in the Sticker Roll Refill process flow to select them. In Properties under Travel: Install New Roll , click the arrow next to the Destination box to open a menu. Select current (instance object) from the menu. Click the first stacked block in the Sticker Roll Usage process flow to select it. In Properties under Source: Flow Item Enters : Click the arrow next to the Object button to open a menu. Select current (instance object) from the menu. Click the second stacked block in the Sticker Roll Usage process flow to select it. In Properties under Custom: Stop Machine : Click the Edit Properties button next to the Custom Code box. Click in the Object box, delete the current text and type current . Repeat the previous step for the Custom Code: Resume Machine activity. Consider saving your simulation model. Step 4 Run and Test the Simulation Model Now it's time to test the model again to make sure that it's running correctly. Before you run the model, open the list entries for the first and third sticker systems. Now reset and run your model and watch it in action. The sticker machine systems should operate nearly identically. Step 5 Create Five More Clones In this step, you'll create five more clones of the sticker system (for a total of 8). Since you won't need to update very many properties, you'll hopefully see how much easier it is to create these clones using process flow instances compared to the copy and paste method. You'll also move the RollStorage queue and RollOperator so that they are centered in between the eight sticker systems. When you are finished, your model should look similar to the following image: To create these clones: In the 3D model, move the RollStorage queue and the RollOperator so that they are to the right of the sticker systems and centered in between Plane2 and Plane3 . Hold the Shift key and draw a box around Plane3 and all the objects around it. A red box will appear around the selected objects. Press Ctrl+C to copy it to the clipboard. Position your mouse in the approximate area of the model where you want to place the copied objects. Press Ctrl+V to paste the plane. Hold the Shift key and click in a blank area of the model to deselect the objects. Make sure the fourth Plane is selected. In Properties, change its name to Plane4 . Then, click the arrow next to the color box to open the color selector. Select the lightest purple color. Rename all of the objects inside Plane4 so that there is a 4 after the object name. For example, Source3 should become Source4 , Queue3 should become Queue4 , etc. Click a blank area inside of the Sticker Roll Logic process flow to make sure the process flow is active and nothing is selected. In Properties under Attached Objects , verify that Plane4/StickerMachine4 is listed. Repeat the previous steps until you have 8 sticker machine systems in total. Consider saving your simulation model. Step 6 Run and Test the Model One Additional Time Now it's time to test the model one more time to make sure that it's running correctly. Again, you'll likely want to open the list entries to view them. However, now that you're using process flow instances, the process for opening the list entries for sticker systems 3-8 is slightly different, as described in the following tip box: View Entries for Multiple Lists To open the entries for the attached instances: Click on the list in the Object Process Flow. In Properties, click the View Entries button to open a menu listing the sticker machines that are attached to the Fixed Resource. Select the instance you are interested in, such as Plane3/StickerMachine3. Now reset and run your model to watch it in action. The eight sticker machine systems should operate nearly identically. How Process Flow Instances Work During a Simulation Run By default, you'll only see the main object process flow during a simulation run. To view individual instances of the process flow (such as for Sticker Machine 4 or 5, etc.): Click a blank space inside the Sticker Roll Refill Logic process flow to make sure it is active and nothing is selected. In Properties, under Attached Objects , click the specific process flow you'd like to view to select it. Press the Open Process Flow View button to open the process flow as an additional tab in the process flow view. The following image shows a few different process flows while this simulation runs. In the top left corner, you can see the Sticker Roll Logic process flow, which is the main process flow that controls all other instances of the process flow. You can also see the specific instances of the process flows for Sticker Machines 5, 6, and 7. Notice that the main process flow shows the tokens for all the instances at one time. Sticker Machine 6 runs out of stickers first and initiates the task sequence. Then Sticker Machine 7 is next, then some other sticker machines go until finally Sticker Machine 5 goes. Notice they correlate with tokens in the main process flow: Conclusion Hopefully you can already see why it's easier to clone models using process flow instances as opposed to the cut and paste method. When you use the cut and paste method, you have to update several different settings at a time, which increases the possibility that you could make a mistake. It could also possibly slow down your model unnecessarily. But when you use process flow instances and process flow variables, everything is much easier. After you've set up the initial model and process flow, all you have to do is create clones and update a few of the minor settings. The chances of making an error are much smaller. In the next tutorial task, you'll also see how much easier it is to modify the original process flow and update all instances at the same time. Continue on to Tutorial Task 4.4 - Change Instances Simultaneously ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial4Instances/4-4ChangeInstances/4-4ChangeInstances.html",
        "title": "Tutorial Task 4.4 - Change Instances Simultaneously",
        "content": "Task Overview In this task, you'll improve your original object process flow so that it will include an animation of the sticker rolls as they are being transported and loaded by the RollOperator. As the sticker machine uses the rolls, they will shrink in size. You'll also see how easy it is to make major modifications to a fixed resource process flow and update all attached instances simultaneously. As you'll see by the end of this tutorial, using process flow instances makes it much easier to make major changes to a large, complex model. Step 1 Create Sticker Roll Flow Items The first step will be to create sticker roll flow items in the 3D model. You'll add a second Source object that will create the sticker rolls and put them inside the Roll Storage Queue. Then you'll modify the flow items in the Flow Item Bin so that they look more like rolls of stickers. To add the sticker rolls to the 3D model: In your 3D model, drag a Source from the Library and place it above the RollStorage queue in the center of the model. In Properties, rename the Source as RollSource . Create a port connection (A-connect) between RollSource and RollStorage . Click RollSource to open its properties on the right. Under the Source section: Click the FlowItem Class menu and select Cylinder . Check the Arrival at time 0 box. In the Inter-Arrivaltime box, type 35 . In the Toolbox next to the FlowItem Bin , click the Expand button . Double-click the Cylinder to open it in the FlowItem Bin. In the viewer, click the Cylinder to select it. Then, use the blue colored cone to resize the cylinder so that it looks more like a roll of stickers. In Properties change the cylinder's X-size and Y-size to 1 . Close the FlowItem Bin. Consider saving your simulation model. Step 2 Create a Global List In this step, you'll create a global list that will contain all of the sticker rolls that are in storage. To create the global list: Click the RollStorage queue to bring up its properties on the right. Under the Triggers section, click the Add button to open a menu. Select On Entry . Next to the OnEntry trigger box, click the Add button to open a menu. Point to Lists , then select Push to List to open the picklist properties. Click the arrow next to the List box to open a menu. Select Add New List to create a new list. In the top box in the List Properties dialog box, rename the new list Rolls in Storage . Press the OK button to save the changes and close the new list. Back in the RollStorage queue properties, under the Triggers section, click the Edit Properties button next to the OnEntry trigger box. Click the arrow next to the List box to open a menu. Click Rolls in Storage to select the new list. Consider saving your simulation model. Step 3 Add Activities to Roll Refill Process Flow In this step, you'll add some new activities to the Sticker Roll Refill Process Flow to create the sticker roll animation. Be aware that you might need to adjust the size of the Roll Refill shape in order to fit all the activities into the shape. For now, you'll only add the activities, rename them, and create connections between them. You'll change the property settings for the activities in a later step. When you're finished, your process flow should look like this: To create this process flow: Make sure the Sticker Roll Logic fixed process flow is open and active. Delete all the connections between activities in the Sticker Roll Refill shape for now. You'll reconnect the activities in a later step. Add a Create Object activity (under Objects ) after the Source: Starting 2 Rolls to create a stacked block. Add an Assign Labels activity (under Basic ) in between the first stacked block and the Push to List: Sticker Rolls activity without joining it to any activity. Add two Change Visual activities (under Visual ) to the end of the Assign Labels activity to create a second stacked block. Drag the Push to List: Sticker Rolls to the end of the second stacked block. Add a Destroy Object activity (under Objects ) in after the second stacked block without joining it to any activity. Delete the Travel: Pick Up Roll activity. Add a Pull from List activity (under Shared Assets ) to the end of the Destroy Object activity to create a third stacked block. Click the block of Task activities and use the scissors icons to separate all the activities so that they are no longer connected. Drag the Create Task Sequence activity to the end of the third stacked block. Add a Load activity (under Task Sequences ) to the end of the third stacked block. Drag the Travel activity to the end of the third stacked block. Add a Delay (under Task Sequences ) to the end of the third stacked block. Make Sure You Add the Correct Delay Activity Make sure you add a task sequence Delay rather than a basic Delay. Add a Move Object (under Objects ). Add a Finish Task Sequence (under the Task Sequences ) to the end of the third block. Add a List asset (under Shared Assets ) to the right side of all the activities without joining it to any activity. For clarity, rename the following objects: Object New Name Create Object Create Object: Sticker Roll Assign Labels Assign Label: rollQuantity Change Visual (1st) Change Visual: Set Location Change Visual (2nd) Change Visual: Set Rotation Push to List: Sticker Rolls Push to List: Sticker Rolls in Use Destroy Object Destroy Object: Empty Roll Pull from List Pull from List: Rolls in Storage Load Load: Pick Up New Roll Delay Delay: Install Time Move Object Move Object: Into Model Finish TS Finish Task Sequence List List: Rolls in Storage Create the following connections: From the first stacked block to the second block From the second stacked block to the third block From the third stacked block looping back to the first block Check to make sure your process flow looks similar to the image at the beginning of this step. Step 4 Change the Roll Refill Logic In this step, you'll edit the properties of the activities in the Sticker Roll Usage process flow. The following is an overview of how the activities in this process flow will function: Activity Explanation Source: Starting 2 Rolls You'll replace the rollQuantity label with a new label called rollNumber . Recall that in this process flow, there will only be two tokens that loop through the process flow continuously. Based on the token index, the rollNumber label will assign the first token a value of 1 and it will assign the second token a value of 2. The process flow will use this label to place the two rolls in the correct location in the model so that they don't overlap in the 3D view. Create Object: Sticker Roll This activity will create a cylinder flow item object (the sticker roll) and put it inside the model. You will also add a new label named rollObject that will keep a reference to the specific roll that was created in the 3D model. Assign Label: rollQuantity Since you still need the rollQuantity label in order for the process flow to function correctly, you'll add that label to tokens with this activity. As a reminder, the rollQuantity label sets the number of stickers that are on each roll. You'll set the initial value to 20. Change Visual: Set Location This activity will set the location of the sticker rolls that have been loaded on the sticker machine in the 3D model so that they appear to be next to the sticker machine. This activity will use a few different labels and commands to create this effect: First, it will use the rollObject label to find the specific sticker roll that is tied to this token. It will also use the rollNumber label to determine where to place the sticker roll on the X-axis. The first sticker roll (which has a rollNumber value of 1), will be placed on the left and the second sticker roll ( rollNumber 2) will be placed on the right. The Y-axis will be based on the position of the sticker machine minus the size of the sticker roll. Don't forget that any time you see the current keyword, it will refer to the specific sticker machine that is attached to that instance of the process flow. For more information about the different commands that are used in this step, see the Command Reference. Change Visual: Set Rotation This activity will set the rotation of the first two sticker rolls so that they appear to be upright next to the sticker machine. Push to List: Sticker Rolls in Use You won't make any changes to this activity. As a reminder, when a new roll is installed on the sticker machine, that roll is added to the List: Sticker Rolls in Use. When a roll is empty (because the rollQuantity has been reduced to 0), the token will move to the next activity. Destroy Object: Empty Roll This activity will destroy the empty roll once it is depleted. it will use the rollObject label to identify the sticker roll that should be destroyed. Pull from List: Rolls in Storage This activity will pull a roll from the global Storage Rolls list and assign it to the token's rollObject label. Create TS: Get New Roll You'll point the task executer to the RollOperator in the 3D model. As a reminder, this activity will create a new task sequence, which is a series of tasks that will be assigned to the RollOperator. The task sequence is called getRoll . By creating a new task sequence every time a roll of stickers is empty, you'll prevent the RollOperator from being interrupted or diverted to work on other tasks while it is picking up and installing the new roll of stickers. Load: Pick Up New Roll The RollOperator will pick up a new sticker roll. The activity will tell the RollOperator to pick up the 3D object referenced in the token's rollObject label. Travel: Install New Roll You won't make any changes to this activity. As a reminder, this activity will tell the RollOperator to travel back to the sticker machine with the new roll. Delay: Install Time This activity will simulate the amount of time it takes the RollOperator to install the sticker roll on the sticker machine. You'll use an exponential distribution to get this time. Move Object: Into Model Once the RollOperator returns to the sticker machine, the new roll will be moved into the model. Its location in the model will be based on the settings in the Create Object activity earlier in the process flow. To create this functionality: Click the first stacked block in the Sticker Roll Refill shape to select it. In Properties under Source: Starting 2 Rolls : Find the Assign Labels to Created Tokens group. In the Name box, change the name of the label to rollNumber . Click the arrow next to the Value box to open a menu. Select Token Index . In Properties under Create Object: Sticker Roll : Click the arrow next to the Object box to open a menu. Point to Flowitems , then select Cylinder . Click Create At option to select it. Click the arrow next to the box below it to open a menu and select current . Make sure the Assign to option is selected. In the box directly underneath, type token.rollObject to change the label name. Click the second stacked block in the Sticker Roll Refill shape to select it. In Properties under Assign Label: rollQuantity : Click the Add button to add a new label. In the Name box, type rollQuantity . In the Value box, type 20 . In Properties under Change Visual: Set Location : Click the Add button next to the Change Visual box to open a menu. Select Set Rotation, Size, or Location to open the picklist options. In the Object box, delete the current text and type token.rollObject . In the X Location box, type current.location.x + token.rollNumber . In the Y Location box, type current.location.y - current.size.y . In the Z Location box, type 1 . In Properties under Change Visual: Set Rotation : Click the Add button next to the Change Visual box to open a menu. Select Set Rotation, Size, or Location to open the picklist options. Click the Set menu and select Rotation . In the Object box, delete the current text and type token.rollObject . In the X Rotation box, type 90.0 . In the Y Rotation box, type 90.0 . In the Z Rotation box, type 0 . Click the third stacked block in the Sticker Roll Refill shape to select it. In Properties under Destroy Object: Empty Roll : Click the arrow next to the Object(s) box to open a menu. Point to Token Label then select rollObject . In the process flow, click the No Link icon next to the Pull from List: Rolls in Storage activity to enter sampling mode. Click the List: Rolls in Storage asset to link them together. Make sure the third stacked block is still selected. In Quick Properties under Pull from List: Rolls in Storage , verify that the Assign to option is selected. Click the arrow next to the box under this option to open a menu. Point to Token Label then select rollObject . In Properties under Create TS: Get New Roll : Click the Sampler button next to Task Executer / Dispatcher and select the RollOperator in the 3D model. In Properties under Load: Pick Up New Roll : Click the arrow next to the Item box to open a menu. Point to Token Label , then select rollObject . In Properties under Delay: Install Time : Click the arrow next to the Delay Time box to open a menu. Point to Statistical Distribution and select exponential to open the Distribution Chooser. In the Location box, type 5 . Keep all other settings the same. In Properties under Move Object: Into Model : Click the arrow next to Object(s) to open a menu. Point to Token Label , then select rollObject . In the Destination box type the command current.up . Clear the Preserve Global Position checkbox. Consider saving your simulation model. Step 5 Edit the Properties for Both Lists In this step, you'll edit the properties for the two lists in the process flow. First, you'll need to make the List: Sticker Rolls in Use a dynamic list. Once this list is dynamic, it will decrement the rollQuantity label on both the list and the token at the same time. Other activities and objects can then get the value of the rollQuantity label on the token to calculate the remaining quantity of the roll and update its size. Next, you will update the new List: Rolls in Storage shared asset so that it will act as an alias for the global Storage Rolls list you created in Step 2. To create this functionality: Click the List: Sticker Rolls in Use asset to select it. In Properties, click the Advanced Properties button. On the Fields tab, next to the rollQuantity label field, check the Dynamic box. Press the OK button to save the changes. Click the Toolbox tab in the left pane to open the Toolbox (so that you can sample the Global List in a moment). Back in the process flow, click the List: Rolls in Storage in the Sticker Roll Refill shape to select it. In Properties next to the List box, click the Sampler button to enter sampling mode. In the Toolbox under Global Lists , click Rolls in Storage to select it. Consider saving your simulation model. Step 6 Add Activities to Roll Usage Process Flow In this step, you'll add some new activities to the Sticker Roll Usage process flow to create the sticker roll animation. For now, you'll only add the activities, rename them, and create connections between them. You'll change the property settings for the activities in a later step. When you're finished, your process flow should look like this: To create this process flow: In the Sticker Roll Usage shape, delete the connection going from the second stacked block to the Sink: Flow Item Exits . Move the Sink: Flow Item Exits activity down a little to make room for other activities. Add an Assign Labels (under Basic ) activity in below the second stacked block and above the Sink: Flow Item Exits activity without joining it to any other activities. Add a Change Visual activity (under Objects ) after the Assign Labels activity to create a stacked block. Drag the Sink: Flow Item Exits activity on top of the third stacked block to add it to the end. Reconnect the second stacked block to the third stacked block. For clarity, rename the following objects: Object New Name Assign Labels Assign Labels: Get Values Change Visual Change Visual: Resize Roll Check that your process flow looks similar to the one in the beginning of this step. Step 7 Change the Roll Usage Logic In this step, you'll edit the properties of the activities in the Sticker Roll Usage process flow. The following is an overview of how the two new activities in this process flow will function: Activity Explanation Assign Labels: Get Values This activity will create three new labels: rollObjectCopy - This label will copy the information from the rollObject label on the tokens that were pulled from the Sticker Rolls in Use list. rollQuantityCopy - This label will copy the information from the rollQuantity label on the tokens. rollSize - This label will use the data from the other two labels to calculate the value of a new label called rollSize . The rollSize label will change the overall size of the sticker rolls in the 3D model based on how many stickers are left on the roll. As the stickers decrease, the rollSize will get smaller. Change Visual: Resize Roll This activity will change the size of the sticker roll in the 3D model. This activity will use the rollSize that is set in the previous activity to determine the sticker roll's X- and Y-size. The Z-size will be set to whatever it was before (it will not be changed). The getlabel command is going to be crucial to the logic in this process flow. The getlabel command will retrieve the values of a label on a token in the process flow or an object in the 3D model. Various activities or objects can use that data to affect how the model functions. The getlabel command has two parameters: Object - This parameter indicates which object has the label that you are interested in. Label Name - This parameter gives the name of the label you are interested in. When FlexSim executes the getlabel command, it will return the value of that label. For example, imagine your process flow had a token with a label named weight with a value of 15 . The getlabel command to get the information from label would be: getlabel(token, \"weight\") and it would return a value of 15. What Do the Labels Pushed and Pulled Mean? When a process flow activity pushes a token onto a list, it creates a label on that token called pushed . The value of that label contains a reference to the token object. Similarly, when an activity pulls a token from a list, it creates a label on that token called pulled that contains a reference to the token object that was originally pushed onto the list. To create this functionality: Click the third stacked block in the Sticker Roll Usage shape to select it. In Properties under Assign Labels: Get Values : Click the Add button three times to add a new label. Enter in the following values in the Name and Value boxes on the three labels: Name Value rollObjectCopy token.pulled.rollObject rollQuantityCopy token.pulled.rollQuantity rollSize token.rollQuantityCopy / 20 In Properties under Change Visual: Resize Roll : Click the Add button to open a menu. Select Set Rotation, Size, or Location . Click the Set menu and select Size . In the Object box, type token.rollObjectCopy . In both the X Size and Y Size box, type token.rollSize . In the Z size box, type token.rollObjectCopy.as(Object).size.z . Consider saving your simulation model. Step 8 Update the Original Sticker Systems This step is optional if you want to compare and contrast the first two sticker systems with the new sticker systems. However, if you want the first two sticker systems to have the same functionality, you can attach the first two sticker systems to the Fixed Resource Process Flow and delete the original process flow in the Toolbox. Step 9 Run and Test the Simulation Model It's time to test the model for the last time. Consider Running the Simulation at a Faster Speed You might want to watch your model at a faster speed to see the animation of the sticker rolls depleting faster. The following animated gifs were created with the simulation model running at 15. Reset and run your model to watch it in action. As you watch each of the sticker machine systems, each sticker machine should show the two starting sticker rolls. The sticker that is actively being used will gradually shrink until it disappears. Then, the RollOperator will get a new sticker roll from storage and install it on the sticker machine while the sticker machine is using the second sticker roll. Feel free to view the sticker roll list entries or the individual instances of the process flow if needed. Conclusion You might notice as you watch the model run you can already see a few bottlenecks and places where the sticker machines stop running because they run out of labels. After building a model like this, you can then begin studying bottlenecks and experimenting with different variables, such as: how many operators are needed to install stickers on the sticker rolls in time. This concludes the tutorial about process flow instances. Hopefully you've learned a few best practices about building process flow logic using process flow instances."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial5CreatingLogic/CustomObjectsOverview/CustomObjectsOverview.html",
        "title": "Tutorial 5 - Creating Logic for Custom Objects",
        "content": "In this tutorial, you'll learn how to use process flow to easily build custom logic for 3D objects. You'll start by building a custom fixed resource that can batch process flow items: Then you'll create a custom task executer that takes breaks if there are no loading or unloading tasks to work on: Tasks Covered This tutorial will cover the following tasks: Task 5.1 Create a Custom Fixed Resource In this task, you'll learn how to use an object process flow to design the custom logic for a fixed resource. You'll add a BasicFR object to the model and attach it to an object process flow that will receive and process flow items in a batch. This tutorial will also cover common problems and pitfalls that come from designing custom fixed resources. Task 5.2 Create a Custom Task Executer In this task, you'll learn how to modify an existing task executer by modeling an operator that returns back to a default location after performing a task. If the operator doesn't get a new task to do within a given amount of time, he will go to a break room and wait for more work. For More Information For more in-depth explanations of the concepts covered in these tutorials see: Types of Process Flows Key Concepts About Labels"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial5CreatingLogic/5-1CreateCustomFixedResource/5-1CreateCustomFixedResource.html",
        "title": "Tutorial Task 5.1 - Create a Custom Fixed Resource",
        "content": "Task Overview In this tutorial task, you'll learn how to use an object process flow to design the custom logic for a fixed resource. You'll add a BasicFR object to the model and attach it to an object process flow that will receive and process flow items in a batch. This tutorial will also cover common problems and pitfalls that come from designing custom fixed resources. When you're finished, your model will look similar to the following image: Receiving and Releasing Items BasicFR objects are a blank slate , which means that they do not have their own logic for receiving and releasing items. You will need to explicitly add this logic to the BasicFR object by creating a object process flow. You'll use the Receive Item and Release Item picklists on event-listening activities to handle this logic. Be aware that if you were going to attach a standard fixed resource to a process flow (such as a queue or a processor), you wouldn't use the Receive Item and Release Item picklists. Instead, you would use the Close Ports and Open Port picklists. See Tutorial 2 - Task Sequences for an example of these picklists in context. Step 1 Build the 3D Model In this step, you'll build a basic 3D model. When you're finished, your 3D model should look similar to the following image: To build this model: Drag the following objects from the Library: 1 Source 2 Queues 1 BasicFR (from the Advanced section of the Library) 1 Operator 3 Processors 1 Sink 1 Plane Move the objects so that they are roughly in the same layout as shown in the image at the beginning of this step. For clarity, rename the objects as follows: Object New Name Source1 Source BasicFR1 Batch Operator1 Operator Sink1 Sink Plane Break Room Displaying the Plane's Name To display the plane's name, right-click the plane select Edit then select Show Name . Click the Batch to select it. In Properties, change the Batch's size as follows: X-Size : 3.00 Y-Size : 1.50 Z-Size : 0.50 Create port connections (A-connects) from: Source to Queue1 Queue1 to Batch Batch to Processor1 Processor1 to Queue2 Queue2 to Processor2 and Processor3 Processor2 and Processor3 to Sink Create a center port connection (S-connect) from Queue2 to Operator Click Queue2 to open its properties on the right. Under the Output section, check the Use Transport checkbox and confirm that this queue will use the operator connected to its center port. Check to make sure that your model looks similar to the image shown in the beginning of this section. Step 2 Add Activities to an Object Process Flow In this step, you'll add activities to an object process flow to build a custom fixed resource that will receive three flow items, process the items in a batch, and then release them to the next downstream resource. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Point to Add an Object Process Flow , then select Blank . In Properties in the Process Flow Name box, delete the current text and rename the process flow BatchLogic . From the Library, add a Schedule Source activity (under Token Creation ). From the library, add a Wait for Event activity and add a Delay activity at the end of this activity to create a stacked block. Repeat the previous step twice to create two more identical stacked blocks. From the Library, add the following activities to create one more stacked block: A Delay activity (under Basic ) 3 Wait for Event activities (under Basic ) For clarity, rename these activities as: Activity New Name Source Source: Start Simulation First Wait For Event Wait for Event: Receive Item 1 First Delay Delay: Process Item 1 Second Wait For Event Wait for Event: Receive Item 2 Second Delay Delay: Process Item 2 Third Wait For Event Wait for Event: Receive Item 3 Third Delay Delay: Process Item 3 Fourth Delay Delay: Process All Items Fourth Wait For Event Wait for Event: Release Item 1 Fifth Wait For Event Wait for Event: Release Item 2 Sixth Wait For Event Wait for Event: Release Item 3 Create a connector from the following activities: From the Source: Start Simulation to the Wait for Event: Receive Item 1 activity From the Delay: Process Item 1 to the Wait for Event: Receive Item 2 activity From the Delay: Process Item 2 to the Wait for Event: Receive Item 3 activity From the Delay: Process Item 3 to the Delay: Process All Items activity Create a connector that loops from the end of the Wait for Event: Release Item 3 activity to the Wait for Event: Receive Item 1 activity. Consider saving your simulation model. Step 3 Edit the Receiving Activities In this step, you'll edit the properties for the activities that handle receiving items in the process flow. You'll have to first attach the Batch as an instance to the process flow. This will make it possible for you to use the current keyword to dynamically refer to the Batch. This makes it easier to scale more complex models: you can add additional BasicFR objects as attachments to the process flow without having to copy the process flow for each object. The following is an overview of how each activity will function: Activity Explanation Source: Start Simulation This Scheduled Source activity will create one token as soon as the simulation starts and sends the token to the Wait for Event activity. After it creates this token, it won't create any additional tokens. The one token will simply loop continuously through the other activities until the simulation ends. You'll use the default properties for this activity. Wait for Event: Receive Items Wait for Event activities are event-listening activities. That means a token will wait at this activity until the event that is being listened to occurs. In this process flow, the first three Wait for Event activities will listen to the Batch for the On Entry event. Because the Batch is a BasicFR object, you'll need to explicitly direct it to receive flow items. When the Batch receives a flow item, you'll assign a label named Item1 , Item2 , or Item3 that will store a reference to the flow item that triggered the event. Delay: Process Times You'll add a delay of 5 seconds to represent the amount of time the batch will process each flow item. To edit these properties: Click a blank space in the process flow to ensure nothing is selected. In Quick Properties under the Process Flow Instances group, find the Attached Objects (instances) list. Click the Sampler button to enter sampling mode. In the 3D model, click the Batch to sample it. Click the Wait for Event: Receive Item 1 activity to select it. In Properties, confirm that the Object box displays current (No Instance) . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click the Batch to open a menu. Select On Entry to sample this event. Now find the Label Matching/Assignment table. In the Entering Item row under the Label Name column, type Item1 . Click in the cell under the Operation column to open a menu. Select assign . What Does the Label Matching/Assignment Table Do? Object-based events have specific parameters associated with them. These parameters contain basic information about the event, such as which flow item or token triggered the event. You can use the Label Matching/Assignment table to preserve any relevant information from these parameters with a custom label. In this example, the Wait for Event activity will release the token every time a flow item triggers the process time event. You'll use the Entering Item parameter to add a label called Item1 on the current token that contains a reference to the created flow item that triggered this event. Next to the On Listener Initialized box, click the Add button to open a menu. Point to Control , then BasicFR , then Receive Item to open the picklist options. You'll use the default settings, so confirm the picklist options look similar to the following image: What Does the Receive Item Picklist Do? The Receive Item picklist will make the Batch use the receiveitem() command, which makes it available to receive an item from the upstream queue. Repeat steps 4-11 for the Wait for Event: Receive Item 2 and Wait for Event: Receive Item 3 activities, except you should use the label names Item2 and Item3 on step 8. Click the Delay: Process Item 1 activity to select it. In Properties in the Delay Time box, delete the current text and type 5.00 . Repeat the previous step for the Delay: Process Item 2 and Delay: Process Item 3 activities. Consider saving your simulation model. Step 4 Edit the Releasing Activities In this step, you'll edit the properties for the activities that handle releasing items in the process flow. The following is an overview of how each activity will function: Activity Explanation Delay: Process Times You'll add a delay of 5 seconds to represent the amount of time the batch will process each flow item. Wait for Event: Release Items The last three Wait for Event activities are the mirror image of the first three Wait for Event activities. These three activities will listen to the Batch for the On Exit event. Because the Batch is a BasicFR object, you'll need to explicitly direct it to release the flow items after they've been processed. To make sure that the Batch releases the correct item, you'll need to reference the labels named Item1 , Item2 , or Item3 that were created by the first three Wait for Event activities. To edit these properties: Click the Delay: Process All Items activity to select it. In Properties in the Delay Time box, delete the current text and type 10.00 . Click the Wait for Event: Release Item 1 activity to select it. In Properties, confirm that the Object box displays current (No Instance) . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click the Batch to open a menu. Select On Exit to sample this event. Next to the On Listener Initialized box, click the Add button to open a menu. Point to Control , then BasicFR , then Release Item to open the picklist options. In the Specify the item to release box, change the current text to token.Item1 . What Does This Expression Mean? The expression token.Item1 is accessing the label named Item1 on the token. Recall that the Wait for Event: Receive Item activities set these labels when a flow item enters the Batch. These labels contain a reference to the flow item in the 3D model. Repeat the steps 3-8 for the Wait for Event: Release Item 2 and Wait for Event: Release Item 3 activities, except you should use the label names token.Item2 and token.Item3 for step 8. Consider saving your simulation model. Step 5 Test the Model You might not have realized it, but your custom fixed resources has a few problems with it at this point. Try resetting and running the model and see if you can notice what the problem is on your own. If you get stuck, the rest of this step will explain the problem. If you're still unsure about the problem, try this: Reset and run the model. Wait until the Batch pushes flow items to Processor1 . Pause the simulation model and try moving one of the flow items on Processor1 . You'll notice that there are actually three items in the processor: There's really two problems occurring here. First, you can't see the boxes in the Batch. Since the process flow didn't explicitly set the location for the boxes, they get swallowed up by the Batch and can't be seen. If you could see them in the Batch, you'd also see that all three flow items would appear in the same space (the same way they do on Processor1). This has to do with the way FlexSim automatically offsets objects. Second (and more importantly), you will notice that the Batch releases all three flow items at the same time and then jumps to the beginning of the next batch. Releasing the flow items simultaneously causes the processor to process three items at the same time, which is the wrong behavior. This behavior is caused by the way FlexSim's event handling works. You'll learn how to solve these two problems in the next two steps. Step 6 Change the Flow Item Visuals In this step, you'll fix the problem with the flow item visuals in the Batch object. You'll fix this by adding three Change Visual activities (one for each item) to the activity blocks that control how the batch receives items. You'll use the Change Location picklist options to set the flow item offsets inside the Batch activity. When you're finished, your process flow will look similar to the following image: One FlexScript expression you'll see in this step is the current.size.z expression. This expression gets the Z position of the item containing the flow item (the Batch) and puts the flow item on top of the container object so that it doesn't get swallowed up by the object. To change the flow item visuals relative to the Batch: Hover your mouse over the line separating the Wait for Event: Receive Item 1 and the Delay: Process Item 1 activities. When the line turns yellow, double-click it to open the Quick Library. Under the Visual group, click the Change Visual button to add this activity. Repeat these steps to insert Change Visual activities between the next two stacked blocks as well. For clarity, rename these activities as: Activity New Name First Change Visual Change Visual: Item 1 Location Second Change Visual Change Visual: Item 2 Location Third Change Visual Change Visual: Item 3 Location Click Change Visual: Item 1 Location to select it. In Properties next to the Change Visual box, click the Add button to open a menu. Select Set Location to open some picklist options. Set the picklist options as follows: In the Object box, type token.Item1 In the X Location box, type 0.6 In the Y Location box, type -0.8 In the Z Location box, type current.size.z Repeat the previous steps for the Change Visual: Item 2 Location but this time, use the following settings: In the Object box, type token.Item2 In the X Location box, type 1.5 In the Y Location box, type -0.8 In the Z Location box, type current.size.z Repeat the previous steps for the Change Visual: Item 3 Location but this time, use the following settings: In the Object box, type token.Item3 In the X Location box, type 2.4 In the Y Location box, type -0.8 In the Z Location box, type current.size.z Try running the model to see how this changes the way flow items stack up in the Batch: Step 7 Add Breathe Activities to the Process Flow As you'll recall from the step in which you tested the model, the Batch is having a problem in which it releases all the flow items to the downstream processor at the same time. This problem is caused by the way FlexSim's event handling works. What is happening is that when the Processor is ready to receive its next item, it opens its input ports, which causes the first item to exit the Batch. When the Batch's On Exit event fires, it causes the rest of the Wait for Event activities to fire as well, releasing all the items simultaneously. All of this event-listening logic occurs before the processor even knows that it has received an item and close its input port. Consequently, all the items are released and exits immediately while the processor's input port is open. This same problem can crop up in other scenarios. Within the Process Flow tool it usually happens when a listened event is fired on a Wait For Event or Event-Triggered Source, and that is followed by one or more other activities that themselves may cause events in the model to fire, without any delays between the original triggered event and the subsequent event triggering logic. The logic happens so fast that it doesn't give the original event enough time to \"breathe\" and finish what it was doing. In these cases, you can fix the problem by adding a Breathe activity, which is a Delay activity set to delay for 0 seconds. This will allow the original triggering event to finish what it was doing before the token moves on. When you're finished, your process flow will look similar to the following image: To add these breathe activities: Hover your mouse over the line separating the Wait for Event: Release Item 1 and the Wait for Event: Release Item 2 activities. When the line turns yellow, double-click it to open the Quick Library. Under the Basic group, click the Delay button and then click the Breathe button to add this activity. Repeat these steps to add two more Breathe activities after the Wait for Event: Release Item 2 and the Wait for Event: Release Item 3 activities. For clarity, rename these activities as: Activity New Name First Breathe Breathe 1 Second Breathe Breathe 2 Third Breathe Breathe 3 Try resetting and running the model. This time you should notice that the flow items leave the batch one at a time rather than all at once: It may seem a little counter-intuitive that you need to use a Wait for Event activity to receive and release items. You might ask yourself if it would be easier to use the releaseitem() command on a Custom Code activity before each Wait for Event: Release Item activity. The problem with this approach is that it may actually cause the item to exit before the command is even finished executing. By the time the token gets to the Wait for Event: Release Item 1 activity, item 1 will already have exited. Because the event being listened to will have already fired, the token will get stuck waiting forever. The solution to this problem is to use the OnListenerInitialized trigger on the Wait for Event activity. This allows you to keep the logic firing in the correct order. It allows you to execute the event-listening logic first, followed by the logic that receives/releases the item. Conclusion So far, you've learned how to create the logic for a custom fixed resource in the Process Flow tool. In the next task, you'll learn how to create the logic for a custom task executer. Continue on to Tutorial Task 5.2 - Create a Custom Task Executer ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Tutorials/ProcessFlow/Tutorial5CreatingLogic/5-2CreateCustomTaskExecuter/5-2CreateCustomTaskExecuter.html",
        "title": "Tutorial Task 5.2 - Create a Custom Task Executer",
        "content": "Task Overview In this tutorial task, you'll learn how to modify an existing task executer by modeling an operator that returns back to a default location after performing a task. If the operator doesn't get a new task to do within a given amount of time, he will go to a break room and wait for more work. When you're finished, your model should look similar to the following image: Step 1 Add Activities to a Task Executer Process Flow In this step, you'll add activities to an object process flow to build a custom fixed resource that will receive three flow items, process the items in a batch, and then release them to the next downstream resource. When you're finished, your process flow should look similar to the following image: For now, you'll merely add and connect these activities to the process flow. You'll edit the properties to add the functionality in a later step. To add and connect these activities: On the main toolbar, click the Process Flow button to open a menu. Point to Add a Task Executer Process Flow , then select Blank . In Properties in the Process Flow Name box, delete the current text and rename the process flow OperatorLogic . From the Library, add a Schedule Source activity (under Token Creation ). From the Library, add the following activities to create a stacked block: A Wait for Event activity A Decide activity From the Library, add the following activities to create a second stacked block: A Travel activity A Wait for Event activity From the Library, add the following activities to create a third stacked block: A Travel activity A Wait for Event activity For clarity, rename these activities as: Activity New Name Source Source: Start Simulation First Wait for Event Wait for Event: Operator available? Decide Decide: Is there a task? First Travel Travel Back to Queue Second Wait for Event Wait for Event: Task in 10 seconds? Second Travel Travel to Break Room Third Wait for Event Wait for Event: Is there a task? Create a connector from the following activities: From the Source: Start Simulation to the Wait for Event: Operator available? activity From the Decide: Is there a task? to the Travel Back to Queue activity From the Wait for Event: Task in 10 seconds? to the Travel to Break Room activity Click the connector going from the Decide: Is there a task? activity to the Travel Back to Queue activity to select it. In Properties in the Name box, type No . Repeat the previous step for the connector going from the Wait for Event: Task in 10 seconds? to the Travel to Break Room activity. Create connectors that loop from the end of the three stacked blocks back to the Wait for Event: Operator available? activity. Click the connector looping from the Decide: Is there a task? activity to the Wait for Event: Operator available? activity to select it. In Properties in the Name box, type Yes . Repeat the previous step for the connector looping from the Wait for Event: Task in 10 seconds? to the Wait for Event: Operator available? activity. Changing the Font To change the font size of a connector name, click the text in the process flow and change its font size in Properties. Consider saving your simulation model. Step 2 Edit the First Block of Activities In this step, you'll edit the properties for the first three process flow activities. First, you'll have to first attach the operator as an instance to the process flow. This will make it possible for you to use the current keyword to dynamically refer to the operator. This makes it easier to scale more complex models: you can add additional operators as attachments to the process flow without having to copy the process flow for each object. The following is an overview of how the first three activities will function: Activity Explanation Source: Start Simulation This Scheduled Source activity will create one token as soon as the simulation starts and sends the token to the Wait for Event activity. After it creates this token, it won't create any additional tokens. The one token will simply loop continuously through the other two activities until the simulation ends. You'll use the default properties for this activity. Wait for Event: Operator available? Wait for Event activities are event-listening activities. That means a token will wait at this activity until the event that is being listened to occurs. This Wait for Event activity will listen to when the operator becomes available at the end of each task or task sequence. If the operator has been assigned another task sequence, it will add a label called nextTask that will contain a reference to this task. Decide: Is there a task? This Decide activity will check the nextTask label. If this label has a reference to a valid task sequence, it will send it through the connector named Yes and the token will loop through these activities again. If not, it will send the token through the connector named No and begin the next sequence of activities. To edit these properties: Click a blank space in the process flow to ensure nothing is selected. In Properties under the Process Flow Instances group, find the Attached Objects (instances) list. Click the Sampler button to enter sampling mode. In the 3D model, click the Operator to sample it. Click the Wait for Event: Operator available? activity to select it. In Properties, confirm that the Object box displays current (No Instance) . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click the Operator to open a menu. Select On Resource Available to sample this event. Now find the Label Matching/Assignment table. In the Next Task Seq row under the Label Name column, type nextTask . Click in the cell under the Operation column to open a menu. Select assign . What Does the Label Matching/Assignment Table Do? Object-based events have specific parameters associated with them. These parameters contain basic information about the event, such as which flow item or token triggered the event. You can use the Label Matching/Assignment table to preserve any relevant information from these parameters with a custom label. In this example, the Wait for Event activity will release the token when the operator is done completing any task or task sequence. You'll use the Next Task Sequence parameter to add a label called nextTask on the current token. If the operator has another task to work on, this label will contain a reference to that task. If the operator does not have another task to work on, this label will be assigned a null value. Click the Decide: Is there a task activity to select it. In Properties, click the arrow next to the Send Token To box to open a menu. Select Conditional Decide to open some picklist options. In the Condition box, type token.nextTask . In the True box, type \"Yes\" . In the False box, type \"No\" . Consider saving your simulation model. Step 3 Edit the Second Block of Activities In this step, you'll edit the properties for the rest of the process flow activities. The following is an overview of how each activity will function: Activity Explanation Travel Back to Queue If a token reaches this activity, it will send the operator to the Queue to check for loading tasks. Wait for Event: Task in 10 seconds? The operator will wait at the queue for 10 seconds. If a loading task becomes available in 10 seconds, the token will loop back to the first stacked block and the process flow will repeat itself. If there isn't a task within 10 seconds, the token will move to the next activity. Travel to Break Room If a token reaches this activity, it will send the operator to the Break Room. Wait for Event: Is there a task? The operator will wait in the Break Room until another loading task becomes available. To edit these properties: Click the Travel Back to Queue activity to select it. In Properties, click the arrow next to Executer / Task Sequence box to open a menu. Select current (Instance Object) to select it. Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click Queue2 to open a menu. Select Queue2 . Click the Wait for Event: Task in 10 seconds? activity to select it. In Properties, confirm that the Object box displays current (No Instance) . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click the Operator to open a menu. Select On Start Task to sample this event. Check the Use Max Wait Timer box. In the Time box, type 10.00 Next to the OnWaitTimerFired click the Edit Properties button to open some picklist options. Click the arrow next to the Release Token to expand it. In the Destination box, type \"No\" . Click the Travel to Break Room activity to select it. In Properties, click the arrow next to Executer / Task Sequence box to open a menu. Select current (Instance Object) to select it. Next to the Destination box, click the Sampler button to enter sampling mode. In the 3D model, click Break Room to open a menu. Select Break Room . Click the Wait for Event: Task in 10 seconds? activity to select it. In Properties, confirm that the Object box displays current (No Instance) . Next to the Event box, click the Sampler button to enter sampling mode. In the 3D model, click the Operator to open a menu. Select On Start Task to sample this event. Consider saving your simulation model. Step 4 Run the Model At this point the model is ready. Reset and run. You should see the operator transporting items to the processors. When the operator finishes a transport operation and has nothing to do, you should see the token move through process flow and direct him to travel to the queue. Then if he is idle at the queue for 10 seconds, he will travel to the break room and wait there. Conclusion This concludes the Creating Custom Objects Tutorial. Hopefully you can see how process flow allows you to create easy, customizable custom objects for your simulation model."
    }
]
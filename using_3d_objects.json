[
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/Reasons/Reasons.html",
        "title": "Reasons to Use 3D Objects",
        "content": "Why Should I Use 3D Objects? In FlexSim, you can create 3D models of the system you want to simulate or you can create purely theoretical models using the Process Flow tool alone. You might find it beneficial to build theoretical models using the Process Flow tool in the earlier stages of model building, especially while you are still determining the scope and purpose of the model. However, you should consider building a 3D model at some point for a few important reasons, as discussed in the following sections. Model Validation One of the key principles of simulation modeling is that you need to put good data into your model in order to get good data out of your model. (See Data Gathering Strategies for more information.) That's why you should always test and validate the first draft of your simulation model to ensure it's an accurate representation of your business system. Fortunately, 3D models are much easier to validate for various reasons. One reason is that 3D models are more grounded by the physical realities of your facility layout. One of the drawbacks of building purely theoretical models is that you might make a few flawed assumptions because you might have overlooked certain physical realities in the model. For example, a 3D model can more accurately represent the amount of time it takes an an object to travel from one location to another. The 3D model can take into consideration simple things like distance and speed, but also the route the object takes, interaction with other objects in its path, and more. These spatial interactions would be very difficult to simulate in a purely theoretical model. Another reason is that when you watch your 3D model in action, certain things that don't seem realistic will become more apparent. Mistakes based on flawed assumptions will seem to jump out at you during a simulation run because they won't look or feel the same as the business system you are simulating. Because 3D models are more intuitive and realistic, they reduce the amount of errors that could be made in the process of building a simulation model. Ease of Use In some cases, it is easier to model certain behaviors or conditions in a purely theoretical Process Flow model. For example, it is often easier to create custom logic in Process Flow. However, there are still a number of situations in which it is easier to use 3D objects. Many of FlexSim's library objects use built-in logic that is common in a variety of business systems, such as production lines. Building a 3D model might actually be easier, depending on the kind of simulation model you are creating. Telling a Story Because they are more visual, 3D models can sometimes be more effective than graphs, statistics, or PowerPoint presentations when you need to communicate with stakeholders or new employees. 3D models are especially effective at communicating with key decision-makers who do not necessarily have a technical or engineering background. For example, it can be effective to show a stakeholder a series of graphs and charts to demonstrate that your system is experiencing a bottleneck. But it's usually more powerful for them to look at a 3D model and see a large stack of boxes piled up inside a queue. To give another real-world example, FlexSim's 3D objects once helped a client secure a lucrative international business deal. Because there were significant language and culture barriers between the client and its international customer, the business deal was in danger of getting rejected. However, the client built a 3D model of the proposed business system in FlexSim. Then, they sent a video of the simulation model to the key business decision makers. Once the stakeholders could see the 3D model, they were able to catch the vision of the proposal and the business deal was approved. By learning how to use 3D objects in the rest of this chapter, you'll hopefully be able to build more accurate simulation models that also communicate your ideas as effectively as possible."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/TypesOfObjects/TypesOfObjects.html",
        "title": "Types of 3D Objects",
        "content": "Introduction to Types of 3D Objects FlexSim offers a variety of different 3D objects that you can use to build a simulation model. The three most important categories of objects you need to know about are: Flow items Fixed resources Task executers There are more types of objects besides these three, but these categories are the most important for you to understand as a beginner. This topic will explain what these types of objects are and how they interact together. It will also include a brief overview of the other types of objects at the end. Flow Items Flow items are the items that will flow through your simulation model from the beginning of your simulation until the end. Flow items can represent many different things in your simulation model such as: Materials moving through an assembly line Customers walking through a service center Products moving to different locations in a warehouse Orders getting transferred from one station to another By default, flow items look like brown boxes, as shown in the following image: However, you can easily change the visual appearance of flow items if needed. See Key Concepts About Flow Items for more information about flow items, such as how to add flow items to a 3D model. Fixed Resources Fixed resources are objects that remain fixed or stationary in your model, as shown in the following image: Generally speaking, fixed resources interact with flow items in the simulation, such as storing or modifying flow items. Flow items will flow from one fixed resource to the next downstream fixed resource until they reach the end of the simulation: Fixed resources can represent various steps or processes in your model, such as: Work stations Machine operations Processing stations Loading and unloading sites Storage areas Several different fixed resources are available in the FlexSim library. (See Overview of 3D Library Objects - Fixed Resources for more information.) You can also use these objects as a jumping off point to build your own custom fixed resources. (See Creating and Importing Custom 3D Objects for more information.) Task Executers Task executers are objects that can move throughout the model and interact with fixed resources and flow items. All task executers have the same basic functionality; the main difference between them is the way they move. They are called task executers because they can be assigned tasks and task sequences. For example, these objects can travel, load flow items, unload flow items, set up or operate machines, act as shared resources for processing stations, and perform many other simulation tasks: Task operators can represent workers, AGVs, vehicles or machinery that transport items, etc. Like fixed resources, the FlexSim library has a variety of task executers to choose from. (See Overview of 3D Library Objects - Task Executers for more information.) You can also build your own custom task executers. (See Creating and Importing Custom 3D Objects for more information.) Other Types of 3D Objects Beyond these three basic categories of items in FlexSim, there are additional types of objects that you can use to improve your simulation model: Visual objects can help you manage complex models and add visual details that might be useful when presenting the model to stakeholders. Conveyor objects can be used to create conveyor systems to transport flow items through the simulation model. AStar and AGV objects control task executer movement in the simulation model, making sure that task executers use designated travel paths. Fluid objects can be used for creating simulation models for handling fluid materials."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/Overview3DObjects/Overview3DObjects.html",
        "title": "Overview of 3D Library Objects",
        "content": "Introduction to 3D Library Objects The 3D objects in the FlexSim Library are the basic building blocks you will use to build your 3D model. Each object has built-in logic that is commonly used in a variety of simulation models. You can also easily edit the properties and customize the logic on these objects to adapt any of them to the unique needs of your simulation project. This topic will provide a high-level overview of the objects in the FlexSim Library. Each object has a link to its object reference page for more information. The categories and objects are presented in the same order as they appear in the Library. Fixed Resources Fixed resources are objects that remain fixed or stationary in your model. Generally speaking, fixed resources interact with flow items in the simulation, such as storing or modifying flow items. Fixed resources can represent various steps or processes in your model, such as processing stations, machines, or storage areas. Name and Icon Description Source The source creates flow items and releases them to a downstream object. You can control the rate at which the source creates flow items so that they arrive on a fixed schedule, a regular continuous rate, or a random statistical distribution. See the Source reference page for more information. Queue The queue stores flow items until a downstream object is ready to take them. By default, the queue releases flow items on a first-in-first-out basis, but other options are available. See the Queue reference page for more information. Processor Processors simulate flow items getting processed at a station. Processors simulate a time delay, beginning with a setup time followed by the process time. You can also require the processor to use an operator during the setup and/or process time. You can also set processors to handle more than one flow item at a time. See the Processor reference page for more information. Sink The sink removes flow items from a simulation model when they are finished. See the Sink reference page for more information. Combiner The combiner groups multiple flow items together. It can either join the flow items together permanently, or it can pack them into a container flow item so that they can be separated at a later point in time. See the Combiner reference page for more information. Separator The separator separates a flow item into multiple parts, either by unpacking a container flow item that has been packed by a combiner or by making multiple copies of the original flow item. The splitting/unpacking is done after the process time has completed. See the Separator reference page for more information. Multiprocessor The multiprocessor is similar to the processor object, but it can simulate flow items going through a sequence of two or more processes. You can require the multiprocessor to use an operator in any or all of these processes. See the MultiProcessor reference page for more information. BasicFR You can use the BasicFR object to create a custom fixed resource object. You can find it in the Advanced section of the Library. See the BasicFR reference page for more information. Task Executers Task executers are objects that can move throughout the model and interact with fixed resources and flow items. They are called task executers because they can be assigned tasks and task sequences. For example, these objects can travel, load flow items, unload flow items, act as shared resources for processing stations, and perform many other simulation tasks. All task executers have the same basic functionality; the main difference between them is the way they move. Name and Icon Description Dispatcher The dispatcher is used to control a group of transporters or operators. Fixed resources can send task sequences to the dispatcher, which then delegates the tasks to the transports or operators that are connected to it once they become available. See the Dispatcher reference page for more information. TaskExecuter The TaskExecuter object is a generic task executer. A TaskExecuter has some basic functionality that you can adapt to a variety of uses. This object's default shape is designed to look like an automatic guided vehicle (AGV). See the Task Executer (Object) reference page for more information. Operator Operators represent employees that can transport flow items, operate fixed resources, and perform a variety of other tasks that require an employee in a simulation model. See the Operator reference page for more information. Transporter The transporter is used mainly to carry flow items from one object to another. It has a fork lift that will raise or lower flow items when it is loading or unloading them from a rack. See the Transporter reference page for more information. Elevator The elevator is a special type of transport that moves flow items up and down. It will automatically travel to the level where flow items need to be picked up or dropped off. Flow items are animated as they enter and exit the elevator to improve model accuracy. See the Elevator reference page for more information. Robot The robot is a special transport that lifts flow items from their starting locations and places them at their ending locations. Generally, the robot's base does not move. Instead, 6 joints rotate to move the flow items. See the Robot reference page for more information. Crane The crane simulates rail-guided cranes such as gantry, overhead, or jib cranes. It has similar functionality to the transporter but with modified graphics. By default, the crane picker rises to the height of the crane object after picking up or dropping off a flow item before it will travel to the next location, but these motions can be customized. See the Crane reference page for more information. ASRSvehicle The ASRS vehicle is a special type of transport specifically designed to work with racks. The ASRS vehicle will slide back and forth in an aisle between two racks picking up and dropping off flow items. The reach, lift, and travel motions are fully animated by the ASRS vehicle. The lift and travel motions will occur simultaneously, but the reach will only occur after the vehicle has come to a complete stop. See the ASRSvehicle reference page for more information. BasicTE You can use the BasicFR object to create a custom task executer object. You can find it in the Advanced section of the Library. See the BasicTE reference page for more information. Travel Networks These objects will be explained in the chapter about task executers and travel. See Working With Travel Networks for more information. Conveyors These objects will be explained in the chapter about conveyors. See Overview of Conveyor Objects for more information. Warehousing Warehousing objects allow you to simulate the storage and retrieval of items in a warehouse or storage system. See Rack Types for more information. Visual The visual objects that are available in the FlexSim library can help you manage complex models and add visual details that might be useful when presenting the model to stakeholders. See Using Visual Objects for more information. A* Navigation These objects will be explained in the chapter about task executers and travel. See Working With A* Navigation for more information. AGV These objects will be explained in the chapter about task executers and travel. See Key Concepts About AGV Networks for more information. People These objects will be explained in the chapter about healthcare objects. See Using Healthcare 3D Objects for more information. Fluid The fluid objects are designed to simulate fluids or other materials that behave like fluids that are measured by weight or volume. Name and Icon Description Fluid Ticker The ticker is responsible for breaking time into small, evenly spaced units called ticks. The ticker can control all of the fluid objects in a model. See the Fluid Ticker reference page for more information. Fluid Tank The fluid tank is a simple fluid object that can receive and send material at the same time. You can configure up to three points (called marks ) that will cause triggers to fire when the tank's capacity reaches those specific volumes. See the Fluid Tank reference page for more information. Fluid Generator The fluid generator provides fluid material for a model, similar to a source. The generator can be set to refill at a fixed rate or it can refill itself a set amount of time after it becomes empty. See the Fluid Generator reference page for more information. Fluid Terminator The fluid terminator removes fluid material from a simulation model when these materials are finished. See the Fluid Terminator reference page for more information. Fluid Mixer The fluid mixer combines products together into a single, new product. The different materials can either be pulled sequentially or in parallel. The mixer always works in batches. It does not send any material until it has received and processed all the material that it was set to receive. See the Fluid Mixer reference page for more information. Fluid Blender The fluid blender mixes materials from multiple input ports based on percentages (not fixed amounts). It is most commonly used for in-line blending where the mixing is not done in batches. See the Fluid Blender reference page for more information. Fluid Splitter The fluid splitter sends material to multiple output ports in percentages that the modeller specifies. See the Fluid Splitter reference page for more information. Fluid Pipe The fluid pipe simulates the time required to move material from one object to another. It can appear as either a cylindrical pipe, or as a simple conveyor. See the Fluid Pipe reference page for more information. Fluid Processor The fluid processor simulates a processing step that continuously receives and sends fluid material (such as a continuous cooker). See the Fluid Processor reference page for more information. Item to Fluid The Item to Fluid object receives flow items and converts them to fluid material. See the Item to Fluid reference page for more information. Fluid to Item The Fluid to Item receives fluid and converts it to flow items that it sends downstream to a fixed resource. See the Fluid to Item reference page for more information. Fluid Conveyor The Fluid Conveyor controls fluid flow through the use of multiple input and output ports. Inputs and outputs may be placed anywhere along the length of the conveyor. The direction, speed, acceleration and angle of repose along with the length and width of the conveyor are all factors that will affect where material rests inside the conveyor and when and to which output port the material will be sent. See the Fluid Conveyor reference page for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/ImportingCAD/ImportingCAD.html",
        "title": "Importing CAD Drawings and Floor Plans",
        "content": "Introduction Often one of the first steps in building a simulation model is to create or import a floor plan of the facility you want to simulate. Although importing a floor plan is optional, you might find that a floor plan is useful because: Floor plans can act as a guide when placing 3D objects in your simulation model. Floor plans can keep your simulation model anchored in the physical realities of the facility you are trying to model. Floor plans ensure model accuracy. The distance between two objects can sometimes affect the quality of the data coming out of your simulation model. For example, it can change how long it takes to transport a flow item or walk from one location to another. Tiny discrepancies in time can add up gradually, causing skewed results. Using floor plans can help reduce some of those inaccuracies. You can use use more than one floor plan in your 3D model if needed. The ideal floor plan file is an AutoCAD drawing. These files usually have a .dwg file extension. You could also possibly import an image file (.png, .bmp, .jpg, .gif, or .ico) that has an accurate drawing of your floor plan. However, be aware that these images sometimes don't scale as well as AutoCAD drawings. AutoCAD Files FlexSim is designed to work better with .dwg files. If you use an image file, it will likely appear blurry in the model, especially as you scale it. FlexSim can't import Revit files (.rvt). However, Revit has an option to export to .fbx, which can be imported in FlexSim. Preparing Floor Plan Files Before Importing Before importing an AutoCAD .dwg file, consider making some improvements to your floor plan file, as discussed in the following sections. Remove All Unnecessary Information AutoCAD files typically include much information that is unnecessary to the simulation. Typically, all a simulation needs is a basic layout. Removing information that is extraneous to the simulation will make your model more clear and reduce the burden on your graphics card. As a result it will be easier to build and present the model. Remove any parts of the drawing that are not pertinent to the simulation study. You should especially consider removing any text, but also possibly grids and hashing as well. Also, check to ensure there aren't any accidental elements on the outer fringes of the AutoCAD drawing that could cause problems once it is imported into FlexSim. Adjust the Scale to FlexSim Units AutoCAD files are often scaled in inches. FlexSim models are often scaled in feet or meters. You might need to rescale the AutoCAD file so that it will work appropriately in FlexSim. For instance, to convert from an AutoCAD file in inches to a FlexSim model in feet, the scale factor will be 1/12. To determine how much to scale, follow these steps: Measure a known distance in AutoCAD (\"_dist\"). Apply the following equation: scale factor = FlexSim distance / ACAD distance. To scale objects in AutoCAD follow these steps: Use Ctrl+A to select all the objects in the drawing. Type \"_scale\" in the command prompt or select the scale command from the menus. Click the reference point that will move. Type # then the location in the calculated scale factor in the command prompt. Uniform Scaling The drawing's scale factors affect the view culling of the DWG renderer. If the scaling is uniform across the X, Y and Z axes then the drawing should not clip inappropriately when the view is rotated or zoomed. If you need non-uniform scaling, rescale the drawing in AutoCAD. Move Objects to the Origin AutoCAD drawings are often drawn using a specific coordinate system. This usually means that the objects are not located near the origin (0,0,0). When a .dwg file is imported into FlexSim, it is positioned in FlexSim's coordinate system according to the .dwg's positioning. So if the origin point of your AutoCAD file is very far away from the actual drawing, when that .dwg file is imported into FlexSim, the layout will also be very far away from the model's origin position in FlexSim. To avoid experiencing this problem, move your AutoCAD objects to the origin. To move your AutoCAD objects to the origin: Select the objects you want to move. Type \"_move\" in the command prompt or select the move command from the menu. Specify a reference point. Type in the desired location of that point in the command prompt. Importing a Floor Plan File You will use the Model Background tool in the Toolbox to add a floor plan to your model. The Toolbox is where you can manage all the different tools that you are using in your simulation model. To find the Model Background tool: Click the Tools button on the main toolbar to open the Toolbox in the left pane. What is the Toolbox? The Toolbox gives you an overview of all the tools and tool components that you are currently using in your simulation model. See Using the Toolbox for more information. Click the Add button to open a menu. Point to Visual , then select Model Background to add a background to the model. In the Background tab, click the Browse... button to navigate to the file. Navigate to your the file location, select the file and click the Open button. Viewing the Floor Plan in Your Model After you select your CAD file, it will automatically appear in the background of your simulation model. If you don't see it, make sure that your the Model tab is open and active. It could also possibly be that the floor plan's coordinates are outside of the 3D model's viewing window. You could possibly try zooming out to see if it appears. Also, the DWG renderer is a custom third-party renderer that controls its own view frustum and occlusion clipping planes using deprecated OpenGL functions. Consequently, DWG files do not work with a Core Profile OpenGL Context, stereoscopic 3D, VR, or RTX Mode. You can change the position, size, or rotation of the CAD drawing. If your CAD drawing was created in units different from your model, you can press the Scale to Model Units button to convert the drawing's scale to match your model's units. It will prompt you to select the units the drawing was originally created with. Press the Reset button to reset the background's spatials. In the Layers tab, you can change the color of the different layers in the CAD drawing and turn off the visibility of specific layers. You can experiment with other colors as desired. In the Snap Points tab you can access the drawing's snap points in your FlexSim model. Using these settings, you can enable snap points and then determine whether you want the drawing's snap points to be visible in the model or not. The default option is to draw the snap points whenever you are dragging an object in the 3D model. See Working With Snap Points for more information. Importing Snap Points Will Increase Your Model's Overhead When you import AutoCAD snap points, it will create nodes in the model's tree structure for each snap point (including vertices, lines, arcs, etc.). This could slow down your model or increase its overall size. Editing and Deleting Floor Plans If you need to make changes to the CAD drawing after you're finished, go to the Toolbox and double-click on the Model Background you want to edit to open its Properties window. If needed, you can also delete the CAD drawing using the Toolbox. See Deleting a Tool Component for more information. Troubleshooting Floor Plans Because AutoCAD is a third-party software, sometimes files created by newer versions of AutoCAD do not always function optimally in FlexSim. This section will discuss common problems and their solutions when importing AutoCAD drawings into FlexSim. If these solutions do not solve your problem, please feel free to contact FlexSim Customer Support at any time. Before You Begin Troubleshooting Before reading this section, make sure you have read the section about Preparing Floor Plan Files Before Importing to ensure you have fixed any potential problems with your floor plan file before you imported it. AutoCAD Drawing Isn't Visible Sometimes when you import an AutoCAD Drawing, you won't see it in your model. To fix this problem, make sure that: In the background's Properties window in the Layers tab, make sure the Visibility buttons are set to show each layer in your drawing. You could also try changing the color of the layers to see if that helps improve their visibility. In the background's Properties window in the Background tab, make sure the Luminous box is checked. (It is checked by default.) Another problem might be that the point of origin for your AutoCAD file is far away from the actual drawing of your facility for various reasons. To find your drawing, you might need to zoom out of the model until you can see where the drawing is. Zooming In and Out To zoom in and out of the model, use the wheel button on your mouse. Scrolling up will zoom in on the model and scrolling down will zoom out. If you don't have a mouse wheel, you can also click the right and left mouse buttons simultaneously and move your mouse up or down. AutoCAD Files With References to Other Files Aren't Appearing Some AutoCAD files contain references to other AutoCAD drawings. For example, a portion of one AutoCAD drawing might include portions of another AutoCAD drawing, which means that the original file is referencing that other drawing. Sometimes when you import one of these drawings into FlexSim, it appears that part of the drawing is missing because it no longer references the other file. To fix this, you need to ensure that all the referenced files are contained in the same root folder as the AutoCAD drawing that references them. Strange Location Coordinates When you import an AutoCAD drawing into your simulation model, FlexSim does its best to find the actual drawing of your facility. However, FlexSim might place the drawing of your facility in strange places in the simulation model (as opposed to setting the location coordinates to 0, 0, 0). This problem is usually caused when the point of origin for your AutoCAD file is far away from the actual drawing of your facility. If desired, you can try to change the location of your drawing by moving it by yourself. You can make these changes in the Background tab of the background's Properties window. Working With Snap Points FlexSim uses the term snap points to refer to vertices, lines, arcs and other elements in a AutoCAD drawing. However, it will only use the vertices when snapping it to the background. Typically only advanced FlexSim users need to load the drawing's snap points into their 3D models. You can load the CAD drawing's points into FlexSim's tree nodes to get more control over the way you get information from the drawing in the model. Some people use this functionality to auto-build their models or to get specific data from their models. You can also use snap points to position the objects in the model with more precision. Objects will only snap to the snap points of the first background in the model. Loading Snap Points You can load snap points by checking the Load Snap Points checkbox in the Snap Points tab of the background's Properties window. If you do so, consider selecting Always Draw as the Snap to Background Draw mode. Also consider increasing the Snap Point Draw size. You should also change the model's view settings so that they snap to the background: Click a blank area in the 3D model to ensure nothing is currently selected. In Quick Properties under the View Settings group, check the Snap to Background checkbox."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/UniversalSceneDescription/UniversalSceneDescription.html",
        "title": "Universal Scene Description (USD)",
        "content": "Introduction Pixar's Universal Scene Description (USD) format is a set of software modules that enable robust interchange of data between digital content creation tools. FlexSim has support for USD in the following features: 3D shape importer Model exporter USD Stage object FlexSim's USD features also provide interactions with Nvidia's Omniverse , which is a computing platform that enables USD-based 3D workflows and collaboration. 3D Shape Importer USD files can be imported as an object's shape using the Visuals Properties panel . USD is a large, extensible format with many features that are not used by the basic 3D shape importer. When importing a usd file as an object's shape, only geometric 3D mesh data and basic surface material data will be loaded from the file. Other data within the usd file will be ignored. Importing USD animation data is not supported at this time. Layered USD Files - Embedded Media The USD format includes support for referencing external usd files within a usd file. When loading a stage with a complex composition, FlexSim's packed media feature only embeds the main usd file and referenced textures. Externally referenced usd files will not be embedded into the fsm file. To ensure that referenced usd files are visible when sharing a FlexSim model, the references should be relative paths and the referenced files should be distributed along with the FlexSim model file. Alternatively, usd files can be \"flattened\" to embed any external files into the main file to remove layered composition. Internal usd prim references could also be used. Model Exporter The current state of a FlexSim model can be exported to USD. For more information, see the Omniverse Connector tool. USD Stage Object In addition to basic importing and exporting of usd files, FlexSim supports more complex USD workflows via the USD Stage object. These workflows include: Connecting to Nvidia Omniverse usd stages Viewing prim hierarchy and properties Modifications of usd prim data Bi-directional collaborative editing of Nvidia Omniverse usd stages Adding FlexSim objects and data to imported stages Streaming simulation data updates for external rendering and video recording of animated simulation runs"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWith3DObjects/AddingObjects/AddingObjects.html",
        "title": "Adding 3D Objects to a Model",
        "content": "Introduction to Adding 3D Objects There are several different methods you can use to add 3D objects to your model. You can: Drag and drop 3D objects from the Library Use the Quick Library to add object directly inside the simulation model Turn on Create Objects mode The method you decide to use is largely a matter a personal preference. Try experimenting with each method to determine which you prefer. Each of these methods will be explained in more detail in the following sections. Drag and Drop from the Library One common way to add 3D objects is to drag and drop them from the Library. To use this method: Make sure the 3D model is active and that the left pane is open to the Library (not the Toolbox). Drag an object from the Library to the 3D model. Use the Quick Library Another method is to add 3D objects using the Quick Library, which is a condensed menu of the most commonly used 3D objects: To add an object using the Quick Library: Double-click a blank space in the 3D model to open the Quick Library. Click the icon for the activity you want to add. Creating Port Connections With the Quick Library You can automatically create port connections to new objects using the Quick Library: Press and hold the A key (or S key) to enter port connection mode. Click the object you want to connect to a new object. Click the blank space in the model where you want to place the new object. Click the icon for the object you want to add. See Key Concepts About Ports for more information about ports. Use Create Objects Mode Another method for adding 3D objects is to to turn on Create Objects mode. This method is particularly useful if you want to add multiple objects of the same type at one time. For example, if you wanted to add five processors to your model at the same time, it would be best to use the Create Objects mode. To turn on Create Objects mode: Click the object you want to add in the Library (without dragging the object or holding the mouse button after clicking). Your mouse pointer will change to the Create Objects icon to show that you are in Create Objects mode. Click a blank space in the 3D model to add the object. Continue to click blank spaces in the model to add any additional objects. Press the Esc key or right-click in the model to turn off Create Objects mode. Creating with the Same Properties as Existing Objects When you are in Create Objects mode, you can make the created objects use the same properties as objects you have previously created. When you are in Create Objects mode, you will see a creation pane on the right. Here you can select an existing object in the model by pressing and clicking on that object. Then the objects you create will take the same properties as that object. You can also use this to create template instances by checking the box Create as Template Instance . Using the Toolbar You can also enter Create Objects mode by clicking the Create Objects button on the toolbar, then clicking the object in the library you want to create."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWith3DObjects/SelectingObjects/SelectingObjects.html",
        "title": "Selecting 3D Objects",
        "content": "Difference Between Highlighting and Selecting There are two different methods for selecting objects: highlighting or selecting. FlexSim possibly uses these terms in a slightly different way than you may be familiar with, so these terms and procedures will be defined in more detail in this section. Highlighting A highlighted object is the object you are currently focused on. When an object is highlighted, it will be surrounded by a yellow box, as shown in the following image: When an object is highlighted, you can edit its properties. Only one object can be highlighted at a time. Selecting You can select several objects at the same time. Objects will remain selected even if you click other parts of the model or screen. When an object is selected, it will be surrounded by a red box, as shown in the following image: Selecting multiple objects allows you: To edit the properties of several objects simultaneously. To copy and paste a group of objects at the same time. To copy an object's property settings to other objects. To build port connections between several objects more quickly. Highlighting and Selecting Aren't Mutually Exclusive An object can be both highlighted and selected at the same time. Highlighting and Selecting Objects To highlight an object, simply click on it. The last object you clicked will always be highlighted. To select an object, use one of the following methods: Press Shift+click or Ctrl+click while clicking the object. Press Shift+click or Ctrl+click outside of a group of objects and hold the mouse down while you drag a box around the objects. If you've selected at least one or more object and highlighted at least one object, the Selected Objects group appears in Properties , as shown in the following image: You can use this tool to select additional objects or remove objects from the selection group. The box shows which objects are currently included in the selection group. The following table describes how the buttons work: Button Description Opens a menu to select objects that are in the model. Removes an object from the selection group. Click this button to turn on sampling mode. Any 3D object you click while you are in sampling mode will be added to the selection group. Editing object properties while multiple objects are selected will apply the changes to all selected objects as described in Editing Multiple Objects . Deselecting Objects To remove object highlighting, click on a blank space in the model. To deselect objects, press Shift+click on a blank space in the model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWith3DObjects/MovingResizingRotating/MovingResizingRotating.html",
        "title": "Moving, Resizing, and Rotating 3D Objects",
        "content": "Introduction to Moving, Resizing, and Rotating 3D Objects FlexSim uses the classic Cartesian coordinate system to position objects within the model. For that reason, FlexSim uses the terms X, Y, and Z to refer to the axis coordinates for the position, rotation and size of the object: The X axis moves the object from left to right, resizes the object's length, and rotates the object using the X-axis as its center point The Y axis moves the object forward and back, resizes the object's width, and rotates the object using the Y-axis as its center point The Z axis moves the object up and down, resizes the object's height, and rotates the object using the Z-axis as its center point The XY plane acts as the \"floor\" of your model, while moving objects along the Z axis moves objects vertically, or \"up in the air.\" You can use either your mouse or the tools in the Visuals panel of Properties to move, rotate, and resize the objects in your model. This section of the guide will discuss both methods. Moving 3D Objects The simplest way to move an object is to click it and drag it to a different position in the model. This moves the object in the XY plane . To move the object up and down in the Z axis , click the object using both the left and right mouse buttons at the same time and, while holding down the mouse buttons, move the cursor up and down. Using Axis Handles When you click any object in a model, an \"orb\" will appear with several manipulation handles. We refer to those colored handles as the object's axis handles . Each axis handle can be used to resize, rotate, or move the object, as follows: Drag the square handle to resize the object on that axis. Drag the cone handle to move the object along the axis. Right-click on an axis handle and move the cursor up or down to rotate the object around that axis. Drag the blue circle handle to rotate the object around the z axis. Drag the orange square handle to resize the object on all of its axes, preserving its size aspect ratio. The following image shows the axis handles in action: Keyboard Shortcut to Toggle Manipulation Orb and Handles Pressing the G key will toggle whether the manipulation orb and handles are drawn when you click on an object. Keyboard Shortcut to Scale 3D Objects FlexSim has a shortcut that can make it possible to scale an entire object's size by 5%. First, click the object to highlight it (e.g. the yellow box and axis arrows will appear around the object). Then press Ctrl+K to scale the object down (make it smaller). Or press Ctrl+L to scale the object up (make it larger). Using Properties You might possibly want the location, rotation, and size of the objects to be more precise in your model. In that case, it might be better to use the Properties tool instead of using your mouse. This section will discuss some tips and tricks for setting an object's exact location, rotation, and size using Properties. When you highlight an object in the model by clicking on it, the right pane displays the Properties for that particular object. In the Visuals panel, you'll see several different boxes for changing the object's position, rotation and size: To the left of each row, you'll see three different graphical icons, as explained in the table below: Icon Description Point of Reference Position Changes the object's position (location) within the model By default, the object's position is determined by the coordinates of the object's bottom center. However, you can change this point of reference by clicking the Position button. See Changing the Location Point of Reference for more information. Rotate Rotates the object The object will rotate on its center axis. Resize Adjusts the object's default size Every object in the FlexSim library has a default size. When you first created the model, you set up the default units of measurement using the Model Units dialog box. At that time, FlexSim automatically scaled the size of the objects in the Library based on the units you specified. For example, a Queue in the FlexSim Library is 2 meters by 2 meters by .2 meters by default. If you specified feet as your unit of measurement, the default size of the Queue in the FlexSim library would change to 6.56 feet by 6.56 feet by 0.66 feet. Using each tool and its corresponding axis-coordinates, you can change the object's position, rotation, or size. The following table explains how each of the different tools can change the object based on the axis you are defining: X Y Z Position Moves the object left and right on the X axis Moves the object forward and back on the Y axis Moves the object up and down on the Z axis Rotate Rotates the object on the X axis Rotates the object on the Y axis Rotates the object on the Z axis Resize Resizes the object's length Resizes the object's width Resizes the object's height How are object rotations calculated? Object rotations are represented using Euler angles. This means that the object is rotated intrinsically, first around its Z axis, then around its Y, and finally around its X. This is essentially a Tait-Bryan yaw-pitch-roll method. Changing the Location Point of Reference By default, the point of reference on the object that determines the object's location is the bottom center, as shown in the following image: When you view an object's location in Properties, it displays the location coordinate for this point of reference by default. However, you can change the point of reference if needed: Click the object in the 3D model to select it. In Properties, click the Position button to open a menu: As you mouse over a different point of reference, the 3D object will display the location of that point of reference is on the object, as shown in the following example: Select the desired point of reference on the object. Notice that the position settings in Properties will change to display the exact coordinates for this point of reference on the object, even though the object has not moved. Edit the coordinates as desired. The new location coordinates will be calculated based on this point of reference. Rotation Affects the Point of Reference Be aware that when you rotate the object, the point of reference will rotate with the object. For example, the following image shows the upper left object when it has been rotated 90 degrees on the Y-axis: Direct Spatials The Direct Spatials reference point works differently than all the above options. Selecting this option will display the position of the object as the spatial values of the object stored by the software. These spatial values are calculated off the back left corner on the bottom of the object before any rotations are applied. Because this value is not very useful after an object has been rotated, this mode is not normally recommended. This mode is useful when you want direct access to the values stored by the software, for example, when using the position of the object as an experimenter variable. Setting or reading the object's location through code will generally return these Direct Spatials values. However, you can use the Object's setLocation and getLocation methods which allow you to additionally specify the Point of Reference."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWith3DObjects/CopyingPasting/CopyingPasting.html",
        "title": "Copying and Pasting 3D Objects and Properties",
        "content": "Overview This topic will explain the basics of how to copy and paste objects. It will also discuss how to use the Edit Selected Objects tool for more advanced copying. The Edit Selected tool makes it possible to copy properties from one object to several other objects at the same time. Additionally, this topic will discuss how to create custom object libraries. Custom object libraries are useful if you have customized the properties of a particular object and you'd like to be able to easily add copies of this custom object directly from the Library. Basic Copying and Editing The simplest way to copy and edit an object is to click it, press Ctrl+C to copy that object to the clipboard, then press Ctrl+V to paste that object in the model. As an alternative to using these keyboard shortcuts: Right-click the object to open a menu. From the menu, point to Edit , then select Copy to copy that object to the clipboard. To paste the object, right-click a blank area in the model to open a menu. From the menu, point to Edit , then select Paste . Copying and Pasting Multiple Objects To copy and paste several objects at the same time, select all the objects you want to copy. (See Selecting 3D Objects for tips on selecting multiple objects at a time.) Then use Ctrl+C and Ctrl+V. Setting Properties on Multiple Objects Using the Properties Pane Highlighting vs. Selecting Before reading this section, make sure you are familiar with the terms highlighted and selected as they are used in FlexSim. See Selecting 3D Objects for more information. You can use the Properties Pane to change the properties of all selected objects at the same time: Press Shift+click the objects onto which you want to copy the properties. A red box will appear around them to indicate they are selected. See Selecting 3D Objects for more tips on selecting multiple objects. Click one of the selected objects to highlight it. In the Properties pane, edit the property you want to change. When you are finished editing the property, the property will update to be the same for all the selected objects. Using Property Tables While the Properties pane enables simple editing of multiple objects simultaneously, property tables can be much more powerful because they let you both see and compare the property values of multiple objects, as well as change those properties, in an Excel-like table interface that is intuitive and easy to use. See Property Tables for more information. Setting Properties through code Object properties can be set through code by using the Object.setProperty() method. A list of valid properties for each object can be found on that object's help page. For example, Queue Properties . Group queues = Group(\"Queues\"); for (int i = 1; i <= queues.length; i++) queues[i].setProperty(\"MaxContent\", 5); Creating Custom Object Libraries Consider using a custom object library if you have customized the properties of a particular object and you'd like to be able to easily add copies of this custom object directly from the Library. See Creating Custom Object Libraries for more information."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWith3DObjects/UsingTemplates/UsingTemplates.html",
        "title": "Using Object Templates",
        "content": "What Are Object Templates? Object templates enable you to build and configure your model using the object-oriented principle of inheritance , by creating template instances of objects in your model. A template instance is like any other object in FlexSim, except that it has a special link to its template , enabling several useful features: By default, template instances inherit property values from their template object. This means that when you change a property on the template, all instances automatically get that new property value. You can selectively override properties on each instance. Here the instance's property value becomes independent from its template. The mechanism for defining overrides is automatic by default: as soon as you change the property on the instance, FlexSim automatically marks that property as overridden. Alternately, you can explicitly define which properties are overridden versus inherited. Template inheritance can be multi-layered. A template instance can itself be a template for other instances, creating a kind of \"family tree\" of inheritance. Using this flexible inheritance functionality can make building and configuring models much faster. You can configure object properties on a few key objects in your model, and those properties will be inherited automatically by many other objects. Creating Template Instances Almost any 3D object in FlexSim can be a template or a template instance. You make an object into a template simply by creating template instances of that object. There are two primary ways to do this. First, you can do it as you create objects in your model: Click on the object you would like to create in the library view on the left, such as a Queue. In properties on the right, you will see a Queue Creation pane. In that pane, under Use Same Properties As , press , then in the 3D model, click on the object you would like to create an instance of. Check the box Create as Template Instance . Create the template instance in the 3D view by clicking at the location you would like it to be created. You can also create instances from a template object's properties pane. To do this: Click on an object in your model. In properties on the right, expand the Template pane. Under Instances press . This will create a template instance of the object. Blue bezier lines are drawn to indicate inheritance relationships. They protrude out of the bottom of template objects and into the top of instance objects. Managing Instance Inheritance When you create a template instance, most properties of that instance will be inherited. The text styling of properties distinguishes inherited versus overridden values. Properties that are displayed in italics are inherited properties, whereas properties that are displayed in bold signify an overridden property. As soon as you change an inherited property on an instance, its display will change from italics to bold , signifying that the property is now overridden. Subsequent changes to the property on the template will no longer be reflected on the instance. You can also directly view and edit the list of overridden properties: Click on the template instance you want to analyze. Expand the Template pane in properties. Under Overrides , press . A popup window will appear with a list of the object's overriden properties. You can add to, remove from, and reorder this list as needed. You can also select an override and press . This will remove the override from the instance, but apply its value to the template, asserting the instance's current value on the template and all sibling instances. Global Templates You can also make any object in your model into a global template . A global template creates a draggable icon in the library. When you drag this object into your model, it automatically creates an instance of that global template. To do this: Click on the object you want to make a global template. Expand the Template pane in properties. Select the Global Template checkbox. The object will appear in the library on the left. You can then drag instances of the object into your model. When you have made an object a global template, that object will also appear in the Toolbox . If you double-click on the template in the Toolbox, it will center that object in the 3D view and highlight it so that you can edit its properties. You can also right-click on the object and add it, as a global template, to a user library. This enables reuse of the object in other models. User Libraries and Global Templates Global templates added to a user library through the toolbox are different than standard objects added to the user library. When you drop a global template from a user library into a model, then if there is a global template with the same name in the model, it will update that global template, instead of just adding a new object to the model. Consequently, it will also update all of the template instances of that global template. This enables easier updates from user libraries to objects in your model. It is like re-installing the new object into the model, with all of its updated behavior. Technical Details Template inheritance is enabled through object properties . When you set a property on an object that has template instances, it will propagate the change to instances by effectively calling Object.setProperty() on each of the object's instances. Further, it overrides a property by storing the property's unique name in an override list on the object. The important point here is that the set of inputs that can be inherited are determined by the set of named properties that an object supports. If a certain piece of object data does not have a corresponding named property, then that data cannot be inherited. Also, supported properties are generally confined to object inputs, i.e. data that you define on the object when you are building your model. Data such as statistics, state values, etc. do not support properties and therefore cannot be inherited. That said, most object inputs do support inheritance. 3D object inputs that are not inheritable as of FlexSim version 21.2 are: Navigator properties An object's animations and components Fluid object properties Some people properties Internal connections of a visual tool There are also some named properties which inherently do not support inheritance, mostly because inheritance does not make sense for those properties. These are: AllGroups (read only) IsSelected (used for 3D manipulation) Class (read only) Classes (read only) Container Location.X, Location.Y, Location.Z (redundant with Location) Rotation.X, Rotation.Y, Rotation.Z (redundant with Rotation) Size.X, Size.Y, Size.Z (redundant with Size) Color.Red, Color.Green, Color.Blue, Color.Alpha (redundant with Color) Template TemplateInstances TemplateOverrides Dimensions (redundant with other storage object properties) Prototype-Based OOP FlexSim's object template mechanism uses a prototype-based modeling style instead of a class-based one. Templates are themselves objects in your model, and as such, can be integrated in with the model as you define them. This design enables a more cohesive model-building process, where you are defining the object and building the model at the same time, instead of switching between two phases of class building then instantiation/model building. On the other hand, if you prefer a more class-based model-building approach, you can easily set your templates apart in an area of the model where you can define them separately, then use just template instances to actually build the model."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWithFlowItems/KeyConceptsFlowItems/KeyConceptsFlowItems.html",
        "title": "Key Concepts About Flow Items",
        "content": "Introduction to Flow Items Flow items are the items that will flow through your simulation model from the beginning of your simulation until the end. Flow items can represent many different things in your simulation model such as: Materials moving through an assembly line Customers walking through a service center Products moving to different locations in a warehouse Orders getting transferred from one station to another By default, flow items look like brown boxes, as shown in the following image: However, FlexSim has a variety of other shapes available for flow items: people, cylinders, spheres, pallets, totes, trucks, etc. You can easily change and customize the visual appearance of the flow items in your simulation model using a tool called the Flow Item Bin. Using this tool you can: Change the color, size, or rotation of the basic flow item shapes Add your own custom 3D flow items Set default labels or itemtypes on flow items Create different shape frames for the basic flow item shapes so that their appearance can change at different stages in the simulation model See Using the Flow Item Bin and Creating Custom Flow Items for more information about changing the basic appearance of flow items. Getting Flow Items into a 3D Model The most common way to put flow items into a 3D model is to use a source object, as shown in the following image: In this model, a source creates flow items and puts them into a queue at random intervals. You can set the source to create flow items at any rate that you want. Alternatively, you can add flow items to a model using the Create Object activity in the Process Flow tool. For example, the process flow in the following image can act just like a source: In this example, the Create Object activity is set to create a box flow item and put it inside the queue in the 3D model. See the chapter on Building the Model's Logic for more information about the Process Flow tool. Types of Flow Items There are three different types of flow items: basic, container, and TaskExecuter. Each type of flow item behaves a little differently in the simulation model and has different properties or unique logic, as explained in the following table: Type Description Flow Items Basic Basic flow items are simple shapes that can flow through the simulation model. You can change the visual appearance of these shapes so that they have a custom color, size, or rotation. Box Cylinder Sphere Plane Circle Container You can pack a container flow item with basic flow items, possibly preparing the container and its contents for transportation or storage. You can customize how flow items get packed into the container flow items using the Flow Item Bin. See Packing Methods for Containers for more information. Pallet Tote Truck TaskExecuter TaskExecuter flow items look like an operator object, which is helpful if you want to simulate customers as flow items. These flow items act like actual task executer objects, meaning you can assign them tasks to do and they can walk from one object to another in the simulation model. Person Flow Item Labels In FlexSim, labels store specific pieces of information on objects such as flow items. Labels are key to the overall functionality of FlexSim because they can track important information or dynamically change the model's logic or behavior. See Key Concepts About Labels for more information. For example, imagine you want to track a flow item's weight as it moves throughout the simulation model. You would create a label on the flow item named Weight and perhaps set its initial value to 25 (meaning 25 pounds or grams). As the flow item moves through the simulation system, different processes could change the value of that label. As another example, imagine you want different flow items to undergo different processes based on their specific item type. Product A should be diverted to one set of processes while Product B should be diverted to a different set of processes, and so forth. To create this kind of logic, you'd create a label named Type on the flow item. A flow item could be assigned a value of 1 to represent Product A and a value of 2 to represent Product B. As the flow item moves through the simulation system, it could reach a point in the simulation model where an object checks the label on the flow item. If the value of the label is 1, it might send that item to the set of processes for Product A. If the value of the label is 2, it might send the flow item to the processes for Product B instead. Using the Flow Item Bin, you can add a default label to a flow item. See Adding Labels to Flow Items for specific instructions. Labels Can Be Added Later You do not necessarily need to use the Flow Item Bin to add labels to a flow item. You can set up your model's logic so that labels are added while a flow item moves through the simulation model. However, it can be useful for label management to set the initial values in the Flow Item Bin."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWithFlowItems/UsingFlowItemBin/UsingFlowItemBin.html",
        "title": "Using the Flow Item Bin",
        "content": "Overview of the Flow Item Bin Before reading this topic, make sure that you are familiar with the Key Concepts About Flow Items first. You can use the Flow Item Bin to change and customize the visual appearance of the flow items in your simulation model. Using this tool you can: Change the color, size, or rotation of the basic flow item shapes Add your own custom 3D flow items Set default labels or item types on flow items Create different shape frames for the basic flow item shapes so that their appearance can change at different stages in the simulation model This section will provide a high-level overview of the most important elements of the Flow Item Bin, as labeled in the following image: Each element will be explained in the following sections: Flow Item List The Flow Item List displays all the default FlexSim flow items as well as any custom flow items you add to the Flow Item Bin. When you click on a flow item, it will appear in the Flow Item Preview. Flow Item Preview The Flow Item Preview pane allows you to see a visual preview of the selected flow item. You can also use your mouse to edit the size and rotation of the item in the preview pane. Flow Item Toolbar You can use the Flow Item toolbar to add a new custom flow item. You can also use it to copy or reorder the items in the Flow Item List. Quick Properties The Quick Properties pane will display the properties for the currently selected flow item. You can use these properties to change the shape, color, size, or rotation of the flow item. You can also use Quick Properties to change the flow item's default labels and itemtype. See Flow Item Labels and Itemtypes for more information. Opening the Flow Item Bin To open the Flow Item Bin: Open the Toolbox by clicking the Toolbox tab in the left pane or by clicking the Tools button on the main toolbar. Click the Expand button next to the Flow Item Bin to show all the currently available flow items. Double-click one of the listed flow items to open it in the Flow Item Bin. Changing the Appearance of Flow Items When an object is selected in the Flow Item Bin, you can see it in the preview pane. You can click the item in the preview pane and the colored cones will appear, allowing you to change the size and rotation of the item. See Moving, Rotating, Resizing 3D Objects for more information about using the colored cones. You can also use Quick Properties to change the shape, color, size, or rotation of the flow item. The next two sections about importing custom 3D flow items and shape frames will explain more advanced methods for changing the visuals of a flow item. Changing the Default Flow Item To use a different flow item than the default box shape: Add a source to the 3D model. Click the source to open its properties on the right. Under the Source section, open the FlowItem Class menu and select the shape you want from the list. (To see the available shapes, open the Flow Item Bin. See Types of Flow Items for more information.) Adding Labels to Flow Items To add a label to a flow item: Open the Flow Item Bin and select the flow item to which you want to add a label. In Quick Properties under Labels , click the Add button to open a menu. Choose either Number Label or String Label to select the type of label you want to add. If you're not sure what type of label you want to add, select String Label . A new row will appear in the Labels table. Double-click the LabelName and give your label a descriptive name such as weight or priority . In the blank cell next to the label name, enter the default starting value for the label."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWithFlowItems/UsingContainerFlowItems/UsingContainerFlowItems.html",
        "title": "Using Container Flow Items",
        "content": "Introduction to Container Flow Items You can pack a container flow item with basic flow items, possibly preparing the container and its contents for transportation or storage. You can customize how flow items get packed into the container flow items using the Flow Item Bin. FlexSim provides three container items: Pallet Tote Truck The following sections will discuss how to use containers in a 3D model and how to customize their packing methods. Packing Methods for Containers Container flow items are a special type of flow items that can be packed with basic flow items, as demonstrated in the following image: You will use the Flow Item Bin to determine the packing logic for the container flow item. The Combiner Determines the Quantity The packing method does not determine the quantity of items that will be packed into each container. That logic will be set on the combiner object. See Using Containers in a 3D Model for more information. The following sections explain the available packing methods: Default This method stacks flow items on top of the container, filling up as much of the available space as possible before moving onto the next layer. It is nearly identical to how the queue stacks flow items by default. Simple The simple packing method is used by the tote container. This method stacks flow items inside the container, filling up as much of the available space as possible before moving onto the next layer. Layer Stacking The layer stacking method stacks flow items based on the uniformity of their size. When flow items have a consistent height (Z axis), they will be put on one layer of the container. As soon as the height of the flow item differs from the other flow item, it will be put on a new layer. You can change the layer stacking so that it checks for width (X axis) or depth (Y axis) instead. In the following example, the red, green, and blue boxes all have slightly different heights: Truck The truck stacking method is used by the truck (and can only be used by the truck). This method stacks flow items in the back of the truck on top of each other and gradually moves to the front. Pallet Stacking The pallet stacking method is used by the pallet container. It is nearly identical to the default stacking method except the z size of the pallet adjusts to encompass items placed in a new layer. Custom If you are comfortable with FlexScript, you can create your own custom packing logic. To create custom packing logic: In the Flow Item Bin, click the Edit Packing Methods button located at the bottom of the Flow Item List to open the Packing Editor. Click the Add button to add a new custom packing method or click the Duplicate button to copy and modify an existing packing method. Viewing and Editing the FlexScript Code To view or edit the FlexScript code for any of the existing packing methods, click the packing method to select it. Then click the Code button to open the code viewer. Using Containers in a 3D Model The most typical way to use a container in a 3D model is to use a combiner to pack the container. When using a combiner, keep in mind that you'll need at least two sources in your model. One source will create the container flow items and the other source will create the basic flow items that will be packed into the container. These sources do not need to be directly connected to the combiner, but the flow that will feed the containers into the combiner will need to be connected to the first port. See Overview of 3D Object Flows for more information. The combiner determines how many flow items will be packed into the container. To adjust this number: Click the combiner to update the Properties window. In the Combiner panel, under the Components List , change the number in the Target Quantity cell. Changing a Container's Packing Method To change a container flow item's packing method: In the Flow Item Bin, select the container flow item you want to change. In Properties under FlowItem , click the Pack Contents menu to open it. Select the packing method you'd like to use."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWithVisualObjects/UsingVisualObjects/UsingVisualObjects.html",
        "title": "Using Visual Objects",
        "content": "Overview of Visual Objects The visual objects that are available in the FlexSim library can help you add visual details that might be useful when presenting the model to stakeholders. The following table provides an overview of the purpose and common uses for each visual object. The objects are listed from the most commonly used to the least commonly used: Object Purpose Text Use a text object if you want to add text to a specific place in your model. Text objects can be helpful for clearly labeling portions of the model when you share the model with stakeholders or people who are working on the same model. Billboard The billboard object is very similar to the text object. The difference is that a billboard object will stay in a specific place on the model view screen; it will not move with the model as you pan or zoom. Plane Planes can act as a model floor, which is useful if you want to simulate a location with multiple floors. See Creating Model Layouts for more information. Slide Similar to text, you can use a slide to add a block of text or other information from the model. Slides are similar in appearance to presentation slides that you might create in a program such as PowerPoint. Shape Use shapes if you want to add a 3D shape such as a cube or a sphere to the model. Another good use for shapes is that they can act as locations that customers or employees can travel to. Background The background is actually a tool, not a specific object per se. You can use this tool to add a floor plan or CAD drawing to your model. See Importing CAD Drawings and Floor Plans for more information. Walls Walls are not just one object. Clicking on walls allows pillars to be placed and connected together. This can be used to create a complex walls structure. This object can also be added as an A* Member to use walls as A* dividers. Light Use light objects to customize the lighting of your model. If the model contains light objects, then they will be used instead of the default light settings on the view. The Model Floor The model floor is also a visual object, although it is not found in the Library. See Changing the Appearance of the Model Floor for more information. Creating Custom Shapes You can create your own custom 3D shapes if desired. See Creating Custom 3D Objects for more information. Properties Visual Tool objects use the following properties panels: Statistics Visuals Labels Text (Text and Billboard objects only) Texture (Plane, Slide, and Shape objects only) VisualTool (Except Light and Walls objects) Light (Light object only) Wall (Wall object only) Ports Triggers Changing the Text in Slide Objects Slide objects are designed to look like a presentation slide. Slides consist of several text objects that are displayed on a single plane. Adding Text Objects To add text objects to the slide object drag a Text object from the library onto the slide object. Removing Text Objects To remove text objects from the slide object click on the desired text object and then press the delete key. Changing the Text in Slide Objects To change the text in slide objects, select the desired text object and then edit its text in the Text panel in the Properties window. Changing the Appearance of the Model Floor You can change the appearance of the model floor if needed. You can either add a texture to the floor or change the color. To change the model floor settings: With the Toolbox open, click the Add button to open a menu. Point to Visual , then select Model Floor to open the Model Floor settings. Use the Color box to select a different color for the model floor. Use the Texture box to use a texture file (an image) for the model floor instead. You can also select one of the textures that come with FlexSim such as tiles, concrete, or dirt. Use the Polygon Offset box to define the polygon offset that the floor should be rendered with."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/WorkingWithVisualObjects/CreatingModelLayouts/CreatingModelLayouts.html",
        "title": "Creating Model Layouts",
        "content": "Introduction to Model Layouts Sometimes you might want to view your model with different layouts. For example, perhaps you have a model with multiple floors. (Floors can be created by using the Container object.) With a multi-level simulation model, you might want to build your model with all the floors on the same flat plane, but still be able to view it with the floors stacked on itself. You can use model layouts to quickly change between different model views: You will use the Model Layouts tool to create these different views. This topic will explain how to use the Model Layouts tool in more detail. Opening the Model Layouts Tool To open the Model Layouts tool: On the main toolbar, click View , then select Model Layouts . The Model Layouts tool will appear in the bottom of the left pane, under the 3D Library: Adding and Renaming Layouts To add a new layout: In the Model Layouts tool, click the Add Layout button. By default, the new layout will be named Layout 1 . Double-click the layout name in the Model Layouts menu and type in a more descriptive name. Press enter to save the changes. Deleting Layouts To remove a layout: Select the layout from the Model Layouts menu. Click the Delete Layout button. Setting and Viewing a Layout To set a layout: Put the 3D objects in the model in the position you'd like them to be set. Select the layout you want to set from the Model Layouts menu. Click the Set button. To view a different layout, select it from the Model Layouts menu."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/CreatingCustomObjectsAnimations/CreatingCustomObjects/CreatingCustomObjects.html",
        "title": "Creating and Importing Custom 3D Objects",
        "content": "Introduction to Custom 3D Objects Although you can create an excellent simulation model using the default 3D objects available in the FlexSim library, you might want to customize your simulation model with 3D objects that look like the unique business system you are modeling. The topics in this section of the manual will guide you through this process. Using Third Party Objects and Software FlexSim recommends using AC3D to create static 3D objects. This software is relatively inexpensive, has a user-friendly interface, and is capable of making some high quality 3D objects. You can also import the raw .ac files created from AC3D directly in FlexSim. AC3D is available from www.inivis.com . FlexSim can also import custom objects with bone animations made by third-party applications such as Blender, Poser, Mixamo, or 3ds Max. See Creating Custom Animations for more information. You don't necessarily need to create all the custom 3D objects you need by yourself. One great resource you should consider researching is 3D Warehouse . 3D Warehouse is an open-source library where anyone can upload and download custom 3D objects made with SketchUp. The chances are good that someone has created an object similar to what you need. Consider searching the database as a way to save time. Which File Type Should I Download from 3D Warehouse? The .skp (SketchUp) file format generally works well in FlexSim. See Valid 3D Object File Types for a complete list of the file formats that are compatible with FlexSim. Valid 3D Object File Types The following shape file types have been tested and import well (listed alphabetically): .3ds .ac .dae .dwg .dxf .fbx .glb .ifc * .igs .jt .obj .skp .stl * .stp .usd .wrl * .x * File Format Limitations FlexSim supports IFC2X3 .ifc shapes. FlexSim supports ASCII .stl files, not binary .stl files. FlexSim supports VRML version 1.0 .wrl shapes, not version 2.0. FlexSim supports blend files older than version 2.8. The following shape file types may import but have not been tested extensively: .ase .blend * .cob .csm .gltf .hmp .irr .irrmesh .lvo .lvs .lxo .md5mesh .mdl .ms3d .off .ply .q3o .q3s .raw .scn .ter .xgl .zgl Guidelines for Creating Custom 3D Objects Before creating a custom 3D object, there are a few general guidelines you should keep in mind, as discussed in this section. Reduce the Number of Polygons In order to ensure that your simulation model runs as efficiently as possible, you'll want to reduce the number of polygons in your custom 3D objects. 3D files typically include more information than is necessary. Removing excess polygons will improve the visual performance of your model. The following image is an example of a 3D object with unnecessary polygons: Notice the hoist line and rope combines several polygons in order to make it look more like steel wire. The crane's chassis also has fencing on top which uses additional polygons. While this crane does look realistic, these details and extra polygons aren't necessary and will not look optimal in FlexSim. The following image is an improved version of this 3D object: This 3D object removes those unnecessary polygons while still retaining a realistic look. Textures vs. Polygons As an alternative to using polygons to create realistic effects, consider using textures instead. Textures are flat images (like a .png file) that can be added to the surface of a 3D object to give it the appearance of sophisticated textures and details. For example, this 3D workbench has simple polygons and uses a wood grain texture on its surfaces to give it a realistic appearance: This 3D car uses textures to look like a race car's wraps and to add details to the tires: The following are a few tips when using textures: Share textures among objects. Whenever possible, try to consolidate objects in your 3D creation software and share the same texture among multiple objects. Consolidating textures reduces the number of OpenGL state changes required, which can significantly improve performance. Use transparent images. Image files that support transparency (like .png files) work better in FlexSim. FlexSim will read the transparency of the image and display it properly. Importing 3D Objects You can change the shape of any of the fixed resources or task executers in the 3D model. (See Importing Custom 3D Flow Items for more information about changing the shape of flow items.) For example, if you want to have the functionality of a processor but you would prefer that it looks more like a workbench, you can change the processor's shape. To change an object's shape: Double-click the object to open its Properties window. In the General tab under the Appearance group, click the arrow next to the Shape box to open a menu. Select Browse . Navigate to the location of the 3D file on your computer. Then select Open . The custom 3D shape will appear in place of the old object. Troubleshooting Occasionally when you import your own custom files, you might experience problems with scaling, flow item offsets, or visuals. The following sections will discuss possible solutions to these problems. Adjust the Scale 3D files are not necessarily drawn in feet or meters and may need to be rescaled to work appropriately in FlexSim. There are three ways to adjust the scale of a 3D file: Appropriately scale the file in the 3D program. Scale the visual tool or other object in FlexSim that the file is imported into. Use an xrl file for wrl files. If you are using 3DS or .ac, then you can just make sure the object is scaled properly in whatever 3D software you use. Then import it into FlexSim, and it will automatically import to the correct size. Just make sure that your units in your software are the same as the units you are going to use in FlexSim. Xrl files are used to make imported wrl shapes conform to the object they are imported into. xrl files must have the same names as the objects they modify. For example: crane.wrl and crane.xrl . The xrl file is a text file made up of 13 values separated by carriage returns. You can edit this file using notepad or wordpad, as shown in the following image: What do these values mean? Spatial values determine the end size of the 3D shape. Offset values are the values required to get the 3D shape zeroed out and sized to 1,1,1. The centroid value is 1 or 0 and determines if the object rotates around the center of the object or the top left corner. Getting the Object's Color or Texture to Bleed Through For .3ds and .ac files, you can have the FlexSim object's color bleed through on certain shapes in the file. You can do this in one of two ways: Give the shape an ambient color value of rgb: (0.235,0.235,0.243) [0-1] or (60,60,62) [0-255] in your 3D software Append \"_fsclr\" to the end of the shape's material name in your 3D software For .3ds and .ac files, you can also have the FlexSim object's defined texture show up on the shape instead of the texture defined in the file. To do this, just add a texture named fstx.png to the object in your 3D software. Adjusting Shape Factors Each media file that is imported has certain scaling and offset settings which may cause the 3D shape that you import to not fit within the object's boundaries. If this is case, you can edit the object's 3D shape factors to fit the 3D shape within the object's yellow bounding box. The following image shows modified shape factors for a processor's 3D shape: The image above shows modified shape factors for a Processor's 3D shape. Notice that the yellow bounding box reflects the true position and size of the processor, but the 3D shape has been offset in the x direction. To change the shape factors: Click the object to open its properties on the right. Under the Visuals section, click the More Visuals button. In the Visuals window, next to the Shape Factors option click the Edit button. In the new window, use the properties Position, Rotation, and Size to adjust the shape factors. Changing the Position of Flow Items If the height of the surface of the custom 3D object is different than the height of the original object, you might need to adjust the position of the flow item when it enters the object. To adjust the flow item's position: Click the object to open its properties on the right. Under the Triggers section, click the Add button to open a menu. Select On Entry to add this trigger. Click the Add button next to the On Entry trigger to open a menu. Point to Visual , then select Set Location to open a picklist. Confirm that the Object box says item . (If not, click the arrow and select item from the menu.) Make sure the X, Y, and Z properties match the dimensions of your custom object. You might have to experiment with different numbers until it's right. Run the simulation model to test if the flow items are positioned correctly."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/CreatingCustomObjectsAnimations/CreatingCustomLibraries/CreatingCustomLibraries.html",
        "title": "Creating Custom Object Libraries",
        "content": "Introduction to Creating Custom Object Libraries Consider using a custom object library if you have customized the properties of a particular object and you'd like to be able to easily add copies of this custom object directly from the Library. For example, if you've made several complex changes to the properties of a specific processor, you can add this processor to your custom object library. Then you can simply drag and drop the custom processor from the library into your model and the new processors will have identical properties. You can also export custom libraries to share custom objects with other users. Creating a Custom Object Library To create a custom object library: Right-click the object you want to add to the library to open a menu. Point to Edit , then Add User Library , then select New User Library . The new library and object will appear at the top of the Library in the left pane. From here you have a few options: To rename the library or the object, right-click them and select Rename . To edit the object's properties, right-click the object and select Properties . To save a custom library for use in other models, right-click the library title and select Save Library . To add the custom object to the model, simply drag and drop the way you add any other object from the Library. Changing and Deleting Objects in a Custom Library If you need to modify a library object once it has been added to a user library: Depending on whether your custom object is a 3D objects or a process flow object, drag and drop the object from the library into a model view or process flow view. Make the desired modifications and then add it to the user library. Delete the old object from the library by clicking on the down arrow to the left of the user library name and clicking Remove Object from Library . Adding Containers to a Custom Library You can do the same thing with containers to create copies of multiple custom objects. For example, if you have a workstation with several 3D objects that you will copy throughout your model, it might be helpful to put the entire workstation in a container and add that container to your custom library. See Using Containers as a Model Management Tool for more information. Adding Process Flow Activities and Display Objects Activities and display objects, Process Flow objects and 3D objects attached to Process Flow objects can be added to user libraries. External References When you add a Process Flow object or a set of activities to a user library, keep in mind that references that are external to your object or activities will not be saved in your library object. For example, if you have a user library object that includes a Create Object activity that references Processor4 in your model as its destination, when the library is distributed to other users, that reference will be null and be displayed as None. One way to solve this issue is to reference the external object by name using FlexScript. For example, node(\"Processor4\", model()) . If you are creating a Process Flow user library object you can set the destination property to a Process Flow Variable . When the library is distributed to other users, they only need to set up the user accessible Process Flow Variables for the object to function. To add activities and display objects to a custom library: Ctrl+click all the activities and display objects you want to add to the library. Right click and point to Add To User Library , then select New User Library . A User Library will appear in the Library window. This library can now be saved and distributed to other users. Adding a Process Flow Object To add a project flow object to a custom library: In the Quick Properties for the Process Flow Properties, click the User Library button button next to the Process Flow Name field. Select the user library to add to, or create a new user library. Select As Draggable Icon or As Auto-Install Component . When a Process Flow object is added to a user library, any instances, or attached objects, will be removed. The exception is for the General Process Flow which has one instance: itself. Once added, a Process Flow object can be updated by adding it to the user library again. This will overwrite the previous Process Flow with the new one. Adding Attached Objects (Instances) When you add a 3D object like a task executer or fixed resource object to a user library that is attached to a Process Flow, the Process Flow object will automatically be added to the user library. By default, the Process Flow object is added as a draggable icon along side the 3D object that was added. The Process Flow object can be moved into an auto-install component if desired. When the 3D object is dragged into the model, the library will check to see if attached Process Flow objects are currently in the model. If the Process Flow isn't in the model, the Process Flow object will be added. If it does exist, the object will be connected to the pre-existing Process Flow object, but the Process Flow will not be updated. To updated the Process Flow, manually drag the Process Flow object from the user library into the model. Doing this will maintain all of the Process Flow instances. User Libraries Compare Object Names When saving to a user library and when creating an object from a user library, the Process Flow object's name is used to compare with what already exists in the model or user library. If a Process Flow object is saved to a user library with another Process Flow that has the same name, that Process Flow will be overwritten. When a 3D object is dragged into the model, it will check for a Process Flow object in the model with the same name as the attached Process Flow."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/CreatingCustomObjectsAnimations/CreatingCustomFlowItems/CreatingCustomFlowItems.html",
        "title": "Creating Custom Flow Items",
        "content": "Importing Custom 3D Flow Items Before reading this section, you might want to read Creating and Importing Custom 3D Objects for some general tips and tricks about working with custom 3D objects. It also includes suggestions about third party software and inexpensive 3D object services. To import a custom 3D flow item: In the Flow Item Bin, click the Add button on the toolbar to open a flow item. Select the type of flow item you want to create from the menu. If you are unsure of what type you should create, select Basic FlowItem . (See Types of Flow Items for more information about the types of flow items.) In Quick Properties under General Properties , use the first box to change the name of your flow item to something more descriptive. Click the arrow next to the Shape box to open a menu. Select Browse . Navigate to the location of the 3D file on your computer. Then select Open . The custom 3D shape will appear in the preview window. You can modify the shape's size and rotation in the preview window or using the other properties in Quick Properties. Key Concepts About Flow Item Shape Frames You can use flow item shape frames to change the appearance of the flow item as it moves through various stages or stations in your simulation model. For example, imagine you want to simulate a bottling facility. You have four different flow items objects to represent the bottle at different stages. An empty bottle: A filled bottle: A bottle that has been capped: A bottle that has been labeled: To create a flow item that can have different visual appearances, you'd use each object as a different shape frame on the same flow item. You'd import the empty bottle to act as the base frame and add three additional shape frames for the other three shapes. In the 3D model, you would use triggers or Process Flow activities to change the shape frame at various points in the simulation model, as shown in the following image: Adding Shape Frames To add shape frames to a flow item: Create a custom flow item using the steps outlined in Importing Custom 3D Flow Items . Base Frames and Shape Frames When you import a custom 3D object, the first shape you import will become the base frame . The base frame changes the size and position of the flow item. If you make changes to the size and position of the base frame, it will change the size and position of the other shape frames at the same time. Editing the base frame is a convenient way to edit all the shape frames at once. In the flow item's Quick Properties under Shape Frames , click the Add button to add a new shape frame. In the Shape Frame Name box, type a descriptive name for this shape frame. Click the arrow next to the Shape Frame Box and select Browse . Navigate to the location of the 3D file on your computer. Then select Open . The custom 3D shape will appear in the preview window. Repeat steps 2-6 for additional shape frames. Select the Base Frame Before you close the Flow Item Bin or begin using the custom shape frames in your model, make sure that you select 0 - Base Frame from the Shape Frame Menu so that it will be the default flow item shape when the flow item first enters the 3D model. Using Shape Frames in the 3D Model After adding the logic that changes shape frames, you'll need to add the shape frames to the 3D model. First, make sure that the Source or Create Object activity will add the custom flow item to the 3D model during a simulation run. (See Getting Flow Items into a 3D Model for more information.) After you've added the flow item to the 3D model, you can change the flow item's shape frame after it passes through another object in the 3D model, such as a processor. You can do this by setting the object's trigger to change the shape frame: Click on the 3D object that will change the flow item's shape frame (such as a processor) to open its properties on the right. Under the Triggers section, click the Add button to add the trigger that will change the flow item. For example, you could add an On Exit or On Process Finish trigger. Click the Add button next to the newly added trigger to open a menu. Point to Visual , then select Change Shape Frame to open the Change Shape Frame pick list. Click the arrow next to the Object box to open a menu. Select item . Click the Frame menu and select the name of the shape frame you want to use. Alternatively, you could use a Change Visual process flow activity. See Overview of the Process Flow Interface for more information about the Process Flow tool."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Using3DObjects/CreatingCustomObjectsAnimations/CreatingCustomAnimations/CreatingCustomAnimations.html",
        "title": "Creating Custom Animations",
        "content": "Introduction to Animations Many of the 3D objects in FlexSim Library come pre-programmed with some basic animations. While those animations are generally enough for most simulations, you can also create your own custom animations for FlexSim objects and your custom 3D objects. You can use the Animation Creator tool to create these custom animations. Using the Animation Creator you can: Import and edit animation files created in other animation software applications. You can import custom objects with bone animation files from third-party software applications such as Blender, Poser, Mixamo, or 3ds Max. Export animations created in FlexSim to other FlexSim users. Any animation files you create using the Animation Creator can be easily shared with other FlexSim users if they want to use that animation in a different simulation model. Create variables and triggers that can dynamically change how an object is animated during a simulation run or get information from an animation-related object. Using the Animation Creator, you can create variables that change an object's animation under certain conditions during a simulation run. For example, you could create a variable that slows down or speeds up an animation based on certain conditions. You could also use variables to change the position, rotation, or color of an object's animated components under certain conditions. Customize how flow items are animated. You can use the animation creator to create surrogate objects. Surrogate objects are objects that can control the way flow items will be animated when they are being handled by a task executer or a fixed resource. For example, you could animate a surrogate object so that it will rotate when it is inside a processor. Key Terms and Definitions The following are some important terms you'll need to know in order to use the Animation Creator: Animations An animation is a named sequence of object movements that are triggered at various points in a simulation run. You can animate any object that is capable of moving throughout the model or interacting with flow items, such as task executers or fixed resources. Each object may have multiple named animations, and you can dynamically run specific animations as part of your model logic. Each animation contains a set of keyframes , which in turn contain information for animating the individual components of the object. Components Components are 3D shapes that comprise movable sub-parts of an object. These shapes can be hierarchically ordered, and their position can be defined and changed in keyframes, so that they move as part of an animation run. Most standard FlexSim objects do not contain components by default. They are only comprised of the main object shape. However, some objects do contain pre-assigned components. The Robot, for example, includes components for each articulating joint. You can also add custom components to any FlexSim object. The following image shows a custom component that has been added to the Operator's Walk Loaded animation: Keyframes, Component Keyframes, and Keyframe Datapoints A keyframe is a location in the timeline of an animation that marks the beginning or end of a transition. Each keyframe may contain multiple datapoints , which store data like the location, size, rotation, color, and/or shape of one or more of the object's components. A component keyframe often refers to a keyframe that only contains data for a single component. A keyframe datapoint refers to a single piece of data stored in a keyframe. For example, a keyframe datapoint may be a specific component's x location. Usually, you will put two or more keyframes on a timeline to define the beginning and end of an animation segment. Although keyframes typically define the beginning and end of an animation, you should also put keyframes any place that marks a major movement between components. See the example in the following section about tweening for more information. Tweening Tweening is when FlexSim automatically interpolates between two keyframes. FlexSim can tween an object's position, rotation, size, and color, but not shape. For example, imagine you want to animate a cube component that will change from blue to red in about 5 seconds, as illustrated in the following image: The timeline for this kind of animation would look approximately like the following image: Notice that in this timeline, the cube had a keyframe at time 0. This keyframe includes a color datapoint, where the color is blue. There is a second keyframe at time 5, containing a color datapoint of red. While the animation is running, FlexSim will automatically tween the colors, which means that it will create all the transitional colors between time 0 and 5. In other words, you don't have to manually create a purple color halfway through the animation because FlexSim will do it for you when it tweens the two keyframes. As a general rule, you should try to put keyframes in places that mark the beginning and end of a major movement. For example, let's say you wanted to animate the rotation of a box. The first keyframe should be the rotation the box starts from, and the next keyframe should be the rotation you want the box to end up at. FlexSim will then automatically generate a smooth transition between the keyframes as the animation runs, showing the box in motion. Timing Animations The amount of time between the keyframes on the timeline will determine how quick or slow the transition will occur. Animation Variables Animation variables can change the way objects are animated based on conditions that might change during a simulation run. They are useful when some aspect of an animation needs to be different each time it is run. For example, a variable on a component keyframe can change a component's position, rotation, size, color, shape, etc. based on dynamic conditions in the simulation model. You could also use a variable to determine how fast a particular animation should run based on certain conditions. Keep in mind that an animation variable is basically a reference point to an animation-related object, component, or keyframe. Animation variables can point to: Components Surrogates Keyframe times Time gaps Component keyframes (such as the component's position, size, rotation, color, or shape frame) Once you've created an animation variable, you can reference that variable in a FlexScript command. (See Animation Commands for more information.) FlexScript commands can either get information about a variable or it can set the value of a variable. For example, if you want to dynamically change the length of your animation based on parameters in your model at run time, you can create an animation variable that points to a time gap, and then set that animation variable through a keyframe trigger or from a trigger in your model. Component Variables are Read-Only Animation variables pointing to a component are static variables. They are merely available as a reference point to a component through the getanimationvar command. Calling setanimationvar to a variable pointing to a component will have no effect. If you want to dynamically set a component's property, use a variable on a component keyframe instead. Keyframe Triggers Triggers can be added to animations that will fire when the animation gets to a specific point in the animation's timeline. They are added through the timeline. Triggers allow you to dynamically change or update animation variables, stop the animation, change some parameter in your model, or execute any other FlexScript code. Opening the Animation Creator To open the animation creator: You first need to add the object you want to animate to the 3D simulation model. Then, right-click the object and select Edit , then Animations from the menu. The animation creator for this object will open in a separate window (tab) in the center pane. Overview of the Animation Creator This section will provide an overview of the Animation Creator UI. The most important elements of the animation creator are labeled in the following image: Note that in the preceding image, the toolbar is slightly truncated. See Toolbar for an explanation of the full toolbar accompanied by complete images. Each element will be described in more detail in the following sections. Preview Windows Located in the upper portion of the animation creator, the preview windows allow you to see how your objects will appear visually during the animation. There are four different panes in this window that allow you to see the animation from various angles. You'll be able to see the object's animation in action when you run an animation using the animation control bar. You can also scrub the timeline (which means to put the cursor at a particular place in the animation timeline) to see how the object will look at specific points in the animation. If you add any components to the animation, you can also use the preview windows to manually resize, reposition, or rotate the component object. You can also zoom in and out or change the angle the same way you would in the 3D model. In the top right corner of each preview pane, you can click the Maximize button to hide the other 3D windows and expand the selected 3D window to take up the entire preview window. Click the button a second time to return to the default view. If you right-click anywhere inside a blank spot of the preview window, a menu will pop up with one option: Flip Axis . This option flips the axis of the view. For example, if you flip the axis that is currently displaying the top view, it will display the bottom view. This option is only available in the side, front, and top 3D views. Library When the animation creator is open, the Library will change to display some basic objects that can be added as components in the animation. Properties You can use the settings in Properties to change the basic functionality of the animation, such as its repeat type and time base. You can also use Properties to create new animation variables. See Managing Animations for more information. Animation Control Panel Located in the lower portion of the animation creator, the animation control panel is the primary workspace you'll use while working inside the animation creator, as shown in the following image: Toolbar The toolbar contains the various buttons you will use in managing components, animations, and keyframes. Timeline List The timeline list is kind of like a header for the timeline. It displays any animation clips, triggers, and/or components that have been added to this object's animation. Timeline The timeline is a chronological display of the animation over time. You can also scrub the timeline (which means to put the cursor at a particular place in the animation timeline) to see how the object will look at specific points in the animation. You can also drag keyframes along the timeline to make them longer. As the space increases between keyframes on the timeline, the tweening animation will take longer. If you want to zoom in or out of the timeline, you can use either one of the following methods: Click the Zoom button on the toolbar to zoom in or out on the timeline to make all the keyframes fit on the screen. Position the mouse above the timeline and press the Ctrl key while scrolling the mouse wheel. Click the right end of the scroll bar underneath the timeline and drag it to zoom in and out: Managing Components When defining animations, generally you first define the set of components to be animated. To add a component, press the button in the Components section of the toolbar. This will add a new component that can be seen both in the preview pane as well as in the timeline list. Alternately, you can drag a shape from the library into a preview pane. Once you've added a component, click on it in the timeline list and press the and buttons to reorder it in the timeline list. Press the button to move the component into the component above it, and the button to move it out of its containing component. If you click on the arrow next to a component, you can expand the list to show the component's individual keyframe datapoints : Component Properties When you click on a component in the preview pane or in the timeline, the Component Properties pane will appear in the properties window. This pane lets you configure various properties of the component. Draw Surrogate A surrogate is a special kind of component that will be replaced visually by another object (such as a flow item) when an animation is running in the simulation model. It acts like a placeholder for an object that may not yet exist, or cannot be referenced, at the time you create the animation. Whereas components are part of an animation visually (meaning it will show up in animation), a surrogate can be visually replaced by another object. The most common reason for turning a component into a surrogate is to change the animation of a flow item while it is being handled by one of the fixed resources or task executers during a simulation run. Once a component has been converted to a surrogate in the animation creator, it can be used to change a flow item's position, size, or rotation in an animation while a fixed resource or task executer is handling it. When the fixed resource or task executer begins handling the flow item, the flow item's shape will be replaced by the shape indicated in the Draw Surrogate menu in the surrogate's Properties. Surrogates are used in conjunction with animation variables . To set up a surrogate: Add the component you want as a surrogate, and click on it in the preview pane. In Component Properties under Draw Surrogate , select a flow item that generally looks like the object that will be put in place of the surrogate when the simulation runs. Surrogate Shapes The shape that is being drawn for the surrogate is not important and will not show up in the model. It is purely for your convenience while you are animating the surrogate. In the Animation Properties pane, add an animation variable and give it an appropriate name indicating the surrogate. Below the animation variable name, press the button. Then click on that component in the preview pane. This will associate that animation variable with that surrogate. The control beside the button should now say Surrogate for <ObjectName> . Add triggers to your model that fire just before running an animation, or when an item enters an object. These triggers may be coded directly, or in process flow. They should set the animation variable you have defined to the dynamically determined flow item (or some other object) that you want to put in place of the surrogate (using setanimationvar() ). Once you've set the animation variable and run the animation, the flow item will become part of the animation. Add triggers to your model that will fire after an animation is finished, or when a flow item exits the object, resetting the animation variable to point to nothing, so that the flow item will no longer be part of the animation. When you set up animation surrogates, you may get the flow items drawn twice in the 3D view: once in their standard location and once as they are drawn in place of the surrogate. To fix this, you can hide the contents of the containing object. This will cause the flow item to be shown only as part of the animation. Rotational Centroid The rotational centroid control lets you define the location of the axes around which the component will rotate. The values should be between 0 and 1, defining a ratio of the size of the object. Scale X/Y/Z With You can also define how a component's size will be scaled when the main object's size is scaled. Generally, a component's size axes will scale with the same axes of the main object, but these options are provided for exception cases. To use this properly, you should first save base positions , so FlexSim will know how to scale the components. Parent to Bone See Animating Bones Directly for more information. Saving Base Positions Once you've defined your set of components, it is a good idea to save your \"base positions\". Press the to do this. This will save off the default positions for the components that you have defined. Saving base positions is useful for two main reasons: After manipulating components while creating animations, it is good to be able to go back to a \"base configuration\". With base positions saved, FlexSim will know how to scale components and animations when you resize the main object differently than the size that the animations were created with. Managing Animations Once you've defined an object's components and saved base positions, you can start managing animations. The controls in the Animations section of the toolbar let you select the animation you want to edit, as well as add, remove, duplicate, and rename animations. Additionally, as you are building the animation, you can press the and buttons to reset and run the animation. Animation Properties The Animation Properties pane lets you define various properties of an animation. Animation Variables Here you can define the set of animation variables . To add an animation variable: Press the button. Enter the variable's name. Press the button and click on a component, a keyframe, a keyframe datapoint, etc. to define what that animation variable is bound to. Repeat Type/Value Here you can define if and how an animation should repeat by default. Choose the desired option, then, if needed, define a repeat value. Time Basis This defines how a given animation should \"progress\": Time Based : The animation will progress by time, meaning the time that the animation is started becomes the \"0\" point, and the animation will progress evenly as the simulation time progresses. Travel-Distance Based : The animation will progress based on the location of the main object at any point in time. This is most useful for traveling animations like walking or the rolling of wheels. You want the animation to progress based on the movement of the main object. The faster the object moves, the faster the animation should progress. If the main object is stopped, then the animation should be stopped, etc. Managing Keyframes As described above , a keyframe is a location in the timeline of an animation that marks the beginning or end of a transition. In the user interface, keyframes a rectangles surrounding small black diamonds that turn red when selected. The black diamond will be shown on each component for which the keyframe contains data. You can also expand a component to see the individual datapoints stored in a keyframe. Each datapoint of a keyframe is represented by a smaller black diamond. See Keyframes and Tweening for more information. Adding a Keyframe To add a keyframe that stores spatial datapoints on all components, do the following: Scrub the time cursor in the timeline to the time where you want the keyframe to be added. Set the location, size, and/or rotation of all of the components to their desired values by moving/sizing/rotating those components in the preview pane. Press the button to add a keyframe. This will add a keyframe that includes datapoints for location, size, and rotation on all components. Note that it does not add datapoints for color or shape. You can add datapoints by adding a component keyframe. Adding a Component Keyframe Alternately, you can add a keyframe that stores data only for a specific component, or for a specific datapoint of a component. To do this: Scrub the time cursor in the timeline to the time where you want the keyframe to be added. Set the location, size, rotation, and/or color of the target component. Select the specific component, or datapoint, in the timeline, by clicking on its associated row. Press the button to add a component keyframe. This will add a keyframe that stores data only associated with the row you have selected in the timeline list. Adjusting Existing Keyframes You can also change existing keyframes in an animation. To update an existing keyframe: Click on the keyframe in the timeline. It should change to red, signifying it is selected. If you only want to update the datapoint(s) of a single component in the keyframe, click on that specific component or datapoint row, so that only that component/datapoint's diamond is red. Set the location, size, rotation, and/or color of the target component(s). Right-click on the keyframe and select Update Keyframe . This will update the keyframe's data to store the component(s)' current associated values. Adding Datapoints to an Existing Keyframe By default, adding a keyframe will only store spatial datapoints, not color or shape. If you want a given keyframe to store datapoints that weren't originally present when the keyframe was added, do the following: Click on the keyframe in the timeline, on the specific row associated with the datapoint you want to add. For example, click on the color row of the keyframe. Since the keyframe doesn't yet have that datapoint, the row will be blank, but the keyframe should be outlined in red. Set the desired color, shape, or other target aspect of the target component(s). Press the button to add a datapoint to the keyframe. This will update the keyframe's data to store the component(s)' current datapoint value. Deleting Keyframe Data In addition to deleting an entire keyframe by clicking on it and pressing the Delete key, you can remove specific datapoints or components from a keyframe's data. Just click on the specific black diamond you would like to remove, and press Delete. Importing Custom Animations You can create your own custom 3D objects and animations using third-party software applications such as Blender, Poser, Mixamo, or 3DMax. To import a custom object and animation: First you need to create a custom object to act as your basic template. Drag either the Basic FR object or the Basic TE from the Advanced section of the Library into your simulation model. (Use the Basic FR object if you want to create a fixed resource or the Basic TE if you want to create a task executer.) Click the Basic FR object or the Basic TE object to select it. In Properties under General Properties , click the arrow next to the Shape box to open a menu. Select Browse from the menu and navigate to the location of your custom 3D object's file. Select the file that you want to import. The Basic FR object or the Basic TE will be updated to the new shape that you imported. When you import an object, it will also import any animations that are associated with it. In order to create custom animations, you might need to create animation clips for the object. See the next section about Creating Animation Clips for more information. Creating Animation Clips When you create a custom object using third party software, you might typically want to create more than one animation for it. For example, the default Operator object in FlexSim has three different animations: walking, walking while carrying a load, and standing. So, if you wanted to make your own custom Operator object, it should probably have at least these three same animations. However, some animation software programs only allow you to export all these animations as a single animation file. Consequently, when you import these files into FlexSim, you'll need to cut the animation file into individual clips using the clip editor in the animation creator. To create animation clips: With the animation editor open for the object you want to animated, click the Bone Animations button on the animation toolbar and select Edit Animation Clips from the menu. This will open the clip editor, as shown in the following image: In the Clips group, click the Add button to add a new clip to the list of clips. Give the clip an appropriate name by typing a new name in the Name box. If needed, press the Play button to preview the full animation. Now you'll need to choose which section of the animation should be included in this clip. Drag the sliders on the timeline to the beginning and end of the section you want to include in this clip. Alternatively, you could manually set the exact frames and times that should be included using the Frame and Time boxes below the timeline. If needed, you can also change the rate of frames per second using the Rate box. Click the Apply button to save the changes to the clip. Make any other necessary changes and then close the window. Now when you click the Animation menu in the animation control panel, the new clip you created will appear in the list of available animations. You can also add additional animations from other external files using the Add button beside the Animation dropdown. This process works correctly if the other animation file has the same skeletal bone structure and bone names as the imported shape file. Use the animation creator's timeline if you want to combine one or more clips together. Animating Bones Directly You can directly animate a shape with bones using the Bone Animations button and selecting Animate Bones Directly. The bones in the shape will be shown in the Animations and Components hierarchy list and displayed in the 3D views. With this option enabled, you can edit the rotations, positions, and sizes of the bones directly using keyframes as you would any other component. Any keyframe animation of the bones will be applied as an additional transformation after any animation clips are applied, so you can use animation clips, direct bone animations, or a combination of both. The Reset Bone Positions options will set all of the bones back to their unchanged positions. You may want to use this option to add a keyframe at the beginning and end of any animations that animate the bones directly, especially when combining direct bone animations with animation clips. Each component's Properties panel has a Parent to Bone option that you can use to animate a component along with a bone when animating bones directly. This can be used for adding additional shapes that animate with the object, such as a hat or a clipboard. The component's position will be relative to the bone instead of the main object when using this option, so you will probably want to set the component's position close to [0, 0, 0] to be near the bone. Animation Commands The following commands deal with animations: startanimation(object, animation) - Starts an animation on the object. Animation can be either a string value that is the name of the animation, or it can be a number which is the animation rank. stopanimation(object, animation) - Stops an animation on the object. Animation can be either a string value that is the name of the animation, or it can be a number which is the animation rank. resumeanimation(object, animation) - Resumes an animation on the object that was previously stopped. Animation can be either a string value that is the name of the animation, or it can be a number which is the animation rank. getanimationvar(object, animation, \"varname\") - Returns the value of an animation variable. setanimationvar(object, animation, \"varname\", value) - Sets the value of an animation variable. Value can be a number or object and is based upon what the animation variable is linked to."
    }
]
[
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/WritingLogic/WritingLogic.html",
        "title": "Writing Logic in FlexSim",
        "content": "Where to Get Help Whenever you need help with what commands to use and how to use them, you can refer to the Commands documentation , which is accessible through FlexSim's Help menu. Refer to the FlexScript Class Reference for information about FlexScript classes. FlexScript and C++ General Rules Here are some general rules you will need to know when creating your own logic. Language is case sensitive (A is not the same as a) No specific format is required (free use of spaces, tabs and line returns is encouraged) Text strings are usually entered between quotes. \"mytext\" Parentheses follow a function call and commas separate the arguments of the function. moveobject(object1,object2); The end of a line or function call will always end with a semi-colon Parentheses can also be used freely to make associations in your math and logic statements. Curly braces are used to define a block of statements. To comment out the rest of a line use // To comment out blocks of text use /* text */ Don't use spaces or special characters in name definitions (_ is ok). Named variables and explicit values can be interchanged in writing expressions. Variable Types FlexSim uses various variable types. Some of the more common are listed here. Refer to the FlexScript Class Reference for the complete list of FlexScript classes. Classes Type Description int integer number type double double precision floating point number type string text string treenode reference to a FlexSim node Variant a number, string, treenode or array Array a collection of Variants Object treenode with object data Color rgba components of a color Vec3 xyz components of a vector Table a table of elements List dynamic list of things used for synchronizing tasks and logic var type inferred variable For more information on how the treenode (or FlexSim node) type works, refer to the FlexSim tree structure . Declaring and Setting Variables The following are some examples of how to declare and set variables. int index = 1; double weight = 175.8; string category = \"groceries\"; treenode nextObj = Model.find(\"Processor1\"); Variant cellValue = table[2][3]; var value = 3; Constructing Class Objects The following are examples of how to use constructors. Color myColor = Color(1, 0, 0); // Makes a red color object.location = Vec3(0, 0, 0); // Sets the object's location to the origin Math Operations The following list show different math operations that can be performed on values. Operation Floating Point Example (=solution) Integer Example (=solution) + 1.6+4.2 (=5.8) 2+3 (=5) - 5.8-4.2 (=1.6) 5-2 (=3) * 1.2 * 2.4 (=2.88) 3*4 (=12) / 6.0/4.0 (=1.5) 20/7 (=2) % (integer mod) 34%7(=6) Math.sqrt() Math.sqrt(5.3) (=2.3) Math.pow() Math.pow(3.0,2.2) (=11.2) Math.pow(3,2) (=9) Math.round() Math.round(5.6) (=6) Math.frac() Math.frac(5.236) (=0.236) Math.fabs() Math.fabs(-2.3) (=2.3) Math.fmod() (floating point mod) Math.fmod(5.3,2) (=1.3) A Few Cautions About Operations Be aware that by performing operations on floating point numbers, some precision may be lost. Be careful in using these operations while mixing integer types with floating point types, or with using just integer types. For example, the / operator will return an integer if both operators are integers. This may not be what you want to get out of the operation, in which case you will need to use floating point types instead of integer types. The number 5 as an integer type. If you want it to interpret the number as a floating point type, enter 5.0 instead of just 5. Comparing Variables The following table shows different operations for comparing two values or variables. Operation Example (solution) > (greater than) 1.7 > 1.7 (false) < (less than) -1.7 < 1.5 (true) >= (greater than or equal to) 45 >= 45 (true) <= (less than or equal to) 45 <= 32 (false) == (equal to) 45 == 45 (true) != (not equal to) 45 != 35 (true) string comparisons current.name == \"Processor5\" pointer comparisons (treenodes, Objects) current == Model.find(\"Processor5\") A Few Cautions About == The == operator can often cause problems if you are comparing two double precision floating point values, and one or both of those values have been calculated using math operations. When doing math operations, floating point values may lose some precision. Since the == operator will only return true if all 64 bits of each value are exactly the same, even a small precision loss will cause the == operator to return false. In such cases, you will want to instead verify that the two values are within a range of each other. For example: fabs(value1 - value2) < 0.000001, will return true if the two values are practically equal for all intents and purposes. Relating Variables The following table shows different operations for relating several comparisons. Operation Example && (logical AND) x>5 && y<10 || (logical OR) x==32 || y>45 ! (logical NOT) !(x==32 || y>45) Math.min() Math.min(x, y) Math.max() Math.max(x, y) Setting and Changing Variables The following tables show ways of setting and changing variables. Operation Example = x = x + 2; += x += 2; (same as x = x + 2) -= x -= 2; (same as x = x - 2) *= x *= 2; (same as x = x * 2) /= x /= 2; (same as x = x / 2) ++ x ++; (same as x = x + 1) -- x --; (same as x = x - 1) Executing Commands Executing a command in FlexSim is made of following parts. First type the command's name, followed by an open parenthesis. Then enter each parameter of the command, separating multiple parameters by commas. Each parameter can be a variable, an expression of variables, or even a command itself. Finish the command with a close parenthesis, and a semi-colon. For detailed information on the commands, their functionality and parameter lists, refer to the \"Commands\" documentation found through FlexSim's Help menu. Syntax commandname(parameter1,parameter2,parameter3...); Example getstat(current, \"Content\", STAT_CURRENT); Dot Syntax Classes like the treenode, Object and Variant (to name a few) allow you to call methods, as well as access properties, variables, attributes and labels (if applicable) using dot syntax. Syntax object.method(parameter1,parameter2,parameter3...); Example current.setLocation(1, 1, 1); treenode lastItem = current.last; treenode item3 = current.subnodes[3]; int quantity = current.quantity; //Accesses label named 'quantity' Control Flow FlexScript includes several control flow constructs. These are statements you can place in your code to control which of multiple possible paths should be taken in the execution of the code. Control flow statements allow for branching, looping, and even suspension and resumption of code execution. If Statement The if statement allows you to execute one piece of code if an expression is true, and another piece of code if it is false. The else portion of the construct is optional. It uses this construct: if (test expression) { code block } else { code block } For example: if (item.subnodes.length == 2) { item.color = Color.red; } else { item.color = Color.black; } The ?: Ternary Operator FlexScript supports an alernative syntax for an if-else construct which is used in many languages and is known as the ternary operator. The ternary operator can be very useful in FlexSim since it allows you to write an if-else contruct in a single line. The ternary operator uses the following syntax: condition ? value_if_true : value_if_false If the condition specified before the question mark is true, the value between the question mark and semicolon is returned. If the condition is false, the value after the semicolon is returned. The following two code snippets are equivalent: return time() > 1440 ? 10 : 20 if (time() > 1440) { return 10; } else { return 20; } While Loop The while loop will continue to loop through its code block until the test expression becomes false. It uses this construct: while (test expression) { code block } For example: while (current.subnodes.length > 2) { current.last.destroy(); } For Loop The for loop is like the while loop, except that it is used usually when you know exactly how many times to loop through the code block. The start expression is executed only once, to initialize the loop. The test expression is executed at the beginning of each loop and the loop will stop as soon as this expression is false, just like the while loop. The count expression is executed at the end of each loop, and typically increments some variable, signifying the end of one iteration. It uses this construct: for(start expression; test expression; increment expression) { code block } For example: for (int index = 1; index <= current.subnodes.length; index++) { current.subnodes[index].as(Object).color = Color.blue; } Switch Statement The switch statement allows you to choose one piece of code to execute out of several possibilities, depending on a variable to switch on. The switch variable must be an integer type. The example below sets the color of items of type 1 to yellow, type 5 to red, and all other types to green. It uses this construct: switch (switchvariable) { case casenum: { code block; break; } default: { code block; break; } } For example: switch (item.type) { case 1: { item.color = Color.yellow; break; } case 5: { item.color = Color.red; break; } default: { item.color = Color.green; break; } } Redirection Each of the flow constructs described can be redirected mid-execution with either a continue, break or return statement. The following explains how each of these statements work. Construct Examples continue; Only valid in For and While loops. Halts the current iteration of the loop and goes on to the next iteration in the loop. In a For loop the counter is incremented before continuing. break; Only valid in For, While and Switch statements. Breaks out of the current For, While or Switch block and continues with the line immediately following this block. Nested statements only break out of the current statement and continue on in the containing statement. return 0; Returns out of the current method entirely and continues with the line following the code that called this method. A value is required after the return statement because all FlexScript commands (picklists and triggers included) return a Variant type. Typing return; is not valid. Coroutines and the Await Statement FlexScript also supports coroutines using the await keyword. Coroutines allow a method or function to span simulated time. The most basic example of a coroutine is to await a simple delay time. print(\"time before delay: \", time()); await Delay.seconds(5); print(\"time after delay: \", time()); The above code prints the current time to the output console, then waits for 5 seconds (the coroutine is suspended for 5 simulated seconds), then prints the current time again, which will have increased by 5 simulated seconds. While the coroutine is suspended, all local variables are preserved. A FlexScript function becomes a coroutine if it contains a statement with the keyword await , with the following syntax: await someexpression; //or... typename result = await someexpression; //or... result = await someexpression; Some specific examples: await current.event(\"OnEntry\"); // wait for current's OnEntry event to fired Variant pulled = await List(\"List1\").pull(\"\", 1, 1, current); // pull a value from List1 and wait for the pull operation to complete await Delay.minutes(5); // suspend the coroutine for 5 simulated minutes The predicate of the await statement (the expression after the await keyword) must be awaitable , meaning the predicate's type has been specially configured so that you can await instances of that type. Only a few specific types are awaitable: Delay Event List.BackOrder List.PullResult List.PushResult List.Entry Variant (see Variant - Awaitable for more information) Coroutines allow you to model entire processes as a single code block. You can start the execution of a process, and suspend and resume the execution of the process in any number of ways. You can suspend its execution for a defined delay time, or until some requirements are met, such as waiting until you pull a value from a list, or waiting until an event is fired on an object. In combination, these different capabilities allow you incredible flexibility in defining your process. Coroutines vs. Process Flow It's important to note that Process Flow enables you to simulate almost any time-spanning process within a flow chart, giving you much more visual explanatory power than you would get looking at a large block of code. Indeed, FlexScript's coroutine features were added after Process Flow, and much of its design was intended to mirror some of the functionality you could do in Process Flow, albeit using code (wait for event, pull from list, delay, etc.). So if Process Flow can do what you need, we encourage you to use it. Process Flow models are easier to support and debug, and they improve communication with stakeholders regarding how a process works. Nevertheless, some users actually prefer implementing time-spanning processes through code. Additionally, there are some situations that can benefit from a code-based time-spanning approach. For example: When speed factors are paramount, a coroutine will generally run much faster than tokens moving from activity to activity. In some specific cases, implementing a process in Process Flow can be cumbersome, requiring a lot of activities, synchronization, etc. One specific example is a \"multi-pull\" process that tries to pull different requirements from different lists, and must wait until some minimum set of requirements are met. While this is certainly possible in process flow, it can require a lot of activities and synchronization, that might be easier to perform directly in code. Coroutines allow you to augment your process flow with customized activities. Specifically, the Custom Code will await the result of the code that is executed. This means if you implement the custom code as a coroutine (you use an await statement somewhere in the code), then the activity itself will not finish until the coroutine is finished. In some cases you may not want to be forced to create a whole new process flow just to perform some simple time-spanning operation. Maybe you have a trigger on an object that delays for a certain time before performing some simple operation. Here coroutines allow you to do that operation easily, without requiring a whole new process flow or a complicated delayed message mechanism. Coroutines make some standard picklist options easier to implement. For example, picklist options that pull from a list will generally await the result of the pull, potentially spanning some time period before the pull is fulfilled. Again, we encourage you to use Process Flow where it is suitable, specifically because of its visual explanatory power. Nevertheless, coroutines have specific advantages that can augment or provide alternatives to your use of Process Flow in simulating your customized processes. Optional Chaining FlexScript also supports a concept called optional chaining, using the ?. syntax. The need for this arises when there is a possibility of encountering null values in the evaluation of your code. If a given expression results in a null value, and you access a class member of the expression using dot syntax, FlexSim will throw an exception by default. treenode nullNode = 0; return nullNode.last; // exception Avoiding such exceptions can cause your code to balloon into lots of if statements. Alternately, you can use optional chaining to access class members. treenode nullNode = 0; return nullNode?.last; // returns null (no exception) If the owning object is null, then the ?.last accessor will simply give back null, instead of throwing an exception. It is called optional chaining because it allows you to chain multiple accessors together very easily without the need for if statement guards. The code will simply bail out and return null when it encounters a null pointer. treenode nullNode = 0; return nullNode?.first?.first?.first; // returns null (no exception)"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/BasicModelingFunctions/BasicModelingFunctions.html",
        "title": "Basic Modeling Functions",
        "content": "Current and Item The following expressions are used frequently throughout FlexScript: current - the current variable is a reference to the current resource object. It is often an access variable in pick lists. item - the item variable is a reference to the involved item for a trigger or function. It is often an access variable in pick lists. Referencing Objects The following table explains how to reference objects in FlexScript: Command Explanation Example node.first This returns a reference to the first ranked object/node inside of node current.first node.last This returns a reference to last ranked object/node inside of node current.last node.subnodes[ranknum] This returns a reference to the object at a given rank inside of node current.subnodes[3] object.inObjects[portnum] This returns a reference to the object connected to the input port number of object current.inObjects[1] object.outObjects[portnum] This returns a reference to the object connected to the output port number of object current.outObjects[i] object.centerObjects[portnum] This returns a reference to the object connected to the center port number of object current.centerObjects[1] node.next This returns a reference to the next ranked object of node item.next node.prev This returns a reference to the previous ranked object of node item.prev node.find(path) This returns the object found at path in the tree beginning from node current.find(\"Box1\") Object Attributes The following table explains object attributes commands in FlexScript: Command Explanation object.name This returns the name of the object object.name = newName; This sets the name of the object to newName object.color = Color.color This sets the color of the object (where color is red, green, blue, random(), etc.) object.color = Color(red, green, blue) This sets the color of the object to an rgb color setobjectshapeindex(object, indexnum) This sets the 3D shape of the object setobjecttextureindex(object, indexnum) This sets the 3D texture of the object Object Spatial Attributes The following table explains object spatial attribute commands in FlexScript: Command Explanation object.location.x object.location.y object.location.z Gets the x, y, and z locations of the object respectively object.setLocation(xnum, ynum, znum) This sets the x, y, and z location of the object object.size.x object.size.y object.size.z Gets the x, y, and z size of the object respectively object.setSize(xnum, ynum, znum) This sets the x, y, and z size of the object object.rotation.x object.rotation.y object.rotation.z Gets the x, y, and z rotation of the object respectively object.setRotation(xdeg, ydeg, zdeg) This sets the x, y, and z rotation of the object Object Statistics The following table explains object statistics commands in FlexScript: Command(parameter list) Explanation object.subnodes.length This returns the current content of the object object.stats.input This returns the input statistic of the object object.stats.output This returns the output statistic of the object obj.stats.state().value = statenum This sets the current state of the object obj.stats.state().value This returns the current state value of the object obj.stats.state().valueString This returns the current state of the object as a string object.rank This returns the rank of the object object.rank = ranknum This sets the rank of the object getentrytime(item) This returns the time the flow item entered the object it is currently in getcreationtime(item) This returns the time the flow item was created Object Labels The following table explains object label commands in FlexScript: Command(parameter list) Explanation object.labelName object.attrs.labels.subnodes[labelRank].value This returns the value of the object's label. object.labelName = value object.attrs.labels.subnodes[labelRank].value = value This sets the value of the object's label. object.labels[\"labelname\"] object.attrs.labels.subnodes[labelRank] This returns a reference to the label as a node. Often used if you have a label that is used as a table. Object Control The following table explains object control commands in FlexScript: Command(parameter list) Explanation obj.input.close() This closes the input of the object obj.input.open() This re-opens the input of the object obj.output.close() This closes the output of the object obj.input.open() This re-opens the output of the object obj.message(delayTime, fromobject, parameter1, parameter2, parameter3) This causes the message trigger of the object to fire, optionally after a certain delay time. object.stop(downstate) This tells the object to stop whatever its operation is and go into the given state object.resume() This allows the object to resume whatever its operation is obj.output.stop() This closes the output of the object, and accumulates stopoutput requests obj.output.resume() This opens the output of the object once all stopoutput requests have been resumed obj.input.stop() This closes the input of the object, and accumulates stopinput requests obj.input.resume() This opens the input of the object once all stopinput requests have been resumed insertcopy(originalobject, containerobject) This inserts a new copy of the object into the container moveobject(object, containerobject) This moves the object out of its current container into its new container Object Variables The following table explains object variable commands in FlexScript: command(parameter list) Explanation getvarnum(object, \"variablename\") This returns the number value of the variable with the given name setvarnum(object, \"variablename\", value) This sets the number value of the variable with the given name getvarstr(object, \"variablename\") This returns the string value of the variable with the given name setvarstr(object, \"variablename\", string) This sets the string value of the variable with the given name getvarnode(object, \"variablename\") This returns a reference to the variable with the given name as a node For more information about the Object class see the FlexScript Class Reference. Tables In order to get access to the set of table methods and properties, you'll need to create a Table variable. Table table = Table(\"GlobalTable1\"); //Global tables Table labelTable = current.labels[\"TableData\"]; //Label table The following methods and explanations assume you have a Table variable like the ones listed above. command Explanation table[row num/name][col num/name] This returns the value in the specified row and column of the table table[row num/name][col num/name] = value; This sets the value in the specified row and column of the table table.setSize(rows, columns) This sets the size of the table in rows and columns table.numRows This returns the number of rows in the table table.numCols This returns the number of columns in the table table.clear() Sets all number values in the table to 0 For more information about the Table class see the FlexScript Class Reference. Task Executer Control For more information on controlling task executers, refer to the task sequence reference. Prompts and Printouts The following table explains prompt and printout commands in FlexScript: Command(parameter list) Explanation print(var value) Prints variant values to the output console msg(\"title\", \"caption\") Opens a simple Yes, No, Cancel dialog userinput(targetnode, \"prompt\") Opens a dialog box where you can set the value of a node in the model string1 + string2 This returns the string concatenation of two strings Advanced Functions For more advanced functions and for a more complete set of command documentation, refer to the Command Summary and the FlexScript Class Reference."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/Debugging/Debugging.html",
        "title": "Debugging",
        "content": "Overview The following sections explain how to debug FlexScript. How It Works Within the FlexSim code editor, there is a margin on the left side of the line numbers. By clicking in the margin, you can add a breakpoint to that line of code. The breakpoint will appear as a in the margin. You can delete the breakpoint by clicking the . When a line of code with a breakpoint is executed, FlexSim will enter debug mode. While debugging, you will only be able to interact with certain areas of the program including the debugger tools, the tree window, output consoles and a limited number of other windows. The code window will change to give you tools for debugging. The debug() Command The debug() command can be placed in any flexscript code. It acts just like a breakpoint; it will pause the model and open the debug window when it is executed. However, it will pause the model even when breakpoint debugging is disabled. This command makes it possible to have conditional breakpoints. Controls It has the following controls: Next Line - The yellow arrow shows you what line will be executed next. By pushing the Next Line button, that line will be executed and the yellow arrow will move to the next line of code to be executed. Step Into - This button can be used when a line of code contains certain function calls. It allows you to follow the code execution into the function and proceed line by line. When the function is finished, the debugger will return to the code that called the function. The only functions you can follow in this way are nodefunction, executefsnode, and any custom user commands. Continue - This will cause the FlexScript execution to continue until it reaches another breakpoint. If the code currently being executed finishes, then it will leave debug mode. Stop Simulation Clock - This button will stop the model's simulation clock. This is particularly useful if the model is running quickly, as the Continue button may cause FlexSim to re-enter debug mode almost instantly when it continues. Breakpoints The Breakpoints window is available through the Debug menu. It is a treeview with checkboxes showing you what breakpoints have been added to code in the model. You can disable breakpoints by clicking the checkbox next to the line number where they are. You can disable all the breakpoints by unchecking the \"Enable Breakpoint Debugging\" box. Checking and unchecking these boxes will only affect whether a breakpoint is enabled or disabled, it will not actually delete the breakpoint. To delete a breakpoint, you can highlight it in this window and press the delete key or click on its in the code window. Disabled breakpoints will appear as a in the margin and will not cause the FlexScript execution to stop for debugging. You may right click on a breakpoint in the breakpoints window to explore the associated code. Local Variables This area shows you the current values of any locally defined variables. As you step through the code, these values will update immediately so you can see what is happening. Often, models may not behave correctly because variables in code are not what they are expected to be. This window allows you to see exactly what the variables are. Alternatively, you can mouse over variables in the Code Edit window to see their current value. About the Yellow Arrow Keep in mind, the yellow arrow is pointing to the next line to be executed, so if a new variable is being initialized, you will not be able to see its value until after that line has been executed. Watch Variables This area allows you to specify other variables or expressions that you want to see, such as global variables. By pushing the + button, you can increase the number of lines in the table. The - button will delete the row that was last clicked in the table. You can double-click on a gray area of the table to enter a variable or expression. Its value will be displayed to the right. This can help explain why certain conditional statements, such as used in \"if\" statements aren't behaving as expected. It also allows you to see global variables that otherwise are not visible on the Local Variables tab. Call Stack This area shows the current call stack, which is a function call history. The most recent call is always at the top of the list. In this case, the OnEntry function was called by the OnRecieve function, which was called by the OnTimerEvent function. You may right click on any line of the call stack to explore the associated code or node in the tree. Performance Profiler and Memory Profiler The Performance Profiler and Memory Profiler tools are also helpful for debugging. See Performance Profiler and Memory Profiler for more information about these tools. Event List and Event Log The Event List and Event Log tools are also helpful for debugging. See Event List and Event Log for more information about these tools. Process Flow The following sections explain how to debug Process Flow. How It Works Within the Process Flow view, there are breakpoint outlines on the left side of highlighted activities. By clicking on a breakpoint outline, you can add a breakpoint to that activity. The breakpoint will appear as a to the left of the activity. You can delete the breakpoint by clicking the while the activity is highlighted. When an activity with a breakpoint is executed, FlexSim will enter debug mode. While debugging, you will only be able to interact with certain areas of the program including the debugger tools, the tree window, output consoles and a limited number of other windows. The Process Flow view will change to give you controls for debugging. Controls It has the following controls: Step Any - The yellow arrow shows you what activity will be executed next. By pushing the Step Any button, that activity will be executed and the yellow arrow will move to the next token that moves. Step Token - By pushing the Step Token button, the yellow arrow will move with the current token to the next activty. Note that triggered breakpoints will interrupt this action. Continue - This will cause the ProcessFlow execution to continue until it reaches another breakpoint. Stop Simulation Clock - This button will stop the model's simulation clock. This is particularly useful if the model is running quickly, as the Continue button may cause FlexSim to re-enter debug mode almost instantly when it continues. Breakpoints The Breakpoints window shows Process Flow breakpoints in adition to the standard code breakpoints. You can disable breakpoints by clicking the checkbox next to the activity path. Disabled breakpoints will appear as a to the left of the activity and will not cause the ProcessFlow execution to stop for debugging. You may right click on a Process Flow breakpoint in the breakpoints window to display the associated activity and explore the breakpoint condition code. The breakpoint condition code can be used to specify what conditions should be met to stop at the breakpoint."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Basic/double.html",
        "title": "FlexScript Class - double",
        "content": "Description A number type that represents a wide, dynamic range of values by using a floating point."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Basic/int.html",
        "title": "FlexScript Class - int",
        "content": "Description A number type that holds a finite range of integers. Min Value = -2147483647 Max Value = 2147483647"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Basic/string.html",
        "title": "FlexScript Class - string",
        "content": "Description A class that represents a sequence of characters. Contains methods for examining, searching and replacing, and manipulating strings. Encoding and String Indexes Strings in FlexSim are encoded in UTF-8 format . This means that for simple ASCII strings, each character takes up a single byte (8-bits). However, non-ASCII characters may consist of up to 4 bytes. For example, the greek Σ character requires two bytes to encode in UTF-8. Since any character in a string may be made up of multiple bytes, it is non-trivial to access characters in the string by their character index. As such, FlexSim's string interface uses byte-based indexing for accessing the characters inside the string. In other words, all string methods that take or return indexes into the string ( charAt (), substr (), slice (), indexOf (), lastIndexOf (), search (), slice (), length , array [] operator), take and return byte indexes, not character indexes. Also, in FlexSim, all indexing is 1-based, such that the first byte in a string is accessed by index 1 (not index 0 like in many other programming languages). Take the string \"Σ=σ\" for example. While the = character is technically the second character and thus would be at \"character index\" 2, since the Σ character takes up two bytes, the = character is accessed with \"byte index\" 3. string(\"Σ=σ\").charAt(3) // returns \"=\" Note also that, given this rule, some command calls may give back the same results for different byte indexes because the same character takes up several bytes. string(\"Σ=σ\").charAt(1) // returns \"Σ\" string(\"Σ=σ\").charAt(2) // returns same \"Σ\" Usually this will not affect the way you manipulate strings, especially since there are many methods that do not involve accessing characters by their index, such as using the replace () and/or match () methods. If you do need to manually access characters in a string, there are several methods of ensuring that your code will work for all types of characters. The easiest way to manipulate individual characters without worrying about encoding is to use the split () and join () methods. The split() method will split the string up into an Array of individual characters. Once it is split, you can traverse the array using character, not byte, indexes. After you are finished you can join the array back into a string. string str = \"Σ=σ\"; Array asArray = str.split(); for (int i = 1; i <= asArray.length; i++) { if (asArray[i] == \"=\") asArray[i] = \"≠\"; } str = asArray.join(); // \"Σ≠σ\" If you want to search the string by character instead of by byte, but don't want to split it into an array, you can loop through the string and, using the charAt () method, increment the looping index based on the byte-length of each character. string str = \"Σ=σ\"; string curChar = \"\"; for (int i = 1; i <= str.length; i += curChar.length) { curChar = str.charAt(i); if (curChar == \"=\") { str = str.substring(1, i) + \"≠\" + str.substring(i + curChar.length); curChar = \"≠\"; } } If you are searching the string looking for/replacing only ASCII character values, searching the string using the [ ] array operator can be used. string str = \"Σ=σ\"; for (int i = 1; i <= str.length; i++) { if (str[i] == '=') // comparing a byte to an ASCII character works fine str[i] = '#'; // setting a byte to an ASCII character works fine, // as long as the existing byte was already an ASCII character. } Finally, the string provides the byteToCharIndex () and charToByteIndex () methods to convert between character and byte indexes. Note that these methods do require a search of the string, so they will be slow for long strings. Properties length The length, in bytes, of the string. Methods byteToCharIndex Returns the character index associated with a specific byte index in the string. charAt Returns the character at a given byte index in the string. charToByteIndex Returns the byte index associated with a specific character index in the string. endsWith Checks if the string ends with the specified substring. includes Checks if the string contains the specified substring. indexOf Returns the index of the first occurence of the specified substring. lastIndexOf Returns the index of the last occurence of the specified substring. match Searches the string for matches to a pattern. padEnd Pads the end of the string with the padString to the given length. padStart Pads the start of the string with the padString to the given length. repeat Makes a new string out of copies of the original. replace Replaces a series of characters with another. search Searches the string for an internal string or pattern. slice Extracts a section of a string and returns a new string. split Splits the string into an array of substrings. startsWith Checks if the string starts with the specified substring. substr Extracts a section of a string and returns a new string. toLowerCase Converts all letters to lowercase. toNum Interprets the string's content as a floating point number. toUpperCase Converts all letters to uppercase. trim Removes leading and trailing whitespace. Static Methods fromNum Converts the given number to a string. Operators != Compares two strings. [ ] Gets or sets a byte element in the string. + Concatenates two strings += Assigns the string to be a concatenation with another string == Compares two strings. Details Do no remove, this fixes the anchor on doc.flexsim.com string .length readonly int length Description The length, in bytes, of the string. int numBytes = str.length; Do no remove, this fixes the anchor on doc.flexsim.com string .byteToCharIndex() int byteToCharIndex( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns int The 1-based character index of the character. Description Returns the character index associated with a specific byte index in the string. string text = \"Σ=σ\"; int charIndex = text.byteToCharIndex(text.search(\"=\")); // 2 int numChars = text.byteToCharIndex(text.length); // 3 - the number of characters in the string Do no remove, this fixes the anchor on doc.flexsim.com string .charAt() string charAt( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns string The target character, as a string. Description Returns the character at a given byte index in the string. string text = \"Hello World!\"; string e = text.charAt(2); // \"e\" Do no remove, this fixes the anchor on doc.flexsim.com string .charToByteIndex() int charToByteIndex( int charIndex ) Parameters charIndex The 1-based character index of the target character. Returns int The 1-based byte index of the character. Description Returns the byte index associated with a specific character index in the string. string text = \"Σ=σ\"; int byteIndex = text.charToByteIndex(2); // 3 Do no remove, this fixes the anchor on doc.flexsim.com string .endsWith() int endsWith( string str ) Parameters str The substring to look for. Returns int 1 if the string ends with the specified substring, 0 otherwise. Description Checks if the string ends with the specified substring. string text = \"Hello World!\"; int worldEnd = text.endsWith(\"World!\"); // 1 Do no remove, this fixes the anchor on doc.flexsim.com string .includes() int includes( string str ) Parameters str The substring to look for. Returns int 1 if the string contains the specified substring, 0 otherwise. Description Checks if the string contains the specified substring. string text = \"Hello World!\"; int containsWorld = text.includes(\"World\"); // 1 Do no remove, this fixes the anchor on doc.flexsim.com string .indexOf() int indexOf( string str ) Parameters str The substring to look for. Returns int The byte index of the first occurence of the specified substring, -1 if there are no occurences. Description Returns the index of the first occurence of the specified substring. string text = \"Hello World!\"; int oIndex = text.indexOf(\"o\"); // 5 Do no remove, this fixes the anchor on doc.flexsim.com string .lastIndexOf() int lastIndexOf( string str ) Parameters str The substring to look for. Returns int The byte index of the last occurence of the specified substring, -1 if there are no occurences. Description Returns the index of the last occurence of the specified substring. string text = \"Hello World!\"; int oIndex = text.indexOf(\"o\"); // 8 Do no remove, this fixes the anchor on doc.flexsim.com string .match() RegExResult match( RegExp pattern ) Parameters pattern The pattern of characters to look for, a regular expression. Returns RegExResult A RegExResult object that provides access to matches Description Searches the string for matches to a pattern. string str = \"A noisy noise annoys an oyster.\"; var result = str.match(/nois/g); Array matches = [result[1], result[2]]; // [\"nois\", \"nois\"] See the replace () method for further discussion of regular expressions. Do no remove, this fixes the anchor on doc.flexsim.com string .padEnd() string padEnd( int targetLength , string padString = \" \" ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the end of the string with the padString to the given length. Pads the end of the string with the padString to the given targetLength. If the targetLength is less than the string's length, the string will be returned unpadded. string s = \"abc\"; s.padEnd(10); // \"abc \" s.padEnd(10, \"foo\"); // \"abcfoofoof\" s.padEnd(6,\"123465\"); // \"abc123\" s.padEnd(8, \"0\"); // \"abc00000\" s.padEnd(1); // \"abc\" Do no remove, this fixes the anchor on doc.flexsim.com string .padStart() string padStart( int targetLength , string padString = \" \" ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the start of the string with the padString to the given length. Pads the start of the string with the padString to the given targetLength. If the targetLength is less than the string's length, the string will be returned unpadded. string s = \"abc\"; s.padStart(10); // \" abc\" s.padStart(10, \"foo\"); // \"foofoofabc\" s.padStart(6,\"123465\"); // \"123abc\" s.padStart(8, \"0\"); // \"00000abc\" s.padStart(1); // \"abc\" Do no remove, this fixes the anchor on doc.flexsim.com string .repeat() string repeat( int numRepeats ) Parameters numRepeats The number of repetitions. Returns string A new string made up of copies of the original. Description Makes a new string out of copies of the original. string str = \"Clap\"; string applause = str.repeat(3); // \"ClapClapClap\" Do no remove, this fixes the anchor on doc.flexsim.com string .replace() string replace( string findStr , string replaceWith , int replaceAll = 0 ) string replace( RegExp findPattern , string replaceWith ) Parameters findStr The string to look for. replaceWith The string to replace findStr with. replaceAll Set to 1 to replace all instances of findStr. findPattern The pattern of characters to look for, a regular expression. Returns string A copy of the string with a find pattern replaced with a new string. Description Replaces a series of characters with another. Regular Expressions A regular expression is a concise way of specifying a pattern of characters to look for. You start and end a regular expression with a forward slash \"/\" (similar to how you start and end a string with quotes) and then add modifiers: /pattern/modifiers /[0-9]+/g Here is a brief explanation of some regular expression syntax. Modifiers These come after the closing / of the regular expression and modify their behavior g - Global Match, matches all occurences, and not just the first one. i - Case-insensitive match. Brackets [] - Matches any character in the brackets. Can use a dash to specify a range of characters. [abc] - matches an a, b or c. [a-z] - matches any lowercase letter. [0-9] - matches any numerical digit. [^abc] - matches any character that is not an a, b or c. Or | - Matches any of the alternatives separated by a |. (abc|cba) - matches the sequence \"abc\" or \"cba\". (gray|grey) or gr(a|e)y - matches \"gray\" and \"grey\". Quantifiers Define the quantity of characters the preceding expression will match * - Matches any string that has zero or more of the specified characters. ab*c - matches \"ac\", \"abc\", \"abbc\", \"abbbc\", etc. Basically any sequence of an a, any number of b's, and then a c. + - Matches any string that has at least one of the specified characters. ab+c - almost the same as ab*c except that \"ac\" no longer matches. ? - Matches any string that has zero or one of the specified characters. colou?r - matches both \"color\" and \"colour\", but not \"colouur\". Repetitions {n} - Matches n number of occurences. {m,n} - Matches at least m, up to n number of occurences. Periods . - Matches any character. \\. - Matches a period. Capture Groups You can also define what are called capture groups using parentheses. By wrapping parentheses around a character pattern, results found within the parentheses will be saved for use in the replace string. Use the terms $1, $2, etc. in the replace string to reference the first, second, third, etc. captured group in the search pattern. Examples This code removes all numbers. We are using [0-9] to find characters in the numeric range and then we put a plus after it to find any sequence of numbers no matter how long. Finally we add the g modifier to match all occurences. string text = \"300 out of 500 soda cans\"; return text.replace(/[0-9]+/g, \"\"); // \" out of soda cans\" Replace any instances of blue or green regardless of case with red. string text = \"Blue cars are really green.\"; return text.replace(/blue|green/gi, \"red\"); // \"red cars are really red.\" Replace all 3 letter words starting with b and ending with t. string text = \"My favorite words are: bit bat but bot bet.\"; return text.replace(/b[aeiou]t/g, \"Money\"); // My favorite words are: Money Money Money Money Money. Hide any email addresses. Note that \"\\.\" is how you specify you want to see a period and not just any character. string text = \"Email me at [email protected] or [email protected] \"; return text.replace(/([a-z0-9_\\.-]+)@([0-9a-z\\.-]+)\\.([a-z\\.]{2,6})/g, \"###\"); //Email me at ### or ### FlexScript's string regular expression implementation uses c++'s regex library for its functionality, using the ECMAScript grammar. Our design was also guided by JavaScript's regular expression implementation. The string.replace() method's regular expression overload is a wrapper around a call to std::regex_replace . For more detailed information on building regular expressions, refer to that documentation. Note that we do not (yet) implement JavaScript's /m, /y, or /u regular expression flags. Do no remove, this fixes the anchor on doc.flexsim.com string .search() int search( string str ) Parameters str The string or pattern to search for. Returns int If found, the 1-based byte index of the found string. Otherwise -1. Description Searches the string for an internal string or pattern. string str = \"Hello, how are you?\"; int howIndex = str.search(\"how\"); // 8 A regular expression can also be used to find strings. string str = \"Hello, how are you?\"; int howIndex = str.search(/h[a-z]+/); // 8 (first word starting with h) See the replace () method for further discussion of regular expressions. Do no remove, this fixes the anchor on doc.flexsim.com string .slice() string slice( int beginIndex , int endIndex = 0 ) Parameters beginIndex The 1-based byte index of the first character to extract. If this index is in the middle of a multi-byte character, it will extract the full character. If it is a negative number, it is indexed offset from the end of the string. endIndex The 1-based byte index of the end character. The extraction will go up-to-but-not-including the character at this index. If the index is in the middle of a multi-byte character, the extraction will include that full character. If this parameter is left out, the method will extract to the end of the string. If the parameter is negative, it is indexed offset from the end of the string. Returns string The extracted string. Description Extracts a section of a string and returns a new string. string text = \"Hello World!\"; string subText = text.slice(1, 6); // \"Hello\" Using a negative number it starts from the end of the string. string text = \"Hello World!\"; string subText = text.slice(-6); // \"World!\" Do no remove, this fixes the anchor on doc.flexsim.com string .split() Array split( string delimiter = \"\" , int limit = -1 ) Array split( RegExp delimiter , int limit = -1 ) Parameters delimiter The string that marks the separators for where the string should be split. If this parameter is excluded or is an empty string, every character will be separated into its own array element. limit The maximum number of array elements to return. If excluded, it will split the whole string. Returns Array An array of substrings made by splitting the string whenever the specified separator is found. Description Splits the string into an array of substrings. string str = \"Hello, how are you?\"; Array subStrings = str.split(\" \", 3); // [\"Hello,\", \"how\", \"are\"] string csv = \"foo,bar,,baz\"; Array subStrings = csv.split(\",\"); // [\"foo\", \"bar\", \"\", \"baz\"] A regular expression can also be used to find strings to delimit by. This code removes numbers: string str = \"abcd123efg456hij789klm0\"; Array subStrings = str.split(/[0-9]+/g); // [\"abcd\", \"efg\", \"hij\", \"klm\", \"\"] See the replace () method for further discussion of regular expressions. Do no remove, this fixes the anchor on doc.flexsim.com string .startsWith() int startsWith( string str ) Parameters str The substring to look for. Returns int 1 if the string starts with the specified substring, 0 otherwise. Description Checks if the string starts with the specified substring. string text = \"Hello World!\"; int worldStart = text.startsWith(\"Hello\"); // 1 Do no remove, this fixes the anchor on doc.flexsim.com string .substr() string substr( int beginIndex , int length ) Parameters beginIndex The 1-based byte index of the first character to extract. If this index is in the middle of a multi-byte character, it will extract the full character. If it is a negative number it becomes an offset from the end of the string. length The length of the target string, in bytes. Returns string The extracted string. Description Extracts a section of a string and returns a new string. string text = \"Hello World!\"; string subText = text.substr(1, 5); // \"Hello\" With the first parameter negative, it starts that many characters from the end. string text = \"Hello World!\"; string subText = text.substr(-6, 5); // \"World\" without the \"!\" Do no remove, this fixes the anchor on doc.flexsim.com string .toLowerCase() string toLowerCase( ) Returns string A new string with all lowercase letters. Description Converts all letters to lowercase. string text = \"Hello World!\"; string lower = text.toLowerCase(); // \"hello world!\" Do no remove, this fixes the anchor on doc.flexsim.com string .toNum() double toNum( ) Returns double The interpreted content of the string as a double. Description Interprets the string's content as a floating point number. string text = \"1.5\"; double number = text.toNum(); // 1.500 Do no remove, this fixes the anchor on doc.flexsim.com string .toUpperCase() string toUpperCase( ) Returns string A new string with all uppercase letters. Description Converts all letters to uppercase. string text = \"Hello World!\"; string lower = text.toUpperCase(); // \"HELLO WORLD!\" Do no remove, this fixes the anchor on doc.flexsim.com string .trim() string trim( ) Returns string The trimmed string. Description Removes leading and trailing whitespace. string text = \" Hello World! \"; string trim = text.trim(); // \"Hello World!\" Do no remove, this fixes the anchor on doc.flexsim.com string .fromNum() static string fromNum( double num , int precision = -1 ) Parameters num The number to be converted. precision The desired number of decimal places to be printed. Use -1 for automatic precision. Returns string The number as a string. Description Converts the given number to a string. string text1 = string.fromNum(1.5); // \"1.5\" string text2 = string.fromNum(1.5, 2); // \"1.50\" Do no remove, this fixes the anchor on doc.flexsim.com string .operator != int operator !=( string otherString ) Parameters otherString The string to compare to this one. Returns int True if the strings are not equal, false otherwise. Description Compares two strings. \"Hello\" != \"hello\" // true Do no remove, this fixes the anchor on doc.flexsim.com string .operator [ ] int operator [ ]( int byteIndex ) Parameters byteIndex The 1-based byte index of the target byte. Returns int An element of the array. Description Gets or sets a byte element in the string. The [ ] operator accesses individual elements of the string as byte values. For an ASCII string, these can be compared to ASCII character values using single-quote literals such as 'A', 'B', 'C', etc. All ASCII character values are in the integer range [1, 127]. For multi-byte characters, accessing an individual byte will return a value that is in the integer range [128, 255]. Non-ASCII multi-byte characters in the string that are accessed with the [ ] operator are read-only. If you try to set the value of a byte that is part of a multi-byte character using the [ ] operator, FlexSim will throw an exception. string str = \"Σ=σ\"; for (int i = 1; i <= str.length; i++) { if (str[i] == '=') // comparing a byte to an ASCII character works fine str[i] = '#'; // setting a byte to an ASCII character works fine, // as long as the existing byte was already an ASCII character. if (str[i] >= 128) str[i] = ' '; // setting a byte that is part of a multi-byte character will throw an exception } Do no remove, this fixes the anchor on doc.flexsim.com string .operator + string operator +( string otherString ) Parameters otherString The string to concatenate with this one. Returns string A new concatenated string. Description Concatenates two strings string str = \"Hello\" + \", how are you?\"; // \"Hello, how are you?\" Do no remove, this fixes the anchor on doc.flexsim.com string .operator += string operator +=( string otherString ) Parameters otherString The string to concatenate with this one. Returns string The concatenated string and assigns it to the variable. Description Assigns the string to be a concatenation with another string string str = \"Hello\" str += \", how are you?\"; // \"Hello, how are you?\" Do no remove, this fixes the anchor on doc.flexsim.com string .operator == int operator ==( string otherString ) Parameters otherString The string to compare to this one. Returns int True if the strings are exactly equal, false otherwise. Description Compares two strings. \"Hello\" == \"Hello\" // true"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Tree/treenode.html",
        "title": "FlexScript Class - treenode",
        "content": "Description A class that represents a reference to a node in FlexSim's tree. The treenode class is the base class for all objects and nodes accessed in FlexSim's tree. While you can access more data and functionality specific to nodes with object data by using the Object class, treenode is the most basic interface. First, it gives access to data and functionality associated with the tree structure itself. Second, it gives access to basic data stored on the nodes themselves, such as node names and data values. Third, since so much modeling logic uses labels, the treenode class provides a mechanism for easy manipulation of labels on objects, tokens, and task sequences. The treenode class can be automatically down-cast to a subclass such as Object . treenode src = model().find(\"Source1\"); Object srcAsObject = src; // auto-down-cast to object You can also explicitly down-cast using the as() keyword src.as(Object).location.x += 2; When FlexScript performs a down-cast, if the node is not a valid instance of the target class type, an invalid cast exception will be thrown. Object src = model().find(\"Tools\");// throws invalid cast exception model().find(\"Tools\").as(Object).location.x += 2; // throws invalid cast exception You can check if a node is a given subclass type with the is() keyword. if (model().find(\"Source1\").is(Object)) { ... } Null Values In general, to check if a treenode is null just compare the treenode with NULL or put it directly in an if statement. Note that the keyword nullvar represents a null Variant and is not the same as a null treenode. treenode fred = model().find(\"doesnotexist\"); return fred == NULL; // true return fred == nullvar; // false return tonum(fred); // 0 if (fred) return 1; else return 0; // 0 if (objectexists(fred)) return 1; else return 0; // 0 However, there are a few special cases: 1. A treenode returned by an old global command, such as node(). The return value could be the SAFEREF node, which is a valid memory address, but it doesn't exist in the main or view trees. To check for whether the treenode is a valid reference, you need to use objectexists(). For example: treenode fred = node(\"doesnotexist\", model()); return fred == NULL; // false return fred == nullvar; // false return tonum(fred); // a non-zero number if (fred) return 1; else return 0; // 1 if (objectexists(fred)) return 1; else return 0; // 0 2. A treenode stored in a Variant, where the treenode pointer is pointing at 0x0, returned by a command that returns a Variant or by dynamic label access. In the the following example Processor1 has a label called myPointerLabel that has pointer data, but is not pointing at anything (or 0x0): Object processor = model().find(\"Processor1\"); Variant fred = processor.myPointerLabel; return fred == NULL; // true return fred == nullvar; // false return tonum(fred); // 0 if (fred) return 1; else return 0; // 0 if (objectexists(fred)) return 1; else return 0; // 0 3. A Variant that is nullvar, where the type of the Variant was unknown. For example, reading the .value of a node where you don't know whether the node has no data or treenode data: treenode Tools = model().find(\"Tools\"); Variant fred = Tools.value; return fred == NULL; // false return fred == nullvar; // true return tonum(fred); // 0 if (fred) return 1; else return 0; // 0 if (objectexists(fred)) return 1; else return 0; // 0 For more information on checking what type of data a treenode holds or checking if it has data at all see the dataType property. Properties dataType Gets and sets the node's data type. first Gets the node's first subnode. labelProperties Use your own named properties to get/set label values. labels Accesses the node's labels as nodes. last Gets the node's last subnode. name Gets and sets the node's name. next Gets the next node after the node in the tree. prev Gets the node before the node in the tree. rank Gets/sets the rank of the node in its parent's sub-tree subnodes Accesses the node's subnodes up Gets and sets the node \"above\" the node in the tree, or in other words, its parent node. value Gets and sets the value on the node. Methods coevaluate Evaluates the node, potentially returning a reference to a Coroutine . copy Creates a copy of the node. destroy Destroys the node evaluate Evaluates the node. find Finds a node in the node's subtree by its path. getPath Gets the node's path, optionally relative to some other node. Details Do no remove, this fixes the anchor on doc.flexsim.com treenode .dataType int dataType Description Gets and sets the node's data type. If you set dataType to a different value than the node's current data type, it will delete the node's current data and add the new data type. Usually you do not need to use this property since you can always just use treenode . value to get and set the value on a treenode. The following are the values and macros available for dataType. None = 0 DATATYPE_NUMBER = 1 DATATYPE_STRING = 2 DATATYPE_COUPLING = 3 DATATYPE_OBJECT = 4 DATATYPE_PARTICLE = 5 DATATYPE_BUNDLE = 6 DATATYPE_SIMPLE = 7 The following example assigns string data to current's label named \"MyLabel\" and returns that data type. current.labels[\"MyLabel\"].dataType = DATATYPE_STRING; return current.labels[\"MyLabel\"].dataType; You can check if a node has data by comparing the datatype to NULL. node.dataType == NULL Do no remove, this fixes the anchor on doc.flexsim.com treenode .first readonly treenode first Description Gets the node's first subnode. Returns a reference to the first subnode contained in the node. This is a shortcut for using node. subnodes [1], except that if it doesn't exist, node.first will simply return NULL, whereas node. subnodes [1] will throw an array out of bounds exception. The following example sets the name of the first subnode of current to \"FirstObj\". current.first.name = \"FirstObj\"; Do no remove, this fixes the anchor on doc.flexsim.com treenode .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. The treenode class allows you to get and set custom named properties that will apply to labels on an object. For example, if you want to set a label named \"MyLabel\" on current to a value of 5, you can write the following code: current.MyLabel = 5; This will set the label's value to 5. If a label of that name does not exist, then it will be added to the object's labels. If you want to return the value stored in current's \"MyLabel\" label, you can execute the following code: return current.MyLabel; This label access mechanism is only available on nodes with object data, or on Process Flow tokens, Storage.Slot s, or task sequences. If you use this mechanism on a node that is not one of these types of node, FlexSim will throw an exception. Using dynamic label property access gives you shorter syntax for what you could otherwise do with a bit longer expression. Short Syntax Longer Equivalent Syntax current.MyLabel current.labels[\"MyLabel\"].evaluate() current.MyLabel = 5 current.labels.assert(\"MyLabel\").value = 5 * * Note that if you use the shorter syntax to set the code of a flexscript-toggled label, it will also automatically build the code's flexscript. ? Operator There are, however, some caveats associated with this. Since FlexScript allows you to get/set any label names on a node, this does introduce a potential problem if you don't spell your labels correctly. For this reason, if you get a label that does not exist, FlexScript will throw an exception, pointing you immediately to the problem. If you intentionally want to access a label that may not exist (just return a null Variant , or nullvar, if it doesn't), then you can put a ? after the label name to signify that you don't want to throw an exception on an undefined label The following code will simply return nullvar if the \"MyLabel\" label does not exist, instead of throwing an exception. return current.MyLabel?; # Operator Because your object already has its own properties there are certain label names that won't work as a dynamic property. For example: current.next = 5; This will throw an exceptions since next is already a property on the treenode class and it is read-only. However, this doesn't mean it's impossible to have an object with a \"next\" label (for example you could add it to an object through the object's properties window). However, you can't access this label through dynamic properties in the same way as other labels without a name collision. In order to reference this label (or add it in the first place) with dynamic properties you need to add a # character before the label name: current.#next = 5; This will correctly find the object's \"next\" label and not use its next property. It is also possible that, as the software is updated, new properties will be added to objects that collide with label names used by your object in your model. In this case, your code will be automatically updated to use the # character so your code continues to work the same way. For example, say you are using a \"position\" label on one of your objects: current.position = 5; Now, in the next update that object is updated and a new position property is added. Your code will be automatically updated to look like the following code snippet and will continue to work as before. current.#position = 5; Do no remove, this fixes the anchor on doc.flexsim.com treenode .labels readonly labels Description Accesses the node's labels as nodes. This property allows you to access the node containing a label value. Usually you will not need to use this property, as you can use labelProperties . The exceptions to this rule are: 1. Your label names have spaces in them. - If your label names contain spaces, you will need to access them using the labels property: current.labels[\"My Label Name\"].value = 5; Since this code is more tedious than using labelProperties , we suggest not naming your labels with spaces. 2. You specifically want to access label nodes - In some cases you actually want to access label nodes, such as when the label is a table of values. In this case, you would use the labels property. Table myTable = current.labels[\"myTable\"]; 3. You want to assert the label if it doesn't exist. - Just like subnodes property, you can assert that a label exists. Optionally, you can pass in a default value to give the label if it does not exist: // Set myValue to the value of MyLabel // If MyLabel doesn't exist, create it Variant myValue = current.labels.assert(\"MyLabel\").value; // Increment the value of MyLabel by 10 // If MyLabel doesn't exist, create it and set its value to 1 current.labels.assert(\"MyLabel\", 1).value += 10; Do no remove, this fixes the anchor on doc.flexsim.com treenode .last readonly treenode last Description Gets the node's last subnode. Returns a reference to the last subnode contained in the node. This is a shortcut for using node. subnodes [node.subnodes.length], except that if it doesn't exist, node.last will simply return NULL, whereas node. subnodes [node.subnodes.length] will throw an array out of bounds exception. The following example sets the name of the last subnode of current to \"FirstObj\". current.last.name = \"FirstObj\"; Do no remove, this fixes the anchor on doc.flexsim.com treenode .name string name Description Gets and sets the node's name. treenode source = Model.find(\"Source1\"); source.name = \"MySource\"; // sets the node's name to \"MySource\" return source.name; // returns \"MySource\" Do no remove, this fixes the anchor on doc.flexsim.com treenode .next readonly treenode next Description Gets the next node after the node in the tree. Gets the node in the FlexSim tree that is in the same level and immediately after this node. If this node is the last node in the tree at that level, then this command returns NULL which means that the requested node does not exist. The following example sets a label called \"tally\" to 0 on every item in the current. The variable item is used to store the reference to the item that is currently being worked on. treenode item = current.first; while (item) { item.tally = 0; item = item.next; } Do no remove, this fixes the anchor on doc.flexsim.com treenode .prev readonly treenode prev Description Gets the node before the node in the tree. Gets the node in the FlexSim tree that is in the same level and immediately before this node. If this node is the first node in the tree at that level, then this command returns NULL which means that the requested node does not exist. The following example sets a label called \"tally\" to 0 on every item in the current by traversing backwards through its subnodes. The variable item is used to store the reference to the item that is currently being worked on. treenode item = current.last; while (item) { item.tally = 0; item = item.prev; } Do no remove, this fixes the anchor on doc.flexsim.com treenode .rank int rank Description Gets/sets the rank of the node in its parent's sub-tree The rank is the position in the tree layer that this node is in. The first node in a layer is rank 1, the second is rank 2, and so forth. The following example sends a delayed message if item is the last subnode contained in current. if (item.rank == current.subnodes.length) senddelayedmessage(current,10,current,1,2,tonum(item)); Do no remove, this fixes the anchor on doc.flexsim.com treenode .subnodes readonly subnodes Description Accesses the node's subnodes Accessing the Number of Subnodes You can access the number of subnodes on current with the following code. current.subnodes.length Accessing Subnodes by Rank You can access an individual subnode by rank with the following code. current.subnodes[1] // first subnode current.subnodes[current.subnodes.length] // last subnode current.subnodes[i] // i-th subnode Accessing Subnodes by Name You can access an individual subnode by name with the following code. current.subnodes[\"Box1\"] // subnode named \"Box1\" Asserting Subnodes by Name You can assert a subnode by name with the following code. // assert a label named \"My Label\" current.attrs.labels.subnodes.assert(\"My Label\") This will see if a node of that name already exists, and if it doesn't, it will add a subnode with that name. It returns the resulting subnode. Asserting Subnodes with a Default Value You can also assert a subnode by name and include a default start value with the following code. // assert a label named \"My Label\" with a default value of 5 current.attrs.labels.subnodes.assert(\"My Label\", 5) This is the same as the previous assert() call, except that if it needs to add the label, it will give the added label a value of 5. Adding Subnodes You can add a subnode with the following code. // add a new node under current current.subnodes.add() This will add a blank subnode under current. It returns the resulting subnode. Clearing Subnodes You can delete current's subnodes with the following code. current.subnodes.clear(); Getting an Array of subnodes You can create an Array of all the subnodes with the following code. Array subnodes = current.subnodes.toArray(); Do no remove, this fixes the anchor on doc.flexsim.com treenode .up treenode up Description Gets and sets the node \"above\" the node in the tree, or in other words, its parent node. treenode box = Model.find(\"Source1/Box\"); box.up; // gives Source1 box.up.up; // gives the model Setting the up property causes the node to be transfered into the target node. treenode box = Model.find(\"Queue1/Box\"); box.up = Model.find(\"Queue2\"); Do no remove, this fixes the anchor on doc.flexsim.com treenode .value Variant value Description Gets and sets the value on the node. When getting a node's value, a node with number data will return a number, a node with text data will return text, and a node with coupling pointer data will return the target node pointed to. Nodes that hold array data will return the associated Array . Nodes that have object data return themselves since they store attribute nodes on themselves. Nodes without data will return a null Variant , or nullvar. Additionally, some nodes may hold \"custom\" data, using a customization class called SimpleDataType, or SDT. For these types, the customization class can define what is returned when value is accessed or set. For example, for a node that contains tracked variable data, such as current.attrs.state_current or current.attrs.stats_content, the value property will return the tracked variable's current value (same as getstat(current.attrs.state_current, \"\", STAT_CURRENT), etc.), and setting the value will update the tracked variable's current value. Examples Get the shape path associated with current's 3D shape file: string shapePath = current.attrs.shape.value; Get current's shape index int shapeIndex = current.attrs.shapeindex.value; Set the value of current's \"My Label\" label to 5. (Note that you can do this easier using labelProperties if you don't put spaces in your label names). current.labels[\"My Label\"].value = 5; Assert and set the value of current's \"Loading Operator\" label to point to Operator1 in the model. current.labels.assert(\"Loading Operator\").value = Model.find(\"Operator1\"); Assert and set the value of current's \"Loading Operators\" label to an array pointing to 3 operators in the model. current.labels.assert(\"Loading Operators\").value = [Model.find(\"Operator1\"), Model.find(\"Operator2\"), Model.find(\"Operator3\")]; Assert a subnode named \"OperatorName\" into the model tools folder and give it the value \"Operator1\" Model.find(\"Tools\").subnodes.assert(\"OperatorName\").value = \"Operator1\"; Do no remove, this fixes the anchor on doc.flexsim.com treenode .coevaluate() Variant coevaluate( ) Variant coevaluate( Variant p1 ) Variant coevaluate( Variant p1 , Variant p2 ) Variant coevaluate( Variant p1 , Variant p2 , Variant p3 ) Parameters p1-p3 Parameters to be passed into the evaluation. These parameters can be accessed from within the node's code using param(1), param(2), etc. Returns Variant The result of the node's evaluation. Description Evaluates the node, potentially returning a reference to a Coroutine . Calling coevaluate() is the same as calling evaluate (), with one important difference. If the node's code is a coroutine , and the evaluation of the code results in a suspension of the coroutine, coevaluate() will return a reference to the coroutine. A reference to a coroutine is a Variant that references a node that has Coroutine data. Calling evaluate(), on the other hand, will merely return nullvar in the same scenario. Generally you should coevaluate() instead of evaluate() only if you plan on actually awaiting the result, meaning you want to suspend the execution of the calling function (the caller) until the called function (the callee) is also finished, and get the final result of the callee's evaluation. Do no remove, this fixes the anchor on doc.flexsim.com treenode .copy() treenode copy( treenode destination = 0 , int flags = 0 ) Parameters destination If defined, the copied node will be placed under this node. If not the copied node will be placed in the model. flags A set of bitwise flags that control the copy behavior. If you pass COPY_FLAG_REPLACE, the copied node will replace the destination node rather than being placed under it. If you pass COPY_FLAG_SUPPRESS_ON_CREATE, then the newly created object(s) will not fire their OnCreate event. In this case, you can subsequently configure the object and call firecreateevent() to call the OnCreate later. Returns treenode A copy of the node. Description Creates a copy of the node. treenode copy = Model.find(\"Processor1\").copy(); Do no remove, this fixes the anchor on doc.flexsim.com treenode .destroy() void destroy( ) Description Destroys the node Once you call this method on a node, it will have been destroyed and you should not reference the node anymore. The following example destroyes all but one subnode of current. while (current.subnodes.length > 1) current.last.destroy(); Do no remove, this fixes the anchor on doc.flexsim.com treenode .evaluate() Variant evaluate( ) Variant evaluate( Variant p1 ... p20 ) Parameters p1-p20 Parameters to be passed into the evaluation. These parameters can be accessed from within the node's code using param(1), param(2), etc. Returns Variant The result of the execution of the node's code, if it is code-toggled. Otherwise, it will return the node's value. Description Evaluates the node. Calling evaluate() will return the same value as treenode . value if the node has number, non-code text, or array data. If the node has text data and is toggled as code (either dll, c++, or FlexScript) then evaluate() will execute that code and return the resulting value. Do no remove, this fixes the anchor on doc.flexsim.com treenode .find() treenode find( string path ) Parameters path The path, starting at the node, that addresses the target node. Returns treenode If the addressed node exists, the method returns that node, otherwise NULL. Description Finds a node in the node's subtree by its path. This method is generally used to access nodes in the tree for which there are no other specific commands available. This command uses a path syntax not unlike unix/windows file paths. There are several path symbols you can use to traverse the tree, as listed below: / This symbol tells the traversal to go into the current node's sub-tree. > This symbol tells the traversal to go into an object's attribute tree. .. This symbol tells the traversal to go to the current node's parent tree, or up one level. ~ This symbol may have two meanings depending on context. If the symbol is encountered directly after another special symbol (such as >objectfocus+/~), then it tells the traversal to go to the owning object of the current node. For example, if the current node is within the attributes tree of an object, ~ will go up to the object itself. If, however, the symbol is encountered after a node name, it will expect a number after the symbol, defining the \"nth\" object with the given name. For example, a path of MODEL:/Processor~5 will return the 5th object named Processor in the model. @ This symbol tells the traversal to go to the owner view of the current node. + This symbol tells the traversal to read the current node's text as a path to an object (or if the node has pointer data, it reads the value of the pointer), and go to that object. \" Put quotes around an object name if the name contains special path characters. For example, the path MODEL:/\"Is Distance > Max Distance?\" will return the object named Is Distance > Max Distance? in the model. ? This symbol tells the traversal to perform a recursive tree search for the subsequent name. For example, model().find(\"/?FlowItemBin\") will search for a node with the name FlowItemBin in the model tree. This returns the same node reference as an explicit path definition would: model().find(\"/Tools/FlowItemBin\") $ Surround a macro or flexscript with $ characters to dynamically define ranking or node references. For example, if you have defined a global macro MY_RANK as 8, then the path MODEL:/$MY_RANK$ will get the 8th ranked object in the model. If you define flexscript here, use i to get the current node. For example, the path MODEL:/Processor1/$outobject(i, 3)$ will return the object connected to the 3rd output port of the object named Processor1 in the model. For the most part, you will only use the / and > symbols, and occasionally the .. symbol. The @ and + symbols are usually only used when you are building a custom GUI. There is also a feature that lets you specify a node by its rank instead of by its name. Just put a number in the place where an object's name usually goes, and the ranked node will be accessed instead. You can also define one of several optional starting point keywords in the path, in place of startnode. This will override the defined node (the node left of the dot) as the path starting point. They are: MAIN:/ Starts at the main project tree MODEL:/ Starts at the model tree VIEW:/ Starts at the view tree Example 1: treenode curnode = model().find(\"/Conveyor3/Textured Colored Box\"); This sets the variable curnode to a reference to an object named \"Textured Colored Box\", which is found in the object called \"Conveyor3\", which is found in the model. Example 2: treenode curnode = model().find(\"/Conveyor3/3\"); This example sets curnode to the 3rd ranked object in the object named \"Conveyor3\" in the model. This provides an advantage over the first example since often flowitems will all have the same name, so the path \"/Conveyor3/Textured Colored Box\" will only give you access to the first flowitem named \"Textured Colored Box\" in Conveyor3. If several flowitems are in Conveyor3 and all have the name \"Textured Colored Box\", then you can use the path \"/Conveyor3/2\" to get the 2nd ranked flowitem, the path \"/Conveyor3/3\" to get the 3rd ranked flowitem, and so forth. Example 3: treenode exittriggernode = model().find(\"/Conveyor3>variables/exittrigger\"); This example sets exittriggernode to reference the exittrigger variable on Conveyor3 in the model. Note that this uses the > symbol to go into the Conveyor's object attributes tree instead of the Conveyor's sub-tree like the first example did. Note that the object attribute tree holds things like labels, variables, size, location, etc., whereas the object sub-tree holds other objects like flowitems. Example 4: treenode focus = c.find(\"@>objectfocus+\"); This example would typically be used in a GUI. It gets access to the object that a parameters/properties window is \"pointing to\". For more information, refer to the topic on Graphical User Interfaces in the user manual. Do no remove, this fixes the anchor on doc.flexsim.com treenode .getPath() string getPath( treenode relativeTo = 0 , int byName = 1 ) Parameters relativeTo If defined, the resulting path will be relative to that node. If left out, the path will be a globally-defined path that includes a root node prefix, such as MODEL:/. byName If defined, 0 means the resulting path will be a sequence of numbered ranks in the tree. 1 means the resulting path will be a sequence of named nodes. Returns string The node's path. Description Gets the node's path, optionally relative to some other node."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Tree/Object.html",
        "title": "FlexScript Class - Object",
        "content": "Inherits from treenode Description A class that represents objects in the model. An Object is a treenode that has object data. Objects have all the functionality of a treenode and also provide functionality for accessing object data and manipulating 3D objects. Properties animations Accesses an object's animations. attrs Accesses object attribute nodes. centerObjects Accesses objects connected through center port connections. color Get and set the Color of the object. flags Get and set flags of the object. inObjects Accesses objects connected through input ports connections. input Access methods on the object's input ports connections. location Get and set the position of the object. outObjects Accesses objects connected through output ports connections. output Access methods on the object's output ports connections. resetPosition Accesses an object's reset position. rotation Get and set the rotation of the object. size Get and set the size of the object. stats Allows access to an object's statistics. stopCount Gets the number of stops for the object. Methods applyProperties Commits property change(s) to template instances and overrides. event Returns an Event of the object based on the given parameters getLocation Gets the object's location. getProperty Gets the value of an object's property. getVariable Deprecated. Use getProperty (). Gets the value of an object's variable. message Send a message to the object. resume Return the object to its state prior to stop(). setLocation Sets the object's location. setProperty Sets the value of an object's property. setRotation Sets the object's rotation. setSize Sets the object's size. setState Sets the object's state. setVariable Deprecated. Use setProperty (). Sets the value of an object's variable. stop Stops the object, sets its state, and waits for resume(). Static Methods create Creates a new instance of a library object. Details Do no remove, this fixes the anchor on doc.flexsim.com Object .animations readonly animations Description Accesses an object's animations. Gives access to the animations of an object as Animation interfaces. // Start the \"Walk\" animation on Operator1 Object obj = Model.find(\"Operator1\"); obj.animations[\"Walk\"].start(); Do no remove, this fixes the anchor on doc.flexsim.com Object .attrs readonly attrs Description Accesses object attribute nodes. Object obj = Model.find(\"Processor1\"); obj.attrs.spatialx.value = 5; Do no remove, this fixes the anchor on doc.flexsim.com Object .centerObjects readonly centerObjects Description Accesses objects connected through center port connections. Accessing the Number of Center Port Connections You can access the number of center port connections on the object with the following code. obj.centerObjects.length Accessing Objects by Rank You can access an individual object connected through a center port connection by rank with the following code. obj.centerObjects[1] // first object obj.centerObjects[obj.centerObjects.length] // last object obj.centerObjects[i] // i-th object Getting an Array of Objects You can get an Array of all objects connected through a center port connection with the following code. Array centerObjects = obj.centerObjects.toArray(); Do no remove, this fixes the anchor on doc.flexsim.com Object .color readonly Color color Description Get and set the Color of the object. Object obj = Model.find(\"Processor1\"); obj.color = Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Object .flags readonly flags Description Get and set flags of the object. isProtected Get or set the \"Protected\" flag of the object. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Protected objects will have a gray highlight in the treeview to indicate their protected status. current.flags.isProtected = 1; isSelected Get or set the \"Selected\" flag of the object. Selecting an object puts a red box around it in both the 3D and tree view. Dragging one selected object in the 3D view will drag all other selected objects by the same amount. The Edit Selected Objects tool allows you to quickly modify all selected objects in your model. if(current.flags.isSelected) return 1; showConnections Get or set the \"Show Connections\" flag of the object. Hiding the connections will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. obj.flags.showConnections = 0; showContent Get or set the \"Show Contents\" flag of the object. Hiding the contents of an object will stop the display of objects (e.g. flowitems) contained within it. current.flags.showContent = 0; showName Get or set the \"Show Name\" flag of the object. A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. obj.flags.showName = 1; showShape Get or set the \"Show Shape\" flag of the object. Hiding the object's shape will stop its 3D shape from drawing. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. current.flags.showShape = 0; Do no remove, this fixes the anchor on doc.flexsim.com Object .inObjects readonly inObjects Description Accesses objects connected through input ports connections. Same as the centerObjects property, but for input port connections. Do no remove, this fixes the anchor on doc.flexsim.com Object .input readonly input Description Access methods on the object's input ports connections. close Blocks the input of the object. Only the input ports themselves, or the input in general needs to be closed to block entry. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the input ports (squares) for the object, signifying the input ports are blocked. Individual ports may still be open and drawn in green, but entry to the object is still blocked because of the red bar. Compare with stop(). current.input.close(); open Unblocks the input of the object after it has been previously blocked with the close() method. It is necessary that both the input ports themselves, and the input in general, are open before entry will be allowed. It is advised that modelers never use this method in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare with resume(). current.input.open(); resume Opens the input of the object just like open() does, but because it keeps track of previous stop() calls on the object, it will only open input after all stops have been resumed. Refer to open() for additional information. current.input.resume(); stop Closes the input of the object just like close() does, but it also keeps track of consecutive stop() calls on the object, and will only open input after all stops have been resumed. Refer to close() for additional information. current.input.stop(); Do no remove, this fixes the anchor on doc.flexsim.com Object .location readonly Vec3 location Description Get and set the position of the object. Object obj = Model.find(\"Processor1\"); obj.location = Vec3(0,0,0); Do no remove, this fixes the anchor on doc.flexsim.com Object .outObjects readonly outObjects Description Accesses objects connected through output ports connections. Same as the centerObjects property, but for output port connections. Do no remove, this fixes the anchor on doc.flexsim.com Object .output readonly output Description Access methods on the object's output ports connections. Same as the input property, but for output port connections. Do no remove, this fixes the anchor on doc.flexsim.com Object .resetPosition readonly resetPosition Description Accesses an object's reset position. Allows you to access the reset position of an object. The property can be read directly to determine if an object's reset position has been set or not. This property provides the following properties and methods: location - returns an object's reset position location rotation - returns an object's reset position rotation size - returns an object's reset position size container - returns an object's reset position container set() - sets an object's reset position to its current location, rotation, size, and container. clear() - clears an object's reset position. Object obj = Model.find(\"Processor1\"); if (obj.resetPosition) //Checks to see if its reset positon has been set return obj.resetPosition.location;// gets the location value of the reset position else{ obj.resetPosition.set();// set the reset postion on the object return obj.resetPosition.location; // gets the location value of the reset position } Do no remove, this fixes the anchor on doc.flexsim.com Object .rotation readonly Vec3 rotation Description Get and set the rotation of the object. Object obj = Model.find(\"Processor1\"); obj.rotation = Vec3(0,0,0); Do no remove, this fixes the anchor on doc.flexsim.com Object .size readonly Vec3 size Description Get and set the size of the object. Object obj = Model.find(\"Processor1\"); int xSize = obj.size.x; Do no remove, this fixes the anchor on doc.flexsim.com Object .stats readonly stats Description Allows access to an object's statistics. Allows you to access the statistics of an object as TrackedVariable objects. This property provides the following properties and methods: input - returns the input tracked variable output - returns the output tracked variable content - returns the content tracked variable staytime - returns the staytime tracked variable totalTravelDistance - returns the total travel distance of a Task Executer state(Variant& profile = nullvar) - returns a state tracked variable. If no profile argument is given, or if it is 0, then the default state profile is returned. Other state profiles can be returned by providing the profile number or name. // Get the input of a processor Object obj = Model.find(\"Processor1\"); double input = obj.stats.input.value; // Get the state of a multiprocessor, // using the multiprocessor state profile Object obj = Model.find(\"MultiProcessor1\"); int curState = obj.stats.state(1).value; Do no remove, this fixes the anchor on doc.flexsim.com Object .stopCount readonly int stopCount Description Gets the number of stops for the object. This number increases with calls to the stop method, and decreases with calls to the resume method. int numStops = current.stopCount; Do no remove, this fixes the anchor on doc.flexsim.com Object .applyProperties() void applyProperties( string propertyName = \"\" ) Parameters propertyName Optional. The name of a specific property that has changed. A list of valid properties for each object can be found on that object's help page. For example, Fixed Resource Properties . Returns void Description Commits property change(s) to template instances and overrides. This method will only have an effect if an object is a template instance or has template instances. It should be called after you have directly changed an object's properties and want that change to be applied to template instances and overrides. The method call affects the named property you pass in, or, if you pass nothing in, it applies to all of the object's properties. It will do the following for the respective properties: Add Override(s) - If the object is a template instance, it will check if the property value of the object is different than the value of the object's template. If so, it will assert that property as an override. Apply to Inheriting Instances - If the object has template instances, it will set the same property value on all template instances that do not override that property. Note that you do NOT need to call this method when you set an object's property using setProperty (). That method will automatically call applyProperties(). You only need to use this method if you have changed an object's properties through some other mechanism. queue.size.x = 5; queue.applyProperties(\"Size\"); The example above demonstrates a time when you would need to call applyProperties(). You have changed an object's size using Object. size , instead of by calling setProperty (). Thus, you must call applyProperties() to apply that new property value to inheriting template instances and overrides. Do no remove, this fixes the anchor on doc.flexsim.com Object .event() Event event( string eventName , Variant req1 = nullvar , Variant req2 = nullvar , Variant req3 = nullvar ) Parameters eventName The name of the event. req1 ... req3 The event's resolution requirements. These dependent on which event you are targeting. Some events require some additional information in order to resolve the event reference. Returns Event The resulting Event. Description Returns an Event of the object based on the given parameters await current.event(\"OnEntry\"); Do no remove, this fixes the anchor on doc.flexsim.com Object .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Vec3 A vector holding the object's location. Description Gets the object's location. This code gets the object's location measured at its center. Vec3 centerLoc = obj.getLocation(0.5,0.5,0.5); Vec3 centerLoc = obj.getLocation(Vec3(0.5,0.5,0.5)); Do no remove, this fixes the anchor on doc.flexsim.com Object .getProperty() Variant getProperty( string propertyName , int flags = 0 ) Parameters propertyName The name of the property. A list of valid properties for each object can be found on that object's help page. For example, Fixed Resource Properties . flags A set of bitwise flags that modify the returned value. GET_PROPERTY_FLAG_UNITS - for a Unit property it will return a 2-length array with the display value in the first element and the display units in the second. GET_PROPERTY_FLAG_STRING - for an Options property it will return the name of the option instead of its value. Returns Variant The current value of the property. Description Gets the value of an object's property. This gets the value of the object's MaxContent property. int maxContent = queue.getProperty(\"MaxContent\"); This gets the display value and units of the object's Speed property. Array speed = conveyor.getProperty(\"Speed\", GET_PROPERTY_FLAG_UNITS); // [5, \"m/min\"] Do no remove, this fixes the anchor on doc.flexsim.com Object .getVariable() Variant getVariable( string variableName ) Parameters variableName The name of the variable Returns Variant The value of the specified variable. Description Deprecated. Use getProperty (). Gets the value of an object's variable. This gets the value of the object's maxspeed variable. double speed = obj.getVariable(\"maxspeed\"); Do no remove, this fixes the anchor on doc.flexsim.com Object .message() Variant message( double delay = 0 , treenode fromObject = 0 , Variant msgparam1 = nullvar , Variant msgparam2 = nullvar , Variant msgparam3 = nullvar ) Parameters delay Optional. Specifies the amount of time to delay before firing the message. If -1, the message will be sent synchronously. If 0 or greater, an event will be created in the defined delay time, and the message will be fired after that delay time. fromObject Optional. The object that is sending the message. This can be accessed from the message trigger. msgparam1 Optional. Defines the first parameter of the message. This can be accessed from the message trigger as msgparam1. msgparam2 Optional. Defines the second parameter of the message. This can be accessed from the message trigger as msgparam2. msgparam3 Optional. Defines the third parameter of the message. This can be accessed from the message trigger as msgparam3. Returns Variant If the message is sent synchronously (delay = -1), it will return whatever is returned by the object's message trigger. If the message is sent asynchronously (delay >= 0), the call will return a reference to the event node that was created in the event list. Description Send a message to the object. In the example below, a message is sent to current, with a 0 second delay, and with item as the fromObject of the message. current.message(0, item); Do no remove, this fixes the anchor on doc.flexsim.com Object .resume() void resume( int id , int stateProfile ) Parameters id Optional. For matching stop requests with resume requests. stateProfile Optional. The state profile on which to record the state. Returns void Description Return the object to its state prior to stop(). Tells the object that it may resume whatever it was doing before stop() was called on it. Refer to stop() for more information. current.resume(1); Do no remove, this fixes the anchor on doc.flexsim.com Object .setLocation() Object setLocation( double x , double y , double z ) Object setLocation( double x , double y , double z , double xFactor , double yFactor , double zFactor ) Object setLocation( Vec3 location , Vec3 factors ) Parameters x The desired x position. y The desired y position. z The desired z position. xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). location A vector holding the desired position. factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Object The translated object. Description Sets the object's location. This code sets the object's center to the position (0,0,0). obj.setLocation(0,0,0,0.5,0.5,0.5); obj.setLocation(Vec3(0,0,0), Vec3(0.5,0.5,0.5)); Do no remove, this fixes the anchor on doc.flexsim.com Object .setProperty() void setProperty( string propertyName , Variant value ) Parameters propertyName The name of the property. A list of valid properties for each object can be found on that object's help page. For example, Fixed Resource Properties . value The desired property value. Returns void Description Sets the value of an object's property. If this method is called as part of the model processing an event the object will store the original value of the property and then that value will be restored when the model is reset. After setting the property value, the method will call applyProperties () for the relevant property, applying the change to template instances and overrides. queue.setProperty(\"MaxContent\", 5); Do no remove, this fixes the anchor on doc.flexsim.com Object .setRotation() Object setRotation( double rx , double ry , double rz ) Object setRotation( Vec3 rotation ) Parameters rx The desired rotation about the x axis. ry The desired rotation about the y axis. rz The desired rotation about the z axis. rotation A vector of the desired rotation values. Returns Object The rotated object. Description Sets the object's rotation. obj.setRotation(0,0,0); obj.setRotation(Vec3(0,0,0)); Do no remove, this fixes the anchor on doc.flexsim.com Object .setSize() Object setSize( double x , double y , double z ) Parameters x The desired x size. y The desired y size. z The desired z size. Returns Object The sized object. Description Sets the object's size. obj.setSize(1,1,1); Do no remove, this fixes the anchor on doc.flexsim.com Object .setState() void setState( int state , int stateProfile ) Parameters state The desired state. stateProfile The desired state profile. Returns void Description Sets the object's state. Sets the state of the object to a state number. The statistics regarding state will be automatically updated when this is called. There are 50 predefined states. The predefined values for state and their associated macros are: 1 - STATE_IDLE 2 - STATE_PROCESSING 3 - STATE_BUSY 4 - STATE_BLOCKED 5 - STATE_GENERATING 6 - STATE_EMPTY 7 - STATE_COLLECTING 8 - STATE_RELEASING 9 - STATE_WAITING_FOR_OPERATOR 10 - STATE_WAITING_FOR_TRANSPORT 11 - STATE_BREAKDOWN 12 - STATE_SCHEDULED_DOWN 13 - STATE_CONVEYING 14 - STATE_TRAVEL_EMPTY 15 - STATE_TRAVEL_LOADED 16 - STATE_OFFSET_TRAVEL_EMPTY 17 - STATE_OFFSET_TRAVEL_LOADED 18 - STATE_LOADING 19 - STATE_UNLOADING 20 - STATE_DOWN 21 - STATE_SETUP 22 - STATE_UTILIZE 23 - STATE_FULL 24 - STATE_NOT_EMPTY 25 - STATE_FILLING 26 - STATE_STARVED 27 - STATE_MIXING 28 - STATE_FLOWING 29 - STATE_ALLOCATED_IDLE 30 - STATE_OFF_SHIFT 31 - STATE_CHANGE_OVER 32 - STATE_REPAIR 33 - STATE_MAINTENANCE 34 - STATE_LUNCH 35 - STATE_ON_BREAK 36 - STATE_SUSPEND 37 - STATE_AVAILABLE 38 - STATE_PREPROCESSING 39 - STATE_POSTPROCESSING 40 - STATE_INSPECTING 41 - STATE_OPERATING 42 - STATE_STANDBY 43 - STATE_PURGING 44 - STATE_CLEANING 45 - STATE_ACCELERATING 46 - STATE_MAXSPEED 47 - STATE_DECELERATING 48 - STATE_STOPPED 49 - STATE_WAITING 50 - STATE_ACCUMULATING if (current.subnodes.length <= 1) current.setState(STATE_EMPTY); This sets the state of the object referenced by current to \"empty\" if the content of current is less than or equal to 1. Do no remove, this fixes the anchor on doc.flexsim.com Object .setVariable() void setVariable( string variableName , Variant value ) Parameters variableName The name of the variable. value The desired variable value. Returns void Description Deprecated. Use setProperty (). Sets the value of an object's variable. If this method is called as part of the model processing an event the object will store the original value of the variable and then that value will be restored when the model is reset. obj.setVariable(\"maxspeed\", 5); Do no remove, this fixes the anchor on doc.flexsim.com Object .stop() void stop( int state , int id , int priority , int stateProfile ) Parameters state The state the object will go into. id Optional. For matching stop requests with resume requests. priority Optional. For breaking ties between stop() calls. stateProfile Optional. The state profile on which to record the state. Returns void Description Stops the object, sets its state, and waits for resume(). Tells the object to stop whatever it is doing, go into the state specified (in the state profile if specified), and waits for resume() to be called. Stop() calls are accumulated, meaning if stop()) is called twice on the same object, the object will not resume its operations until resume()) has been called twice as well. Stopping an object depends on the type of object that is being stopped. For FixedResources, generally events are delayed indefinitely, input and output is stopped, and all operations going into and out of the object are stopped. This means that TaskExecuters trying to load/unload to or from the object will have to wait until the object has been resumed. For TaskExecuters, events are not delayed, but rather a preempting task sequence with priority of 100,000 is created for the TaskExecuter, with one TE_STOP task in it. Be aware that, if there are several stop requests for the same object, the state for each stop request is not remembered. If an object is requested to stop by entity A with state 12, and then is later requested to stop by entity B for state 14, it will go into state 14 and forget state 12. Even if entity B resumes the object before entity A, the object will remain in state 14 until all stop requests have resumed. The id and priority parameters are optional and were added to fix the problem in the previous paragraph. If you specify these parameters, then it will store a record of the stop request, instead of just incrementing a value for the number of stops requested. The id is like a key for that stop request. The priority allows the object to prioritize its stop requests. For example, if you have a stop request for the scheduled down state, and another for the breakdown state at the same time, technically the object should be in two states at once, but since a FlexSim object can only be in one state at a time, the priority value breaks the tie and goes into the state of the highest priority stop request. The id value should match an id value that is added to a resume() call later on. This is for matching stop requests with their appropriate resume requests. For example, if you stop an object for scheduled maintenance with and id of 1, once the scheduled maintenance is finished, you will need to resume the object with the same id of 1. current.stop(STATE_CLEANING, 1); Do no remove, this fixes the anchor on doc.flexsim.com Object .create() static Object create( string className ) Parameters className The class name of a library object. Returns Object A new instance of a library object. Description Creates a new instance of a library object. Object newProcessor = Object.create(\"Processor\"); Object newConveyor = Object.create(\"Conveyor::StraightConveyor\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Variant.html",
        "title": "FlexScript Class - Variant",
        "content": "Description A type that can hold either a number, a string , a treenode or an Array . The Variant class is an essential type by which data is exchanged between various functionalities in FlexSim. As such, the Variant represents a \"jack of all trades\" that can hold several different types of data. It can be a number type, holding a number value. It can be a string type, holding text data. It can be a treenode type, holding a reference to a node in FlexSim's tree. It can be an Array type, holding an array of Variants. It can be a Map type, holding a set of keys and their associated values. And finally, it can be a null variant meaning it is none of the other types. Method/Property Forwarding Since the Variant is just a flexible container for other data types, its methods and properties are just forwarders to the various methods and properties of the types that the Variant holds. For example, if you have a Variant holding a treenode , you can use all of the methods and properties on a treenode directly on the Variant without having to cast to a treenode with the as() keyword. Variant node = param(1); node.name = \"Object1\"; node.value = 5; The only property that is exclusive to the Variant is type , which tells you what type of data is held by a Variant. All other properties and methods simply forward to the associated method or property of the held class. If the Variant does not hold the associated type, then calling the type's method will result in an exception. For example, if a Variant has a number, and you call the find () method on it, FlexScript will throw an exception. Casting Variant will cast to any of its target types without throwing an exception. If the Variant does not hold the target type, it will just give a null-or-similar result. This means a NULL treenode, empty string, empty Array, or 0.0 number. Variant num = 1; string asString = num; // empty string Variant str = \"Hello\"; double asNum = str; // 0.0 To determine the type of data that is held by a Variant, use the type property, or use the is() keyword. Variants as Objects If a variant holds a treenode with Object data, it can access Object properties and methods. However, the type property is simply a treenode type. In order to test if a Variant holds an Object node, you can use the is() keyword: Variant obj = param(1); if (obj.is(Object)) { obj.location = Vec3(1, 2, 3); } Variants as Arrays The Variant implements special logic associated with arrays in that you can treat a Variant like an Array even if it does not hold array data. If a Variant holds, for example, a string , you can treat the Variant as if it were a 1-length Array with a string as its first element. Variant val = \"Hello\"; int len = val.length; // len = 1 return val[len]; // returns \"Hello\"; Also, if you cast a Variant into a non-array type, and the Variant is in fact an Array, the cast operation will return the first element of the array. Thus you can even treat an Array Variant as a non-array type. Variant myArray = [\"Hello\", \"World\"]; string myString = myArray; return myString; // returns \"Hello\" These capabilities are especially useful in Process Flow, where you are often dealing with label values that may or may not contain array data, but you want to interface with those data in a consistent manner. Variants as Maps To use a Variant as a Map, you can use the dynamic properties of the Variant: // adds the key \"Key1\" with the value 3 to the map mapVariant.Key1 = 3 No other methods or properties of the Map are accessible from the Variant. To use them, you'll need to cast the Variant as a Map: Map map = mapVariant; // now you can access map methods and properties Array keys = map.keys; Null Values To check if a Variant is null you can compare the value with the special keyword nullvar or compare its type with the VAR_TYPE_NULL macro. Variant val; val == nullvar //true val.type == VAR_TYPE_NULL // true Where this gets more complicated is when dealing with treenode type Variants returned by other properies. See the discussion of treenode null values. Other data types do not have null types but have an empty type that corresponds to that type: string emptyString = \"\"; int emptyInt = 0; double emptyDouble = 0.0; Array emptyArray = []; Awaitable A Variant is awaitable, meaning it can be the predicate of an await statement. This will only cause suspension of the coroutine if the Variant is a reference to a Coroutine node that has been suspended. You can get a reference to a coroutine node by calling treenode . coevaluate () on a node that itself contains an await statement. Awaiting any other type of Variant value will do nothing. Properties animations Returns the animations property of an Object Variant. attrs Returns the attrs property of an Object Variant. centerObjects Returns the centerObjects property of an Object Variant. color Returns the color property of an Object Variant. dataType Gets/sets the dataType property on a treenode Variant. first Gets the first subnode of a treenode Variant. flags Returns the flags property of an Object Variant. inObjects Returns the inObjects property of an Object Variant. input Returns the input property of an Object Variant. labels Accesses the labels of a treenode Variant, or the string keys of a Map variant. last Gets the last subnode of a treenode Variant. length Gets/sets the Array length of a Variant. location Returns the location property of an Object Variant. name Gets/sets the name of a treenode Variant. next Gets the next node of a treenode Variant. outObjects Returns the outObjects property of an Object Variant. output Returns the output property of an Object Variant. prev Gets the next node of a treenode Variant. rank Gets/sets the rank of a treenode Variant. resetPosition Returns the resetPosition property of an Object Variant. rotation Returns the rotation property of an Object Variant. size Returns the size property of an Object Variant. stats Returns the stats property of an Object Variant. subnodes Accesses the subnodes of a treenode Variant. type Gets a Variant's type, one of VAR_TYPE_NUMBER, VAR_TYPE_STRING, VAR_TYPE_NODE, or VAR_TYPE_ARRAY up Gets/sets the parent of a treenode Variant. value Gets/sets the data value of a treenode Variant. Methods append Appends another Variant to this Variant. byteToCharIndex Returns the index of a given byte in a string Variant. charAt Returns the character at a given byte index in a string Variant. charToByteIndex Returns the byte index associated with a specific character index in a string Variant. clone Clones a Variant. concat Concatenates two Variants into an Array. copy Creates a new copy of a treenode Variant. destroy Destroys a treenode Variant. endsWith Queries whether a string Variant ends with a defined string. evaluate Evaluates a treenode Variant fill Fills an Array Variant with a defined value. find Finds a node in a treenode Variant's sub-tree by path. getLocation Gets an Object Variant's location. getPath Gets the path of a treenode Variant. getVariable Gets the value of an Object Variant's variable. includes Queries whether a string Variant includes a string. indexOf Gets the index of an element in an Array Variant. join Joins an Array Variant into a string. match Matches a reqular expression on a string Variant. message Send a message to the Object Variant. padEnd Pads the end of a string Variant with the padString to the given length. padStart Pads the start of a string Variant with the padString to the given length. pop Pops an element from an Array Variant. push Pushes a value onto an Array Variant. repeat Repeats a string Variant a number of times. replace Replaces text in a string Variant resume Return the Object Variant to its state prior to stop(). reverse Reverses an Array Variant search Searches a string Variant for an internal string or pattern. setLocation setRotation Sets the Object Variant's rotation. setSize Sets the Object Variant's size. setState Sets the Object Variant's state. setVariable Sets the value of an Object Variant's variable. shift Shifts (pops) an element from the front of an Array Variant. slice Returns a new Array made up of a subsection of an Array Variant. sort Sorts an Array Variant splice Removes and/or inserts elements into an Array Variant. split Splits a string Variant into an Array. startsWith Queries if a string Variant starts with a defined string. stop Stops the Object Variant, sets its state, and waits for resume(). substr Extracts a section of a string Variant and returns a new string. toLowerCase Creates a lower case string from a string Variant. toNum Interprets a string Variant's content as a floating point number. toUpperCase Creates an upper case string from a string Variant. trim Trims white space off of the ends of a string Variant. unshift Unshifts (pushes) a value onto the front of an Array Variant. Operators - Subtracts two numbers. -- Decrements a number Variant. ! Tests if a Variant is either a null Variant, a NULL treenode, or a 0.0 number. != Tests if a Variant is not equal to another value. % Returns the modulus of two numbers. * Multiplies two numbers. / Divides two numbers. [] Accesses an element of an Array Variant. + Adds two numbers. ++ Increments a number Variant += Increments a number Variant by a defined value, or appends a string to the current string Variant. < Tests if a Variant is less than a number. <= Tests if a Variant is less than or equal to a number. -= Decrements a number Variant by a defined value. == Tests if two values are equal to each other. > Tests if a Variant is greater than a number. >= Tests if a Variant is greater than or equal to a number. Details Do no remove, this fixes the anchor on doc.flexsim.com Variant .animations readonly animations Description Returns the animations property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .attrs readonly attrs Description Returns the attrs property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .centerObjects readonly centerObjects Description Returns the centerObjects property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .color readonly Color color Description Returns the color property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .dataType int dataType Description Gets/sets the dataType property on a treenode Variant. An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .first treenode first Description Gets the first subnode of a treenode Variant. Forwards to treenode . first . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .flags readonly flags Description Returns the flags property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .inObjects readonly inObjects Description Returns the inObjects property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .input readonly input Description Returns the input property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .labels readonly labels Description Accesses the labels of a treenode Variant, or the string keys of a Map variant. Forwards to treenode . labels , or to the Map . stringKeys . An exception is thrown if the Variant is not a treenode or Map type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .last treenode last Description Gets the last subnode of a treenode Variant. Forwards to treenode . last . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .length int length Description Gets/sets the Array length of a Variant. If the Variant is already an Array type, this will forward to Array . length . If the Variant is a null Variant, length will return 0. If it is a number, string , or treenode type, length will return 1. Variant myVar; // initialized as null Variant myVar.length; // returns 0 myVar = 5; // set to number type myVar.length; // returns 1 If length is set, the Variant will convert itself into an Array, and forward to Array . length Variant myArray = \"Hello\"; myArray.length = 2; // converts to Array and sets Array length to 2. Do no remove, this fixes the anchor on doc.flexsim.com Variant .location readonly Vec3 location Description Returns the location property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .name string name Description Gets/sets the name of a treenode Variant. Forwards to treenode . name . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .next readonly treenode next Description Gets the next node of a treenode Variant. Forwards to treenode . next . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .outObjects readonly outObjects Description Returns the outObjects property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .output readonly output Description Returns the output property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .prev readonly treenode prev Description Gets the next node of a treenode Variant. Forwards to treenode . prev . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .rank int rank Description Gets/sets the rank of a treenode Variant. Forwards to treenode . rank . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .resetPosition readonly resetPosition Description Returns the resetPosition property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .rotation readonly Vec3 rotation Description Returns the rotation property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .size readonly Vec3 size Description Returns the size property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .stats readonly stats Description Returns the stats property of an Object Variant. This property throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .subnodes readonly subnodes Description Accesses the subnodes of a treenode Variant. Forwards to treenode . subnodes . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .type readonly int type Description Gets a Variant's type, one of VAR_TYPE_NUMBER, VAR_TYPE_STRING, VAR_TYPE_NODE, or VAR_TYPE_ARRAY Do no remove, this fixes the anchor on doc.flexsim.com Variant .up treenode up Description Gets/sets the parent of a treenode Variant. Forwards to treenode . up . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .value Variant value Description Gets/sets the data value of a treenode Variant. Forwards to treenode . value . An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .append() Variant append( Variant val ) Parameters val The value to append to this Variant. Returns Variant The modified Variant Description Appends another Variant to this Variant. If this Variant is already an Array, this forwards to Array . append (). If the Variant is a null Variant, it will become val. If it is a non-array type, it will convert itself into an Array, and forward to Array . append (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .byteToCharIndex() int byteToCharIndex( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns int The 1-based character index of the character. Description Returns the index of a given byte in a string Variant. Forwards to string . byteToCharIndex . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .charAt() string charAt( int byteIndex ) Parameters byteIndex The 1-based byte index of the target character. Returns string The target character, as a string. Description Returns the character at a given byte index in a string Variant. Forwards to string . charAt . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .charToByteIndex() int charToByteIndex( int charIndex ) Parameters charIndex The 1-based character index of the target character. Returns int The 1-based byte index of the character. Description Returns the byte index associated with a specific character index in a string Variant. Forwards to string . charToByteIndex . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .clone() Variant clone( ) Returns Variant A clone of the Variant. Description Clones a Variant. If the Variant is an Array type, this forwards to Array . clone (). Otherwise it just returns a copy of its value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .concat() Array concat( Array other ) Parameters other The Array to concatenate onto the end of this Variant. Returns Array The resulting Array. Description Concatenates two Variants into an Array. Forwards to Array . concat (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .copy() treenode copy( treenode destination = 0 , int replace = 0 ) Description Creates a new copy of a treenode Variant. Forwards to treenode . copy (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .destroy() destroy( ) Description Destroys a treenode Variant. Forwards to treenode . destroy (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .endsWith() int endsWith( string str ) Description Queries whether a string Variant ends with a defined string. Forwards to string . endsWith (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .evaluate() Variant evaluate( ) Variant evaluate( Variant p1 ... p20 ) Parameters p1-p20 The parameters to pass to the evaluation. Description Evaluates a treenode Variant Forwards to treenode . evaluate (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .fill() Variant fill( Variant value ) Description Fills an Array Variant with a defined value. Forwards to Array . fill (). If the Variant is not already an Array, it simply sets its value to the passed value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .find() treenode find( string path ) Description Finds a node in a treenode Variant's sub-tree by path. Forwards to treenode . find (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Vec3 A vector holding the object's location Description Gets an Object Variant's location. Forwards to Object . getLocation . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .getPath() string getPath( treenode relativeTo = 0 , int byName = 1 ) Description Gets the path of a treenode Variant. Forwards to treenode . getPath (). An exception is thrown if the Variant is not a treenode type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .getVariable() Variant getVariable( string variableName ) Parameters variableName The name of the variable Returns Variant The value of the specified variable. Description Gets the value of an Object Variant's variable. Forwards to Object . getVariable . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .includes() int includes( string str ) Description Queries whether a string Variant includes a string. Forwards to string . includes (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .indexOf() int indexOf( Variant ) Description Gets the index of an element in an Array Variant. Forwards to Array . indexOf (). If the Variant is not an Array, it is treated as an array of length 1. Do no remove, this fixes the anchor on doc.flexsim.com Variant .join() string join( string separator = 0 ) Description Joins an Array Variant into a string. Forwards to Array . join (). If the Variant is not already an Array, it will create a new Array from itself, and call join on that Array. Do no remove, this fixes the anchor on doc.flexsim.com Variant .match() Description Matches a reqular expression on a string Variant. Forwards to string . match (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .message() Variant message( double delayTime = 0 , treenode fromObj = 0 , Variant p1 = nullvar , Variant p2 = nullvar , Variant p3 = nullvar ) Parameters delayTime Optional. Specifies the amount of time to delay before firing the message. If -1, the message will be sent synchronously. If 0 or greater, an event will be created in the defined delay time, and the message will be fired after that delay time. fromObj Optional. The object that is sending the message. This can be accessed from the message trigger. p1 Optional. Defines the first parameter of the message. This can be accessed from the message trigger as msgparam1. p2 Optional. Defines the second parameter of the message. This can be accessed from the message trigger as msgparam2. p3 Optional. Defines the third parameter of the message. This can be accessed from the message trigger as msgparam3. Returns Variant If the message is sent synchronously (delay = -1), it will return whatever is returned by the object's message trigger. If the message is sent asynchronously (delay >= 0), the call will return a reference to the event node that was created in the event list. Description Send a message to the Object Variant. Forwards to Object . message . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .padEnd() string padEnd( int targetLength , string padString ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the end of a string Variant with the padString to the given length. Forwards to string . padEnd . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .padStart() string padStart( int targetLength , string padString ) Parameters targetLength The desired length of the padded string. padString The string used to pad the current string. Returns string The string padded to the specified length. Description Pads the start of a string Variant with the padString to the given length. Forwards to string . padStart . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .pop() Variant pop( ) Description Pops an element from an Array Variant. Forwards to Array . pop (). If the Variant is not an Array, it will convert itself into a null Variant, and return its original value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .push() Variant push( Variant value ) Returns Variant The modified Variant. Description Pushes a value onto an Array Variant. Forwards to Array . push (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . push (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .repeat() string repeat( int numRepeats ) Description Repeats a string Variant a number of times. Forwards to string . repeat (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .replace() string replace( string findStr , string replaceWith ) Parameters findStr replaceWith findPattern Description Replaces text in a string Variant Forwards to string . replace (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .resume() resume( int id = 0 , int stateProfile = 0 ) Parameters id Optional. For matching stop requests with resume requests. stateProfile Optional. The state profile on which to record the state. Description Return the Object Variant to its state prior to stop(). Forwards to Object . resume . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .reverse() Variant reverse( ) Description Reverses an Array Variant Forwards to Array . reverse (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . reverse (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .search() int search( string str ) Parameters str The string or pattern to search for. Returns int If found, the 1-based byte index of the found string. Otherwise -1. Description Searches a string Variant for an internal string or pattern. Forwards to string . search . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setLocation() Object setLocation( double x , double y , double z ) Object setLocation( double x , double y , double z , double xFactor , double yFactor , double zFactor ) Object setLocation( Vec3 loc , Vec3 factors ) Parameters x The desired x position. y The desired y position. z The desired z position. xFactor The x value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). yFactor The y value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). zFactor The z value of the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). loc A vector holding the desired position. factors A vector representing the point on the object where the location will be measured from. Measured as a percent of the object's size (0-1). Returns Object The translated object. Description Forwards to Object . setLocation . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setRotation() Object setRotation( double x , double y , double z ) Object setRotation( Vec3 rotation ) Parameters x The desired rotation about the x axis. y The desired rotation about the y axis. z The desired rotation about the z axis. rotation A vector of the desired rotation values. Returns Object The rotated object. Description Sets the Object Variant's rotation. Forwards to Object . setRotation . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setSize() Object setSize( double x , double y , double z ) Parameters x The desired x size. y The desired y size. z The desired z size. Returns Object The sized object. Description Sets the Object Variant's size. Forwards to Object . setSize . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setState() setState( int state , int profile ) Parameters state The desired state. profile The desired state profile. Description Sets the Object Variant's state. Forwards to Object . setState . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .setVariable() setVariable( string variableName , Variant value ) Parameters variableName The name of the variable. value The desired variable value. Description Sets the value of an Object Variant's variable. Forwards to Object . setVariable . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .shift() Variant shift( ) Description Shifts (pops) an element from the front of an Array Variant. Forwards to Array . shift (). If the Variant is not an Array, it will convert itself into a null Variant, and return its original value. Do no remove, this fixes the anchor on doc.flexsim.com Variant .slice() Array slice( int fromIndex , int toIndex ) Description Returns a new Array made up of a subsection of an Array Variant. Forwards to Array . slice (). If the Variant is not an Array, it will create an Array from itself and forward to Array . slice (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .sort() Variant sort( ) Description Sorts an Array Variant Forwards to Array . sort (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . sort (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .splice() Variant splice( int fromIndex , int removeCount ) Variant splice( int fromIndex , int removeCount , Array insertArray ) Returns Variant The modified Variant Description Removes and/or inserts elements into an Array Variant. Forwards to Array . splice (). If the Variant is not an Array, it will make itself into an Array and forward to Array . splice (). Do no remove, this fixes the anchor on doc.flexsim.com Variant .split() Array split( string delimiter , int limit = -1 ) Description Splits a string Variant into an Array. Forwards to string . split (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .startsWith() int startsWith( string str ) Description Queries if a string Variant starts with a defined string. Forwards to string . startsWith (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .stop() stop( int stopState , int id = 0 , double priority = 0 , int stateProfile = 0 ) Parameters stopState The state the object will go into. id Optional. For matching stop requests with resume requests. priority Optional. For breaking ties between stop() calls. stateProfile Optional. The state profile on which to record the state. Description Stops the Object Variant, sets its state, and waits for resume(). Forwards to Object . stop . This method throws an exception if the Variant is not a treenode with Object data. Do no remove, this fixes the anchor on doc.flexsim.com Variant .substr() string substr( int startIndex , int length ) Parameters startIndex The 1-based byte index of the first character to extract. If this index is in the middle of a multi-byte character, it will extract the full character. If it is a negative number, the start position is string.length + beginIndex, or in other words it is an offset from the end of the string. length The length of the target string, in bytes. Returns string The extracted string. Description Extracts a section of a string Variant and returns a new string. Forwards to string . substr . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .toLowerCase() string toLowerCase( ) Description Creates a lower case string from a string Variant. Forwards to string . toLowerCase (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .toNum() double toNum( ) Returns double The interpreted content of the string as a double. Description Interprets a string Variant's content as a floating point number. Forwards to string . toNum . An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .toUpperCase() string toUpperCase( ) Description Creates an upper case string from a string Variant. Forwards to string . toUpperCase (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .trim() string trim( ) Description Trims white space off of the ends of a string Variant. Forwards to string . trim (). An exception is thrown if the Variant is not a string type. Do no remove, this fixes the anchor on doc.flexsim.com Variant .unshift() Variant unshift( Variant value ) Returns Variant The modified Variant. Description Unshifts (pushes) a value onto the front of an Array Variant. Forwards to Array . unshift (). If the Variant is a non-array value, it will convert itself into an Array, and forward to Array . unshift (). If it is a null Variant, it will become the passed value (not an Array). Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator - double operator -( double value ) double operator -( Variant value ) Parameters value The value to subtract from the Variant Returns double The result of the subtraction. Description Subtracts two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue - 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator -- double operator --( ) Description Decrements a number Variant. The following example uses treenode . labelProperties to decrement an object's label value. current.labelValue--; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator ! int operator !( ) Returns int True if the Variant is a null Variant, a NULL treenode, or the number 0.0. False otherwise. Description Tests if a Variant is either a null Variant, a NULL treenode, or a 0.0 number. The following example uses treenode . labelProperties to compare an object's label value. if (!current.labelValue) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator != int operator !=( int value ) int operator !=( double value ) int operator !=( string value ) int operator !=( treenode value ) int operator !=( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is not equal to value, false otherwise. Description Tests if a Variant is not equal to another value. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue != 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator % int operator %( int value ) int operator %( Variant value ) Parameters value The value used as the modulus. Returns int The modulus of the Variant and the other value. Description Returns the modulus of two numbers. The modulus operator returns the remainder of a division. Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator * double operator *( double value ) double operator *( Variant value ) Parameters value The value to multiply by. Returns double The multiplication product of the two values. Description Multiplies two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue * 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator / double operator /( double value ) double operator /( Variant value ) Parameters value The value to divide the Variant by. Returns double The result of the division. Description Divides two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue / 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator [] Variant operator []( int index ) Parameters index The index of the array element. Returns Variant The array element at the specified index. Description Accesses an element of an Array Variant. Forwards to the Array [] operator. The Variant implements special logic associated with arrays in that you can treat a Variant like an Array even if it does not hold array data. If a Variant holds, for example, a string , you can treat the Variant as if it were a 1-length Array with a string as its first element. Variant val = \"Hello\"; int len = val.length; // len = 1 return val[len]; // returns \"Hello\"; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator + double operator +( double value ) Variant operator +( Variant value ) Parameters value The value to add to the Variant. Returns double The addition result. Description Adds two numbers. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue + 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator ++ double operator ++( ) Description Increments a number Variant The following example uses treenode . labelProperties to increment an object's label value. current.labelValue++; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator += Variant operator +=( double value ) Variant operator +=( string value ) Parameters value The value to add to the Variant. Description Increments a number Variant by a defined value, or appends a string to the current string Variant. If both operands are strings, then the Variant will append value to itself. If both are numbers, the Variant will increment its value by value. The following example uses treenode . labelProperties to access an object's label value. double myVal = current.labelValue - 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator < int operator <( int value ) int operator <( double value ) int operator <( Variant value ) Parameters value Returns int Description Tests if a Variant is less than a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue < 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator <= int operator <=( int value ) int operator <=( double value ) int operator <=( Variant value ) Parameters value Returns int Description Tests if a Variant is less than or equal to a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue <= 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator -= Variant operator -=( double value ) Parameters value The value to decrement the Variant by. Description Decrements a number Variant by a defined value. The following example uses treenode . labelProperties to decrement an object's label value. current.labelValue -= 2; Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator == int operator ==( int value ) int operator ==( double value ) int operator ==( string value ) int operator ==( treenode value ) int operator ==( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is equal to value, false otherwise. Description Tests if two values are equal to each other. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue == 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator > int operator >( int value ) int operator >( double value ) int operator >( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is greater than value, false otherwise. Description Tests if a Variant is greater than a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue > 5) { ... } Do no remove, this fixes the anchor on doc.flexsim.com Variant .operator >= int operator >=( int value ) int operator >=( double value ) int operator >=( Variant value ) Parameters value The value to compare against. Returns int True if the Variant is greater than or equal to value, false otherwise. Description Tests if a Variant is greater than or equal to a number. The following example uses treenode . labelProperties to compare an object's label value. if (current.labelValue >= 5) { ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Array.html",
        "title": "FlexScript Class - Array",
        "content": "Description A dynamic array of Variant s. Initialize an Array of 5 elements: Array myArray = Array(5); Arrays in FlexSim are 1-based, meaning the first element in the array is accessed via index 1. double myVal = myArray[1]; // 1st element myArray[2] = 5; // 2nd element myArray[4] = 3.2; // 4th element Since the Array is an array of Variant s, you can set each element to anything that a Variant can hold, namely a number, string , treenode , or Array. myArray[2] = \"Hello World\"; myArray[3] = 5.7; myArray[4] = Model.find(\"Source1\"); myArray[5] = Array(10); // now you can access myArray[5][2] You can also fill an array with an initializer list. Array myArray = [4.5, \"Hello World\", model(), [\"Another\", \"Array\"]]; By default, Arrays are passed around as shared references. This means if you set one Array variable to another Array variable, you are setting the variable to a reference to the first Array, not a copy of the first Array. Thus, if you change either variable's referenced Array data, and it will change it for both variables. Array array1 = [\"Hello\", \"World\"]; Array array2 = array1; array2[1] = \"Goodbye\"; // both array1 and array2 are [\"Goodbye\", \"World\"] To do a deep copy of an Array, use the clone () method. Array array1 = [\"Hello\", \"World\"]; Array array2 = array1.clone(); array2[1] = \"Goodbye\"; // array2 is [\"Goodbye\", \"World\"], array1 is unchanged. Properties length The number of elements in the array. Methods append Appends another array to the end of the array. clone Creates a copy of the array. concat Creates a new array by appending another array to the end of the array. fill Fills the array with a value. indexOf Searches the array for an element and returns its index. join Makes a string by concatenating each element. pop Removes and returns the last element of an array. push Adds a new element to the end of the array. reverse Reverses the order of the elements in the array. shift Removes and returns the first element of an array. slice Copies part of the array. sort Sorts the elements in the array. splice Adds and/or removes elements from an array. unshift Adds a new element to the start of the array. Constructor Array Creates a new array of the given size. Operators != Compares if the array is not equal to another array. [] Gets or sets an element. == Compares the array to another array. Details Do no remove, this fixes the anchor on doc.flexsim.com Array .length int length Description The number of elements in the array. int numElements = myArray.length; Can also be used to set the size of the array. Array myArray = [1,2,3,4,5]; myArray.length = 3; // [1,2,3] Do no remove, this fixes the anchor on doc.flexsim.com Array .append() Array append( Array otherArray ) Parameters otherArray The array to append to this array. Returns Array The modified array. Description Appends another array to the end of the array. Array myArray = [1,2,3,4,5]; myArray.append([7,8,9]); //[1,2,3,4,5,7,8,9] Do no remove, this fixes the anchor on doc.flexsim.com Array .clone() Array clone( ) Returns Array A copy of the array. Description Creates a copy of the array. Array myArray = [1,2,3,4,5]; Array copy = myArray.clone(); myArray.push(6); // myArray - [1,2,3,4,5,6] // copy - [1,2,3,4,5] Do no remove, this fixes the anchor on doc.flexsim.com Array .concat() Array concat( Array otherArray ) Parameters otherArray The array to concatenate with this array. Returns Array A new array made by concatenating the arrays. Description Creates a new array by appending another array to the end of the array. Array concatArray = myArray.concat([7,8,9]); // myArray - [1,2,3,4,5] // concatArray - [1,2,3,4,5,7,8,9] Similar to the append method except that the append method modifies the original array, whereas concat makes a new array. Do no remove, this fixes the anchor on doc.flexsim.com Array .fill() Array fill( Variant val ) Parameters val The value each element will now hold. Returns Array The modified array. Description Fills the array with a value. This code sets each element to 0. Array myArray = [1,2,3,4,5]; myArray.fill(0); // [0,0,0,0,0] Do no remove, this fixes the anchor on doc.flexsim.com Array .indexOf() int indexOf( Variant val ) Parameters val The element to look for. Returns int The index of the first occurence of the element in the array. Description Searches the array for an element and returns its index. Returns -1 if the element is not found in the array. Array myArray = [\"Apple\",\"Orange\",\"Mango\",\"Pear\"]; int index = myArray.indexOf(\"Mango\"); // 3 int index = myArray.indexOf(2); // -1 Do no remove, this fixes the anchor on doc.flexsim.com Array .join() string join( string separator = 0 ) Parameters separator A string value that will be placed between elements when concatenating. Returns string The string of concatenated elements separated by the separator. Description Makes a string by concatenating each element. Array myArray = [1,2,3,4,5]; string joined = myArray.join(\"-\"); // \"1-2-3-4-5\" Do no remove, this fixes the anchor on doc.flexsim.com Array .pop() Variant pop( ) Returns Variant The last element of the array. Description Removes and returns the last element of an array. Array myArray = [1,2,3,4,5]; Variant lastVal = myArray.pop(); // 5 //myArray - [1,2,3,4] Do no remove, this fixes the anchor on doc.flexsim.com Array .push() Array push( Variant val ) Parameters val The new array element. Returns Array The modified array. Description Adds a new element to the end of the array. Array myArray = [1,2,3,4,5]; myArray.push(6); // [1,2,3,4,5,6] Do no remove, this fixes the anchor on doc.flexsim.com Array .reverse() Array reverse( ) Returns Array The modified array. Description Reverses the order of the elements in the array. Array myArray = [1,2,3,4,5]; myArray.reverse(); // [5,4,3,2,1] Do no remove, this fixes the anchor on doc.flexsim.com Array .shift() Variant shift( ) Returns Variant The first element of the array. Description Removes and returns the first element of an array. Array myArray = [1,2,3,4,5]; Variant firstVal = myArray.shift(); // 1 //myArray - [2,3,4,5] Do no remove, this fixes the anchor on doc.flexsim.com Array .slice() Array slice( int fromIndex , int toIndex ) Parameters fromIndex The index of the first element in the selection. toIndex The index of the element after the last element in the selection. Returns Array A copy of part of the array. Description Copies part of the array. Array myArray = [1,2,3,4,5]; Array copy = myArray.slice(2, 5); // [2,3,4] //myArray - [1,2,3,4,5] Selects the elements starting at fromIndex, and ends at, but does not include, toIndex. Do no remove, this fixes the anchor on doc.flexsim.com Array .sort() Array sort( ) Returns Array The modified array. Description Sorts the elements in the array. Array myArray = [1,3,5,2,4]; myArray.sort(); // [1,2,3,4,5] Array myArray2 = [\"a\",\"c\",\"e\",\"b\",\"d\"]; myArray2.sort(); // [\"a\",\"b\",\"c\",\"d\",\"e\"] Do no remove, this fixes the anchor on doc.flexsim.com Array .splice() Array splice( int fromIndex , int count ) Array splice( int fromIndex , int count , Array insert ) Parameters fromIndex The index where elements will be removed and then added. count The number of elements to remove. insert An array of elements to be added at the fromIndex. Returns Array The modified array. Description Adds and/or removes elements from an array. Array cars = [\"Volvo\", \"BMW\", \"Audi\", \"Ford\"]; cars.splice(2, 2); // [\"Volvo\", \"Ford\"] cars.splice(3, 1, [\"Lotus\", \"Kia\"]); // [\"Volvo\", \"BMW\", \"Lotus\", \"Kia\", \"Ford\"] Do no remove, this fixes the anchor on doc.flexsim.com Array .unshift() Array unshift( Variant val ) Parameters val The new array element. Returns Array The modified array. Description Adds a new element to the start of the array. Array myArray = [1,2,3,4,5]; myArray.unshift(6); // [6,1,2,3,4,5] Do no remove, this fixes the anchor on doc.flexsim.com Array Constructor Array( int size ) Parameters size The size of the new array. Description Creates a new array of the given size. Array myArray = Array(5); // [,,,,] Do no remove, this fixes the anchor on doc.flexsim.com Array .operator != int operator !=( Array other ) Parameters other The other array to compare this array to. Returns int False (0) if all elements of both arrays are the same. True (1) otherwise. Description Compares if the array is not equal to another array. Array myArray = [1,2,3,4,5]; Array otherArray1 = [1,2,3,4,5]; Array otherArray2 = [1,2,4,5]; myArray != otherArray1; // false myArray != otherArray2; // true Do no remove, this fixes the anchor on doc.flexsim.com Array .operator [] Variant operator []( int index ) Parameters index The index of an element Returns Variant An element of the array. Description Gets or sets an element. Array myArray = [1,2,3,4,5]; myArray[2] = 6; // [1,6,3,4,5] Variant value = myArray[3]; // 3 Do no remove, this fixes the anchor on doc.flexsim.com Array .operator == int operator ==( Array other ) Parameters other The other array to compare this array to. Returns int True (1) if all elements of both arrays are the same. False (0) otherwise. Description Compares the array to another array. Array myArray = [1,2,3,4,5]; Array otherArray1 = [1,2,3,4,5]; Array otherArray2 = [1,2,4,5]; myArray == otherArray1; // true myArray == otherArray2; // false"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Table.html",
        "title": "FlexScript Class - Table",
        "content": "Description A class that represents a table structure. A Table contains methods and properties associated with manipulating table data in FlexSim. A Table may be one of the following: A Tree Table : This is a table whose data is defined in the tree structure. This consists of a root node with one or more subnodes, each representing a row in the table. Subnodes of each row represent cells in the table. A Bundle Table : This is a table whose data is defined by a bundle node. This consists of a node in the tree that contains bundle data. A Query Result Table : This is a read-only in-memory table that contains the result of a call to Table . query (). An Array Table : This is an in-memory table that references a two-dimensional array. Bundle and tree tables can be stored anywhere in the model tree. Often they are stored as global tables, or on object labels. Properties numCols The number of columns in the table. numRows The number of rows in the table. Methods addCol Adds a column to the table. addIndex Adds an index to the specified column. addRow Adds a row to the table. cell Returns a specific table cell. clear Sets all cells to empty values. clone Creates an array copy of the table. cloneTo Copies all values from this table to the target table, returning the target table. deleteCol Deletes a table column. deleteRow Deletes a table row. executeCell Executes the text on the cell as FlexScript. getColHeader Gets a table column header. getColNum Gets the index of a table column header. getRowByKey Searches a column for the specified key value. getRowHeader Gets a table row header. getRowNum Gets the index of a table row header. getValueByKey Searches a column for the specified key value, and returns one or more values from the matching row. hasIndex Returns the index type of the specified column if it has an index, otherwise 0. moveCol Moves a column to a new index. moveRow Moves a row to a new index. removeIndex Removes an index from the specified column setColHeader Renames a column header. setRowHeader Renames a row header. setSize Resizes the table. sort Sorts table columns. swapCols Swaps indexes of the two columns. swapRows Swaps indexes of the two rows. Constructor Table Creates a reference to a table. Static Methods query Executes an SQL query, returning the result as a Table. Operators [] Gets or sets the value of a table cell. = Assigns a reference to a treenode to the Table object. Details Do no remove, this fixes the anchor on doc.flexsim.com Table .numCols readonly int numCols Description The number of columns in the table. int columns = table.numCols; For bundles it is the number of fields. Do no remove, this fixes the anchor on doc.flexsim.com Table .numRows readonly int numRows Description The number of rows in the table. int rows = table.numRows; For bundles it is the number of entries. Do no remove, this fixes the anchor on doc.flexsim.com Table .addCol() Table addCol( int col = 0 , int datatype = 0 ) Parameters col The index at which to insert the column. datatype The datatype of the new column. Returns Table The table. Description Adds a column to the table. table.addCol(2); If no column index is specified the column will be added at the end. If no datatype is specified the new column will copy the datatype of the previous column. Do no remove, this fixes the anchor on doc.flexsim.com Table .addIndex() addIndex( Variant keyCol , int indexType = Table.IndexType.Unordered ) Parameters keyCol A column name or number indexType The type of index desired. Can be either Table.IndexType.Unordered or Table.IndexType.Ordered. Generally the default unordered value is sufficient. Table.IndexType.Ordered can be useful if you are querying the table with Table . query () with a WHERE filter that uses a >, <, >=, or <= comparison on the column. Description Adds an index to the specified column. An index can significantly improve the performance of the following operations: Using the Table . getRowByKey () method with the indexed column Using the Table . getValueByKey () method with the indexed column Finding a value from the indexed column in a query (e.g. WHERE IndexedCol = SomeValue An index can significantly slow performance to operations that change the table. If a table changes frequently during the model run, an index is not recommended. You can only add an index to a column in a Bundle table. Do no remove, this fixes the anchor on doc.flexsim.com Table .addRow() Table addRow( int row = 0 , int datatype = 0 ) Parameters row The index at which to insert the row. datatype The datatype of the new row. Returns Table The table. Description Adds a row to the table. table.addRow(2); If no row index is specified the row will be added at the end. If no datatype is specified the cells will copy the datatype of the cells in the previous row. Do no remove, this fixes the anchor on doc.flexsim.com Table .cell() treenode cell( Variant row , Variant col ) Parameters row The row index. col The column index. Returns treenode The cell's node in the tree. Description Returns a specific table cell. table.cell(2,\"Row 3\").value = 4; This will throw an exception for bundles. Do no remove, this fixes the anchor on doc.flexsim.com Table .clear() Table clear( int recursive = 0 ) Parameters recursive If set to 1, clear will be called on cells with bundle data, array data and on cells that have node tables. Returns Table The table. Description Sets all cells to empty values. table.clear(); table.clear(1); Number cells will be set to 0, string cells to an empty string, and pointer cells will be set to a null pointer. Do no remove, this fixes the anchor on doc.flexsim.com Table .clone() Array clone( ) Returns Array A copy of the table in an array. Description Creates an array copy of the table. Array myArray = Table(\"Parts\").clone(); Do no remove, this fixes the anchor on doc.flexsim.com Table .cloneTo() Table cloneTo( Table target ) Parameters target The target table. This must be a tree-bound table, such as a bundle or tree table. Returns Table The resulting table. This is the same table as the target. Description Copies all values from this table to the target table, returning the target table. Table.query(\"SELECT * FROM Customers ORDER BY Name\").cloneTo(Table(\"QueryDump\")); Do no remove, this fixes the anchor on doc.flexsim.com Table .deleteCol() Table deleteCol( int col ) Parameters col The index of the column to delete. Returns Table The table. Description Deletes a table column. table.deleteCol(3); Will throw an exception if no column is specified or the column doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .deleteRow() Table deleteRow( int row ) Parameters row The index of the row to delete. Returns Table The table. Description Deletes a table row. table.deleteRow(3); Will throw an exception if no row is specified or the row doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .executeCell() Variant executeCell( Variant row , Variant col ) Parameters row The row index. col The column index. Returns Variant The return value of the executed function. Description Executes the text on the cell as FlexScript. Variant result = table.executeCell(2, \"Row 3\"); Do no remove, this fixes the anchor on doc.flexsim.com Table .getColHeader() string getColHeader( int colNum ) Parameters colNum The column index. Returns string The text in the column header. Description Gets a table column header. string header = table.getColHeader(2); Do no remove, this fixes the anchor on doc.flexsim.com Table .getColNum() int getColNum( string colHeader ) Parameters colHeader The column header. Returns int The index of the column header. Description Gets the index of a table column header. int col = table.getColNum(\"Orders\"); Returns 0 if the column header doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .getRowByKey() int getRowByKey( Variant key , Variant keyCol = nullvar ) Parameters key The value to use as the key keyCol The column to search for the key value. Returns int The row number containing the key value in the specified column. If no match was found, returns 0. Description Searches a column for the specified key value. If the keyCol is not specified, the first indexed column in the table will be searched. If there is no indexed column, the first column (column 1) will be searched. If the column to search has an index, then the index will be used to look up the correct row, rather than searching row by row. Do no remove, this fixes the anchor on doc.flexsim.com Table .getRowHeader() string getRowHeader( int rowNum ) Parameters rowNum The row index. Returns string The text in the row header. Description Gets a table row header. string header = table.getRowHeader(2); Do no remove, this fixes the anchor on doc.flexsim.com Table .getRowNum() int getRowNum( string rowHeader ) Parameters rowHeader The row header. Returns int The index of the row header. Description Gets the index of a table row header. int row = table.getRowNum(\"Type\"); Returns 0 if the row header doesn't exist. Do no remove, this fixes the anchor on doc.flexsim.com Table .getValueByKey() Variant getValueByKey( Variant key , Variant valueCol , Variant keyCol = nullvar ) Parameters key The value to use as the key valueCol A column (name or number) to retrieve data from. keyCol The column to search for the key value. Returns Variant The value in the valueCol in the matching row. Description Searches a column for the specified key value, and returns one or more values from the matching row. If the keyCol is not specified, the first indexed column in the table will be searched. If there is no indexed column, the first column (column 1) will be searched. If the column to search has an index, then the index will be used to look up the correct row, rather than searching row by row. Once the matching row is found, the value in valueCol on that row is retrieved. If valueCol is an array, the values from each specified column will be retrieved, and returned as an array. Do no remove, this fixes the anchor on doc.flexsim.com Table .hasIndex() int hasIndex( Variant keyCol ) Parameters keyCol A column name or number Returns int If the specified column has an index, returns either Table.IndexType.Ordered or Table.IndexType.Unordered. Description Returns the index type of the specified column if it has an index, otherwise 0. An index can be added using the Table . addIndex () method. Do no remove, this fixes the anchor on doc.flexsim.com Table .moveCol() Table moveCol( int col , int newCol ) Parameters col The index of the column to move. newCol The index where the column will be moved. Returns Table The table. Description Moves a column to a new index. table.moveCol(2, 5); Do no remove, this fixes the anchor on doc.flexsim.com Table .moveRow() Table moveRow( int row , int newRow ) Parameters row The index of the row to move. newRow The index where the row will be moved. Returns Table The table. Description Moves a row to a new index. table.moveRow(2, 5); Do no remove, this fixes the anchor on doc.flexsim.com Table .removeIndex() removeIndex( Variant keyCol ) Parameters keyCol A column name or number. Description Removes an index from the specified column An index can be added using the Table . addIndex () method. If the specified column does not have an index, this method does nothing. Do no remove, this fixes the anchor on doc.flexsim.com Table .setColHeader() Table setColHeader( int colNum , string name ) Parameters colNum The column index. name The new column header name. Returns Table The table. Description Renames a column header. table.setColHeader(2, \"Orders\"); Do no remove, this fixes the anchor on doc.flexsim.com Table .setRowHeader() Table setRowHeader( int rowNum , string name ) Parameters rowNum The row index. name The new row header name. Returns Table The table. Description Renames a row header. table.setRowHeader(2, \"Order 2\"); Do no remove, this fixes the anchor on doc.flexsim.com Table .setSize() Table setSize( int rows , int cols , int datatype = 0 , int overwrite = 0 ) Parameters rows The new number of rows. cols The new number of columns. datatype The datatype of new cells. overwrite If old cells should have their values reset. Returns Table The table. Description Resizes the table. table.setSize(5, 3); Do no remove, this fixes the anchor on doc.flexsim.com Table .sort() Table sort( Variant columns , Variant sortDirections = 0 ) Parameters columns The column or columns to sort. sortDirections The directions each column should be sorted. 0 is Descending and 1 is Ascending. Returns Table The table. Description Sorts table columns. table.sort(1); table.sort([1, 2, 3], [1, 0, 1]); Do no remove, this fixes the anchor on doc.flexsim.com Table .swapCols() Table swapCols( int col , int col2 ) Parameters col The index of the first column. col2 The index of the ssecond column. Returns Table The table. Description Swaps indexes of the two columns. table.swapCols(2, 4); Do no remove, this fixes the anchor on doc.flexsim.com Table .swapRows() Table swapRows( int row , int row2 ) Parameters row The index of the first row. row2 The index of the second row. Returns Table The table. Description Swaps indexes of the two rows. table.swapRows(2, 4); Do no remove, this fixes the anchor on doc.flexsim.com Table Constructor Table( string name ) Table( treenode node ) Table( Array array ) Table( Variant value ) Parameters name The name of a global table. node A table-like treenode. The node should either have Bundle data, or have table-structured subnodes. value A global table name or table-like treenode. array A two-dimensional array. The first dimension spans the rows whereas the second dimension spans the columns. For example, you could get the result of a call to Storage.System . querySlots (), and construct a Table based on that result. Description Creates a reference to a table. If you pass in a string, FlexSim will search for a globally-defined table in the following order: Global Tables Statistics Collectors Calculated Tables State Tables Property Tables Table parts = Table(\"Parts\"); int partCount = Table(\"Parts\")[3][4]; Do no remove, this fixes the anchor on doc.flexsim.com Table .query() static Table query( string queryStr , lambda p1 ... p9 = 0 ) Parameters queryStr The sql query. p1-p9 Only used if you include $ syntax in the query. This defines additional, dynamically evaluated parameters associated with the query. The value is a \"lambda\", a type that simply signifies that the parameter is evaluated as-needed, not immediately when the method is called. You will usually either pass a reference to a table node here, defining the table to query, or you will use the $iter() command in a FlexScript expression to dynamically determine the value of a cell in a \"virtual table.\" If this parameter defines a table, it must be a tree-bound table or a direct reference to a node. In other words, it cannot be the result Table of another call to Table.query(), unless you clone that result to a tree-bound table with Table . cloneTo (). See Sql Query Examples for more information. Returns Table The resulting table. This is a read-only in-memory table (it is not stored on a node in the tree). Use Table . cloneTo () to copy the result to a tree-bound table. Description Executes an SQL query, returning the result as a Table. Table result = Table.query(\"SELECT * FROM Customers ORDER BY Name\"); See Sql Query Examples for more information. Do no remove, this fixes the anchor on doc.flexsim.com Table .operator [] Variant operator []( Variant index ) Parameters index The index or name of a row or column. Returns Variant The variant held by the table cell. If the cell is a FlexScript node this returns the result of executing the code. Description Gets or sets the value of a table cell. Variant value = table[2][\"Orders\"]; table[2][\"Orders\"] = 5; An exception will be thrown if the name of a row or column that does not exist is specified. To check that a row or columns with a certain name exists use Table . getColNum () or Table . getRowNum (). Do no remove, this fixes the anchor on doc.flexsim.com Table .operator = Table operator =( treenode node ) Parameters node The node holding a table. Returns Table The table. Description Assigns a reference to a treenode to the Table object. Table table = Table(\"Data\"); Table labelTable = current.labels[\"TableData\"];"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/FlexScriptClassReference.html",
        "title": "FlexScript Class Reference",
        "content": "The following table lists all object types that are available in FlexScript. Agent Provides access to data and methods related to Agents who are members of an Agent System. Agent.SocialForceState Provides access to data and methods related to an agent's social force state. Agent.System Provides access to data and methods related to a System of an Agents. AGV Provides access to data and methods related to AGV travel. AGV.AllocatableObject An object that can be allocated by an AGV. AGV.AllocationPoint A structure containing information about a planned AGV allocation. AGV.BodyOffset Enumerates possible AGV body offset values AGV.Connections An interface for accessing AGV control point connections. AGV.Request An enumeration of values to be returned by an AGV.AllocatableObject's OnRequest trigger. AGV.RequestState An enumeration of possible values for the AGV.AllocationPoint.requestState property. AGV.RoutingConstraint Enumerates possible routing constraint values used in AGV.AllocatableObject.routingConstraint AGV.Trailer Provides access to data and methods related a trailer attached to an AGV. AGV.TravelPathSection A structure representing a traversal of a specific section of path during an AGV's travel operation. AGV.TraversalPoint A structure containing information about a planned AGV 'traversal'. Animation A class that represents an object animation. Array A dynamic array of Variants. AStar Provides access to data related to the A* module. AStar.Allocation Provides access to data and methods associated with an A* grid cell allocation. AStar.Cell Provides access to data and methods associated with an A* grid cell. AStar.Direction An enumeration of integer values associated with four A* travel directions. AStar.Navigator Provides access to data and methods related to a model's A* navigator. AStar.Traveler Provides access to data and methods related to an A* traveler. Color A class containing rgba values for an object's color. Conveyor A class that provides properties and methods for monitoring and controlling a conveyor. Conveyor.DecisionPoint A class that provides properties for monitoring a conveyor decision point, photo eye, or station. Conveyor.Item A class that provides properties and methods for monitoring and controlling an item on a conveyor. Conveyor.MergeController Allows access to the lanes of a MergeController object Conveyor.Motor A class that provides properties and methods for controlling a conveyor motor. Conveyor.SlugBuilder Accesses data dealing with a conveyor's slug building state Coroutine An opaque class representing a paused coroutine. Database.Connection A class for connecting to and querying a database. Database.DataType A class that enumerates various database storage types. Database.PreparedStatement A class for execution and manipulation of a database SQL statement. Database.ResultSet A class for retrieving the result of a database SQL query. DateTime A class containing functions for getting and manipulating dates and times. Delay An opaque awaitable type, specifically used in coroutines, representing an abstract delay time. Dispatcher A class that represents an Object with a task sequence queue, and implements logic to receive and dispatch TaskSequences. double A number type that represents a wide, dynamic range of values by using a floating point. ElevatorBank A class that represents a bank of elevators. ElevatorBank.Elevator A class that represents an elevator member of an ElevatorBank. ElevatorBank.Request A class that represents a request for an ElevatorBank.Elevator. Empirical A class that represents an Empirical Distribution. Event An opaque awaitable type, specifically used in coroutines, representing an event owned by a specific object, that can be 'awaited', or listened to. EventLog A class that provides access to the event log. Group A class for grouping objects. Http.Method An enumeration of integer values representing Http Request Methods. Http.Request A class for creating a Http Request. Http.Response A class representing the Response to a Http Request. int A number type that holds a finite range of integers. Min Value = -2147483647 Max Value = 2147483647 JSON A class containing common JSON functions. lambda Allows an expression to be passed in as a parameter without immediatly being evaulated. List A class that represents a list. List.BackOrder A class that represents a list back order. List.Entry A class that represents a list entry. List.PullResult A class that represents the result of a call to List.pull(). List.PushResult A class that represents the result of a call to List.push(). Map An associative array of Variant keys and values. Mat4 Represents a matrix for performing space/vector transformations. Math A class containing common math functions. Model A class containing data and functions for the model. Navigator A class that represents a TaskExecuter's navigator. In other words, the object that manages travel tasks for the task executer. Object A class that represents objects in the model. PowerPoint A class for accessing PowerPoint. PowerPoint.Layout An enumeration of integer values associated with PowerPoint slide layouts. PowerPoint.Presentation A class for creating, opening, and editing PowerPoint presentations. PowerPoint.Shape A class for managing and editing PowerPoint shapes. PowerPoint.ShapeType An enumeration of integer values associated with PowerPoint shape types. PowerPoint.Slide A class for managing and editing PowerPoint slides. PowerPoint.SlideSizeType An enumeration of integer values associated with PowerPoint slide size types. RegExp Allows regular expressions to be used as function parameters. RegExResult A class that handles the results of a RegEx match StatisticsCollector A class that represents a Statistics Collector StatisticsCollector.CollectedData Provides access to data that may be used in Statistics Collector callbacks. Storage The storage namespace. Storage.Bay A class that represents a storage bay. Storage.Item A class that includes properties and functionality associated with the storage and assignment of a flow item to Storage.Slots. Storage.Item.State A class that enumerates the storage item states. Storage.Level A class that represents a storage level within a bay. Storage.Object A storage object, with functionality and data for storing items in a 2-dimensional grid of bays, levels, and slots Storage.QueryFlags Enumerates possible flags that can be passed as the flags parameter into Storage.System.findSlot(), Storage.System.querySlots(), Storage.System.findItem(), or Storage.System.queryItems(). Storage.Slot A slot that is part of a storage object's grid of storable slots. Storage.Slot.Item A class that represents a storage slot item. Storage.System A class that represents a storage system. string A class that represents a sequence of characters. Table A class that represents a table structure. Table.IndexType Enumerates types of indices on the table. TableValidation A class that represents a Table Validation. TableValidation.Context A class that represents a TableValidation Context. The context stores data that persists through the duration of a rule. TaskExecuter A class that represents a Dispatcher that can also execute TaskSequences. TaskSequence A class representing a sequence of tasks to be performed by a TaskExecuter. TaskSequence.Task A class representing an individual task in a TaskSequence. Token A class that represents a Process Flow token. Tools A class for creating and getting Tool nodes. TrackedVariable A class that represents a tracked variable. treenode A class that represents a reference to a node in FlexSim's tree. USD.Attribute A class that represents a USD Property. USD.Prim A class that represents a USD Prim. USD.Property A class that represents a USD Property. USD.Reference A class that represents an SdfReference from the OpenUSD API. USD.References A class that represents a UsdReferences object from the OpenUSD API. USD.Relationship A class that represents a USD Relationship. USD.Stage A class that represents a USD Stage. Variant A type that can hold either a number, a string, a treenode or an Array. Vec2 Represents positions, rotations, size, 2D vectors, and points. Contains functions for doing common vector operations. Vec3 Represents positions, rotations, size, 3D vectors, and points. Contains functions for doing common vector operations. Vec4 Represents a vector that includes x, y, z, and w components. XML Namespace for the XML functions. Contains a few static functions. XML.Comment A class that represents an XML Comment. XML.Declaration A class that represents an XML Declaration. XML.Document A class that represents an XML Document. XML.Element A class that represents an XML Element. XML.Node A base class for other XML Nodes. XML.NodePlacement An enumeration of integer values associated with XML node placement. Primarily used with the XML.Node's create functions. XML.NodePlacement. Last is default behavior. XML.Text A class that represents an XML Text. XML.Unknown A class that represents something the XML parser doesn't recognize."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Agent/Agent.html",
        "title": "FlexScript Class - Agent",
        "content": "Description Provides access to data and methods related to Agents who are members of an Agent System. Properties object Gets the object associated with the agent. socialForce Accesses the social force state of the agent. Methods activateBehavior Activates a named behavior of an agent. deactivateBehavior Deactivates a named behavior of an agent. neighbors Retrieves the set of in-proximity neighbors associated with a behavior. Constructor Agent Gets access to the Agent associated with an Object. Details Do no remove, this fixes the anchor on doc.flexsim.com Agent .object Object object Description Gets the object associated with the agent. Do no remove, this fixes the anchor on doc.flexsim.com Agent .socialForce Agent.SocialForceState socialForce Description Accesses the social force state of the agent. If the agent does not have a social force behavior activated, this property will be null. Do no remove, this fixes the anchor on doc.flexsim.com Agent .activateBehavior() activateBehavior( string name ) Parameters name The name of the behavior you want to activate Description Activates a named behavior of an agent. agent.activateBehavior(\"ProsimityBehavior\"); Do no remove, this fixes the anchor on doc.flexsim.com Agent .deactivateBehavior() deactivateBehavior( string name ) Parameters name The name of the behavior you want to deactivate Description Deactivates a named behavior of an agent. agent.deactivateBehavior(\"ProsimityBehavior\"); Do no remove, this fixes the anchor on doc.flexsim.com Agent .neighbors() neighbors( string behaviorID = nullvar ) Parameters behaviorID Usually this is the name of the behavior you want to deactivate. If you do not pass this behavior in, then it will use the first activated proximity behavior it finds. If you have a reference to the behavior node, you can pass this as well, and it will return the neighbors for that behavior. Description Retrieves the set of in-proximity neighbors associated with a behavior. var neighbors = agent.neighbors(\"ProsimityBehavior1\"); Do no remove, this fixes the anchor on doc.flexsim.com Agent Constructor Agent( Object object ) Parameters object An object that is a member of an agent system. Returns Agent An AGV object Description Gets access to the Agent associated with an Object. To access the Agent associated with an object, you must either use this constructor, or call Agent.System . getAgent . If an object is a member of multiple agent systems, then calling this constructor will access the first system the object is a member of. Casting from a treenode is not correct. You should use this constructor instead of the as() casting method. Using as() on an object will not work properly. Agent agent = Agent(object); // correct Agent agent = object; // auto-downcast: incorrect Agent agent = object.as(Agent); // explicit cast: incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Agent/Agent.SocialForceState.html",
        "title": "FlexScript Class - Agent.SocialForceState",
        "content": "Description Provides access to data and methods related to an agent's social force state. This can be used in custom social force fields to get/set forces on the agent. It can also be used in other contexts to retrieve information about the current social forces acting upon the agent. Properties center The agent's current center point. force The agent's current force. friction The scalar value of the agent's current friction force. This is only applicable if the agent has a friction force applied. goal The agent's current goal location. hasGoal 1 if the agent currently has a goal, 0 otherwise. velocity The agent's current velocity. Details Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .center readonly Vec3 center Description The agent's current center point. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .force Vec3 force Description The agent's current force. You can only set this force as part of a custom social force. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .friction readonly double friction Description The scalar value of the agent's current friction force. This is only applicable if the agent has a friction force applied. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .goal readonly Vec3 goal Description The agent's current goal location. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .hasGoal readonly int hasGoal Description 1 if the agent currently has a goal, 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com Agent.SocialForceState .velocity readonly Vec3 velocity Description The agent's current velocity."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Agent/Agent.System.html",
        "title": "FlexScript Class - Agent.System",
        "content": "Description Provides access to data and methods related to a System of an Agent s. Methods createAgent Creates a new agent that is associated with the passed object. getAgent Returns the agent that is associated with the passed object, if one exists. Constructor System Accesses a system in the model with a given name. Details Do no remove, this fixes the anchor on doc.flexsim.com Agent.System .createAgent() Agent createAgent( Object object ) Parameters object The model object that you want the agent to be associated with. Returns Agent A newly created agent Description Creates a new agent that is associated with the passed object. Agent newAgent = Agent.System(\"ProximitySystem\").createAgent(current) Do no remove, this fixes the anchor on doc.flexsim.com Agent.System .getAgent() Agent getAgent( Object object ) Parameters object The model object. Returns Agent The Agent associated with the object. If there is no such agent member, it will return null. Description Returns the agent that is associated with the passed object, if one exists. Agent agent = Agent.System(\"ProximitySystem\").getAgent(current) Do no remove, this fixes the anchor on doc.flexsim.com Agent.System Constructor System( string name ) Parameters name The name of the system. Returns Agent.System An Agent.System object Description Accesses a system in the model with a given name. Agent.System(\"ProximitySystem\").getAgent(current)"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.html",
        "title": "FlexScript Class - AGV",
        "content": "Description Provides access to data and methods related to AGV travel. The AGV class is associated with a task executer that has been connected to the AGV network. The AGV is NOT the same as the task executer object. In other words, you can't just set an AGV to the task executer itself. TaskExecuter te = current; AGV agv = te; // RUN-TIME ERROR Instead, the AGV is associated with , not the same as the task executer. To access the AGV of a given task executer, use the AGV () constructor. That said, an AGV class is actually stored on a treenode , so you can cast to/from a treenode, pass it around as a Variant , etc. by using the as() casting method. return AGV(current).as(treenode); Also, if you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>, where <AGVNAME> is the name of the AGV you want to see. Properties accumAheadAGV Gets the next AGV on an accumulating path. allocationPoints An array of AGV.AllocationPoint s that is the AGV's current set of not-yet-allocated allocation points. ampHours Gets the number of amp hours remaining in the AGV's battery. batteryLevel Gets or sets the ratio of (amp hours remaining)/(total amp hours) as a percentage. currentCP Gets or sets the current control point for this AGV. currentTravelDist Gets the AGV's current travel distance. currentTravelPathSection Gets the travel path section that the AGV is currently traveling on. destination Gets the current destination of the AGV. destinationCP Gets the current desination control point of the AGV. finalDestinationCP Gets the final destination control point of the AGV. isOrientedPathForward Gets or sets whether or not an AGV is oriented \"forward\" on a path. loadType Gets or sets the current load type of the AGV. object Provides access to Object methods and properties for this AGV. originCP Gets the origin control point of the AGV. overflowCP Gets/sets the control point to \"overflow\" to when the AGV is pushing trailers. proximityState Gets the current proximity state of the AGV. recentCP Gets the control point that was most recently the agv's currentCP. resetCP Gets or sets the control point that the agv connects to when the model is reset. speed Gets the current speed of the AGV. te Provides access to TaskExecuter methods and properties for this AGV. trailers An array of AGV.Trailer s comprising the set of trailers attached to this AGV. travelPath An array of AGV.TravelPathSection s that is the AGV's travel path for its current travel operation. traversalPoints An array of AGV.TraversalPoint s that is the AGV's current set of planned 'traversals'. Methods addAllocationPoint Adds a new allocation point to the AGVs allocationPoints list. attachTrailer Attaches the given object as a trailer on the AGV. coupleTrain Attaches a train of trailers to this AGV, automatically calculating gaps, etc. based on network geometry. detachTrailer Detaches the given trailer from the AGV. getTrailer Gets a specific trailer based on an ahead/behind parameter, and a rank for the AGV driver. redirect Redirects the AGV to a new destination, based on the given mode. setDestination Sets the destination control point. startRecharge Begins recharging the AGV's battery. stopRecharge Stops recharging the AGV's battery. uncoupleTrain Detaches a train of trailers from this AGV, creating a separate AGV train. Constructor AGV Constructs an AGV object based on the given TaskExecuter. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV .accumAheadAGV readonly AGV accumAheadAGV Description Gets the next AGV on an accumulating path. If there is no AGV ahead of the current one, or if the path type is not accumulating, this property returns a null value. AGV agv2; if (agv1.accumAheadAGV) agv2 = agv1.accumAheadAGV; Do no remove, this fixes the anchor on doc.flexsim.com AGV .allocationPoints readonly allocationPoints Description An array of AGV.AllocationPoint s that is the AGV's current set of not-yet-allocated allocation points. If you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>/allocationPoints, where <AGVNAME> is the name of the AGV you want to see. Do no remove, this fixes the anchor on doc.flexsim.com AGV .ampHours readonly double ampHours Description Gets the number of amp hours remaining in the AGV's battery. double ampHoursLeft = agv.ampHours; Do no remove, this fixes the anchor on doc.flexsim.com AGV .batteryLevel double batteryLevel Description Gets or sets the ratio of (amp hours remaining)/(total amp hours) as a percentage. double batteryLevel = agv.batterLevel; Do no remove, this fixes the anchor on doc.flexsim.com AGV .currentCP Object currentCP Description Gets or sets the current control point for this AGV. If the agv is not currently on a control point, this will be null. Object cp = agv.currentCP; agv.currentCP = Model.find(\"MyCP\"); Do no remove, this fixes the anchor on doc.flexsim.com AGV .currentTravelDist readonly double currentTravelDist Description Gets the AGV's current travel distance. The current travel distance of the AGV within its current travel operation. The AGV tracks its cumulative travel distance across each of the sections in its travel path. Each travel operation starts at a travel distance of 0, and travel distance increases as it travels along the path. Do no remove, this fixes the anchor on doc.flexsim.com AGV .currentTravelPathSection readonly AGV.TravelPathSection currentTravelPathSection Description Gets the travel path section that the AGV is currently traveling on. Do no remove, this fixes the anchor on doc.flexsim.com AGV .destination readonly Object destination Description Gets the current destination of the AGV. If the destination is a FixedResource connected to a ControlPoint, this property will return the FixedResource. Object destination = agv.destination; Do no remove, this fixes the anchor on doc.flexsim.com AGV .destinationCP readonly Object destinationCP Description Gets the current desination control point of the AGV. Object destinationCP = agv.destinationCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .finalDestinationCP readonly Object finalDestinationCP Description Gets the final destination control point of the AGV. The final destination control point can be changed when redirect () is called with REDIRECT_AS_FINAL. Object finalDest = agv.finalDestinationCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .isOrientedPathForward int isOrientedPathForward Description Gets or sets whether or not an AGV is oriented \"forward\" on a path. You can get this property while an AGV is on a path to see if they are facing a forward direction. It will return 1 if the AGV is oriented forward and 0 if they are oriented backwards. You cannot set this property while an AGV is moving. AGV agv = AGV(Model.find(\"TaskExecuter1\")); return agv.isOrientedPathForward; Do no remove, this fixes the anchor on doc.flexsim.com AGV .loadType Variant loadType Description Gets or sets the current load type of the AGV. Generally you will set the load type as part of the initialize travel trigger. However, you can also dynamically change an AGV's load type during a travel operation. This will cause the AGV's speed/acceleration/deceleration profile to change dynamically while it is performing a travel task. You would do this, for example, if you need to change the AGV's max speed based upon factors different than just the path that the AGV is traveling on. Usually you should not change loadType as part of the execution of some critical trigger in the AGV's travel operation, such as OnPreArrival. However, you can get around this by using a Breathe activity in process flow or calling await Delay.seconds(0) in code. The loadType property is a Variant. You can either set it to the name of the load type, or you can set it to a number representing the rank (column number) of the load type. When you get the loadType, it will return the name of the load type. AGV agv = AGV(Model.find(\"TaskExecuter1\")); agv.loadType = \"Loaded\"; Do no remove, this fixes the anchor on doc.flexsim.com AGV .object readonly Object object Description Provides access to Object methods and properties for this AGV. Object object = agv.object; Do no remove, this fixes the anchor on doc.flexsim.com AGV .originCP readonly Object originCP Description Gets the origin control point of the AGV. Object originCP = agv.originCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .overflowCP treenode overflowCP Description Gets/sets the control point to \"overflow\" to when the AGV is pushing trailers. This is generally only needed if the AGV is pushing trailers. When pushing trailers, overflowCP defines a point on the AGV path network to which the AGV's trailers should \"overflow\", since those trailers will be pushed past the AGV's target destination. overflowCP is controlled solely by the user. It is only automatically reset when the model is reset. Thus, if you set this property, you should reset it to 0 after finishing the operation where the it is applicable. If you do not reset it after its applicable travel operation, weird AGV path travel behavior may occur. agv.overflowCP = Model.find(\"ControlPoint5\"); Do no remove, this fixes the anchor on doc.flexsim.com AGV .proximityState readonly int proximityState Description Gets the current proximity state of the AGV. A 0 indicates unrestricted. A 1 indicates that the AGV is stopped because of the AGV ahead of it. if (agv.proximityState) { // handle a stopped agv ... } Do no remove, this fixes the anchor on doc.flexsim.com AGV .recentCP Object recentCP Description Gets the control point that was most recently the agv's currentCP. This is useful if the agv has moved past its last currentCP (and therefore currentCP is null) but you still want to be able to access that most recent control point. Object cp = agv.recentCP; Do no remove, this fixes the anchor on doc.flexsim.com AGV .resetCP Object resetCP Description Gets or sets the control point that the agv connects to when the model is reset. Object cp = agv.resetCP; agv.resetCP = Model.find(\"MyCP\"); Do no remove, this fixes the anchor on doc.flexsim.com AGV .speed readonly double speed Description Gets the current speed of the AGV. double agvSpeed = agv.speed; Do no remove, this fixes the anchor on doc.flexsim.com AGV .te readonly TaskExecuter te Description Provides access to TaskExecuter methods and properties for this AGV. TaskExecuter te = agv.te; Do no remove, this fixes the anchor on doc.flexsim.com AGV .trailers readonly trailers Description An array of AGV.Trailer s comprising the set of trailers attached to this AGV. The trailers are ordered from front to back. In other words the ahead-most trailer will be agv.trailers[1] , and the behind-most trailer will be agv.trailers[agv.trailers.length] . Do no remove, this fixes the anchor on doc.flexsim.com AGV .travelPath readonly travelPath Description An array of AGV.TravelPathSection s that is the AGV's travel path for its current travel operation. If you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>/travelPath, where <AGVNAME> is the name of the AGV you want to see. Do no remove, this fixes the anchor on doc.flexsim.com AGV .traversalPoints readonly traversalPoints Description An array of AGV.TraversalPoint s that is the AGV's current set of planned 'traversals'. For the purposes of the FlexScript API, the traversalPoints are the set of allocation points that have been allocated but not yet deallocated, i.e. the AGV's current allocations. See AGV.TraversalPoint for more information. If you are troubleshooting and want to see this structure as the model is running, you can view it in the tree at MODEL:/AGVNetwork>variables/agvs/<AGVNAME>/traversalPoints, where <AGVNAME> is the name of the AGV you want to see. Do no remove, this fixes the anchor on doc.flexsim.com AGV .addAllocationPoint() AGV.AllocationPoint addAllocationPoint( AGV.AllocatableObject object , double stopDist , double deallocDist , double arrivalDist ) Parameters object The object to be allocated. stopDist The allocation point's stopDist . stopDist The allocation point's traversalDist , i.e. the point at which to deallocate the object. arrivalDist The allocation point's arrivalDist . Description Adds a new allocation point to the AGVs allocationPoints list. Generally the AGV default behavior properly adds allocation points as part of the AGV's travel path, so you will usually not need to use this method. However, manually adding allocations may be useful in in some special cases. For example, certain spatial configurations of AGVs may require you to allocate points that are not technically on its travel path. If a part of an AGV 'hangs out' away from its body and encroaches on other paths, you may resolve this by adding allocation points on those other paths so that the AGV will avoid collisions with other AGVs. You should call this method only at defined times in the AGV's travel operation. Specifically, you should only call it after the OnBuildTravelPath event is fired (or as part of that trigger) but before the OnPreAllocate. Calling it at any other time is not guaranteed to work. Do no remove, this fixes the anchor on doc.flexsim.com AGV .attachTrailer() attachTrailer( treenode trailer , double gap , int behind , int detachRule ) Parameters trailer The object that will trail the AGV gap The trailer's distance from the next trailer or AGV behind Sets the position of the trailer. Can be 0 or 1: 0 is ahead, 1 is behind detachRule Sets the detach mode of the AGV. Can be 0 or 1: 0 is manual, 1 is automatic Description Attaches the given object as a trailer on the AGV. If you attach the trailer using the manual detach mode, you must call detachTrailer() to detach the trailer. agv.attachTrailer(trailerObj, 0.1, 1, 0); Do no remove, this fixes the anchor on doc.flexsim.com AGV .coupleTrain() coupleTrain( treenode trailer ) Parameters trailer The object that will be coupled to the AGV. If the trailer is itself an AGV, or is a trailer of an AGV, then the entire AGV train will be attached. Description Attaches a train of trailers to this AGV, automatically calculating gaps, etc. based on network geometry. coupleTrain() is similar to attachTrailer (), with the following primary differences: Whereas attachTrailer() attaches a single trailer to the AGV, coupleTrain() will attach all trailers that are part of another AGV train, if such a train exists. While attachTrailer() requires you to define parameters like whether the trailer should be attached ahead or behind, gap distance, etc., coupleTrain(), on the other hand, automatically resolves these parameters based on the location of the trailer/train on the AGV path network. There are two possible scenarios when coupling the trailer onto the AGV's train. Each scenario effects a different logic for coupling the train, as follows: The trailer is an independent object - When the trailer is not associated with another AGV train, the AGV will determine where to couple the trailer by analyzing simple spatial proximity. It retrieves the location of the trailer, and determines whether that location is ahead of the AGV or behind. Then, based on that determination, it resolves the gap between the trailer and the AGV's associated ahead/behind-most trailer by again analyzing spatial proximity. Further, since there is no AGV train associated with the trailer, it will couple only that trailer to the AGV, and no other objects. The trailer is itself another AGV, or is a trailer of another AGV - When the trailer is part of another AGV, the AGV will determine couple parameters by analyzing its own location on the AGV path network relative to the location of that other AGV on the path network. Ahead/behind attributes, gap, etc. are determined by doing a path network distance analysis between each end of each AGV, and coupling the train via the shortest resulting path between the train ends. This algorithm assumes that the AGV ends can reach each other via one or more paths that do not require a train direction switch. In other words, the trains' proximity to each on the network should be \"close and intuitive\", like how you would want to couple trains in a real life situation. Coupling across weird path geometries will result in undetermined behavior. Use this method in conjunction with uncoupleTrain () to simulate coupling and uncoupling of cars in a train yard. Do no remove, this fixes the anchor on doc.flexsim.com AGV .detachTrailer() detachTrailer( treenode trailer ) Parameters trailer The trailer to detach from the AGV Description Detaches the given trailer from the AGV. agv.detachTrailer(trailerObj); Do no remove, this fixes the anchor on doc.flexsim.com AGV .getTrailer() AGV.Trailer getTrailer( int isBehind , int rankFromDriver ) Parameters isBehind 1 if you want to access a trailer behind the AGV, and 0 if you want to access a trailer ahead of the AGV. rankFromDriver The 1-based rank of the trailer from the AGV driver. Description Gets a specific trailer based on an ahead/behind parameter, and a rank for the AGV driver. Object trailer = agv.getTrailer(1, 2).object; Do no remove, this fixes the anchor on doc.flexsim.com AGV .redirect() redirect( Object newDest , int mode ) Parameters newDest The new desination for the AGV to travel to mode Determines what happens on redirect. Can have one of 4 values: REDIRECT_AND_WAIT - if not redirected before arrival, the agv will wait at the destination until redirected REDIRECT_AS_FINAL - the destination becomes the new final destination for the agv REDIRECT_AND_CONTINUE_ON_ARRIVAL - the agv will continue to the final destination after arriving at the intermediate destination REDIRECT_AND_CONTINUE_ON_PRE_ARRIVAL - the agv will continue to the final destination after pre-arriving at the intermediate destination (it will not decelerate to a stop) Description Redirects the AGV to a new destination, based on the given mode. agv.redirect(newDest, REDIRECT_AS_FINAL); Do no remove, this fixes the anchor on doc.flexsim.com AGV .setDestination() void setDestination( Object controlPoint , double pathOffset = 0 , Object relativeToTrailer = 0 , Variant agvBodyOffset = 0 ) Parameters controlPoint Control point to be set as the destination. pathOffset How much to offset the destination along the path from the control point. relativeToTrailer Make the destination relative to a trailer. agvBodyOffset Specifies amount to offset from the body or one of the AGV.BodyOffset enum values. It may also be an array with 2 elements, the first with one of the AGV.BodyOffset enum values and the second with an additional offset amount. Description Sets the destination control point. agv.setDestination(Model.find(\"ControlPoint5\"), 0, 0, AGV.BodyOffset.TrailerHeadEdge); Do no remove, this fixes the anchor on doc.flexsim.com AGV .startRecharge() double startRecharge( ) Returns double The amount of time a full recharge will take Description Begins recharging the AGV's battery. The battery recharges at the rate defined by the AGV type. Once the battery is fully recharged, recharging stops. Do no remove, this fixes the anchor on doc.flexsim.com AGV .stopRecharge() void stopRecharge( ) Description Stops recharging the AGV's battery. Do no remove, this fixes the anchor on doc.flexsim.com AGV .uncoupleTrain() uncoupleTrain( treenode trailer , treenode newDriver = 0 ) Parameters trailer The trailer at which to uncouple from the train. newDriver The object who will become the new \"driver\" AGV. If this object does not already have an AGV instance associated with it, then an AGV will be created. If newDriver is not passed as a parameter, or is 0, then the first trailer parameter will become the new driver. If the new driver is not a TaskExecuter , then it will only contain AGV data for storing where the AGV train is on the path network. You will not be able to give the object travel tasks like you would a TaskExecuter. Description Detaches a train of trailers from this AGV, creating a separate AGV train. AGV(current).uncoupleTrain(AGV(current).trailers[1].object); Use this method in conjunction with coupleTrain () to simulate coupling and uncoupling of cars in a train yard. Do no remove, this fixes the anchor on doc.flexsim.com AGV Constructor AGV( treenode te , int assert = 0 ) Parameters te A TaskExecuter that is connected to the AGV network as an AGV Traveler. assert If 1, then if the TaskExecuter is not yet connected to the AGV network, it will be connected, and the associated AGV object will be created. Returns AGV An AGV object Description Constructs an AGV object based on the given TaskExecuter. An AGV object can only be accessed by calling this method. Casting directly from a task executer is not correct. AGV agv = AGV(te); // correct AGV agv = te; // incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.AllocatableObject.html",
        "title": "FlexScript Class - AGV.AllocatableObject",
        "content": "Inherits from Object Description An object that can be allocated by an AGV. An allocatable object is either a Control Point or a Control Area. The primary properties you can get on this object are its set of allocation requests and its set of allocations. Properties allocations An array-like list of AGV.AllocationPoint s that represent the set of AGVs who have currently allocated the object. requests An array-like list of AGV.AllocationPoint s that represent the set of AGVs currently requesting to allocate the object. routingConstraint A value defining how/whether AGVs may travel through the object when calculating routing. Methods allocate Attempts to allocate the object. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .allocations readonly allocations Description An array-like list of AGV.AllocationPoint s that represent the set of AGVs who have currently allocated the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .requests readonly requests Description An array-like list of AGV.AllocationPoint s that represent the set of AGVs currently requesting to allocate the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .routingConstraint int routingConstraint Description A value defining how/whether AGVs may travel through the object when calculating routing. The routingConstraint property takes one of the values of AGV.RoutingConstraint . Setting this value makes the AllocatableObject into a dynamic barrier for routing purposes. The default value (AGV.RoutingConstraint.None) means AGVs can travel through the object. Setting it to some other value, e.g. AGV.RoutingConstraint.Blocked, will cause AGVs to route around the object, depending on the value you use. Note that this supplements your use of conditional rules on paths. The difference is that conditional rules work with routing table caching, while routingConstraint does not. If there is any object in the model with a routingConstraint set to something other than AGV.RoutingConstraint.None, then the AGV network will ignore any cached routing tables and recalculate paths anew. As such, using routingConstraint can have significant impacts on run speed because it must recalculate the path on every travel operation. Nevertheless, it can be useful when the potential number of dynamic barriers is so large that route caching (and creating all the conditional rules) is impractical. When routing constraints are set and the AGV network is building routes dynamically, it will switch to an 'A* mode', using the A* search algorithm to quickly find the path from the source to the destination. As soon as it finds the best path, it will shortcut the search algorithm, not filling out the routing table fully as it usually would when executing standard Dijkstra's algorithm . This is done to make the path search as efficient as possible when using dynamic barriers. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocatableObject .allocate() AGV.AllocationPoint allocate( Object allocator , int force = 0 ) Parameters allocator The object that is to 'own' the allocation. force Should be 1 or 0. If 1, it will 'force' the allocation, meaning it will ignore the object's maximum allocations property, allocating the object even if it has reached its allocation capacity. If 0, then if the object has already reached its allocation capacity, a request will be added to its request queue. Returns AGV.AllocationPoint An AGV.AllocationPoint that represents the allocation. You can get the allocation point's requestState property to see whether or not the allocation was completed immediately or was added to the object's list of requests. Description Attempts to allocate the object. Generally you do not need to call this method because allocations and deallocations are managed by default by the AGV travel behavior. You would use this method if you need to allocate a control area or control point that isn't part of the standard travel path of an AGV. For example, you can make items in a conveyor system allocate a control area through the OnArrival trigger of a conveyor decision point. There are pick list options that do this automatically and call this method. If you use this method to allocate an object, then later in the simulation you should call deallocate on the result allocation point to remove the allocation. AGV.AllocationPoint alloc = controlArea.allocate(current); if (alloc.requestState == AGV.RequestState.Requested) { ... // do stuff if the object was not allocated immediately await alloc.event(\"OnAllocate\"); } ... // do stuff once the control area is allocated."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.AllocationPoint.html",
        "title": "FlexScript Class - AGV.AllocationPoint",
        "content": "Inherits from AGV.TraversalPoint Description A structure containing information about a planned AGV allocation. Each time an AGV starts a travel operation, it builds a travel path to the destination. In this path building phase, as it encounters allocatable objects on that path, it creates allocation points that signify that the AGV must allocate that object at a defined point on the path. An allocation point either represents an allocation of a Control Point , a Control Area , or a path transfer when traversing an accumulating path. The AGV class includes an allocationPoints property that is an array-like structure that includes all allocation points (that have not yet allocated their object) on the AGV's current travel path. Also, allocation points are the elements you access in an AGV.AllocatableObject 's requests and allocations properties. //Printing an AGV's allocation points AGV agv = AGV(current); for (int i = 1; i <= agv.allocationPoints.length; i++) { AGV.AllocationPoint point = agv.allocationPoints[i]; print( \" agv \", point.agv.as(treenode), \" object \", point.object, \" stopDist \", point.stopDist, \" arrivalDist \", point.arrivalDist, \" transferPath \", point.transferPath, \" transferDistAlong \", point.transferDistAlong); } Properties allocator The object that is to 'own' the allocation. arrivalDist The AGV travel distance at which the AGV will have 'arrived' at the target object. object The object that is to be allocated. requestState The state of the allocation point's request. stopDist The AGV travel distance at which the AGV will stop if it cannot allocate the object. transferDistAlong The distance along the allocating transfer's owning path. transferPath The owning path of the transfer that will be allocated. Methods deallocate Deallocates the associated object, destroys the allocation point, and fulfills the object's next waiting allocation request if there is one. event Replicates Object . event for an allocation point. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .allocator readonly Object allocator Description The object that is to 'own' the allocation. Usually this is the AGV that allocates the object. However, sometimes it may be an A* traveler if the control area is an A* member, or it could be an object you define yourself when you call AGV.AllocatableObject . allocate (). Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .arrivalDist readonly double arrivalDist Description The AGV travel distance at which the AGV will have 'arrived' at the target object. This will nearly always be farther along the path than the stopDist as the AGV must allocate an object before traveling to it. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .object readonly AGV.AllocatableObject object Description The object that is to be allocated. This will be a valid pointer if the allocation point is for a Control Point or Control Area, and null otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .requestState readonly AGV.RequestState requestState Description The state of the allocation point's request. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .stopDist double stopDist Description The AGV travel distance at which the AGV will stop if it cannot allocate the object. You can set this property value, but only at defined times in the AGV's travel operation. Specifically, you should only set it after the OnBuildTravelPath event is fired (or as part of that trigger) but before the OnPreAllocate. Setting it at any other time is not guaranteed to work. Note that the AGV. allocationPoints array is sorted in the order of the stopDist value, so if you set this value it may change the index of the allocation point within the AGV's allocationPoints array, in order to preserve this ordering. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .transferDistAlong readonly double transferDistAlong Description The distance along the allocating transfer's owning path. This will be a valid distance if the allocation point is for a path transfer, and undefined otherwise. In other words, you should only access this property if you know the allocation point is for a transfer ( transferPath is not null). Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .transferPath readonly Object transferPath Description The owning path of the transfer that will be allocated. This will a valid pointer if the allocation point is for a path transfer, and null otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .deallocate() void deallocate( ) Description Deallocates the associated object, destroys the allocation point, and fulfills the object's next waiting allocation request if there is one. You should only call this if you have programmatically allocated the object with AGV.AllocatableObject . allocate (). Otherwise, deallocation will happen automatically. If you call this method when its requestState is anything but Allocated, it will merely destroy the allocation point, effectively cancelling the request. Do no remove, this fixes the anchor on doc.flexsim.com AGV.AllocationPoint .event() Event event( string eventName ) Parameters eventName The name of the event. Returns Event The resulting Event. Description Replicates Object . event for an allocation point. Since AGV.AllocationPoint is not an Object, it doesn't naturally have this method, so it is replicated explicitly. The only event available on an AGV.AllocationPoint is \"OnAllocate\". In other words, you use this method in code to await the completion of the allocation. AGV.AllocationPoint alloc = controlArea.allocate(current); if (alloc.requestState == AGV.RequestState.Requested) { ... // do stuff if the object was not allocated immediately await alloc.event(\"OnAllocate\"); } ... // do stuff once the control area is allocated."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.BodyOffset.html",
        "title": "FlexScript Class - AGV.BodyOffset",
        "content": "Description Enumerates possible AGV body offset values The AGV.BodyOffset enumeration can be used to define target AGV body offsets for customized AGV travel tasks . Each enumeration combines two facets: Whether the offset corresponds the entire AGV \"train\" or to an individual \"trailer\" The corresponding \"edge\" of the target object. In defining the \"edge\" the following definitions apply: Head Edge - the head edge of the object is the forward-most point along its x axis, regardless of travel direction. Tail Edge - the tail edge of the object is the backward-most point along its x axis, regardless of travel direction. Leading Edge - the leading edge of the object is the forward-most point in the AGV's travel direction. When the AGV is traveling forward, its leading edge is the same as its head edge. When traveling backward its leading edge is the same as its tail edge. Trailing Edge - the trailing edge of the object is the backward-most point in the AGV's travel direction. When the AGV is traveling forward, its trailing edge is the same as its tail edge. When traveling backward its trailing edge is the same as its head edge. Static Properties TrailerHeadEdge An AGV trailer's head edge. TrailerLeadingEdge An AGV trailer's leading edge. TrailerTailEdge An AGV trailer's tail edge. TrailerTrailingEdge An AGV trailer's trailing edge. TrainHeadEdge The AGV train's head edge. TrainLeadingEdge The AGV train's leading edge. TrainTailEdge The AGV train's tail edge. TrainTrailingEdge The AGV train's trailing edge. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerHeadEdge static readonly int TrailerHeadEdge Description An AGV trailer's head edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerLeadingEdge static readonly int TrailerLeadingEdge Description An AGV trailer's leading edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerTailEdge static readonly int TrailerTailEdge Description An AGV trailer's tail edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrailerTrailingEdge static readonly int TrailerTrailingEdge Description An AGV trailer's trailing edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainHeadEdge static readonly int TrainHeadEdge Description The AGV train's head edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainLeadingEdge static readonly int TrainLeadingEdge Description The AGV train's leading edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainTailEdge static readonly int TrainTailEdge Description The AGV train's tail edge. Do no remove, this fixes the anchor on doc.flexsim.com AGV.BodyOffset .TrainTrailingEdge static readonly int TrainTrailingEdge Description The AGV train's trailing edge."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.Connections.html",
        "title": "FlexScript Class - AGV.Connections",
        "content": "Description An interface for accessing AGV control point connections. The AGV.Connections class allows you to query and dereference control point connections. You construct an AGV.Connections instance with a constructor. Here you pass the owner of the connections, followed by the name of the connection. AGV.Connections connections = AGV.Connections(current, \"Location\"); You then can query how many connections are present with the length property. int numConnections = connections.length; To dereference a specific connection, use the [] array dereference operator. Object obj = connections[1]; Properties length Returns the number of connections present on the object. rank Gets the rank of the connection type. Constructor Connections Creates a new set of connections with the passed owner and associated with the named connection. Operators [] Dereferences the connected object by control point connection rank. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections .length readonly int length Description Returns the number of connections present on the object. int numConnections = AGV.Connections(current, \"PickupPoints\").length; Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections .rank readonly int rank Description Gets the rank of the connection type. This is for use in subsequent AGV.Connections() constructors. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections Constructor Connections( Object owner , string connectionName ) Connections( Object owner , int connectionRank ) Parameters owner The owner of the control point connections. connectionName The name of the control point connections. connectionRank The rank of the control point connections. Description Creates a new set of connections with the passed owner and associated with the named connection. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Connections .operator [] Object operator []( int index ) Parameters index The index of the connected object. Returns Object The target connected object. Description Dereferences the connected object by control point connection rank."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.Request.html",
        "title": "FlexScript Class - AGV.Request",
        "content": "Description An enumeration of values to be returned by an AGV.AllocatableObject 's OnRequest trigger. If you return one of these values from the trigger, then the object (a Control Point or Control Area) will override its default behavior and either allow or block the allocation request. Static Properties Allow Allow the request to allocate the object. Block Block the request from allocating the object. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.Request .Allow static readonly int Allow Description Allow the request to allocate the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Request .Block static readonly int Block Description Block the request from allocating the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.RequestState.html",
        "title": "FlexScript Class - AGV.RequestState",
        "content": "Description An enumeration of possible values for the AGV.AllocationPoint . requestState property. Static Properties Allocated The AGV has allocated the object. Requested The AGV has requested to allocate the object, but has not yet allocated it. Unrequested The AGV has not yet reached the point where it needs to request the allocation. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.RequestState .Allocated static readonly int Allocated Description The AGV has allocated the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RequestState .Requested static readonly int Requested Description The AGV has requested to allocate the object, but has not yet allocated it. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RequestState .Unrequested static readonly int Unrequested Description The AGV has not yet reached the point where it needs to request the allocation."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.RoutingConstraint.html",
        "title": "FlexScript Class - AGV.RoutingConstraint",
        "content": "Description Enumerates possible routing constraint values used in AGV.AllocatableObject . routingConstraint Static Properties BackwardOnly An AGV may only travel through the object if it is traveling in the path's reverse/backward direction. Blocked An AGV may not travel to, from, or through the object. ForwardOnly An AGV may only travel through the object if it is traveling in the path's forward direction. None No constraints on routing, meaning an AGV may travel through the object. PassThroughBlocked An AGV may travel to or from the control point as an origin or destination, but it may not travel 'through' the object. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .BackwardOnly static readonly int BackwardOnly Description An AGV may only travel through the object if it is traveling in the path's reverse/backward direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .Blocked static readonly int Blocked Description An AGV may not travel to, from, or through the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .ForwardOnly static readonly int ForwardOnly Description An AGV may only travel through the object if it is traveling in the path's forward direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .None static readonly int None Description No constraints on routing, meaning an AGV may travel through the object. Do no remove, this fixes the anchor on doc.flexsim.com AGV.RoutingConstraint .PassThroughBlocked static readonly int PassThroughBlocked Description An AGV may travel to or from the control point as an origin or destination, but it may not travel 'through' the object."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.Trailer.html",
        "title": "FlexScript Class - AGV.Trailer",
        "content": "Description Provides access to data and methods related a trailer attached to an AGV . Properties driver Gets the AGV that this trailer is attached to. isBehind 1 if the trailer is behind its driver AGV, 0 if it is ahead. object Gets the 3D object that this trailer is associated with. rankFromDriver Gets the 1-based rank of this trailer away from its driver AGV. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .driver readonly AGV driver Description Gets the AGV that this trailer is attached to. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .isBehind int isBehind Description 1 if the trailer is behind its driver AGV, 0 if it is ahead. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .object readonly Object object Description Gets the 3D object that this trailer is associated with. Do no remove, this fixes the anchor on doc.flexsim.com AGV.Trailer .rankFromDriver readonly int rankFromDriver Description Gets the 1-based rank of this trailer away from its driver AGV."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.TravelPathSection.html",
        "title": "FlexScript Class - AGV.TravelPathSection",
        "content": "Description A structure representing a traversal of a specific section of path during an AGV's travel operation. When an AGV starts a travel operation, it builds an internal representation of the path that it will travel on in getting to its destination. The path is stored in AGV . travelPath , which is an array-like structure with a length property and an array-dereference (bracket: []) operator. Each accessed element is an instance of AGV.TravelPathSection. It represents a sub-section of an AGV path that will be traversed, and contains the properties described here. You can also access the travel path section that an AGV is currently traveling on with AGV . currentTravelPathSection //Printing an AGV's full path AGV agv = AGV(current); for (int i = 1; i <= agv.travelPath.length; i++) { AGV.TravelPathSection sec = agv.travelPath[i]; print(\"path \", sec.path, \" fromDist \", sec.fromDist, \" toDist \", sec.toDist, \" fromTravelDist \", sec.fromTravelDist); } Properties fromDist The distance along the path that is the starting point of the AGV's traversal on that path. fromTravelDist The AGV travel distance that coincides with the starting point of the AGV's traversal on the path. isAGVOritentedPathForward True if, while traveling along this section, the AGV is oriented forward along the path, i.e. the AGV's 'head' is directed forward along the path's 'primary' direction. isAGVTravelOrientedForward True if, while traveling along this section, the AGV is traveling in a forward direction, i.e. its 'head' is leading in the direction of travel. isPathTravelOrientedForward True if the section's travel direction is forward along the path, i.e. the AGV is traveling in the path's 'primary' direction. path The path that this section is associated with. toDist The distance along the path that is the ending point of the AGV's traversal on that path. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .fromDist readonly double fromDist Description The distance along the path that is the starting point of the AGV's traversal on that path. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .fromTravelDist readonly double fromTravelDist Description The AGV travel distance that coincides with the starting point of the AGV's traversal on the path. The AGV tracks its own cumulative travel distance across each of the sections in its travel path. Each travel operation starts at a travel distance of 0, and travel distance increases as it travels along the path. You can access the AGV's current travel distance at a given time in the travel with AGV . currentTravelDist . Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .isAGVOritentedPathForward readonly bool isAGVOritentedPathForward Description True if, while traveling along this section, the AGV is oriented forward along the path, i.e. the AGV's 'head' is directed forward along the path's 'primary' direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .isAGVTravelOrientedForward bool isAGVTravelOrientedForward Description True if, while traveling along this section, the AGV is traveling in a forward direction, i.e. its 'head' is leading in the direction of travel. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .isPathTravelOrientedForward readonly bool isPathTravelOrientedForward Description True if the section's travel direction is forward along the path, i.e. the AGV is traveling in the path's 'primary' direction. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .path readonly Object path Description The path that this section is associated with. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TravelPathSection .toDist readonly double toDist Description The distance along the path that is the ending point of the AGV's traversal on that path."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AGV/AGV.TraversalPoint.html",
        "title": "FlexScript Class - AGV.TraversalPoint",
        "content": "Description A structure containing information about a planned AGV 'traversal'. Traversal points are primarily accessed through the AGV . traversalPoints and AGV . allocationPoints array. The AGV's traversalPoints array is a direct list of AGV.TraversalPoint's. The AGV's allocationPoints array is a list of AGV.AllocationPoint 's, which is a subclass of AGV.TraversalPoint, and as such includes the properties of AGV.TraversalPoint. This class represents a point along the AGV's travel path where the AGV is scheduled to execute some logic. The AGV's traversalPoints array may contain several different types of traversal points, but for the purposes of the FlexScript API at this time, you should only access/manipulate traversal points that are instances of AGV.AllocationPoint . In traversing this array you should always check if the point is in fact an allocation point, and only do something if it is. AGV agv = AGV(current); for (int i = 1; i <= agv.traversalPoints.length; i++) { AGV.TraversalPoint t = agv.traversalPoints[i]; if (t.is(AGV.AllocationPoint)) { AGV.AllocationPoint allocPoint = t; // ... perform some logic on the allocation point } } Whereas the AGV . allocationPoints array contains the set of allocation points that have yet to be allocated, an AGV's traversalPoints array holds, among other things, the set of allocation points that the AGV has already allocated, but has not yet deallocated. In other words, it is the AGV's current set of allocations. An allocation point will start out as part of the allocationPoints array. Then, when the AGV actually allocates the object associated with that allocation point, the allocation point is moved into the traversalPoints list. At that point, the traversalDist property of the allocation point is used as the 'deallocation distance' i.e. the travel distance at which the AGV will deallocate the object. Properties agv The AGV that owns this traversal point. traversalDist The AGV travel distance at which the AGV will execute whatever logic is associated with this traversal point. Details Do no remove, this fixes the anchor on doc.flexsim.com AGV.TraversalPoint .agv readonly AGV agv Description The AGV that owns this traversal point. Do no remove, this fixes the anchor on doc.flexsim.com AGV.TraversalPoint .traversalDist double traversalDist Description The AGV travel distance at which the AGV will execute whatever logic is associated with this traversal point. If this traversal point is an AGV.AllocationPoint , this is the distance at which the allocated object will be deallocated. You can set this property value, but only at defined times in the AGV's travel operation. Specifically, you should only set it after the OnBuildTravelPath event is fired (or as part of that trigger) but before (or as part of) the OnPreAllocate. Setting it at any other time is not guaranteed to work. Note that the AGV. traversalPoints array is sorted in the order of the traversalDist value, so if you set this value it may change the index of the traversal point within the AGV's traversalPoints array, in order to preserve this ordering. Since you have significant control over the deallocation timing using standard features like Deallocation Types , you generally would not need to change an allocation point's traversalDist. However, in some special cases, such as when simulating AGVs with special spatial geometries, it may be useful to change this property."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.html",
        "title": "FlexScript Class - AStar",
        "content": "Description Provides access to data related to the A* module. Static Properties navigator Accesses the model's A* navigator. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar .navigator static readonly AStar.Navigator navigator Description Accesses the model's A* navigator. AStar.Cell cell = AStar.navigator.getCell(Vec3(10, 3, 0));"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Allocation.html",
        "title": "FlexScript Class - AStar.Allocation",
        "content": "Description Provides access to data and methods associated with an A* grid cell allocation. Properties acquireTime Gets the time that the cell was/will be allocated. cell Gets the allocated cell. releaseTime Gets the time that the cell was/will be released. traveler Gets the allocating traveler. Operators ! Returns true if the allocation is not valid. bool Returns true if the allocation is valid. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .acquireTime readonly double acquireTime Description Gets the time that the cell was/will be allocated. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .cell readonly AStar.Cell cell Description Gets the allocated cell. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .releaseTime readonly double releaseTime Description Gets the time that the cell was/will be released. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .traveler readonly AStar.Traveler traveler Description Gets the allocating traveler. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .operator ! int operator !( ) Description Returns true if the allocation is not valid. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Allocation .operator bool int operator bool( ) Description Returns true if the allocation is valid."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Cell.html",
        "title": "FlexScript Class - AStar.Cell",
        "content": "Description Provides access to data and methods associated with an A* grid cell. Properties col Gets the cell's column address, or its numbering in the x direction. row Gets the cell's row address, or its numbering in the y direction. Methods adjacentCell Gets the cell's adjacent cell, in the given direction. canGo Returns true if the travel grid allows a traveler to travel from this cell to an adjacent cell in the defined direction. getAllocation Gets the AStar.Allocation , if any, that is currently active for the cell or is scheduled to be active at a given time. Constructor AStar.Cell Constructs an AStar.Cell based on the grid, row, and column address. Operators ! Returns true if the cell is not a valid address in the A* grid. != Returns true if the cell is not the same address as a compared cell. == Returns true if the cell is the same address as a compared cell. bool Returns true if the cell is a valid address in the A* grid. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .col int col Description Gets the cell's column address, or its numbering in the x direction. Increasing column numbers are associated with increasing x locations. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .row int row Description Gets the cell's row address, or its numbering in the y direction. Increasing row numbers are associated with increasing y locations. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .adjacentCell() AStar.Cell adjacentCell( int direction ) Parameters direction The desired travel direction. This should be an enumeration of AStar.Direction Description Gets the cell's adjacent cell, in the given direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .canGo() int canGo( int direction ) Parameters direction The desired travel direction. This should be an enumeration of AStar.Direction Description Returns true if the travel grid allows a traveler to travel from this cell to an adjacent cell in the defined direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .getAllocation() AStar.Allocation getAllocation( double time = -1 ) Parameters time The target simulation time. Description Gets the AStar.Allocation , if any, that is currently active for the cell or is scheduled to be active at a given time. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell Constructor AStar.Cell( int grid , int row , int column ) Parameters grid Reserved for future use. Should be 1. row The row address. column The column address. Description Constructs an AStar.Cell based on the grid, row, and column address. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator ! int operator !( ) Description Returns true if the cell is not a valid address in the A* grid. Returns true if the cell address is outside the bounds of the A* grid, otherwise false. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator != int operator !=( AStar.Cell other ) Parameters other The cell to compare this cell with. Description Returns true if the cell is not the same address as a compared cell. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator == int operator ==( AStar.Cell other ) Parameters other The cell to compare this cell with. Description Returns true if the cell is the same address as a compared cell. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Cell .operator bool int operator bool( ) Description Returns true if the cell is a valid address in the A* grid. Returns false if the cell address is outside the bounds of the A* grid."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Direction.html",
        "title": "FlexScript Class - AStar.Direction",
        "content": "Description An enumeration of integer values associated with four A* travel directions. The AStar.Direction values are used in AStar.Cell when querying directional travel capabilities and adjacent cells. Static Properties Down = 4 The \"down\" direction, describing travel in the negative y direction. Left = 2 The \"left\" direction, describing travel in the negative x direction. Right = 1 The \"right\" direction, describing travel in the positive x direction. Up = 3 The \"up\" direction, describing travel in the positive y direction. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Down static readonly int Down = 4 Description The \"down\" direction, describing travel in the negative y direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Left static readonly int Left = 2 Description The \"left\" direction, describing travel in the negative x direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Right static readonly int Right = 1 Description The \"right\" direction, describing travel in the positive x direction. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Direction .Up static readonly int Up = 3 Description The \"up\" direction, describing travel in the positive y direction."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Navigator.html",
        "title": "FlexScript Class - AStar.Navigator",
        "content": "Description Provides access to data and methods related to a model's A* navigator. Properties travelers References the set of travelers that are members of the A* network. Methods addDynamicBarrier Adds a dynamic barrier to the navigator's A* grid network. getCell Gets the cell associated with a given model location. getLocation Gets the model location associated with a given AStar.Cell . removeDynamicBarrier Removes a dynamic barrier that was added with addDynamicBarrier (). Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .travelers readonly travelers Description References the set of travelers that are members of the A* network. This property is available so you can visit each of the navigator's travelers when something like a grid change happens. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .addDynamicBarrier() Variant addDynamicBarrier( Variant val , int skipOnChange = 0 ) treenode addDynamicBarrier( Vec3 location , Vec3 size , Vec3 rotation , int skipOnChange = 0 ) Parameters val The value containing the barrier(s) to add. The value can either by a reference to an object, an array of references to objects, or a 3x3 array of numbers. If it is an object, it will add that object as a dynamic barrier. If it is an array of objects, it will add each object in the array as a barrier. If it is a 3x3 number array, it will construct 3 Vec3s from the array and forward to the Vec3-based overload. location The location of a barrier you want to add. size The size of a barrier you want to add. rotation The rotation of a barrier you want to add. skipOnChange Optional. If 1, the call to the navigator's OnGridChange event will be skipped. Description Adds a dynamic barrier to the navigator's A* grid network. This method lets you dynamically change the A* path calculation mechanism during a simulation run. It is more flexible than the standard barrier condition rule in that you can add and remove barriers that have been dynamically created, or that are moving around during the simulation. You call this method to integrate the object's current location as a barrier into the navigation grid. Calling this method will only affect the path calculation algorithm. It does not affect the paths of objects who are actively traveling on their path. If you want them to recalculate their path after adding the barrier, you should preempt them so they will restart their travel operation. You can query whether an active traveler's path has been blocked by a dynamic barrier by calling AStar.Traveler(object).travelPath.isBlocked(). The return value is a reference to a treenode that represents the added dynamic barrier. If you pass an array of object references into this method, then an array of treenodes will be returned. Once the barrier is destroyed or moves, you should call removeDynamicBarrier () to remove it, passing in the value that was returned by this method. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .getCell() AStar.Cell getCell( Vec3 modelLoc ) Parameters modelLoc The target model location. Description Gets the cell associated with a given model location. AStar.Cell cell = AStar.navigator.getCell(Vec3(10, 3, 0)); Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .getLocation() Vec3 getLocation( AStar.Cell cell ) Parameters cell The target cell. Description Gets the model location associated with a given AStar.Cell . Vec3 loc = AStar.navigator.getLocation(traveler.travelPath[1].cell); Do no remove, this fixes the anchor on doc.flexsim.com AStar.Navigator .removeDynamicBarrier() removeDynamicBarrier( Variant barrier ) Parameters barrier The value that was returned from a call to addDynamicBarrier (). Description Removes a dynamic barrier that was added with addDynamicBarrier ()."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/AStar/AStar.Traveler.html",
        "title": "FlexScript Class - AStar.Traveler",
        "content": "Description Provides access to data and methods related to an A* traveler. Properties isActive Returns 1 if the traveler is actively performing a travel task, 0 otherwise. isBlocked Returns 1 if the traveler is currently blocked by an accumulation cell allocation request. object Returns the TaskExecuter that is associated with this A* traveler. travelPath Accesses the traveler's current travel path. Methods addAllocation For future use. Adds an accumulation allocation to the traveler's scheduled cell allocations. arriveAtBridge For future use. Notifies A* that the traveler has arrived at a bridge/elevator associated with a specific cell in its travel path, handing over control to the bridge. calculatePath For future use. Calculates the A* path to the destination and stores it in the traveler's travelPath property. findCollision For future use. Finds an existing allocation that \"collides\" with the passed allocation. finishPath For future use. Notifies A* that the traveler is finished traveling. getAllocations Gets an array of AStar.Allocation s that the traveler has currently allocated or is scheduled to have allocated at a given time. navigatePath For future use. Initiates the logic that builds kinematics and cell allocations along the traveler's calculated path. Constructor AStar.Traveler Constructs an AStar.Traveler object based on the given TaskExecuter. Details Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .isActive readonly int isActive Description Returns 1 if the traveler is actively performing a travel task, 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .isBlocked readonly int isBlocked Description Returns 1 if the traveler is currently blocked by an accumulation cell allocation request. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .object readonly TaskExecuter object Description Returns the TaskExecuter that is associated with this A* traveler. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .travelPath readonly travelPath Description Accesses the traveler's current travel path. A traveler's travelPath describes the current sequence of A* grid cells that the traveler will traverse in traveling to its current destination. The travelPath can be accessed using array-type usage, including using the \"length\" property and array accessors. for (int i = 1; i <= traveler.travelPath.length; i++) { AStar.Cell cell = traveler.travelPath[i].cell; ... } Each element of the travelPath includes the AStar.Cell to be traversed. AStar.Cell cell = traveler.travelPath[1].cell; The travelPath also includes an indexOf() method to find which index (if any) corresponds to a given grid cell. int index = traveler.travelPath.indexOf(cell); The travelPath also includes an isBlocked() method. This would be used when you dynamically change the A* grid and want to see if you should preempt the traveler to have it recalculate its path based on the new grid change. if (traveler.travelPath.isBlocked()) { ... } Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .addAllocation() addAllocation( AStar.Allocation alloc , int force , int notifyPendingAllocations ) Parameters alloc The target allocation to add. force Pass 1 to force the allocation to be added regardless of collisions with other allocations, 0 otherwise. notifyPendingAllocation Pass 1 to cause colliding travelers to create an OnBlock event when they collide with this allocation. Description For future use. Adds an accumulation allocation to the traveler's scheduled cell allocations. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. For normal users, this method is automatically called by navigatePath (). Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .arriveAtBridge() arriveAtBridge( int pathIndex ) Parameters pathIndex The index of the travel path associated with the bridge. Description For future use. Notifies A* that the traveler has arrived at a bridge/elevator associated with a specific cell in its travel path, handing over control to the bridge. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .calculatePath() calculatePath( Object object , int flags = 0 ) calculatePath( Vec3 dest , int flags = 0 ) Parameters object The target destination object. dest The target destination model location. flags Configuration flags for the calculation. Description For future use. Calculates the A* path to the destination and stores it in the traveler's travelPath property. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .findCollision() findCollision( AStar.Allocation alloc , int ignoreSameTravelerAllocs ) Parameters alloc The target allocation to add. ignoreSameTravelerAllocs If 1, the search will not look at allocations for this traveler. Description For future use. Finds an existing allocation that \"collides\" with the passed allocation. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .finishPath() finishPath( ) Description For future use. Notifies A* that the traveler is finished traveling. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .getAllocations() getAllocations( double time = -1 ) Parameters time The target time for retrieving the set of allocations. Description Gets an array of AStar.Allocation s that the traveler has currently allocated or is scheduled to have allocated at a given time. The allocations can be accessed as an array, including using the length property and array accessor. var allocations = traveler.getAllocations(); for (int i = 1; i <= allocations.length; i++) { AStar.Cell cell = allocations[i].cell; } Note that a traveler's allocations are correlated with, yet distinct from, a traveler's travelPath . Each entry in a traveler's path can have up to 3 allocations associated with it, specifically when the traveler is traveling diagonally. For example, if a traveler's travelPath includes a traversal from cell (4, 4) to cell (5, 5), the traveler would need to allocate, as part of traversing that diagonal, cells (4, 5) and (5, 4), in addition to the destination cell (5, 5). Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler .navigatePath() navigatePath( int startAtIndex ) Parameters startIndex The one-based travel path index of the cell to first travel one. Description For future use. Initiates the logic that builds kinematics and cell allocations along the traveler's calculated path. This method call is meant for advanced users who are implementing their own A* allocation/navigation schemes. You should only call this method if you are overriding default path calculation/navigation mechanism by listening to traveler events like OnCalculatePath, etc. Do no remove, this fixes the anchor on doc.flexsim.com AStar.Traveler Constructor AStar.Traveler( treenode te ) Parameters te A TaskExecuter that is connected to the A* network as an A* Traveler. Description Constructs an AStar.Traveler object based on the given TaskExecuter. Casting from a treenode is not correct. AStar.Traveler traveler = AStar.Traveler(te); // correct AStar.Traveler traveler = te; // incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.html",
        "title": "FlexScript Class - Conveyor",
        "content": "Inherits from Object Description A class that provides properties and methods for monitoring and controlling a conveyor. Properties acceleration Gets the conveyor's acceleration. currentSpeed Gets the conveyor's current speed. deceleration Gets the conveyor's deceleration. defaultSpeed Gets the conveyor's default speed, which is the speed the conveyor starts with at the beginning of the simulation. itemData Accesses conveyor-specific data associated with items on the conveyor length Gets the conveyor's simulated length. motor Gets the conveyor's assigned motor. slugBuilder Gets data associated with the conveyor's slug-building status. targetSpeed Gets or sets the conveyor's current target speed. width Gets the conveyor's width. Static Methods estimateConveyTime Estimates the time for an item to travel from one part of the conveyor system to another. sendItem Sets an item's target destination in the conveyor system. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .acceleration readonly double acceleration Description Gets the conveyor's acceleration. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .currentSpeed readonly double currentSpeed Description Gets the conveyor's current speed. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .deceleration readonly double deceleration Description Gets the conveyor's deceleration. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .defaultSpeed readonly double defaultSpeed Description Gets the conveyor's default speed, which is the speed the conveyor starts with at the beginning of the simulation. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .itemData readonly itemData Description Accesses conveyor-specific data associated with items on the conveyor This gives access to the set of Conveyor.Item s associated with the items currently on the conveyor. Use itemData.length to get the number of items on the conveyor. Conveyor conveyor = param(1); int numItems = conveyor.itemData.length; Note that itemData.length may be different than conveyor. subnodes .length, as some items may be partially on the conveyor, but not in the conveyor's subtree. conveyover.itemData.length should always be greater than or equal to conveyor.subnodes.length. conveyor.subnodes.length; // the number of items in the conveyor's subtree conveyor.itemData.length; // the total number of all items partially-or-wholly on the conveyor. To access item data by rank, you can index into conveyor.itemData with the [ ] operator. conveyor.itemData[1]; // gets the data associated with the most downstream item on the conveyor conveyor.itemData[conveyor.itemData.length]; // gets the data associated with the most upstream item on the conveyor You can also access the itemData associated with a specific item, again using the [ ] operator. Object item = param(2); Conveyor.Item conveyorItem = conveyor.itemData[item]; See Conveyor.Item for more information. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .length readonly double length Description Gets the conveyor's simulated length. If the conveyor does not use a virtual length, this is the geometric length of the conveyor. If the conveyor uses a virtual length, it is the virtual length. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .motor readonly Object motor Description Gets the conveyor's assigned motor. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .slugBuilder readonly Conveyor.SlugBuilder slugBuilder Description Gets data associated with the conveyor's slug-building status. This object only exists if the conveyor is connected to a merge controller object. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .targetSpeed double targetSpeed Description Gets or sets the conveyor's current target speed. If you set this value, the conveyor's speed will change to the target speed. The conveyor's acceleration/deceleration will determine how long it takes to get to the target speed. Reversing Conveyor Direction If you set a conveyor's targetSpeed to a non-zero negative value, the conveyor will reverse direction. When a conveyor's direction is reversed the following things happen. All stopped items on the conveyor will be fully resumed. Each item on the conveyor will be set to a moving state. Each item's target destination will be erased. For example, if the item previously had been sent to a point in the system using the Conveyor . sendItem () method, that destination will be forgotten. Each item will regenerate its list of traversal points, e.g. photo eyes, decision points, etc. as if the item is entering the conveyor at the point where it is when the conveyor is reversed. Specific caveats that you should be aware of: If an item is straddling 1 two inline transfers when direction reversal happens, then both conveyors that the item is straddling 1 must be reversed at the same time. Doing otherwise will result in undefined behavior. An item cannot straddle 1 more than two conveyors when direction reversal happens, or else an exception will be thrown. No updates are made to the internal routing table when a conveyor's direction is reversed. This means, for routing purposes, i.e. when sending an item to a destination point in the system, the conveyor is always assumed to be conveying in its original direction. 1 Straddle : when any part of an item's entry space is over more than one conveyor at the same time. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .width readonly double width Description Gets the conveyor's width. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .estimateConveyTime() static double estimateConveyTime( Object origin , double n_a , Object dest , double n_a , double itemLength , int flags = 0 ) Parameters origin The origin point from which to estimate the convey time. This must be either a conveyor or a point on a conveyor, such as a decision point or photo eye. dest The destination point for the time estimation. This must be either a conveyor or a point on a conveyor, such as a decision point or photo eye. n_a Reserved for future use. Must be 0. itemLength Defines an item length for the estimation algorithm. This can affect the result depending on how speeds are defined in conveyor transfers. flags This can either be 0, or CONV_ESTIMATE_STANDARD_SPEEDS. If 0 (default), the estimation algorithm will assume slug-build conveyors will convey at their slug release speed. If CONV_ESTIMATE_STANDARD_SPEEDS is defined, the estimation algorithm will use normal conveying speeds. Returns double The estimated simulation time it will take for an item of the given size to convey from the point where the item's center is at the origin point, to the point where the item's center is at the destination point, assuming no blockage. Description Estimates the time for an item to travel from one part of the conveyor system to another. DecisionPoint src = current; DecisionPoint dest = current.outObjects[1]; Object item = param(1); double conveyTime = Conveyor.estimateConveyTime(src, 0, dest, 0, item.size.x); In making the estimation, the algorithm will always assume default conveyor speeds (not current conveyor speeds). Estimation speeds for slug-building conveyors are determined by the flags parameter. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor .sendItem() static void sendItem( Object item , Object dest ) Parameters item The item whose target destination is to be set. dest The target destination. This must be a reference to a point within the conveyor system that is reachable from the item's current position on the conveyor system. This must either be a decision point, a photo eye, a station, or an exit transfer. Description Sets an item's target destination in the conveyor system. Conveyor.sendItem(item, current.outObjects[1]); Once an item's target destination is set, the item will take the shortest distance route, in the conveyor system, to that defined destination."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.DecisionPoint.html",
        "title": "FlexScript Class - Conveyor.DecisionPoint",
        "content": "Inherits from Object Description A class that provides properties for monitoring a conveyor decision point, photo eye, or station. Properties activeItem Gets the item that is currently \"active\" associated with the decision point. conveyor Gets the conveyor that the decision point is currently attached to. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.DecisionPoint .activeItem readonly Object activeItem Description Gets the item that is currently \"active\" associated with the decision point. For a photo eye, this is the item that is covering the photo eye. For a decision point, it is the item that has arrived but not yet continued from the decision point. For a station, it is the item that is currently being processed, or being considered for processing, at the station. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.DecisionPoint .conveyor readonly Conveyor conveyor Description Gets the conveyor that the decision point is currently attached to."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.Item.html",
        "title": "FlexScript Class - Conveyor.Item",
        "content": "Description A class that provides properties and methods for monitoring and controlling an item on a conveyor. The Conveyor.Item is NOT the same as the item object. In other words, you can't just set a Conveyor.Item to the item itself. Object item = param(2); Conveyor.Item conveyorItem = item; // COMPILE ERROR Instead, the Conveyor.Item is associated with , not the same as the item. It contains data associated with a specific item's conveyance on a specific conveyor. Thus, you need both the conveyor and the item to get access to the Conveyor.Item. You get access to Conveyor.Item using the Conveyor . itemData property. Object item = param(2); Conveyor conveyor = param(3); Conveyor.Item conveyorItem = conveyor.itemData[item]; Properties currentDistance Gets the item's current distance on the conveyor. destination Gets/sets the item's current target destination. entrySpace Gets the item's defined entry space. movingSpace Gets the item's defined moving space. object Gets the object (the flow item) associated with this Conveyor.Item. orientation Gets/sets the item's orientation on the conveyor. position Gets the item's current position on the conveyor. rotation Gets the item's current offset rotation on the conveyor. size Gets the item's size on the conveyor. stoppingSpace Gets the item's defined stopping space. timeKinematics Gets a reference to a time-based kinematics node associated with the item. totalDistance Gets the item's current total distance traveled within the conveyor system. travelKinematics Gets a reference to a travel-based kinematics node associated with the item. Methods resume Resumes a stopped item's movement on the conveyor. stop Stops the item's movement on the conveyor. turn Turns the item 90 degrees along a given axis, and re-configures the item's length, width, height, and spacing values. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .currentDistance readonly double currentDistance Description Gets the item's current distance on the conveyor. This is the same as position .x, except that offset kinematics are not considered here. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .destination Object destination Description Gets/sets the item's current target destination. If you set this, it should be set to a point on the conveyor system, such as a decision point or photo eye. See also Conveyor . sendItem () Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .entrySpace readonly double entrySpace Description Gets the item's defined entry space. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .movingSpace readonly double movingSpace Description Gets the item's defined moving space. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .object Object object Description Gets the object (the flow item) associated with this Conveyor.Item. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .orientation int orientation Description Gets/sets the item's orientation on the conveyor. Setting this value sets the item's orientation, and re-configures the item's length, width, height, and spacing values. The orientaton parameter defines one of 24 possible orientations for the item. It is a macro of the format CONV_ITEM_M_BY_N , where M is the axis of the item that points forward along the conveyor, and N is the axis pointing left along the conveyor. M must not be the same as N. M and N can be one of the following: X - item positive x axis X_NEG - item negative x axis Y - item positive y axis Y_NEG - item negative y axis Z - item positive z axis Z_NEG - item negative z axis Examples: CONV_ITEM_X_BY_Y - This is the default item orientation, which is that the item's positive x axis is aligned with the conveyor's forward axis, and the item's positive y axis is aligned with the conveyor's left axis. If you were to imagine a person traveling down the conveyor, in this orientation the person would be standing up facing forward on the conveyor. CONV_ITEM_Z_NEG_BY_Y - Here the item's negative z axis is aligned with the conveyor's forward axis, and the item's positive y axis is aligned with the conveyor's left axis. If this were a person, he would be lying on his back traveling feet first down the conveyor. CONV_ITEM_Y_NEG_BY_Z_NEG - Here the item's negative y axis is aligned with the conveyor's forward axis, and the item's negative z axis is aligned with the conveyor's left axis. If this were a person, he would be lying on his back, sideways with his right side leading down the conveyor. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .position readonly Vec3 position Description Gets the item's current position on the conveyor. This is associated with the center of the item. x is distance from the start of the conveyor, y is distance offset from the center of the conveyor, and z is vertical distance from the conveyor plane. If kinematics have been added to the item using the timeKinematics and/or travelKinematics properties, position will reflect those applied kinematics. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .rotation readonly Vec3 rotation Description Gets the item's current offset rotation on the conveyor. The rotation elements will only be non-zero if you have applied kinematics to the item using the timeKinematics and/or travelKinematics properties. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .size readonly Vec3 size Description Gets the item's size on the conveyor. An item's size on the conveyor is dependent on its orientation , and thus may not correspond directly with the item object's x, y and z sizes. The x element corresponds to the item's size along the conveyor's forward axis, y corresponds to the item's size along the conveyor's left axis, and z corresponds to the item's size along the conveyor's up axis. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .stoppingSpace readonly double stoppingSpace Description Gets the item's defined stopping space. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .timeKinematics readonly treenode timeKinematics Description Gets a reference to a time-based kinematics node associated with the item. This is for use in defining animations and offsets for the item that are dependent on simulation time. Get the node, then use kinematics commands to add time-based movement to the item. Note that kinematics-based offsets do not affect standard conveying logic like accumulation, photo eye cover/clear points, etc. The conveyor system applies kinematics offsets only visually. This means you will likely not want to offset the item in the x direction (forward or backward along the conveyor), unless you are willing to have accumulation and other conveyor logic fire at weird points visually. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .totalDistance readonly double totalDistance Description Gets the item's current total distance traveled within the conveyor system. Usually this is only used when adding kinematics to the item's travel-based kinematics using the travelKinematics property, as the \"start time\" for adding to the kinematics corresponds to the total distance traveled. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .travelKinematics readonly treenode travelKinematics Description Gets a reference to a travel-based kinematics node associated with the item. This is for use in defining animations and offsets for the item that are dependent on conveyor distance. Get the node, then use kinematics commands to add travel-based movement to the item. When adding kinematics to this node, start times, speeds, and accelerations should not be in simulation time, but should rather be defined in \"distance\" units. Start times should be relative to the item's totalDistance . For example, if you add a kinematic that starts at \"time\" 10, and travels at \"speed\" 5, this means that the kinematic will start when the item reaches travel position 10, and will travel 5 units of distance for every distance unit that the item conveys. Note that kinematics-based offsets do not affect standard conveying logic like accumulation, photo eye cover/clear points, etc. The conveyor system applies kinematics offsets only visually. This means you will likely not want to offset the item in the x direction (forward or backward along the conveyor), unless you are willing to have accumulation and other conveyor logic fire at weird points visually. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .resume() void resume( int force = 0 ) Parameters force If 1, the method will ignore the accumulation of stop() calls, and immediately start the item moving. Description Resumes a stopped item's movement on the conveyor. Paired with stop (). Calls to stop() will accumulate, meaning if you call stop() twice on the same item, by default you must call resume() twice to actually resume the item. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .stop() void stop( ) Description Stops the item's movement on the conveyor. Paired with resume (). Calls to stop() will accumulate, meaning if you call stop() twice on the same item, by default you must call resume () twice to actually resume the item. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Item .turn() void turn( int axis , int clockwise ) Parameters axis The conveyor axis to turn the item on. This can be on of the following: CONV_AXIS_UP - the conveyor's up axis CONV_AXIS_LEFT - the conveyor's left axis CONV_AXIS_FORWARD - the conveyor's forward axis clockwise Should be 1 or 0, defining whether to turn the item clockwise around the given axis. Description Turns the item 90 degrees along a given axis, and re-configures the item's length, width, height, and spacing values. The turning logic assumes there is enough space around the item that it will not overlap another item once turned. Behavior is undefined if there is not enough space."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.MergeController.html",
        "title": "FlexScript Class - Conveyor.MergeController",
        "content": "Description Allows access to the lanes of a MergeController object Conveyor.MergeController mc = model().subnodes[\"MergeController1\"]; var slugBuilder = mc.lanes[1]; Properties lanes Allows array-like access (by index) to the lanes of a MergeController as Conveyor.SlugBuilder objects. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.MergeController .lanes readonly lanes Description Allows array-like access (by index) to the lanes of a MergeController as Conveyor.SlugBuilder objects."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.Motor.html",
        "title": "FlexScript Class - Conveyor.Motor",
        "content": "Inherits from Object Description A class that provides properties and methods for controlling a conveyor motor. Properties speedRatio Gets/sets conveyor speeds as a ratio of their default speeds. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.Motor .speedRatio double speedRatio Description Gets/sets conveyor speeds as a ratio of their default speeds. The motor's speed ratio allows you to control proportional speeds of the conveyors that are attached to the motor. Generally you will set this to a value between 0.0 and 1.0, although this range is not required. The value always resets to 1.0 when the simulation starts. When you set it, it sets each attached conveyor's targetSpeed property to that conveyor's default Speed times the speed ratio. For example, if you have a motor that is attached to two conveyors with default speeds of 2.0 and 3.0 m/s respectively, then if you set that motor's speed ratio to 0.7, it will set the first conveyor's speed to 1.4, and the second conveyor's speed to 2.1."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Conveyor/Conveyor.SlugBuilder.html",
        "title": "FlexScript Class - Conveyor.SlugBuilder",
        "content": "Description Accesses data dealing with a conveyor's slug building state This object can be accessed through the Conveyor . slugBuilder property, or through the Conveyor.MergeController . lanes property. This object only exists if the conveyor is connected to a merge controller object. Properties conveyor Returns the conveyor associated with this slug builder isClear Returns 1 if all necessary control points are clear for the current slug to be released, 0 otherwise. isEnabled Gets or sets whether the conveyor associated with this slugBuilder will build slugs. lastAddedItem Gets the item that was last added to the slug. state Gets the slug-building state of the slug builder Methods makeReady Manually marks the slug ready for release release Manually releases a slug. Details Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .conveyor readonly Conveyor conveyor Description Returns the conveyor associated with this slug builder Conveyor c = slugBuilder.conveyor; Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .isClear readonly int isClear Description Returns 1 if all necessary control points are clear for the current slug to be released, 0 otherwise. if (slugBuilder.isClear) slugBuilder.release(); Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .isEnabled int isEnabled Description Gets or sets whether the conveyor associated with this slugBuilder will build slugs. Before disabling, be sure that the lane does not have a slug. slugBuilder.isEnabled = 1; Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .lastAddedItem readonly Object lastAddedItem Description Gets the item that was last added to the slug. Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .state readonly int state Description Gets the slug-building state of the slug builder 0 - None 1 - Building - a slug has begun building. 2 - Ready - the slug has acheived its ready criteria 3 - Releasing - the slug is being released Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .makeReady() makeReady( ) Description Manually marks the slug ready for release This method can be used to make a slug ready before it would otherwise become ready. slugBuilder.makeReady(); Do no remove, this fixes the anchor on doc.flexsim.com Conveyor.SlugBuilder .release() release( ) Description Manually releases a slug. Can be used to release a slug, disregarding ready requirements and lane clear requirements. slugBuilder.release()"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Animation.html",
        "title": "FlexScript Class - Animation",
        "content": "Description A class that represents an object animation. Methods resume Resumes an animation from some point in the middle of the animation. start Starts an animation. stop Stops an animation. update Updates an animation. Details Do no remove, this fixes the anchor on doc.flexsim.com Animation .resume() void resume( int resumeAtType = 0 , double resumeAtVal = 0 ) Parameters resumeAtType Used in conjuction with resumeAtVal to define where in the animation to resume. Can be one of the following values: RESUME_AT_SAME_POS : (Default) Resumes the animation from the same point where it was last stopped. RESUME_AT_NEXT_KEYFRAME : Advances the animation to the next keyframe from the point where it was last stopped, then resumes. RESUME_AT_TIME : Resumes the animation at a specific time in the animation. resumeAtVal Only used if resumeAtType is RESUME_AT_TIME, in which case this value defines the time at which to resume. Description Resumes an animation from some point in the middle of the animation. current.animations[\"Walk\"].resume(); Do no remove, this fixes the anchor on doc.flexsim.com Animation .start() void start( int speedType = 0 , double speedValue = 0 , int repeatType = 0 , double repeatValue = 0 ) Parameters speedType Used in conjuction with speedValue to manipulate the speed with which the animation is run. Can be one of the following values: SPEED_TYPE_DEFAULT : The animation will run at the standard speed. SPEED_TYPE_DURATION : The animation will run such that its total duration is equal to speedValue. SPEED_TYPE_MULTIPLIER : The animation's run speed will be multiplied by speedValue. In other words, a speedValue of 2 will make the animation run at double-speed. speedValue See speedType. repeatType Used in conjunction with repeatValue to define how the animation will repeat. If not REPEAT_TYPE_DEFAULT, this will override the repeat type and value specified in the Animation Creator. Valid values are as follows: REPEAT_TYPE_DEFAULT : The animation will use its default repeat information defined in the Animation Creator REPEAT_TYPE_NONE : The animation will run just once. REPEAT_TYPE_NR_ITERATIONS : The animation will repeat (repeatValue) times before finishing. REPEAT_TYPE_USE_TIME : The animation will repeat indefinitely, but will start the animation over once it gets (repeatValue) time into the animation, which may be before the end of the animation. REPEAT_TYPE_TIME_AFTER_END : The animation will repeat indefinitely, but will finish the animation and wait (repeatValue) time units before starting the animation again. REPEAT_TYPE_LAST_FRAME : The animation will run just once, but then repeat the last frame of the animation indefinitely. repeatValue See repeatType. Description Starts an animation. current.animations[\"Walk\"].start(); Do no remove, this fixes the anchor on doc.flexsim.com Animation .stop() void stop( ) Description Stops an animation. current.animations[\"Walk\"].stop(); Do no remove, this fixes the anchor on doc.flexsim.com Animation .update() void update( double updateTime = -1 ) Parameters updateTime The simulation time on which to base the update. If not passed, it will update based on the current simulation time. Description Updates an animation. The method will update all of the positions of an object's animation components based on the update time and the keyframes defined in the animation. Usually you do not need to call this explicitly, since FlexSim's engine automatically updates active animations when it repaints any 3D windows. However, if your simulation logic is dependent on sub-component positions that change during an animation, you should call update() before getting those positions, or else the retrieved data will be based on the last time a window was repainted. This will cause different results with each simulation run. current.animations[\"Walk\"].update();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Color.html",
        "title": "FlexScript Class - Color",
        "content": "Description A class containing rgba values for an object's color. Properties a The color's alpha component. b The color's blue component. g The color's green component. r The color's red component. Methods lerp Linearly interpolates between two colors. Constructor Color Constructs a color by rgba component values. Static Properties aqua An aqua color black A black color blue A blue color brown A brown color gray A gray color green A green color lightBlue A light blue color lime A lime color orange An orange color pink A pink color purple A purple color red A red color silver A silver color teal A teal color white A white color yellow A yellow color Static Methods byNumber Returns a color by a uniquely identifying number. fromPalette Returns a color from a color palette. random Returns a random color. Operators - Substracts one color from another. != Compares two colors. * Multiplies a color by another color or a scale factor. / Divides a color by a factor. + Adds two colors together. += Assigns the color to be the sum of two colors. -= Assigns the color to be the difference of two colors. == Compares two colors. Details Do no remove, this fixes the anchor on doc.flexsim.com Color .a double a Description The color's alpha component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .b double b Description The color's blue component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .g double g Description The color's green component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .r double r Description The color's red component. Color components are in the range 0-1 Do no remove, this fixes the anchor on doc.flexsim.com Color .lerp() Color lerp( Color targetColor , double t ) Parameters targetColor The color to interpolate to. t A ratio between 0 and 1 that defines the percentage to interpolate from the current color to targetColor. Returns Color The resulting interpolated color. Description Linearly interpolates between two colors. The following example code changes current's color 20% toward red. current.color = current.color.lerp(Color.red, 0.2); Do no remove, this fixes the anchor on doc.flexsim.com Color Constructor Color( double r , double g , double b , double a = 1 ) Parameters r The red component, in the range 0-1. g The green component, in the range 0-1. b The blue component, in the range 0-1. a The alpha component, in the range 0-1. Description Constructs a color by rgba component values. current.color = Color(0.1, 0.6, 0.3); Do no remove, this fixes the anchor on doc.flexsim.com Color .aqua static readonly Color aqua Description An aqua color current.color = Color.aqua; Do no remove, this fixes the anchor on doc.flexsim.com Color .black static readonly Color black Description A black color current.color = Color.black; Do no remove, this fixes the anchor on doc.flexsim.com Color .blue static readonly Color blue Description A blue color current.color = Color.blue; Do no remove, this fixes the anchor on doc.flexsim.com Color .brown static readonly Color brown Description A brown color current.color = Color.brown; Do no remove, this fixes the anchor on doc.flexsim.com Color .gray static readonly Color gray Description A gray color current.color = Color.gray; Do no remove, this fixes the anchor on doc.flexsim.com Color .green static readonly Color green Description A green color current.color = Color.green; Do no remove, this fixes the anchor on doc.flexsim.com Color .lightBlue static readonly Color lightBlue Description A light blue color current.color = Color.lightBlue; Do no remove, this fixes the anchor on doc.flexsim.com Color .lime static readonly Color lime Description A lime color current.color = Color.lime; Do no remove, this fixes the anchor on doc.flexsim.com Color .orange static readonly Color orange Description An orange color current.color = Color.orange; Do no remove, this fixes the anchor on doc.flexsim.com Color .pink static readonly Color pink Description A pink color current.color = Color.pink; Do no remove, this fixes the anchor on doc.flexsim.com Color .purple static readonly Color purple Description A purple color current.color = Color.purple; Do no remove, this fixes the anchor on doc.flexsim.com Color .red static readonly Color red Description A red color current.color = Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .silver static readonly Color silver Description A silver color current.color = Color.silver; Do no remove, this fixes the anchor on doc.flexsim.com Color .teal static readonly Color teal Description A teal color current.color = Color.teal; Do no remove, this fixes the anchor on doc.flexsim.com Color .white static readonly Color white Description A white color current.color = Color.white; Do no remove, this fixes the anchor on doc.flexsim.com Color .yellow static readonly Color yellow Description A yellow color current.color = Color.yellow; Do no remove, this fixes the anchor on doc.flexsim.com Color .byNumber() static Color byNumber( int number ) Parameters number The identifying number. Returns Color The resulting color. Description Returns a color by a uniquely identifying number. item.color = Color.byNumber(item.labelVal); The number passed in refers to an index in the standard colors spectrum, as follows: 1 - red 2 - green 3 - blue 4 - yellow 5 - orange 6 - purple 7 - lime 8 - pink 9 - gray 10 - teal 11 - aqua 12 - brown 13 - light blue 14 - silver 15 - white For numbers above 15, a unique color will generated based on an algorithm. Do no remove, this fixes the anchor on doc.flexsim.com Color .fromPalette() static Color fromPalette( Variant value , Variant palette = nullvar ) Parameters value The value to get a color for. palette The Color Palette to get a color from. Returns Color The resulting color. Description Returns a color from a color palette. A palette can either be specified by name or by node. The color palette will look up the color assigned to the given value, asserting a color for the value if necessary. However, if the palette is using a gradient, the palette will linearly interpolate between the color values already defined by the palette. If no palette is specified, then the resulting color will be generated using the given value. Do no remove, this fixes the anchor on doc.flexsim.com Color .random() static Color random( int stream = 0 ) Parameters stream The random number stream to use. Returns Color The resulting color. Description Returns a random color. current.color = Color.random(); Do no remove, this fixes the anchor on doc.flexsim.com Color .operator - Color operator -( Color other ) Parameters other The color to subtract from this color. Returns Color The resulting color. Description Substracts one color from another. Resulting components will be clamped to the range 0-1. current.color = Color.aqua - Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator != int operator !=( Color other ) Parameters other The color to compare to this color. Returns int True if the two colors are different, false otherwise. Description Compares two colors. int isNotRed = current.color != Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator * Color operator *( Color other ) Color operator *( double factor ) Parameters other The color to multiply this color by. factor A scale factor to multiply each component by. Returns Color The resulting color. Description Multiplies a color by another color or a scale factor. When a Color is passed, the operation will perform per-component multiplication. Resulting components will be clamped to the range 0-1. current.color = Color.aqua * Color.red; current.color = Color.aqua * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator / Color operator /( double factor ) Parameters factor The factor to divide each component by. Returns Color The resulting color. Description Divides a color by a factor. current.color = Color.aqua / 2; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator + Color operator +( Color other ) Parameters other The color to add this one to. Returns Color The resulting color. Description Adds two colors together. Resulting components will be clamped to the range 0-1. current.color = Color.blue + Color.red; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator += Color operator +=( Color other ) Parameters other The color to add this one to. Returns Color The resulting color and assigns it to the variable. Description Assigns the color to be the sum of two colors. Resulting components will be clamped to the range 0-1. current.color += Color.blue; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator -= Color operator -=( Color other ) Parameters other The color to subtract from this one. Returns Color The resulting color and assigns it to the variable. Description Assigns the color to be the difference of two colors. Resulting components will be clamped to the range 0-1. current.color -= Color.blue; Do no remove, this fixes the anchor on doc.flexsim.com Color .operator == int operator ==( Color other ) Parameters other The color to compare to this color. Returns int True if the two colors are exactly the same, false otherwise. Description Compares two colors. int isRed = current.color == Color.red;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/DateTime.html",
        "title": "FlexScript Class - DateTime",
        "content": "Description A class containing functions for getting and manipulating dates and times. This DateTime class allows you to create and manipulate dates and times that are stored as FlexSim time. FlexSim time is defined as the number of seconds since January 1st, 1601. The specified Model Time Units does not affect FlexSim time. It is always in seconds. Model Settings When you start a new model, you can specify the start date and time of the model. That, and model stop times, can later be changed through the Run Time Options on the Simulation Control Bar. You can also specify the date and time display format in the Model Settings window. These formats can be used when displaying a DateTime as a string or for creating a DateTime. Excel Import/Export When you import dates and times from an Excel document, you can do so as either strings or as numbers which are in Excel time. This DateTime class can be used to convert those strings or Excel time into FlexSim time. For exporting, you can write formatted dates and/or times to a global table using the DateTime. toString () method. Dashboard Charts Dashboard charts like the Time Plot can use FlexSim time to display the dates and times along the X or Y axis. This can be done by recording DateTimes in a Statistics Collector. Properties day The day of the month dayOfWeek The day of the week hour The hour of the day millisecond The millisecond of the second. minute The minute of the hour. month The month of the year second The second of the minute. totalDays The number of days since January 1st, 1601. totalHours The number of hours since January 1st, 1601. totalMilliseconds The number of milliseconds since January 1st, 1601. totalMinutes The number of minutes since January 1st, 1601. totalSeconds The number of seconds since January 1st, 1601. value The value of the date and time in FlexSim time. year The year Methods toString Converts the DateTime into a human readable string. Constructor DateTime Constructs a DateTime. Static Methods compose Constructs a new DateTime from component parts. days Constructs a new DateTime from the number of days. fromExcelTime Converts Excel time into FlexSim time. hours Constructs a new DateTime from the number of hours. milliseconds Constructs a new DateTime from the number of milliseconds. minutes Constructs a new DateTime from the number of minutes. seconds Constructs a new DateTime from the number of seconds. Operators - Substracts one DateTime from another. != Compares two DateTimes. + Adds two DateTimes together. += Assigns the DateTime to be the sum of two DateTimes. < Compares two DateTimes. <= Compares two DateTimes. -= Assigns the DateTime to be the difference of two DateTimes. == Compares two DateTimes. > Compares two DateTimes. >= Compares two DateTimes. Details Do no remove, this fixes the anchor on doc.flexsim.com DateTime .day readonly double day Description The day of the month Value ranges from 1 to 31. double currentDay = Model.dateTime.day; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .dayOfWeek readonly double dayOfWeek Description The day of the week Value ranges from 1 to 7 with 1 being Sunday. double currentDayOfWeek = Model.dateTime.dayOfWeek; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .hour readonly double hour Description The hour of the day Value ranges from 0 to 23 with the 0 hour being from 12:00:00AM to 12:59:59AM. double currentHour = Model.dateTime.hour; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .millisecond readonly double millisecond Description The millisecond of the second. Value ranges from 0 to 999. double currentMillisecond = Model.dateTime.millisecond; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .minute readonly double minute Description The minute of the hour. Value ranges from 0 to 59. double currentMinute = Model.dateTime.minute; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .month readonly double month Description The month of the year Value ranges from 1 to 12. double currentMonth = Model.dateTime.month; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .second readonly double second Description The second of the minute. Value ranges from 0 to 59. double currentSecond = Model.dateTime.second; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalDays readonly double totalDays Description The number of days since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current day. double totalDays = Model.dateTime.totalDays; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalHours readonly double totalHours Description The number of hours since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current hour. double totalHours = Model.dateTime.totalHours; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalMilliseconds readonly double totalMilliseconds Description The number of milliseconds since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current millisecond. double totalMilliseconds = Model.dateTime.totalMilliseconds; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalMinutes readonly double totalMinutes Description The number of minutes since January 1st, 1601. This will return a floating point number where the fraction represents the time into the current minute. double totalMinutes = Model.dateTime.totalMinutes; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .totalSeconds readonly double totalSeconds Description The number of seconds since January 1st, 1601. This is equivalent to DateTime.value or putting the DateTime into a double. double totalSeconds = Model.dateTime.totalSeconds; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .value readonly double value Description The value of the date and time in FlexSim time. This property is equivalent to DateTime. totalSeconds or putting a DateTime into a double. double currentTime = Model.dateTime.value; double currentTime = Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .year readonly double year Description The year double currentYear = Model.dateTime.year; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .toString() string toString( string format = ) Parameters format If format is NULL, the default windows date/time format will be used. Description Converts the DateTime into a human readable string. This method uses the windows settings for formatting. When using a custom format, the following formatting options are available: Specifier Explanation Example %% A % character % %n New line character %t Horizontal tab character Year %Y The four digit year 2017 %y The last two digits of the year 17 %C The first two digits of the year 20 Month %b The abbreviated month name Oct %B The full month name October %m The month as a number (1 - 12) 10 Week %U The week of the year as a number with Sunday being the first day of the week (00 - 53) 15 %W The week of the year as a number with Monday being the first day of the week (00 - 53) 15 Days of the year/month %j The day of the year as a three digit number (001 - 366) 045 %d The day of the month as a two digit number (01 - 31) 05 %e The day of the month as a single digit number (1 - 31) 5 Day of the week %a The abbreviated weekday name Fri %A The full weekday name Friday %w The weekday as a number where Sunday is 0 (0 - 6) 3 Hour, minute, second %H The hour as a two digit number, 24 hour clock (00 - 23) 08 %I The hour as a two digit number, 12 hour clock (01 - 12) 08 %M The minute as a two digit number (00 - 59) 30 %S The second as a two digit number (00 - 60) 25 Other %c The standard date and time (windows default setting) 09/24/17 08:00:00 %x The standard date (windows default setting) 09/24/17 %X The standard time (windows default setting) 08:00:00 %D Equivalent to %m/%d/%y 09/24/17 %F Equivalent to %Y-%m-%d 2017-09-24 %r The 12-hour clock time (based on windows setting) 08:00:00 %R Equivalent to %H:%M 08:00 %T Equivalent to %H:%M:%S 08:00:00 %p AM or PM (based on windows setting) AM %z The offset from UTC time -0600 %Z The time zone name or abbreviation Mountain Daylight Time string currentDateTime = Model.dateTime.toString(); string currentDateTime = Model.dateTime.toString(\"%H:%M:%S\"); Do no remove, this fixes the anchor on doc.flexsim.com DateTime Constructor DateTime( double time ) DateTime( string date , string format = 0 ) DateTime( int days , int hours , int minutes = 0 , int seconds = 0 , int milliseconds = 0 ) Parameters time The number of seconds since January 1st, 1601. date The string representation of a date. format If format is NULL, the default windows date/time format will be used. days The number of days to add to the final DateTime hours The number of hours (usually less than 24) to add to the final DateTime minutes The number of minutes (usually less than 60) to add to the final DateTime seconds The number of seconds (usually less than 60) to add to the final DateTime milliseconds The number of milliseconds (usually less than 1000) to add to the final DateTime Description Constructs a DateTime. DateTime theDate = DateTime(3600); The time can be treated as a duration if you add two DateTimes together. For example, DateTime futureDate = Model.dateTime + DateTime(340); //Add 340 seconds to the current model time The second constructor can be used to create a DateTime from a string representation of a date. See toString () for formatting options. DateTime theDate = DateTime(\"12/31/2019 8:00:00 AM\", \"%m/%d/%Y %I:%M:%S %p\"); The third constructor can be used to create a DateTime that is rounded down to the nearset important marker. For example, if the current model time is between 8:00 and 9:00 on a particular day, you could use the following code to create a date time that represents 8:00 on that same day: DateTime roundedToHour = DateTime(Model.dateTime.totalDays, Model.dateTime.hours); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .compose() static DateTime compose( int year , int month = 1 , int day = 1 , int hour = 0 , int minute = 0 , int second = 0 , int millisecond = 0 ) Parameters year The year of the DateTime month The month of the DateTime (1 - 12) day The day of the DateTime (1 - 28,29,30,31) hour The hour of the DateTime (0 - 23) minute The minute of the DateTime (0 - 59) second The second of the DateTime (0 - 59) millisecond The millisecond of the DateTime (0 - 999) Description Constructs a new DateTime from component parts. DateTime composedDateTime = DateTime.compose(2019, 12, 31, 23, 59, 59); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .days() static DateTime days( double days ) Description Constructs a new DateTime from the number of days. DateTime oneDay = DateTime.days(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .fromExcelTime() static DateTime fromExcelTime( double excelTime ) Description Converts Excel time into FlexSim time. When performing an Excel Import , the Data Distinction can be set to Values Only . This will cause cells that store dates to be imported into FlexSim as numbers that are in Excel time. This method will convert that Excel time into FlexSim time. DateTime dateTime = DateTime.fromExcelTime(excelTime); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .hours() static DateTime hours( double hours ) Description Constructs a new DateTime from the number of hours. DateTime oneHour = DateTime.hours(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .milliseconds() static DateTime milliseconds( double milliseconds ) Description Constructs a new DateTime from the number of milliseconds. DateTime oneMillisecond = DateTime.milliseconds(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .minutes() static DateTime minutes( double minutes ) Description Constructs a new DateTime from the number of minutes. DateTime oneMinute = DateTime.minutes(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .seconds() static DateTime seconds( double seconds ) Description Constructs a new DateTime from the number of seconds. DateTime oneSecond = DateTime.seconds(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator - DateTime operator -( DateTime other ) Parameters other The DateTime to subtract from this DateTime. Returns DateTime The resulting DateTime. Description Substracts one DateTime from another. DateTime subTwoDates = Model.dateTime - dateTime; DateTime subOneDay = Model.dateTime - DateTime.days(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator != int operator !=( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if the two DateTimes are different, false otherwise. Description Compares two DateTimes. int differentDates = dateTime != Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator + DateTime operator +( DateTime other ) Parameters other The DateTime to add this one to. Returns DateTime The resulting DateTime. Description Adds two DateTimes together. DateTime addTwoDates = Model.dateTime + dateTime; DateTime addOneDay = Model.dateTime + DateTime.days(1); Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator += DateTime operator +=( DateTime otherDateTime ) Parameters otherDateTime The DateTime to add to this one. Returns DateTime The resulting DateTime. Description Assigns the DateTime to be the sum of two DateTimes. thisDateTime += otherDateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator < int operator <( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is less than other, false otherwise. Description Compares two DateTimes. int pastDate = dateTime < Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator <= int operator <=( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is less than or equal to other, false otherwise. Description Compares two DateTimes. int pastDate = dateTime <= Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator -= DateTime operator -=( DateTime otherDateTime ) Parameters otherDateTime The DateTime to subtract from this one. Returns DateTime The resulting DateTime. Description Assigns the DateTime to be the difference of two DateTimes. thisDateTime += otherDateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator == int operator ==( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if the two DateTimes are exactly the same, false otherwise. Description Compares two DateTimes. int sameDate = dateTime == Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator > int operator >( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is greater than other, false otherwise. Description Compares two DateTimes. int futureDate = dateTime > Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com DateTime .operator >= int operator >=( DateTime other ) Parameters other The DateTime to compare to this DateTime. Returns int True if this DateTime is greater than or equal to other, false otherwise. Description Compares two DateTimes. int futureDate = dateTime >= Model.dateTime;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Delay.html",
        "title": "FlexScript Class - Delay",
        "content": "Description An opaque awaitable type, specifically used in coroutines, representing an abstract delay time. await Delay(5); // awaits 5 model time units var delay = Delay.seconds(22); // represents a 22 second delay await delay; // wait for 22 seconds await delay; // wait again for another 22 seconds A Delay represents an 'abstract' delay time in that the suspend/resume mechanism is not started when the Delay object is created, but each time the await statement is invoked, resulting in possibly multiple different delay actions. Constructor Delay Returns a delay object representing a delay time in model time units. Static Methods days Returns a delay object representing a delay time in days. hours Returns a delay object representing a delay time in hours. minutes Returns a delay object representing a delay time in minutes. realTime Returns a delay object representing a real-time delay in seconds. seconds Returns a delay object representing a delay time in seconds. Details Do no remove, this fixes the anchor on doc.flexsim.com Delay Constructor Delay( double timeUnits ) Parameters timeUnits The number of model time units to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in model time units. await Delay(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .days() static Delay days( double numDays ) Parameters numDays The number of days to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in days. await Delay.days(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .hours() static Delay hours( double numHours ) Parameters numHours The number of hours to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in hours. await Delay.hours(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .minutes() static Delay minutes( double numMinutes ) Parameters numMinutes The number of minutes to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in minutes. await Delay.minutes(5); Do no remove, this fixes the anchor on doc.flexsim.com Delay .realTime() static Delay realTime( double numSeconds ) Parameters numSeconds The number of real-time seconds to delay. Returns Delay The resulting delay. Description Returns a delay object representing a real-time delay in seconds. await Delay.realTime(0); This is mostly used as part of UI development by FlexSim developers, but it is nevertheless available to users. You should not use this in your simulation logic or else you will have repeatability issues. Rather, awaiting real time delays can be useful for things like auto-build scripts. It allows you to execute logic asynchronously. Awaiting a real time delay of 0 will post a message to FlexSim's message queue. The logic that called the FlexScript code will finish, and when FlexSim continues processing its message queue and reaches the posted message, it will then resume the coroutine. If you await a real time delay greater than 0, then FlexSim will create a platform-dependent timer, will wait the defined time, and then will resume the coroutine. Do no remove, this fixes the anchor on doc.flexsim.com Delay .seconds() static Delay seconds( double numSeconds ) Parameters numSeconds The number of seconds to delay. Returns Delay The resulting delay. Description Returns a delay object representing a delay time in seconds. await Delay.seconds(5);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Event.html",
        "title": "FlexScript Class - Event",
        "content": "Description An opaque awaitable type, specifically used in coroutines, representing an event owned by a specific object, that can be 'awaited', or listened to. Event e = current.event(“OnEntry”); await e; await e; // awaiting the same Event object a second time will await the event a second time. // The listening is initiated when the await statement executes, not when // the event object is created. In other words, an instance of an Event object is // a reference to an object’s event that may fire multiple times, not a single // execution of an object’s event. await current.event(“OnExit”); await Event.evaluation(current.labels[“MyCode”]); Event evaluationEvent = Event.evaluation(current.labels[“MyCode”]); while (true) { await evaluationEvent; … } An event represents a generic reference to a specific object's OnEntry, OnExit, etc., event. It is not a reference to a single execution of an object's event. This means you can await the same Event multiple times, and each await may be resumed on different executions of the object's event. In other words, the listening mechanism is initiated when the await statement executes, not when the Event object is created. Static Methods evaluation Returns an Event object representing the evaluation of a node in the tree. Details Do no remove, this fixes the anchor on doc.flexsim.com Event .evaluation() static Event evaluation( treenode node ) Parameters node The node whose evaluation you want to listen for. Returns Event The resulting Event. Description Returns an Event object representing the evaluation of a node in the tree. await Event.evaluation(current.labels[\"MyCode\"]);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/EventLog.html",
        "title": "FlexScript Class - EventLog",
        "content": "Description A class that provides access to the event log. Using the EventLog class, you can add custom events to the Event Log. EventLog.info(\"MyCustomEvent\"); if (/*something is unusual*/) { EventLog.warn(\"MyCustomEvent\", 0, 0, \"Something is unusual\"); } if (/*something is wrong*/) { EventLog.error(\"MyCustomEvent\", 0, 0, \"Something is wrong\"); } if (/*something is terribly wrong*/) { EventLog.fatal(\"MyCustomEvent\", 0, 0, \"Something is terribly wrong\"); } The logging methods are: info() warn() error() fatal() When used, each method logs a new event in the event log at the current model time and at the current level. The event is logged in any active log: the model log, the system log, or both. If no event logs are active, then these methods do nothing. The only required parameter for the logging methods is the event parameter. It is best to use a short but meaningful name so that filtering by the event makes sense. The remainder of the parameters (two node parameters and four string parameters) are optional and arbitrary. You can check whether any logs are active using the enabled property: if (EventLog.enabled) { string p1 = /*expensive computation*/; EventLog.info(\"MyCustomEvent\", 0, 0, p1); } Static Properties enabled Returns whether logging is currently enabled. Static Methods error Log an Error-level event at the current time. fatal Log a Fatal-level event at the current time. info Log an Info-level event at the current time. warn Log a Warn-level event at the current time. Details Do no remove, this fixes the anchor on doc.flexsim.com EventLog .enabled static readonly int enabled Description Returns whether logging is currently enabled. If true, then events are being logged to the model Event Log, the system Event Log, or both. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .error() static error( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log an Error-level event at the current time. Error-level events are often used to indicate that the simulation cannot continue or that the results are invalid. Consider stopping the simulation manually if you log an Error-level event. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .fatal() static fatal( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log a Fatal-level event at the current time. Fatal-level events are often used to indicate that data loss or corruption has occurred. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .info() static info( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log an Info-level event at the current time. Info-level events are often used to indicate that something normal or expected has occurred. All model logic events are Info-level events. Do no remove, this fixes the anchor on doc.flexsim.com EventLog .warn() static warn( string event , treenode object = 0 , treenode involved = 0 , string p1 = \"\" , string p2 = \"\" , string p3 = \"\" , string p4 = \"\" ) Parameters event The name of the event. object The primary object associated with the event. involved The involved object associated with the event. p1 Data for P1 associated with the event. p2 Data for P2 associated with the event. p3 Data for P3 associated with the event. p4 Data for P4 associated with the event. Description Log a Warn-level event at the current time. Warn-level events are often used to indicate that something unexpected has occurred but that the simulation can continue to operate."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Group.html",
        "title": "FlexScript Class - Group",
        "content": "Description A class for grouping objects. Properties length The number of members in the group. Methods addMember Adds an object to the group. indexOf Returns the index of the object in the group. isMember Checks if the object is a member of the group. removeMember Removes an object from the group. toFlatArray Converts the group and any nested groups into a single Array of group members. Constructor Group Creates a reference to a group. Operators [] Gets an individual group member by index. Details Do no remove, this fixes the anchor on doc.flexsim.com Group .length int length Description The number of members in the group. int numMembers = Group(\"Staff\").length; Do no remove, this fixes the anchor on doc.flexsim.com Group .addMember() void addMember( treenode object ) Parameters object The object to add to the group. Returns void Description Adds an object to the group. group.addMember(Model.find(\"Processor1\")); Do no remove, this fixes the anchor on doc.flexsim.com Group .indexOf() int indexOf( treenode object ) Parameters object The object to find the index of. Returns int The index of the object in the group, 0 if it is not a member. Description Returns the index of the object in the group. int index = group.indexOf(Model.find(\"Processor1\")); Do no remove, this fixes the anchor on doc.flexsim.com Group .isMember() int isMember( treenode object , int recursive ) Parameters object The object to look for in the group. recursive Should groups contained by this group also be searched. Returns int A 1 if the object is a member of the group, 0 otherwise. Description Checks if the object is a member of the group. This code checks if Processor1 is a direct member of the group: group.isMember(Model.find(\"Processor1\")); This code checks if Processor1 is a member of the group or the member of any of the groups contained by the group: group.isMember(Model.find(\"Processor1\"), 1); Do no remove, this fixes the anchor on doc.flexsim.com Group .removeMember() void removeMember( treenode object ) Parameters object The object to remove from the group. Returns void Description Removes an object from the group. group.removeMember(Model.find(\"Processor1\")); Do no remove, this fixes the anchor on doc.flexsim.com Group .toFlatArray() Array toFlatArray( ) Returns Array A single, flat Array of all the group members of the group and the members of any nested groups. Description Converts the group and any nested groups into a single Array of group members. Array members = group.toFlatArray(); Do no remove, this fixes the anchor on doc.flexsim.com Group Constructor Group( string name ) Parameters name The name of the group. Description Creates a reference to a group. Group parts = Group(\"Packers\"); Do no remove, this fixes the anchor on doc.flexsim.com Group .operator [] Object operator []( int index ) Parameters index The index of the desired group member. Returns Object The group member at the specified index. Description Gets an individual group member by index. Object obj = Group(\"Machines\")[2];"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/JSON.html",
        "title": "FlexScript Class - JSON",
        "content": "Description A class containing common JSON functions. Static Methods parse Parses a JSON string and returns a Variant. stringify Converts a Variant into a JSON string. Details Do no remove, this fixes the anchor on doc.flexsim.com JSON .parse() static Variant parse( string json ) Parameters json The JSON string. Returns Variant The parsed JSON as a Variant. Description Parses a JSON string and returns a Variant. Array array = JSON.parse(\"[0, \\\"string\\\"]\"); Map map = JSON.parse(\"{\\\"number\\\" : 0, \\\"string\\\" : \\\"string\\\"}\"); Do no remove, this fixes the anchor on doc.flexsim.com JSON .stringify() static string stringify( Variant value ) Parameters value The Variant value. Returns string The resulting JSON string. Description Converts a Variant into a JSON string. string str1 = JSON.stringify([0, \"string\"]); Map map; map[\"number\"] = 0; map[\"string\"] = \"string\"; string str2 = JSON.stringify(map);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Map.html",
        "title": "FlexScript Class - Map",
        "content": "Description An associative array of Variant keys and values. A Map contains a set of keys. Each key has an associated value. You can use the key to retrieve the value. For example: Map map; map[5] = 10; int x = map[5]; // x is 10 This example demonstrates that the Map uses the [] operator, like the Array . However the Map's [] operator has two important differences: A Map can use any value as a key: Map map; map[\"Hello\"] = \"world\"; map[Model.find(\"Processor1\")] = 10; The Map's [] will always add the value in the [] to the Map. Map map; map[1]; map[2]; map[3]; // The map now has three keys in it. // The default value associated with // each key is a null variant. A Variant can hold a Map value. For more information, please see the Variant topic. Dynamic Properties A Map can use dynamic properties to interact with string keys: Map map; map.Key1 = 1; // identical to map[\"Key1\"] = 1; map.MyKeyName = 3; // identical to map[\"MyKeyName\"] = 3; return map.Key1; // NOT identical to map[\"Key1\"] When you use dynamic properties to write to the map, the property is asserted. This is the same behavior as using the [] operator. However, when you read the map with dynamic properties, you will get an exception if that key is not present. Examining a Map In order to determine if a key is in the map, you can use the find () method: var iter = map.find(3); if (iter) { // the key is contained in the map print(iter.key, iter.value); } else { // the key is not contained in the map print(\"key not found\"); } In order to examine each element of a map, you can use the begin () and end () methods in a for loop: for (var iter = map.begin(); iter != map.end(); iter++) { print(iter.key, iter.value); } As an alternative, you could use the keys property to access all the keys in the array, and use a for loop with that array: Array keys = map.keys; for (int i = 1; i <= keys.length; i++) { print(keys[i], map[keys[i]]); } Note that the keys property constructs a new array, with a copy of all the keys in the map. begin(), end(), and find() The methods begin (), end (), and find () all return a map iterator object. This object has the following properties and operators: key - the key referenced by this iterator. value - the value associated with the key referenced by this iterator. operator bool() - casting the iterator as a bool will return true if the iterator is valid, and false if it is not. operator++ - incrementing the iterator will move it to the next key in the map. If the iterator is at the end of the map, this operator invalidates the iterator. Nodes as Keys You can use a treenode as a key. You can also use a container (a Map or an Array) that contains a treenode as a key. However, if that treenode (e.g. a flowitem) is destroyed, then that key is said to be lost. The keys array will not include those keys, and an iterator objects (returned from begin (), end (), and find ()) will skip those values. Key Ordering The Map class is a hash map, so keys in the map are in not guaranteed to be in any order. They are not sorted by comparison, and they are not in insertion order. Even if it appears that you can depend on some particular ordering, that ordering could easily change in a bug fix release or new version of FlexSim. Properties keys Returns an array of all key values in the map. stringKeys Dynamically gets and sets the value for string keys. values Returns an aray of all associated values in the map. Methods begin Returns an iterator to the first key/value pair in the map. clear Removes all keys and associated values from the Map. clone Returns a deep copy of the Map. end Returns an invalid iterator. find Returns an iterator to the given key if it is present, or an invalid iterator if the key is not present. remove Removes the given key and its associated value from the map if it is present. Operators != Compares two maps for equality, returning true if they are unequal. [] Asserts the given key, and returns its associated value. = Assigns this map to the same data as the given map. == Compares two maps for equality. Details Do no remove, this fixes the anchor on doc.flexsim.com Map .keys readonly Array keys Description Returns an array of all key values in the map. The array is a new copy of all keys values. If keys and values are both accessed without any intervening insertions or removals, the resulting arrays will be ordered the same way. Do no remove, this fixes the anchor on doc.flexsim.com Map .stringKeys readonly stringKeys Description Dynamically gets and sets the value for string keys. Allows getting and setting the value for string keys, similar to using labels: // asserts the key \"MyKey\" and sets its value to 5 map.MyKey = 5; // reads the value for the key \"SKU_1\" // throws if \"SKU_1\" is not a key in the map Variant value = map.SKU_1; Do no remove, this fixes the anchor on doc.flexsim.com Map .values readonly Array values Description Returns an aray of all associated values in the map. he array is a new copy of all associated values. If keys and values are both accessed without any intervening insertions or removals, the resulting arrays will be ordered the same way. Do no remove, this fixes the anchor on doc.flexsim.com Map .begin() begin( ) Returns An iterator to the first key/value pair in the map Description Returns an iterator to the first key/value pair in the map. If the map is empty, then this method returns an iterator equal to the end () Do no remove, this fixes the anchor on doc.flexsim.com Map .clear() clear( ) Description Removes all keys and associated values from the Map. Do no remove, this fixes the anchor on doc.flexsim.com Map .clone() Map clone( ) Returns Map A copy of the map Description Returns a deep copy of the Map. Map map1; Map map2 = map1; // map2 points at the same map as map1 map1[10] = 2; // map2 can access the key 10 Map map3 = map1.clone(); map3[20]; // does not affect map1 or map2 Do no remove, this fixes the anchor on doc.flexsim.com Map .end() end( ) Returns An invalid iterator Description Returns an invalid iterator. This method is usually used as part of a for-loop: for (var iter = map.begin(); iter != map.end(); iter++) { /*... */} When the iterator used in the loop advances past the end of the map, it becomes invalid, and comparing it to the end() iterator will return true. Do no remove, this fixes the anchor on doc.flexsim.com Map .find() find( Variant key ) Parameters key The key to check for in the map Returns An iterator, invalid if the key is not in the map. Description Returns an iterator to the given key if it is present, or an invalid iterator if the key is not present. This method does not add the given key to the map, and so can be used to check for a key without adding it. Do no remove, this fixes the anchor on doc.flexsim.com Map .remove() int remove( Variant key ) Parameters key The key to remove Returns int True if the key was removed, false if the key was not present. Description Removes the given key and its associated value from the map if it is present. Do no remove, this fixes the anchor on doc.flexsim.com Map .operator != int operator !=( Map ) Parameters The map to compare to this map Returns int True if the maps are unequal Description Compares two maps for equality, returning true if they are unequal. Returns the opposite of the == operator. Do no remove, this fixes the anchor on doc.flexsim.com Map .operator [] Variant operator []( Variant key ) Variant operator []( Map key ) Parameters key The key to use in retrieving an associated value Returns Variant The value associated with the key Description Asserts the given key, and returns its associated value. If the key is not present in the map, it is added, and its associated value is set to a null Variant. The value is returned by reference, so you can modify it: map[10] += 1; // increments the value for key 10 by 1 Do no remove, this fixes the anchor on doc.flexsim.com Map .operator = Map operator =( Variant ) Parameters The map to assign this map to Returns Map The assigned map Description Assigns this map to the same data as the given map. After the assignment, both map variables will point at the same Map object. This is a shallow assignment. Do no remove, this fixes the anchor on doc.flexsim.com Map .operator == int operator ==( Map ) Parameters The map to compare this map to Returns int True if the maps are equal Description Compares two maps for equality. Two maps are equal if the both point to the same Map object, or if they both have the same set of keys, and for all keys, the values are equal."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Mat4.html",
        "title": "FlexScript Class - Mat4",
        "content": "Description Represents a matrix for performing space/vector transformations. Methods inverse Returns a matrix that is the inverse of this matrix. rotate Rotates the transformation matrix around a defined vector. scale Scales the matrix by a defined x/y/z vector. translate Translates the matrix by a defined x/y/z vector. Constructor Mat4 Constructs a matrix. Operators != Compares two matrices. * Multiplies a matrix by another vector or a scale factor. == Compares two matrices. Details Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .inverse() Mat4 inverse( ) Returns Mat4 The inverted matrix. Description Returns a matrix that is the inverse of this matrix. This method creates new matrix that is the inverse of the matrix and returns it. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .rotate() Mat4 rotate( double degrees , Vec3 vec ) Parameters degrees The number of degrees to rotate. vec The vector around which to rotate. Returns Mat4 The owning rotated matrix. Description Rotates the transformation matrix around a defined vector. This method rotates the owning matrix and returns a reference to itself, instead of creating a copy of the matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .scale() Mat4 scale( Vec3 vec ) Parameters vec The vector to scale by. Returns Mat4 The owning scaled matrix. Description Scales the matrix by a defined x/y/z vector. This method scales the owning matrix and returns a reference to itself, instead of creating a copy of the matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .translate() Mat4 translate( Vec3 vec ) Parameters vec The vector to translate by. Returns Mat4 The owning translated matrix. Description Translates the matrix by a defined x/y/z vector. This method translates the owning matrix and returns a reference to itself, instead of creating a copy of the matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 Constructor Mat4( Variant values ) Mat4( ) Parameters values The array of 16 values to construct the matrix by. The array can either be 4x4 or flat 16. Description Constructs a matrix. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .operator != int operator !=( Mat4 mat ) Parameters mat The matrix to compare to this matrix. Returns int True if the two matrices are different, false otherwise. Description Compares two matrices. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .operator * Mat4 operator *( Mat4 mat ) Vec3 operator *( Vec3 vec ) Mat4 operator *( double scalar ) Parameters mat The matrix to multiply this matrix by. vec The vector to transform by the matrix. scalar The scalar value to multiply each element of the matrix by. Returns Mat4 The resulting transformed vector/matrix. Description Multiplies a matrix by another vector or a scale factor. When a Vec4 is passed, the operation will perform per-component multiplication. Do no remove, this fixes the anchor on doc.flexsim.com Mat4 .operator == int operator ==( Mat4 mat ) Parameters mat The matrix to compare to this matrix. Returns int True if both matrices are exactly the same, false otherwise. Description Compares two matrices."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Math.html",
        "title": "FlexScript Class - Math",
        "content": "Description A class containing common math functions. Static Properties pi Gets an approximate value for pi. Static Methods acos Returns the arc cosine of an angle in radians. asin Returns the arc sine of an angle in radians. atan Returns the arc tangent of an angle in radians. atan2 Returns the arc tangent of an angle in radians. ceil Returns the smallest integer value not less than value. cos Returns the cosine of an angle in radians. degrees Converts an angle in radians to degrees. exp Returns (e ^ value) where e is 2.7183 fabs Returns the absolute value of the number. factorial Returns the factorial of the number. floor Returns the largest integer value not larger than the number. fmod Returns the remainder of dividing the numerator by the denominator. frac Returns the decimal part of a number. log Returns the natural logarithm of a number. log10 Returns the base-10 logarithm of a number. max Returns the greater of two numbers, or the max value of an array. min Returns the lesser of two numbers, or the min value of an array. pow Returns the base raised to the power of the exponent. radians Converts an angle in degrees to radians. round Rounds the value to the specified precision. sign Returns the sign of the number. sin Returns the sine of an angle in radians. sqr Returns the number squared. sqrt Returns the square root of the number. tan Returns the tangent of an angle in radians. trunc Removes the fractional part of the number. Details Do no remove, this fixes the anchor on doc.flexsim.com Math .pi static double pi Description Gets an approximate value for pi. The internal representation is 3.14159265358979. Math.cos(Math.pi) // -1 Do no remove, this fixes the anchor on doc.flexsim.com Math .acos() static double acos( double ratio ) Parameters ratio The ratio - adjacent/hypotenuse - of a right triangle. Returns double The arc cosine of the angle in radians. Description Returns the arc cosine of an angle in radians. acos() is the inverse of the cos () method. Ratio should never be less than -1 or greater than 1. double angle = Math.degrees(Math.acos(xdist / totaldist)); Do no remove, this fixes the anchor on doc.flexsim.com Math .asin() static double asin( double ratio ) Parameters ratio The ratio - opposite/hypotenuse - of a right triangle. Returns double The arc sine of the angle in radians. Description Returns the arc sine of an angle in radians. asin() is the inverse of the sin () method. Ratio should never be less than -1 or greater than 1. double angle = Math.degrees(Math.asin(ydist / totaldist)); Do no remove, this fixes the anchor on doc.flexsim.com Math .atan() static double atan( double ratio ) Parameters ratio The ratio - opposite/adjacent - of a right triangle. Returns double The arc tangent of the angle in radians. Description Returns the arc tangent of an angle in radians. atan() is the inverse of the tan () method. Ratio should be within the interval [- pi /2,+ pi /2]. Notice that because of the sign ambiguity, the atan() method cannot determine with certainty in which quadrant the angle falls only by its tangent value. You can use the atan2 () method if you need to determine the quadrant. double theArcTangent = Math.atan(Math.radians(45)); //0.6658 Do no remove, this fixes the anchor on doc.flexsim.com Math .atan2() static double atan2( double dy , double dx ) Parameters dy The length of the \"opposite\" side of a right triangle. dx The length of the \"adjacent\" side of a right triangle. Returns double The arc tangent of the angle in radians. Description Returns the arc tangent of an angle in radians. The returned angle will increase from 0 to pi /2 beginning at the positive x axis in a counter-clockwise direction, and will decrease from 0 to - pi /2 in a clockwise direction. If both parameters of atan2 are 0, the function returns 0. atan2 is well defined for every point other than the origin, even if value1 equals 0 and value2 does not equal 0. double theAngle = Math.degrees(Math.atan2(-1,1.732)); // -30 Do no remove, this fixes the anchor on doc.flexsim.com Math .ceil() static int ceil( double value ) Parameters value The value to ceiling. Returns int The smallest integer value not less than value. Description Returns the smallest integer value not less than value. double myval = Math.ceil(2.3); // 3. double myval = Math.ceil(3.8); // 4. double myval = Math.ceil(-2.3); // -2. double myval = Math.ceil(-3.8); // -3. See also floor (). Do no remove, this fixes the anchor on doc.flexsim.com Math .cos() static double cos( double angle ) Parameters angle The angle in radians. Returns double The cosine of the angle in radians. Description Returns the cosine of an angle in radians. The angle should be less than 263 radians and greater than -263 radians to avoid loss of significance in the result. double theCosine = Math.cos(Math.radians(180)); //-1 See also acos (). Do no remove, this fixes the anchor on doc.flexsim.com Math .degrees() static double degrees( double angle ) Parameters angle The angle in radians. Returns double The angle in degrees. Description Converts an angle in radians to degrees. One radian is 180/ pi degrees (~57.2958). double degrees = Math.degrees(Math.pi); // 180 See also radians (). Do no remove, this fixes the anchor on doc.flexsim.com Math .exp() static double exp( double exponent ) Parameters exponent The exponent of e. Returns double e raised to an exponent. Description Returns (e ^ value) where e is 2.7183 On overflow, the function returns INF (infinite) and on underflow, exp returns 0. double value = Math.exp(3); // 20.0855 See also log () which is the inverse of exp(). Do no remove, this fixes the anchor on doc.flexsim.com Math .fabs() static double fabs( double value ) Parameters value The passed in value. Returns double The absolute value of the number. Description Returns the absolute value of the number. This code checks if the operator is within 5 units of the current object along the x-axis. if(Math.fabs(current.location.x - operator.location.x) < 5) Do no remove, this fixes the anchor on doc.flexsim.com Math .factorial() static double factorial( double value ) Parameters value The passed in value. Returns double The factorial of the number. Description Returns the factorial of the number. double val = Math.factorial(5); // 120 = 1*2*3*4*5 Do no remove, this fixes the anchor on doc.flexsim.com Math .floor() static int floor( double value ) Parameters value The passed in value. Returns int The largest integer value not larger than the number. Description Returns the largest integer value not larger than the number. double myval = Math.floor(2.3); // 2. double myval = Math.floor(3.8); // 3. double myval = Math.floor(-2.3); // -3. double myval = Math.floor(-3.8); // -4. See also ceil () and trunc (). Do no remove, this fixes the anchor on doc.flexsim.com Math .fmod() static double fmod( double numerator , double denominator ) Parameters numerator The value being divided. denominator The value to divide by. Returns double The remainder of dividing the numerator by the denominator. Description Returns the remainder of dividing the numerator by the denominator. If the denominator is 0.0, fmod returns a quiet NaN. Math.fmod(10,3) // 1.0 This method is great for getting a repeating set of numbers. So long as the denominator is unchanged, incrementing the numerator and calling fmod will return a set of numbers that keeps repeating itself between 0 and 1 minus the denominator. The following condition, if used in the OnExit of an object in the model, would be true with every 10th flowitem that exits, starting with the 10th flowitem. if(Math.fmod(current.stats.output.value,10) == 0) Do no remove, this fixes the anchor on doc.flexsim.com Math .frac() static double frac( double value ) Parameters value The passed in value. Returns double The decimal part of the specified floating point value. Description Returns the decimal part of a number. Math.frac(3.124) // 0.124 Math.frac(-16.12) // -0.12 Math.frac(12) // 0.0 Do no remove, this fixes the anchor on doc.flexsim.com Math .log() static double log( double value ) Parameters value The passed in value. Returns double The natural logarithm of a number. Description Returns the natural logarithm of a number. If value is negative, this function returns an indefinite (same as a quiet NaN). If value is 0, it returns INF (infinite). Math.log(9); // 2.1972 log() is the inverse of the exp () method. Math.log(Math.exp(3.2)); // 3.2 Do no remove, this fixes the anchor on doc.flexsim.com Math .log10() static double log10( double value ) Parameters value The passed in value. Returns double The base-10 logarithm of a number. Description Returns the base-10 logarithm of a number. If value is negative, this function returns an indefinite (same as a quiet NaN). If value is 0, it returns INF (infinite). Math.log10(1000); // 3 log10() is the inverse of the pow () method with base 10. Math.log10(Math.pow(10, 3.2)); // 3.2 Do no remove, this fixes the anchor on doc.flexsim.com Math .max() static double max( double value1 , double value2 ) static double max( Array array ) Parameters value1 The first value to compare. value2 The second value to compare. array The array of values to compare. Returns double The greater of two numbers, or the max value of an array. Description Returns the greater of two numbers, or the max value of an array. double max = Math.max(6,7); // 7 double max = Math.max([3,9,4]); // 9 The following code will generate a normally distributed random number between and inclusive of 0 and 100: double haulLoad = Math.min(Math.max(normal(55, 27), 0), 100); See also min (). Do no remove, this fixes the anchor on doc.flexsim.com Math .min() static double min( double value1 , double value2 ) static double min( Array array ) Parameters value1 The first value to compare. value2 The second value to compare. array The array of values to compare. Returns double The lesser of two numbers, or the min value of an array. Description Returns the lesser of two numbers, or the min value of an array. double min = Math.min(6,7); // 6 double max = Math.min([3,9,4]); // 3 The following code will generate a normally distributed random number between and inclusive of 0 and 100: double haulLoad = Math.min(Math.max(normal(55, 27), 0), 100); See also max (). Do no remove, this fixes the anchor on doc.flexsim.com Math .pow() static double pow( double base , double exponent ) Parameters base The value being raised to a power. exponent The exponent the base will be raised to. Returns double The base raised to the power of the exponent. Description Returns the base raised to the power of the exponent. double myval = Math.pow(2,3); // 8. Do no remove, this fixes the anchor on doc.flexsim.com Math .radians() static double radians( double angle ) Parameters angle The angle in degrees. Returns double The angle in radians. Description Converts an angle in degrees to radians. 1 degree is pi /180 radians. double radians = Math.radians(180); // 3.1415 (pi) See also degrees (). Do no remove, this fixes the anchor on doc.flexsim.com Math .round() static double round( double value , int precision = 0 ) Parameters value The value being rounded. precision The number of decimal places to round to. Returns double The value rounded to the specified precision. Description Rounds the value to the specified precision. A fractional part 0 < f < 0.5 will be rounded down. A fractional part 0.5 <= f < 1.0 will be rounded up. Using a precision of 0 (or not specifying it) will round to the nearest integer. int myNum = Math.round(3.6269); // 4 int myNum = Math.round(3.6269, 2); // 3.63 Do no remove, this fixes the anchor on doc.flexsim.com Math .sign() static int sign( double value ) Parameters value The passed in value. Returns int The sign of the number. Description Returns the sign of the number. int sign = Math.sign(-100); // -1 int sign = Math.sign(100); // 1 int sign = Math.sign(0); // 0 Do no remove, this fixes the anchor on doc.flexsim.com Math .sin() static double sin( double angle ) Parameters angle The angle in radians. Returns double The sine of the angle in radians. Description Returns the sine of an angle in radians. The angle should be less than 263 radians and greater than -263 radians to avoid loss of significance in the result. double theSine = Math.sin(Math.radians(90)); // 1 See also asin (). Do no remove, this fixes the anchor on doc.flexsim.com Math .sqr() static double sqr( double value ) Parameters value The passed in value. Returns double The number squared. Description Returns the number squared. int square = Math.sqr(4); // 16 See also sqrt (). Do no remove, this fixes the anchor on doc.flexsim.com Math .sqrt() static double sqrt( double value ) Parameters value The passed in value. Returns double The square root of the number. Description Returns the square root of the number. int root = Math.sqrt(25); // 5 See also sqr (). Do no remove, this fixes the anchor on doc.flexsim.com Math .tan() static double tan( double angle ) Parameters angle The angle in radians. Returns double The tangent of the angle in radians. Description Returns the tangent of an angle in radians. The angle should be less than 263 radians and greater than -263 radians to avoid loss of significance in the result. double theTangent = Math.tan(Math.radians(45)); // 1 See also atan (). Do no remove, this fixes the anchor on doc.flexsim.com Math .trunc() static int trunc( double value ) Parameters value The passed in value. Returns int The fractional part of the number. Description Removes the fractional part of the number. Truncates the value. int val = Math.trunc(2.478); // 2 int sign = Math.sign(2.95); // 2 See also round ()."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Model.html",
        "title": "FlexScript Class - Model",
        "content": "Description A class containing data and functions for the model. Methods find Finds a node in the model's subtree by its path. Static Properties dateTime The current date and time in FlexSim time. nextStopDateTime The date and time in FlexSim time of the next stop time. nextStopTime The simulation time of the next stop time. parameters Provides access to the model's parameters. performanceMeasures Provides access to the model's performance measures. startDateTime The model's start date and time in FlexSim time. statisticalTime The current simulation time with respect to when stats were last reset. time The current simulation time. warmupDateTime The warmup date and time in FlexSim time. warmupTime The total warmup time. Static Methods getDateTime Returns a date and time in FlexSim time from the given simulation time. getTime Returns the simulation time from the given FlexSim time. Details Do no remove, this fixes the anchor on doc.flexsim.com Model .find() treenode find( string path ) Parameters path The path, starting at the model node, that addresses the target node. Returns treenode If the addressed node exists, the method returns that node, otherwise NULL. Description Finds a node in the model's subtree by its path. This is the same as calling treenode . find () on the model node: model().find(\"ObjectName\") treenode obj = Model.find(\"ObjectName\"); Do no remove, this fixes the anchor on doc.flexsim.com Model .dateTime static readonly DateTime dateTime Description The current date and time in FlexSim time. DateTime currentDateTime = Model.dateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .nextStopDateTime static readonly DateTime nextStopDateTime Description The date and time in FlexSim time of the next stop time. DateTime nextStop = Model.nextStopDateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .nextStopTime static readonly double nextStopTime Description The simulation time of the next stop time. If no stop time is defined this returns 0. If the current simulation time has passed the last stop time this returns the largest double value. double stopTime = Model.nextStopTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .parameters static readonly parameters Description Provides access to the model's parameters. Getting a parameter value Model.parameters.Parameter1 Model.parameters[\"Parameter1\"].value Getting a parameter value, passing in up to three arguments // Passed-in values are available as param(1), param(2), and param(3) Model.parameters[\"Parameter1\"].evaluate(param1, param2, param3) Setting a parameter value Model.parameters.Parameter1 = 5; Model.parameters[\"Parameter1\"].value = 5; List parameter tables Model.parameters.tableNames // Array[1]: [Parameters] List parameters Model.parameters.names() // Array[1]: [Parameter1] Model.parameters.names(\"Parameters\") // Array[1]: [Parameter1] Do no remove, this fixes the anchor on doc.flexsim.com Model .performanceMeasures static readonly performanceMeasures Description Provides access to the model's performance measures. Getting a performance measure value Model.performanceMeasures.PerformanceMeasure1 Model.performanceMeasures[\"PerformanceMeasure1\"].value List performance measure tables Model.performanceMeasures.tableNames // Array[1]: [PerformanceMeasures] List performance measures Model.performanceMeasures.names() // Array[1]: [PerformanceMeasure1] Model.performanceMeasures.names(\"PerformanceMeasures\") // Array[1]: [PerformanceMeasure1] Do no remove, this fixes the anchor on doc.flexsim.com Model .startDateTime static readonly DateTime startDateTime Description The model's start date and time in FlexSim time. The model start date and time is define in the Model Settings. DateTime startTime = Model.startDateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .statisticalTime static readonly double statisticalTime Description The current simulation time with respect to when stats were last reset. If the model has a warmup time, this will return the difference between the simulation time and the warmup time. statisticalTime = time - warmupTime double statTime = Model.statisticalTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .time static readonly double time Description The current simulation time. double currentTime = Model.time; Do no remove, this fixes the anchor on doc.flexsim.com Model .warmupDateTime static readonly DateTime warmupDateTime Description The warmup date and time in FlexSim time. DateTime warmupTime = Model.warmupDateTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .warmupTime static readonly double warmupTime Description The total warmup time. If no warmup time is defined this returns 0. When the warmup time is reached, statistics on objects and tracked variables will be reset. double warmup = Model.warmupTime; Do no remove, this fixes the anchor on doc.flexsim.com Model .getDateTime() static DateTime getDateTime( double modelTime ) Parameters modelTime The simulation time. Returns DateTime The DateTime represented by the simulation time. Description Returns a date and time in FlexSim time from the given simulation time. DateTime dateTime = Model.getDateTime(100); Do no remove, this fixes the anchor on doc.flexsim.com Model .getTime() static double getTime( DateTime dateTime ) Parameters dateTime The date and time in FlexSim time. Returns double The simulation time represented by the FlexSim time. Description Returns the simulation time from the given FlexSim time. DateTime date = DateTime(\"8:00:00 AM Wed 19 Jul 2017\"); double theTime = Model.getTime(date);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/RegExResult.html",
        "title": "FlexScript Class - RegExResult",
        "content": "Description A class that handles the results of a RegEx match The RegExResult class is returned from the string . match () method. The RegExResult can be used to iterate over all matches in the string. This is usually done with as shown in the following example: string toMatch = \"Processor1 Processor200\"; Array matches; var result = toMatch.match(/([a-zA-Z]+)(\\d+)/g); while ((matches = result.findNextMatch()).length) { pt(matches.join(\", \")); pr(); } // Text printed to Output Console: // Processor1, Processor, 1 // Processor200, Processor, 200 The string is not actually searched until one of the methods or properties are called. Then, the string is only searched until the requested information can be provided. Once a match is found, it is cached, so that future calls that require that match can look it up. Unless you mark the RegEx as global (using the \"g\" flag), this object will only search until it finds the first match. None of the methods or properties will cause it to search beyond that point. Creating RegExResult Objects You can only obtain a RegExResult object through a call to string.match(), and you can only declare a variable of this type using the type-inference mechanism (var). var result = someString.match(/a pattern/g); // correct // RegExResult result = someString.match(/a pattern/g); INCORRECT // RegExResult result; INCORRECT Properties length Counts the number of matches to the RegEx in the string. Methods findNextMatch Searches for the next match in the string. getMatch Gets gets the nth match (the array of match and subgroups) from a string. getMatchIndex Gets the position in the original string of the nth match. Operators [] Gets the complete match string for the nth match Details Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .length readonly int length Description Counts the number of matches to the RegEx in the string. Counts (searching, if necessary), the total number of matches in the string. This will find all the matches, exhausting the string. Use getMatch() to get the results. Without the global flag, this value cannot exceed 1. Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .findNextMatch() Array findNextMatch( ) Returns Array An array containing the most recently found match. Description Searches for the next match in the string. If a match is not found, or if all matches have been found and the string is exausted (e.g., by calling RegExResult.length), then this method returns an empty Array. Otherwise, it returns an Array of string s. The first value in the Array is the complete match. Subsequent values (if any) will correspond to the capture groups marked in the RegEx. Without the global flag, this method will only search the string one time. Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .getMatch() Array getMatch( int i ) Parameters i The match number to retrieve (1 is the first match) Returns Array An array containing the full match, and any sub-matches. Description Gets gets the nth match (the array of match and subgroups) from a string. If the value given is larger than the number of matches, this method will fail. If necessary, this method will search the string. If the pattern to match is not global, than any value greater than 1 will always fail (1 could still fail if no match was found). Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .getMatchIndex() Array getMatchIndex( int i ) Parameters i The match number for which you want the position (1 is the first match). Returns Array The position of the nth match in the original string Description Gets the position in the original string of the nth match. If the value given is larger than the number of matches, this method will fail. If necessary, this method will search the string. If the pattern to match is not global, than any value greater than 1 will always fail (1 could still fail if no match was found). Do no remove, this fixes the anchor on doc.flexsim.com RegExResult .operator [] string operator []( int i ) Parameters i The match number for which you want the full match string. Returns string A string containing the full text of the nth match Description Gets the complete match string for the nth match This is the same as calling getMatch (i)[1]. If the value given is larger than the number of matches, this method will fail. If necessary, this method will search the string. If the pattern to match is not global, than any value greater than 1 will always fail (1 could still fail if no match was found)."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/StatisticsCollector.html",
        "title": "FlexScript Class - StatisticsCollector",
        "content": "Description A class that represents a Statistics Collector Properties collectedData Provides access to data that may be used in Statistics Collector callbacks. labelProperties Use your own named properties to get/set label values. labels Allows access to the labels of the Statistics Collector. Methods getAllRowValues Gets all row values from the collector. getRowForValue Returns the row number for given value, or 0 if that value is not tied to a row. getValue Gets a value from the table created by the Statistics Collector. Constructor StatisticsCollector Creates a reference to a Statistics Collector. Static Methods getID Returns a unique ID for a node. getPathFromID Gets the path used to generate an ID for the node. StatisticsCollector Creates a reference to a Statistics Collector. Details Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .collectedData readonly StatisticsCollector.CollectedData collectedData Description Provides access to data that may be used in Statistics Collector callbacks. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. See treenode . labelProperties for more details. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .labels readonly labels Description Allows access to the labels of the Statistics Collector. See treenode . labels for more details. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getAllRowValues() Array getAllRowValues( ) Returns Array Description Gets all row values from the collector. Returns the row values for all unfinished rows in the collector. If the collector is set to keep row values for finished rows, then this method will return all row values ever used by the collector, except for null values. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getRowForValue() int getRowForValue( Variant value ) Parameters value The value to find a row number for Returns int A row number Description Returns the row number for given value, or 0 if that value is not tied to a row. This method can be used to determine whether a value currently has a row in the current collector. For example, if the row mode is set to Unique Row Values, and you are listening to multiple events, it could be that you want to allow an event to update the row for the value, but prevent that value from adding a row. In this case, the event's Condition might have code like this: collector.getRowForValue(data.item) Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getValue() Variant getValue( int row , int col , int skipUpdate = 0 ) Parameters row The row of the desired value col The column of the desired value skipUpdate Choose whether the table should update its values before retrieving the data. Returns Variant A Variant, the value from the table. Description Gets a value from the table created by the Statistics Collector. This method is intended to be used within one of the Statistics Collector's callbacks. In certain cases, it can be desirable to get a value without causing an update of all Always columns that are still being tracked. This method can also be used to get a value from the collector's table without wrapping the node in the Table constructor. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector Constructor static StatisticsCollector( Variant id ) Parameters id The value that specifies a Statistics Collector Returns StatisticsCollector A StatisticsCollector reference. Description Creates a reference to a Statistics Collector. Global Statistics Collectors can be referenced by name or by rank. A Statistics Collector's node can also be used. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getID() static double getID( treenode object ) Parameters object The node to get an ID for Returns double The ID of the node Description Returns a unique ID for a node. All Statistics Collector IDs are generated as they are needed. The first time an object is passed to this method, a new ID will be generated. Subsequent calls to this method for the same treenode will return the same ID. If the node is temporary, such as a flowitem, token, or any node that will be destroyed on reset, then the ID will be a incrementing number, starting with 1. If the node is more permanent, then an ID will be generated by hashing the full path of the object. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector .getPathFromID() static string getPathFromID( double id , int maxDepth = 0 ) Parameters id The ID to retrieve a path for maxDepth The number of names to show in the returned path. Returns string The path used to create the given ID. Description Gets the path used to generate an ID for the node. If the ID is valid, and does not refer to a temporary object, this method returns the path that was used to create the ID. If maxDepth is greater than 0, the path will be shortened, so that only maxDepth names will appear in the path. If the ID is not valid, or refers to a temporary object, then an error text will be returned. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector Constructor static StatisticsCollector( Variant id ) Parameters id The value that specifies a Statistics Collector Returns StatisticsCollector A StatisticsCollector reference. Description Creates a reference to a Statistics Collector. Global Statistics Collectors can be referenced by name or by rank. A Statistics Collector's node can also be used."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/StatisticsCollector.CollectedData.html",
        "title": "FlexScript Class - StatisticsCollector.CollectedData",
        "content": "Description Provides access to data that may be used in Statistics Collector callbacks. Each StatisticsCollector has a CollectedData object. This object can only be accessed in callbacks called by the Statistics Collector, through its collectedData property. Before evaluating one of these callbacks, the Statistics Collector sets some or all of the properties on this object, so they can be read within the callback. This object also has dynamic properties, which act like labels. Event parameters and Event Data Label values are assigned as dynamic properties. Properties colNum The position of the current column in the table. colValue The value associated with the current column. colValueIndex The index of the current column, relative to its column set. currentValue The value in the table at the current row and column. eventName The name of the event that fired, causing the current callback to be evaluated. eventNode The treenode responsible for the event that fired, causing the current callback to be evaluated. group The Group associated with the current callback. linkedColumns An array of column numbers, indicating which columns are linked to the current event. processFlowInstance The instance associated with the current callback. row Accesses labels associated with the current row. rowNum The position of the current row in the table. rowValue The value associated with the current row. rowValueIndex The index of this row value, if the Row Value for the current event is an Array. Methods enumerate Creates a value that represents the unique combination of object, instance, and group. Details Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .colNum readonly int colNum Description The position of the current column in the table. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .colValue readonly Variant colValue Description The value associated with the current column. This value is set as part of the Set Value callback for Column Sets. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .colValueIndex readonly int colValueIndex Description The index of the current column, relative to its column set. This value determined by the sequence of values returned from the Set Value callback for Column Sets. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .currentValue readonly Variant currentValue Description The value in the table at the current row and column. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .eventName readonly string eventName Description The name of the event that fired, causing the current callback to be evaluated. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .eventNode readonly treenode eventNode Description The treenode responsible for the event that fired, causing the current callback to be evaluated. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .group readonly Group group Description The Group associated with the current callback. This value will be empty unless the Statistics Collector is listening to a Group, or an enumerated object is a Group. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .linkedColumns readonly Array linkedColumns Description An array of column numbers, indicating which columns are linked to the current event. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .processFlowInstance readonly Object processFlowInstance Description The instance associated with the current callback. This value will be empty unless the Statistics Collector is listening to, or has enumerated, a Process Flow block in a instanced flow. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .row readonly row Description Accesses labels associated with the current row. This property is an object that has a labels property, like treenode . labels . The object also has dynamic label access, like treenode . labelProperties . For example, you could use a label to store the time a row was added in the OnRowAdding trigger: data.row.RowAddTime = Model.time; Then, you could reference this label in a column's value: Model.time - data.row.RowAddTime Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .rowNum readonly int rowNum Description The position of the current row in the table. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .rowValue readonly Variant rowValue Description The value associated with the current row. This value is the value specified by the Row Value. If the Row Mode is Enumerate, then the row value is the object associated with the current row. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .rowValueIndex readonly int rowValueIndex Description The index of this row value, if the Row Value for the current event is an Array. Do no remove, this fixes the anchor on doc.flexsim.com StatisticsCollector.CollectedData .enumerate() double enumerate( ) double enumerate( treenode object , Object instance , Group group ) Parameters object The object to enumerate. instance The instance to enumerate. group The group to enumerate. Returns double A hash of the object, instance, and group values. Description Creates a value that represents the unique combination of object, instance, and group. If the parameters are not given, then the current eventNode , processFlowInstance , and group property values are used. This method creates a hash of the object, instance, and group values. That hash, along with the values used in that hash, are stored in the Statistics Collector. That hash is the return value. If you use the hash as a row value, then the Statistics Collector will assert a row for the hash value, and set eventNode , processFlowInstance , and group to the values associated with the hash. This method is most commonly used in conjunction with an Enumerate Event , allowing additional events to update rows created by the Enumerate Event. You can find additional information in the Enumerate Row Values section."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Table.IndexType.html",
        "title": "FlexScript Class - Table.IndexType",
        "content": "Description Enumerates types of indices on the table. Static Properties None Ordered Unordered Details Do no remove, this fixes the anchor on doc.flexsim.com Table.IndexType .None static readonly int None Description Do no remove, this fixes the anchor on doc.flexsim.com Table.IndexType .Ordered static readonly int Ordered Description Do no remove, this fixes the anchor on doc.flexsim.com Table.IndexType .Unordered static readonly int Unordered Description"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Tools.html",
        "title": "FlexScript Class - Tools",
        "content": "Description A class for creating and getting Tool nodes. Tool Types The Tools methods take only the following tool types: AgentSystem CalculatedTable ColorPalette DatabaseConnector DownBehavior EmpiricalDistribution FlowItem GlobalTable GlobalVariable Group List MilestoneCollector ModelBackground ModelTrigger MTBFMTTR ParameterTable PerformanceMeasureTable PropertyTable ReinforcementLearning StateTable StatisticsCollector TimeTable UserEvent TrackedVariable Tool Sub Types Some tool types have sub types that can be used in the create () method to make a preconfigured version of that tool. Only the ModelTrigger tools require a sub type to be specified. For the other tools, not specifying a sub type will make a basic version of that tool with out any preconfiguration. AgentSystem Proximity SocialForce ColorPalette Standard ByNumber Viridis Plasma Rainbow FlowItem Container TaskExecuter Man Woman Boy Girl EmptyBottle EmptyBottleWithLabel FullBottle FullBottleWithLabel FullBottleWithCap FullBottleWithLabelAndCap AllBottles List FixedResource Item TaskExecuter TaskSequence ModelTrigger OnModelOpen OnModelReset OnRunStart OnRunStop StateTable Default PhotoEye Static Methods create Creates a new copy of a tool node. get Gets a reference to an exisiting tool node. Details Do no remove, this fixes the anchor on doc.flexsim.com Tools .create() static treenode create( string type , string subType = '' ) Parameters type The name of the type of tool to create. See Tool Types for the full list. subType The name of the sub type of tool to create. See Sub Tool Types for the full list. Returns treenode A new tool node. Description Creates a new copy of a tool node. treenode basicList = Tools.create(\"List\"); treenode teList = Tools.create(\"List\", \"TaskExecuter\"); Do no remove, this fixes the anchor on doc.flexsim.com Tools .get() static treenode get( string type , string name ) Parameters type The name of the type of tool to get. See Tool Types for the full list. name The name of the tool to get. Returns treenode A reference to an existing tool node. Description Gets a reference to an exisiting tool node. treenode timeTable = Tools.get(\"TimeTable\", \"Shift1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/TrackedVariable.html",
        "title": "FlexScript Class - TrackedVariable",
        "content": "Description A class that represents a tracked variable. Tracked Variables can be defined as global for the model, or they can be stored on an object, table or label. Properties age Returns the duration since the last reset time in model units. average Gets the average value of the tracked variable. count Gets the number of times the tracked variable has been set. history Gets the table of history for the tracked variable. lastResetTime lowerBound Gets or sets the lower bound of the tracked variable. maximum Gets the maximum value of the tracked variable. minimum Gets the minimum value of the tracked variable. profile Gets the table of profiles for the tracked variable. rate Gets or sets the current rate of the tracked variable. type Gets the type of the tracked variable. upperBound Gets or sets the upper bound of the tracked variable. value Gets or sets the current value of the tracked variable. valueString Gets or sets the current value of the categorical tracked variable. Methods clearListeners Used with Categorical Combo TrackedVariables. Removes all listeners from a Categorical Combo tracked variable. getCategoryName Gets the name of a category from a categorical tracked variable. getCategoryValue Gets the value associated with a category from a categorical or pointer tracked variable. getTotalTimeAt Gets the total time the tracked variable as been at the specified categorical or pointer value. listenTo Used with Categorical Combo TrackedVariables. Adds a listener to a different categorical TrackedVariable. reset Resets the tracked variable. Constructor TrackedVariable Creates a reference to a global tracked variable. Static Methods init Asserts tracked variable data on a node with the designated type and start value. Details Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .age readonly double age Description Returns the duration since the last reset time in model units. Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .average readonly double average Description Gets the average value of the tracked variable. The average value is not available for Categorical and Cumulative type tracked variables. See the type property for more information. double average = trackedVariable.average; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .count readonly int count Description Gets the number of times the tracked variable has been set. int count = trackedVariable.count; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .history readonly Table history Description Gets the table of history for the tracked variable. The history property is only available if the tracked variable flags is set to STAT_USE_HISTORY. See the init method for information on tracked variable flags. Table history = trackedVariable.history; double time = history[1][1]; double value = history[1][2]; double rate = history[1][3]; //Kinetic type Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .lastResetTime readonly double lastResetTime Description Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .lowerBound double lowerBound Description Gets or sets the lower bound of the tracked variable. The lowerBound property is only available for Kinetic type tracked variables. When setting the lower bound, the lower bound must be less than the current value of the tracked variable. double lower = trackedVariable.lowerBound; trackedVariable.lowerBound = -100; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .maximum readonly double maximum Description Gets the maximum value of the tracked variable. double maximum = trackedVariable.maximum; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .minimum readonly double minimum Description Gets the minimum value of the tracked variable. double minimum = trackedVariable.minimum; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .profile readonly Table profile Description Gets the table of profiles for the tracked variable. The profile property is only available for Categorical type tracked variables. Table profile = trackedVariable.profile; string name = profile[2][1]; double value = profile[2][2]; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .rate double rate Description Gets or sets the current rate of the tracked variable. The rate property is only available for Kinetic type tracked variables. See the type property for more information. double rate = trackedVariable.rate; trackedVariable.rate = 1.5; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .type readonly int type Description Gets the type of the tracked variable. The type affects what meta data, like average, will be collected, and how it is calculated. Type can be one of the following values: STAT_TYPE_LEVEL - records the variable as a level that can go up and down, such as content. The average is a time-weighted average. An example of this would be content tracking. STAT_TYPE_TIME_SERIES - records the variable as a series of independent values. The average is a non-time-weighted average. An example of this type is staytime tracking. STAT_TYPE_CUMULATIVE - records the variable as a value that only accumulates over time, such as input or output. Average is not tracked. STAT_TYPE_CATEGORICAL - records the variable as a set of string values. Average is not tracked. An example of this is state tracking. STAT_TYPE_KINETIC_LEVEL - similar to STAT_TYPE_LEVEL, except that you can also give it a rate of change by setting the rate property. An example of this would be battery level. STAT_TYPE_POINTER - similar to STAT_TYPE_CATEGORICAL, except that instead of tracking string values, it tracks node values. STAT_TYPE_CATEGORICAL_COMBO - used with two or more other STAT_TYPE_CATEGORICAL TrackedVariables. When any of the other tracked variables changes its state, this variable sets its state to a string representing the combination of all current states. This can be used to record the combined state of multiple state profiles. int type = trackedVariable.type; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .upperBound double upperBound Description Gets or sets the upper bound of the tracked variable. The upperBound property is only available for Kinetic type tracked variables. When setting the upper bound, the upper bound must be greater than the current value of the tracked variable. double upper = trackedVariable.upperBound; trackedVariable.upperBound = 100; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .value Variant value Description Gets or sets the current value of the tracked variable. The value of the tracked variable should be a number or it may be a string for categorical type tracked variables. double value = trackedVariable.value; trackedVariable.value = 32; trackedVariable.value = \"processing\"; //Categorical type only trackedVariable.value = Model.find(\"Queue1\"); //Pointer type only Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .valueString Variant valueString Description Gets or sets the current value of the categorical tracked variable. The valueString is only available for the categorical type tracked variables. string valueStr = trackedVariable.valueString; trackedVariable.valueString = \"processing\"; Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .clearListeners() clearListeners( ) Description Used with Categorical Combo TrackedVariables. Removes all listeners from a Categorical Combo tracked variable. Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .getCategoryName() string getCategoryName( int catNum ) Parameters catNum The category number to get the name of. Description Gets the name of a category from a categorical tracked variable. string name = trackedVariable.getCategoryName(1); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .getCategoryValue() Variant getCategoryValue( int catNum = -1 ) Parameters catNum The category number to get the value of. Description Gets the value associated with a category from a categorical or pointer tracked variable. For categorical tracked variables, this method is identical to the getCategoryName () method. Variant categoryValue = trackedVariable.getCategoryValue(strOrNodeCategory); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .getTotalTimeAt() double getTotalTimeAt( Variant value ) Parameters value Value should be either the name of the category value to get, the node for the category, or the index number of the category. Description Gets the total time the tracked variable as been at the specified categorical or pointer value. The getTotalTimeAt method is only available for Categorical and Pointer type tracked variables. double processingTime = trackedVariable.getTotalTimeAt(\"processing\"); double processingTime = trackedVariable.getTotalTimeAt(2); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .listenTo() listenTo( TrackedVariable other ) Parameters other A categorical TrackedVariable to listen to Description Used with Categorical Combo TrackedVariables. Adds a listener to a different categorical TrackedVariable. The listener allows this TrackedVariable to be notified when the other TrackedVariable changes value. When any of the other TrackedVariables that you listen to change value, this TrackedVariable sets its value to a value that represents the combination of all the other TrackedVariable value. Since State Profiles are implemented using Categorical TrackedVariables, you can use this type of TrackedVariable to create a state profile that is the combination of several other state profiles. Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .reset() reset( double startValue = 0.0 , int type = -1 ) Parameters startValue The start value of the tracked variable. type If no value is defined, the tracked variable will keep its original type. See the type property for more information. Description Resets the tracked variable. trackedVariable.reset(); trackedVariable.reset(10); trackedVariable.reset(0, STAT_TYPE_LEVEL); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable Constructor TrackedVariable( string name ) Parameters name The name of the global tracked variable. Description Creates a reference to a global tracked variable. TrackedVariable wip = TrackedVariable(\"WorkInProgress\"); Do no remove, this fixes the anchor on doc.flexsim.com TrackedVariable .init() static TrackedVariable init( treenode theNode , int type , double startValue = 0 , int flags = -1 ) Parameters theNode The node to assert the tracked variable data on. type Defines the tracked variable type. See the type property for more information. startValue The starting value of the tracked variable. If the tracked variable presists when the model is reset, this will be the reset value. flags Specifies options for this tracked variable. The flags can be a bitwise combination of the following three values. By default, none of these options are used: STAT_USE_HISTORY - the tracked variable will keep a history of each value it hold, and the time at which the value is set. STAT_USE_PROFILE - the tracked variable will track a profile of the total time spent at each value. This only works if the set of used values are non-negative integers. STAT_IGNORE_WARMUP - the tracked variable will ignore the resetstats() command. Use this option only if the tracked variable should keep the data collected during warmup time. Description Asserts tracked variable data on a node with the designated type and start value. TrackedVariable newTV = TrackedVariable.init(aNode, STAT_TYPE_TIME_SERIES, 0.0, STAT_USE_HISTORY | STAT_IGNORE_WARMUP);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Stage.html",
        "title": "FlexScript Class - USD.Stage",
        "content": "Inherits from Object Description A class that represents a USD Stage . Properties autoWriteAnimationOffsets Allows users to toggle whether saving the USD Stage should automatically write offset times for animations. defaultPrim The default prim set for the stage. endTime The end time of the stage's animation. startTime The start time of the stage's animation. Methods definePrim Create a USD.Prim in the stage. findPrim Return a USD.Prim with a given name. getPrims Return an Array of all USD.Prim objects on the stage. processLiveUpdates Send live updates to the server and process live updates received from the server. reload Reload the stage. save Save changes to the stage. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .autoWriteAnimationOffsets int autoWriteAnimationOffsets Description Allows users to toggle whether saving the USD Stage should automatically write offset times for animations. Currently, when you save a USD Stage in FlexSim, it will automatically export offsets for object references. This means that when you view the USD Stage in another program, objects will appear in the state of the animation that FlexSim shows them in when you saved. This behavior is on (1) by default. To turn it off, set this value to 0. If turned off, you can set your own offsets by using the USD.Reference class to build a reference and set it on a USD.Prim's \"references\" property. Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .defaultPrim readonly USD.Prim defaultPrim Description The default prim set for the stage. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .endTime double endTime Description The end time of the stage's animation. Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .startTime double startTime Description The start time of the stage's animation. Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .definePrim() USD.Prim definePrim( string primPath , string typeName = \"\" ) Parameters primPath The path of the new prim. typeName Optional. The type of prim being created. Returns USD.Prim The newly created USD.Prim. Description Create a USD.Prim in the stage. Prim paths follow a filepath-structure. For example, if you want to create a prim named \"Processor1\" nested under a prim called \"World\", your primPath would be the string \"/World/Processor1\". Note: if the \"World\" prim didn't exist in this example, it would be created to fulfill the creation of the prim. If you try to define a prim that already exists at the given path with no typeName or the same typeName, no new prim will be created. If the typeName is different, it will redefine the type of the existing prim. Prim types are schemas that are generally found in the OpenUSD documentation or are user defined. The typeName parameter specifices what type of prim you want to create, defaulting to no type. For example, you can create an \"Xform\" (short for USD transformation) prim by running the code below. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); if (prim) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .findPrim() USD.Prim findPrim( string primName ) Parameters primName The name of the prim to search for. Returns USD.Prim A USD.Prim. Description Return a USD.Prim with a given name. Prim names follow a filepath-structure. For example, if you have a prim named \"Processor1\" nested under a prim called \"World\", you would search for it with the string \"/World/Processor1\". USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.findPrim(\"/World/Processor1\"); if (prim) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .getPrims() Array getPrims( ) Returns Array An array of USD.Prim objects. Description Return an Array of all USD.Prim objects on the stage. This function performs a Depth First Search on the stage to find all prims in the stage. USD.Stage stage = Model.find(\"USD Stage1\"); Array prims = stage.getPrims(); for (int i = 1; i <= prims.length; i++) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .processLiveUpdates() processLiveUpdates( ) Description Send live updates to the server and process live updates received from the server. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); stage.processLiveUpdates(); // send changes to the server; receive any changes and update the stage Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .reload() int reload( ) Returns int Whether or not the reload was successful. Returns 1 for success; otherwise 0. Description Reload the stage. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); stage.reload(); // reverts changes to the stage Do no remove, this fixes the anchor on doc.flexsim.com USD.Stage .save() Variant save( ) Returns Variant Whether or not the save was successful. Returns 1 for success; otherwise 0. Description Save changes to the stage. The .usd* file will be updated. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); stage.save(); // saves the new prim to the stage"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Prim.html",
        "title": "FlexScript Class - USD.Prim",
        "content": "Inherits from treenode Description A class that represents a USD Prim. Properties path The complete path for the prim. references Allows a user to clear and set references on a USD.Prim. See USD.References for more info. Methods createAttribute Create a USD.Attribute on the prim. createRelationship Create a USD.Relationship on the prim. getProperty Get a USD.Property with a given name. getPropertyNames Get an Array of names of properties on the prim. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .path readonly string path Description The complete path for the prim. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; string path = prim.path; Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .references readonly references Description Allows a user to clear and set references on a USD.Prim. See USD.References for more info. // Clear the current offsets from the operator's refshape and reset them to 0 USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim refShape = stage.findPrim(\"/World/Operator1/shapeOffset/refShape\"); USD.Reference ref = USD.Reference(\"/shapes/tn__OperatorMalefbx_ZN\"); ref.layerOffset = 0; refShape.references.clear(); refShape.references.add(ref); stage.save(); Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .createAttribute() USD.Attribute createAttribute( string attributeName , string typeName ) Parameters attributeName The name of the new attribute. typeName The type of attribute being created. Returns USD.Attribute The newly created USD.Attribute. Description Create a USD.Attribute on the prim. The typeName specifices what type of attribute you want to create. For example, you can create a \"string\" attribute by running the code below. Basic attribute types can be found here . If the typeName is invalid, the created USD.Attribute will be invalid. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); USD.Attribute attribute = prim.createAttribute(\"testAttr\", \"string\"); if (attribute) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .createRelationship() USD.Relationship createRelationship( relationshipName ) Parameters The name of the new relationship. Returns USD.Relationship The newly created USD.Relationship. Description Create a USD.Relationship on the prim. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.definePrim(\"/my/test/prim\", \"Xform\"); USD.Relationship relationship = prim.createRelationship(\"myRelationship\"); if (relationship) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .getProperty() USD.Property getProperty( string propertyName ) Parameters propertyName The name of the property to search for. Returns USD.Property The newly created USD.Property. Description Get a USD.Property with a given name. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.findPrim(\"/World/Processor1\"); USD.Property property = prim.getProperty(\"myProperty\"); if (property) { ... } Do no remove, this fixes the anchor on doc.flexsim.com USD.Prim .getPropertyNames() Array getPropertyNames( ) Returns Array An array of USD.Prim objects. Description Get an Array of names of properties on the prim. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; Array propertyNames = prim.getPropertyNames(); for (int i = 1; i <= propertyNames.length; i++) { ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Property.html",
        "title": "FlexScript Class - USD.Property",
        "content": "Description A class that represents a USD Property . Properties baseName The base name of the property. name The name of the property. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Property .baseName readonly string baseName Description The base name of the property. The name of the property with all namespace prefixes removed, i.e. the last component of the \"name\" property. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Property property = prim.getProperty(\"my:advanced:prop\"); if (property) { string baseName = property.baseName; // baseName == \"prop\" } Do no remove, this fixes the anchor on doc.flexsim.com USD.Property .name readonly string name Description The name of the property. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Property property = prim.getProperty(\"my:advanced:prop\"); if (property) { string fullName = property.name; // fullName == \"my:advanced:prop\" }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Attribute.html",
        "title": "FlexScript Class - USD.Attribute",
        "content": "Inherits from USD.Property Description A class that represents a USD Property. Properties numTimeSamples Gets the number of time samples the attribute has. type The type of the attribute. value The value of the attribute. Methods clear Removes all time samples and values from the attribute. clearAtTime Removes a value with a specific time code from the attribute. getTimeSamples Gets an Array of all the time samples for the attribute. getValue Gets the value of the attribute. setValue Sets the value of the attribute. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .numTimeSamples readonly int numTimeSamples Description Gets the number of time samples the attribute has. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .type readonly string type Description The type of the attribute. Basic attribute types can be found here . USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Attribute attr = prim.createAttribute(\"myDouble\", \"double\"); if (attr) { string type = attr.type; // type == \"double\" } Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .value Variant value Description The value of the attribute. If you set the value of the attribute, the type of value you assign must match the type of attribute it is. For example, if my attribute has a type of \"double[]\", then my value should be an Array of doubles. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Attribute attr = prim.createAttribute(\"myDouble\", \"double\"); if (attr) { attr.value = 20; } Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .clear() clear( ) Description Removes all time samples and values from the attribute. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .clearAtTime() clearAtTime( Variant timeCode ) Parameters timeCode The time code of the value to be removed from the attribute. Description Removes a value with a specific time code from the attribute. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim operator = stage.findPrim(\"/World/Operator1\"); USD.Attribute translation = prim.getProperty(\"xformOp:translate\"); // if there is at least 1 time sample if (translation.numTimeSamples) { Array times = translation.getTimeSamples(); // remove the first time sample translation.clearAtTime(times[1]); } ... Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .getTimeSamples() Array getTimeSamples( ) Returns Array An Array of time samples. Description Gets an Array of all the time samples for the attribute. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .getValue() Variant getValue( Variant timeCode = nullvar ) Parameters timeCode The timecode of the value you want to retrieve. Returns Variant The value of the attribute. Description Gets the value of the attribute. If a timecode is supplied, this will get the value of the attribute at the given timecode. Do no remove, this fixes the anchor on doc.flexsim.com USD.Attribute .setValue() setValue( Variant value , Variant timeCode = nullvar ) Parameters value The new value to set the attribute to. timeCode The timecode of the value you want to set. Description Sets the value of the attribute. If a timecode is supplied, this will set the value of the attribute at the given timecode."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Relationship.html",
        "title": "FlexScript Class - USD.Relationship",
        "content": "Inherits from USD.Property Description A class that represents a USD Relationship. Methods getTargets Get an array of targets as strings. setTargets Set the array of targets for the USD.Relationship. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Relationship .getTargets() Array getTargets( ) Returns Array An array of targets as strings. Description Get an array of targets as strings. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; USD.Relationship relationship = prim.getProperty(\"targets\"); if (relationship) { Array targets = relationship.getTargets(); } Do no remove, this fixes the anchor on doc.flexsim.com USD.Relationship .setTargets() void setTargets( ) Description Set the array of targets for the USD.Relationship. USD.Stage stage = Model.find(\"USD Stage1\"); USD.Prim prim = stage.defaultPrim; Array targets = [\"/World/Processor1\"]; USD.Relationship relationship = prim.createRelationship(\"myTargets\"); if (relationship) { relationship.setTargets(targets); }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.Reference.html",
        "title": "FlexScript Class - USD.Reference",
        "content": "Description A class that represents an SdfReference from the OpenUSD API. Properties assetPath The asset path of the USD.Reference. customData A Map of custom data for this USD.Reference. isInternal Returns whether or not this USD.Reference is internal. layerOffset The layer offset of the USD.Reference. primPath The prim path of the USD.Reference. Constructor USD.Reference Constructs a USD.Reference object based on the given primPath. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .assetPath assetPath Description The asset path of the USD.Reference. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .customData Map customData Description A Map of custom data for this USD.Reference. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .isInternal readonly int isInternal Description Returns whether or not this USD.Reference is internal. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .layerOffset double layerOffset Description The layer offset of the USD.Reference. This property can be used to get and set the layer offset property for references to be used in animations. On USD.Stages, these are set automatically when you export using the Omniverse Connector or save a USD Stage. However, you can toggle it off on a USD Stage and set them yourself (to 0, for example). This will allow you to more easily write your own animation information without having to fight with the automatic writing of offsets. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference .primPath primPath Description The prim path of the USD.Reference. Do no remove, this fixes the anchor on doc.flexsim.com USD.Reference Constructor USD.Reference( string primPath ) Parameters primPath The prim path of the prim you want to reference. Returns USD.Reference A USD.Reference object. Description Constructs a USD.Reference object based on the given primPath."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/USD.References.html",
        "title": "FlexScript Class - USD.References",
        "content": "Description A class that represents a UsdReferences object from the OpenUSD API. Methods add Adds a reference to the list of references. clear Removes all references from the list of references. remove Removes a specific reference from the list of references. set Sets the current list of references to the given list of assets. Details Do no remove, this fixes the anchor on doc.flexsim.com USD.References .add() int add( USD.Reference reference ) Parameters reference The USD.Reference to add to the list. Returns int 1 if the method was successful; otherwise, 0. Description Adds a reference to the list of references. Do no remove, this fixes the anchor on doc.flexsim.com USD.References .clear() int clear( ) Returns int 1 if the method was successful; otherwise, 0. Description Removes all references from the list of references. Do no remove, this fixes the anchor on doc.flexsim.com USD.References .remove() int remove( string primPath , string assetPath = \"\" ) Parameters primPath The prim path of the reference to remove. assetPath The asset path of the reference to remove. Returns int 1 if the method was successful; otherwise, 0. Description Removes a specific reference from the list of references. Do no remove, this fixes the anchor on doc.flexsim.com USD.References .set() int set( Array primPaths ) Parameters primPaths An Array of prim paths as strings. Returns int 1 if the method was successful; otherwise, 0. Description Sets the current list of references to the given list of assets. Given an Array of strings of prim paths, it will clear the current list of references, create a USD.Reference for each of the prim paths, and then set the list to the list of USD.References created. If the Array contains anything that isn't a string, it will throw an exception."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Vec2.html",
        "title": "FlexScript Class - Vec2",
        "content": "Description Represents positions, rotations, size, 2D vectors, and points. Contains functions for doing common vector operations. Properties magnitude The length of this vector (Read Only). normalized The vector sized to a magnitude of 1 (Read Only). x X component of the vector. y Y component of the vector. Methods angle Finds the angle between this vector and another (degrees). dot Finds the dot product of this vector and another. lerp Linearly interpolates between two vectors. rotate Rotates the vector about another vector. Constructor Vec2 Constructs a vector by xy component values. Operators - Subtracts one vector from another. != Compares two vectors. * Multiplies a vector by another vector or a scale factor. / Divides a vector by another vector or a scale factor. + Adds two vectors together. += Assigns the vector to be the sum of two vectors. -= Assigns the vector to be the difference of two vectors. == Compares two vectors. unary - Negates the vector. Details Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .magnitude readonly double magnitude Description The length of this vector (Read Only). The length of the vector is calculated as the square root of (x*x+y*y). Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .normalized readonly Vec2 normalized Description The vector sized to a magnitude of 1 (Read Only). A copy of the original vector that points in the same direction, but has a length of 1. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .x double x Description X component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .y double y Description Y component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .angle() double angle( Vec2 otherVec ) Parameters otherVec The angle extends round to this vector. Returns double The angle between the two vectors in degrees. Description Finds the angle between this vector and another (degrees). double angle = myVector.angle(Vec2(1, 2)); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .dot() double dot( Vec2 otherVec ) Parameters otherVec The vector to dot with this vector. Returns double The dot product (double) of the two vectors. Description Finds the dot product of this vector and another. double dot = myVector.dot(Vec2(1, 2)); The dot product of two vectors is a number equal to the magnitudes of the two vectors multiplied together and then multiplied by the cosine of the angle between them. Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .lerp() Vec2 lerp( Vec2 otherVec , double t ) Parameters otherVec The vector to interpolate to. t A ratio between 0 and 1 that defines the percentage to interpolate from the current vector to otherVec. Returns Vec2 The resulting interpolated vector. Description Linearly interpolates between two vectors. The following example code sets the location vector to 20% on the path from myVector to Vec2(1,2). Vec2 location = myVector.lerp(Vec2(1, 2), .2); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .rotate() Vec2 rotate( double degrees ) Vec2 rotate( double degrees , Vec2 otherVec ) Parameters degrees The angle of rotation. otherVec The vector rotate about. Returns Vec2 The resulting vector. Description Rotates the vector about another vector. The origin will be used as the rotation point if no other vector is defined The following example code returns the new vector after rotating myVector about Vec2(1,2) by 45 degrees. Vec2 location = myVector.rotate(45, Vec2(1, 2)); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 Constructor Vec2( double x , double y ) Vec2( double value ) Parameters x The x component. y The y component. value A value all components will be set to. Description Constructs a vector by xy component values. Vec2 location = Vec2(1, 2); Vec2 location = Vec2(0); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator - Vec2 operator -( Vec2 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec2 The resulting vector. Description Subtracts one vector from another. Each component has the corresponding component subtracted from it. Vec2 location = someVector - anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator != int operator !=( Vec2 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if the two vectors are different, false otherwise. Description Compares two vectors. int isNotZero = location != Vec2(0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator * Vec2 operator *( Vec2 otherVec ) Vec2 operator *( double factor ) Parameters otherVec The vector to multiply this vector by. factor A scale factor to multiply each component by. Returns Vec2 The resulting vector. Description Multiplies a vector by another vector or a scale factor. When a Vec2 is passed, the operation will perform per-component multiplication. Vec2 location = someVector * anotherVector; Vec2 location = someVector * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator / Vec2 operator /( Vec2 otherVec ) Vec2 operator /( double factor ) Parameters otherVec The vector to divide this vector by. factor A scale factor to divide each component by. Returns Vec2 The resulting vector. Description Divides a vector by another vector or a scale factor. When a Vec2 is passed, the operation will perform per-component division. Vec2 location = someVector / anotherVector; Vec2 location = someVector / 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator + Vec2 operator +( Vec2 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec2 The resulting vector. Description Adds two vectors together. Each component is added to the corresponding component. Vec2 location = someVector + anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator += Vec2 operator +=( Vec2 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec2 The resulting vector. Description Assigns the vector to be the sum of two vectors. Each component is added to the corresponding component. Vec2 location += someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator -= Vec2 operator -=( Vec2 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec2 The resulting vector. Description Assigns the vector to be the difference of two vectors. Each component has the corresponding component subtracted from it. Vec2 location -= someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator == int operator ==( Vec2 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if both vectors are exactly the same, false otherwise. Description Compares two vectors. int isZero = location == Vec2(0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec2 .operator unary - Vec2 operator unary -( ) Returns Vec2 The resulting vector. Description Negates the vector. Each component is negated. Vec2 location = -location;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Vec3.html",
        "title": "FlexScript Class - Vec3",
        "content": "Description Represents positions, rotations, size, 3D vectors, and points. Contains functions for doing common vector operations. Properties magnitude The length of this vector (Read Only). normalized The vector sized to a magnitude of 1 (Read Only). x X component of the vector. y Y component of the vector. z Z component of the vector. Methods angle Finds the angle between this vector and another (degrees). cross Finds the cross product of this vector and another. dot Finds the dot product of this vector and another. lerp Linearly interpolates between two vectors. project Transforms the vector from one coordinate space to another. projectRotation Transforms the vector, interpreted as a rotation, from one coordinate space to another. Constructor Vec3 Constructs a vector by xyz component values. Operators - Subtracts one vector from another. != Compares two vectors. * Multiplies a vector by another vector or a scale factor. / Divides a vector by another vector or a scale factor. + Adds two vectors together. += Assigns the vector to be the sum of two vectors. -= Assigns the vector to be the difference of two vectors. == Compares two vectors. unary - Negates the vector. Details Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .magnitude readonly double magnitude Description The length of this vector (Read Only). The length of the vector is calculated as the square root of (x*x+y*y+z*z). Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .normalized readonly Vec3 normalized Description The vector sized to a magnitude of 1 (Read Only). A copy of the original vector that points in the same direction, but has a length of 1. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .x double x Description X component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .y double y Description Y component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .z double z Description Z component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .angle() double angle( Vec3 otherVec ) Parameters otherVec The angle extends round to this vector. Returns double The angle between the two vectors in degrees. Description Finds the angle between this vector and another (degrees). double angle = myVector.angle(Vec3(1, 2, 3)); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .cross() Vec3 cross( Vec3 otherVec ) Parameters otherVec The vector to cross with this vector. Returns Vec3 The cross product (Vec3) of the two vectors. Description Finds the cross product of this vector and another. Vec3 cross = myVector.cross(Vec3(1, 2, 3)); The cross product of two vectors is a vector perpendicular to the two input vectors. Since there are two possible perpendicular vectors, the direction is determined by the \"left hand rule\". This means that crossing vector1 with vector2 will produce the opposite of crossing vector2 with vector1. The magnitude of the new vector is equal to the magnitudes of the two inputs multiplied together and then multiplied by the sine of the angle between the inputs. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .dot() double dot( Vec3 otherVec ) Parameters otherVec The vector to dot with this vector. Returns double The dot product (double) of the two vectors. Description Finds the dot product of this vector and another. double dot = myVector.dot(Vec3(1, 2, 3)); The dot product of two vectors is a number equal to the magnitudes of the two vectors multiplied together and then multiplied by the cosine of the angle between them. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .lerp() Vec3 lerp( Vec3 otherVec , double t ) Parameters otherVec The vector to interpolate to. t A ratio between 0 and 1 that defines the percentage to interpolate from the current vector to otherVec. Returns Vec3 The resulting interpolated vector. Description Linearly interpolates between two vectors. The following example code changes current's location 20% towards the other object. current.location = current.location.lerp(otherObj.location, 0.2); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .project() Vec3 project( treenode from , treenode to ) Parameters from The treenode representing the coordinate space to project from. to The treenode representing the coordinate space to project to. Returns Vec3 The projected vector. Description Transforms the vector from one coordinate space to another. Takes the vector in from's coordinate space, translates this vector onto to's coordinate space, and returns the projected vector. The vector is taken from the origin point of from's coordinate space. The origin is the (0,0,0) point of the coordinate space and is often located in the top left corner of an object's coordinate space. It is important to understand the way the axes work in FlexSim. The X and Y axes form the floor grid plane while the Z axis is equivalent to the height. Also objects y size values stretch in the -y direction, but stretch in the positive direction on both the X and Z axes. In other words an object at location (0,5,0) with a size of (1,2,3) will stretch from x location 0 to 1, y location 5 to 3 and z location 0 to 3. Vec3 globalLoc = Vec3(5, 3, 0).project(current, model()); This example finds out the global location of the position (5,3,0) in current's coordinate space. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .projectRotation() Vec3 projectRotation( treenode from , treenode to ) Parameters from The treenode representing the coordinate space to project from. to The treenode representing the coordinate space to project to. Returns Vec3 The projected rotation. Description Transforms the vector, interpreted as a rotation, from one coordinate space to another. Takes the vector, interpreted as a rotation in from's coordinate space, translates this vector onto to's coordinate space, and returns the projected rotation. Vec3 globalRot = current.rotation.project(current.up, model()); This example finds out the rotation of current, projected onto the model's space. Do no remove, this fixes the anchor on doc.flexsim.com Vec3 Constructor Vec3( double x , double y , double z ) Vec3( double value ) Parameters x The x component. y The y component. z The z component. value A value all components will be set to. Description Constructs a vector by xyz component values. current.location = Vec3(1, 2, 3); current.location = Vec3(0); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator - Vec3 operator -( Vec3 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec3 The resulting vector. Description Subtracts one vector from another. Each component has the corresponding component subtracted from it. current.location = someVector - anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator != int operator !=( Vec3 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if the two vectors are different, false otherwise. Description Compares two vectors. int isNotZero = current.location != Vec3(0, 0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator * Vec3 operator *( Vec3 otherVec ) Vec3 operator *( double factor ) Parameters otherVec The vector to multiply this vector by. factor A scale factor to multiply each component by. Returns Vec3 The resulting vector. Description Multiplies a vector by another vector or a scale factor. When a Vec3 is passed, the operation will perform per-component multiplication. current.location = someVector * anotherVector; current.location = someVector * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator / Vec3 operator /( Vec3 otherVec ) Vec3 operator /( double factor ) Parameters otherVec The vector to divide this vector by. factor A scale factor to divide each component by. Returns Vec3 The resulting vector. Description Divides a vector by another vector or a scale factor. When a Vec3 is passed, the operation will perform per-component division. current.location = someVector / anotherVector; current.location = someVector / 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator + Vec3 operator +( Vec3 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec3 The resulting vector. Description Adds two vectors together. Each component is added to the corresponding component. current.location = someVector + anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator += Vec3 operator +=( Vec3 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec3 The resulting vector. Description Assigns the vector to be the sum of two vectors. Each component is added to the corresponding component. current.location += someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator -= Vec3 operator -=( Vec3 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec3 The resulting vector. Description Assigns the vector to be the difference of two vectors. Each component has the corresponding component subtracted from it. current.location -= someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator == int operator ==( Vec3 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if both vectors are exactly the same, false otherwise. Description Compares two vectors. int isZero = current.location == Vec3(0, 0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Vec3 .operator unary - Vec3 operator unary -( ) Returns Vec3 The resulting vector. Description Negates the vector. Each component is negated. current.location = -current.location;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/Vec4.html",
        "title": "FlexScript Class - Vec4",
        "content": "Description Represents a vector that includes x, y, z, and w components. Properties w W component of the vector. x X component of the vector. y Y component of the vector. z Z component of the vector. Constructor Vec4 Constructs a vector by xyzw component values. Operators - Subtracts one vector from another. != Compares two vectors. * Multiplies a vector by another vector or a scale factor. / Divides a vector by another vector or a scale factor. + Adds two vectors together. += Assigns the vector to be the sum of two vectors. -= Assigns the vector to be the difference of two vectors. == Compares two vectors. unary - Negates the vector. Details Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .w double w Description W component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .x double x Description X component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .y double y Description Y component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .z double z Description Z component of the vector. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 Constructor Vec4( double x , double y , double z , double w ) Vec4( double value ) Parameters x The x component. y The y component. z The z component. w The w component. value A value all components will be set to. Description Constructs a vector by xyzw component values. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator - Vec4 operator -( Vec4 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec4 The resulting vector. Description Subtracts one vector from another. Each component has the corresponding component subtracted from it. Vec4 vec = someVector - anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator != int operator !=( Vec4 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if the two vectors are different, false otherwise. Description Compares two vectors. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator * Vec4 operator *( Vec4 otherVec ) Vec4 operator *( double factor ) Parameters otherVec The vector to multiply this vector by. factor A scale factor to multiply each component by. Returns Vec4 The resulting vector. Description Multiplies a vector by another vector or a scale factor. When a Vec4 is passed, the operation will perform per-component multiplication. Vec4 vec = someVector * anotherVector; Vec4 vec = someVector * 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator / Vec4 operator /( Vec4 otherVec ) Vec4 operator /( double factor ) Parameters otherVec The vector to divide this vector by. factor A scale factor to divide each component by. Returns Vec4 The resulting vector. Description Divides a vector by another vector or a scale factor. When a Vec4 is passed, the operation will perform per-component division. Vec4 divVec = someVector / anotherVector; Vec4 divVec = someVector / 1.2; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator + Vec4 operator +( Vec4 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec4 The resulting vector. Description Adds two vectors together. Each component is added to the corresponding component. Vec4 sum = someVector + anotherVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator += Vec4 operator +=( Vec4 otherVec ) Parameters otherVec The vector to add to this one. Returns Vec4 The resulting vector. Description Assigns the vector to be the sum of two vectors. Each component is added to the corresponding component. Vec4 vec += someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator -= Vec4 operator -=( Vec4 otherVec ) Parameters otherVec The vector to subtract from this one. Returns Vec4 The resulting vector. Description Assigns the vector to be the difference of two vectors. Each component has the corresponding component subtracted from it. vec -= someVector; Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator == int operator ==( Vec4 otherVec ) Parameters otherVec The vector to compare to this vector. Returns int True if both vectors are exactly the same, false otherwise. Description Compares two vectors. Do no remove, this fixes the anchor on doc.flexsim.com Vec4 .operator unary - Vec4 operator unary -( ) Returns Vec4 The resulting vector. Description Negates the vector. Each component is negated. Vec4 vec = -someVec;"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.html",
        "title": "FlexScript Class - XML",
        "content": "Description Namespace for the XML functions. Contains a few static functions. Static Methods load Load a string of XML into an XML document. loadFile Load a file into an XML document. Details Do no remove, this fixes the anchor on doc.flexsim.com XML .load() static XML.Document load( string xml ) Parameters xml The string of text to be parsed as XML and loaded into a document. Returns XML.Document An XML.Document object. Description Load a string of XML into an XML document. string xml = \"<MyElement>Some text</MyElement>\"; XML.Document doc = XML.load(xml); ... Do no remove, this fixes the anchor on doc.flexsim.com XML .loadFile() static XML.Document loadFile( string filePath ) Parameters filePath The file name to be loaded into a document. Returns XML.Document An XML.Document object. Description Load a file into an XML document. string fileName = \"test.xml\"; XML.Document doc = XML.loadFile(fileName); ..."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Comment.html",
        "title": "FlexScript Class - XML.Comment",
        "content": "Inherits from XML.Node Description A class that represents an XML Comment."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Declaration.html",
        "title": "FlexScript Class - XML.Declaration",
        "content": "Inherits from XML.Node Description A class that represents an XML Declaration."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Document.html",
        "title": "FlexScript Class - XML.Document",
        "content": "Inherits from XML.Node Description A class that represents an XML Document. Properties loadError The integer value of the error encountered while loading a document. loadErrorName The string name of the error encountered while loading a document. root Return the root element of the document. Methods saveAs Saves the XML file to disk. Returns XML_NO_ERROR on success, or an errorID (see loadError above). Details Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .loadError readonly int loadError Description The integer value of the error encountered while loading a document. XML.Document doc = XML.loadFile(\"test.xml\"); if (!doc) { return doc.loadError; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .loadErrorName readonly string loadErrorName Description The string name of the error encountered while loading a document. Here's a list of error names: XML_NO_ERROR XML_NO_ATTRIBUTE XML_WRONG_ATTRIBUTE_TYPE XML_ERROR_FILE_NOT_FOUND XML_ERROR_FILE_COULD_NOT_BE_OPENED XML_ERROR_FILE_READ_ERROR XML_ERROR_ELEMENT_MISMATCH XML_ERROR_PARSING_ELEMENT XML_ERROR_PARSING_ATTRIBUTE XML_ERROR_IDENTIFYING_TAG XML_ERROR_PARSING_TEXT XML_ERROR_PARSING_CDATA XML_ERROR_PARSING_COMMENT XML_ERROR_PARSING_DECLARATION XML_ERROR_PARSING_UNKNOWN XML_ERROR_EMPTY_DOCUMENT XML_ERROR_MISMATCHED_ELEMENT XML_ERROR_PARSING XML_CAN_NOT_CONVERT_TEXT XML_NO_TEXT_NODE XML.Document doc = XML.loadFile(\"test.xml\"); if (!doc) { print(\"Load Error:\", doc.loadErrorName); return doc.loadError; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .root readonly XML.Element root Description Return the root element of the document. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; ... Do no remove, this fixes the anchor on doc.flexsim.com XML.Document .saveAs() saveAs( string filePath , int compact = 0 ) Parameters filePath The file path to save your document to. compact If 1, will only keep required whitespace and newlines. Otherwise, leave it as is. Description Saves the XML file to disk. Returns XML_NO_ERROR on success, or an errorID (see loadError above). You can provide a relative path or an absolute path. XML.Document doc; ... doc.saveAs(\"test1.xml\"); // equivalent to: doc.saveAs(modeldir() + \"test1.xml\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Element.html",
        "title": "FlexScript Class - XML.Element",
        "content": "Inherits from XML.Node Description A class that represents an XML Element. Properties attrs An AttributeMap which manages element attributes. Methods getText Returns text (if any) found in the first child of the element. Details Do no remove, this fixes the anchor on doc.flexsim.com XML.Element .attrs readonly attrs Description An AttributeMap which manages element attributes. attrs is a dynamic property similar to the Process Flow token.labels . That means you can add new attributes, reassign them, and retrieve them like this: XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; root.newAttribute = 5; // create and assign new attribute root.newAttribute = \"house\"; // reassign attribute string val = root.newAttribute; // get attribute Additionally, there are several functions for explicitly getting, setting, and deleting. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; root.set(\"newAttribute\", 5); // create and assign new attribute root.set(\"newAttribute\", \"house\"); // reassign attribute string val = root.get(\"newAttribute\"); // get attribute root.deleteAttr(\"newAttribute\"); // delete attribute If you try to retrieve an attribute that hasn't been assign yet, it will throw an error. However, you can query whether an attribute exists using the \"has\" function. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; Variant v = 0; if (root.has(\"oldAttribute\")) { print(\"I've got it!\"); v = root.oldAttribute; } else { print(\"I don't have it!\"); v = \"new value\"; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Element .getText() string getText( ) Returns string The text string value. Description Returns text (if any) found in the first child of the element. XML.Document doc = XML.loadFile(\"test.xml\"); var root = doc.root; var first = root.first; string text = first.getText();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Node.html",
        "title": "FlexScript Class - XML.Node",
        "content": "Description A base class for other XML Nodes. Properties first Get the first child of the node, null if there are no children. last Get the last child of the node, null if there are no children. next Get the next sibling of the node, null if there is no next sibling. prev Get the previous silbing of the node, null if there is no previous sibling. up Get the parent of the node, null if the current node is a Document. value Returns the value of the node. The meaning of 'value' changes for the specific type. Methods createComment Create an XML.Comment child node. createDeclaration Create an XML.Declaration child node. createElement Create an XML.Element child node. createText Create an XML.Text child node. createUnknown Create an XML.Unknown child node. deleteChild Delete a child from this node. deleteChildren Deletes all children from this node. Details Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .first readonly XML.Node first Description Get the first child of the node, null if there are no children. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Declaration dec = doc.first; Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .last readonly XML.Node last Description Get the last child of the node, null if there are no children. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element element = doc.last; Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .next readonly XML.Node next Description Get the next sibling of the node, null if there is no next sibling. This example code loops through each child of the root node and prints its value. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; XML.Element element = root.first; while (element) { print(\"value:\", element.value); element = element.next; } Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .prev readonly XML.Node prev Description Get the previous silbing of the node, null if there is no previous sibling. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; XML.Element element = root.last; XML.Element sibling = element.prev; Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .up readonly XML.Node up Description Get the parent of the node, null if the current node is a Document. XML.Document doc = XML.loadFile(\"test.xml\"); XML.Element root = doc.root; XML.Element element = root.first; ... XML.Element parent = element.up; // parent == root Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .value readonly string value Description Returns the value of the node. The meaning of 'value' changes for the specific type. Document: Empty Element: Name of the element Comment: The comment text Unknown: The tag contents Text: The text string Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createComment() XML.Comment createComment( string comment , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters comment The comment text. placement Where the comment will be placed. afterThis The child the new comment will be placed after. Returns XML.Comment An XML.Comment object. Description Create an XML.Comment child node. This example code will place the comment \"my comment\" at the beginning of the file. XML.Document doc = XML.loadFile(\"test.xml\"); doc.createComment(\"my comment\", XML.NodePlacement.First); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createDeclaration() XML.Declaration createDeclaration( string declaration = 0 , int placement = XML.Placement.Last , XML.Node afterThis = nullvar ) Parameters declaration Replace the default declaration with your own. placement Where the declaration will be placed. afterThis The child the new declaration will be placed after. Returns XML.Declaration An XML.Declaration object. Description Create an XML.Declaration child node. This example code will create a new document and set the first child to be the default declaration. The default declaration is: xml version=\"1.0\" encoding=\"UTF-8\". XML.Document doc; doc.createDeclaration(); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createElement() XML.Element createElement( string name , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters name The name of the tag of the new element. placement Where the element will be placed. afterThis The child the new element will be placed after. Returns XML.Element An XML.Element object. Description Create an XML.Element child node. This example code creates a blank document with a root element and subnode elements. The last line demonstrates how you might use the additional parameters. XML.Document doc; XML.Element root = doc.createElement(\"root\"); var element = root.createElement(\"firstChild\"); root.createElement(\"lastChild\"); root.createElement(\"middleChild\", XML.NodePlacement.After, element); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createText() XML.Text createText( string text , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters text The text string. placement Where the text will be placed. afterThis The child the new text will be placed after. Returns XML.Text An XML.Text object. Description Create an XML.Text child node. XML.Document doc; var students = doc.createElement(\"students\"); var student = root.createElement(\"student\"); child.attrs.name = \"John Smith\"; var gradesNode = child.createElement(\"grades\"); Array classes = [\"English\", \"Math\", \"Science\", \"Art\"]; Array grades = [52, 98, 97.3, 12]; for (int i = 1; i <= classes.length; i++) { var class = gradesNode.createElement(classes[i]); class.createText(string.fromNum(grades[i])); } doc.saveAs(\"grades.xml\"); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .createUnknown() XML.Unknown createUnknown( string text , int placement = XML.NodePlacement.Last , XML.Node afterThis = nullvar ) Parameters text The tag contents. placement Where the unknown node will be placed. afterThis The child the new unknown node will be placed after. Returns XML.Unknown An XML.Unknown object. Description Create an XML.Unknown child node. XML.Document doc; doc.createUnknown(\"testing this unknown thing 153\"); // results in the following tag // <!testing this unknown thing 153> Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .deleteChild() deleteChild( XML.Node child ) Parameters child The child node to be deleted. Description Delete a child from this node. This example code deletes the first child from the root node of the document. XML.Document doc = XML.loadFile(\"test.xml\"); var root = doc.root; var first = root.first; root.deleteChild(first); doc.saveAs(\"test1.xml\"); Do no remove, this fixes the anchor on doc.flexsim.com XML.Node .deleteChildren() deleteChildren( ) Description Deletes all children from this node. This example code deletes all the children from the root node of the document. XML.Document doc = XML.loadFile(\"test.xml\"); var root = doc.root; root.deleteChildren(); doc.saveAs(\"test1.xml\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.NodePlacement.html",
        "title": "FlexScript Class - XML.NodePlacement",
        "content": "Description An enumeration of integer values associated with XML node placement. Primarily used with the XML.Node's create functions. XML.NodePlacement. Last is default behavior. Static Properties After Place this new node after another node. First Add the new node as the first child of the current node. Last Add the new node as the last child of the current node. This is default behavior. Details Do no remove, this fixes the anchor on doc.flexsim.com XML.NodePlacement .After static readonly int After Description Place this new node after another node. XML.Document doc; XML.Element root = doc.createElement(\"root\"); var element = root.createElement(\"firstChild\"); root.createElement(\"lastChild\"); root.createElement(\"middleChild\", XML.NodePlacement.After, element); Do no remove, this fixes the anchor on doc.flexsim.com XML.NodePlacement .First static readonly int First Description Add the new node as the first child of the current node. XML.Document doc = XML.loadFile(\"test.xml\"); doc.createComment(\"my comment\", XML.NodePlacement.First); Do no remove, this fixes the anchor on doc.flexsim.com XML.NodePlacement .Last static readonly int Last Description Add the new node as the last child of the current node. This is default behavior. XML.Document doc = XML.loadFile(\"test.xml\"); doc.createComment(\"my comment\", XML.NodePlacement.Last); // Adding XML.NodePlacement.Last is redundant, you can leave it out"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Text.html",
        "title": "FlexScript Class - XML.Text",
        "content": "Inherits from XML.Node Description A class that represents an XML Text."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Data/XML.Unknown.html",
        "title": "FlexScript Class - XML.Unknown",
        "content": "Inherits from XML.Node Description A class that represents something the XML parser doesn't recognize."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.Connection.html",
        "title": "FlexScript Class - Database.Connection",
        "content": "Description A class for connecting to and querying a database. Every database connector that you create in your model's toolbox will have a Database.Connection associated with it. To access the connection associated with a connector, use the name-based constructor, providing the name of the database connector. Database.Connection con = Database.Connection(\"DBConnector1\"); Properties isConnected 1 if the connection is currently connected, 0 otherwise. Methods connect Attempts to connect to the database. disconnect Disconnects from the database. prepareStatement Creates a new Database.PreparedStatement object for executing the SQL statement. query Executes a SQL query, returning the result. Constructor Database.Connection Retrieves the connection associated with a named database connector. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .isConnected readonly int isConnected Description 1 if the connection is currently connected, 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .connect() int connect( ) Returns int 1 if successful, 0 otherwise. Description Attempts to connect to the database. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .disconnect() void disconnect( ) Description Disconnects from the database. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .prepareStatement() Database.PreparedStatement prepareStatement( string sqlStatement ) Parameters sqlStatement The SQL statement to be executed by the Database.PreparedStatement. Returns Database.PreparedStatement A newly created Database.PreparedStatement . Description Creates a new Database.PreparedStatement object for executing the SQL statement. Prepared statements are bound to the tree. A connection will automatically remove all its prepared statements when it is disconnected. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection .query() Database.ResultSet query( string sqlQuery ) Parameters sqlQuery The SQL query to execute. Description Executes a SQL query, returning the result. Do no remove, this fixes the anchor on doc.flexsim.com Database.Connection Constructor Database.Connection( string connectorName ) Parameters connectorName The name of the connector whose connection should be retrieved. Description Retrieves the connection associated with a named database connector. Database.Connection con = Database.Connection(\"DBConnector1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.DataType.html",
        "title": "FlexScript Class - Database.DataType",
        "content": "Description A class that enumerates various database storage types. This class' enumerations are used in binding parameters in a Database.PreparedStatement . statement.bindParam(1, myValue, Database.DataType.SmallInt); This set of available values corresponds closely with the ANSI standard SQL language's set of supported database storage types. Methods fromString Gets the data type value associated with the name of a storage type. Static Properties BigInt A 64-bit integer. Bool A boolean 0 or 1 value. Char A fixed length string. Date A date value. DateTime A date-time value. Decimal A decimal value. Double A double precision floating point value. Float A variable precision floating point value. Int A 32-bit integer generally 32-bit. Interval A time interval value. NChar A fixed length unicode string. Numeric A numeric value. NVarChar A variable length unicode string. Real A 32-bit floating point value. SmallInt A 16-bit integer. Text A variable length string. Time A time value. Unknown An unknown data type. VarChar A variable length string. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .fromString() int fromString( string typeName ) Returns int The data type value for the given name. Description Gets the data type value associated with the name of a storage type. This can be used if you are querying the information schema of a database. In information schemas, field storage types are stored as strings such as \"varchar\" or \"smallint\". This method will interpret such a string an return the enumeration type value associated with it. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .BigInt static readonly int BigInt Description A 64-bit integer. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Bool static readonly int Bool Description A boolean 0 or 1 value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Char static readonly int Char Description A fixed length string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Date static readonly int Date Description A date value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .DateTime static readonly int DateTime Description A date-time value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Decimal static readonly int Decimal Description A decimal value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Double static readonly int Double Description A double precision floating point value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Float static readonly int Float Description A variable precision floating point value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Int static readonly int Int Description A 32-bit integer generally 32-bit. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Interval static readonly int Interval Description A time interval value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .NChar static readonly int NChar Description A fixed length unicode string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Numeric static readonly int Numeric Description A numeric value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .NVarChar static readonly int NVarChar Description A variable length unicode string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Real static readonly int Real Description A 32-bit floating point value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .SmallInt static readonly int SmallInt Description A 16-bit integer. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Text static readonly int Text Description A variable length string. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Time static readonly int Time Description A time value. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .Unknown static readonly int Unknown Description An unknown data type. Do no remove, this fixes the anchor on doc.flexsim.com Database.DataType .VarChar static readonly int VarChar Description A variable length string."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.PreparedStatement.html",
        "title": "FlexScript Class - Database.PreparedStatement",
        "content": "Description A class for execution and manipulation of a database SQL statement. The Database.PreparedStatement class is returned from the Database.Connection . prepareStatement () method. Calling this method creates a new PreparedStatement object. This object can be executed multiple times, and different values can be bound to named or numbered parameters in the statement. Database.Connection con = Database.Connection(\"DBConnector1\"); con.connect(); Database.PreparedStatement statement = con.prepareStatement(\"INSERT INTO customers (ID, FirstName, LastName) VALUES (:id, :firstName, :lastName)\"); Table customers = Table(\"Customers\"); for (int i = 1; i <= customers.numRows; i++) { statement.bindParam(\"id\", customers[i][\"ID\"], Database.DataType.Int); statement.bindParam(\"firstName\", customers[i][\"FirstName\"], Database.DataType.VarChar); statement.bindParam(\"lastName\", customers[i][\"LastName\"], Database.DataType.VarChar); statement.execute(); } con.disconnect(); Properties statement The SQL statement associated with this PreparedStatement. Methods bindParam Binds a value to a named or numbered parameter in the SQL statement. execute Executes the statement with the currently bound parameter values. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.PreparedStatement .statement readonly string statement Description The SQL statement associated with this PreparedStatement. Do no remove, this fixes the anchor on doc.flexsim.com Database.PreparedStatement .bindParam() void bindParam( string paramName , Variant value , int dataType ) void bindParam( int paramNum , Variant value , int dataType ) Parameters paramName The name of a parameter defined in the SQL statement. paramNum The number of a parameter defined in the SQL statement. value The value to bind the parameter to. dataType The database's storage data type for that parameter. This should be one of the values defined in Database.DataType . Description Binds a value to a named or numbered parameter in the SQL statement. To define a parameter for binding, add to the SQL statement a colon followed by either a number or a named alias. Below is an example of an SQL statement with named parameters. INSERT INTO customers ID, FirstName, LastName) VALUES (:id, :firstName, :lastName) In this example, you would bind the parameter by its name. statement.bindParam(\"id\", myID); Below is an example of an SQL statement with numbered parameters. INSERT INTO customers ID, FirstName, LastName) VALUES (:1, :2, :3) In this example, you would bind the parameter by its number. statement.bindParam(1, myID); Do no remove, this fixes the anchor on doc.flexsim.com Database.PreparedStatement .execute() Database.ResultSet execute( ) Returns Database.ResultSet The ResultSet associated with this execution. Description Executes the statement with the currently bound parameter values. In the current implementation, only one ResultSet is available at any given time for a given PreparedStatement. This means that you must completely process a result set before calling execute() again. Subsequent calls to execute() will cause any previously generated ResultSets to refer to the new result of the execute() call."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Database/Database.ResultSet.html",
        "title": "FlexScript Class - Database.ResultSet",
        "content": "Description A class for retrieving the result of a database SQL query. A Database.ResultSet is returned by Database.Connection . query (), and by Database.PreparedStatement . execute (). The class provides methods and properties for retrieving the result data associated with a SQL query execution. Database.Connection con = Database.Connection(\"DBConnector1\"); con.connect(); Database.ResultSet result = con.query(\"SELECT * FROM customers\"); while (result.fetchNext()) { string firstName = result[\"FirstName\"]; string lastName = result[\"LastName\"]; for (int j = 1; j <= result.numFields; j++) { Variant column1Value = result[j]; ... } ... } con.disconnect(); A Database.ResultSet implements a forward-only cursor. This means you can only traverse through the results once. This can either be done manually, using fetchNext (), or automatically by dumping the data to a table with cloneTo (). However, you cannot do both. In other words, you cannot clone the result using cloneTo(), and then also use fetchNext() to traverse the result again, or vice versa. Properties numFields The number of fields in the result set. Methods cloneTo Clones the result set to a destination table. fetchNext Moves the cursor forward one record in the result. getFieldName Gets the name of a result column by index. Operators [] Gets a result field value by its name or rank. Details Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .numFields readonly int numFields Description The number of fields in the result set. Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .cloneTo() void cloneTo( Table destTable ) Description Clones the result set to a destination table. Database.Connection con = Database.Connection(\"DBConnector1\"); con.connect(); con.query(\"SELECT * FROM customers\").cloneTo(Table(\"Customers\")); con.disconnect(); Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .fetchNext() int fetchNext( ) Returns int 1 if successful, 0 if the end of the result set has been reached. Description Moves the cursor forward one record in the result. Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .getFieldName() string getFieldName( int fieldNum ) Parameters fieldNum The index of the field. Returns string The name of the field at the specified index. Description Gets the name of a result column by index. Array fields; Database.Connection db = Database.Connection(\"DatabaseConnector1\"); db.connect(); var resultSet = db.query(\"SELECT * FROM customers\"); for (int i = 1; i <= resultSet.numFields; i++) { fields.push(resultSet.getFieldName(i)); } db.disconnect(); return fields; Do no remove, this fixes the anchor on doc.flexsim.com Database.ResultSet .operator [] Variant operator []( int fieldRank ) Variant operator []( int fieldName ) Parameters fieldRank The 1-based rank of the desired field fieldName The name of the desired field Returns Variant The value of the given field for the result set's current record. Description Gets a result field value by its name or rank."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/EmpiricalDistribution/Empirical.html",
        "title": "FlexScript Class - Empirical",
        "content": "Description A class that represents an Empirical Distribution. Methods get Returns a random variate from a defined Empirical Distribution tool. Constructor Empirical Creates a reference to a defined Empirical Distribution tool. Details Do no remove, this fixes the anchor on doc.flexsim.com Empirical .get() Variant get( int stream = 0 ) Parameters stream the stream your distribution will use. Description Returns a random variate from a defined Empirical Distribution tool. return Empirical(\"Distribution1\").get(getstream(current)); Do no remove, this fixes the anchor on doc.flexsim.com Empirical Constructor Empirical( string name ) Parameters name The name of a defined Empirical Distribution tool. Description Creates a reference to a defined Empirical Distribution tool. Empirical distribution1 = Empirical(\"Distribution1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Http/Http.Method.html",
        "title": "FlexScript Class - Http.Method",
        "content": "Description An enumeration of integer values representing Http Request Methods. The Http.Method values represent the method used in Http.Request. method . Static Properties Get = 1 Method to request data. Post = 3 Method to create or replace a target resource with specified data. Is not idempotent. Put = 2 Method to create or replace a target resource with specified data. Is idempotent. Details Do no remove, this fixes the anchor on doc.flexsim.com Http.Method .Get static readonly int Get = 1 Description Method to request data. Do no remove, this fixes the anchor on doc.flexsim.com Http.Method .Post static readonly int Post = 3 Description Method to create or replace a target resource with specified data. Is not idempotent. Do no remove, this fixes the anchor on doc.flexsim.com Http.Method .Put static readonly int Put = 2 Description Method to create or replace a target resource with specified data. Is idempotent."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Http/Http.Request.html",
        "title": "FlexScript Class - Http.Request",
        "content": "Description A class for creating a Http Request. Properties data Gets/sets the data being sent with the request. failCallback Specify the fail callback treenode. headers Gets/sets the headers being sent with the request. host Gets/sets the host. labelProperties Use your own named properties to get/set label values. method Specify the request Http.Method . path Gets/sets the resource path. port Gets/sets the port the request is being sent to. statusCallback Specify the status callback treenode. successCallback Specify the success callback treenode. timeout Specify the request timeout in ms. useSSL Specify whether to use SSL if applicable. Methods send Send an asynchronous Http request. sendAndWait Send a synchronous Http request. Constructor Http.Request Creates a Http.Request based on the given url. Details Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .data string data Description Gets/sets the data being sent with the request. Http.Request request; request.host = \"www.flexsim.com\"; request.data = \"name1=value1\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .failCallback treenode failCallback Description Specify the fail callback treenode. Http.Request request; request.host = \"www.flexsim.com\"; request.failCallback = Model.find(\"Tools/failCallback\"); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .headers string headers Description Gets/sets the headers being sent with the request. If this property is not set, then \"Content-Type: application/x-www-form-urlencoded\\r\\n\" will be passed as the headers. Http.Request request; request.host = \"127.0.0.1\"; request.port = 5000; request.path = \"/v1/prediction\"; request.data = JSON.stringify(observation); request.headers = \"Content-Type: application/json\\r\\n\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .host string host Description Gets/sets the host. Http.Request request; request.host = \"www.flexsim.com\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. Custom properties added to Http.Request objects will be accessible with the same name on Http.Response objects created in callbacks and the return value of sendAndWait(). Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); Http.Response response = request.sendAndWait(); print(response.myProcessor); // /Processor1 Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .method int method Description Specify the request Http.Method . Http.Request request; request.host = \"www.flexsim.com\"; request.method = Http.Method.Get; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .path string path Description Gets/sets the resource path. Http.Request request; request.host = \"www.flexsim.com\"; request.path = \"flexsim\"; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .port int port Description Gets/sets the port the request is being sent to. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .statusCallback treenode statusCallback Description Specify the status callback treenode. Http.Request request; request.host = \"www.flexsim.com\"; request.statusCallback = Model.find(\"Tools/statusCallback\"); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .successCallback treenode successCallback Description Specify the success callback treenode. Http.Request request; request.host = \"www.flexsim.com\"; request.successCallback = Model.find(\"Tools/successCallback\"); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .timeout int timeout Description Specify the request timeout in ms. Http.Request request; request.host = \"www.flexsim.com\"; request.timeout = 1000; // 1 second timeout Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .useSSL int useSSL Description Specify whether to use SSL if applicable. Http.Request request; request.host = \"www.flexsim.com\"; request.useSSL = 1; Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .send() void send( ) Description Send an asynchronous Http request. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; request.useSSL = 1; request.successCallback = Model.find(\"Tools/successCallback\"); request.send(); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request .sendAndWait() Http.Response sendAndWait( ) Description Send a synchronous Http request. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; request.useSSL = 1; request.status = Model.find(\"Tools/statusCallback\"); Http.Response response = request.sendAndWait(); Do no remove, this fixes the anchor on doc.flexsim.com Http.Request Constructor Http.Request( string URL ) Parameters URL A URL specifying the host, and can include the protocol(Http/Https), the port, and the reference path. Returns Http.Request A Http.Request Description Creates a Http.Request based on the given url. Http.Request request = Http.Request(\"https://www.flexsim.com:443/flexsim/\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Http/Http.Response.html",
        "title": "FlexScript Class - Http.Response",
        "content": "Description A class representing the Response to a Http Request. Properties data Gets the data sent with the request. failCallback Gets the fail callback treenode. headers Gets the headers of the response. host Gets the host used in the request. labelProperties Use your own named properties to get/set label values. method Gets the request Http.Method used in the request. path Gets the resource path used in the request. port Gets the port the request was sent to. receivedBytes Gets the amount of bytes of the response message received. statusCallback Gets the status callback treenode. statusCode Gets the request's Http status code. successCallback Gets the success callback treenode. timeout Gets the request timeout in ms used in the request. totalBytes Gets the size of the response message in bytes. useSSL Gets whether SSL was used in the request. value Gets the response message to the Http request. Methods saveToFile Saves the Http.Response value to a file. Details Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .data readonly string data Description Gets the data sent with the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .failCallback readonly treenode failCallback Description Gets the fail callback treenode. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .headers readonly string headers Description Gets the headers of the response. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .host readonly string host Description Gets the host used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .labelProperties readonly Variant labelProperties Description Use your own named properties to get/set label values. custom labels on Http.Response objects are inherited from the Http.Request object. Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); Http.Response response = request.sendAndWait(); print(response.myProcessor); // /Processor1 Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .method readonly int method Description Gets the request Http.Method used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .path readonly string path Description Gets the resource path used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .port readonly int port Description Gets the port the request was sent to. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .receivedBytes readonly int receivedBytes Description Gets the amount of bytes of the response message received. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .statusCallback readonly treenode statusCallback Description Gets the status callback treenode. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .statusCode readonly int statusCode Description Gets the request's Http status code. Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); request.sendAndWait(); //In the statusCallback node// Http.Response response = param(1); print(response.statusCode); // last print should be a 200 Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .successCallback readonly treenode successCallback Description Gets the success callback treenode. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .timeout readonly int timeout Description Gets the request timeout in ms used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .totalBytes readonly int totalBytes Description Gets the size of the response message in bytes. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .useSSL readonly int useSSL Description Gets whether SSL was used in the request. Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .value readonly string value Description Gets the response message to the Http request. Http.Request request = Http.Request(\"https://www.flexsim.com/\"); request.statusCallback = Model.find(\"Tools/statusCallback\"); request.myProcessor = Model.find(\"Processor1\"); Http.Response response = request.sendAndWait(); print(response.value); //prints the response message Do no remove, this fixes the anchor on doc.flexsim.com Http.Response .saveToFile() void saveToFile( string filePath ) Description Saves the Http.Response value to a file. Http.Request request; request.host = \"www.flexsim.com\"; request.port = 443; request.useSSL = 1; request.successCallback = Model.find(\"Tools/successCallback\"); Http.Response response = request.sendAndWait(); response.saveToFile(modeldir() + \"flexsim_homepage.html\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.html",
        "title": "FlexScript Class - List",
        "content": "Description A class that represents a list. Lists are a powerful tool that can have many applications in FlexSim. At the most basic level, a List is just that: a list of values. Each value in a list may be either a number, a string, or a reference to an object in the simulation model. Lists also harness the expressive power of SQL for searching, filtering and prioritizing the values on the List. Entries in a List can have user-defined fields. These fields essentially make the List into a dynamic database table. The List can then be filtered and prioritized using SQL queries, as if you were querying a standard database table. Properties stats Allows access to an object's statistics. Methods backOrders Gets an array of the back orders on a certain partition. entries Gets an array of the entries on a certain partition. getEntryFromValue Returns the entry associated with a value. pull Attempts to pull values from the list. push Pushes a value on the list. reevaluateBackOrders Reevaluates back orders against all entries or a specific entry. Constructor List Creates a reference to a global list. Details Do no remove, this fixes the anchor on doc.flexsim.com List .stats readonly stats Description Allows access to an object's statistics. Allows you to access the statistics of a List as TrackedVariable objects. This property provides the following properties and methods: Properties input - returns the input tracked variable output - returns the output tracked variable content - returns the content tracked variable staytime - returns the staytime tracked variable backOrderInput - returns the input tracked variable for backOrders backOrderOutput - returns the output tracked variable for backOrders backOrderContent - returns the content tracked variable for backOrders backOrderStaytime - returns the staytime tracked variable for backOrders // Get the input of a List List(\"MyList\").stats.input.value; Methods fieldTotal(Variant field) fieldTotalInput(Variant field) fieldTotalOutput(Variant field) partitionBackOrderContent(Variant partition) partitionBackOrderInput(Variant partition) partitionBackOrderOutput(Variant partition) partitionBackOrderStaytime(Variant partition) partitionContent(Variant partition) partitionInput(Variant partition) partitionOutput(Variant partition) partitionStaytime(Variant partition) Do no remove, this fixes the anchor on doc.flexsim.com List .backOrders() backOrders( Variant partitionID = 0 ) Parameters startValue The ID of the partition you want to get the back orders for. Description Gets an array of the back orders on a certain partition. This array is read only, but you can query the length of the array as well as accessing individual back orders to query their data. See the List.BackOrder class for more information. List(\"ItemList\").backOrders().length List(\"ItemList\").backOrders(3)[1].puller Do no remove, this fixes the anchor on doc.flexsim.com List .entries() entries( Variant partitionID = 0 ) Parameters startValue The ID of the partition you want to get the entries for. Description Gets an array of the entries on a certain partition. This array is read only, but you can query the length of the array as well as accessing individual entries to query their data. See the List.Entry class for more information. List(\"ItemList\").entries().length List(\"ItemList\").entries(3)[1].value Do no remove, this fixes the anchor on doc.flexsim.com List .getEntryFromValue() List.Entry getEntryFromValue( Variant value , Variant partitionID = 0 ) Parameters value The value that was pushed to the list. partitionID The ID of the partition the value was pushed to. Description Returns the entry associated with a value. Searches the partition for an entry that is associated with the value. If there is no entry associated with the value the method returns null. If Unique Values Only is set to false this method will always return null. List stations = List(\"StationList\"); List.Entry entry = stations.getEntryFromValue(current); stations.reevaluateBackOrders(entry); Do no remove, this fixes the anchor on doc.flexsim.com List .pull() List.PullResult pull( string sqlQuery , double requestNum , double requireNum = 0 , Variant puller = nullvar , Variant partitionID = nullvar , int flags = 0 ) List.PullResult pull( treenode object , double requestNum = 1 , double requireNum = 0 , Variant puller = nullvar , Variant partitionID = nullvar , int flags = 0 ) List.PullResult pull( Array matchValues , string sqlQuery , double requestNum = 1 , double requireNum = 0 , Variant puller = nullvar , Variant partitionID = nullvar , int flags = 0 ) Parameters object The object or node what you would like to pull from the list. matchValues A set of values to match entry values against. The pull operation will only pull values that are in the set of values defined in the matchValues array. This works as an additional filter on the set of values to pull, in addition to any WHERE clause that is defined in the sqlQuery parameter. sqlQuery An sql query that defines what you would like to pull from the list. requestNum The maximum number of things you want to pull from the list. requireNum The minimum number of things you want to pull from the list. puller The thing pulling from the list. partitionID The ID of the partition you want to pull from. flags Flags that modify the behavior of the pull. Description Attempts to pull values from the list. Pulls things from the list that meet the requirements in the sql query. Returns a List.PullResult . List.PullResult pullResult = List(\"ItemList\").pull(\"\", 1, 1); Object item = List(\"ItemList\").pull(\"WHERE type = 3 ORDER BY age\", 3, 2, current, current.station); sqlQuery - Defines the SQL query to use in pulling. The SQL query should only use the WHERE, ORDER BY, SELECT or LIMIT clauses. By default, field names correlate with object label names. For example, if your query is WHERE type > 5 ORDER BY priority DESC then the list will search for objects on the list who have a \"type\" label with a value greater than 5, and will order by objects' \"priority\" label value in descending order, i.e. it will prioritize higher \"priority\" label values. If you need more flexibility than just labels, you can add to the list's defined fields through its properties window. requestNum - Defines the number of entries that you are requesting to pull from the list. If requestNum is greater than zero, then entries that satisfy the query will be immediately removed from the list. If requestNum is zero, the list will do the query and return the result, but it will not remove any satisfying entries. If you want to query for a limited number of entries, but you also do not want to remove them, pass 0 as the requestNum, and use the LIMIT clause in the pull query. requireNum - Defines the number of entries that you require to be pulled from the list. This must be less than or equal to requestNum. If requireNum is greater than zero and the required number is not met, then a back order will be created for the pull request, and as items are pushed onto the list, they will be pulled off by the back order until the back order's requireNum is met, at which point the back order will be removed. If no back order queue strategy is defined on the list, back orders are fulfilled in FIFO order assuming they do not allocate all-or-nothing. If a back order is created and you would like to be notified when the back order is fulfilled, use the eventlisten() command as follows: eventlisten(pullResult.backOrder, \"OnFulfill\", callbackNode, 0, ...) This will cause callbackNode's code to be evaluated when the back order is fulfilled. If the back order may be incrementally fulfilled multiple times, the callbackNode's code will be evaluated each time a partial fulfillment is made. Additional parameters (the ... optional parameters) may be defined for callbackNode's param(1), param(2), etc. You may replace these parameters with one of the following macros to have that parameter be replaced with a fulfillment-dependent value when the callback is made. LIST_ON_FULFILL_VALUE - The value of the entry or entries that were pulled. LIST_ON_FULFILL_NUM_FULFILLED - The quantity that was fulfilled as part of this fulfillment. Usually 1 unless the query has a SELECT clause. LIST_ON_FULFILL_TOTAL_FULFILLED - The total quantity fulfilled for the back order up to this point. LIST_ON_FULFILL_NUM_REQUESTED - The number requested initially when the pull request was made. LIST_ON_FULFILL_NUM_REQUIRED - The number required initially when the pull request was made. For example, if you use the command: eventlisten(pullResult.backOrder, \"OnFulfill\", callbackNode, 0, LIST_ON_FULFILL_VALUE) Here, when a fulfillment is made, param(1) of callbackNode's code will be replaced with the value for the entry that satisfied the fulfillment. puller - Defines who or what is pulling the entries from the list. This can be 0. Reasons to use a puller may be: You can access the puller's labels in the query. For example, a query of WHERE Type = puller.Type would match entries whose \"Type\" label is equal to the puller's \"Type\" label. The list's pushers can know who is pulling them off the list. The push() method will return the back order pullers who pulled the item off the list. If you use the list's custom query fields, some require a valid puller to evaluate properly. partitionId - Defines the partition id to pull from. Using a partitionId will make the list act like multiple separate lists, each uniquely identified by its partitionId. If you pushed an entry onto the list with a defined partition id, you should pull the entry off with the same partitionId. flags - Defines behavior flags for pulling. Valid values may be one or more of the following: LIST_PULL_ALL_OR_NOTHING The pull request will only pull entries if it can pull all required entries. If this value is not specified, the pull/back order will pull entries off the list as they are available. LIST_PARSE_QUERY Instead of actually doing a pull operation, the list will simply parse the defined query. It will return a reference to a node that holds the cached query. This node can subsequently be passed as the query parameter to subsequent pull() calls. This can improve simulation run speed because it only has to do the parsing once, instead of every time you call pull(). Ownership of the node is given to the caller, i.e. it is your responsibility to store and later delete the node once you're done with it. You should use transfernode() to move the node where you can access it. LIST_PULL_ENTRY_NODES Instead of returning the pulled values, the command will return the set of entry nodes that reference those pulled values. Primarily this is useful only if you need to know the time that the entries were pushed onto the list (getsdtvalue(entryNode, \"pushTime\")). The list uses the same rules of whether to remove the entries from the list (requestNum > 0), but in this case when it removes them, it will put them into a temporary location and return them instead of destroying them. You are required to destroy them yourself (if they were removed) once you have the needed information. LIST_DO_NOT_REMOVE Matching entries on the list will be returned by this command, however, the entries will remain on the list. This is useful when creating a directory or routing that doesn't dynamically change. LIST_DO_NOT_BACK_ORDER If the number of matching entries is less than the required number, no back order will will be created. LIST_PULL_BACK_ORDERS Instead of querying the entries on the list, this command will query the back orders and return a list of all back orders that matched the specified query. If the query contains an ORDER BY, the back orders will be sorted. This will also reevaluate the back orders and will remove any back orders that are fulfilled. LIST_DO_NOT_FULFILL Used in conjunction with LIST_PULL_BACK_ORDERS, this will cause the back orders to not be reevaluated or removed. This allows you to purely query the list's back orders or to sort back orders without fulfilling any back order. LIST_RETURN_BACK_ORDER_IF_NOT_FULFILL Use in conjunction with LIST_PULL_ALL_OR_NOTHING. If the pull is unable to be fulfilled, a back order will be created. A reference to this back order node will be returned by the pull() method. This can then be used to add a listener for the onFulfill of the backorder using eventlisten(). Return Value - If the pull is successful, the command will return a List.PullResult which is a Variant holding the pulled value(s). If there are multiple values pulled, they will be in an Array. If the pull is not completely successful and a back order is created, you can access the created back order on the pull result. pullResult.backOrder Do no remove, this fixes the anchor on doc.flexsim.com List .push() List.PushResult push( Variant value ) List.PushResult push( Variant value , Variant partitionID ) List.PushResult push( Variant value , Variant partitionID , Variant pushArg1 , Variant pushArg2 , Variant pushArg3 , Variant pushArg4 , Variant pushArg5 , Variant pushArg6 , Variant pushArg7 , Variant pushArg8 ) Parameters value The value to push on the list. partitionID The ID of the partition you want to push to. pushArgs An argument you want to push with the value. Description Pushes a value on the list. Puts the value on the list making it available to anyone who can pull from the list. Returns a List.PushResult . List.PushResult pushResult = List(\"ItemList\").push(item); If partitionId is specified then the list will act like multiple lists, each list uniquely identified by its partitionId. When you push a value onto a list with a given partitionId, you must later pull the value off the list by using the same partitionId. List(\"ItemList\").push(item, item.type); Pushing a nullvar value will just re-evaluate all back orders without pushing anything onto the list. List(\"ItemList\").push(nullvar); When you push the item onto the list, if it is immediately pulled by a back order, then the push result will contain the puller(s) who pulled the item off the list. Otherwise it contains 0. To access the node that represents the entry pushed onto the list use the entries property of the returned List.PushResult . List.Entry entry = List(\"ItemList\").push(item).entries[1]; You may also push an array of values onto the list. This is similar to just looping through each value and pushing it onto the list, except that all entries will be pushed onto the list BEFORE evaluating back orders. This means that back orders with all-or-nothing pull requests for multiple entries can be fulfilled before they are \"stolen\" away by back orders without all-or-nothing requests or who are requesting fewer entries. Do no remove, this fixes the anchor on doc.flexsim.com List .reevaluateBackOrders() void reevaluateBackOrders( ) void reevaluateBackOrders( List.Entry entry ) Parameters entry The entry the back orders will be reevaluated against. Description Reevaluates back orders against all entries or a specific entry. If an entry is specified, all the back orders in the same partition will be reevaluated against the enty. If no entry is specified, all back orders in every partition will be reevaluated against all the entries in the same partition. List(\"ItemList\").reevaluateBackOrders() List(\"ItemList\").reevaluateBackOrders(List(\"ItemList\").entries()[1]) Do no remove, this fixes the anchor on doc.flexsim.com List Constructor List( string name ) Parameters name The name of the global list. Description Creates a reference to a global list. List itemList = List(\"ItemList\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.BackOrder.html",
        "title": "FlexScript Class - List.BackOrder",
        "content": "Description A class that represents a list back order. List back orders represent pull requests that are waiting to be fulfilled. Properties flags The flags used by this back order. labelProperties Use your own named properties to get/set label values. labels Accesses a node's labels as nodes. numRequested The number of things this back order is requesting. numRequired The number of things this back order is requiring. puller Gets the variant value of the thing pulling from the list. query Gets the sql query this back order is using to define the pull requirements. Methods remove Removes the back order from the partition. Details Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .flags readonly int flags Description The flags used by this back order. int requireNum = List(\"ItemList\").backOrders()[1].flags; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. Works just like labelProperties on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .labels readonly labels Description Accesses a node's labels as nodes. Works just like labels on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .numRequested readonly double numRequested Description The number of things this back order is requesting. double requestNum = List(\"ItemList\").backOrders()[1].numRequested; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .numRequired readonly double numRequired Description The number of things this back order is requiring. double requireNum = List(\"ItemList\").backOrders()[1].numRequired; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .puller readonly Variant puller Description Gets the variant value of the thing pulling from the list. List(\"ItemList\").backOrders()[1].puller == current; Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .query readonly string query Description Gets the sql query this back order is using to define the pull requirements. List(\"ItemList\").backOrders()[1].query.startsWith(\"WHERE\"); Do no remove, this fixes the anchor on doc.flexsim.com List.BackOrder .remove() void remove( ) Description Removes the back order from the partition. List(\"ItemList\").backOrders()[1].remove(); Use this instead of destroyobject() so the list can keep track of its statistics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.Entry.html",
        "title": "FlexScript Class - List.Entry",
        "content": "Description A class that represents a list entry. List entries represent values that have been pushed on the list and are waiting to be pulled. Properties value Gets the variant value of the thing on the list. Methods remove Removes the entry from the partition. Details Do no remove, this fixes the anchor on doc.flexsim.com List.Entry .value readonly Variant value Description Gets the variant value of the thing on the list. List(\"ItemList\").entries()[1].value == 5; Do no remove, this fixes the anchor on doc.flexsim.com List.Entry .remove() void remove( ) Description Removes the entry from the partition. List(\"ItemList\").entries()[1].remove(); Use this instead of destroyobject() so the list can keep track of its statistics."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.PullResult.html",
        "title": "FlexScript Class - List.PullResult",
        "content": "Inherits from Variant Description A class that represents the result of a call to List . pull (). The List.PullResult can be treated just like a Variant . The Variant holds the value or values that were pulled from the list. There are several options for writing code to get the result from a list pull. //define full List.PullResult type List.PullResult pulled = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); // just infer the type with var var pulled = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); // don't need full List.PullResult properties, so just get it as a Variant Variant pulled = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); Properties backOrder The resulting back order, if one exists. Details Do no remove, this fixes the anchor on doc.flexsim.com List.PullResult .backOrder readonly List.BackOrder backOrder Description The resulting back order, if one exists. When the pull is not completely fulfilled, a back order associated with the pull is created. This property gives access to that back order if one exists. List.PullResult result = List(\"ItemList\").pull(\"WHERE Type == 10\", 1, 1); if (result.backOrder) { ... // the pull wasn't completely fulfilled, so there is a back order. }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/List/List.PushResult.html",
        "title": "FlexScript Class - List.PushResult",
        "content": "Inherits from Variant Description A class that represents the result of a call to List . push (). The List.PushResult can be treated just like a Variant . Properties entries The resulting entries, if any exist. Details Do no remove, this fixes the anchor on doc.flexsim.com List.PushResult .entries readonly entries Description The resulting entries, if any exist. If the pushed object is not immediately pulled, an entry is created. This property gives access to that entry if one exists. List.PushResult result = List(\"ItemList\").push(item); result.entries.length // Number of entries just pushed result.entries[1] // A reference to the first entry just pushed on the list"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/People/ElevatorBank.html",
        "title": "FlexScript Class - ElevatorBank",
        "content": "Description A class that represents a bank of elevators. Properties elevators An array accessor to the set of ElevatorBank.Elevator s in this bank. requests An array accessor to the set of ElevatorBank.Request s in this bank. Details Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank .elevators readonly elevators Description An array accessor to the set of ElevatorBank.Elevator s in this bank. ElevatorBank bank = Model.find(\"ElevatorBank1\"); for (int i = 1; i <= bank.elevators.length; i++) { ElevatorBank.Elevator elevator = bank.elevators[i]; ... } Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank .requests readonly requests Description An array accessor to the set of ElevatorBank.Request s in this bank. for (int i = 1; i <= bank.requests.length; i++) { ElevatorBank.Request request = bank.requests[i]; ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/People/ElevatorBank.Elevator.html",
        "title": "FlexScript Class - ElevatorBank.Elevator",
        "content": "Inherits from Object Description A class that represents an elevator member of an ElevatorBank . Properties bank A reference to the ElevatorBank associated with this elevator. capacity The total capacity. This value is entered by the user in the elevator bank properties. isGoingDown A boolean telling if the elevator is currently going down. isGoingUp A boolean telling if the elevator is currently going up. lastFloorZ The z location of the floor that the elevator most recently stopped at. nextFloorZ The z location of the floor that the elevator was most recently dispatched to. travelDirection An integer signifying the elevator's current travel direction. 1 means going up, -1 means going down. 0 means the elevator is idle. usedCapacity The currently used capacity, i.e. the sum of the capacity usages of each traveler currently on the elevator. Methods canStop Returns true if the elevator can stop at the target z location and desired travel direction, given the elevator's current location and travel direction. moveToFloor Tells the elevator to move to the target floor. Details Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .bank readonly ElevatorBank bank Description A reference to the ElevatorBank associated with this elevator. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .capacity readonly double capacity Description The total capacity. This value is entered by the user in the elevator bank properties. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .isGoingDown readonly int isGoingDown Description A boolean telling if the elevator is currently going down. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .isGoingUp readonly int isGoingUp Description A boolean telling if the elevator is currently going up. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .lastFloorZ readonly double lastFloorZ Description The z location of the floor that the elevator most recently stopped at. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .nextFloorZ readonly double nextFloorZ Description The z location of the floor that the elevator was most recently dispatched to. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .travelDirection readonly int travelDirection Description An integer signifying the elevator's current travel direction. 1 means going up, -1 means going down. 0 means the elevator is idle. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .usedCapacity readonly double usedCapacity Description The currently used capacity, i.e. the sum of the capacity usages of each traveler currently on the elevator. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .canStop() int canStop( double floorZ , int travelDirection ) Parameters floorZ The desired z location to stop at. travelDirection The desired travel direction for a request. 1 means going up, -1 means going down, 0 means to ignore desired travel direction. Returns int 1 if the elevator can stop at the location, 0 otherwise. Description Returns true if the elevator can stop at the target z location and desired travel direction, given the elevator's current location and travel direction. This method uses several factors to determine whether the elevator can stop at a given location, as follows: If the elevator is currently idle, it will always return true. If the elevator is not idle, then the desired travel direction must match the elevator's travel direction, and the target z must be \"ahead of it\" given the elevator's current travel direction. In other words, if the elevator is currently going down, then the target z must be below the elevator's current location. If the elevator is going up, the target z must be above the elevator's current location. If the elevator is currently moving, then the target z location must be far enough ahead of the elevator so that the elevator can stop at the target z (given its current speed and deceleration) without going past it. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Elevator .moveToFloor() void moveToFloor( double floorZ ) Parameters floorZ The desired z location to move to. Returns void True if the elevator can stop at the location. Description Tells the elevator to move to the target floor. Since the elevator implements automatic logic for moving between floors, generally you will only use this method in the following situations. When the elevator becomes idle (the OnIdle event), you may want to send the elevator to a home location. If you want to preempt the elevator's normal behavior, because of some abnormal occurrence."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/People/ElevatorBank.Request.html",
        "title": "FlexScript Class - ElevatorBank.Request",
        "content": "Description A class that represents a request for an ElevatorBank.Elevator . You might think of a specific request as corresponding to a pressed/lighted button at the entrance to an elevator bank, or a pressed/lighted button inside an elevator. When a person arrives at an ElevatorBank , the person will press a button to go either up or down. The pressing of the button creates a new request for an elevator to come to that floor. Also, when a person enters an elevator, s/he presses a button for the destination floor to go to. This creates another new request for that specific elevator to go to the target floor. The ElevatorBank manages an array of all currently active requests, in its ElevatorBank . requests property. It also pushes the request onto a List . When elevators need to decide which floor to go to next, they pull from this list, using a user-defined pull query, and then move to whichever floor is chosen from the pull operation. Properties bank A reference to the ElevatorBank associated with this request. creationTime The time that the request was created, i.e. the time that the person pushed the button. floorZ The z location of the request's target floor. isGoingDown A boolean telling if the request is to go down. isGoingUp A boolean telling if the request is to go up. onElevator If not 0, the elevator in which the corresponding button was pushed. In other words, the elevator that the person was on when s/he pushed the button. travelDirection An integer signifying the request's travel direction. 1 means going up, -1 means going down. Details Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .bank readonly ElevatorBank bank Description A reference to the ElevatorBank associated with this request. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .creationTime readonly double creationTime Description The time that the request was created, i.e. the time that the person pushed the button. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .floorZ readonly double floorZ Description The z location of the request's target floor. If the request corresponds to a button outside the elevator (onElevator = 0), then floorZ is the floor location at which to pick up the person. If the requests corresponds to a button inside an elevator (onElevator != 0) then floorZ is the location of the floor that the person wants to go to. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .isGoingDown readonly int isGoingDown Description A boolean telling if the request is to go down. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .isGoingUp readonly int isGoingUp Description A boolean telling if the request is to go up. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .onElevator readonly ElevatorBank.Elevator onElevator Description If not 0, the elevator in which the corresponding button was pushed. In other words, the elevator that the person was on when s/he pushed the button. Do no remove, this fixes the anchor on doc.flexsim.com ElevatorBank.Request .travelDirection readonly int travelDirection Description An integer signifying the request's travel direction. 1 means going up, -1 means going down."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.html",
        "title": "FlexScript Class - PowerPoint",
        "content": "Description A class for accessing PowerPoint. Class references for creating, opening, and editing PowerPoint presentations, slides, and shapes. PowerPoint.Presentation PowerPoint.Slide PowerPoint.Shape PowerPoint.Layout PowerPoint.ShapeType PowerPoint.SlideSizeType Example code for how to create a basic PowerPoint Presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); PowerPoint.Slide Slide = Presentation.addSlide(PowerPoint.Layout.title); PowerPoint.Shape Title = Slide.shapes[1]; PowerPoint.Shape subTitle = Slide.shapes[2]; Title.text = \"The Presentation's Title in Blue\"; Title.color = Color.blue; subTitle.text= \"The Presentation's Subtitle in Green\"; subTitle.color = Color.green; Presentation.save(documentsdir() + \"\\\\Presentation.pptx\"); Presentation.close();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Presentation.html",
        "title": "FlexScript Class - PowerPoint.Presentation",
        "content": "Description A class for creating, opening, and editing PowerPoint presentations. Properties slides Accesses slides in the presentation (Read Only). slideSize Gets/sets the size of the slides in the presentation. slideSizeType Gets/sets the SlideSizeType of the presentation, an enumeration of PowerPoint.SlideSizeType . template The template the presentation is using (Read Only). Methods addSlide Adds a slide with a specific layout. applyTemplate Applies a Template from a file. applyTheme Applies a theme from a file. close Closes the presentation and quits the current PowerPoint instance. save Saves the presentation. Static Methods create Create a new empty presentation. open Opens a presentation from a given path. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .slides readonly PowerPoint.Slide slides Description Accesses slides in the presentation (Read Only). Accessing the Number of slides in the presentation You can access the number of slides in the presentation with the following code. presentation.slides.length Accessing slides by Rank You can access an individual slide with the following code. presentation.slides[1] // first slide presentation.slides[presentation.slides.length] // last slide presentation.slides[i] // i-th slide Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .slideSize Vec2 slideSize Description Gets/sets the size of the slides in the presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slideSize = Vec2(400,400); return presentation.slideSize; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .slideSizeType int slideSizeType Description Gets/sets the SlideSizeType of the presentation, an enumeration of PowerPoint.SlideSizeType . PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slideSizeType = PowerPoint.SlideSizeType.OnScreen16x10; return presentation.slideSizeType; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .template readonly string template Description The template the presentation is using (Read Only). PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); return presentation.template; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .addSlide() void addSlide( int layout ) Parameters layout The layout you want to apply to the slide when it is added. This should be an enumeration of PowerPoint.Layout . Description Adds a slide with a specific layout. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .applyTemplate() void applyTemplate( string filePath ) Parameters filePath The path to where the theme is. Description Applies a Template from a file. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.applyTemplate(modeldir() + \"\\\\Template.potx\"); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .applyTheme() void applyTheme( string filePath ) Parameters filePath The path to where the theme is. Description Applies a theme from a file. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.applyTheme(modeldir() + \"\\\\Theme.thmx\"); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .close() void close( ) Description Closes the presentation and quits the current PowerPoint instance. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.save(modeldir() + \"\\\\Presentation.pptx\"); presentation.close(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .save() void save( string filePath = 0 ) Parameters filePath The path to where you want to save the presentation. If not specified, then it will save over the file path the presentation was opened from or previously saved to. Description Saves the presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.save(modeldir() + \"\\\\Presentation.pptx\"); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .create() static void create( int visible ) Parameters visible Have the created presentation visible to the user or not. Description Create a new empty presentation. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Presentation .open() static void open( string filePath , int visible ) Parameters filePath The path to the PowerPoint presentation you want to open. visible Have the opened presentation visible to the user or not. Description Opens a presentation from a given path. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Shape.html",
        "title": "FlexScript Class - PowerPoint.Shape",
        "content": "Description A class for managing and editing PowerPoint shapes. Properties bold Gets/sets the font size of a textbox shape. color Gets/sets the color of the text of a textbox shape. fontSize Gets/sets the font size of a textbox shape. position Gets/sets the position a shape. size Gets/sets the size a shape. text Gets/sets the text of a textbox shape. type Returns the shapetype of the shape, an enumeration of PowerPoint.ShapeType . Methods delete Deletes the shape. duplicate Duplicates the shape. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .bold int bold Description Gets/sets the font size of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); presentation.slides[1].shapes[1].fontSize = 23.5; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .color Color color Description Gets/sets the color of the text of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); return presentation.slides[1].shapes[1].color; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .fontSize double fontSize Description Gets/sets the font size of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); pesentation.slides[1].shapes[1].fontSize = 23.5; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .position Vec2 position Description Gets/sets the position a shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); return presentation.slides[1].shapes[1].position; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .size Vec2 size Description Gets/sets the size a shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addPicture(modeldir() + \"\\\\SamplePicture.png\", Vec2(80,80),Vec2(200,200)); return presentation.slides[1].shapes[1].size; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .text string text Description Gets/sets the text of a textbox shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); presentation.slides[1].shapes[1].text = \"New Text Replaced\"; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .type int type Description Returns the shapetype of the shape, an enumeration of PowerPoint.ShapeType . PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); return presentation.slides[1].shapes[1].type; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .delete() Description Deletes the shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].shapes[1].delete(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Shape .duplicate() PowerPoint.Shape duplicate( ) Description Duplicates the shape. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); presentation.slides[1].shapes[1].duplicate();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Slide.html",
        "title": "FlexScript Class - PowerPoint.Slide",
        "content": "Description A class for managing and editing PowerPoint slides. Properties backgroundColor Gets/sets the slide's background color. index Gets/sets the index of the slide in the presentation. shapes Accesses shapes in the slide (Read Only). Methods addMedia Adds media to the slide, can be a sound or video file. addPicture Adds a picture to the slide. addTable Adds a table to the slide from a table in FlexSim. addTextBox Adds a textbox to the slide. assertTitleBox Asserts a title text box if the slide layout includes or included one. delete Deletes the slide. duplicate duplicates the slide. setBackgroundColor Sets the slide's background color. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .backgroundColor Color backgroundColor Description Gets/sets the slide's background color. PowerPoint.Presentation presentation; presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].backgroundColor = Color.red; return presentation.slides[1].backgroundColor; Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .index int index Description Gets/sets the index of the slide in the presentation. PowerPoint.Presentation presentation; presentation.create(1); PowerPoint.Slide Slide1 = presentation.addSlide(PowerPoint.Layout.blank); PowerPoint.Slide Slide2 = presentation.addSlide(PowerPoint.Layout.blank); print(Slide1.index); //1 Slide2.index = 1; //The second slide is now the first slide in the presentation return Slide1.index; //2 Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .shapes readonly PowerPoint.Shape shapes Description Accesses shapes in the slide (Read Only). Accessing the Number of shapes in the presentation You can access the number of shapes in the presentation with the following code. slide.shapes.length Accessing shapes by Rank You can access an individual shape with the following code. slide.shapes[1] // first shape slide.shapes[slide.shapes.length] // last shape slide.shapes[i] // i-th shape Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addMedia() PowerPoint.Shape addMedia( string filePath , Vec2 position , Vec2 size ) Parameters filePath The path to the media file you want to add. position The position of the media object, top left corner is 0, 0. size The size of the media object. Description Adds media to the slide, can be a sound or video file. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addMedia(modeldir() + \"\\\\SampleVideo.mp4\", Vec2(80,80),Vec2(200,200)); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addPicture() PowerPoint.Shape addPicture( string filePath , Vec2 position , Vec2 size ) Parameters filePath The path to the picture file you want to add. position The position of the picture object, top left corner is 0, 0. size The size of the picture object. Description Adds a picture to the slide. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addPicture(modeldir() + \"\\\\SamplePicture.png\", Vec2(80,80),Vec2(200,200)); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addTable() PowerPoint.Shape addTable( Table table , Vec2 position , Vec2 size , double fontSize = 18 ) Parameters table The Table the data will be pulled from. position The position of the table, top left corner is 0, 0. size The size of the table. If the size is smaller than the space required to fill the table, it will autosize to accommodate. fontSize The size of the font. Description Adds a table to the slide from a table in FlexSim. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addMedia(Table(\"GlobalTable1\"), Vec2(80,80),Vec2(200,200), 12); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .addTextBox() PowerPoint.Shape addTextBox( string text , Vec2 position , Vec2 size , double fontSize = 18 , int bold = 0 , Color color = Color.black ) Parameters text The text you want to be displayed. position The position of the textbox, top left corner is 0, 0. size The size of the textbox. The textbox will autosize to accommodate text that occupies a larger or smaller space then specified. fontSize The size of the font. bold Pass in a 1 to bold the text. color Set the color of the text. Description Adds a textbox to the slide. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].addTextBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .assertTitleBox() PowerPoint.Shape assertTitleBox( string text , Vec2 position , Vec2 size , double fontSize = 18 , int bold = 0 , Color color = Color.black ) Parameters text The text you want to be displayed. position The position of the textbox, top left corner is 0, 0. size The size of the textbox. The textbox will autosize to accommodate text occuping a larger or smaller space than specified. fontSize The size of the font. bold Pass in a 1 to bold the text. color Set the color of the text. Description Asserts a title text box if the slide layout includes or included one. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.title); presentation.slides[1].assertTitleBox(\"New Text\", Vec2(80, 80), Vec2(200, 50), 30, 0, Color.blue); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .delete() void delete( ) Description Deletes the slide. PowerPoint.Presentation presentation; presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].delete(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .duplicate() PowerPoint.Slide duplicate( ) Description duplicates the slide. PowerPoint.Presentation presentation = PowerPoint.Presentation.open(modeldir() + \"\\\\Presentation.pptx\", 1); presentation.slides[1].duplicate(); Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Slide .setBackgroundColor() void setBackgroundColor( Color color ) Parameters color The color you are setting the background color to. Description Sets the slide's background color. PowerPoint.Presentation presentation = PowerPoint.Presentation.create(1); presentation.addSlide(PowerPoint.Layout.blank); presentation.slides[1].setBackgroundColor(Color(1, 0, 0, .5)); //Sets the background color of the slide to Salmon."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.Layout.html",
        "title": "FlexScript Class - PowerPoint.Layout",
        "content": "Description An enumeration of integer values associated with PowerPoint slide layouts. The PowerPoint.Layout values are used in the PowerPoint.Presentation. addSlide method to specify the layout the new slide will be created with. Static Properties blank = 12 Blank slide. custom = 32 Custom layout, defined by the template. text = 2 Has a title textbox with a large textbox below it. title = 1 Has a title textbox and a subtitle textbox. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .blank static readonly int blank = 12 Description Blank slide. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .custom static readonly int custom = 32 Description Custom layout, defined by the template. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .text static readonly int text = 2 Description Has a title textbox with a large textbox below it. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.Layout .title static readonly int title = 1 Description Has a title textbox and a subtitle textbox."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.ShapeType.html",
        "title": "FlexScript Class - PowerPoint.ShapeType",
        "content": "Description An enumeration of integer values associated with PowerPoint shape types. The PowerPoint.ShapeType values are return values to PowerPoint.Shape. type . Static Properties media = 16 Media type. picture = 13 Picture type. placeHolder = 14 Any object in a slide when the slide is added. table = 19 Table type. textBox = 17 TextBox type. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .media static readonly int media = 16 Description Media type. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .picture static readonly int picture = 13 Description Picture type. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .placeHolder static readonly int placeHolder = 14 Description Any object in a slide when the slide is added. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .table static readonly int table = 19 Description Table type. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.ShapeType .textBox static readonly int textBox = 17 Description TextBox type."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/PowerPoint/PowerPoint.SlideSizeType.html",
        "title": "FlexScript Class - PowerPoint.SlideSizeType",
        "content": "Description An enumeration of integer values associated with PowerPoint slide size types. The PowerPoint.SlideSizeType values are return values to PowerPoint.Presentation. slideSizeType . Static Properties 35MM = 4 35MM size. A3Paper = 9 A3Paper size. A4Paper = 3 A4Paper size. B4ISOPaper = 10 B4ISOPaper size. B5ISOPaper = 11 B5ISOPaper size. Banner = 6 Banner size. Custom = 7 Custom size. LedgerPaper = 8 LedgerPaper size. LetterPaper = 2 LetterPaper size. OnScreen16x10 = 16 OnScreen16x10 size. OnScreen16x9 = 15 OnScreen16x9 size. OnScreen4x3 = 1 OnScreen4x3 size. Overhead = 5 Overhead size. Details Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .35MM static readonly int 35MM = 4 Description 35MM size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .A3Paper static readonly int A3Paper = 9 Description A3Paper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .A4Paper static readonly int A4Paper = 3 Description A4Paper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .B4ISOPaper static readonly int B4ISOPaper = 10 Description B4ISOPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .B5ISOPaper static readonly int B5ISOPaper = 11 Description B5ISOPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .Banner static readonly int Banner = 6 Description Banner size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .Custom static readonly int Custom = 7 Description Custom size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .LedgerPaper static readonly int LedgerPaper = 8 Description LedgerPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .LetterPaper static readonly int LetterPaper = 2 Description LetterPaper size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .OnScreen16x10 static readonly int OnScreen16x10 = 16 Description OnScreen16x10 size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .OnScreen16x9 static readonly int OnScreen16x9 = 15 Description OnScreen16x9 size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .OnScreen4x3 static readonly int OnScreen4x3 = 1 Description OnScreen4x3 size. Do no remove, this fixes the anchor on doc.flexsim.com PowerPoint.SlideSizeType .Overhead static readonly int Overhead = 5 Description Overhead size."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/ProcessFlow/Token.html",
        "title": "FlexScript Class - Token",
        "content": "Description A class that represents a Process Flow token. Properties activity Gets a reference to the token's current activity. childRank Gets the rank of the child token. children Accesses the token's children. color Gets or sets the color of the token. entryTime Gets the model time of when the token entered its current activity. id Gets the token's unique ID. instance Gets the token's Process Flow instance. labelProperties Use your own named properties to get/set label values. labels Accesses a node's labels as nodes. name Gets and sets the token's name. parent Gets the token's parent. processFlow Gets the token's Process Flow object. stopCount Gets the number of stops for the token. Methods byID Gets the token associated with the id. release Releases the token from its current activity. resume Removes a stop from the token. setColor Deprecated. Use the color property. Sets the color of the token. setShape Sets the shape of the token. stop Adds a stop to the token Static Methods create Creates a token and places it inside the activity for the given owner object (instance). Details Do no remove, this fixes the anchor on doc.flexsim.com Token .activity readonly treenode activity Description Gets a reference to the token's current activity. treenode curActivity = token.activity; Do no remove, this fixes the anchor on doc.flexsim.com Token .childRank readonly int childRank Description Gets the rank of the child token. Returns 0 if the token has no parent. int childRank = token.childRank; Do no remove, this fixes the anchor on doc.flexsim.com Token .children readonly children Description Accesses the token's children. Accessing the Number of Children You can access the number of children on the token with the following code. token.children.length Accessing Children by Rank You can access an individual child token by rank with the following code. token.children[1] // first child token.children[token.children.length] // last child token.children[i] // i-th child Getting an Array of Objects You can get an Array of all child tokens with the following code. Array childTokens = token.children.toArray(); Do no remove, this fixes the anchor on doc.flexsim.com Token .color Color color Description Gets or sets the color of the token. The color set through this property overrides the default color defined in the Visualization settings. To restore a token to the default color settings, set this property to transparent black: token.color = Color(); Do no remove, this fixes the anchor on doc.flexsim.com Token .entryTime readonly double entryTime Description Gets the model time of when the token entered its current activity. double entryTime = token.entryTime; Do no remove, this fixes the anchor on doc.flexsim.com Token .id readonly int id Description Gets the token's unique ID. int id = token.id; Do no remove, this fixes the anchor on doc.flexsim.com Token .instance readonly treenode instance Description Gets the token's Process Flow instance. treenode instance = token.instance; Do no remove, this fixes the anchor on doc.flexsim.com Token .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. Works just like labelProperties on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com Token .labels readonly labels Description Accesses a node's labels as nodes. Works just like labels on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com Token .name string name Description Gets and sets the token's name. string name = token.name; token.name = \"Bottle\"; Do no remove, this fixes the anchor on doc.flexsim.com Token .parent readonly Token parent Description Gets the token's parent. Token parentToken = token.parent; Do no remove, this fixes the anchor on doc.flexsim.com Token .processFlow readonly treenode processFlow Description Gets the token's Process Flow object. treenode flow = token.processFlow; Do no remove, this fixes the anchor on doc.flexsim.com Token .stopCount readonly int stopCount Description Gets the number of stops for the token. This number increases with calls to the stop method, and decreases with calls to the resume method. Do no remove, this fixes the anchor on doc.flexsim.com Token .byID() Token byID( int id , Variant processFlow = NULL ) Parameters id The unique id number of the token. processFlow If no process flow is defined, this will search through every ProcessFlow object in the model. When there are multiple process flow objects you can pass in the process flow object (or name) where the token resides for a faster search. Description Gets the token associated with the id. Token's have their own unique id among all instances of all ProcessFlow objects. Token token = Token.byID(25); Token token = Token.byID(4, \"ProcessFlow1\"); Do no remove, this fixes the anchor on doc.flexsim.com Token .release() release( Variant connector ) Parameters connector If this is a number or a string, it identifies the connector to be released to. If it is an object, it directly references the new activity to \"jump\" to. Description Releases the token from its current activity. token.release(\"Failed\"); Do no remove, this fixes the anchor on doc.flexsim.com Token .resume() resume( ) Description Removes a stop from the token. Should only be called on stopped tokens. If this call removes the last stop, the token will re-enter its current activity, and proceed normally. Stops are added through calls to the stop method. Do no remove, this fixes the anchor on doc.flexsim.com Token .setColor() setColor( int red , int green , int blue , int alpha ) Parameters red The red color component [0 - 255]. green The green color component [0 - 255]. blue The blue color component [0 - 255]. alpha The alpha color component [0 - 255]. Description Deprecated. Use the color property. Sets the color of the token. This overrides the Token Colors functionality defined in the visual properties of the process flow object. token.setColor(255, 0, 0); Do no remove, this fixes the anchor on doc.flexsim.com Token .setShape() setShape( int shapeIndex ) Parameters shapeIndex The index of the shape. Description Sets the shape of the token. This overrides the Token Shapes functionality defined in the visual properties of the process flow object. token.setShape(1); Do no remove, this fixes the anchor on doc.flexsim.com Token .stop() stop( ) Description Adds a stop to the token Usually, this method is called when the token is blocked in an activity, such as a Delay. In this case, the token will not leave the activity. The following table describes the effect of stopping the token in various activities, if the token was not previously stopped: Activity Effect of stop() Delay The token's exit time is postponed. Push To List The token's Push Value is removed from the list. Pull From List The token's back order is removed from the list. Enter Zone The token's request to enter the zone is destroyed. Acquire The token's request to acquire the resource is destroyed. Batch The token is remove from its batch. If it was the only token in the batch, the batch is destroyed. Wait for Event The token's listener for the specified event is destroyed. Synchronize/Join The token is removed from its wave. If it was the only token in the wave, the wave is destroyed. Travel The task sequence created by this activity is preempted. This is true for all Task Sequence activities. If the token is not currently blocked, it will stop as soon as it becomes blocked. The token will not continue until all stops have been removed from the token, through calls to the resume method. Stopped tokens are marked with a red octogon. Do no remove, this fixes the anchor on doc.flexsim.com Token .create() static Token create( treenode ownerNode , Variant activity , int start = 0 , Token parent = NULL , int labelAcess = 1 ) Parameters ownerNode The owner object of the process flow. For a General Process Flow this is the process flow object. For a Fixed Resource, Task Executer or Sub Flow, this is the attached object. activity This can be the activity node or the name of the activity. If this is the activity node in a General Process Flow, ownerNode may be NULL. start If start is 1, the token will immediately call the activity's start and begin moving through the process flow. If start is 0, the default, the token will sit in the activity until it is manually released. Calling the release method on the token will fire the activity's finish causing the activity's start to never be called. This may affect how the token responds to the activity it was created in. For example, if a token is created in an Assign Labels activity with a start of 1, the created token will evaluate the Assign Labels as if entering the activity and receive whatever labels are assigned to it. If a token is created in the same Assign Labels with a start of 0 and then later it is released, the token will never evaluate the Assign Labels and no labels will be assigned. parent If another token is specified here, the new token will be created as a child of this one. labelAccess This defines what access the child token has to its parent's labels. The possible access types are: TOKEN_LABEL_ACCESS_NONE TOKEN_LABEL_ACCESS_READ TOKEN_LABEL_ACCESS_READ_WRITE TOKEN_LABEL_ACCESS_READ_WRITE_ADD See the Create Tokens activity for more information about label access types. Description Creates a token and places it inside the activity for the given owner object (instance). Token aToken = Token.create(NULL, getactivity(\"ProcessFlow\", \"Start\"), 0); //General Process Flow Token newToken = Token.create(Model.find(\"Processor1\"), \"Start\", 0, aToken, TOKEN_LABEL_ACCESS_READ); newToken.Type = 1; newToken.release(0);"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TableValidation/TableValidation.html",
        "title": "FlexScript Class - TableValidation",
        "content": "Description A class that represents a Table Validation. Methods validate Validates all tables, their rules and ranges defined in the TableValidation tool and returns the number of errors. Constructor TableValidation Creates a reference to a Table Validation tool. Details Do no remove, this fixes the anchor on doc.flexsim.com TableValidation .validate() int validate( treenode errorLoggingNode = 0 ) Parameters errorLoggingNode The treenode where the errors will be logged. If no treenode is passed in, errors will be printed to the system console. If the node has text data, the errors will instead be printed to the node's data. For other nodes (including bundle nodes) the node is treated as a Table . Each error is stored as a row in the table. Description Validates all tables, their rules and ranges defined in the TableValidation tool and returns the number of errors. Validates the data specified in the various ranges against the rules. The first 100 rule violations are logged as an error. The method returns the total number of errors encountered, even if they weren't logged. Example: return TableValidation(\"TableValidation1\").validate(); Do no remove, this fixes the anchor on doc.flexsim.com TableValidation Constructor TableValidation( string name ) Parameters name The name of a Table Validation tool in the Toolbox. Description Creates a reference to a Table Validation tool. TableValidation validator1 = TableValidation(\"TableValidation1\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TableValidation/TableValidation.Context.html",
        "title": "FlexScript Class - TableValidation.Context",
        "content": "Description A class that represents a TableValidation Context. The context stores data that persists through the duration of a rule. Properties col Gets the column the value is in. endCol Gets the last column of the range. endRow Gets the last row of the range. errorMessage Gets/sets the errorMessage. isFirstCol returns a 1 if the column the value is in is the first column of the range. isFirstRow returns a 1 if the row the value is in is the first row of the range. isFirstValue returns a 1 if the value is the first value in the range. isLastCol returns a 1 if the column the value is in is the last column of the range. isLastRow returns a 1 if the row the value is in is the last row of the range. isLastValue returns a 1 if the value is the last value in the range. labels Accesses the context's labels as nodes. row Gets the row the value is in. startCol Gets the starting column of the range. startRow Gets the starting row of the range. table Gets table that is currently being validated. Methods addRegex Stores a regular expression by name in the context. valueMatchesRegex Compares the value against a stored regular expression in the context. Details Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .col readonly int col Description Gets the column the value is in. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .endCol readonly int endCol Description Gets the last column of the range. TableValidation.Context ctx = param(2); int endColumn = ctx.endCol; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .endRow readonly int endRow Description Gets the last row of the range. TableValidation.Context ctx = param(2); int endRow = ctx.endRow; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .errorMessage string errorMessage Description Gets/sets the errorMessage. The errorMessage is by default the Failure Message defined on the rule. It is what is displayed at the end of a logged error message. TableValidation.Context ctx = param(2); ctx.errorMessage = \"The value was not an integer\"; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isFirstCol readonly int isFirstCol Description returns a 1 if the column the value is in is the first column of the range. TableValidation.Context ctx = param(2); int isFirstCol = ctx.isFirstCol; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isFirstRow readonly int isFirstRow Description returns a 1 if the row the value is in is the first row of the range. TableValidation.Context ctx = param(2); int isFirstRow = ctx.isFirstRow; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isFirstValue readonly int isFirstValue Description returns a 1 if the value is the first value in the range. TableValidation.Context ctx = param(2); int isFirstValue = ctx.isFirstValue; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isLastCol readonly int isLastCol Description returns a 1 if the column the value is in is the last column of the range. TableValidation.Context ctx = param(2); int isLastCol = ctx.isLastCol; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isLastRow readonly int isLastRow Description returns a 1 if the row the value is in is the last row of the range. TableValidation.Context ctx = param(2); int isLastRow = ctx.isLastRow; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .isLastValue readonly int isLastValue Description returns a 1 if the value is the last value in the range. TableValidation.Context ctx = param(2); int isLastValue = ctx.isLastValue; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .labels readonly labels Description Accesses the context's labels as nodes. Works just like labels on treenodes. Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .row readonly int row Description Gets the row the value is in. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .startCol readonly int startCol Description Gets the starting column of the range. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .startRow readonly int startRow Description Gets the starting row of the range. TableValidation.Context ctx = param(2); int column = ctx.col; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .table readonly Table table Description Gets table that is currently being validated. TableValidation.Context ctx = param(2); Table table = ctx.table; Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .addRegex() void addRegex( RegExp pattern , string name ) Parameters pattern The pattern of characters to look for, a regular expression. name The name of the pattern. Description Stores a regular expression by name in the context. TableValidation.Context ctx = param(2); ctx.addRegex(/^[a-zA-Z]$/, \"matchRegex\"); Do no remove, this fixes the anchor on doc.flexsim.com TableValidation.Context .valueMatchesRegex() int valueMatchesRegex( Variant value , string regexName ) Parameters value The value you are matching the regular expression to. regexName the name of the regex stored on the context using addRegex . Returns int If it matched. Description Compares the value against a stored regular expression in the context. Variant value = param(1); TableValidation.Context ctx = param(2); ctx.valueMatchesRegex(value, \"matchRegex\");"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/Dispatcher.html",
        "title": "FlexScript Class - Dispatcher",
        "content": "Inherits from Object Description A class that represents an Object with a task sequence queue, and implements logic to receive and dispatch TaskSequence s. Properties taskSequences Accesses the task sequences in the dispatcher's task sequence queue. This member can be accessed like an array of TaskSequence s. Details Do no remove, this fixes the anchor on doc.flexsim.com Dispatcher .taskSequences readonly taskSequences Description Accesses the task sequences in the dispatcher's task sequence queue. This member can be accessed like an array of TaskSequence s. Dispatcher disp = Model.find(\"Dispatcher1\"); int numTaskSequences = disp.taskSequences.length; for (int i = 1; i <= numTaskSequences; i++) { TaskSequence ts = disp.taskSequences[i]; ... }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/TaskExecuter.html",
        "title": "FlexScript Class - TaskExecuter",
        "content": "Inherits from Dispatcher Description A class that represents a Dispatcher that can also execute TaskSequence s. Properties activeTask Accesses the task that is currently being executed by the object. activeTaskSequence Accesses the task sequence that is currently being executed by the object. navigator Accesses the task executer's navigator, i.e. the object that manages travel tasks. Static Properties DefaultEndSpeed A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be whatever the default for that task and/or navigator is. MaxEndSpeed A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be the task executer's max speed. ZeroEndSpeed A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will always be zero. Details Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .activeTask readonly TaskSequence.Task activeTask Description Accesses the task that is currently being executed by the object. TaskExecuter obj = Model.find(\"Operator1\"); int taskType = obj.activeTask.type; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .activeTaskSequence readonly TaskSequence activeTaskSequence Description Accesses the task sequence that is currently being executed by the object. TaskExecuter obj = Model.find(\"Operator1\"); double tsPriority = obj.activeTaskSequence.priority; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .navigator readonly Navigator navigator Description Accesses the task executer's navigator, i.e. the object that manages travel tasks. Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .DefaultEndSpeed static readonly int DefaultEndSpeed Description A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be whatever the default for that task and/or navigator is. This is an alias for the value 0. For travel tasks, by default an end speed value of 0 generally means end at max speed, whereas for offset tasks (load, unload, travel relative, travel to loc, etc.) the value 0 means zero end speed. This alias essentially means use whatever is the default for the task. Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .MaxEndSpeed static readonly int MaxEndSpeed Description A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will be the task executer's max speed. Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter .ZeroEndSpeed static readonly int ZeroEndSpeed Description A property to enter for a task's end speed parameter. If this value is entered, then the task's end speed will always be zero."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/TaskSequence.html",
        "title": "FlexScript Class - TaskSequence",
        "content": "Description A class representing a sequence of tasks to be performed by a TaskExecuter . See Task Sequence Concepts for more information on task sequences. Properties currentTask Accesses the first task in the task sequence that has not yet finished execution. This task may be currently executing, or it may be waiting for execution because the task sequence itself is waiting for execution. labelProperties Use your own named properties to get/set label values. preempt Gets/sets the preempt value of the task sequence. priority Gets/sets the priority value of the task sequence. rank Gets/sets the rank of the task sequence in its task sequence queue. tasks Accesses the set of tasks in the task sequence. This member can be used like an array of TaskSequence.Task s. Methods addTask Adds a new task to the task sequence. dispatch Dispatches the task sequence. finish Marks the task sequence as finished. move Moves the task sequence into a new dispatcher's task sequence queue. Static Methods create Creates a new task sequence. Details Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .currentTask readonly TaskSequence.Task currentTask Description Accesses the first task in the task sequence that has not yet finished execution. This task may be currently executing, or it may be waiting for execution because the task sequence itself is waiting for execution. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int curTaskType = ts.currentTask.type; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. The TaskSequence class allows you to get and set custom named properties that will apply to labels on the task sequence. For example, if you want to set a label named \"MyLabel\" on the task sequence ts to a value of 5, you can write the following code: ts.MyLabel = 5; This will set the label's value to 5. If a label of that name does not exist, then it will be added to the object's labels. If you want to return the value stored in ts's \"MyLabel\" label, you can execute the following code: return ts.MyLabel; This works the same as the treenode class's dynamic property mechanism. See treenode. labelProperties for more information Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .preempt int preempt Description Gets/sets the preempt value of the task sequence. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int preempt = ts.preempt; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .priority double priority Description Gets/sets the priority value of the task sequence. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; double priority = ts.priority; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .rank int rank Description Gets/sets the rank of the task sequence in its task sequence queue. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int tsRank = ts.rank; // should be 1 ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .tasks readonly tasks Description Accesses the set of tasks in the task sequence. This member can be used like an array of TaskSequence.Task s. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int numTasks = ts.tasks.length; for (int i = 1; i <= numTasks; i++) { Task task = ts.tasks[i]; } Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .addTask() TaskSequence.Task addTask( int type , treenode involved1 = null , treenode involved2 = null , Variant var1 = nullvar , Variant var2 = nullvar , Variant var3 = nullvar , Variant var4 = nullvar ) Parameters involved1 The first involved object of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. involved2 The second involved object of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var1 The first variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var2 The second variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var3 The third variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. var4 The fourth variable of the task. The meaning of this is dependent on the task type. See Task Type Quick Reference for more information. Returns TaskSequence.Task The added task. Description Adds a new task to the task sequence. TaskSequence ts = TaskSequence.create(Model.find(\"Operator1\")); ts.addTask(TASKTYPE_LOAD, item, current); ... ts.dispatch(); Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .dispatch() void dispatch( ) Description Dispatches the task sequence. Calling this method initiates Dispatcher logic for receiving the task sequence and dispatching it as needed. If the object on whom the task sequence was created is a TaskExecuter and the TaskExecuter is not already executing another task sequence, then the object will immediately begin execution of the task sequence. TaskSequence ts = TaskSequence.create(Model.find(\"Operator1\")); ts.addTask(TASKTYPE_LOAD, item, current); ... ts.dispatch(); Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .finish() void finish( ) Description Marks the task sequence as finished. This method resets the waitForFinishState value of the task sequence to 0, and finishes the task sequence if it is currently waiting for more tasks to be added. Calling this method is only required if you previously passed a non-zero waitForFinishState value into TaskSequence . create (). Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .move() void move( Dispatcher dispatcher ) Parameters dispatcher The dispatcher to move the task sequence to. Description Moves the task sequence into a new dispatcher's task sequence queue. Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence .create() static TaskSequence create( treenode obj , double priority = 0 , int preempt = 0 , int waitForFinishState = 0 ) Parameters obj Specifies the object in which to create the task sequence. Generally this should be a Dispatcher or TaskExecuter . In such a case, the task sequence will be created in the task sequence queue of the object. If the object is not a Dispatcher or TaskExecuter, then the task sequence will be created as a subnode of that object/node. priority Optional. Defines the priority value of the task sequence. preempt Optional. Defines the preempt value of the task sequence. If not zero, it should be one of the following values: PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, or PREEMPT_AND_ABORT_ALL. waitForFinishState Optional. Defines the state to go into if the task sequence reaches the end of its set of tasks, with no additional tasks added. If you pass 0 (default), the task sequence will simply be finished and destroyed when it reaches the end. When non-zero, the task sequence will add a TASKTYPE_WAITFORTASKS task and subsequently go into the defined state, waiting for a task to be added. If you pass a non-zero value here, then you must later call TaskSequence . finish () to notify the task sequence no longer needs to wait for new tasks. Returns TaskSequence The created task sequence. Description Creates a new task sequence. TaskSequence ts = TaskSequence.create(Model.find(\"Operator1\")); ts.addTask(TASKTYPE_LOAD, item, current); ... ts.dispatch();"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/TaskSequence.Task.html",
        "title": "FlexScript Class - TaskSequence.Task",
        "content": "Description A class representing an individual task in a TaskSequence . Properties involved1 Gets/sets the involved1 value of the task. involved2 Gets/sets the involved2 value of the task. rank Gets/sets the rank of the task inside its owning task sequence. state Gets the state of the task. type Gets/sets the type of the task. var1 Gets/sets the var1 value of the task. var2 Gets/sets the var2 value of the task. var3 Gets/sets the var3 value of the task. var4 Gets/sets the var4 value of the task. Details Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .involved1 treenode involved1 Description Gets/sets the involved1 value of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; treenode involved1 = ts.currentTask.involved1; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .involved2 treenode involved2 Description Gets/sets the involved2 value of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; treenode involved2 = ts.currentTask.involved2; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .rank int rank Description Gets/sets the rank of the task inside its owning task sequence. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int rank = ts.currentTask.rank; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .state readonly int state Description Gets the state of the task. The state of a task will be one of the following values: TASKSTATE_UNFINISHED: The task is not yet finished, and it is not being actively executed. TASKSTATE_ACTIVE: The task is currently being executed. TASKSTATE_COORDINATED: Deprecated. The task is currently being executed as part of a coordinated task sequence. TASKSTATE_FINISHED: The task has been finished. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int state = ts.currentTask.state; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .type int type Description Gets/sets the type of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; int curTaskType = ts.currentTask.type; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .var1 Variant var1 Description Gets/sets the var1 value of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; Variant var1 = ts.currentTask.var1; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .var2 Variant var2 Description Gets/sets the var2 value of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; Variant var2 = ts.currentTask.var2; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .var3 Variant var3 Description Gets/sets the var3 value of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; Variant var3 = ts.currentTask.var3; ... Do no remove, this fixes the anchor on doc.flexsim.com TaskSequence.Task .var4 Variant var4 Description Gets/sets the var4 value of the task. TaskExecuter op = Model.find(\"Operator1\"); TaskSequence ts = op.taskSequences[1]; Variant var4 = ts.currentTask.var4; ..."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/TaskExecuter/Navigator.html",
        "title": "FlexScript Class - Navigator",
        "content": "Description A class that represents a TaskExecuter 's navigator . In other words, the object that manages travel tasks for the task executer. Methods getCost A generic method that gets route costing information associated with a TaskExecuter traveling from some origin to some destination. Details Do no remove, this fixes the anchor on doc.flexsim.com Navigator .getCost() double getCost( Variant origin , Variant destination , Variant info ) Parameters origin Navigator-dependent parameter defining the origin. This can be the following: Default Navigator Task executer reference . Node Network Navigator Task executer reference Network node reference Reference to an object connected to a network node AGV Navigator Task executer reference Reference to a control-point-connected object AGV path reference Control point reference An array with up to three values: Task executer, path, control point or control-point-connected object An offset value representing an offset distance from that object on its associated path Boolean value defining whether or not a given AGV is oriented 'backward' on the path. 1 means backward, 0 or absent means forward. Note that the cost may be different for forward vs. backward oriented AGVs when the path system has orientation constraints defined, or if cost is speed-based and backward speed is different than forward speed. . A* Navigator Task executer reference Object reference An array of three numbers representing a x/y/z model location GIS Navigator Task executer reference GIS point reference Reference to an object connected to a GIS point destination Navigator-dependent parameter defining the destination. This can generally take the same values as the origin parameter, with the following exceptions: It should not be a reference to a TaskExecuter. For AGVs, a third array value (AGV orientation) is not used. info Navigator-dependent parameter to modify how the cost is calculated, as described below: AGV Navigator If this parameter is a reference to a TaskExecuter, it will assume that agv-dependent cost calculations are to be associated with that object traveling in its current state, most importantly its current load type. This is useful in calculating speed-based costs when speed is dependent on load type. GIS Navigator A value of 1 will return distance, a value of 2 will return duration, and a value of 3 will return general cost. Description A generic method that gets route costing information associated with a TaskExecuter traveling from some origin to some destination. The implementation of this method is polymorphic as it depends somewhat on which navigator it is being called on. For example, a default navigator's getCost() will only work if you pass a TaskExecuter as the origin, and some other object as a destination, and it will return the same result as if you were to call distancetotravel(). On the other hand, a network navigator can take a network node as an origin and a network node as a destination. In this case, the result is the same as calling getnetworkdistance()."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/SpecialParameters/Coroutine.html",
        "title": "FlexScript Class - Coroutine",
        "content": "Description An opaque class representing a paused coroutine. A Coroutine does not have any member methods or properties. It is only used to allow you to check whether a Variant reference to a node is a coroutine. Variant val = myNode.coevaluate(); if (val.is(Coroutine)) { await val; }"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/SpecialParameters/lambda.html",
        "title": "FlexScript Class - lambda",
        "content": "Description Allows an expression to be passed in as a parameter without immediatly being evaulated. This class represents a FlexScript expression. Functions that accept these values store the expression passed in as a parameter, rather than the result of the expression. The function may evaluate the expression one or more times. During evaulation, the keyword count may be used to determine how many times the expression has been called. One method that accepts lambdas as parameters is the Table . query () method."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/SpecialParameters/RegExp.html",
        "title": "FlexScript Class - RegExp",
        "content": "Description Allows regular expressions to be used as function parameters. This class is used to provide a regular expression as a function parameter. Regular expressions are special character sequences that identify patterns in text. FlexSim uses the ECMA syntax for regular expressions. Several string methods accept RegExp values as input, including string . match , string . split , and string . search . For more information on regular expression syntax, see ECMAScript syntax ."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.html",
        "title": "FlexScript Class - Storage",
        "content": "Description The storage namespace. Static Properties system Returns a reference to the Storage System object in the toolbox. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage .system static readonly Storage.System system Description Returns a reference to the Storage System object in the toolbox. For more information about the Storage System tool, see the Storage System topic."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Bay.html",
        "title": "FlexScript Class - Storage.Bay",
        "content": "Description A class that represents a storage bay. A Bay is defined as the area between to vertical supports, and includes all levels between those two supports. Properties levels Accesses the bay's levels as an array of Storage.Level s. Methods areSlotLabelsEqual Returns whether a label value is the same for all slots on all levels within a bay. setSlotLabels Sets a label on all slots on all levels of the bay to the given value. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Bay .levels readonly levels Description Accesses the bay's levels as an array of Storage.Level s. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Bay .areSlotLabelsEqual() int areSlotLabelsEqual( string labelName ) int areSlotLabelsEqual( string labelName , Variant matchValue ) Parameters labelName The name of the label to check matchValue The value to compare with each slot label Returns int False if a label value is not the same for all slots within the bay, or if any of those values do not match the matchValue. Returns true otherwise. Description Returns whether a label value is the same for all slots on all levels within a bay. The specified label value is checked for each slot of the bay. If all label values do not match, then this method returns false. If a matchValue is provided, all label values must match the matchValue, or this function will still return false. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Bay .setSlotLabels() void setSlotLabels( string labelName , Variant value ) Parameters labelName The name of the label to set. value The value to give the label on each slot. Description Sets a label on all slots on all levels of the bay to the given value. If the label does not exist on any of the slots, this method will add the label and set the value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Item.html",
        "title": "FlexScript Class - Storage.Item",
        "content": "Description A class that includes properties and functionality associated with the storage and assignment of a flow item to Storage.Slot s. The Storage.Item class is primarily used for managing and retrieving the slots that a flow item is assigned to and/or stored in. The Storage.Item is NOT the same as the item object. In other words, you can't just set a Storage.Item to the item itself. Object item = param(2); Storage.Item storageItem = item; // RUN-TIME ERROR Instead, the Storage.Item is associated with , not the same as the item. To access the Storage.Item of a given flow item, use the Storage.Item () constructor. A Storage.Item holds data associated directly with the flow item itself. A Storage.Item should not be confused with a Storage.Slot.Item . The Storage.Item may have both a current slot (the slot that the flow item is currently stored in), and/or an assigned slot (the slot that the item has been assigned to be placed in). If the flow item has been placed in its assigned slot, and has not been assigned to any new slot, then its assigned slot is the same as its current slot. A Storage.Item may simultaneously have two associated Storage.Slot.Item s, namely one for its assigned slot, and one for its current slot. These can be accessed respectively with the assignedSlotItem and currentSlotItem properties. Properties assignedSlot The item's assigned slot. assignedSlotItem The Storage.Slot.Item associated with the item's assigned slot . currentSlot The item's current slot. currentSlotItem The Storage.Slot.Item associated with the item's current slot . state The current transit state of the item. Constructor Storage.Item Gets/Asserts the Storage.Item object associated with the given flow item. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .assignedSlot Storage.Slot assignedSlot Description The item's assigned slot. You can set this property to a specific slot through several methods: Find a slot in the storage system using Storage.System . findSlot (), and set assignedSlot to the result. Get a slot directly by its address, using Storage.System . getSlot (), and set assignedSlot to the result. Get a slot directly by its bay, level, and slot ID, using Storage.Object . getSlot (), and set assignedSlot to the result. Search through a Storage.Object 's bays, levels, and slots to find an appropriate slot, and set assignedSlot to the found slot. Directly set assignedSlot to NULL. This will put the item in an outbound state . Item searches using Storage.system. findItem () will skip over outbound items by default. Once you have assigned the item to a slot, move the item into the slot's storage object, either immediately or through some transit process. Once the item is moved into the storage object, its assigned slot will become its current slot . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .assignedSlotItem readonly Storage.Slot.Item assignedSlotItem Description The Storage.Slot.Item associated with the item's assigned slot . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .currentSlot readonly Storage.Slot currentSlot Description The item's current slot. The item's current slot is the slot that the item is currently stored in. You cannot directly set the item's current slot. Instead, you can do one of the following: Directly set the item's assignedSlot and then move the flow item (either immediately or through some transit process) into that slot's storage object. Here when the item is moved into the storage object, the assigned slot will be recognized and its assigned slot will become its current slot. Leave the assignedSlot property unassigned, and just move the flow item into a storage object. When the storage object receives the item, it will recognized that the item has no assigned slot, and will fire its slot assignment strategy, which should assign the slot. Then the item's assigned slot will become its current slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .currentSlotItem readonly Storage.Slot.Item currentSlotItem Description The Storage.Slot.Item associated with the item's current slot . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item .state readonly int state Description The current transit state of the item. The state value is a function of the item's currentSlot and assignedSlot property values. Valid values are: Storage.Item.State . Unassigned Storage.Item.State . Inbound Storage.Item.State . Stored Storage.Item.State . Outbound Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item Constructor Storage.Item( treenode item ) Parameters item A flow item. Returns Storage.Item A Storage.Item object. If an associated Storage.Item does not already exist for the flow item, it will be automatically created. Description Gets/Asserts the Storage.Item object associated with the given flow item. A Storage.Item can only be accessed by calling this method. Casting from a treenode is not correct. Storage.Item storageItem = Storage.Item(item); // correct Storage.Item storageItem = item; // incorrect"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Item.State.html",
        "title": "FlexScript Class - Storage.Item.State",
        "content": "Description A class that enumerates the storage item states. Static Properties Inbound Storage item Inbound state. Outbound Storage item Outbound state. Stored Storage item Stored state. Unassigned Storage item Unassigned state. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Inbound static readonly int Inbound Description Storage item Inbound state. The assignedSlot property is set to a valid slot, but the currentSlot property is null. In other words, the item has been assigned to a slot, but has not yet arrived in the slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Outbound static readonly int Outbound Description Storage item Outbound state. The currentSlot property refers to a valid slot, but the assignedSlot property refers to different slot or null. In other words, the item has been stored in a slot, and has been reassigned, either to a different slot, or to null (it is about to exit the system). Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Stored static readonly int Stored Description Storage item Stored state. The assignedSlot and currentSlot properties are both set to the same slot. In other words, the item has been stored in a slot, and has not been assigned to any other slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Item.State .Unassigned static readonly int Unassigned Description Storage item Unassigned state. Both the assignedSlot and currentSlot properties are null. In other words, the item is neither assigned to nor stored in a slot."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Level.html",
        "title": "FlexScript Class - Storage.Level",
        "content": "Description A class that represents a storage level within a bay. A Level is defined as the area of a Bay above the floor or above a horizontal support. Properties slots Accesses the level's slots as an array of Storage.Slot s. Methods areSlotLabelsEqual Returns whether a label value is the same for all slots within a level. setSlotLabels Sets a label on all slots of the level to the given value. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Level .slots readonly slots Description Accesses the level's slots as an array of Storage.Slot s. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Level .areSlotLabelsEqual() int areSlotLabelsEqual( string labelName ) int areSlotLabelsEqual( string labelName , Variant matchValue ) Parameters labelName The name of the label to check. matchValue The value to compare with each slot label Returns int alse if a label value is not the same for all slots within the level, or if any of those values do not match the matchValue. Returns true otherwise. Description Returns whether a label value is the same for all slots within a level. The specified label value is checked for each slot of the level. If all label values do not match, then this method returns false. If a matchValue is provided, all label values must match the matchValue, or this function will still return false. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Level .setSlotLabels() void setSlotLabels( string labelName , Variant value ) Parameters labelName The name of the label to set. value The value to give the label on each slot. Description Sets a label on all slots of the level to the given value. If the label does not exist on any of the slots, this method will add the label and set the value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Object.html",
        "title": "FlexScript Class - Storage.Object",
        "content": "Description A storage object , with functionality and data for storing items in a 2-dimensional grid of bays, levels, and slots Properties bays Accesses the object's bays as an array of Storage.Bay s. Methods areSlotLabelsEqual Returns 1 if all slot label values are equal to each other or to a defined value, otherwise 0. assignSlot Assigns the item a slot, using the object's slot assignment strategy. getSlot Gets a slot by its bay, level, and slot ID. setSlotLabels Sets a label on all slots of all bays and levels of the object to the given value. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .bays readonly bays Description Accesses the object's bays as an array of Storage.Bay s. Accessing the Number of Bays You can access the number of bays with the following code. current.bays.length Accessing Bays by Rank You can access an individual bay by rank with the following code. current.bays[1] // first bay current.bays[current.bays.length] // last bay current.bays[i] // i-th bay Bay Progression Bays progress according the object's Bay Progression property. If the bay progression is X+, then current.bays[1] accesses the bay with the smallest x location in object coordinates. For example, this would be the left-most bay when facing a rack's pick face . If the bay progression is X-, then current.bays[1] accesses the bay with the largest x location in object coordinates. This would be the right-most bay when facing a rack from its pick face. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .areSlotLabelsEqual() int areSlotLabelsEqual( string labelName ) int areSlotLabelsEqual( string labelName , Variant matchValue ) Parameters labelName The name of the target label for matching. matchValue If this parameter is included, it will only return 1 if all slot labels match this value. Returns int If all slot label values match, then 1, otherwise 0. Description Returns 1 if all slot label values are equal to each other or to a defined value, otherwise 0. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .assignSlot() Storage.Slot assignSlot( treenode item ) Parameters item The item you want to assign a slot to. Returns Storage.Slot The assigned slot if successful, null otherwise. Description Assigns the item a slot, using the object's slot assignment strategy. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .getSlot() Storage.Slot getSlot( Variant bayID , Variant levelID , Variant slotID ) Parameters bayID The ID of the bay. If the object does not have an Address Scheme , then the bay ID should be a number. Otherwise it may be a letter if the address scheme's bay identifier is a letter. levelID The ID of the level. If the object does not have an Address Scheme , then the level ID should be a number. Otherwise it may be a letter if the address scheme's level identifier is a letter. slotID The ID of the slot. If the object does not have an Address Scheme , then the slot ID should be a number. Otherwise it may be a letter if the address scheme's slot identifier is a letter. Returns Storage.Slot If the slot exists, the method returns that slot, otherwise NULL. Description Gets a slot by its bay, level, and slot ID. IDs are \"mapped\" in that they use the object's Start Bay/Level/Slot and Bay/Level/Slot Stride properties. For example, if an object has a start bay of 2, and a bay stride of 2, then passing 6 as bayID will retrieve the object's 3rd ranked bay (the 1st ranked bay is ID 2, the 2nd ranked bay is ID 4, the 3rd ranked bay is ID 6, etc.). Example: Storage.Item(item).assignedSlot = current.getSlot(item.BayID, item.LevelID, item.SlotID) This code assigns an item to the slot addressed by the item's \"BayID\", \"LevelID\", and \"SlotID\" labels. Example: Storage.Item(item).assignedSlot = current.getSlot(5, \"A\", 2) This code assigns an item to the slot addressed by bayID 5, levelID \"A\", and slotID 2. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Object .setSlotLabels() void setSlotLabels( string labelName , Variant value ) Parameters labelName The name of the label to set. value The value to give the label on each slot. Description Sets a label on all slots of all bays and levels of the object to the given value. If the label does not exist on any of the slots, this method will add the label and set the value."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.QueryFlags.html",
        "title": "FlexScript Class - Storage.QueryFlags",
        "content": "Description Enumerates possible flags that can be passed as the flags parameter into Storage.System . findSlot (), Storage.System . querySlots (), Storage.System . findItem (), or Storage.System . queryItems (). By default Storage.System . findSlot (), and Storage.System . querySlots () will only look at storable slots. Similarly, Storage.System . findItem (), and Storage.System . queryItems () will exclude all inbound and outbound items by default. These flags allow you to better customize which slots/items should be queried. Each flag is a bit field, meaning different flags can be bitwise-ORed together to include/exclude the desired slots/items. Static Properties AllItems Valid only in findItem() and queryItems(). Signifies that all items should be included in the query. This value is a the same as QueryFlags.InboundItems | QueryFlags.OutboundItems . AllSlots Valid only in findSlot() and querySlots(). Signifies that all slots should be included in the query. This flag is the same as UnstorableSlots. ExcludeStorableSlots Valid only in findSlot() and querySlots(). Signifies that storable slots should be excluded from the query. ExcludeStoredItems Valid only in findItem() and queryItems(). Signifies that stored items (items that are neither inbound nor outbound) should be excluded from the query. InboundItems Valid only in findItem() and queryItems(). Signifies that inbound items should be included in the query. Limit1 Limits the results of querySlots() and queryItems() to a single result. findSlot() and findItem() forward to querySlots() and queryItems() respectively, automatically asserting this flag. As such, generally you do not need to use this flag, because you can just call findSlot() or findItem(). OutboundItems Valid only in findItem() and queryItems(). Signifies that outbound items should be included in the query. UnstorableSlots Valid only in findSlot() and querySlots(). Signifies that unstorable slots should be included in the query. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .AllItems static readonly int AllItems Description Valid only in findItem() and queryItems(). Signifies that all items should be included in the query. This value is a the same as QueryFlags.InboundItems | QueryFlags.OutboundItems . Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .AllSlots static readonly int AllSlots Description Valid only in findSlot() and querySlots(). Signifies that all slots should be included in the query. This flag is the same as UnstorableSlots. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .ExcludeStorableSlots static readonly int ExcludeStorableSlots Description Valid only in findSlot() and querySlots(). Signifies that storable slots should be excluded from the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .ExcludeStoredItems static readonly int ExcludeStoredItems Description Valid only in findItem() and queryItems(). Signifies that stored items (items that are neither inbound nor outbound) should be excluded from the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .InboundItems static readonly int InboundItems Description Valid only in findItem() and queryItems(). Signifies that inbound items should be included in the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .Limit1 static readonly int Limit1 Description Limits the results of querySlots() and queryItems() to a single result. findSlot() and findItem() forward to querySlots() and queryItems() respectively, automatically asserting this flag. As such, generally you do not need to use this flag, because you can just call findSlot() or findItem(). Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .OutboundItems static readonly int OutboundItems Description Valid only in findItem() and queryItems(). Signifies that outbound items should be included in the query. Do no remove, this fixes the anchor on doc.flexsim.com Storage.QueryFlags .UnstorableSlots static readonly int UnstorableSlots Description Valid only in findSlot() and querySlots(). Signifies that unstorable slots should be included in the query."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Slot.html",
        "title": "FlexScript Class - Storage.Slot",
        "content": "Description A slot that is part of a storage object 's grid of storable slots. Properties address The slot's address. aisleID The slot's aisle ID. bay The slot's bay. bayID The slot's bay ID. isStorable 1 if the slot is a storable slot , 0 otherwise. labelProperties Use your own named properties to get/set slot label values. level The slot's level. levelID The slot's level ID. location The location of the bottom front left corner of the slot, in the local coordinates of its storage object. size The size of the slot. slotID The slot's slot ID. slotItems Accesses the array of Storage.Slot.Item s that are stored in or assigned to this slot. storageObject The slot's storage object. zoneID The slot's zone ID. Methods getLocation Gets a location within the slot. hasSpace Returns 1 if it calculates that there is enough space to place the passed item into the slot, 0 otherwise. restack Performs again the slot stacking algorithm on some or all items stored in the slot. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .address readonly string address Description The slot's address. If the slot's storage object has an Address Scheme , the slot's address is formatted according to that address scheme. Otherwise, the address will be formatted as follows: <StorageObjectName>-<BayNumber>-<LevelNumber>-<SlotNumber>. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .aisleID readonly Variant aisleID Description The slot's aisle ID. If the slot's storage object has an Address Scheme , the slot's aisle ID is formatted according to that address scheme. In other words, if the address scheme's aisles are addressed with a number, the aisle ID will be a number. Otherwise, the aisle ID will be a string. If there is no address scheme, the aisle ID will be blank. All slots in a given Storage Object use the Storage Object's aisle ID as their aisle ID. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .bay readonly Storage.Bay bay Description The slot's bay. Returns the bay that this slot belongs to. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .bayID readonly Variant bayID Description The slot's bay ID. If the slot's storage object has an Address Scheme , the slot's bay ID is formatted according to that address scheme. In other words, if the address scheme's bays are addressed with a letter, bayID will be a string, otherwise bayID will be a number. If there is no address scheme, bayID will be the bay number. Bay IDs are mapped according to the storage object's Start Bay and Bay Stride . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .isStorable readonly int isStorable Description 1 if the slot is a storable slot , 0 otherwise. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .labelProperties Variant labelProperties Description Use your own named properties to get/set slot label values. The Storage.Slot class allows you to get and set custom named properties that will apply to labels on the slot. For example, if you want to set a label named \"SKU\" on a given slot to a value of 5, you can write the following code: slot.SKU = 5; This will set the label's value to 5. If a label of that name does not exist, then it will be added to the slot's labels. If you want to return the value stored in the slot's \"SKU\" label, you can execute the following code: return slot.SKU; For slot labels, you MUST access the label through this dynamic properties syntax. You should not use syntax that accesses label nodes directly in the tree (like slot.labels.assert(\"SKU\").value = 5; ). The storage system may manage an index of slot label values for quick lookup. This index is only updated properly when you use the dynamic property syntax to set label values. For more information, see treenode . labelProperties . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .level readonly Storage.Level level Description The slot's level. Returns the level that this slot belongs to. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .levelID readonly Variant levelID Description The slot's level ID. If the slot's storage object has an Address Scheme , the slot's level ID is formatted according to that address scheme. In other words, if the address scheme's levels are addressed with a letter, levelID will be a string, otherwise levelID will be a number. If there is no address scheme, levelID will be the level number. Level IDs are mapped according to the storage object's Start Level and Level Stride . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .location readonly Vec3 location Description The location of the bottom front left corner of the slot, in the local coordinates of its storage object. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .size readonly Vec3 size Description The size of the slot. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .slotID readonly Variant slotID Description The slot's slot ID. If the slot's storage object has an Address Scheme , the slot's slot ID is formatted according to that address scheme. In other words, if the address scheme's slots are addressed with a letter, slotID will be a string, otherwise slotID will be a number. If there is no address scheme, slotID will be the slot number. Slot IDs are mapped according to the storage object's Start Slot and Slot Stride . Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .slotItems readonly slotItems Description Accesses the array of Storage.Slot.Item s that are stored in or assigned to this slot. Accessing the Number of Slot Items You can access the number of slot items with the following code. slot.slotItems.length Accessing Slot Items by Rank You can access an individual slot item by rank with the following code. slot.slotItems[1] // first slot item slot.slotItems[slot.slotItems.length] // last slot item slot.slotItems[i] // i-th slot item Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .storageObject readonly Storage.Object storageObject Description The slot's storage object. Returns the storage object that this slot belongs to. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .zoneID readonly Variant zoneID Description The slot's zone ID. If the slot's storage object has an Address Scheme , the slot's zone ID is formatted according to that address scheme. In other words, if the address scheme's zones are addressed with a number, the zone ID will be a number. Otherwise, the zone ID will be a string. If there is no address scheme, the zone ID will be blank. All slots in a given Storage Object use the Storage Object's zone ID as their zone ID. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The normalized target x location within the slot. Should be in the range 0-1. yFactor The normalized target y location within the slot. Should be in the range 0-1. zFactor The normalized target z location within the slot. Should be in the range 0-1. factors Encapsulates the x, y, and z factors into a single Vec3. Description Gets a location within the slot. This method is similar to Object . getLocation (). It returns a slot-relative location, in the storage object's local coordinates. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .hasSpace() int hasSpace( treenode item ) Parameters item The flow item that you want place into the slot. Returns int 1 if the slot calculates that there is enough space in the slot to place the item, 0 otherwise. Description Returns 1 if it calculates that there is enough space to place the passed item into the slot, 0 otherwise. The hasSpace() method uses the storage object's Slot Stacking Order property to \"simulate\" placing the item into the slot, taking into account the set of items that are already stored in or assigned to the slot. Once it has resolved where the item would be placed if it were to be stored in the slot, it checks if that placement is fully within the boundaries of the slot. If the placement is within the slot boundaries, the method will return 1, otherwise the method will return 0. Item Size and Rotation The item's current size and rotation are used in calculating the item's placement. The item's size and rotation are assumed to be the same as they will be when the item is eventually placed into the slot. This is important, especially for rotation, which often changes during the model run. If, when the item is finally placed into the slot, the item's rotation is different than when hasSpace() was called, then hasSpace()'s return value will have potentially been incorrect. To fix this, you should first set the rotation of the item to the rotation it will be in when it is placed in the rack, then call hasSpace(). You can then set its rotation back to whatever the item's current context requires. Assigned-Only Items When \"simulating\" the placement of the item to determine space availability, the slot will take into account not only the items that are already stored in the slot, but also the items that are assigned to the slot , but have not yet been stored in the slot. The slot will first virtually \"place\" the assigned-only items into the slot, in the order in which they were assigned to the slot. Then it will virtually place the currently querying item into the slot as if it entered the slot after all the other assigned items. Because of the virtual placement of assigned-only items, it is important to note that the hasSpace() method is only a heuristic. The result of hasSpace() assumes that the order in which assigned items will be placed into the slot is the same order as their assignment to the slot, and that the item's rotation and size are the same as when it will be placed in the rack. If these factors change, or if different-sized items are placed into the slot in a different order than their assignment order, then hasSpace() will have returned a value inconsistent with the actually reality of whether there is space in the slot after all assigned items have been placed. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot .restack() void restack( int fromRank = 0 ) Parameters fromRank If non-zero, the slot will only start at the item at the defined rack, and restack from that point. Description Performs again the slot stacking algorithm on some or all items stored in the slot. For storage objects whose Slot Stacking Order only stacks along a single axis (and for Gravity Flow and Push Back Racks) the storage object will automatically restack when an item is picked from a position that would require a restack. For slot stacking orders that include multiple axes, however, the storage object does not automatically restack the slot when items are picked from a middle or front position. As such, you can manually restack the slot using this method."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.Slot.Item.html",
        "title": "FlexScript Class - Storage.Slot.Item",
        "content": "Description A class that represents a storage slot item. A storage slot item is a record of an item that is either assigned to the slot, or is currently in the slot. If the item is virtual, the slot item holds the label values of the item. A slot item is created when an item is assigned to the slot. A slot item is destroyed when the item is no longer associated with the slot, meaning the item is not assigned to the slot, and it is not currently within the slot. Properties isVirtual Returns whether the current slot item is virtual. For more information on virtualization, see the Storage System topic. item Returns the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. labelProperties Use your own named properties to get/set label values. location Returns the location of the flowitem associated with this slot item, relative to the storage object. pickRank Returns the order that this item could be picked. This value depends on the item insertion order as well as the rack type. For example, the last item in a Floor Storage has a pickRank of 1. By contrast, the first item in a Gravity Flow Rack would have a pickRank of 1. rotation Returns the rotation of the associated flowitem. size Retursn the size of the associated flowitem. slot Returns the slot associated with this slot item. storageItem Returns the storage item for the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. Methods getLocation Gets the item's location, relative to the storage object. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .isVirtual readonly int isVirtual Description Returns whether the current slot item is virtual. For more information on virtualization, see the Storage System topic. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .item readonly Object item Description Returns the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .labelProperties Variant labelProperties Description Use your own named properties to get/set label values. The Storage.Slot.Item class allows you to get and set custom named properties that will apply to labels on the item. Accessing items on a Storage.Slot.Item acts as a \"pass-through\" to accessing labels on the item itself. In other words, getting and setting labels on the Storage.Slot.Item is essentially the same as getting and setting labels directly on the flowitem object. The primary reason for accessing these labels via the Storage.Slot.Item is when the actual flowitem is virtualized. When the flowitem is virtual, the Storage.Slot.Item acts as its temporary store for labels. When the flowitem is later \"unvirtualized\" those labels will be restored to the flowitem, with any intervening changes in the label values reflected in the restored flowitem. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .location readonly Vec3 location Description Returns the location of the flowitem associated with this slot item, relative to the storage object. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .pickRank readonly int pickRank Description Returns the order that this item could be picked. This value depends on the item insertion order as well as the rack type. For example, the last item in a Floor Storage has a pickRank of 1. By contrast, the first item in a Gravity Flow Rack would have a pickRank of 1. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .rotation readonly Vec3 rotation Description Returns the rotation of the associated flowitem. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .size readonly Vec3 size Description Retursn the size of the associated flowitem. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .slot readonly Storage.Slot slot Description Returns the slot associated with this slot item. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .storageItem readonly Storage.Item storageItem Description Returns the storage item for the flowitem associated with this slot item. Accessing this property will cause a virtualized item to be re-created. Do no remove, this fixes the anchor on doc.flexsim.com Storage.Slot.Item .getLocation() Vec3 getLocation( double xFactor , double yFactor , double zFactor ) Vec3 getLocation( Vec3 factors ) Parameters xFactor The x value of the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). yFactor The y value of the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). zFactor The z value of the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). factors A vector representing the point on the item where the location will be measured from. Measured as a percent of the item's size (0-1). Returns Vec3 A vector holding the item's location. Description Gets the item's location, relative to the storage object. This code gets the item's location measured at its center. Vec3 centerLoc = storageItem.getLocation(0.5,0.5,0.5); Vec3 centerLoc = storageItem.getLocation(Vec3(0.5,0.5,0.5));"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/FlexScriptAPIReference/Warehousing/Storage.System.html",
        "title": "FlexScript Class - Storage.System",
        "content": "Description A class that represents a storage system. For more information on how to use the storage system, see the Storage System topic. Properties storageObjects Accesses all storage objects in the model as an array of Storage.Object s. Methods findItem Finds an item matching one of the given queries. findSlot Finds a slot that matches one of the given queries. getSlot Gets a slot by its address. queryItems Searches for all items that match the query. querySlots Searches for all slots that match a query. Details Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .storageObjects readonly storageObjects Description Accesses all storage objects in the model as an array of Storage.Object s. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .findItem() Storage.Slot.Item findItem( Variant queries , int flags ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Storage.Slot.Item findItem( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters queries One or more queries to use to find an item. One query can be passed in as a string. Multiple must be passed in an array. flags A bit field that may include Storage.QueryFlags values. $1-$5 Values passed in, which can be referenced in the queries. Returns Storage.Slot.Item A reference to the first matching slot item. If the search was unsuccesful, this value will be empty. Description Finds an item matching one of the given queries. This method evaluates each query until a slot item is found that matches. Only stored items are searched. '$' Keywords In composing the query, you can include the values $1 - $5. These values are associated with additional parameters that you pass into the query. Storage.system.findItem(\"WHERE SKU = $1 AND Size = $2\", 0, token.SKU, token.Size); 'item' Keyword The query parser will interpret 'item' is a special keyword that accesses the target item that is being evaluated, as a Storage.Slot.Item . This can be used to write normal flexscript expressions as part of the query. Storage.system.findItem(\"WHERE item.slot.SKU = $1\", 0, token.SKU); Accessing Label Names Other than the 'item' keyword and the '$' keywords, all other values in the query are interpreted to be labels on the evaluating flow item. For example, to search for items that have a Type label value of 5, you could use the following code: Storage.Slot.Item slotItem = Storage.system.findItem(\"WHERE Type = 5\"); If you are virtualizing items, then you should make sure those items are included in the list of item labels to save . Speed Considerations It should be noted that evaluating a label directly by its name effects a result no different than accessing it via the 'item' keyword. In other words, the two queries below will give the same result (assuming you are not virtualizing items). WHERE SKU = 5 WHERE item.item.SKU = 5 However, these two expressions can have different results in speed, especially when searching large storage systems. Accessing the SKU label directly (the first query above) will enable indexed lookup if you have indexed that label . On the other hand, using the expression 'item.item.SKU' will compile to a straight flexscript evaluation, which cannot be indexed. Thus, using the direct label access is preferable. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .findSlot() Storage.Slot findSlot( Variant queries , int flags ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Storage.Slot findSlot( Variant queries , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters queries One or more queries to use to find a slot. One query can be passed in as a string. Multiple must be passed in an array. flags A bit field that may include Storage.QueryFlags values. $1-$5 Values passed in, which can be referenced in the queries. Returns Storage.Slot A reference to the first matching slot. If the search was unsuccesful, this value will be empty. Description Finds a slot that matches one of the given queries. This method evaluates each query until a slot is found that matches. Only storable slots are searched. '$' Keywords In composing the query, you can include the values $1 - $5. These values are associated with additional parameters that you pass into the query. Storage.system.findSlot(\"WHERE SKU = $1 AND Size = $2\", 0, token.SKU, token.Size); 'slot' Keyword The query parser will interpret 'slot' as a special keyword that accesses the target slot that is being evaluated, as a Storage.Slot . This can be used to write normal flexscript expressions as part of the query. Storage.system.findItem(\"WHERE slot.hasSpace($1)\", 0, token.Item); Accessing Label Names Other than the 'slot' keyword and the '$' keywords, all other values in the query are interpreted to be labels on the evaluating slot. For example, to search for slots that have a Type label value of 5, you could use the following code: Storage.Slot.Item slotItem = Storage.system.findItem(\"WHERE Type = 5\"); Speed Considerations It should be noted that evaluating a label directly by its name effects a result no different than accessing it via the 'slot' keyword. In other words, the two queries below will give the same result. WHERE SKU = 5 WHERE slot.SKU = 5 However, these two expressions can have different results in speed, especially when searching large storage systems. Accessing the SKU label directly (the first query above) will enable indexed lookup if you have indexed that label . On the other hand, using the expression 'slot.SKU' will compile to a straight flexscript evaluation, which cannot be indexed. Thus, using the direct label access is preferable. Indeed, in some cases it may be advantageous to avoid using the 'slot' keyword, and instead store desired values on labels on the slot, specifically to take advantage of indexed lookup. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .getSlot() Storage.Slot getSlot( string address ) Parameters address An address that can be interpreted by one of the address schemes. Returns Storage.Slot Description Gets a slot by its address. This method compares the address to each Address Scheme. If it matches, this method then tries to resolve the slot using the scheme. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .queryItems() Variant queryItems( string query , int flags ) Variant queryItems( string query , int flags , Variant $1 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 , Variant $3 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Variant queryItems( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters query The query to run. flags A bit field that may include Storage.QueryFlags values. $1-$5 Extra parameters that can be referenced in the query. Returns Variant An array of Storage.Slot.Item values. Description Searches for all items that match the query. The method only considers items that are in the Stored state. Do no remove, this fixes the anchor on doc.flexsim.com Storage.System .querySlots() Variant querySlots( string query , int flags ) Variant querySlots( string query , int flags , Variant $1 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 , Variant $3 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 ) Variant querySlots( string query , int flags , Variant $1 , Variant $2 , Variant $3 , Variant $4 , Variant $5 ) Parameters query The query to run flags A bit field that may include Storage.QueryFlags values. $1-$5 Extra paramemters that can be referenced in the query. Returns Variant An array of Storage.Slot values. Description Searches for all slots that match a query. This method only considers storable slots."
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/CommandsIndex.html",
        "title": "Alphabetical Command Index",
        "content": "A - B - C - D - E - F - G - H - I - J - K - L - M - N - O - P - Q - R - S - T - U - V - W - X - Y - Z Do no remove, this fixes the anchor on doc.flexsim.com A a activateview activedocumentnode activedocumentview activeview addbundleentry addbundlefield addcommand addkinematic addsphere addsystemcontrolleritem addtoeventtypelegend addviewtext agvaddlistener agvinfo agvreassigncp agvredirect apchar applicationcommand applyalleditstonodes applyeditstonode applylinks applyshapefactors applytoedits asciistr assertvariable attlink autoloadallmedia autoloadimages autoloadshapes autoloadsounds avi Do no remove, this fixes the anchor on doc.flexsim.com B backupfile beginaggregatedundo beginignoreundo bernoulli beta bindtexture binomial break buildall buildnodeflexscript Do no remove, this fixes the anchor on doc.flexsim.com C c calculateconfidence callwebscriptmethod case cauchy cdir cempirical changedisplay changepersonvisuals checkdllconnection checkforexistingview classobject cleannodeflexscript clearbundle clearundohistory clickcode clientclose clientconnect clientcreate clientreceive clientsend closeallip closeallop closeip closenodeedge closeop closeview cm cmdcompile cmddelete cmdexit cmdloadbyextension cmdloadsession cmdloadtree cmdnew cmdopen cmdsaveas cmdsavesession cmdsavetree codetotemplate codetotemplatetext combocurrentnode comborefresh commandlineparam comparetrees consoleexecutefs contentunder contextdragconnection continue continueaggregatedundo controlpressed convert conveyorgetmotor conveyorinfo conveyorresumeitem conveyorsenditem conveyorsetspeed conveyorstopitem copyattributes copycolor copylabel copylabels copyvariable copyvariables copyvisuals cp cpaddlistener cpallocate cpconnection cpcpno cpdeallocate cpdistance cpisavailable cpnumconnections cptasksequencequeue createcoordinatedtasksequence createcoupling createevent createpopup createtickevent createtoken createundorecord createuserlibrary createview cubemap currentfile cursorinfo Do no remove, this fixes the anchor on doc.flexsim.com D daemonstate dataplot days deactivatekinematics debug default delayednodefunction delayevents delayeventsofobject deleteselected dempirical deselectall destroyevent destroyeventsofobject destroymessageevents dispatchcoordinatedtasksequence distancetotravel distcutoff distfromviewpoint documentsdir documentusercommands draginfo draw3dtext drawbox drawcolumn drawcube drawcylinder drawdisk drawflattext drawfont drawimage drawline drawobject drawpie drawquad drawrect drawrectangle drawshadow drawsphere drawspheres drawtext drawtomodelscale drawtoobjectscale drawtriangle dropnodefrom dropnodeto dropuserlibraryobject dropx dropy dropz duniform duplicateselected dynamicsplineall Do no remove, this fixes the anchor on doc.flexsim.com E else embedfile empirical emptyfluidobject enablecode endaggregatedundo endignoreundo endoffile endreplication erlang evaluatepullcriteria eventcode eventdata eventget eventlisten eventloginfo eventqty excelclose excelcreatesheet excelcreateworkbook exceldeleterange exceldeletesheet excelexporttable excelgetrangeparam excelgetrangesheet excelimporttable excellaunch excelmultitableexport excelmultitableimport excelopen excelquit excelrangereadnum excelrangereadstr excelrangewritenum excelrangewritestr excelreadcell excelreadnum excelreadstr excelsave excelsetrange excelsetsheet excelupdatepreferences excelversion excelwritenum excelwritestr executefsfile executefsnode executestring executesubflow exponential exportdataset exporttable extremevalue1a extremevalue1b Do no remove, this fixes the anchor on doc.flexsim.com F fastforward fastspline fastsplineall fastsplineupdate fglColor fgldebuglevel fglDisable fglEnable fglinfo fglLoadIdentity fglMatrixMode fglNormal fglPopMatrix fglPushMatrix fglRotate fglScale fglTranslate filebrowse fileclose fileexists fileisreadonly fileopen filereadline fillwithatts findownerobject findundorecordbyid finishundorecord firecreateevent flipselected fluidcontent fluidmaxcontent flyactive flyendnode flypath flypathadd flypathreset flystart flystop flyto flyupdate for forobjecttreeunder fpc fpd fpf fpm fpr fps fpt freeoperators fscheckall ft function_n function_s Do no remove, this fixes the anchor on doc.flexsim.com G gamma geometric getactiverole getactivity getallocatedfromkey getanimationvar getapplicationtitle getbatch getbundlefieldname getbundlefieldnr getbundlefieldtype getbundleindexentries getbundlenrentries getbundlenrfields getbundlevalue getcensus getchecked getchildtoken getchildtokenrank getcoordinatedtasksequence getcreationtime getcurrentundorecord getcurtask getdashboardcontrol getdatastat getdirbrowse getdrawtextmetric getedgedist getedgespeedlimit getentrytime geteventtime getfilebrowse getfilesindirectory getframe getiteminvolved getitemsendto getitemstate getitemvar getkinematics getlastacquiredresource getlastfiletype getlinecontrollerdata getmodelunit getnetnode getnetnodespline getnetworkdistance getnextnetnode getnextnetnodeoutport getnextparametersobject getnumpeopleresources getobjectshapeindex getobjecttextureindex getparenttoken getparentwindow getpath getpeopleresourceutilization getpickingdrawfocus getpickingmode getpreempt getpriority getprocessflowvar getproperty getreportnum getrunstate getsdtvalue getshapeindex getsoundindex getstat getstatetableutilization getstream getsystemmetric gettableviewselection gettenavigator gettenetnode gettenetworkinfo gettextureindex gettoken gettokenbyid gettokenid gettokens gettreedrawposition getundorecordid getutilizedobject getvarnode getvarnum getvarstr getviewhwnd getviewmenu getviewscale getviewtext glIsEnabled glLineWidth glPointSize go graphtohistogram groupconnectfrom groupconnectto groupcopyconnections groupsetnames Do no remove, this fixes the anchor on doc.flexsim.com H help hideprogressbar highestconnection highlightviewtext holditem hours howmanyattributes howmanycommands hypergeometric Do no remove, this fixes the anchor on doc.flexsim.com I i if importdataset importtable in inheritcode inititem initkinematics inputopen insertallocatetask insertcopy insertdeallocatetask insertproxytask insertsynctask integrityscan inversegaussian inverseweibull invertedweibull ip ipavailable ipopen ipopno ipready isclasstype isedgeforward iskeydown isprojectcompiled Do no remove, this fixes the anchor on doc.flexsim.com J johnsonbounded johnsonunbounded Do no remove, this fixes the anchor on doc.flexsim.com K keyboardfocus keyedclick Do no remove, this fixes the anchor on doc.flexsim.com L laplace lastclickednode lastkey lastkeydown lastkeyup library license licenseactivation listboxrefresh listenerinfo loadimage loadselectedfromfile loadstate loadthreedobject loaduserlibrary logarithmic logevent logistic loglaplace loglogistic lognormal2 Do no remove, this fixes the anchor on doc.flexsim.com M mainmenucommand maintenance maintree makeactive makehisto mediafile mediapath mediareset memberadd memberremove memberremoveall menubelow menucheck menugray menumain mergegetlanestate mergegetnumlanes mergeislaneclear mergereleaselane mesh meshaddindex meshaddvertex meshdraw meshinfo meshsetattrib meshsetvertexattrib minutes model modeldir modeleditmode moveobject moveselectedintohighlighted mpd mpf mph mpr mpt msg msgparam msgsendingobject Do no remove, this fixes the anchor on doc.flexsim.com N negbinomial netnodefromrank nodebreak nodefromwindow nodefunction nodefunctionlisten nodeinsertafter nodeinsertinto nodejoin normal notifylinecontroller numconnections Do no remove, this fixes the anchor on doc.flexsim.com O objectexists objectsoundcode opavailable openallip openallop openip opennodeedge openop opipno opopen opready optimizenetwork outputopen outputtreecontent ownerobject ownerview Do no remove, this fixes the anchor on doc.flexsim.com P param pareto parqty pdir pearsont5 pearsont6 pfile pickcolor pickcolornode pickedcolorblue pickedcolorgreen pickedcolorred pickfile picklistapply pickoffsetx pickoffsety pickoffsetz pickoptiononselect placeoffsetx placeoffsety placeoffsetz poisson popupmenu postclosewindowmessage postmovewindowupdate postwindowmessage print profileevents profilekinematics profiletasksequence programdatadir pullitem Do no remove, this fixes the anchor on doc.flexsim.com Q qstudentt Do no remove, this fixes the anchor on doc.flexsim.com R rackdrawfilledcell rackdrawvirtualcontent rackgetbaycontent rackgetbayloc rackgetbayofitem rackgetbaysize rackgetcellcontent rackgetcellvar rackgetitembybaylevel rackgetitemcellrank rackgetlevelloc rackgetlevelofitem rackgetlevelsize rackgetnrofbays rackgetnroflevels rackrecycleitem rackrestoreitem racksetcellcontent racksetcellvar randantithetic randinit randnext randomwalk randstate rankfromnetnode reacquirepreemptedresource realtime reassignnetnode reassignticker rebindobjectattributes receiveitem recover recycleitem redirectconsole redirectnetworktraveler redirectpicklists redo refreshcommandlist refreshglobalvariables refreshmodelcommands refreshview registereventtype releasebatch releaseitem releasetoken releasewave removeallcouplingreferences removebundleentry removefirstbundleentry removelastbundleentry reordertasks repaintall repaintallactive repaintview replacedata_n replacedata_s replacename report reportmode repositionhighlightededits requestdecision requestoperators rerankbesttask resetexperiment resetlayer resetmodel resetstats resetuniqueid resumetransportsin resumetransportsout return rotateselected rundocument runfunction runprogram runspeed Do no remove, this fixes the anchor on doc.flexsim.com S savebyname savemodelprepare saveselectedtofile savestate savestoppedtransportin savestoppedtransportout savetree scalekinematicstotime scrollinfo searchdata_n searchdata_s searchfornode searchname seconds select selectall selectedobject selectedx selectedy selectedz sendonactivatenotify sendwindowmessage serveraccept servercloseconnection serverclosemain servercreatemain serverreceive serversend setanimationvar setapplicationtitle setbundlevalue setcameradirection setcameravolume setchecked setcollisioncheck setcursor setdrawnamefunction setdropcoords seteventtime setframe setiteminvolved setitemsendto setitemvar setkinematicsrotoffset setmessageloopsleep setobjectbillboard setobjectshapeindex setobjecttextureindex setpickingdrawfocus setpreempt setpriority setprogressbar setproperty setresetposition setsdtvalue setselectedobject settableviewselection setticker settokencolor settokenshape setvarnum setvarstr setviewtext shapeinfo shiftpressed shiftscheduledownfunction showcompilerconsole showhelp showhtmlhelp showprogressbar simexec skip so socketend socketinit socketx soundchange soundload soundplay soundplayfile soundstop spacebase spacerotate spacescale spacetranslate spline splinedraw splinedrawextrusion splinelength splineposobject splinerx splinery splinerz splinex spliney splinez standardpreopen startlisten startuploadlibraries statsenablemask step stick stop stoplisten stoptime strascii stringcompare stringtoken suspenddraw sv swapnoderanks switch switch_cppfunc switch_destroyonreset switch_dllfunc switch_enablestats switch_expanded switch_flexscript switch_hashedlist switch_hidden switch_hideconnectors switch_hidecontents switch_hidelabel switch_hideshape switch_noselect switch_orphancoupling switch_preservecoupling switch_protected switch_selected switch_showobject switch_statelocked switch_stateused switch_variable system_cld system_clda system_cli system_clia system_cln system_clna system_cls system_cls system_clsa system_gld system_glda system_gli system_glia system_gln system_glna system_gls system_glsa system_ms system_sld system_slda system_sli system_slia system_sln system_slna system_sls system_slsa systemwindow Do no remove, this fixes the anchor on doc.flexsim.com T tabcontrolrefresh templatetocode textureaxis_s textureaxis_t thisclass toggleallcodestates tonode tonum toptr tostring tracemaskevents tracemaskobject tracemasktime trackpopup trafficcontrolinfo transfernodeobj transitionport transportincomplete transportoutcomplete triangular truncatemediapath Do no remove, this fixes the anchor on doc.flexsim.com U undo uniform unloadimage updatekinematics updatelocations updatereport updatestate updatestates updateundorecord uselisteners userdatadir userinput Do no remove, this fixes the anchor on doc.flexsim.com V validatename viewdist viewmenucommand views viewtofile Do no remove, this fixes the anchor on doc.flexsim.com W webcommand weibull while windowflash windowfromnode windowgray windowmenu windowmove windowredraw windowshow windowstyle wmp Do no remove, this fixes the anchor on doc.flexsim.com X Do no remove, this fixes the anchor on doc.flexsim.com Y Do no remove, this fixes the anchor on doc.flexsim.com Z zonecheckrequests zonegetpartitionvaluefortoken zoneistokeninsubset Deprecated acos add addfullhistorymoverecord addfullhistorystaterecord addlabel addtablecol addtablerow and angle anode anum aptr arraysize asin assertattribute assertlabel assertsubnode atan atan2 att att_s aviadd avifinish avistart bcgetitemkinematics bcgetitemposition bcsetdirection bcsetitemconveystate bitwiseand bitwisenot bitwiseor bitwisexor ceil cell cellrc cellrowcolumn centerobject changeconveyorspeed changetask clearconsole clearcontents clearfullhistory clearglobaltable closeinput closeoutput coloraqua colorarray colorblack colorblue colorbrown colorgray colorgreen colorlightblue colorlime colororange colorpink colorpurple colorrandom colorred colorrgb colorsilver colorteal colorwhite coloryellow comparetext concat connect containerentry containerexit content contentobj cos count cppgettoken cppsettoken createcopy createdelaytask createemptytasksequence createglobaltasksequence createinstance createloadtask createsendmessagetask createstandardtask createtravelloadtask createtraveltask createtraveltolocandwaittask createtraveltoloctask createtravelunloadtask createunloadtask createwaittask current dbchangetable dbclose dbexportnode dbexporttable dbgetfieldname dbgetmetrics dbgetmode dbgetnumcols dbgetnumrows dbgettablecell dbgettablenum dbgettablestr dbimportnode dbimporttable dbopen dbsettablecell dbsettablenum dbsettablestr dbsqlquery dbusername dbviewtable dbwritechanges defaultdragconnection degreestoradians deletetablecol deletetablerow dellabel destroyobject diffsign dispatchtasksequence div divide dumpquery enablefullhistory endwaittask eq excelexportnode excelimportnode excelmacro excelrangeread excelrangewrite excelread excelwrite executetablecell exp exportfullhistory fabs factorial familycreate familydelete familymember familymemberadd familymemberdel familymemberqty fillarray findmatch findmax findmin first floor fmod forobjecthighlightedin forobjectlayerunder forobjectsbefore forobjectsbehind forobjectselectionset frac ge get getcolorcomponent getdatatype getinput getitemtype getlabel getlabelnum getlabelstr getmodelunitnum getmodelunitstr getmoverecord getmoverecordvalue getname getnodename getnodenum getnodestr getnroftasks getnummoverecords getnumstaterecords getobjectimageindex getoutput getquerycolcount getquerymatchcount getquerymatchtablerow getqueryvalue getrank gets getstatenum getstaterecord getstaterecordvalue getstatestr gettablecell gettablecols gettableheader gettablenum gettablerows gettablestr gettaskinvolved gettasksequence gettasksequencequeue gettaskstate gettasktype gettaskvariable gettotalnroftasks gettrackedvariable getvartype glBegin glColor3d glColor4d glDisable glEnable glEnd glLoadIdentity glMatrixMode glNormal3d globallist glPopAttrib glPopMatrix glPushAttrib glPushMatrix glRotated glScaled glTexCoord2d glTranslated glVertex3d groupaddmember groupmember groupnummembers groupremovemember gt helpcommands hidelabel hideports inc inittrackedvariable inobject inserttask installpackage item iterate label last le listbackorders listentries listinlist listmax listmaximum listmean listmin listminimum listmul listpull listpush listremove listsub listsum loadsound local localarray log log10 lognormal lognormalmeanstdev lt main makearray max maxof min minof module movetablecol movetablerow movetasksequence mul multisorttable nametomodelpath ncols ne next node nodeadddata nodedeldata nodepoint nodetomodelpath nodetopath not nrcp nrip nrop nrows ntravelto ntraveltoupdate numtostring objectconnect objectshapecode objecttexcode openflexsimchart openglcolor opengllighting openinput openoutput or outobject parg parnode parstr particleset parval pc pd pf pi port pow pr prev pt query radianstodegrees rank rankobj reftable relloc repeat reset resumeanimation resumeinput resumeobject resumeoutput richeditaddtext richedittoken round runexpertfit savefpk senddelayedmessage sendmessage set setcenter setcolor setcurrent setitem setitemtype setlabel setlabelnum setlabelstr setloc setname setnodename setnodenum setnodestr setobjectimageindex setport setquerynode setrank setrot sets setsize setstate setstate_s settable settableheader settablenum settablesize settablestr settrackedvariable setundos showgraphicinfo sign sin sorttable spaceglobal spaceobject sqr sqrt startanimation statisticaltime stopanimation stopinput stopobject stopoutput store stringcopy stringlen stringpart stringreplace stringreturn stringsearch stringtonum stringtopchar strquote sub swaptablecols swaptablerows switch_hidebase tan time trackedvariable transfernode travelto traveltoupdate trunc undos up updateanimation updatetoolsmenu userfunction_n userfunction_s var var_s vectorprojectx vectorprojecty vectorprojectz xcenter xloc xrot xsize ycenter yloc yrot ysize zcenter zloc zrot zsize"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/Commands.html",
        "title": "Alphabetical Command Reference",
        "content": "$iter (num index) See User Manual > Miscellaneous Concepts > SQL Queries Description See Miscellaneous Concepts > SQL Queries for more information. Example a <no parentheses> Description This command is used to reference objects during iterations of certain flexscript commands such as forobjectlayerunder() and forobjecttreeunder(). This command does not require parentheses, and can only be used in C++. Example See forobjecttreeunder(). acos (num ratio) Deprecated, use Math.acos() Description This command is deprecated. Use Math . acos () instead. Gets the arccos of an angle in radians. Example activateview (obj viewnode) Description For developer use. This command makes a GUI window active and visible. It should be used to open a window that is stored in the view tree without creating a copy of the view in the active tree, in order to make direct changes that will be saved in the view tree instead of being deleted when the window is closed. Generally, the command createview() should be used to open GUI windows. Use makeactive() if you want to make an already open view the active, or top, window. Example activateview(views.find(\"standardviews/other/FindReplace\")); This opens the node called FindReplace in the folder called standardviews/other in the view tree. activedocumentnode () Gets the currently active document window Description Returns the currently active document window. If the active document window is a tabbed window, it will return the active tab page node. Example treenode activedoc = activedocumentnode(); activedocumentview () Gets the currently active document window as an HWND Description Returns the currently active document window as an HWND. To get the node associated with the window, use activedocumentnode(). Example treenode activedoc = nodefromwindow(activedocumentview()); activeview () Gets the currently active window as an HWND Description Returns the currently active window as an HWND. To get the node associated with the window, use nodefromwindow() Example treenode viewnode = nodefromwindow(activeview()); add (num value1, num value2) Deprecated, use the + operator Description This command is deprecated. Use the + operator instead. Addition of value1 to value2. This returns the result of the arithmetic expression value1+value2. Example double sum = add(1,2); addbundleentry (node datanode[, field1val, field2val, ...]) Adds a new entry to the bundle (base 0) Description Adds a new entry to the bundle (base 0). All fields must be added before adding entries. The optional field values will be added to the fields in the given order. Up to 29 field values can be given. For bundles with more fields, use setbundlevalue. Example int lastentry = addbundleentry(x, time(), current.subnodes.length); addbundlefield (node datanode, str fieldname, num type[, num maxstrsize]) Adds a field to the bundle Description Adds a field to the bundle with the given field name. Returns the field rank (base 0) of the added field. All fields for a bundle must be added before any entries are added. The type is a bitwise flag that must be one of the following values: BUNDLE_FIELD_TYPE_DOUBLE : stores a 64-bit double BUNDLE_FIELD_TYPE_FLOAT : stores a 32-bit float BUNDLE_FIELD_TYPE_INT : stores a 32-bit integer BUNDLE_FIELD_TYPE_STR : stores a string. If used, you should also define the maximum string size, which will be the space allocated for each string entry. If maxstrsize is unspecified, the default will be 32 bytes. The field will be able to store strings at least as long as the specified length, and any longer strings will be truncated. BUNDLE_FIELD_TYPE_VARCHAR: stores a string. This field type does not impose a limit on string length. This field type is recommended if you need variable string lengths, or if strings are frequently repeated. BUNDLE_FIELD_TYPE_NODEREF : stores a reference to a node BUNDLE_FIELD_TYPE_BINARY : stores a 1 or 0 as a single bit. Bits are allocated in blocks of 32, so that one binary field requires 32 bits. However, 32 binary fields can share a single block. You can optionally bitwise combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_INDEX_MAP. All values in this type of field will be indexed for quick lookup ( O(log n) ) using getbundleindexentries(). You can optionally combine BUNDLE_FIELD_TYPE_INT, BUNDLE_FIELD_TYPE_STR, BUNDLE_FIELD_TYPE_VARCHAR, or BUNDLE_FIELD_TYPE_NODEREF with BUNDLE_FIELD_INDEX_HASH. All values in this type of field will be indexed for quick lookup ( O(1) ) using getbundleindexentries(). This type of field is only recommended for use with bundles that rarely, if ever, change size while the model is running. You can optionally combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_NULLABLE, to allow those fields to contain null values. If a field is nullable, you can pass a null Variant in to setbundlevalue(), and it is possible to get a null Variant from getbundlevalue(). Example addbundlefield(x, \"Object Name\", BUNDLE_FIELD_TYPE_STR | BUNDLE_FIELD_NULLABLE, 64); addcommand (obj codenode, str commandname, str description, str parameters, str example [, str cppprefix, str shortdescription]) Description For developer use. Adds a Flexscript command to the current list of available commands. The new command is available until the next compile. The Tools | User Commands menu is for end-users to create their own commands. Example addcommand(...) addfullhistorymoverecord (num flowitemid, num time, obj origin, obj destination, num itemtype) Deprecated Description This command is deprecated. Adds a new entry to the Movement table that is recorded when Full History is enabled. The new entry records that the flowitem identified by flowitemid moved from the orgin object to the destination object and the specified time. The entry also records that the flowitem's itemtype at the time of the movement was the itemtype passed as the third parameter. Users should only have to use this command in very rare situations. Example addfullhistorymoverecord(getnodenum(uniqueid(item)), time(), current, current.outObjects[1], item.type); addfullhistorystaterecord (num time, num state, obj object) Deprecated Description This command is deprecated. Adds a new entry to the State table that is recorded when Full History is enabled. The new entry records that the specified object passed in as the third parameter changed to the specified state at the time that is entered as the first parameter. This should only need to be called if the object is having its state changed by soem command other than setstate(). Example addfullhistorystaterecord(time(), STATE_IDLE, current); addkinematic (node infonode, num x, num y, num z, num targetspeed, num acc, num dec, num startspeed, num endspeed, num starttime, num type ) Adds one kinematic operation to a set of kinematics Description Adds one kinematic operation to a set of kinematics. For more information, refer to the user manual documentation on kinematics. Example addkinematic(current.labels[\"kinematics\"], 1, 0, 0, 5,0,0, 0,0, time(), KINEMATIC_TRAVEL); addlabel (obj object, str labelname [, num/str value]) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode .LabelName or treenode . labels .assert() instead. Adds a label to object. Example addsphere (obj object, num x, num y, num z, num radius) Description For developer use. Adds a collision sphere with the specified radius to the specified object at location x, y, z relative to the object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed. Example addsphere(Processor1, 2, -1.25, .75, 1); addsystemcontrolleritem (obj systemcontroller, num productid, num linenum, num target, num starttime [, num newcolumn1, num newcolumn2, num newcolumn3, num newcolumn4]) For Dynamo use Description For Dynamo use. Adds a new line item to a SystemController's schedule during a model run. Does not actually add a new row to the table. The parameters are the same data that the SystemController's schedule requires. The newcolumn parameters are numbers that could have been added to each row of the SystemController's schedule table. Example addsystemcontrolleritem(current.centerObjects[1],0,1,1,0); addtablecol (str/num/node table [, num column, num datatype]) Deprecated, use Table.addCol() Description This command is deprecated. Use Table . addCol (). instead. Adds a column to a table. Example addtablerow (str/num/node table [, num row, num datatype]) Deprecated, use Table.addRow() Description This command is deprecated. Use Table . addRow () instead. Adds a row to a table Example addtoeventtypelegend (str name, num parameter, num value, str legendname) Description The eventtype legend allows you to associate a string with a given value for a given parameter in that eventtype. Passing a negative number for 'parameter' allows you to add a preceeding string to explain the parameter. If the 'parameter' is negative and the 'value' is -1, then it assumes the number is a pointer to a node and will display the node's path as a string. Example addtoeventtypelegend(index,-1,-1,\"resource: \"); // for p1, display the text \"resource: \" and display the path for the object addtoeventtypelegend(index,-2,0,\"covermode: \"); // for p2, display the text \"covermode: \" addtoeventtypelegend(index,2,1,\"YellowToGreen\"); // for p2, a value of 1 should display \"YellowToGreen\" instead of the number 1 addtoeventtypelegend(index,2,2,\"RedToGreen\"); // for p2, a value of 2 should display \"RedToGreen\" instead of the number 2 addtoeventtypelegend(index,3,0,\"\"); // for p3, this makes zeroes blank addtoeventtypelegend(index,4,0,\"\"); // for p4, this makes zeroes blank addviewtext (node view, string text) Description For developer use. Add text to the specified window. Example addviewtext(sv(),\"Hello\") agvaddlistener (obj agv, node listenernode, num flags[, ...]) Description Adds a listener event on the agv Example agvaddlistener(agv, c, AGV_LISTEN_PRE_ARRIVAL); agvinfo (obj agv, num what[, p1, p2, p3, p4]) Description Deprecated, use AGV class. Gets various information about an agv, based on the what parameter: AGV_CURRENT_CP - Returns the agv's current control point AGV_ORIGIN_CP - Returns the agv's origin control point AGV_INTERMEDIATE_DEST_CP - Returns the agv's intermediate destination control point AGV_DEST_CP - Same as AGV_INTERMEDIATE_DEST_CP AGV_FINAL_DEST_CP - Returns the agv's final destination control point AGV_DEST - Returns the agv's destination object AGV_BATTERY_LEVEL - Returns the agv's current battery level as a percentage of battery capacity (0 - 100) AGV_AMP_HOURS - Returns the agv's current battery level in amp hours AGV_START_RECHARGE - Starts the agv recharging. Returns the time it will take to recharge to full capacity. AGV_RECHARGE_TO_LEVEL - Explicitly set's the agv's battery level to p1 (0 - 100). AGV_ADD_ALLOC_POINT - Should be called from the travel initialization trigger. Manually adds a control point/control area for allocation, i.e. a control point or control area that would not otherwise need to be allocated as part of the agv's current travel path. The control point/control area is passed as p1, and the distance at which it must be allocated is passed as p2. The command will return a reference to a node that represents that allocation. Use AGV_SET_ALLOC_POINT_DEALLOC_DIST and AGV_SET_CAN_STOP_AT_ALLOC_POINT to specify further data on that allocation point. AGV_SET_ALLOC_POINT_DEALLOC_DIST - For a manual allocation point that's been added, this sets the travel distance at which the agv can deallocate the object. You should call this at some point after adding the allocation, so that the object will be properly deallocated. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is the deallocation distance. AGV_SET_CAN_STOP_AT_ALLOC_POINT - Sets whether or not the agv can stop at a manually added allocation point. The default is no, i.e. the agv will not stop at the stop distance, but will continue to the next stoppable point before attempting to allocate the object. Setting this to 1 will allow the agv to stop at the manual allocation point to allocate ahead. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is 1 or 0. AGV_ATTACH_TRAILER - Manually attaches a trailer to the AGV. p1: the object to attach. p2: the trailer gap to apply. p3: If 1, the trailer will be attached behind the AGV (attach to the AGV's tail), if 0, the trailer be attached ahead of the AGV (attach to the AGV's head). p4: If 1, the trailer will automatically be detached when the object exits the AGV, if 0, the trailer should be manually detached. AGV_DETACH_TRAILER - Manually detaches a trailer from the AGV. p1: the object that is attached as a trailer. AGV_SPEED - Returns the agv's current speed AGV_PROXIMITY_STATE - Returns 1 if the agv is blocked by proximity on an accumulating path, 0 otherwise. AGV_ACCUM_AHEAD_AGV - Returns the agv ahead of this agv on an accumulating path, if one exists. Example agvinfo(agv, AGV_DEST_CP); agvreassigncp (obj agv, obj controlpoint) Description Deprecated, use AGV class. Reassigns an agv to the specified control point Example agvreassigncp(agv, controlpoint); agvredirect (obj agv, obj object/controlpoint, num mode) Description Deprecated, use AGV class. Redirects the agv to the designated object/control point. mode can be one of the following values: REDIRECT_AND_WAIT - if not redirected before arrival, the agv will wait at the destination until redirected REDIRECT_AS_FINAL - the destination becomes the new final destination for the agv REDIRECT_AND_CONTINUE_ON_ARRIVAL - the agv will continue to the final destination after arriving at the intermediate destination REDIRECT_AND_CONTINUE_ON_PRE_ARRIVAL - the agv will continue to the final destination after pre-arriving at the intermediate destination (it will not decelerate to a stop) Example agvredirect(agv, controlpoint, 1); and (num/node condition1, num/node condition2) Deprecated, use the && operator Description This command is deprecated. Use the && operator instead.. Example angle (num dx, num dy) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Returns the angle in degrees, rotated clockwise from the positive x axis, of the vector (dx, dy). Calling angle(dx, dy) is the same as calling -Math.degrees(Math.atan2(dy, dx)). Example double myangle = angle(distx, disty) anode (thing) Deprecated, use tonode() Description This command is deprecated. Use tonode() instead. Assert type as node pointer. Example anode(so()) anum (thing) Deprecated, use tonum() Description This command is deprecated. Use tonum() instead. Assert type as arithmetic number. Example anum(so()) apchar (str string) Asserts string as a char* Description Assert type as C style string (e.g. char*). Alias for stringtopchar Example apchar(\"hello\") applicationcommand (str name[, p1, p2, p3, ...]) Description For developer use. Execute a command based on its name. This command will search for the named node in VIEW:/nodefunctions, then in MAIN:/project/exec/globals/nodefunctions, then in VIEW:/commands, and lastly in the FlexSim Engine. If it finds a toggled node, it will call nodefunction on that node passing in up to 10 number parameters. If it finds an untoggled node, it will call executefsnode() on that node passing in n1 as c, n2 as i, and n3 as eventcode. Example applicationcommand(\"outputconsole\"); applyalleditstonodes ([obj view]) Description For developer use. Applies all view edits. This is done before a compile or save. Example applyalleditstonodes applyeditstonode (obj view, obj editednode) Description For developer use. Applies view changes to a node. This is usually only needed for a table view, and is essentially the same as mouse-clicking off of the table's currently active cell. This is the opposite of applytoedits. Example applyeditstonode(ownerview(c), current) applylinks (node view [, num refresh]) Description For developer use. This command applies all of the hotlinks and coldlinks in the view window specified as view. If refresh is 1, then the links will be refreshed, meaning the values from the model will be retrieved and set on the window controls themselves. If refresh is 0, then the values in the model will be set according to what the user specified in the view. This command is used in Flexscript GUI programming. Example applylinks(ownerview(c)); This applies all of the links in the window that is currently designated as the selected view. applyshapefactors (obj object) Applies all of the shape factors to object Description This command applies all of the shape factors to the object if it has any. Example applyshapefactors(item); applytoedits (obj view, obj editednode) Description For developer use. Applies programmatic changes to a node if that node has been selected in a view. This is usually only needed for a table view. This is the opposite of applyeditstonode(). Example applytoedits(ownerview(c), current) aptr (thing) Deprecated, use toptr() Description This command is deprecated. Use toptr() instead. Assert type as pointer Example aptr(so()) arraysize (var array) Deprecated, use array.length Description This command is deprecated. Use Array . length instead. Gets the number of elements in an array. Example asciistr (str string [, num index]) Description This command returns the ascii value of the character at the specified index (0-based) of the string. If index is not specified, the first character of the string is used. Example asciistr(\"fred\",1) returns 114, the ascii value of 'r' asin (num ratio) Deprecated, use Math.asin() Description This command is deprecated. Use Math . asin () instead. Gets the arcsin of an angle in radians. Example assertattribute (obj object, str attributename, num datatype) Deprecated, use Object.attrs.assert() Description This command is deprecated. Use Object . attrs .assert(). Gets a reference to attribute attributename of object, creates the attribute if it does not exist. Example assertlabel (obj object, str labelname, num datatype) Deprecated, use treenode.labels.assert() Description This command is deprecated. Use treenode . labels .assert() instead. Gets a reference to label labelname, creating the label if it does not exist. Example assertsubnode (node containernode, str name[, num datatype]) Deprecated, use treenode.subnodes.assert() Description This command is deprecated. Use treenode . subnodes .assert() instead. Example assertvariable (obj object, str variablename, num datatype) Gets a reference to variable variablename of object, creates the variable if it does not exist Description This command returns a reference to a variable with the given name. If the variable does not exist, one is created with the defined data type. Example treenode newvar = assertvariable(Model.find(\"/Processor1\"),\"MyVariable\", DATATYPE_NUMBER); atan (num ratio) Deprecated, use Math.atan() Description This command is deprecated. Use Math . atan () instead. Gets the arctan of an angle in radians. Example atan2 (num dy, num dx) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Example att (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use var(), var_s() or getvarnode() instead. Example att(current,1) att_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the attribute node of an object by name. An attribute node is one which resides inside the \"variables\" node of the structure of an object. This function will return the pointer to the node called name inside the variables node of object. var_s supercedes this command. Example att_s(current,\"myatt\") attlink (node viewdatanode, str path) Description For developer use. Find a node by text path, relative to the view's objectfocus. This command will return the node on the path relative to the object focus of the ownerview of viewdatanode. For example, let viewdatanode be a node inside the structure of a view, such as an OnPress event node. Then, let the objectfocus of the parent view point to an object in the model called \"Processor\". Now, whatever is passed to the path argument of attlink() will be relative to the Processor object. So, if \">variables\" was passed to path in the attlink call, then attlink would return the pointer to \"variables\" of the Processor. If the node does not exist, attlink will return a null \"safenode\" which signals a failure to find the requested node. The return value can be tested for validity with the objectexists() command. Example attlink(so(),\">variables\") // where so() is data node inside view autoloadallmedia ([node thenode]) Description For developer use. This command loads all of the media (images and shapes) required by the current views, library, and model. Images are either .bmp or .jpg graphics files. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many images or shapes that need to be loaded. This command is not available in C++. Example autoloadallmedia(); This reloads all of the media needed for the current model. autoloadimages () Description For developer use. This command loads all of the images required by the current views, library, and model. Images are either .bmp or .jpg graphics files. This command may take some time to complete, if there are many images that need to be loaded. This command is not available in C++. Example autoloadimages(); This reloads all of the images needed for the current model. autoloadshapes () Description For developer use. This command loads all 3D shapes required by the current views, library, and model. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many shapes that need to be loaded. This command is not available in C++. Example autoloadshapes(); This reloads all of the shapes needed for the current model. autoloadsounds () Description For developer use. This command loads all sounds required by the current views, library, and model as declared by \"sound\" attributes on the objects. This command may take some time to complete, if there are many sounds that need to be loaded. This command is not available in C++. Example autoloadsounds(); This reloads all of the sounds needed for the current model. avi (int cmd, str filename, num tex, num frame) Not fully implemented Description Not fully implemented yet. Will eventually apply an avi video as a texture of a 3d object. Example aviadd (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avifinish (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avistart (str filename, node viewnode, num fps) Description This command is deprecated. Use the Video Recorder instead. Example backupfile (str filepath) Description For developer use. Backs up the file by appending a ! onto the specified file's name. Note that this doesn't copy the file. You would do this before an overwrite of a file. Example backupfile(modeldir() + \"mydocument.htm\"); bcgetitemkinematics (obj basicconveyor, obj item, num kinematictype {0-main kinematic : 1-time dependent : 2-convey dependent}) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcgetitemkinematics command is used to obtain a reference to one of the three kinematics associated with a flowitem traveling on a BasicConveyor: 0 = The main convey state kinematics. You may get kinematic information from this, but do not change the kinematic by adding kinematics or initializing it. 1 = A user-definable kinematics that is dependent on simulation time. 2 = A user-definable kinematics that is dependent on the convey position of the flowitem on the conveyor. The two user-definable kinematics are available for the user to set up customized kinematic motion in addition to traveling down the length of the conveyor. Use bcgetitemkinematics to get a reference to the desired kinematics node, and then use standard initkinematics() and addkinematic() commands as normal. You will need to use the alternative initkinematics parameter list: initkinematics(node, x, y, z, rx, ry, rz, managerots, localcoords). Also, if you add kinematics to the type 2 convey depend kinematic node, bear in mind that all time units for that kinematic no longer apply to actual simulation time units. Instead, they are interpretted as \"convey units\". For example, a speed of 5 is no longer 5 units per time unit, but is instead 5 units per conveyed unit. Acceleration is not distance per time squared, but distance per conveyed unit squared. Start times are no longer a time to start the kinematic, but a position along the conveyor to start the kinematic at. As an example, let's say you add a kinematic to the convey dependent kinematic node to travel 1 unit in the y direction with \"start time\" 5 and \"max speed\" 0.5. What that translates to for the convey dependent kinematic is that the item will start traveling in the y direction once it reaches 5 units along the conveyor. Also, for every unit that it travels down the length of the conveyor, it will travel 0.5 units in the y direction (0.5 y units per convey unit). Thus it will finish the y kinematic once it has travelled 7 units down the conveyor. If the item is blocked in the middle because of accumulation, say at convey position 6, then its y kinematic will also stop, and not resume until the item resumes along the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example treenode kin = bcgetitemkinematics(current, item, 2); treenode kin2 = bcgetitemkinematics(current, item, 1); initkinematics(kin, 0,0,0, 0,0,0, 0,0); addkinematic(kin, 0,1,1,0.5,1,1,0,0, 5, KINEMATIC_TRAVEL); initkinematics(kin2, 0,0,0, 0,0,0, 0,0); addkinematic(kin2, 0,0,720,360,0,0,0,0, time()+5.0, KINEMATIC_ROTATE); bcgetitemposition (obj basicconveyor, obj item) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object The bcgetitemposition command returns the current position of an item on a BasicConveyor object. The position is measured along the conveyor's length from the head of the conveyor to the flowitem's edge furthest from the head of the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcgetitemposition(current,current.first); bcsetdirection (obj basicconveyor, num direction) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcsetdirection command stops all flowitems on the conveyor and sets the direction of travel to 1=forward and 0=reverse. All flowitems will need to have their convey state reset with the bcsetitemconveystate() command before they will begin moving again. The example below shows how to stop the conveyor, and then have all the flowitems accelerate up to a speed of 1 in the reverse direction. Any additional item kinematics will still be active after a direction change. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcsetdirection(so(),0); for(int i = 1; i <= so().subnodes.length; i++) { treenode item = so().subnodes[i]; bcsetitemconveystate(so(), item, bcgetitemposition(so(), item), 0, 1, 0.2); } bcsetitemconveystate (obj basicconveyor, obj item, num startpoint, num startspeed, num targetspeed, num accdec) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The BasicConveyor object allows flowitems to be moved in and out of the conveyor at any time and at any location. Each flowitem on the BasicConveyor can be assigned and re-assigned its own kinematic profile defining how the flowitem is to move along the conveyor. When one flowitem overtakes another flowitem on the conveyor which is either stopped or traveling at a slower speed, it will slow down immediately to match that flowitem's speed. Although flowitems may travel in either direction along the conveyor, all flowitems will travel in the same direction at any given time. The travel direction of the conveyor is set with the bcsetdirection() command. As flowitems are moved in and out of the conveyor, other flowitems on the conveyor are aware of the increase or decrease in available space along the conveyor, and will accumulate naturally. After a flowitem enters the conveyor, either indirectly with the receiveitem() command or directly with the moveobject() command; it is necessary to define the flowitem's initial kinematic profile. This profile is refered to as the flowitem's \"convey state\", and it is set with the bcsetitemconveystate() command. The convey state for a flowitem can be set multiple times if desired. The following are definitions for the parameters used to define the convey state of a flowitem: basicconveyor = A reference to the conveyor. item = A reference to the flowitem. startpoint = The starting location for the flowitem as measured from the beginning of the conveyor, along the conveyor's length to the flowitem's edge furthest from the head of the conveyor (the leading edge if the conveyor's direction is forward, the trailing edge if the conveyor's direction is backward). startspeed = The initial speed the flowitem will begin traveling at. targetspeed = The target speed the flowitem will try to achieve. If the targetspeed is greater than the startspeed, then the flowitem will accelerate up to the target speed; otherwise it will decelerate down to the target speed. If both the startspeed and the targetspeed are set to 0, the flowitem will be positioned at the startpoint, and will not move. accdec = The acceleration or deceleration used to achieve the target speed over time. A value of 0 indicates infinite acceleration/deceleration; or in other words the flowitem will reach it's targetspeed immediately. No destination or termination speed is required, because the flowitems continue traveling along the conveyor until they either reach the end of the conveyor, run into another flowitem, or their convey state is changed again. The BasicConveyor allows multiple \"Decision Points\" to be defined along its length. These trigger points are convenient locations to update the convey state of a flowitem. In addition to the main convey state kinematic assigned to the flowitem with the bcsetitemconveystate() command, a flowitem has two other kinematic structures associated with it that may be used to apply custom kinematic motion (translation or rotation) in addition to the travel motion along the conveyor. One of the kinematic structures is based on simulated time units, and the other is based on distance units along the length of the conveyor. To access these kinematic structures, use the bcgetitemkinematics() command, then use the initkinematics() and addkinematic() commands to create the custom kinematic motion desired. See bcgetitemkinematics() command documentation for more information. Example bcsetitemconveystate(current, item, position, 0, 60, 0); beginaggregatedundo (obj view, str description) Description Begins an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the next endaggregatedundo() command will be encapsulated into a single undoable operation. Returns the id for the created record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = beginaggregatedundo(c.find(\"@/TheTable\"),\"Name Change\"); beginignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example beginignoreundo(); bernoulli (num prob, num succeed-value, num fail-value[, num stream]) Returns one of two possible values, based on the given probability Description bernoulli( p , a , b , stream ) is a discrete probability distribution. Inputs: p is the probability that a will be returned; where p ∈ ( 0, 100 ) 100 − p is the probability that b will be returned. a ∈ ( - ∞, ∞ ) b ∈ ( - ∞, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , b } mean = ( a p + b (100− p ) ) ⁄ 100 variance = ( p ⁄ 100)(1 − p ⁄ 100) when a =1 and b =0 Possible Applications: Used to model a random occurrence that has two possible outcomes such as a pass/fail test. It is possible to generate more than two values by nesting bernoulli commands; however, it is better to use empirical distributions in these cases. Comments: The bernoulli( p , 1, 0) and binomial(1, p ) distributions are the same. Example treenode curoperator = current.centerObjects[bernoulli(90,1,2,1)]; The bernoulli command in this example has a 90 percent probability of returning 1 otherwise it will return 2, using random number stream 1. It is used within a centerObject reference such that 90 percent of the time curoperator references the object connected to center port 1 of the current object, otherwise curoperator references the object connected to center port 2. beta (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a beta distribution Description beta( a , b , α 1 , α 2 , stream ) is a bounded continuous probability distribution. Inputs: a is the lower-endpoint parameter ∈ ( - ∞, ∞ ) b is the upper-endpoint parameter( b > a ) α 1 is the 1 st shape parameter ( 0, ∞ ) α 2 is the 2 nd shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( a , b ) mean = a + α 1 ( b − a ) ⁄ ( α 1 + α 2 ) variance = α 1 α 2 ( b − a )² ⁄ ( α 1 + α 2 )²( α 1 + α 2 + 1) Probability Density Functions: Possible Applications: The beta distribution is often used to model task durations in the absence of real data because it can be definitively bounded between a minimum and maximum value, and it can take on a number of different probability density shapes depending on the two shape parameters used. For most real world task durations, the density shape will have a longer right tail than a left, so if you know the mean μ and the mode (most likely value) m , you can back calculate suitable shape parameters with the following equations: α 1 ≅ ( μ − a )(2 m − a − b ) ⁄ ( m − μ )( b − a ) α 2 ≅ α 1 ( b − μ ) ⁄ ( μ − a ) Comments: The beta( a , b , 1, 1) and uniform( a , b ) distributions are the same. The density is symmetric about ( a + b ) ⁄ 2 when α 1 = α 2 . The density will have a hump and longer right tail when α 2 > α 1 > 1. The mean and mode are equal when α 1 = α 2 > 1. Example double ptime = beta(8, 12, 1.3, 3, 5); The ptime variable is set equal to a beta distribution having a minimum value of 8, a maximum value of 12, and shape factors of 1.3 and 3 for α 1 and α 2 respectively. FlexSim's random stream number 5 will be used to generate variates from the distribution. The distribution density will have a nice humped curve with a long right tail. bindtexture (num textureid) Description This function is used in an OpenGL call sequence. When OpenGL commands are being used to draw a scene, this command will bind the texture loaded into FlexSim with the index textureid. Once bound, a texture will be used to render any polygons drawn subsequently. Texture mapping is the application (or mapping) of an image (or texture) to the surface of a polygon or other graphics primitive. Example bindtexture(10) Use loaded texture with index number 10 for rendering any subsequent polygons binomial (num trials, num prob[, num stream]) Returns a random sample from a binomial distribution Description binomial( t , p , stream ) is a discrete probability distribution used to represent the number of successes in t independent Bernoulli trials with probability p of sucess on each trial. Inputs: t is the number of independent trials { 1, 2, ..., ∞ }. p is the probability of success for any given trial (0, 100) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { 0, 1, 2, ..., t } mean = t p ⁄ 100 variance = t ( p ⁄ 100 )( 1 − p ⁄ 100 ) Possible Applications: The binomial distribution is useful for modeling the number of defective parts in a batch of size t , or the actual number of people in random size groups, or maybe the number of items ordered from inventory. Comments: The binomial(1, p ) and bernoulli( p , 1, 0 ) distributions are the same. The binomial( t , p ) distribution is symmetric when p = 50 percent. Example int fparts = binomial(item.batchsize, 10, 5); The number of failed parts will be written to the fparts variable based on a 10% probability that any given part will fail within a batch quantity defined by a label on the flowitem named \"batchsize\". FlexSim's random stream number 5 will be used to generate variates from the distribution. bitwiseand (num a, num b) Deprecated, use & operator Description This command is deprecated. Use & operator instead. Returns a bitwise AND operation on the two 32 bit integer values. Example int bwa = bitwiseand(0x460, 0x040); This example sets bwa to the value 0x020. bitwisenot (num a) Deprecated, use ~ operator Description This command is deprecated. Use ~ operator instead. Returns the bitwise not of the 32 bit integer value Example int bwn = bitwisenot(0x0); This example sets bwn to the value 0xffffffff bitwiseor (num a, num b) Deprecated, use | operator Description This command is deprecated. Use | operator instead. Returns the bitwise OR of the 32 bit integer values Example int bwo = bitwiseor(0x15, 0x01); This example sets bwo to the value 0x15 bitwisexor (num a, num b) Deprecated, use ^ operator Description This command is deprecated. Use ^ operator instead. Returns the bitwise XOR of the 32 bit integer values Example int bwxo = bitwisexor(0x15, 0x01); This example sets bwxo to the value 0x14 break Description Break out of a loop or the case of a switch statement {} Example break; buildall () Description For developer use. This command builds Flexscript trees for all of the nodes in the tree that are designated as Flexscript nodes. A Flexscript node must have a Flexscript tree made before it can run. This option is available in the main menu under Build -> Build All Flexscript. This must be done before running a model with Flexscript written anywhere in it. It should also be done after making any changes to GUIs. Example buildall(); This builds Flexscript trees for all Flexscript nodes in the tree. buildnodeflexscript (node codenode) Description For developer use. This command builds Flexscript trees for the node specified as node if it is designated as a Flexscript node. A Flexscript node must have a Flexscript tree made before it can run. Example buildnodeflexscript(Table(\"mytable\").cell(1,2)); This builds a Flexscript tree for the node at row 1 column 2 of the GlobalTable named \"mytable\", if it is a Flexscript node. c <no parentheses> Description This command is used to reference the active node during a function's execution. If the function was called using nodefunction(), c returns a reference to the node on which the function is written. If the function is an event function, c returns a reference to the object that contains the event. Example treenode current = ownerobject(c); calculateconfidence (num stddev, num nrofdatapoints, num confidence) Description For developer use. Calculates the confidence interval for the given standard deviation and number of data points. The return value is the distance on one side of the interval from the sample mean. This uses the t distribution to calculate the confidence interval. Confidence values must be either 90, 95, or 99. This is used in the experimenter to calculate the confidence intervals for the mean of performance measures for each scenario. Example calculateconfidence(5.82, nrofsamples, 90) callwebscriptmethod (obj view, str domid, str methodname, int type [, num/str data ...]) Description Call a method on a DOM element in the HTML document of an HTML view. You must define the type of data of any parameters that are to be passed into the method. The following types are available: CWSM_DOUBLE CWSM_STRING CWSM_NODE CWSM_BUNDLE CWSM_BUNDLE_HEADER CWSM_BUNDLE_DATA CWSM_JSON The last parameter passed into the method must be CWSM_END. When using the CWSM_JSON type, the json string must start with json:. For example, json:{\"title\":\"My Title\"} Example callwebscriptmethod(view, \"chart\", \"updateData\", CWSM_DOUBLE, time(), CWSM_NODE, getvarnode(current, \"data\"), CWSM_STRING, \"My Title\", CWSM_END); This examples calls the method named updateData on the element with id \"chart\". case value: Description One case in a switch statement {} Example case 5: { msg(\"case statement\",\"\"); } cauchy (num location, num scale[, num stream]) Returns a random sample from a cauchy distribution Description Generates a continuous random variate from a cauchy distribution with parameters as defined. Example cdir () Description Returns a string of the path to FlexSim's install directory. Example string userpath = cdir(); For a standard installation this will return C:\\Program Files\\Flexsim3\\ ceil (num num) Deprecated, use Math.ceil() Description This command is deprecated. Use Math . ceil () instead. Gets the smallest integral value not less than num. Example cell (node table, num col, num row) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Example cellrc (obj object, num row, num col) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Gets a reference to the table's cell. Example double val = getnodenum(cellrc(reftable(\"MyTable\"),2,3)); cellrowcolumn (node table, num row, num col) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example cempirical (str/node/num table[, num stream]) Returns a random sample from a continuous empirical distribution Description A continuous empirical distribution with percentages and values defined in the table specified. Empirical distributions reference tables created by the user that contain a list of values and probability percentages associated with each value. Probability percentages must be entered in column 1 starting with row 1 of the table, and the associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. There are three commands in FlexSim that can be used to generate random variates from the empirical distributions defined in tables. The three commands are dempirical(), empirical() and cempirical(). The first one is a discrete distribution and will return the explicit values listed in the table. The next two are bounded continuous distributions, meaning they return a continous number within a range. The values in column 2 for the continuous distributions must be in ascending order because they will interpolate values between two adjacent values in the table. Let's assume we have a table with 4 rows and 2 columns. In column one are the percentages 10, 20, 30 and 40 adding up to 100 percent. In column two are the values 0.1, 0.2, 0.3 and 0.4. Now let's see the differences between the discrete empirical command and the two continuous empirical commands. The discrete command will only generate random variates that match exactly the values that were entered into column two of the table. The continuous commands will generate random variates that are real numbers uniformly distributed between two adjacent numbers in column two of the table. The difference between the two continuous commands is in how the bounds of the uniform ranges are defined. The command dempirical(\"mytable\") will return the number 0.1 for ten percent of the samples, the number 0.2 for twenty percent of the samples, the number 0.3 for thirty percent of the samples, and the number 0.4 for forty percent of the samples assuming a very large sample set. The command empirical(\"mytable\") will return a number uniformly distributed between 0.1 and 0.2 for ten percent of the samples, a number uniformly distributed between 0.2 and 0.3 for twenty percent of the samples, a number uniformly distributed between 0.3 and 0.4 for thirty percent of the samples and a number uniformly distributed between 0.4 and 0.4 for forty percent of the samples. If you want the last forty percent to be between 0.4 and 0.5 instead of 0.4, add a 5th row with column one being a value of 0 and column two being 0.5 or the desired upper bound. The command cempirical(\"mytable\") will return a number uniformly distributed between 0.0 and 0.1 for ten percent of the samples, a number uniformly distributed between 0.1 and 0.2 for twenty percent of the samples, a number uniformly distributed between 0.2 and 0.3 for thirty percent of the samples and a number uniformly distributed between 0.3 and 0.4 for forty percent of the samples. You can define a lower bound for the first ten percent to be a value different than 0.0 by adding a row to the beginning of the table (row 1) where column one is a value of 0 and column two is 0.05 or the desired lower bound. Here is a summary in tabular form showing the possible return values (\"x\") for each of the three distribution functions: Here is an example of adding a \"dummy\" first row so that cempirical() starts at 0.05 instead of 0.0 (notice that row 1 has a probability of 0 percent): Here is an example of adding a \"dummy\" last row so that empirical() has a range between each value including the last (any number can be entered for the percent of the last row because the percents already add up to 100% with the previous row, so it doesn't matter what it is): When using ExpertFit to determine an empirical distribution that matches your data, you need to be aware that if your data has been defined as integers, then ExpertFit will fit it for use with dempirical(), and if your data has been defined as real numbers, ExpertFit will fit it for use with empirical(). When your data set is composed of real numbers, ExpertFit will show the same percentage for the last value as for the previous to last value, but you'll notice that the percents add up to 100% with the second to last entry. Example cempirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. cempirical(current.labels[\"ptime\"] 5); Returns a random variate from a continuous empirical distribution defined in a node table defined on a label named \"ptime\" of the current object, and using random number stream 5. centerobject (obj object, num centerportnum) Deprecated, use Object.centerObjects[] Description This command is deprecated. Use Object . centerObjects [] instead. Reference the object connected to an object's center port. Example changeconveyorspeed (obj conveyor, num newspeed ) Deprecated, use conveyor.targetSpeed Description This command is deprecated. Legacy conveyors are no longer supported. Use Conveyor . targetSpeed instead. Changes the speed of the conveyor to newspeed. Example changeconveyorspeed(current, 4); This example changes the conveyor's speed to 4. changedisplay (num width, num height, num depth, num fullscreen, num test) Change resolution Description Change resolution Example changedisplay(1024,768,0,0,0) changepersonvisuals (treenode person, string category, num/string index [, Array color]) Change the person's visuals (Head, Hair, Skin Texture, Clothes) Description Change the person's visuals (Head, Hair, Skin Texture, Clothes). This can be done dynamically during the model run. Example changepersonvisuals(person, \"Shirt\", \"Scrubs\", Color.red) changetask (obj tasksequence, num taskrank, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Dynamically change a task in tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. This command lets you change a task dynamically. For example, if you want an operator to travel to object B instead of traveling to object A, but a task has already been created for him to travel to object A, you can use this command to change the task. The first parameter (tasksequence) specifies the tasksequence containing the task. The second parameter (taskrank) specifies the rank of the task in the tasksequence. All other parameters are the same as for the inserttask command. This command should only be executed if the task is not the currently active task in the task sequence! Example changetask(gettasksequence(current, 0), 4, TASKTYPE_TRAVEL, current.centerObjects[5]); This example changes the fourth task in the current object's active task sequence to a travel task to travel to the object connected to the 5th center port of the current object. checkdllconnection (node dllnode, num force) Returns 1 if the node is properly connected with a dll function Description Returns 1 if the node is properly connected with a dll function. Otherwise returns 0. If force is 1, then if the node is not connected, it will attempt to bind it to a dll function, and will return 1 if successful, 0 if not. The node must be toggled as DLL and have proper data specifying the path to the dll and the function name. Example if(!checkdllconnection(getvarnode(current, \"exittrigger\"), 1)) msg(\"DLL Error\",\"Error connecting to dll.\") This will attempt to connect and object's exit trigger node with a dll function, and will print a message if it is unsuccessful. checkforexistingview (obj view [, num mode]) Description For developer use. Checks to see if there are any currently active windows that match this window. Compares the beginning of each name of each window in the active view node with the beginning of the name of the specified view. Along with comparing the beginning of the names, this compares each objectfocus as well. If mode is specified and is not 0, it will compare the viewfocus instead of the objectfocus. Example checkforexistingview(c) classobject (obj object) Returns the class object of an instance Description Returns the class object of an instance. Example if(classobject(current) == library().find(\"?Processor\")) { pt(\"Processor1 is an instance of the Processor class.\");pr(); } This prints a message to the output console if current is a Processor. cleannodeflexscript (node startnode) Description For developer use. This command recursively deletes Flexscript trees starting at the node specified. Example cleannodeflexscript(model()); This cleans all the Flexscript nodes in the model. clearbundle (node datanode[, num resetflags = 0]) Clears all bundle data Description Clears the bundle data associated with datanode. This will clear all entries as well as all fields in the bundle. resetflags is a bitwise mask for flags to initialize the bundle by. Valid values are: BUNDLE_FLAG_UNPAGED = 0x1 - The bundle's entries will be stored in an unpaged, contiguous block of memory. BUNDLE_FLAG_IR_OPT = 0x10 - The bundle will use additional memory (32 bits per row) to improve insert/remove performance for rows in the middle of the bundle. Example clearbundle(x); clearconsole () Clears the output console Description This command clears the output console if it is open. The output console is where output from the pt(), pf(), and pr() commands is printed. Example if (v_printerror == 1) { clearconsole(); pt(\"An Error occurred\"); } This clears the output console and prints a simple error message to it if the variable called printerror is equal to 1. clearcontents (node thenode) Deprecated, use treenode.subnodes.clear() Description This command is deprecated. Use treenode . subnodes .clear() instead. Destroys all of the objects/nodes under the node. Example clearfullhistory (int resetuniqueid) Deprecated Description This command is deprecated. Deletes all of the data that has been collected by the Full History system. If resetuniqueid is 1, then the unique IDs of the flowitems that are created after this command is called will being again at 1. Typically, this parameter should be 0, as that will continue numbering so that old flowitems are not confused with new flowitems. Example clearfullhistory(0); clearglobaltable (str/node/num table) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example clearundohistory ([obj view]) Description Deletes all undo records in the undohistory of the specified view. If no view is specified, it will clear the global undo history used by the 3D and tree windows. Example clearundohistory(view); clickcode () Description For developer use. Returns the type of click in a view. Used in the OnClick event. DOUBLE_CLICK returns 1 LEFT_PRESS returns 2 LEFT_RELEASE returns 3 RIGHT_PRESS returns 4 RIGHT_RELEASE returns 5 Example if(clickcode()==2) { pt(\"Clicked!!\");pr(); } This prints the statement \"Clicked!!\" to the output console when the left mouse button is pressed. clientclose (num socket) Closes the client socket Description This command closes the client socket specified as socket. It must be called sometime after clientcreate(). Once a socket is closed, nothing can read from it or write to it. The socket number may be reused again by a later call to clientcreate(). This function returns true if the socket closes correctly. Example clientclose(1); clientconnect (num socket, str hostname, num port) Attempts to connect the client socket Description This command attempts to connect the socket specified by socket to a server running on the machine called hostname, which is listening on the port specified. The number passed as socket is the number that was previously returned by clientcreate(). The string passed as hostname can be either the computer's name (if it is on the same network as the client) or its IP address. This command should not be called until after a successful call to clientcreate() is made. If the socket does not connect, then it is closed and clientcreate() will have to be called again to reopen it. This functions returns true if the socket connects successfully. Example clientconnect(1,\"localhost\",1880); clientcreate () Creates a new client socket with TCP/IP protocol Description This command creates a new client socket that is set to communicate using the TCP/IP protocol. FlexSim can create up to fifty client sockets at one time. Each client can be connected to a different server. This function returns a number that must be stored by the model to reference the socket that was created. If an error occurs, this function returns 0. Example int socknum = clientcreate(); clientreceive (num socket, str buffer, num buffersize, num noblock[1/0]) Receives data sent to the socket Description This command receives data that has been sent to the socket specified as socket. The value of socket is the number that is returned by clientcreate(). This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = clientreceive(1,Buf,15,0); flexscript: string readstr = clientreceive(1, NULL, 15, 0); clientsend (num socket, str message[, num charlength]) Sends a message across the socket Description This command sends a message across the socket specified as socket. The value passed as socket is the number returned by clientcreate(). The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example clientsend(1,\"REQ:service\"); closeallip (obj object) Close all input ports of object Description Close all input ports of object. Closing all input ports of an object will block entry to the object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeallip(current) closeallop (obj object) Close all output ports of object Description Close all output ports of object. Closing all output ports of an object will block the exit of that object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeallop(current) closeinput (obj object) Deprecated, use Object.input.close() Description This command is deprecated. Use Object . input .close() instead. This command blocks the input of the object. Only the input ports themselves, or the input in general needs to be closed to block entry. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the input ports (squares) for the object, signifying the input ports are blocked. Individual ports may still be open and drawn in green, but entry to the object is still blocked because of the red bar. Compare this command with stopinput(). Example if (current.subnodes.length == getvarnum(current,\"maxcontent\") closeinput(current); This blocks the input ports of current when it has too many objects inside it. closeip (obj object, num inputportnum) Close one input port of object Description Close just inputportnum of object. Closing an input port of an object will block entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeip(current,1) closenodeedge (obj object, num edgenum) Closes entry to the networknode's edge Description Closes entry to the networknode's specified edge number. The edge's color will turn orange indicating it is closed. Open or close status of an edge will only be checked by a traveler when traveling from one node to the next (not when entering a node from an offset) Example closenodeedge(current.centerObjects[1], 3); closeop (obj object, num outputportnum) Close one output port of object Description Close just outputportnum of object. Closing an output port of an object will block the exit from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeop(current,1) closeoutput (obj object) Deprecated, use Object.output.close() Description This command is deprecated. Use Object . output .close() instead. This command blocks the output of the object. Only the output ports themselves, or the output in general needs to be closed to block the exit. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the output ports (squares) for the object, signifying the output ports are blocked. Individual ports may still be open and drawn in green, but exit from the object is still blocked because of the red bar. Compare this command with stopoutput(). Example if (current.subnodes.length == current.mincontent) closeoutput(current); This blocks the output ports of current, if current has too few objects inside it. closeview (node viewnode) Description For developer use. This command closes the view specified as viewnode. If viewnode is not a viewwindow or GUI, this command does nothing. The view is not removed from the active views folder, however. Use destroyobject() to remove it. Example treenode activewindows = views().find(\"active\"); while (activewindows.subnodes.length != 0) { closeview(activewindows.first); } This closes all of the windows that are in the active node of the views tree. This will generally close all of the windows that are currently open. cm (num centimeters) Gets the number of meters in the number of centimeters Description Returns the number of meters in the specified number of centimeters. Example cm(3) cmdcompile () Description For developer use. Compile the project. Example cmdcompile() cmddelete (node thenode) Description For developer use. Use destroyobject(). Delete thenode. Example cmddelete(model().subnodes[4])) cmdexit () Description For developer use. Closes FlexSim. Example cmdexit() cmdloadbyextension (str filename, num silent) Description For developer use. Load a file by name and extension. Recognizes: Project (fsp), Session (fss), Model (fsm), View Layout (fsv). If silent is 0, the user will be asked to confirm that they are opening the correct file. Example cmdloadbyextension(\"c:/mysession.fss\",0) cmdloadsession (str filename) Description For developer use. Load a session by name. Example cmdloadsession(\"c:/mysession.fss\") cmdloadtree (obj desttree, str filename [, num nobuild]) Description For developer use. Load a tree by file path into desttree. By default, after loading, all flexscript will be built. If nobuild is 1, flexscript will not be built. Set nobuild to 1 if you are executing this command from a script node that is toggled as flexscript, or else your script will not finish properly. Example cmdloadtree(node(\"MAIN:/project/model/2\"),\"c:/mytree.t\")) cmdnew () Description For developer use. Start a new model. This command will clear the contents of the model by deleting all objects in the model. Example cmdnew() cmdopen () Description For developer use. Open a new model. This command will cause an Open Model Dialog box to appear from which a model file can be selected for opening. Example cmdopen() cmdsaveas () Description For developer use. Save the model. This command will cause an SaveAs Model Dialog box to appear from which a model file name can be specified for saving. Example cmdsaveas() cmdsavesession (str filename) Description For developer use. Save a session by name. Example cmdsavesession(\"c:/mysession.fss\") cmdsavetree (obj tree, str filename) Save a Tree by name Description Save a Tree by name Example cmdsavetree(node(\"MAIN:/project/library/1\"),\"c:\\\\mytree.t\")) codetotemplate (obj code, obj edit) Description For developer use. Converts C++/Flexscript code into template code and sets the view text of edit to the template code. The code parameter should reference a node that contains text with C++/Flexscript code on it. This is used in a picklist's template code drop-down to create template code from the actual C++/Flexscript code. Example codetotemplate(so(),sv()) codetotemplatetext (node codeobject, node toobjecttext [, num firstcommentonly]) Description For developer use. Converts C++/Flexscript code into template code. Sets the text in toobjecttext to the template code of the code found in codeobject's text Example coloraqua (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . aqua instead. Sets the color of object to aqua. Example colorarray (obj object, num colornumber) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . byNumber () instead. Sets the color of object based on a color index. Example colorblack (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . black instead. Sets an object's color to black. Example colorblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . blue instead. Sets the color of object to blue. Example colorbrown (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . brown instead. Sets the color of object to brown. Example colorgray (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . gray instead. Sets the color of object to gray. Example colorgreen (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . green instead. Sets the color of object to green. Example colorlightblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lightBlue instead. Sets the color of object to lightblue. Example colorlime (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lime instead. Sets the color of object to lime. Example colororange (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . orange instead. Sets the color of object to orange. Example colorpink (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . pink instead. Sets the color of object to pink. Example colorpurple (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . purple instead. Sets the color of object to purple. Example colorrandom (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . random () instead. Sets the color of object to a random color. Example colorred (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . red instead. Sets the color of object to red. Example colorrgb (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the color of an object using red, green and blue components. Example colorsilver (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . silver instead. Sets the color of object to silver. Example colorteal (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . teal instead. Sets the color of object to teal. Example colorwhite (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . white instead. Sets the color of object to white. Example coloryellow (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . yellow instead. Sets the color of object to yellow. Example combocurrentnode (obj combonode) Description For developer use. Returns the current node of the specified picklist combobox. Example createview( \"VIEW:/standardviews/picklisttemplate\",\"\", combocurrentnode(c.find(\"../pickoptions\").getPath(0, 1) ); comborefresh (obj combonode) Description For developer use. Refreshes a picklist combobox contents. Example comborefresh(current); commandlineparam (str param) Description Returns the specified commandline parameter that was passed in if FlexSim is being run from the commandline. Example commandlineparam(\"nrofops\"); This example will return the \"nrofops\" commandline parameter. If a batch opens FlexSim with the line: flexsim.exe myfile.fsm -nrofops 8 Then within FlexSim, commandlineparam(\"nrofops\") will return \"8\". You can use either the unix-style hyphen (-) or the windows-style forward slash (/) to define a command-line parameter comparetext (str text1, str text2[, int ignorecase]) Deprecated, use == operator Description This command is deprecated. Use the == operator instead. myStr == \"Hello\" Test for string equality. Example comparetrees (obj tree1, obj tree2) Description For developer use. Test trees for equality. Example comparetrees(node(\"MAIN:/project/model/1\"),node(\"MAIN:/project/model/2\")) concat (str text1, str text2 [, str text3, ...]) Deprecated, use + operator Description This command is deprecated. Use the + operator instead. \"a\" + \"b\" + \"c\" Concatenates strings together. Example connect (obj object1, num port1, obj object2, num port2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect ports of two objects. The two objects are connected by checking whether the ports exist on the objects in question and then connecting them. The output port of the first object will be connected to the input of the second object. If the ports do not exist, or are already connected then the command will abort. To connect two objects by automatically adding ports, see the command objectconnect(). Example connect(model().subnodes[2],1,model().subnodes[3],2) consoleexecutefs (HWND input, HWND output) Description For developer use. Execute the console code as Flexscript. Example containerentry (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example containerexit (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example content (node parent) Deprecated, use treenode.subnodes.length Description This command is deprecated. Use treenode . subnodes .length instead. Gets the number of child nodes in a parent node. Example contentobj (obj container) Deprected, use Object.attrs.length Description This command is deprecated. Use Object . attrs .length instead. Gets the content of the object's attribute sub-tree. Example contentunder (node thenode [, num objectsonly) Description This command returns the number of nodes in the tree that are inside the node specified as thenode plus the number of nodes that may be contained in any sub-trees that begin at that layer. If thenode does not contain any other nodes, this command returns 0. If objectsonly is not specified or 0, any node in the FlexSim tree can be passed as thenode. If objectsonly is not 0, any node passed in as thenode that isn't an object will return 0. Example if (contentunder(current) >= getvarnum(current,\"maxcontent\")) { current.input.close; } This closes the inputs of current if the number of objects contained under current is greater than or equal to the variable called maxcontent of the object referenced by thisobjectdata. contextdragconnection (obj fromobject, obj toobject, str/num characterpressed) Creates an A or S connection between objects Description This command mimicks holding the specified letter down on the keyboard, clicking on the fromobject and then dragging to the toobject with the mouse. Whatever context sensitive action takes place when using the actual keyboard and mouse combinations, will occur when this command is executed. This command can be used in both Flexscript and C++. Example contextdragconnection(model().subnodes[5], model().subnodes3], \"A\"); continue Description Continues immediately to the next iteration of a for or while loop without executing any of the remaining code in the current loop. Example if(thisloopnotneeded) continue; continueaggregatedundo (obj view) Description Continues the previously-finished aggregated undo record for the specified view. This is used if some other logic created and finished an aggregated undo, but you want it to append any subsequent changes onto the previously finished undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = continueaggregatedundo(c.find(\"@/TheTable\")); controlpressed () Description For devloper use. Test if CTRL key is pressed Example controlpressed() convert (var value, var from, var to) Converts the given value (a time) from one time format to another Description Converts the given value (a time) from one format to another. The from and to arguments only accept the following values: FS_DATETIME XL_DATETIME MODEL_TIME DATE_STR TIME_STR DATETIME_STR FS_DATETIME - the number of seconds since Jan 1, 1601. getmodelunit(START_TIME) returns a value in FS_DATETIME units. XL_DATETIME - the serialized day number, where day 1 is Jan 1, 1900. Feb 10, 2025 1:30 PM is 45698.5625 in XL_DATETIME units. This format is used in Microsoft Excel for dates. MODEL_TIME - the number of model units since the model start time DATE_STR - a string representing the date portion of a datetime value. The resulting text will depend on the date format specified in the model settings. If converting from this format, the value must be formatted according to those settings. TIME_STR - a string representing the time portion of a datetime value. The resulting text will depend on the time format specified in the model settings. If converting from this format, the value must be formatted according to those settings. DATETIME_STR - a string representing the time and date of a datetime value. The resulting text will depend on the time and date formats specified in the model settings. If converting from this format, the value must be formatted according to those settings; the time portion must be first, separated from the date portion by a single space. Note that year 3000 and beyond are not supported by this command. Example convert(42308, XL_DATETIME, MODEL_TIME) // converts an Excel date to a valid model time conveyorgetmotor (obj conveyor) Description Deprecated, use Conveyor class. Example conveyorgetmotor(conveyor); conveyorinfo (obj conveyor, num info[, p1, p2, p3, p4, p5]) Description Deprecated, use Conveyor class. Example conveyorinfo(conveyor, CONV_INFO_ESTIMATE_CONVEY_TIME); conveyorresumeitem (obj item[, num force]) Description Deprecated, use Conveyor class. Example conveyorresumeitem(item); conveyorsenditem (obj item, obj dest) Description Deprecated, use Conveyor class. Example conveyorsenditem(item, outobject(current, 1)); conveyorsetspeed (obj conveyor, num toSpeed) Description Deprecated, use Conveyor class. Example conveyorsetspeed(conveyor, 1); conveyorstopitem (obj item) Description Deprecated, use Conveyor class. Example conveyorstopitem(item); copyattributes (obj destination, obj source, num mask) Description For developer use. Copy the attributes from one object to another. Use mask parameter to enable specific groups (from least significant): ATTCOPY_ALL ATTCOPY_SPATIAL ATTCOPY_OFFSETS ATTCOPY_VISUAL ATTCOPY_MEDIA ATTCOPY_LABELS ATTCOPY_VARIABLES ATTCOPY_DESCRIPTIVE ATTCOPY_TABLES Use the OR operator (|) to combine these values into a single value for the mask parameter. Example copyattributes(library().subnodes[1],model().subnodes[1],ATTCOPY_SPATIAL | ATTCOPY_VISUAL) copycolor (obj highlightedobj) Description For developer use. Copies the color of the highlighted object to all of the selected objects Example copycolor(current) copylabel (obj highlightedobject, str/obj labelnamenode) Description For developer use. Copies the label with the name specified by parameter 2 or stored on the string data of the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copylabel(selectedobject(ownerview(c)), c.find(\">labelname\")) copylabels (obj highlightedobj[, num mode]) Description For developer use. Copies all labels from the parameter 1 object to all selected objects in the model. By default it clears out all existing labels and replaces them with the labels on the parameter 1 object. If mode is 1, existing labels will be overwritten by any incoming labels with the same name, but will otherwise be left alone. If mode is 2, only labels that the selected objects do not already have will be copied. Example copylabels(selectedobject(ownerview(c)), c.find(\">labelname\")) copyvariable (obj fromobject, obj variablenamenode) Description For developer use. Copies the variable with the name held by the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copyvariable(selectedobject(ownerview(c)), c.find(\">variablename\")) copyvariables (obj fromobject) Description For developer use. Copies all variables from the parameter 1 object to all selected objects in the model. Example copyvariables(selectedobject(ownerview(c))) copyvisuals (obj highlightedobj [, num copyshapefactorsalso]) Description For developer use. Copies all visuals from the parameter 1 object to all selected objects in the model. Example copyvisuals(selectedobject(ownerview(c)),1) cos (num angle) Deprecated, use Math.cos(). Description This command is deprecated. Use Math . cos () instead. Gets the cos of an angle in radians. Example count () Description The value of the iterator used with several commands such as repeat(), findmatch(), findmin(), and findmax(). The value of count will depend on which iteration is currently being executed. Example findmax(Table(\"MyTable\").numRows, Table(\"MyTable\")[count][5]) This example returns the maximum value found in column 5, among all the rows of the table MyTable. cp (obj/str object_or_name) Description Returns a reference to an AGV control point Example cp(\"CP547\"); cpaddlistener (obj rootObj, str connectionPath, node listenerNode, num flags[, ...]) Description Adds a listener to events on one or more control points Example cpaddlistener(current, \"Location > LoadPoints\", c, CP_LISTEN_EXIT | CP_LISTEN_AVAILABLE); cpallocate (obj controlPoint, obj allocator, num force) Description Allocates a control point to the claiming object. If successful, a reference to a coupling node representing the allocation will be returned. Example cpallocate(controlPoint, current, 1); cpconnection (obj controlpoint/object, num/str connection, num rank) Description Returns a control point connection. Also, if connection is a string and controlpoint and rank are both 0, then this command will return the index of the given connection. This is for speed, so that you can subsequently use a number for the connection. Example cpconnection(cp, \"ForwardTo\", 1) Returns the first ForwardTo connection on cp cpconnection(cp, \"LookForWork>NextLookForWork\", 1) Traverses two connections to find an object. This is the same as cpconnection(cpconnection(cp, \"LookForWork\", 1), \"NextLookForWork\", 1) cpconnection(cp, \"LookForWork:2>NextLookForWork\", 1) Same as cpconnection(cpconnection(cp, \"LookForWork\", 2), \"NextLookForWork\", 1) int connIndex = cpconnection(0, \"LookForWork\", 0); treenode obj = cpconnection(cp, connRank, 1); Gets the index of the connection, and then uses the index instead of the name. cpcpno (obj object, num port) Description This command returns the center port number that is connected to the specified center port number of object. Example int otherport = cpcpno(current,1); This sets otherport to the number of the port that current's first center port is connected to. cpdeallocate (obj controlPoint, obj allocator) Description Deallocates a control point from the claiming object. If successful returns 1, otherwise 0. Example cpdeallocate(controlPoint, current); cpdistance (obj fromControlPoint, obj toControlPoint) Description Returns the agv network distance between two control points Example cpdistance(cp1, cp2) cpisavailable (obj controlpoint) Description Returns 1 if the given control point is available. byCriterion is not used right now, but is reserved for future use. Example if (cpisavailable(cp)) { ... } cpnumconnections (obj controlpoint, num/str connection) Description Returns the number of connections a control point has Example cpnumconnections(cp, \"ForwardTo\") cppgettoken (obj textblock, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example cppsettoken (obj textblock, num tokenindex, str insertiontext) Deprecated, do not use Description This command is deprecated. Do not use. Example cptasksequencequeue (obj controlpoint) Description Returns a reference to the task sequence queue associated with the control point Example treenode tsQueue = cptasksequencequeue(cp); createcoordinatedtasksequence (obj dispatcher) Create a new, empty coordinated task sequence Description Create a new, empty coordinated task sequence on the specified Dispatcher. Must be followed at some point by dispatchcoordinatedtasksequence. Example createcoordinatedtasksequence(current.centerObjects[1]); createcopy (node thenode, node container [, num samename, num inobject, num cached, num replace]) Copies thenode into the specified container Description This command is deprecated. Use treenode . copy () instead. Copy thenode into the node specified as container. This command is different from createinstance() in that it does not attempt to establish any links between thenode and any class. If an instantiation is required, use createinstance() instead. If samename is 1, the copy will have the same name as thenode. If samename is 0, the newly created node's name will be thenode's name with a random number added to the end. If inobject is 1, the copy will be created in the object data portion of the container. If the container does not have object data, the command does nothing. If cached is 1, a pre-cached version of the node will be copied. This is generally faster. If replace is 1, the copy will overwrite container, instead of being placed inside it. If those parameters are not specified, they default to 0. Example createcopy(Model.find(\"Tools/FlowItemBin/7/1\"), current) createcoupling (node container1, node container2) Creates a pointer coupling inside the two container nodes Description Creates a pointer coupling inside the two container nodes Example createcoupling(current.labels[\"items\"], item.labels[\"owner\"]); createdelaytask (obj dispatcher, num delaytime, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to pause its current task for delaytime seconds. During the time that it is delayed, it will be in the state specified by state. The task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createdelaytask(current.centerObjects[1], 25, SCHEDULED_DOWN, 1, PREEMPT_NOT); createemptytasksequence (obj dispatcher, num priority, num preempting) Creates a new task sequence in the dispatcher's queue and returns a reference to it Description This command is deprecated. Use TaskSequence.create() instead. Creates an empty task sequence in the dispatcher's tasksequence queue. Tasks should be added to this task sequence once it is created, using the inserttask command. The task sequence is dispatched with the dispatchtasksequence command. This command returns a pointer to the newly created tasksequence node. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createemptytasksequence(current.centerObjects[1], 1, PREEMPT_NOT); createevent (obj object, num time, num code[, str data, node involved]) Description For developer use. This command creates an event that will occur sometime in the future in the model's run. The event will be created for the object specified by object. It will occur time seconds from the time that this command is called. If an event needs to occur that the same simulation time that it was created at, time should be 0. When the event occurs, the OnTimerEvent event function of the class of object will be called. This function will be passed code, data, and involved. These values can be accessed in OnTimerEvent as eventcode, eventdata, and i. Generally, eventcode is used to determine what type of event is being created or executed. Eventdata is used as a description of the event for the user's benefit. It is generally not important to the execution of OnTimerEvent. Any objects that are involved in the event, such as a flowitem that is entering or exiting, are passed as involved and are referenced in OnTimerEvent as i. There are predefined values for code that the user should use listed below: 1 - EVENT_OPENINPUTS 2 - EVENT_OPENOUTPUTS 3 - EVENT_PROCESSFINISH 4 - EVENT_CREATEPART 5 - EVENT_DESTROYPRODUCT 6 - EVENT_CONVEYEND 7 - EVENT_BEGINLOADTIME 8 - EVENT_BEGINUNLOADTIME 9 - EVENT_ENDLOADTIME 10 - EVENT_ENDUNLOADTIME 11 - EVENT_ENDDELAYTIME 12 - EVENT_BEGINDOWNTIME 13 - EVENT_ENDDOWNTIME 14 - EVENT_ENDWAITTIME 15 - EVENT_MEETBATCHQTY 16 - EVENT_ENDTRAVELTIME 17 - EVENT_ENDSETUP If a user wishes to create their own types of events, they should use values for code that are greater than 100. See also eventcode and eventdata. Example if (current.subnodes.length >= current.mincontent) { createevent(current,5,EVENT_OPENOUTPUTS,\"openoutputs\",involved); } This creates an event that will occur in 5 simulation seconds that will open the output ports of the object specified as current, for the flowitem specified by involved, if the content of current is less than the label called mincontent of the object referenced by current. createglobaltasksequence (str name, obj dispatcher [, obj dp1, obj dp2, obj dp3, obj dp4, obj dp5]) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. Creates an instance of the named global task sequence with the given dynamic parameters 1-5 and dispatches it to the specified dispatcher. Returns a reference to the created global task sequence. Note that this does not dispatch the task sequence. You need to dispatch it yourself using dispatchtasksequence(). Example treenode ts = createglobaltasksequence(\"GlobalTS\", current.centerObjects[1]) dispatchtasksequence(ts) createinstance (obj class, obj location) Description This command is deprecated. Use Object . create () instead. For developer use. This command creates an instance of the class specified as class and places it in the object specified as location. The instance will be given a name that is the name of the class followed by a number. The instance will have all of the variables and attributes of class and it's superclasses. Nodes in the behavior node will not be copied into the instance, as they apply to all instances of the class. The object passed as class should be in the library. Generally, location is the model. The library and the model can be easily referenced using the library() and model() commands. Example createinstance(library().find(\"?Source\"), model()); This creates an instance of the Source class in the model. createloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to load flowitem. The object will not travel to the flowitem before loading it. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createpopup (str viewpath, str objectfocus, str viewfocus, obj relativeto, num x, num y, num sx, num sy) Creates a new popup window Description Similar to the createview command in that it creates a new window. However, FlexSim manages this window so that whenever the user clicks outside of the window, the window will be closed. Code template pop-ups use this command to create a drop-down in which you can edit the template code. The pop-up view must contain a style attribute with the WS_POPUP style. You also specify a view node \"relative to\" which the popup's location will be set (usually whatever view you're writing code on). Also specify an offset location in pixels from relativeto's top-left corner, and a size of the pop-up. Example treenode combobox = c.find(\"../pickoptions\"); createpopup( \"VIEW:/standardviews/picklisttemplate\", combobox.find(\">pickprimary+\").getPath(0,1), combocurrentnode(combobox).getPath(0,1), combobox, 0,20,combobox.location.x, 150 ); This code is similar to what is used to create the template code pop-up for many of FlexSim's edit fields. createsendmessagetask (obj taskexecuter, obj receiver, num priority, num preempting , num param1, num param2, num param3) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specifies as dispatcher that causes it to send a message to the object specified as receiver. The OnMessage trigger of the receiving object will be executed when the message is sent. The values passed as param1, param2, and param3 will be available in the trigger function using the param() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createsendmessagetask(current, current.centerObjects[1],1,PREEMPT_NOT,5, 6, 7); createstandardtask (obj taskexecuter, obj origin, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to origin, load flowitem, travel to destination and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createstandardtaskcurrent.centerObjects[1],current.centerObjects[2],current.centerObjects[3],item, 1, PREEMPT_NOT); createtickevent (obj fluidobject) Creates a tick event for fluidobject and all objects assigned to that Ticker Description Creates a Tick event for the Fluid Object that is passed in and all of the other Fluid Objects that are controlled by the same Ticker. This allows the user to cause fluid material to move at times that are not the Ticker's normal tick times. The user can also pass a specific Ticker as the parameter to this command. Example createtickevent(current); createtoken (obj instanceObject, obj/str activity, int start) Description Deprecated. Use Token . create . Example treenode token = createtoken(node(\"Operator1\", model()), \"Start\", 0); setlabel(token, \"type\", 1); releasetoken(token); createtravelloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and load flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createtraveltask (obj taskexecuter, obj destination, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination. It will travel until its front edge reaches destination. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltask( current.centerObjects[1], current.centerObjects[2], 1, PREEMPT_NOT); createtraveltolocandwaittask (obj taskexecuter, num relativeloc, num x, num y, num z, num endspeed, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. Once the object reaches that point, it will wait in the state specified as state until an endwaittask() command is issued to it. For a list of legal states, see setstate(). If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltolocandwaittask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, STATE_IDLE, 1, PREEMPT_NOT); createtraveltoloctask (obj dispatcher, num relativeloc, num x, num y, num z, num endspeed, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltoloctask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, 1, PREEMPT_NOT); createtravelunloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createundorecord (obj view, obj object, num undocode[, num p1, num p2, num p3]) Description Creates an undo record for the specified view. Returns the uniqueid for the created record. Undo codes: UNDO_AGGREGATED 1 UNDO_MOVE_SIZE_ROTATE 2 UNDO_MOVE_SIZE_ROTATE_GROUP 3 UNDO_SELECTION_CHANGE 4 UNDO_CREATE_OBJECT 5 UNDO_DELETE_OBJECT 6 UNDO_CHANGE_DATA 7 UNDO_CHANGE_RANK 8 UNDO_CHANGE_NAME 9 UNDO_MOVE_OBJECT 10 UNDO_DELETE_COUPLING 11 UNDO_AGGREGATED_FIRST_RECORD 12 UNDO_DESTROY_BRANCH 13 UNDO_CHANGE_FLAGS 14 UNDO_REPLACE_OBJECT 15 UNDO_CUSTOM 16 UNDO_CALLBACK 17 See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); createunloadtask (obj dispatcher, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to unload flowitem into the object specified by destination. The object will not travel to the location before unloading. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createuserlibrary () Description For developer use. This command creates a new user library Example createuserlibrary(); createview (str viewpath[, str objectfocus, str viewfocus]) Description For developer use. This command creates a new GUI window in the active node of the views tree. This window is a copy of the window whose path is given in viewpath. The window will have an object focus of objectfocus and a view focus of viewfocus. Objectfocus and viewfocus are generally the same for most GUI windows. They should be the path of the node that this GUI window is representing. Example createview(\"VIEW:/standardviews/other/FindReplace\",\"MAIN:/project/model/Tools/precision\",\"MAIN:/project/model/Tools/precision\"); This creates the Find Replace GUI. createwaittask (obj taskexecuter, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specified as dispatcher that causes the object to not perform new task sequences that it is given until it has been released. The object can be released with the endwaittask() command. The object will be in the state specified by state while it is waiting. For a list of possible states, see setstate() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createwaittask(current.centerObjects[1], STATE_IDLE, 1, PREEMPT_NOT); cubemap (int cmd, int FACEa, int FACEb, int FACEc, int FACEd, int FACEe, int FACEf) Attaches 2D images to vertices of a 3D model Description This command can be used to attach 2D images to vertices of a 3D model and the texture image is wallpapered onto the geometry of the 3D model. The six faces can be defined by FACEa, FACEb, FACEc, FACEd, FACEe, and FACEf. We can directly use the number of the reference texture after importing into media files. The parameter cmd will take the following values whenever writing OpenGL call sequences. 1- CUBEMAP_INIT : To initialises the texture if nothing defined earlier 2- CUBEMAP_BEGIN : Enables texture generation and begin map 3- CUBEMAP_END : Disable texture generation and end map 4- CUBEMAP_SHUT : Delete map Example cubemap(2, 39,39,39,39,39,39); current <no parentheses> Description This command is deprecated. This should not be used as a special command with the setcurrent command anymore. Instead, declare a treenode variable type as current, then use current in your code as any other variable type. Example treenode current = model().subnodes[3]; pt(current.name); This sets the object that is ranked 3 in the model to current and prints its name to the output console. currentfile () Gets the path to the currently open model Description Returns the path of the currently open model. Example currentfile(); cursorinfo (obj/num view, num operation, num x/y/z, num pos/move) Description For developer use. This command represents a lot of functionality wrapped up into one command. It is a way of getting information regarding the position/state of the mouse for a window control. view : the associated view, such as an ortho or planar view. This can also be an HWND (stored in a double). operation : the type of operation you want to do: 1 - gets x or y positions of the cursor in a planar view 2 - get orthographic or perspective view coordinates 3 - get current mouse button state. return value: 0 : no buttons down 1 : left down 2 : right down 3 : right and left down 4 : double left click 4 - update the cursor position 5 - gets x or y positions of the cursor relative to the view 6 - gets x or y positions of the cursor in screen coordinates 7 - sets the x or y position of the cursor xyz : 1(x), 2(y), or 3(z); not used for operation 3. For operation 4, if xyz=1, the cursor position will be updated with objects being drawing, if xyz=2 it will be updated with only the floor drawn. pos/move : 1(pos) or 2(move); 1 gets absolute mouse position, and 2 gets the change since last update. only used for operations 1-2. The best way to test this functionality out is just by trial and error. Add an OnMouseMove attribute to the ortho view (make sure you rebind the view's attributes after you've added it: Build|Rebind Object Attributes), then print information to the output console. Example cursorinfo(c,2,1,1) daemonstate (num thing) Description For developer use. Returns the stats of: 1 - clock 2 - flythrough 3 - ticker Example daemonstate(1) dataplot (obj tree, num type, num action, num x, num y, num z) Description For developer use. This command lets you create, reset or add data to a histogram, x/y chart, or a data series. The first three parameters define the associated node in the tree as well as the operation to do. The last three parameters, x,y and z, define the appropriate data for the operation. The first parameter should be the main node in the tree that holds the graph/histo data. The second parameter should be either 1, 2, or 3, and defines the type of data that the node holds. 1 means graphx data. For this data type the node contains a list of sub-nodes, and each sub-node contains a number that is a unique point in a data series. 2 means graphxy. For this data type, the node again contains a list of sub-nodes but this time the sub-nodes are paired together as x/y pairs. Nodes ranked 1 and 2 hold the x and y values for one data point, nodes 3 and 4 hold x and y values for the next data point, etc. A type parameter of 3 means histo data. Here the node holds data associated with a histogram. The action parameter should be either 1, 2, or 3, and defines the action that you want to do. 1 means a create operation. This is only needed for histogram type data, as it needs to set up the node's sub-tree structure. To create a histogram plot, pass the minimum value for the histogram as the x parameter, the maximum value of the histogram as the y value, and the number of divisions, or buckets, as the z parameter. An action parameter value of 2 means you want to reset the data. This will clear the content of the node for graphx or graphxy data, and will reset the histogram values for histogram data. An action parameter value of 3 means you want to add a data point. For graphx and histo data, pass the data point as the x parameter. For graphxy data, pass the as the x and y paramters. In summary: Type: 1-graphx/2-graphxy/3-histo. Action: 1-create (only needed for histo data)/2-reset/3-add point. Data: x,y are data points [histo create: x=start, y=end, z=nr of divisions]. Example dataplot(stats_contentgraph(model.find(\"Processor2\")),2,3,8.6,5,0); This adds a point to Processor2's content graph for time 8.6 and content 5. This example is only for demonstration purposes. You should never need to do this since the Processor automatically maintains its content graph. days (num days) Gets the number of model time units in the give number of days Description Return the number of model time units in the given number of days. Example days(1) Returns 86400 seconds. dbchangetable (str tablename) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbchangetable(\"Inventory\"); This closes the currently open table and opens a table called Inventory. dbclose () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (current.donegatheringdata == 1) dbclose(); If the label donegatheringdata on current is set to 1, the current database is closed. dbexportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Description This command is deprecated. Use Database.Connection instead. The starting row and column in the table are specified as well as how many rows and columns to export. Example dbexportnode(so(),1,1,4,5); dbexporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbexportnode(\"MyTable4\",2,2,3,3); dbgetfieldname (num column) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string ColName = dbgetfieldname(1); This sets ColName to the name of the first column in the current database. dbgetmetrics () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgetmetrics() dbgetmode () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (dbgetmode() != DBMODE_CLOSED) ColName = dbgetfieldname(1); If the database is open, ColName is set to the name of the first column in the database. dbgetnumcols () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumcols(); x++) Table(\"MyTable\")[1][x] = stringtonum(dbgettablecell(1,x)); This copies the values from a column in the database to a column in a GlobalTable. dbgetnumrows () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumrows(); x++) Table(\"MyTable\")[x][1] = stringtonum(dbgettablecell(x,1)); This copies the values from a row in the database to a row in a GlobalTable. dbgettablecell (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double tablevalue = stringtonum(dbgettablecell(1,1)); This sets tablevalue to the number that is stored in the first row and first column of the database. dbgettablenum (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double val = dbgettablenum(2,3); dbgettablestr (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string val = dbgettablenum(2,3); dbimportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(so(),1,1,4,5); dbimporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(\"MyTable4\",2,2,3,3); dbopen (str databasename, str command {SQL string or Tablename}, num usetable [, num showlogin]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbopen(\"itemdrive\",\"timetable\",1); This opens a database with the alias \"itemdrive\" and opens the table called \"timetable\" in Table mode. dbopen(\"warehouse\",\"select * from inventory\",0); This opens a database with the alias \"warehouse\" and performs a SQL query on it. The database is open in SQL mode. dbsettablecell (num row, num col, str value) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<= model().subnodes.length; x++) dbsettablecell(x,1,model().subnodes[x].name); This places the names of all of the objects in the model into the first column of the current database. dbsettablenum (num row, num col, num val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsettablenum(2,3,56.5); dbsettablestr (num row, num col, str val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgettablestr(1,1,\"John\"); dbsqlquery (str query[, num forwardOnlyCursor]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsqlquery(\"select processtime from timetable where type='1'\"); This returns a new table based on the SQL query passed. dbsqlquery(\"update timetable set processtime=type*2\"); This updates the database based on the query passed. dbusername (str username, str password) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbusername(\"user1\",\"abc123XYZ\"); This sets the username to \"user1\" and the password to \"abc123XYZ\". These values will be used to access a database the next time dbopen() is called. dbusername(\"\",\"\"); This clears out the last set username and password. The next time dbopen() is called, the database will be accessed without a username or password. dbviewtable () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbviewtable(); dbwritechanges () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbwritechanges() deactivatekinematics (node kinematicsnode) Causes kinematics to do nothing when updatekinematics() is called Description Causes kinematics to do nothing when updatekinematics() is subsequently called instead of updating the object. Call this in the reset trigger of an object to free the object to move it around in the ortho view. Example deactivatekinematics(current.labels[\"kinLabel\"]); debug ([num operation, num/obj p2, num/obj p3]) Acts like a breakpoint in Flexscript to start debugging Description For developer use. This command is used to control the Flexscript step debugger. Calling this command without any parameters will behave as if there is a breakpoint at that line of code. Operations: DEBUG_STOP 0 DEBUG_STEP 1 DEBUG_CONTINUE 2 DEBUG_IS_STOPPED 3 DEBUG_GET_LINE_NR 4 DEBUG_DUMP_VARIABLES 5 DEBUG_STOP_SIMULATION 6 DEBUG_REFRESH_BREAK_POINTS 7 DEBUG_ADD_BREAK_POINT 8 DEBUG_DELETE_BREAK_POINT 9 DEBUG_GET_WATCH_VARIABLE 10 DEBUG_ENABLE_CODE_PROFILING 11 DEBUG_PRINT_CODE_PROFILING_INFO 12 DEBUG_RESET_CODE_PROFILING 13 Example debug(); default : Description The default case in a switch statement {} Example default: { msg(\"case statement\",\"\"); } defaultdragconnection (obj fromobject, obj toobject, char characterpressed) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Either connects or disconnects ports between fromobject and toobject according to the specified characterpressed. This command mimics the keyboard and mouse combinations used to connect/disconnect object ports. For instance an 'A' would be as if the letter \"A\" were held down on the keyboard while click-dragging from the fromobject to the toobject. For 'A' and 'Q' it connects and disconnects output ports to input ports. For 'S' and 'W' it connects and disconnects central ports. Can only be used in C++, not flexscript. Example defaultdragconnection(model().subnodes[count], model().subnodes[2], 'A') degreestoradians (num degrees) Deprecated, use Math.radians() Description This command is deprecated. Use Math . radians () instead. Convert degrees to radians. Example delayednodefunction (node thenode, double timeDelay[, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode after a defined delay time. It works the same as the nodefunction() command, except it delays firing the node for the given delay time. Example delayednodefunction(current.myFunc, tonum(item)); delayevents (num value) Description For developer use. Delay all events in the eventlist. The times of all events in the eventlist will be incremented by value. Example delayevents(20) delayeventsofobject (obj object, num value) Description For developer use. Delay events of object. The timed events of object are incremented by value, and the eventlist re-sorted. Value may be positive or negative. Example delayeventsofobject(model().subnodes[2],20) deleteselected () Description For developer use. Deletes all selected objects in the model. Example deleteselected() deletetablecol (str/num/node table, num column) Deprecated, use Table.deleteCol() Description This command is deprecated. Use Table . deleteCol (). instead. Removes a column from a table. Example deletetablerow (str/num/node table, num row) Deprecated, use Table.deleteRow() Description This command is deprecated. Use Table . deleteRow () instead. Removes a row from a table. Example dellabel (obj object, str/num label) Deprecated, use treenode.labels[\"LabelName\"].destroy() Description This command is deprecated. Use treenode . labels [\"LableName\"]. destroy () instead. Deletes the specified label from the node called \"labels\" on the specified object. The specified label can either be the labelname as a string or the label's rank as a number. If the label does not exist in that node, this command does nothing. Example dellabel(current,\"MyLabel\") dempirical (str/node/num table[, num stream]) Returns a random sample from a discrete empirical distribution Description A discrete empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example int ptype = dempirical(\"prodtypes\", 5); Assigns a value to the ptype variable using a discrete empirical distribution defined in a global table named \"prodtypes\" using random number stream 5. dempirical(current.labels[\"route\"], 5); Returns a random variate from a discrete empirical distribution defined in a node table defined on the label named \"route\" of the current object, and using random number stream 5. deselectall () Description For developer use. Deselects all objects in the model. Example deselectall() destroyevent (node event) Description For developer use. Destroys a particular event from the event list. Example destroyevent(node(\"MAIN:/1/exec/events\").last) destroyeventsofobject (obj object [, num simtime, num code, str data, node involved]) Destroys events associated with object Description Destroys events associated with the given object. The first parameter, object, is the only required parameter. Other parameters are optional and provide a filter for choosing which events to destroy, as follows: time: If greater than or equal to the time that that the command is called, this parameter will filter events by their time. If the event's time is not equal to the time passed in, then the event will not be destroyed. Pass -1 if you don't want this as a filter. code: If greater than 0, this parameter filters events by their event code. If the event's code is not equal to the code passed in, the event will not be destroyed. data: If not NULL, this parameter filters events by the data string associated with the event. If the event's data string is not equal to the string passed in, the event will not be destroyed. involved: If not NULL, this parameter filters events by their involved node or object. If the event's involved node is not equal to the node passed in, the event will not be destroyed. Example destroyeventsofobject(model().subnodes[2]) destroymessageevents (obj object, num time, obj fromobj[, num param1, num param2, num param3]) Destroys message events associated with object Description Destroys message events associated with the given object. If no message parameters are included, all message events will be destroyed. Example destroymessageevents(current, time(), NULL, 8) destroyobject (node thenode) Deprecated, use treenode.destroy() Description This command is deprecated. Use treenode . destroy () instead. Destroys thenode. Example diffsign (num value1, num value2) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Example dispatchcoordinatedtasksequence (obj tasksequence) Dispatches the coordinated task sequence Description Dispatches the specified coordinated task sequence. Must be called after calling createcoordinatedtasksequence(). Example dispatchcoordinatedtasksequence(newts); dispatchtasksequence (obj tasksequence) Dispatches the task sequence, initiating handling/execution of the task sequence Description This command is deprecated. Use TaskSequence.dispatch() instead. Tells the dispatcher/taskexecuter in which the specified task sequence resides to handle that task sequence. Users should create the task sequence using the createemptytasksequence command, then add tasks using the inserttask command, then cause the task sequence to be handled using the dispatchtasksequence command. Example dispatchtasksequence(newtasksequence); distancetotravel (obj traveler, obj destination) Gets the distance a traveler would need to travel to reach destination Description Returns the distance that a traveler (Operator, Transporter, etc) would need to travel in order to reach the given destination. If the object is connected to a network, then it will return the travel distance along the network. Example distancetotravel(current.centerObjects[1], current); distcutoff (num radius) Sets a globally applied cutoff radius for object drawing Description Sets a globally applied cutoff radius (from the viewpoint) for object drawing. Example discutoff(10) distfromviewpoint (obj object, obj view) How far from the viewpoint object is in the window view Description Returns how far from the viewpoint the object specified as object is in the view window specified as view. This value is only meaningful if view is a reference to a Perspective window. Example double dist = distfromviewpoint(model().subnodes[2],sv()); This sets dist to the distance from the first object in the model to the viewer's eye. div (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use the / operator instead. Division of value1 by value2. If value2 is zero, the calculation is aborted and zero is returned. Example div(10,2) divide (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use / operator instead. This is an alias for div(). Example divide(10,2) documentsdir () Gets the full path to the currently active user's FlexSim Projects folder in My Documents Description Returns a full path to the currently active user's FlexSim Projects folder in My Documents Example documentsdir() documentusercommands () Description For developer use. Accesses the current model's command documenation and updates a file called usercommands.xml so that the user commands are included in the command documentation Example documentusercommands(); draginfo (num operation[, num val]) Gets or set values related to draggin the mouse Description Get or set values related to dragging the mouse. Operations: DRAG_INFO_DX 1 - gets dx DRAG_INFO_DY 2 - gets dy DRAG_INFO_DZ 3 - gets dz DRAG_INFO_MDX 4 - gets mdx DRAG_INFO_MDY 5 - gets mdy DRAG_INFO_BUTTON_STATE 6 - gets the button state DRAG_INFO_SET_DX 7 - sets dx to val DRAG_INFO_SET_DY 8 - sets dy to val DRAG_INFO_SET_DZ 9 - sets dz to val DRAG_INFO_SET_MDX 10 - sets mdx to val DRAG_INFO_SET_MDY 11 - sets mdy to val DRAG_INFO_SET_BUTTON_STATE 12 - sets the button state to val Example double dx = draginfo(DRAG_INFO_DX); draw3dtext (str text[, num asBitmap]) Draws text in a 3d view Description This command is similar to drawtext(), but can only be used in a 3D view, and its parameter set is stripped down to provide direct access to the text rendering procedure. Whereas drawtext() does some automatic scaling based on the current object, as well as some OpenGL state changes, etc., draw3dtext() calls the text drawing procedure directly, so any positioning, scaling, color settings, etc., should be done with OpenGL commands, i.e. glTranslated(), glScaled(), glColor3d(), etc. Example draw3dtext(current.name); drawbox (num x, num y, num z, num sx, num sy, num sz, num glbegin) Draws a simple box Description Draws a simple box. If glbegin is 1, then it will call glBegin before drawing. This command is a shortcut way to draw an OpenGL type cube that allows more control over lighting, coloring, and texturing than the drawcube() command. Example drawbox(5,0,0, 2,1,3, 1); drawcolumn (num x, num y, num z, num totalsides, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D column Description A very versatile command that can draw anything with multiple sides and a height such as a square, a pentagon, a pyramid, and even a cylinder (if the total number of sides is large). Draws a column with its origin (center of base) positioned at x, y, z. The column is then defined by the number of sides, a base radius, a top radius, and a height. The column can be rotated in degrees about each axis with rx, ry, rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the column from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the column. The location, size and rotation of the column are by default relative to the object it is drawn on. The parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcolumn(0,0,0, 5 ,4,2, 6 ,0,0,0, 175,175,175, .6, 3, 5,1); drawcube (num x, num y, num z, num sx, num sy, num sz, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D cube Description Draws a cube with its origin (bottom left corner) positioned at x, y, z. Its length, width, and height is defined by sx, sy, and sz respectively. It can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cube from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the cube. The location, size and rotation of the cube are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcube(0,0,0, 5,3,2, 0,0,0, 175,175,175, .6, 3, 1,1); drawcylinder (num x, num y, num z, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draws a 3D clyinder Description This command draws a hollow cylinder with its origin (center of base) positioned at x, y, z. The cylinder's dimensions are defined by a base radius, a top radius and a height. Use the drawdisk() command to cap off the ends of the cylinder. The cylinder can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cylinder from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing around the outside circumference of the cylinder. The location, size and rotation of the cylinder are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcylinder(0,0,0, 1,1, 5, 0,0,0, 175,175,175, .6,3); drawdisk (num x, num y, num z, num innerradius, num outerradius, num startangle, num sweepangle, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D disk Description Draws a flat planar disk with its origin (center of radius) positioned at x, y, z. The disk's dimensions are defined by an inner radius, an outer radius, a start angle, and a sweep angle. A sweep angle of 360 makes a complete circle. An innerradius greater than 0 will create a disk with a hole in the middle of it. The disk can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the disk from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing across the face of the disk. The location, size and rotation of the disk are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawdisk(0,0,0, .5,2, 90,270, 0,0,0, 175,175,175, 1,3); drawflattext (str text) Description This command can only be used in a 3D view. It draws a texture-mapped text string. This uses the same functionality that draws the names and stats below objects. If scaled correctly, it draws a very crisp, readable text. Use this in conjunction with setdrawnamefunction() to customize the data that is shown in the box below objects. Unlike drawtext(), this command's parameter set is much more stripped down, so you should use gl commands (i.e. fglTranslate(), fglScale(), fglColor(), etc.) to set up the location, size, and render settings before drawing the text. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object drawfont (num font) Specifies the font to be used with drawtext() Description Call before drawtext, to define font to be drawn. After drawtext is called, the font will be reset to default. There are currently 12 font types (numbers 0 through 11). Example drawfont(2) drawimage (obj view, str imagepath, num x, num y, num width, num height, num scaling) Draws an image Description Draws the image at imagepath in the view. The scaling value specifies how the image will be positioned and scaled. NO_SCALE (or 0): Draws the image at location x,y with the width and height being based on the size of the image. SCALE_DOWN: Draws the image centered in the rectangle created by x,y,width,height and scales the image proportionally down to fit if necessary. SCALE_UP_DOWN: Draws the image centered in the rectangle created by x,y,width, height and scales the image proportionally up or down to fit. SCALE_INDEPENDENT: Draws the image at x,y with the size of width and height. Example drawimage(c, \"buttons\\\\visible_eye.png\", 0, 10, 0, 0, 0); drawline (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar line Description This command draws a planar line with a starting point of xloc1, yloc1, zloc1, and an ending point of xloc2, yloc2, zloc2. The color is defined by the red, green, blue color components ranging from 0 to 1. Example fglDisable(GL_LIGHTING); drawline(view, 0, 0, 0, 2, 2, 2, 1, 0, 0); fglEnable(GL_LIGHTING); This example draws a line from point (0,0,0) to point (2,2,2). The line will be red in color. drawobject (obj view, num shapeindex, num textureindex[, num animation, treenode shapedata]) Draws a 3D shape Description Draws a 3d object with the specified shape and texture indices. Example drawtomodelscale(current); drawobject(view,getshapeindex(\"fs3d//texturebox.wrl\"),gettextureindex(\"flexsim.bmp\")); Set the drawing scale to that of the model, then draw the texturebox.wrl shape using flexsim.bmp as a texture. drawpie (obj view, num x, num y, num z, num x2, num y2, num z2, num startangle, num endangle, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a flat pie shape Description Draws a flat pie shape with its origin (center of radius) positioned at the midpoint between [x1,y1,z1] and [x2,y2,z2]. The angles are measured in degrees counterclockwise from the positive x axis. Negative angles are measured clockwise. The pie is filled from the start angle to the endangle counterclockwise. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawpie(view,3,3,0,0,0,0,45,90,0.5,0,0); drawquad (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num x4, num y4, num z4, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar quadrilateral Description This command draws a planar quadrilateral with vertices defined by x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, and z4. The color is defined by the red, green, blue color components ranging from 0 to 1. The resultant shape and lighting is dependent on the order or sequence in which the vertices are defined. If vertices are all in one plane, consider using drawrectangle() command. Example drawquad(view, 0, 0, 1, 0, 0, 0, 2, 2, 2, 4, 5, 6, 1, 0, 0); This example draws a quadrilateral with vertices defined by the following four points: (0,0,0), (1,0,0), (2,2,2), and (4,5,6). The quadrilateral will be red in color. drawrect (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar rectangle Description This command draws a planar rectangle with opposite corners defined by x1, y1, z1, and x2, y2, and z2. Both points must lie in a plane parallel to the xy plane. The color is defined by the red, green, blue color components ranging from 0 to 1. This command can be called in a planar, 3D, graph, or panel view. See also drawquad() Example drawrect(view, 0,0,.5, 1, 1, .5, 1, 0, 0); Draws a red rectangle with opposite corners (0,0,.5) and (1,1,.5). drawrectangle (num x, num y, num z, num length, num width, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draw a 3D rectangle Description Draws a flat planar rectangle with a user-defined location, length, width, rotation, and color. The drawquad() command must be used to draw a rectangle that is not parallel with the x, y or z plane. An optional opacity parameter will change the rectangle from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times across the face of the rectangular plane as texturing. The location, size and rotation of the rectangle are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawrectangle(0,0,0, 2,3, 0,0,0, 175,175,175, .6, 1, 2,3); drawshadow (num phase (1,2,3)) In OnDraw: draw shadow volume Description In OnDraw: draw shadow volume Example drawshadow(1); drawsphere (num x, num y, num z, num radius, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D sphere Description Draws a hollow sphere with its origin (center of sphere) positioned at x, y, z. The sphere's dimensions are defined by a single radius. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the sphere from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be wrapped over the surface of the sphere as a texture. The location, size and rotation of the sphere are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawsphere(0,0,0,5,175,175,175,1,3); drawspheres (obj object, obj view) Description For developer use. Draws the collision spheres assigned to the specified object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed Example drawspheres(current,view); drawtext (obj view, str text, num x, num y, num z [, num width, num height, num thickness, num rx, num ry, num rz, num red {0-1}, num green {0-1}, num blue {0-1} , num opacity {0-1}, num flags]) Draws text Description This command draws text at a location defined by x, y, and z. The width parameter is not used. The text width and height is determined by the height parameter. The rotation is defined by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 1. You can define the flags parameter as follows: 0x1 = bold, 0x2 = italic, 0x4 = underline. The flags parameter only applies to non-3d views The opacity if used should be a number ranging between 0 (full transparency) to 1 (opaque). Call drawfont() command to change font type before calling drawtext() if desired. This command can be used in a planar, 3D, graph or panel view. Example drawtext(view, \"Hello\", 0,0,0, 0,.3,.1, 90,0,0, 1,0,0, .8); This example draws \"Hello\" at location (0,0,0) with size 0.3, thickness 0.1, rotation (90,0,0), an rgb color (1,0,0), and opacity of 0.8. drawtomodelscale (obj object) Gets the current drawing scale of the model Description Returns the current drawing scale to that of the model after a previous call of drawtoobjectscale(). This is equivalent to the following OpenGL function: glScalef(1/object.location.x,1/object.location.y,1/object.location.z); Example drawtomodelscale(current); drawtoobjectscale (obj object) Scale subsequent draw commands to the size of the object Description This command causes all subsequent draw commands to be scaled according to the size of the object. This is equivalent to the following OpenGL function: glScalef(object.location.x,object.location.y,object.location.z); By default, the scale is originally set to that of the object. Example drawtoobjectscale(current); drawtriangle (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar triangle Description This command draws a planar triangle with vertices defined by xloc1, yloc1, zloc1, xloc2, yloc2, zloc2, xloc3, yloc3, and zloc3. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawtriangle(view, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0); This example draws a triangle with vertices defined by the following three points: (0,0,0), (1,0,0), and (0,1,0). The triangle will be red in color. dropnodefrom () Description For developer use. Returns the view from which a node was dropped. Example dropnodefrom() dropnodeto () Description For developer use. Returns the view into which a node was dropped. Example dropnodeto() dropuserlibraryobject (obj object [, obj ontoobject, num x, num y, num z, obj ontoview, num viewalreadyset]) Description For developer use. Drops the specified object as if it were dragged from a user library into the model. Example dropuserlibraryobject(node(\"MAIN:/project/userlibrary/1/1\")); dropx () Gets the x position of a drop action Description Get the x position of a drop action Example dropx() dropy () Gets the y position of a drop action Description Get the y position of a drop action Example dropy() dropz () Gets the z position of a drop action Description Get the z position of a drop action Example dropz() dumpquery (node dumpNode[, num asTable]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Dumps the full result table for the last call to query() into a node. If asTable is 1, it will dump the result as table data. If asTable is 0, it will dump it as bundle data. Example duniform (num min, num max[, num stream]) Returns random integer between the min and max Description duniform( a , b , stream ) is a bounded discrete probability distribution. Inputs: a is the lower-endpoint parameter b is the upper-endpoint parameter a and b are integer numbers where a < b b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , a +1, ..., b } mean = ( a + b ) ⁄ 2 variance = ( ( b − a + 1)²− 1 ) ⁄ 12 Possible Applications: Used to approximate a quantity that is felt to be randomly varying between a and b , but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any discrete (integer) number inbetween will be returned. Example duniform(1, 6, 3); Random number stream 3 will be used to generate a random variate from a discrete uniform distribution having a minimum value of 1 and a maximum value of 6. This simulates the roll of a dice. duplicateselected () Description For developer use. Duplicates all selected objects in the model. Example duplicateselected() dynamicsplineall (node starttree) Description For developer use. Un-cache all splines for objects under starttree. Any splines in the model become editable or \"unlocked\". Spline rendering becomes slower in editable mode. In editable mode, splines can be edited dynamically. Example dynamicsplineall(model()) else { } Description Used in conjunction with the \"if\" statement to declare what (if any) code should be executed when the condition for the \"if\" is false. Example if( item.Weight < 100 ) { msg(\"TRUE\",\"\"); } else { msg(\"FALSE\",\"\"); } This example will display the TRUE message when the value of the item's Weight label is less than 100, and the FALSE message when it is not. embedfile (num mode, str projectpath, str filepath) Embeds a file in a node Description This command is used to embed a file in a node. mode can take the following values, 1=embed, 2=extract, 3=remove. Example empirical (str/node/num table[, num stream]) Description A continuous empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example empirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. empirical(current.labels[\"ptime\"], 5); Returns a random variate from a continuous empirical distribution defined in a table defined on a label named \"ptime\" on the current object using random number stream 5. emptyfluidobject (obj object) Sets the contents of the fluid object to 0 Description Sets the contents of the fluid object to 0. Example emptyfluidobject(current); enablecode (node codenode [, num mode]) Makes the node a code node Description If mode is 0, then the node is set to FlexScript unless the node is already a code node and then it leaves the node as is. If mode is non-zero, then it forces a given toggle: 1-FlexScript, 2-C++, 3-DLL. This command is used in the code edit window to toggle the node as FlexScript or DLL. Example enablecode(getvarnode(current, \"exittrigger\")); enablefullhistory (num on/off) Deprecated Description This command is deprecated. Turns Full History collection on and off. If the parameter passed in is 1, Full History will be turned on. If it is 0, it will be turned off. This command should not be called directly. Instead, use the Enable Full History menu option to turn Full History on or off. Example enablefullhistory(1); // Turns Full History collection on endaggregatedundo (obj view, num id) Description Ends an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the previous beginaggregatedundo() command will be encapsulated into a single undoable operation. Pass the id returned by the beginaggregatedundo() function. See Miscellaneous Concepts > Advanced Undo for more information. Example endaggregatedundo(c.find(\"@/TheTable\"),id); endignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example endignoreundo(); endoffile () Returns 1 if the end of the currently open file has been reached Description Returns 1 if the end of the currently open file has been reached. Used with fileopen() Example while(!endoffile()){string nextline = filereadline();} endreplication (num onlyifexperimenting) Ends the current experimenter replication Description Will end the current experimenter replication. Use this if your experiment's end time is dependent on a certain condition becoming true instead of a set end time. Specify 1 for onlyifexperimenting to make sure that you only stop if you are running the experiment. Example if(current.stats.output >= 5000) endreplication(1); endwaittask (obj taskexecuter) Deprecated, use Process Flow or freeoperators() Description This command is deprecated. Use Process Flow instead or the freeoperators() command instead. This command releases the object specified as dispatcher from a wait task issued by the createwaittask(). Once the object is released, it will return to the state that it was previously in, and it will begin to perform any task sequences that are in its tasksequence queue. Example endwaittask(current.centerObjects[1]); eq (num/node value1, num/node value2) Deprecated, use the == operator Description This command is deprecated. Use the == operator instead.. Example erlang (num location, num scale, num shape[, num stream]) Returns a random sample from an erlang distribution Description erlang( γ , β , m , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) m is the shape parameter ∈ {1, 2, ... } stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + m β variance = m β ² Possible Applications: Used to model the time to complete some task such as assembly, customer service and machine repair. Comments: When γ = 0, this distribution is known as the m-Erlang( β ) distribution. The exponential( γ , β ) and erlang( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Example double servicetime = erlang(60, 2, 4, 5); The servicetime variable is set equal to a erlang distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, using random stream number 5. The mean is 100 + (2*4) = 108. evaluatepullcriteria (obj fixedresource, obj item, num portnr[, num bypassflags]) Causes the FixedResource object to re-fire its pull requirement Description Tells the FixedResource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. This command returns the value returned by the pull requirement field if the item can be pulled. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. Example evaluatepullcriteria(current, item, 1); // See also Pull Best Item picklist option eventcode <no parentheses> Description For developer use. This command returns the number value that was passed to the createevent() command as code. It is only used in the OnTimerEvent function of the library objects. It is generally used to identify the type of event that is occurring. This command should not have parentheses when it is called. See also createevent() and eventdata. Example if (eventcode == EVENT_OPENINPUTS) thisobjectdata->openinputs(); This calls a method called openinputs() on the object referenced by thisobjectdata if the value EVENT_OPENINPUTS was passed to the createevent() function. eventdata <no parentheses> Description For developer use. This command returns the string value that was passed to the createevent() command as data. It is only used in the OnTimerEvent function of the library objects. Generally, it is used as a description to the user of the type of event that is occurring. It is not generally used in the execution of the OnTimerEvent function, for speed reasons. This command should not have parentheses when it is called. See also createevent() and eventcode. Example if (comparetext(eventdata,\"openinputs\")) { thisobjectdata->openinputs(); } This calls a method called openinputs on the object referenced by thisobjectdata if the string value passed to createevent() is equal to \"openinputs\". eventget (num index, num thing) An event attribute for the event at index Description Returns an event attribute at the specified index in MAIN:/project/exec/events. thing can be: 1 = client 2 = time 3 = code 4 = data 5 = involved 6 = event node Example eventget(2,3) eventlisten (obj object, str eventName, node relayNode[, num flags, par1, par2, ... par10]) Description This command will create a listening mechanism where whenever the defined event is called on object, relayNode will also be executed. flags is a bitwise mask of one of the following values: EVENT_PRE_LISTEN : The listening function will be called before theNode is called. EVENT_LISTEN : (default) The listening function will be called after theNode is called. EVENT_PERSIST : The listener will persist across model resets. EVENT_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into the event will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. EVENT_LISTEN_ONCE : The listening mechanism will automatically be removed after the first event firing. When the listening node is called, if it returns EVENT_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. To get a list of the events that can be listened to on an object, call function_s(object, \"enumerateEvents\", destNode). The object will dump a table onto destNode that contains information on all the events that can be listened to on the object. Some events may have \"requirements\". This means that in order to properly bind to the event, you have to pass additional parameters in. The enumeration table will give information on the number of requirements and their names. When requirements are needed they displace and shift par1, par2, etc. For example, if an event has 2 requirements, these requirements will take up par1 and par2 of the eventlisten() call, and par3 will then become param(1) in relayNode's code. Example eventlisten(current, \"OnEntry\", current.entrylistener); eventloginfo (num operation, num n1) Description For developer use. Returns a string value describing something related to the Event Log. Operations: ELI_GET_OBJECTPATH 1 - returns the path of the object at index n1 from the objectpaths array. ELI_GET_INVOLVEDPATH 2 - returns the path of the object at index n1 from the involvedpaths array. ELI_GET_OTHERPATH 3 - returns the path of the object at index n1 from the otherpaths array. ELI_EVENTTYPE_NAME 4 - returns the name of the eventtype at index n1 from the eventtypes array. ELI_LOGGEDEVENTTYPE_NAME 5 - returns the name of the logged eventtype at index n1 from the loggedeventtypes array. Other operations relating to the Event Log that return number values can be accessed using the applicationcommand() function: \"seteventlogging\" - enables or disables logging for eventtype n1. \"geteventlogging\" - returns whether logging is enabled for eventtype n1. \"getobjectpathslistsize\" - returns the size of the objectpaths array. \"getinvolvedpathslistsize\" - returns the size of the involvedpaths array. \"getotherpathslistsize\" - returns the size of the otherpaths array. \"geteventtypeslistsize\" - returns the size of the eventtypes array. \"getloggedeventtypeslistsize\" - returns the size of the loggedeventtypes array. \"geteventtypecode\" - returns the index of the eventtype by name passed as n1. Example string objectpath = eventloginfo(ELI_GET_OBJECTPATH,1); eventqty () Gets the number of events currently pending Description Returns the number of events currently pending. Example eventqty() excelclose (num save [1/0]) Close the currently open Excel workbook Description This command closes the currently open Excel workbook. If save is 1, the workbook will be saved before it closes. If save is 0, changes made to the workbook will be discarded. Example See the example for excelopen(). excelcreatesheet (str name) Creates a new worksheet in the currently open Excel workbook Description Creates a new worksheet. The new sheet will be given the specified name. Example excelcreatesheet(\"MyNewSheet\"); excelcreateworkbook () Create an Excel workbook Description This command creates a workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open or create another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelcreateworkbook(); excelsetsheet(\"Sheet1\"); excelwritenum(1,1,1); excelsave(\"NewWorkBook.xlsx\"); excelclose(0); This first creates a link between FlexSim and a new Excel workbook, sets the active sheet in the workbook to \"Sheet1\", writes a 1 to row 1 column 1, saves the workbook, then closes the workbook. exceldeleterange (str rangename) Deletes the specified range of the currently open Excel workbook Description Deletes the specified range. Does not affect the data in the range. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example exceldeleterange(\"MyRange\"); exceldeletesheet (str name [, int allowwarning]) Delete the worksheet in the currently open Excel workbook Description Deletes the specified worksheet. If allowwarning is 1, you will be warned before you delete a sheet with data. Example exceldeletesheet(\"MyNewSheet\"); excelexportnode (node table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelexporttable() Description This command is deprecated. Use excelexporttable() instead. Example excelexportnode(reftable(\"Table1\"),1,1,5,3); excelexporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Exports data from a table within FlexSim to the currently open Excel workbook Description Exports data from a table within FlexSim to Excel. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelexporttable(\"Table1\",1,1,5,3); excelgetrangeparam (str rangename, num param) Retrieves a location parameter about the named range of the currently open Excel workbook Description Retrieves a location parameter about the named range. Valid values for param are: 1 = Starting Row Number 2 = Starting Column Number 3 = Ending Row Number 4 = Ending Column Number 5 = Width 6 = Height This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example int width = excelgetrangeparam(\"MyRange\",5); excelgetrangesheet (str rangename) Gets the name of the worksheet associated with rangename of the currently open Excel workbook Description Returns the name of the worksheet where the specified range is located. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example pt(excelgetrangesheet(\"MyRange\")); excelimportnode (obj node, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelimporttable() Description This command is deprecated. Use excelimporttable() instead Example excelimportnode(so(),1,1,5,3); excelimporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols) Imports data from the currently open Excel workbook to a table in FlexSim Description Imports data from Excel to a table in FlexSim. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelimporttable(\"MyTable\",1,1,5,3); excellaunch ([str launchdir]) Launch Microsoft Excel Description This command opens Microsoft Excel so that it can be accessed by FlexSim. If launchdir is not specified, the path defined in Tools|Excel...|Global Settings will be used. Otherwise, the launchdir must be an accurate path to the location on the hard drive where EXCEL.EXE is located. It is typically something like \"C:/Program Files/Microsoft Office/Office10,\" but may be different depending on the version of Excel installed. It is generally not required to launch Excel before communicating with it. However, if FlexSim is set to communicate with Excel via DDE (by calling maintenance(1000,1), this is not the default behavior) Excel must be running before any communication can be performed. If excellaunch() is called at the beginning of communication, excelquit() must also be called before the user opens a new model, compiles the current model or closes FlexSim. Example excellaunch(\" C:/Program Files/Microsoft Office/Office10\"); excelopen(\"C:/mybook.xls\"); excelsetsheet(\"Sheet1\"); double thenum = excelreadnum(1,1); excelclose(true); excelquit(); This starts Excel, opens a workbook called \"mybook,\" stores a value read from row 1, column 1 from that workbook, then closes the file and Excel. excelmacro (str macro) Deprecated Description This command is deprecated. This command allows the user to send an Excel 4.0 macro command to Excel. This language is no longer maintained by Microsoft and may be removed from future versions of Excel. Example excelmacro(\"select(\\\"r1c1:r5c5\\\")\"); This selects the section of the workbook beginning at row 1, column 1 to row 5, column 5. excelmultitableexport () Starts the automatic exporting of data from FlexSim tables to Excel Description Starts the automatic exporting of data from FlexSim tables to Excel sheets as setup in the Excel Import/Export tool. Example excelmultitableexport() excelmultitableimport () Starts the automatic importing of data from Excel to FlexSim tables Description Starts the automatic importing of data from Excel sheets to FlexSim tables as setup in the Excel Import/Export tool. Example excelmultitableimport() excelopen (str workbook) Open the Excel workbook Description This command opens the file called workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelopen(\"mydata.xls\"); excelsetsheet(\"Sheet1\"); double myvalue = excelreadnum(1,2); excelclose(0); This first creates a link between FlexSim and an Excel workbook called \"mydata.xls\", then sets the active sheet in the workbook to \"Sheet1\", sets a local variable called myvalue to the number read from row 1 column 2, then closes the workbook without saving. excelquit () Close Microsoft Excel Description This command closes Microsoft Excel if it is open. After this command is called, no other commands to Excel should be called. Any Excel files that were open should be closed before this command is called. You may get an Excel prompt to save changes to any workbooks that were left open. Use excelclose() to avoid this. This command must be called if excellaunch() was called previously. Example see excellaunch(); excelrangeread (str rangename[treenode target], num row, num col[, num numRows, num numCols, num flags]) Reads an Excel range and dumps it to a treenode Description This function is overloaded so that it has two functions depending on which arguments you pass in. The first (where you pass in a string) is deprecated. Use excelrangereadnum() and excelrangereadstr() instead. The second (where you pass in a treenode) will read a range in Excel and assign all of the data in that range to the target treenode. If the treenode has bundle data, the excel data will be set on the bundle. Otherwise, subnodes will be inserted under the target treenode that will have the Excel data set on them as either string or number data, in the same format as Global Tables. The origin of the range is specified by the row and col passed in, and the second pair of numbers will specify the size of the range. If 0 is passed in for any one of these, Flexsim will automatically choose the boundary in that direction of the Excel range that has data. Flags can be passed in to change exactly what is read from Excel. Those flags are EXCEL_DATA_AUTOMATIC, EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, EXCEL_DATE_AS_NUM, EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_DATA_AUTOMATIC will assign string or number data based on what the datatype of the Excel cell is. This is the default behavior. EXCEL_DATA_NUMBER will force all Excel data to be read as a number. EXCEL_DATA_STRING will force all Excel data to be read as a string. EXCEL_DATE_AS_NUM will read any Excel dates as numbers readable by Flexsim as dates. Otherwise, the data will come in as a string. EXCEL_USE_COLUMNHEADERS will take the first row of data and use it as names for the table columns instead of data. EXCEL_USE_ROWHEADERS will take the first column of data and use it as names for the table rows instead of data. Example treenode myTable = node (\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangeread(myTable, 1, 1, 5, 0, EXCEL_DATA_AUTOMATIC | EXCEL_USE_COLUMNHEADERS); This will read data from the active sheet starting at cell A1. It will read the first five rows, and read as many columns as have data in them. The first row will be used as names for the columns of the Global Table we're writing to. Therefore, if the Excel sheet has 10 columns with data in them, a total of 40 nodes will be inserted under the data variable of the Global Table. Each of those nodes will have the datatype of their corresponding Excel cell. excelrangereadnum (str rangename, num row, num column) Read the numeric value from a cell of the specified range of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadnum(\"MyRange\",5,1) excelrangereadstr (str rangename, num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the specified range of the currently open Excel workbook Description Reads a text value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadstr(\"MyRange\",5,1) excelrangewrite (treenode source, num row, num col, num flags) Reads data from a source table node and writes it to the active Excel sheet Description This function will write all the of the data from the source table node to the active Excel sheet. If the treenode has bundle data, this will read the bundle and write it to the sheet, otherwise it will look for child nodes with data on them, like a Global Table. The row and col passed in specify where on the Excel sheet to begin writing the data. All of the data on the source node will always be written. Flags can be passed in to change the use of headers. Those flags are EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_USE_COLUMNHEADERS will write any existing column headers as a separate row in the Excel table. EXCEL_USE_ROWHEADERS will write any existing row headers as a separate column in the Excel table. Example treenode myTable = node(\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangewrite(myTable, 1, 1, EXCEL_USE_ROWHEADERS | EXCEL_USE_COLUMNHEADERS); This will take all of the data in GlobalTable1 and write it to the active Excel sheet, starting at cell A1. Before it writes any of the actual data, there will be a row of column headers and column of row headers. excelrangewritenum (str rangename, num row, num column, num value) Write the numeric value to a cell of the specified range of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritenum(\"MyRange\",5,1,99.87) excelrangewritestr (str rangename, num row, num column, str value) Write the string value to a cell of the specified range of the currently open Excel workbook Description Writes string value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritestr(\"MyRange\",5,1,\"My String\") excelread (num row, num col) Deprecated, use excelreadnum(), excelreadstr() or excelreadcell() Description This command is deprecated. Use excelreadnum(), excelreadstr() or excelreadcell() instead. Example excelreadcell (num row, num col[, num flags]) Returns the value of a cell in the active worksheet as a variant Description Returns the value of a cell in the active worksheet as a variant. Flags can be specified to specify what exactly is returned from Excel. Those flags are EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, and EXCEL_DATE_AS_NUM. EXCEL_DATA_NUMBER will read the Excel data as a number. EXCEL_DATA_STRING will read the Excel data as a string. EXCEL_DATE_AS_NUM will interpret any Excel dates as a Flexsim readable date number. Example Variant value = excelreadcell(1, 5, EXCEL_DATA_NUMBER | EXCEL_DATE_AS_NUM); This returns the value of the 5 column in the first row as a number. If it's a date, the number returned will be Flexsim readable as a date. excelreadnum (num row, num column [, num rowchar, num colchar]) Read the numeric value from a cell of the active sheet of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column of the active sheet of the currently open Excel workbook. Example excelreadnum(5,1) excelreadstr (num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the active sheet of the currently open Excel workbook Description Reads a text value from a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelreadstr(5,1) excelsave ([str filename]) Saves the currently open Excel file Description Saves the currently open Excel file. If a filename is passed to this command, the file will be saved with that name. This is the equivalent of selecting Save As from Excel's File menu. If no parameters are passed to this command, the file will be saved with its current name, and the original file will be overwritten. This is the equivalent of selecting Save from Excel's File menu. Example excelsave(\"runresults_001.xls\") excelsetrange (str rangename, num startrow, num startcolumn, num endrow, num endcolumn) Creates or changes a named range of the currently open Excel workbook Description Creates or changes a named range. The range will be on the active sheet. The range's upper-left cell is defined by startrow and startcolumn. The bottom-right cell is defined by endrow and endcolumn. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelsetrange(\"MyRange\",5,5,10,15); excelsetsheet (str sheetname) Sets the active worksheet of the currently open Excel workbook Description This command sets the active worksheet in the currently open Excel workbook. Whenever excelreadnum() or excelreadstr() are called, the value read will come from the active worksheet. The active worksheet may be set many times for the same open workbook. Example See the example for excelopen(). excelupdatepreferences () SYSTEM USE ONLY Description SYSTEM USE ONLY - used to update global variables to match preferences. Called in startupRT.txt and in OnSelect of Excel Preferences GUI. Example excelupdatepreferences() excelversion () Gets the version of Microsoft Excel Description Returns a string that contains the Excel interface version. Example excelversion() excelwrite (str data, num row, num col) Deprecated, use excelwritenum() and excelwritestr() Description This command is deprecated. Use excelwritenum() and excelwritestr() instead. Example excelwritenum (num row, num column, num value [, num rowchar, num colchar]) Write the numeric value to a cell of the active sheet of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritenum(5,1,99.87) excelwritestr (num row, num column, str value [, num rowchar, num colchar]) Write the string value to a cell of the active sheet of the currently open Excel workbook Description Writes string value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritestr(5,1,\"My String\") executefsfile (str filename, num direct) Description For developer use. Executes Flexscript code in a file. The specified file is loaded and its content is executed. The contents of the file are assumed to be valid Flexscript code. If direct is 0, then FlexSim's program directory will be concatenated onto the front of filename, otherwise filename will remain as it is. Example executefsfile(\"c:/myscript.fs\",1) executefsnode (node thenode, node c[, node i, node/num/str eventdata, int nobuild]) Execute a node as Flexscript Description Dynamically execute a node as Flexscript. If the node is not already Flexscript, the nobuild parameter should be 0. Used to parse string data into Flexscript to execute, such as from a global table or label. The c and i parameters can be accessed in the function as c and i. The eventdata parameter can be accessed as eventdata if it is a string or as eventcode (an integer) if it is a number. If eventdata is a node, it can be accessed using tonode(eventdata) in the function. Example executefsnode(current.labels[\"myFunc\"],NULL,NULL,NULL,0) This executes the script on current's myFunc label, passing NULL into the function for c,i,and eventdata. executestring (str thestring[, node c, node i, obj eventdata]) Executes a string as flexscript Description Executes the given string as flexscript. Parameters 2-4 are the same as executefsnode. Example executestring(\"profileevents()\"); executesubflow (obj/str processFlow [, obj instanceObject, str startActivity, str finishActivity]) Description Creates a token in a Process Flow Sub Flow which starts that sub flow. Once the created token hits a Finish activity it will return the value evaluted from the Return Value field. instanceObject: If the instanceObject is specified then current may be used by the activities in the Sub Flow to get access to the instanceObject. This can be useful when multiple objects execute the same Sub Flow but require object specific data. If no Start activity is specified, the activities in the Sub Flow will be searched and the first Start activity will be used. If multiple Finish activities are contained in the Sub Flow, the return value will be evaluated from whichever Finish activity the token enters. However, if internal sub flows cause other tokens to enter a Finish activity, it may be necessary to specify the Finish activity name so the correct return value is evaluated. NOTE: It is important that the activities used in the Sub Flow do not create delays or wait. If the token is interrupted by a delay or wait, the token will not arrive at the Finish activity when the executesubflow function finishes. Example return executesubflow(\"SubFlow1\", processor); executetablecell (str/node/num table, num row, num column) Deprecated, use Table.executeCell() or the Table's [] operators Description This command is deprecated. Use Table . executeCell () or the Table class's [] operators instead. Executes the table cell's text as Flexscript. Example exp (num value) Deprecated, use Math.exp() Description This command is deprecated. Use Math . exp () instead. Returns (e ^ value) where e is 2.7183. Example exponential (num location, num scale [, num stream]) Returns a random sample from an exponential distribution Description exponential( γ , β , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ² Possible Applications: Often used to model the interarrival times of a continous stream of customers and/or customer orders into a system. It is also a popular distribution for modeling the time between failure of mechanical equipment. Comments: Variates less than the mean occur much more frequently than variates greater than the mean. The exponential distribution is the only continuous distribution with the memoryless property of producing totally independent variates. If the location parameter ( γ ) is set to zero, then β becomes the mean, and the distribution's variates will range between zero and infinity. The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. Example exponential(0, 10, 5); An exponential distribution with a location of 0 and a scale of 10 (mean = 10). FlexSim's random stream number 5 will be used to generate variates from the distribution. exportdataset (node datatree, str filename, num format[, str wrOption = \"w\"]) Description Export tree dataset to .CSV (Comma Separated Value) format. the format parameter can be: 1 = table 2 = graph 3 = graphxy This implements the opposite functionality of importdataset(). Refer to importdataset() for more information. Example exportdataset(so(),\"mydataset.csv\",1) exportfullhistory ([str filename, num scenario, num replication]) Deprecated Description This command is deprecated. Writes to a database (.mdb file) the Full History data that was collected during a run. If a file name is passed to this command, that name willbe used for the database. If no file name is passed in, the user will be prompted for a file to save the data to. If the file (either passed in or selected from a dialog) does not exist, it will be created. Example exportfullhistory(\"myrundata.mdb\"); exporttable (node exportnode, str filename[, num exportcolumnnames = 0, num exportrownames = 0, str listseparator = 0, str decimalseparator = 0]) Export a table in .CSV format Description Export a table in .CSV (Comma Separated Value) format. Example exporttable(so(),\"mytable.csv\",1, 1) This exports the table designated as so(), including row and column headers. extremevalue1a (num location, num scale[, num stream]) Returns a random sample from a extremevalue1a distribution Description Generates a continuous random variate from a extremevalue1a distribution with parameters as defined. Example extremevalue1b (num location, num scale[, num stream]) Returns a random sample from a extremevalue1b distribution Description Generates a continuous random variate from a extremevalue1b distribution with parameters as defined. Example fabs (num value) Deprecated, use Math.fabs() Description This command is deprecated. Use Math . fabs () instead. Absolute value of the argument. Example factorial (num value) Deprecated, use Math.factorial() Description This command is deprecated. Use Math . factorial () instead. Factorial of value. Example familycreate (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Create a new family (a list of nodes used for organizing relational information). Example familycreate(item,\"family1\") familydelete (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Delete a family. Example familydelete(item,\"family1\") familymember (obj familycontainer, str name, num index) Description This command is deprecated. Use the Group class instead. Returns a pointer to a member of the specified family. Example familymember(item,\"family1\",2) familymemberadd (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Adds a new family member to the specified familycontainer. Example familymemberadd(item,\"family1\",item.subnodes[1]) familymemberdel (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Removes a family member from the specified familycontainer. Example familymemberdel(item,\"family1\",item.subnodes[2]) familymemberqty (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Returns the size of the specified family. Example familymemberqty(item,\"family1\") fastforward () Description For developer use. Saves off the current runspeed, sets the run speed to max, suspends draw, and then runs to the next stop time. Once the next stop time is reached drawing is resumed and the runspeed is restored. Example fastforward() fastspline (obj spline, num perc [0-1]) Description For developer use. Get a spline mapping from a cached spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will use the precalculated values for the spline object given in spline. The parameter perc is the position along the spline of interest. The precalculated values are evaluated when the fastsplineall() or fastsplineupdate() commands are used. Example fastspline(splinestartnode,1) This activates the spline pointed to splinestartnode at its furthest point (100 percent along the spline). fastsplineall (obj starttree {model}, num res) Description For developer use. Cache all splines at once. The geometry for all splines in the model are evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinery(), splinery(), splinery(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineall(model(),20) fastsplineupdate (obj spline, num res) Description For developer use. Cache a spline's shape to increase it's speed. The geometry for all splines in the model are re-evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineupdate(so(),20) fglColor (num red {0-1}, num green {0-1}, num blue {0-1}[, num alpha {0-1}]) Sets the color for drawing a mesh in OpenGL Description Sets the color for drawing a mesh in OpenGL. The rgb color components are between 0 and 1. The optional alpha component is between 0 (transparent) and 1 (opaque). Example fgldebuglevel (num level [0-3]) Description For developer use. Set the OpenGL debug level. The higher the number, the more scrutiny is put on the system, and the more reporting is done. 0 is none, 3 is maximum. Example fgldebuglevel(3) fglDisable (num setting) Disables an OpenGL draw setting Description Disables an OpenGL draw setting. See glEnable() for list of draw settings. You can refer to standard OpenGL documentation for more information if needed. Example fglDisable(GL_LIGHTING); fglEnable (num setting) Enables an OpenGL draw setting Description Enables an OpenGL draw setting. Note that for optimization purposes, FlexSim's drawing engine does not automatically restore the enabled/disabled state of a given setting, so it is up to you, if you use this command, to restore the setting to its default after you have executed your drawing functionality. Failing to restore a setting to its default will result in weird rendering of other objects in the model. Common OpenGL draw settings: GL_LIGHTING Turns lighting on and off. Turn it on if polygons do not change color when they turn away from the viewer. Default: enabled. GL_CULL_FACE Turns back-face culling on and off Turn it off if you want both sides (front and back) of all polygons drawn. Default: disabled. GL_TEXTURE_2D Turns texturing on and off. Turn it off if a texture is being displayed and you don't want it there. Default: enabled. You can refer to standard OpenGL documentation on glEnable() for more information if needed. Example fglEnable(GL_LIGHTING); fglinfo (num operation, obj view) Gets information about a 3D view's draw state Description This command gives you access to various information about the draw state of a 3d view. Logic/data that is performed/returned is based on the operation parameter, as follows: FGL_INFO_SHADERTYPE - returns what part of the draw pass is happening, such as rendering the shadow map (SHADERTYPE_RENDER_SHADOWS), blurring the shadow map (SHADERTYPE_BLUR), or rendering the objects to the screen (SHADERTYPE_DEFAULT). Example /*do not draw this object when rendering the shadow map*/ if (fglinfo(FGL_INFO_SHADERTYPE, view) == SHADERTYPE_RENDER_SHADOWS) return 0; fglLoadIdentity () Description Loads the identity matrix into the current OpenGL drawing context, or in other words, replaces the current matrix with the identity matrix. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Loading the identity matrix is simply a way of resetting things to the origin, so there's no rotation, translation or scaling. The default position is (0,0,0) and the default orientation is looking down the negative z-axis. You can refer to standard OpenGL documentation for more information if needed. Example fglLoadIdentity() fglMatrixMode (num mode) Specifies which matrix stack is the target for subsequent matrix operations Description Specifies which matrix stack is the target for subsequent matrix operations. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW which is used when moving objects around the scene. You can refer to standard OpenGL documentation for more information if needed. Example fglMatrixMode(GL_MODELVIEW); fglNormal (num x, num y, num z) Sets the normal vector for shading subsequent vertices in OpenGL Description Sets the normal vector for shading subsequent vertices in OpenGL drawing. Polygons will be flat shaded unless normals are applied to them. A normal is a vector that is perpendicular to the polygon and points in the direction the polygon is facing. Remember polygons with vertices defined in a counter-clockwise winding points forward per the \"right-hand rule\". Polygon shading is based on the angle between the normals and the light source. Normals are applied to each vertex in the same way colors are, but is usually just defined at the start of each polygon definition. When a polygon's normals point directly at the light source, they are brightly shaded; and are darker shaded when the angles are skewed. You can refer to standard OpenGL documentation for more information if needed. Example fglNormal(1,0,0); fglPopMatrix () Pops the current OpenGL drawing context from the matrix stack Description Pops the current OpenGL drawing context from the matrix stack, or in other words returns to the space on the top of the stack. The OpenGL stack stores the space matrix in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPopMatrix(); fglPushMatrix () Pushes the current OpenGL drawing context onto the matrix stack Description Pushes the current OpenGL drawing context onto the matrix stack which can later be retrieved with glPopMatrix(). If you are drawing more than one object and you don't want the glTranslated, glRotated or glScaled to affect the next objects, you should use glPushMatrix and glPopMatrix. The OpenGL stack stores the space matrices in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPushMatrix(); fglRotate (num degrees, num x, num y, num z) Rotates the current OpenGL drawing context by degrees around axis x,y,z Description Rotates the current OpenGL drawing context by degrees around an axis defined by the vertex (x,y,z). Anything drawn after a rotation is based on the new rotation of the axes. See glVertex3d for definition of the OpenGL xyz coordinate system. You can refer to standard OpenGL documentation for more information if needed. Example fglRotate(90,1,0,0); fglScale (num x, num y, num z) Scales the current OpenGL drawing context by x,y,z Description Scales the current OpenGL drawing context by the given scale parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after this command is based on the change in scale of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglScale(2,4,1); fglTranslate (num x, num y, num z) Translates the current OpenGL drawing context by x,y,z Description Translates the current OpenGL drawing context by the given translation parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after a translation is based on the new location of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglTranslate(15, 4, 0); filebrowse (str extension, str description, str startpath) Opens a file selection dialog Description Opens a file selection dialog that allows the user to select the specified file type(s). Different types should be separated by semicolons(;). The dialog's default directory is the path specified. The commands pdir() and cdir() can only be passed as the path parameter in C++. Example string filename = filebrowse(\"*.fsm; *.fsp; *.fsv; *.fss\",\"FlexSim Files\",pdir()); fileclose () Closes the FlexSim file interface Description Closes the FlexSim file interface and saves any data written to the file while it was open. Example fileclose() fileexists (str filepath) Returns 1 if the file exists, 0 otherwise Description Returns 1 if the file exists, otherwise 0. Example if(fileexists(\"C:/myfile.txt\")) { fileopen(\"C:/myfile.txt\"); fpt(\"Hello World\"); fileclose(); } fileisreadonly (str filename) Description For developer use (Dynamo). Looks for the string \"READONLY\" in the PROPERTY_COMMENTS of the specified file. Example fileisreadonly(pdir() + \"\\\\flexsim.exe\") fileopen (str filename [, str opentype]) Opens the FlexSim file interface Description Opens the FlexSim file interface. Returns 1 if successful. Returns 0 if an error is encountered. Parameter 2 can be \"w\" for writing, \"r\" for reading, or \"a\" for appending. Default is \"w\". Use the commands fpt(), fpr(), fpf(), etc. to write to the opened text file. Use filereadline() to read a line from the file. Using this command, you can only have one file open at a time. To write to multiple files simultaneously, use the C standard fopen/fclose commands or C++ standard fstream classes in C++ or through a dll. If in write mode, the contents of the file will be cleared, and the file pointer will be set to the top of the file. The file must be closed to save any data written to the file. Example fileopen(\"C:/myfile.txt\", \"w\"); filereadline () Reads a line from the currently open file Description Reads a line from the currently open file. Used with fileopen() Example string nextline = filereadline(); fillarray (array thearray, num/treenode/string val1[, num/treenode/string val2, ...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class to construct the array using an array literal: Array arr = [1, 2, 3]; Fill a local array with values. Example fillwithatts (obj object, num attgroup) Description For developer use. Fill an object with attribute from an attribute group. Example fillwithatts(so(),1) findmatch (num nr, num matchexpression[, returnexpression = count, num reverseorder = 0]) Description Performs a matching test a defined number of times, and when a match is found, returns a user-definable value associated with that match. Within the match expression and return expression, \"count\" can be used to determine which iteration your are on in the check. This can be used to search in a list of things for a matching item or criterion. If returnexpression is not included in the call, then findmatch() will return the count associated with the matching expression. If no matches are found, findmatch() will return 0. If reverseorder is 1, then it will go backwards, assigning count to nr first, then nr - 1, etc. down to 1. If returnexpression is left out, then findmatch will return the count associated with the found match. Example int portNr = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5); This example will return the output port number that corresponds to the first object it finds connected to current's output ports that has a content less than 5. treenode object = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5, current.outObjects[count]); This example is similar to the previous example except it will return the object itself instead of the associated port number. int item2Rank = findmatch(current.subnodes.length, current.subnodes[count].type == 2); This example will return the rank number of the first item found in current's queue that has an item type of 2. findmax (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the maximum value found, or a user-definable return value associated with that maximum value. Within the value expression, return expression and criterion, \"count\" can be used to determine which iteration you are on in the check. If the return expression is not defined, the maximum value found will be returned. Additionally, you can specify a criterion to filter out values as invalid. If criterion is defined and nothing meets the criterion, 0 will be returned. Example double latestCreation = findmax(current.subnodes.length, getcreationtime(current.subnodes[count])); This example will return the maximum creation time of all items in current. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length; This example will return the input port number associated with the object with the largest queue of items. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length, count, getitemstate(current.inObjects[count].first) == FR_STATE_READY); This example is the same as the previous example, but additionally in includes a criterion that the first item in the upstream object must also have been released. findmin (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the minimum value found, or a user-definable return value associated with that minimum value. findmin() is the same as findmax() except it finds the minimum value instead of the maximum value. For more information, refer to the documentation for findmax(). Example Refer to findmax() findownerobject (node thenode) Description Like ownerobject(), this command returns the object node containing thenode. Unlike ownerobject(), this command does not cache the result, but searches in the tree for the \"owner\" node. For example when a TaskExecuter transfers from one NetworkNode to another on a network path, a coupling node is transferred to the new node to keep track of the TaskExecuter's current node, and findownerobject() is used to get access to the correct \"owner\" node. Example findownerobject(c) findundorecordbyid (obj view, num id) Description Returns the undo record with the specified id for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); treenode record = findundorecordbyid(ownerobject(c),id); finishundorecord (obj view, num uniqueid) Description Finishes an undo record for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example finishundorecord(view, getundorecordid(record)); firecreateevent (obj object, num x, num y, num z, num iscopy [, num libraryfunctiononly]) Description For developer use. Fires the creation event of the specified object. x, y, and z are the rz the object was dropped at. Example firevalue of 0 islast(model()),0,0,0, 1); first (node container) Deprecated, use treenode.first Description This command is deprecated. Use treenode . first instead. Reference a parent node's first child node. Example flipselected (num firstX, num firstY, num secondX, num secondY[, node roottree]) Flip selected objects across an axis Description Flip selected objects across the axis defined by the two passed xy points Example flipselected(1, 5, 2, 7) This example flips the selected objects across the axis defined by the points point (1, 5) and (2, 7) floor (num num) Deprecated, use Math.floor() Description This command is deprecated. Use Math . floor () instead. Gets the largest integral value not greater than num. Example fluidcontent (obj fluidobject) Gets the current fluid content of fluidobject Description Returns the current fluid content of the specified Fluid Object. It is the same as reading the \"curcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objcontent = fluidcontent(current.outObjects[1]); fluidmaxcontent (obj fluidobject) Gets the max fluid content of fluidobject Description Returns the defined maximum fluid content of the specified Fluid Object. It is the same as reading the \"maxcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objmaxcontent = fluidmaxcontent(current.outObjects[1]); flyactive () Returns 1 if there is an fly path running, 0 otherwise Description Returns 1 if there is a fly path currently being run, 0 otherwise. Example flyactive() flyendnode (node x) Gets a reference to the node that represents the stopping point for the current fly path Description Returns a reference to the node in the tree that represents the stopping point for the current fly path. Example Used in the presentation builder GUI. flypath (obj view, num pathno [, num singlerun]) Description For developer use. This command begins the predefined flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypath(ownerview(c),1); This will run flypath number 1 in the view window containing an event's code. flypathadd (obj view, num pathno) Description For developer use. This command adds a flypath to the flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypathadd(ownerview(c),1); This will add a flypath to flypath number 1 in the view window containing an event's code. flypathreset (obj view, num pathno) Description For developer use. This command clears the points from the flypath numbered pathno in the view specified as view. Once the points have been cleared, a new set of flypath points can be generated. Example flypathreset(ownerview(c),1); This clears the flypath points out of flypath 1 in the view containing an event's code. flystart (obj view) Description For developer use. Start fly mode. Example flystart(ownerview(c)) flystop () Description For developer use. This command stops any active flypaths. Example flystop(); This causes all flypaths that are currently active to stop moving. flyto (obj view, num endtime, num x, num y, num z, num rx, num ry, num rz) Description For developer use. Fly to the specified viewpoint over time. Example flyto(sv(),10000,0,0,20,-50,0,-30); flyupdate () Updates the currently active fly path Description Updates the currently active fly path if there is one Example fmod (num value1, num value2) Deprecated, use Math.fmod() Description This command is deprecated. Use Math . fmod () instead. Remainder of value1/value2 as a double. Example for (initalstatement; whiletrueexpression ; countstatement) Description Perform a number of loops. The initialstatement will be executed once before starting the loop. The whiletrueexpression will be evaluated before executing each loop and the loop will stop as soon as this expression is true. The countstatement is executed at the end of each loop and usually increments a counter. Refer to the help manual under Writing Logic in FlexSim for more information. Example for(int i = 1; i <= 5; i++) { msg(\"for loop\",\"\"); } forobjecthighlightedin (obj view) { } Description This command is deprecated. Use selectedobject() instead. Iterate on the node that is both selected (red) and highlighted (yellow) in the selected view. Reference the selected and highlighted node by using \"a\" within the loop. Example forobjecthighlightedin(sv()) { pt(a.name); pr(); } This prints to the outputconsole the name of the selected, highlighted node in the first level of the model. forobjectlayerunder (node container) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the tree layer directly under the node specified as container. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectlayerunder() command can only be used in flexscript, not C++. Example forobjectlayerunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the first level of the model. forobjectsbefore (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value less than or equal to the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbefore() command can only be used in flexscript, not C++. Example forobjectsbefore(model.subnodes[5])) { pt(a.name); pr(); } This prints to the outputconsole the name of the first 5 objects in the model. forobjectsbehind (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value greater than the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbehind() command can only be used in flexscript, not C++. Example forobjectsbehind(model.subnodes[5]) { pt(a.name); pr(); } This prints to the outputconsole the name of the objects in the model starting with the sixth one. forobjectselectionset (node container) { } Description This command is deprecated. Instead use: for(int i =1; i<= container.subnodes.length; i++) { if(switch_selected(container.subnodes[i])) { pt(container.subnodes[i].name); pr(); } } The block following the command will be iterated upon once for each selected object in the container. The value of the \"a\" command will return the pointer to the object being iterated upon. This command is not available in C++. Example forobjectselectionset(library()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object currently selected in the library tree. forobjecttreeunder (node container) { } Description Execute a block of code for each node that is in the tree under the node specified as container, including all sub-trees. To access the node that is currently active in the loop, the \"a\" command is used. The forobjecttreeunder() command can only be used in flexscript, not C++. Example forobjecttreeunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the model, including those inside other objects. fpc (num value) Prints an ASCII character to the open file Description Prints an ASCII character to the open file. Common values: TAB = 9, LF = 10, CR = 13 Example fpc(9) fpd (num value) Prints an integer value to the open file Description Prints an integer value to the open file. Floating point values will be truncated. Example fpd(3) prints 3 fpd(3.23) prints 3 fpd(3.954) prints 3 fpd(4) prints 4 fpf (num value) Prints a floating point value to the open file Description Prints a floating point value to the open file. Example fpf(1.234) fpm (num feetperminute) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/minute. Example fpm(9) fpr () Prints a return (new line) to the open file Description Prints a return (new line) to the open file. Example fpr() fps (num feetpersecond) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/second. Example fps(9) fpt (str text) Prints a string to the open file Description Prints a string to the open file. Example fpt(\"Hello\") frac (num value) Deprecated, use Math.frac() Description This command is deprecated. Use Math . frac () instead. Gets the decimal part of value. Example freeoperators (obj taskexecuter, obj involved) Release all operators connected to taskexecuter that are working on involved Description Release all operators connected to the specified dispatcher that are currently working on the involved object. This command should be executed from a trigger when you want to release operator(s) that you have called to a process using the requestoperators command or using a utilize task. The first parameter can be either a dispatcher connected to operator(s) that you want to free, or it can be the operator itself. The second parameter is a key for releasing the appropriate operator(s). If you have called the operator(s) using the requestoperators command, then the second parameter of the freeoperators command should match the third parameter of the requestoperators command. If you have given an operator a utilize task, then the second parameter of the freeoperators command should match the involved1 parameter of the utilize task. You would probably execute this command from a trigger like OnProcessFinish or OnSetupFinish. For more information, refer to the task sequence section of the user manual. Example freeoperators(current.centerObjects[1], item); fscheckall (node startingnode) Description For developer use. This command checks for errors in all flexscript nodes under and including the specified startingnode and outputs the results to the compiler console if it finds atleast one error. Example fscheckall(main()); ft (num feet) Gets the number of model length units in the number of feet Description Return the number of model length units in the specified number of feet. Example ft(3) function_n (obj object, num index [, num param_a,...]) Description For developer use. Executes code associated with a node found in the object's eventfunctions group having the specified event code. The event code is not the rank of the node in the eventfunctions group, but it corresponds to one of the following pre-defined FlexSim event : OnReset 1 OnMessage 2 OnEvent 3 OnDraw 4 OnInopen 5 OnOutopen 6 OnReceive 7 OnSend 8 OnEntering 9 OnExiting 10 OnCompile 11 OnCreate 12 OnDestroy 13 OnLoad 14 OnCollision 15 OnClick 16 OnRunend 17 OnRunstart 18 OnInterrupted 19 OnCaptured 20 OnListen 21 OnPredraw 22 OnDrawplanar 23 OnPredrawplanar 24 OnPreListen 25 Example function_n(current,1,1,2,3) Executes the OnReset event function defined on the current object. function_s (obj object, str name [, num param_a,...]) Description For developer use. Executes code associated with the node found in the object's eventfunctions group having the specified name. For a list of the pre-defined system level events in FlexSim refer to function_n() command documentation. Example function_s(current,\"OnReset\",1,2,3) Executes the OnReset event function defined on the current object. gamma (num location, num scale, num shape[, num stream]) Returns a random sample from a gamma distribution Description gamma( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + α β variance = α β ² Probability Density Functions: Possible Applications: Used to model the time to complete some task such as assembly, customer service or machine repair. Comments: The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Shape values less than 1 are rarely used. Example double repairtime = gamma(60, 2, 3.4, 5); The repairtime variable is set equal to a gamma distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. The mean is 100 + (2*3.4) = 106.8. ge (num value1, num value2) Deprecated, use the >= operator Description This command is deprecated. Use the >= operator instead. Example geometric (num prob[, num stream]) Returns a random sample from a geometric distribution Description Generates a discrete random number with a geometric distribution and parameters as specified. Example get (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getactiverole (treenode person) Description Return the person's active role Example getactiverole(token.Person) getactivity (node/obj/str token/processFlow [, str activityName]) Description If the first parameters is a ProcessFlow object you must specify a string for the activity name. To get the current activity of a token, use Token . activity . Example treenode activity = getactivity(processFlow, \"Delay\"); getallocatedfromkey (obj coordtasksequence, num key) Gets a reference to the object allocated for the allocate task for the given key Description Returns a reference to the object that has been allocated for the allocate task specified by the given key. Example treenode allocatedobj = getallocatedfromkey(getcoordinatedtasksequence(current.centerObjects[1], 0), mykey); getanimationvar (obj object, num/str animation, str varName) Gets the current value of an animation variable Description Gets the current value of an animation variable. See setanimationvar() for more information on animation variables. Example treenode curItem = getanimationvar(current, \"Animation1\", \"Item1\"); getapplicationtitle () Description For developer use. Returns the current application's title as a string. Example msg(getapplicationtitle(),\"Hello world.\"); getbatch (obj/str tokenOrBatch[, obj instanceObject, obj/str/num group]) Description Gets the batch in a Batch activity by token or Group By value. If a token is passed in as parameter 1, then the instanceObject and group parameters are not used. Example treenode batch = getbatch(token); treenode batch = getbatch(\"Batch\", current, 3); getbundlefieldname (node datanode, num fieldnr) Gets the name of the nth ranked field (base 0) in the bundle Description Returns the name of the nth ranked field (base 0) in the bundle. Example string fieldname = getbundlefieldname(x, 5); getbundlefieldnr (node datanode, str fieldname) Gets the rank of the bundle field (base 0) Description Returns the rank of the bundle field (base 0). If the bundle field doesn't exist, returns -1. Example int index = getbundlefieldnr(x, \"Field Name\"); getbundlefieldtype (node datanode, num fieldnr) Gets the data type of the bundle field at rank fieldnr (base 0) Description Returns the data type of the bundle field at rank fieldnr (base 0). Available return values are: BUNDLE_FIELD_TYPE_DOUBLE BUNDLE_FIELD_TYPE_FLOAT BUNDLE_FIELD_TYPE_INT BUNDLE_FIELD_TYPE_STR BUNDLE_FIELD_TYPE_VARCHAR BUNDLE_FIELD_TYPE_NODEREF Example int type = getbundlefieldtype(x, 5); getbundleindexentries (node datanode, str/num field, str/num value) Gets all rows with a matching value in the given field Description If this command succeeds, it returns an int or an intarray containing all entries (0-based) that contain the given value for the given field. If it fails, it returns -1. It will fail if the datanode is not a bundle, or if the given field is not an indexed field, or if none of values in the field match the given value. See the addbundlefield command for information on how to make an indexed field. Example int entryNr = getbundleindexentries(data, \"SKU\", \"FS2016-BLU\"); getbundlenrentries (node datanode) Gets the total number of entries in the bundle Description Returns the total number of entries in the bundle. Example int nrentries = getbundlenrentries(x); getbundlenrfields (node datanode) Gets the total number of fields in the bundle Description Returns the total number of fields in the bundle. Example int nrfields = getbundlenrfields(x); getbundlevalue (node datanode, num entrynr, str/num field) Gets the value of the defined entry (base 0) and field (base 0) of the bundle Description Returns the value of the defined entry (base 0) and field (base 0) of the bundle. Example string name = getbundlevalue(x, 5, \"Object Name\"); getcensus ([obj model/group/location]) Description Get the number of people in the model, a Location group, or an individual location Example int census = getcensus(Group(\"PodA\")); getchecked (obj window) Description For developer use. Returns the checked state of a button. Example getchecked(c) getchildtoken (node parentToken [, int childIndex]) Description Deprecated. Use Token . children [], or Token . children .length. Example treenode childToken = getchildtoken(token, 3); int numChildren = getchildtoken(token); getchildtokenrank (node childToken) Description Deprecated. Use Token . childRank . Example int childRank = getchildtokenrank(token); getcolorcomponent (obj object, num index) Deprecated, use the Color class Description This command is deprecated. Use Color . r or Color . g or Color . b or Color . a instead. Gets the rgb color component of object Example getcoordinatedtasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a coordinated task sequence Description Returns a reference to the coordinated task sequence that is associated with allocation request with the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to the coordinated task sequence that it is currently allocated for. Example treenode coordtasksequence = getcoordinatedtasksequence(current.centerObjects[1], 5); getcreationtime (obj object) Gets the time that a flow item was created Description Returns the time that a flowitem was first created. Example time() - getcreationtime(item) getcurrentundorecord (obj view[, int flags = 0x1]) Description Returns a pointer to the treenode associated with the current undo record in the undohistory of the specified view. This is the record that would be undone first when you perform an undo operation. It is also the most recently created record (potentially deep in the undo aggregation hierarchy) when and aggregated undo operation is being created. The flags parameter lets you optionally adjust what should be returned. 0x1 means get the top-most record for a move-size-rotate undo. 0x2 indicates get the top-most record in a normal aggregated undo. See Miscellaneous Concepts > Advanced Undo for more information. Example treenode record = getcurrentundorecord(view); getcurtask (node tasksequence) Gets the current task number of tasksequence Description Returns the current task number of the task sequence Example if(getcurtask(ts) > 5) pt(\"The operator has finished the first five tasks\"); getdashboardcontrol (str id [, node startnode]) Returns a reference to the dashboard control associated with id Description Returns a reference to the dashboard control that has the ID value of id. This command will search through all open dashboards until it finds a control with matching ID. Passing in a value for startnode will cause the command to only search through the dashboard containing startnode. Dashboard controls include edit fields, buttons, comboboxes, etc. Example treenode accelEdit = getdashboardcontrol(\"accelEdit\", c); //Searches through the current dashboard only getdatastat (num stat, num/node nrSamples/parentNode, num sampler [, num p1, num p2, num p3]) Description Calculates and returns a certain statistic of a data set. stat - Can be one of the following values STAT_MEAN - calculates the sample mean of the set STAT_MIN - calculates the minimum value in a defined range of values. p1 is the first element in the range (default is the first element in the set), p2 is the last element in the range (default is the last element in the set), and p3 defines a stride, allowing you to look at every nth value (default 1). If either of p1, p2, or p3 is 0, then it will revert to that value's respective default. STAT_MAX - calculates the maximum element in a defined range of values. p1, p2 and p3 are the same as for STAT_MIN STAT_VARIANCE - calculates the unbiased variance of the data set STAT_STD_DEV - calculates the unbiased standard deviation of the set STAT_SUM - calculates the sum of the set STAT_CONF_INTERVAL_HALF_WIDTH - calculates the confidence interval half-width of the set. Pass in p1 to define the desired confidence percentage. FlexSim will return precise values for percentages at 80%, 90%, 95%, 98%, 99%, and 99.8% and for sample sizes at or below 100 degrees of freedom. For percentages not in this set, FlexSim will \"clamp\" it to the nearest percentage ABOVE the percentage passed in. So if you pass in a 75%, it will return an 80% confidence interval. Since an 80% confidence interval will be a \"wider\" interval, we clamp up to be \"safer\" with the wider interval. Confidence intervals above 99.8 will simply return 0 (i.e. not valid). For degrees of freedom above above 100, it will assume 100 degrees of freedom. nrSamples - defines the number of samples in the set. Note: parameter 2 as a parentNode is deprecated and you should use the parameter 2 as nrSamples option because it encompasses the other and is more flexible. The following deprecated functionality: getdatastat(STAT_MEAN, myNode, 0, 0, 0, 0) can be represented using the newer option with: getdatastat(STAT_MEAN, myNode.subnodes.length, myNode.subnodes[count].value, 0, 0, 0) sampler - an expression that gets the nth value in the sample. Use count for determining which value is to be retrieved. Below are several examples: For calculating the mean of all values in column 5 of global table GT1: getdatastat(STAT_MEAN, Table(\"GT1\").numRows, Table(\"GT1\")[count][5]) For calculating the sum of all values in field \"Time\" of a bundle: getdatastat(STAT_SUM, Table(\"MyBundle\").numRows, Table(\"MyBundle\")[count][\"Time\"]) Example getdatatype (thing) Deprecated, use treenode.dataType Description This command is deprecated. Use treenode . dataType instead. Gets the datatype of a node Example getdatatype(so()) getdirbrowse (str initialdir, str message, node result) Opens a browser window to pick a directory Description Opens a browser window to pick a directory. destnode should have string data, and the directory path will be written to its text. Example getdirbrowse(documentsdir, \"A folder\", destnode) getdrawtextmetric (str text, num fontsize, num metric[, num a]) Description Returns information about the text. If metric is 1, it will return the width of the text. If metric is 2, it will return the height of the text. If metric is 3, it will return the max fitting length of the text using 'a' as the max extent. Example getdrawtextmetric(\"Hello\",12,1,0); getedgedist (obj netnode, num edgenum) Gets the distance of the edge of a network node Description Returns the distance of the specified edge of the network node. Example getedgedist(current, 1) getedgespeedlimit (obj netnode, num edgenum) Gets the speed limit of the edge of a network node Description Returns the speed limit of the specified edge of the network node. Example getedgespeedlimit(current, 1) getentrytime (obj object) Gets the time that a flow item entered the current object it is in Description Returns the last entry time of the item (the time the flowitem last entered another object). Example time() - getentrytime(item) geteventtime (str EventName, num mode[1/2/3]) Gets a UserEvent's event time Description Returns a UserEvent's event time. Mode: 1 - Repeat time intervals, 2 - Exact event time, 3 - Time until event fires Example double remainingtime = geteventtime(\"myevent\",3); getfilebrowse (str extension, str extensiondescription[, str defaultreturn, str location, num savemode, node filelist]) Opens a standard windows file browser dialog window Description This command opens a standard Windows file browser dialog window. The files shown in the window will have the extensions defined in extension. Different extensions should be separated by semicolons (;) in extension. The text passed as description will be used in the file browser to describe the type of file to open. This command returns a string that is the path of the selected file. If no file is selected, or Cancel is pressed, the command returns an empty string. See filebrowse() command. Example string shapefile = getfilebrowse(\"*.3ds; *.wrl\",\"3D shape files\"); This sets the variable shapefile to the path of a file chosen from a file browser that displays files with the .3ds and .wrl extensions. getfilesindirectory (str directory, str extension, node destnode) Description Retrieves all files in the specified directory that match the specified extension, and populates the content of destnode with nodes holding the path to each matching file. The command returns the number of matching files that were found. The extension parameter should be the specific three (or sometimes four) letter extension that you want to get. For example, if you want all .fsm model files, specify the string \"fsm\". Also, if you pass \"directories\" as the extension parameter, then the command will retrieve the list of directories inside the directory. To get all files, no matter the extension, pass \"*\" as the extension parameter. File paths will be set on the string data (as opposed to the name) of nodes inserted into destnode. Example treenode destnode = Model.find(\"Tools\").subnodes.assert(\"Files\"); int nrfiles = getfilesindirectory(documentsdir(), \"*\", destnode); for(int i = 1; i <= nrfiles; i++) { mpt(\"file: \"); mpt(destnode.subnodes[i].value); mpr(); } getframe (obj object) Gets the current Shape Frame being drawn for object Description Returns the current 3D shape frame that is being drawn for the object. If the 3D shape assigned to the object was named myshape.3ds, and if two additional 3D shapes with file names myshapeFRAME1.3ds and myshapeFRAME2.3ds resided in the same directory as myshape.3ds, then the two additional files would be loaded into FlexSim automatically at the same time myshape.3ds was loaded, and setting the object's frame from 0 to 1 to 2 would change the object's shape to each of the shapes defined by the three files in order. Example if(getframe(current) == 3)) setframe(current, 5); getinput (obj involved) Deprecated, use Object.stats.input.value Description This command is deprecated. Use Object . stats .input.value instead. Returns the input statistic of the involved object. Example double inval = getinput(current.centerObjects[1]); getiteminvolved (obj item) Gets the object reference stored in the FixedResource involved variable for the item Description This returns the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getitemvar, and setiteminvolved commands, to store variables on the items the object receives. Example getiteminvolved(current.first) getitemsendto (obj item) Gets the value of the evaluated sendto for the item Description This returns the value of the evaluated sendto for the item if it is in a FixedResource and has been released. Example getitemsendto(item) getitemstate (obj item) Gets the FixedResource state of the flowitem Description Returns the FixedResource state of the flowitem. This will be one of 3 values: FRSTATE_INQUEUE: The flowitem is in-process; it has not been released yet. FRSTATE_READY: The flowitem has been release, but has not found a downstream object that is ready to receive it. FRSTATE_MOVEREQUESTED: The flowitem has been released, and a downstream object is ready to receive it, but the item is waiting to get picked up by a transport. For more information, refer to the FixedResource documentation. Example getitemstate(so()) getitemtype (obj object) Deprecated, use labels Description This command is deprecated. Use labels instead. Returns the itemtype value of a flow item. Example getitemtype(so()) getitemvar (obj item, num var) Gets the value of a FixedResource variable for the item Description This returns the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example getitemvar(current.first, 3) getkinematics (node infonode, num querytype[, num kinematicindex, num updatetime/traveldist]) Gets information from the specified kinematics operation Description Gets information from the specified kinematics operation. For more information, refer to the help documentation on kinematics. Example getkinematics(current.labels[\"kinematics\"], KINEMATIC_ARRIVALTIME, 1, current.size.x); getlabel (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the value of an object's label. Example getlabelnum (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the number value of an object's label. Example getlabelstr (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the string value of an object's label Example getlastacquiredresource (node resource, node token) Description Gets the last object acquired by the token from the resource. Example treenode operator = getlastacquiredresource(operatorResource, token); getlastfiletype () Description For developer use. Returns the type of the last file saved. 1 = Model file 2 = Project file 3 = View file 4 = Session file 0 = Other file Example if (getlastfiletype()) {pt(\"Known file type\"); pr(); } getlinecontrollerdata (obj linecontroller, num datatype, num column) For Dynamo use Description For Dynamo use. Returns data about the LineController's current job, 1 = ProdID, 2 = LineNum, 3 = Target, 4 = StartTime. 5 = Extra Column Example getlinecontrollerdata(current,1,0); getmodelunit (num querytype) Description Returns information about the model's unit settings. FlexSim's typical units are: time - 1 second, length - 1 meter, volume - 1 liter, mass - 1 kilogram. Also may return a name or abbreviation of the current model's units querytype can be one of the following values: TIME_MULTIPLE returns the number of seconds represented by each time unit in the current model LENGTH_MULTIPLE returns the number of meters represented by each length unit in the current model FLUID_MULTIPLE returns the number of liters represented by each fluid unit in the current model FLUID_TYPE returns 0 if the fluid units represent volume, or returns 1 if the fluid units represent mass DATE_TIME_NODE returns a reference to the date/time node in the model units tree START_TIME returns the start time in seconds (since Jan 1, 1601) START_TIME_NODE returns a reference to the start time node in the model units tree CURRENT_TIME returns the current time in seconds (since Jan 1, 1601) CURRENT_TIME_NODE returns a reference to the current time node in the model units tree STOP_TIME returns the next stop time in seconds (since Jan 1, 1601) STOP_TIME_NODE returns a reference to the stop times node in the model units tree START_YEAR returns the year associated with the start time as a number START_MONTH returns the month associated with the start time as a number betweeen 1 (Jan) and 12 (Dec) START_DAY returns the day associated with the start time as a number, where 1 indicates the first day of the month START_DAYOFWEEK returns the day associated with the start time as a number, where 0 indicates Sunday START_HOUR returns the hour associated with the start time as a number between 0 and 23 START_MINUTE returns the minute associated with the start time as a number between 0 and 59 START_SECOND returns the second associated with the start time as a number between 0 and 59 START_MILLISECOND returns the millisecond associated with the start time as a number between 0 and 999 CURRENT_YEAR returns the number of years since the model start time CURRENT_DAY returns the number of days since the model start time CURRENT_HOUR returns the number of hours since the model start time CURRENT_MINUTE returns the number of minutes since the model start time CURRENT_SECOND returns the number of seconds since the model start time CURRENT_MILLISECOND returns the number of milliseconds since the model start time CURRENT_YEAR_OF_TIME returns the year associated with the current time as a number CURRENT_MONTH_OF_YEAR returns the month associated with the current time as a number between 1 (Jan) and 12 (Dec) CURRENT_DAY_OF_MONTH returns the day associated with the current time as a number, where 1 indicates the first day of the month CURRENT_DAY_OF_WEEK returns the day associated with the current time as a number, where 0 indicates Sunday CURRENT_HOUR_OF_DAY returns the hour associated with the current time as a number between 0 and 23 CURRENT_MINUTE_OF_HOUR returns the minute associated with the current time as a number between 0 and 59 CURRENT_SECOND_OF_MINUTE returns the second associated with the current time as a number between 0 and 59 CURRENT_MILLISECOND_OF_SECOND returns the millisecond associated with the current time as a number between 0 and 999 TIME_NAME returns the name of the model time units TIME_PLURAL_NAME returns the plural name of the model time units TIME_ABBREVIATION returns the abbreviation of the model time units LENGTH_NAME returns the name of the model length units LENGTH_PLURAL_NAME returns the plural name of the model length units LENGTH_ABBREVIATION returns the abbreviation of the name of the model length units FLUID_NAME returns the name of the model fluid units FLUID_PLURAL_NAME returns the plural name of the model fluid units FLUID_ABBREVIATION returns the abbreviation of the name of the model fluid units START_TIME_STR returns the start time as a string, formatted by the date and time formats CURRENT_TIME_STR returns the current time as a string, formmatted by the date and time formats STOP_TIME_STR returns the next stop time as a string, formatted by the date and time formats TIME_FORMAT returns the time format used to format date/time strings DATE_FORMAT returns the date format used to format date/time strings Example getmodelunit(LENGTH_MULTIPLE) getmodelunitnum (num querytype) Description This command is deprecated. Use getmodelunit() instead. Example getmodelunitstr (num querytype) Description This command is deprecated. Use getmodelunit() instead. Returns a name or abbreviation of the current model's units. Example getmoverecord (num record) Deprecated Description This command is deprecated. Returns a movement record that has been recorded for the Full History Report. A movement record is created every time a flowitem moves from one object to another if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a MoveRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnummoverecords(). getmoverecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the movement record that is passed in as the first parameter to the function. This record is the return value from a call to getmoverecord(). The value passed to this function as the second parameter indicates which value from the movement record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The ItemID of the flowitem whose movement is recorded by the record. 2 = The time the flowitem moved. 3 = The object that the flowitem moved from. This is returned as an int and should be converted to a treenode using tonode(). 4 = The object that the flowitem moved to. This is returned as an int and should be converted to a treenode using tonode(); 5 = The itemtype of the flowitem at the time it moved. Example See the example for getnummoverecords(). getname (node thenode) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnetnode (obj object, num nodenr) Gets the nth network node connected to object with an A connection line Description Returns the nth network node connected to the object with a \"blue\" or \"station\" connection line Example getnetnode(current, 1) getnetnodespline (obj netnode, num edgenr) Gets a reference to the spline head of netnode's edge edgenr Description Returns a reference to the spline head for the specified edge of the network node. You can use spline() commands to then access location data for that spline. Note that the spline head may not be inside the network node you're passing, but rather may be in the network node on the other side of the edge. You can use the isedgeforward() command to query whether the spline is inside the network node. If not, then spline percentages disances passed to the spline() command will be backwards. Example treenode splinehead = getnetnodespline(netnode, 2); getnetworkdistance (num fromnetnoderank, num tonetnoderank) Gets the network distance between two network nodes Description Returns the network distance between the network nodes. Note that the network nodes are referenced by their member ranks, not by the pointer to the network node. Use rankfromnetnode() to get a network node's member rank. Example getnetworkdistance(rankfromnetnode(current), rankfromnetnode(current.outObjects[1])); getnextnetnode (num fromnn, num tonn) Gets the rank of the next network node from fromnn in order to get to tonn Description Returns the rank of the next network node to go to from one network node in getting to the destination network node. The return value and parameters will all be network node member ranks. Use rankfromnetnode() to get the member rank of a network node, and netnodefromrank() to get the network node from the member rank. Example treenode nextnode = netnodefromrank(getnextnetnode(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\")))); getnextnetnodeoutport (num fromnn, num tonn) Gets the output port of the network node fromnn in order to get to tonn Description Returns the output port, or edge number, to go to in getting from a source network node to a destination network node. Example int outport = getnextnetnodeoutport(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\"))); getnextparametersobject (obj startobject, str guifocus, num doguifocusclass, num searchforward) Description For developer use. Used in parameters window to access the next object when the \"Next\" button on the parameters window is pressed. Example Refer to object parameters properties windows in the view tree getnodename (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnodenum (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getnodestr (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getnroftasks (obj tasksequence) Gets the number of uncompleted tasks in the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the number of tasks that still need to be completed in the tasksequence (including the current task). Example if(getnroftasks(mytasksequence) > 5) pt(\"There are more than 5 tasks in the tasksequence queue.\"); getnummoverecords () Deprecated Description This command is deprecated. Returns the number of movement records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the move records that have been recorded for (int rec = 1; rec <= getnummoverecords(); rec++) { int record = getmoverecord(rec); pd(getmoverecordvalue(record,0)); pt(\" \"); pd(getmoverecordvalue(record,1)); pt(\" \"); pf(getmoverecordvalue(record,2)); pt(\" \"); pt(getmoverecordvalue(record,3).name); pt(\" \"); pt(getmoverecordvalue(record,4).name); pt(\" \"); pd(getmoverecordvalue(record,5)); pt(\" \"); } getnumpeopleresources (obj group [, num availability{0=available/1=acquired}, num priority]) Description Get the number of available/acquired objects in a people resource group. If a priority value is passed resources will also be considered available if a request of that priority would preempt the resource. Example int numAvailable = getnumpeopleresources(Group(\"PodA\")); getnumstaterecords () Deprecated Description This command is deprecated. Returns the number of state change records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the state change records that have been recorded for (int rec = 1; rec <= getnumstaterecords(); rec++) { int record = getstaterecord(rec); pd(getstaterecordvalue(record,0)); pt(\" \"); pf(getstaterecordvalue(record,1)); pt(\" \"); pd(getstaterecordvalue(record,2)); pt(\" \"); pt(getstaterecordvalue(record,3).name); pr(); } getobjectimageindex (obj object) Deprecated, do not use. Description This command is deprecated. Do not use. Returns the index number of the bmp or jpeg image currently assigned to the base of the object. Example getobjectimageindex(item); getobjectshapeindex (obj object) Gets the index number of the 3D shape assigned to object Description Returns the index number of the 3D shape currently assigned to the object. Example getobjectshapeindex(item); getobjecttextureindex (obj object) Gets the index number of the image assigned as the texture for the object's 3D shape Description Returns the index number of the bmp or jpeg image currently assigned as the default texture for the object's 3D shape. Example getobjecttextureindex(item); getoutput (obj involved) Deprecated, use Object.stats.output.value Description This command is deprecated. Use Object . stats .output.value instead. Returns the output statistic of the involved object. Example double outval = getoutput(current.centerObjects[1]); getparenttoken (node token) Description Deprecated. Use Token . parent . Example treenode parentToken = getparenttoken(token); getparentwindow (HWND window) Description For developer use. Returns the parent window of the specified window. Use windowfromnode as a parameter to pass into this function. Example getpath (str truncatedpath) Returns the full file path of the truncated path Description Takes a truncated, or relative file path, and returns the full file path. Example string fullpath = getpath(\"fs3d\\\\texturebox.wrl\"); getpeopleresourceutilization (obj object/group[, num mode{0=ByState/1=ByAcquires}]) Description Returns the utilization percentage of a people object or the average of all members of a people group. Example double utilization = getpeopleresourceutilization(Group(\"PodA\")); getpickingdrawfocus (obj theview, num whattoget, num pickedid) Gets the picking draw focus Description Gets the picking draw focus. Used in OnClick to know what was clicked. The whattoget parameter can be PICK_TYPE, PICK_OBJECT, or PICK_SECONDARY_OBJECT. pickedid should be PICK_PRESSED for the \"pressed\" pick, PICK_HOVERED for the \"hovered\" pick, PICK_RELEASED for the \"released\" pick, or PICK_MOVED for \"mouse moved\" pick. Example int picktype = getpickingdrawfocus(view, PICK_TYPE, 0); getpickingmode (obj view) Gets the picking mode for view Description Gets the picking mode for the specified view. Example int isselectionmode = getpickingmode(view); getpreempt (node tasksequence) Gets the preempt value of the tasksequence Description Returns the preempt value of the tasksequence. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example if(getpreempt(mytasksequence) == PREEMPT_ONLY) pt(\"This tasksequence is a preempting task\"); getpriority (node tasksequence) Gets the priority value of the tasksequence Description Returns the priority value of the tasksequence. Example if(getpriority(mytasksequence) > 5) pt(\"This tasksequence has a priority greater than 5.\"); getprocessflowvar (obj/str processFlow, str varname[, node token]) Description Gets the value for the Process Flow Variable. The processflow parameter can either be a reference to the Process Flow object in the Tools or the name of the Process Flow object. Example double processTime = getprocessflowvar(processflow, \"processTime\"); treenode processor = getprocessflowvar(processflow, \"processor\", token); getproperty (str filename, num property) Description For developer use. Gets the value for the specified property in the specified file. Example getproperty(modeldir() + \"MyModel.fsm\",1); getquerycolcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the number of columns in the result table for the last call to query(). Example getquerymatchcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the total number of rows in the result table for the last call to query() Example getquerymatchtablerow (str/num table, num matchRow) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the source table's row number associated with a matched row in the last query() result. table - If a string, it is the name of the table as defined in the FROM statement. If you used an alias, it should be the table's alias. If a number, it should be the 1-based index of the table in the FROM statement. If there is only one table in the query, this should be 1. For multiple tables, the first table in the FROM is 1, the second is 2, etc. matchRow - The 1-based row of the result table of the query. Note that this command will not work if you use aggregator functions such as MIN(), MAX(), AVG(), etc. in the SELECT clause. When aggregators are used, this command just returns the number of rows in the source table. Example getqueryvalue (num row, num/str col) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns a value in the result table for the last call to query() row - The 1-based row number of the result table col - The 1-based column number of the result table, or the name of the result column. If you have defined aliases in the select statement, the column name should be the alias. Example getrank (node thenode) Deprecated, use treenode.rank Description This command is deprecated. Use treenode . rank instead. Gets the rank of a child node in its parent's sub-tree. Example getreportnum (node report, int column, int rowsback) For Dynamo use Description For Dynamo use. Returns the value from a Report object that is in the specified column. The row is determined by subtracting the rowsback parameter from the number of rows in the table. Example double myval = getreportnum(current,3,0); getrunstate ([int checkProcessingEvent]) Returns 1 if the model is currently running, 0 if not Description Returns 1 if the model is currently running, 0 if not. If you pass a true value, returns whether an event is currently executing. Example if(!getrunstate()){msg(\"Model Stopped\", \"The model is not running right now.\",1);} If executed from the script window, this message will only appear if the model is stopped. gets (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getsdtvalue (node sdtNode, str valName) For developer use Description Primarily for developer use only. Returns the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example getshapeindex (str name) Gets the index of a loaded 3D shape Description Get the index of a loaded shape by its file path name. The file path name used in this command must use double backslashes as shown in the example. Use View -> Media Files to see a complete list of currently loaded shapes with their associated file path names and indexes. Example getshapeindex(\"fs3d\\\\Operator\\\\BasicOperator\\\\Chest.3ds\"); getsoundindex (str name) Gets the index of a loaded sound Description Returns the index of a loaded sound by the name associated with it in the project/media/sounds folder. Example getsoundindex(\"C:/My Sounds/APPLAUSE.WAV\"); getstat (node object, str name, int flag [, var p1, var p2, var p3]) Returns the statistic value for the given object Description It is preferred to use Object . stats instead. Gets the specified statistic from the given object. name - The name of the statistic. Valid names can be enumerated using function_s(object, \"enumerateStatistics\", targetNode) . Documentation for the meaning of the various statistics that an object provides should be found in each object's documentation. The documentation may include spaces in the names of the statistics, for readability. In passing these as the name parameter to getstat(), you should remove all spaces. flag - Can be one of the following values STAT_CURRENT - returns the current value of this statistic STAT_MIN - returns the minimum value of this statistic STAT_MAX - returns the maximum value of this statistic STAT_AVERAGE - returns the average value of this statistic STAT_TIME_AT_VALUE - returns the total simulation time the stat spent at a given value (requires an additional p1/p2/p3 parameter designating the desired value). This is only valid if the stat is tracking its history or profile data, such as in objects' standard \"State\" statistics. See below for more information on this. p1 , p2 , and p3 are for providing \"requirements\" to resolve the correct statistic. For example, a list has several per-partition statistics. In order to get a partition's statistic, you need to pass the desired partition ID as p1. Requirements depend on the statistic that is being retrieved. There are also several special stat names that you can use. They are: \"State\", \"Output\", \"Input\", \"Content\", \"Staytime\". If you use one of these names, the command will return the corresponding standard statistic of the object. Examples: getstat(object, \"Output\", STAT_CURRENT) - returns the current (total) output of the object (same as object.stats.output) getstat(object, \"Content\", STAT_AVERAGE) - returns the average content of the object getstat(object, \"State\", STAT_CURRENT, 0) - returns the current state of the object (same as object.stats.state().value) getstat(object, \"State\", STAT_TIME_AT_VALUE, 0, STATE_IDLE) - returns the total idle time of the object (0 designates the state profile, i.e. the default state profile) getstat(object, \"Staytime\", STAT_MAX) - returns the maximum recorded stay time of the object Note that some stats that do not make sense will not return valid data, such as average state, or average output. STAT_TIME_AT_VALUE If you want to get the STAT_TIME_AT_VALUE access, the statistic needs to track either historical or profile data. If it is an object's standard \"State\" statistic, FlexSim will automatically make it track its profile data, so you don't need to do any extra work for that. For other statistics, however, you will need to explicitly \"subscribe\" to the statistic to make it track its profile or history data. Historical data records each change of value and the corresponding simulation time of that value change. Profile data records the total time the variable was at each value. Only non-negative integer values are valid for profile data. To subscribe to a tracked variable, first find where the tracked variable statistic is in the tree. For example if it's the \"Content\" statistic, you'll likely find it at object>stats/stats_content. Then call the following command on the node: function_s(statNode, \"addSubscriber\", needsHistory, needsProfile, persist). The needsHistory and needsProfile parameters are booleans telling which data you want to track. The persist is a boolean that tells if you want it to track these statistics indefinitely going forward. The tracked variable tries not to continue tracking extra data if it is not needed. If nobody subscribes to its data \"persistently\", then it will discontinue recording the data if it doesn't get subscribers for a while (I think after 5 or so model resets with no subscribers). Recording historical data will allow you to get the STAT_TIME_AT_VALUE access. However, using historical data for getting STAT_TIME_AT_VALUE is slower than if you track profile data. With historical data, it must traverse the entire history to calculate STAT_TIME_AT_VALUE, whereas if you track profile data, it stores the total time at the value directly in the profile data. Example getstatenum (obj object [, num stateprofilenr]) Deprecated, use Object.stats.state().value Description This command is deprecated. Use Object . stats .state().value instead. Returns the state of an object in numeric form. Example getstatenum(current); getstaterecord (num record) Deprecated Description This command is deprecated. Returns a state change record that has been recorded for the Full History Report. A state change record is created every time an object changes state if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a StateRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnumstaterecords(). getstaterecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the state change record that is passed in as the first parameter to the function. This record is the return value from a call to getstaterecord(). The value passed to this function as the second parameter indicates which value from the state change record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The time of the state change. 2 = The state that the object changed to. 3 = The object that changed state. This is returned as an int and should be converted to a treenode using tonode(). Example See the example for getnumstaterecords(). getstatestr (obj object) Deprecated, use Object.stats.state().valueString Description This command is deprecated. Use Object . stats .state().valueString instead. Returns the state of an object as a text string. Example getstatestr(current); getstatetableutilization (Table stateTable, TrackedVariable stateProfile) Description Returns the utilization of a state profile given a state table. See State Table for more information on how to create and modify a state table. Example getstatetableutilization(Table(\"StateTable1\"), Model.find(\"Processor1\").as(Object).stats.state()) getstream (node object) Returns a unique random stream associated with the object Description Returns a unique random stream associated with the object. Returns the number stored in the object's stream attribute. If the object does not yet own a stream attribute, or if its stream attribute is 0, FlexSim will assert the attribute and assign it a unique stream number. If the object passed into the function does not have object data, it will store the unique stream in a subnode. This subnode will be destroyed on model reset and reassigned during the model run as needed. Assigned streams start at stream 101 and increase as they are assigned. Example uniform(0, 1, getstream(current)) getsystemmetric (num metric[, HWND win]) Description For developer use. Returns system screen metrics. These values for metric return the following values (if not specified, values are in logical units): 1: desktop width 2: desktop height 3: the left position of the work area of the monitor under the cursor 4: the right position of the work area of the monitor under the cursor 5: the top position of the work area of the monitor under the cursor 6: the bottom position of the work area of the monitor under the cursor 7: the width of window win in pixels 8: the height of window win in pixels 9: the left position of the monitor under the cursor 10: the right position of the monitor under the cursor 11: the top position of the monitor under the cursor 12: the bottom position of the monitor under the cursor 13: the width of window win 14: the height of window win Example getsystemmetric(1) gettablecell (str/node/num table, num row, num column) Deprecated, use Table.cell Description This command is deprecated. Use Table . cell (). Example gettablecols (str/node/num table) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Gets the number of columns in the table. Example gettableheader (string/num/node table, num row/col, num rowcolnr) Deprecated, use Table.getColHeader() or Table.getRowHeader() Description This command is deprecated. Use Table . getColHeader () or Table . getRowHeader () instead. Gets the value of the header field of a table. Example gettablenum (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the number value in a table cell. Example gettablerows (str/node/num table) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Gets the number of rows in the table. Example gettablestr (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the text value in a table cell. Example gettableviewselection (obj tableview, num val) Description For developer use. Returns values based on the blue selection range in a table view: val 1 returns the start row, val 2 returns the start col, val 3 returns the end row, val 4 returns the end col. Example int startrow = gettableviewselection(c,1); gettaskinvolved (obj tasksequence, num taskrank, num involvednum) Gets a reference to the first or second involved object of the task of the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task classes instead. Returns a reference to either the first or second involved object for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which involved object it is (1 or 2) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the involved of the object's currently active task. Example treenode loaditem = getinvolved(gettasksequence(current.centerObjects[1], 0), 2, 1); gettasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a task sequence Description This command is deprecated. Use the Dispatcher and TaskExecuter class methods and properties instead. Returns a reference to the task sequence that has the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to its currently active task sequence. Example treenode mytasksequence = gettasksequence(current.centerObjects[1], 5); gettasksequencequeue (obj dispatcher) Gets a reference to the dispatcher's tasksequence queue Description This command is deprecated. Use the Dispatcher class properties instead. Returns a reference to the specified dispatcher's task sequence queue. Example treenode tsqueue = gettasksequencequeue(current.centerObjects[1]); gettaskstate (obj tasksequence, num taskrank) Gets the state of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Gets the state of the task at rank taskrank of tasksequence. The following are task states: TASKSTATE_UNFINISHED TASKSTATE_ACTIVE TASKSTATE_FINISHED TASKSTATE_COORDINATED Example if(gettaskstate(gettasksequence(current.centerObjects[1], 0), 2) == TASKSTATE_ACTIVE)... gettasktype (obj tasksequence, num taskrank) Gets the task type of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the task type for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task type of the object's currently active task. Example if(gettasktype(gettasksequence(current.centerObjects[1], 0), 2) == TASKTYPE_LOAD)... gettaskvariable (obj tasksequence, num taskrank, num variablenum) Gets the tasksequence variable for the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns a reference to one of the four task variables for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which task variable it is (1 - 4) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task variable of the object's currently active task. Example double myvar = gettaskvariable(gettasksequence(current.centerObjects[1], 0), 2, 1); gettenavigator (obj taskexecuter) Gets the current navigator that a taskexecuter is connect to Description Returns the current navigator that a taskexecuter (TE) is connected to, either DefaultNavigator or DefaultNetworkNavigator. Example treenode navigator = gettenavigator(current); gettenetnode (obj taskexecuter) Gets the current network node that a taskexecuter is attached to with an A Connection Description Returns the current network node that a taskexecuter (TE) is attached to with a red line. Example treenode netnode = gettenetnode(current); gettenetworkinfo (obj taskexecuter, obj destobj, num info) Gets information regarding the current state of a taskexecuter on a node network Description Returns information regarding the current state of a taskexecuter on a node network. Valid queries are as follows: NETWORK_INFO_DEST_NET_NODE_RANK - returns the destination column/rank of the network node that the TE would travel to were he to be given a travel task to destobj. Usually this will simply be the network node attached to destobj, but if multiple network nodes are attached to destobj, the command will find the closest one. NETWORK_INFO_ORIGIN_NET_NODE_RANK - returns the origin column/rank of the network node that the TE would start from were he to be given a travel task to destobj. Usually this will simply be the current network node where the TE is located, but if that network node has virtual exits, the command will find the virtual exit that renders the shortest travel distance. NETWORK_INFO_DISTANCE - returns the shortest travel distance to the destination object through the network. NETWORK_INFO_CUR_DIST_ALONG_EDGE - Only valid when the TE is actively doing a travel task. This returns the current distance that the TE has traveled along its current network edge. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_ORIGIN_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the origin node at which the TE starts its current travel operation. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_DEST_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the destination node to which the TE is traveling for its current travel operation. For this query, destobj should be NULL. Example int destrank = gettenetworkinfo(current, NULL, NETWORK_INFO_CUR_TRAVEL_DEST_RANK); gettextureindex (str name) Gets the index of a loaded image Description Get the index of a loaded image by name. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to a texture's name. Example gettextureindex(\"myimage\") gettoken (obj instanceObject, obj/str activity, num index) Description Gets the token at the index of the activity for the given owner object (instance). Example treenode token = gettoken(fixedResource, activity, 3); treenode token = gettoken(processor3, \"Wait for Conveyor\", 2); gettokenbyid (num id [, obj/str processFlow]) Description Deprecated. Use Token . byID . Example treenode token = gettokenbyid(54); treenode token = gettokenbyid(23, \"ProcessFlow2\"); gettokenid (node token) Description Deprecated. Use Token . id . Example int tokenID = gettokenid(token); gettokens (obj instanceObject, obj activityOrAsset[, num flags]) Description Gets all the tokens \"inside\" an activity or shared asset. For activities, this is the current set of tokens in the activity. For resources, it is the set of tokens who have acquired the resource. For zones, it is the set of tokens that have entered the zone. For a list, it is the set of tokens who have been pushed to the list. Returns an Array containing the result. instanceObject - The object associated with the desired process flow instance. For general process flows this is the same as the process flow itself. For object process flows, it is the 3D object, i.e. task executer or fixed resource, associated with the process flow instance. If executed from within process flow activity logic, this will usually just be \"current\". If you pass NULL here, it will get tokens for all instances. activityOrAsset - The target activity or shared asset. If NULL, the command will return all active tokens in the entire process flow instance. flags - Defines optional flags. If GET_TOKENS_REQUESTS is passed for a shared asset, it will return the set of tokens requesting the shared asset (i.e. tokens waiting to enter a zone, tokens back ordering on a list, etc.). Example Array tokensInActivity = gettokens(current, getactivity(processFlow, \"Wait For Exit\")); Array resourceOwners = gettokens(current, getactivity(processFlow, \"Resource1\")); gettotalnroftasks (obj tasksequence) Gets the total number of tasks that were ever added to the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the total number of tasks that were ever added to the tasksequence. Example gettotalnroftasks(mytasksequence) gettrackedvariable (str/node trackedvar [, num valtype] ) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example gettreedrawposition (node destnode, node roottree) Description For developer use. Example getundorecordid (obj record) Description Returns the id of the specified undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = getundorecordid(getcurrentundorecord(view)); getutilizedobject (obj dispatcher, obj involved, obj station, num utilizednr) Gets a reference to an operator that is currently executing a utilize task Description Finds and returns a reference to an operator that is currently executing a utilize task with the given involved and station variables. If multiple operators are being used, then utilizednr allows you to distinguish which one you want to reference. Example treenode op = getutilizedobject(current.centerObjects[1], item, current, 1); getvarnode (obj object, str/num var) Gets a node reference to an object's variable Description Returns a reference to the specified variable's node in the specified object. Example treenode schedule = getvarnode(current,\"schedule\"); getvarnum (obj object, str/num var) Gets the value of an object's numeric variable Description Returns the numeric value stored in the specified variable of the specified object. Example double speed = getvarnum(current,\"speed\"); getvarstr (obj object, str/num var) Gets the value of an object's string variable Description Returns the string data stored on the specified variable of the specified object. Example pt(getvarstr(model().subnodes[2],\"creationtrigger\")); getvartype (var) Deprecated, use Variant.type Description This command is deprecated. Use Variant . type instead. Example getvartype(myVar) getviewhwnd (obj view, int windowtype) Gets the HWND handle for a certain window of a view Description Returns a windows HWND handle for a certain window of a view. Each view may use several windows to display data properly. For example, a tree view contains the main window that displays the tree as well as a window that displays the string or number data on a node for editing, as well as a window that displays/edits the name of a node. The windowtype parameter specifies which window handle you want returned, as follows: 1 - the main control (same as using windowfromnode()) 2 - datacontrol - The scintilla code control that displays data of a node in a tree, and in a script view 3 - control - the control that displays/edits a highlighted node's name in the tree 4 - statusbar - the statusbar of the view if it has one 5 - tooltip - the tooltip control of the view 6 - pointercontrol - I think this is only used in a tree that displays list heads Example sendwindowmessage(getviewhwnd(treeview,2), SCI_SETSEL, 4, 8); getviewmenu (obj view, int menutype) Description For developer use. Returns the HMENU reference of the menu based on the menutype. Menutypes: 1: floatingtreemainmenubar 2: custommenu 3: popupmenu 4: thecustompopupmenu Example var menu = menubelow(getviewmenu(c, 4), 0); getviewscale (obj view) Description For developer use. Returns the view scale factor. Example getviewscale(sv()) getviewtext (obj/num window) Description For developer use. Returns the text of a window. Example getviewtext(sv()) glBegin (num primitive) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glColor3d (num red {0-1}, num green {0-1}, num blue {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glColor4d (num red {0-1}, num green {0-1}, num blue {0-1}, num alpha {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glDisable (num setting) Deprecated, use fglDisable() Description This command is deprecated. Use fglDisable() instead. Example glEnable (num setting) Deprecated, use fglEnable() Description This command is deprecated. Use fglEnable() instead. Example glEnd () Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glIsEnabled (num setting) Returns 1 if the OpenGL setting is enabled, 0 otherwise Description Returns 1 if the OpenGL setting is enabled, 0 otherwise. See fglEnable() for list of draw settings. Note that this is an extremely slow operation and is discouraged. You can refer to standard OpenGL documentation for more information if needed. Example glIsEnabled(GL_LIGHTING) glLineWidth (num linewidth) Specifies the line width for subsequent lines draw in OpenGL Description Specifies the line width for subsequent lines drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glLineWidth(3); glLoadIdentity () Deprecated, use fglLoadIdentity() Description This command is deprecated. Use fglLoadIdentity() instead. Example glMatrixMode (num mode) Deprecated, use fglMatrixMode() Description This command is deprecated. Use fglMatrixMode() instead. Example glNormal3d (num x, num y, num z) Deprecated, use fglNormal() Description This command is deprecated. Use fglNormal() instead. Example glNormal3d(1,0,0); globallist (str listName) Deprecated, use List(\"GlobalListName\") Description This command is deprecated. Use List (\"GlobalListName\") instead. References a global list by name. Example glPointSize (num pointsize) Specifies the point size in pixels for subsequent vertices drawn in OpenGL Description Specifies the point size in pixels for subsequent vertices drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glPointSize(5); glPopAttrib () Deprecated, do not use Description This command is deprecated. Do not use. Example glPopMatrix () Deprecated, use fglPopMatrix() Description This command is deprecated. Use fglPopMatrix() instead. Example glPushAttrib (num attribsetting) Deprecated, do not use Description This command is deprecated. Do not use. Example glPushMatrix () Deprecated, use fglPushMatrix() Description This command is deprecated. Use fglPushMatrix() instead. Example glRotated (num degrees, num x, num y, num z) Deprecated, use fglRotate() Description This command is deprecated. Use fglRotate() instead. Example glScaled (num x, num y, num z) Deprecated, use fglScale() Description This command is deprecated. Use fglScale() instead. Example glTexCoord2d (num x 0-1, num y 0-1) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glTranslated (num x, num y, num z) Deprecated, use fglTranslate() Description This command is deprecated. Use fglTranslate() instead. Example glVertex3d (num x, num y, num z) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example go ([num fast]) Starts the simulation run Description This command starts the simulation run. If there are any events in the event queue, they will occur when the clock reaches them. If there are no events in the queue, the clock will stop. This command will not reset the simulation. If fast is 1, then it will not bind objects before starting. This improves speed if you are stopping and starting the simulation often. See also runfunction(). Example stop(); if (msg(\"Model Stopped\",\"Continue?\")==1) { go(); } This stops the model then prompts the user if it should start again. If the user presses \"OK\", the model continues from where it was stopped. graphtohistogram (obj graph, obj histogram, num start, num end, num res, num xyformat) Description For developer use. Generate histogram data from a list of values. This command will generate a histogram inside the node histogram based on the occurrence table given by graph. Mainly used internally by objects. The starting value of the histogram is specified as start. The ending value of the histogram is specified as end. The number of buckets in the histogram is specified as res. If xyformat is 0, it assumes that the graph is a y format occurrence table. If xyformat is 1, it assumed the graph is an xy format occurrence table. Similar to makehisto(). Refer to makehisto() for more information on these similarities. Example graphtohistogram(so(),so().next,1,10,5,0) groupaddmember (str group, obj member) Deprecated, use Group.addMember() Description This command is deprecated. Use Group . addMember () instead. Adds an object to a group. Example groupconnectfrom (obj object, str character) Description For developer use. Connects the object passed in as param(1) to every selected object in the model using the letter passed in as param(2). Typically used in GUIs. Example groupconnectfrom(selectedobject(ownerview(c)),\"A\"); groupconnectto (obj object, str character) Description For developer use. Connects every selected object in the model to the object passed in as param(1) using the letter passed in as param(2). Typically used in GUIs. Example groupconnectto(selectedobject(ownerview(c)),\"A\"); groupcopyconnections (obj object) Description For developer use. Copies the connections on the object passed in as param(1) onto every selected object in the model. Typically used in GUIs Example groupcopyconnections(selectedobject(ownerview(c))); groupmember (str group, num member) Deprecated, use Group[] Description This command is deprecated. Use Group [] instead. Gets a reference to a group member. Example groupnummembers (str group) Deprecated, use Group.length() Description This command is deprecated. Use Group . length instead. Gets the number of members in a group. Example groupremovemember (str group, num/obj member) Deprecated, use Group.removeMember() Description This command is deprecated. Use Group . removeMember () instead. Removes an object from a group. Example groupsetnames (node namenode, num startnum, num append) Description For developer use. Sets the names of all of the selected objects in the model to the string data on namenode. If append is 1, then a number is appended to the end of each name, starting at startnum and increasing by 1 for each object. Example groupsetnames(\"WeldStation\",1,1); gt (num value1, num value2) Deprecated, use the > operator Description This command is deprecated. Use the > operator instead.. Example help () Description For developer use. Display the help system window. Example help() helpcommands (node destnode, num what, str command) Description For developer use. Used to get information about a command. Enter the command name in parameter 3. The return value will be copied into the string data of destnode. \"what\" defines what information is needed, as follows: 1 - returns the xml fragment string that contains the documentation for that command Example helpcommands( hidelabel (obj object[, num off/on]) Deprecated, use switch_hidelabel() Description This command is deprecated. Use switch_hidelabel() instead. This command sets the specified object to show or hide its name and basic statistics on the screen. A value of 1 is show and a value of 0 is hide. If the name and statistics are hidden for an object, they will not be visible in any view window. View windows also have an attribute that controls this connector display of all objects in the view. Example hidelabel(current,0); This sets the object referenced by current so that its name and statistics will not be drawn. hideports (obj object[, num off/on]) Deprecated, use switch_hideconnectors() Description This command is deprecated. Use switch_hideconnectors() instead. This command sets the specified object to show or hide its ports and connections. A value of 1 is show and a value of 0 is hide. If the ports and connections are hidden, they will not be visible in any view window. Example hideports(current,1); This sets the current object to show its ports and connections in all view windows. hideprogressbar () Description For developer use. Hides the progress bar Example hideprogressbar(); highestconnection () Gets the highest numbered server connection index Description Returns the highest numbered server connection index. Example int highconn = highestconnection(); highlightviewtext (node view, num pos, num span, num mode span/lines) Highlights text in a code edit window Description Highlights text in a scintilla code edit window. This is used by the flexscript syntax checker to go to highlight a syntax error in the code edit window. You can either highlight whole lines or individual characters. To highlight individual characters, specify mode as 2. For lines specify mode as 1. For lines, specify pos as the start line to highlight(the first line is line 1) and span the number of lines to highlight. For individual characters, specify pos as the start position and span as the number of characters to highlight (position 0 is the position to the left to the first character) Example highlightviewtext(c, 0, 5, 2) This will highlight the first 5 characters of the scintilla text edit. highlightviewtext(c, 1, 1, 1) This will highlight the first line of the scintilla text edit. holditem (obj item) Holds the item if it has already been released Description Holds the specified item if it has already been released. This in effect \"unreleases\" the item so that it will not leave. This only applies if the item is in a FixedResource and it has already been released and has not been \"allocated\" to a downstream object (it is not waiting for a transport). Example holditem(item) hours (num hours) Gets the number of model time units in the number of hours Description Return the number of model time units in the given number of hours. Example hours(1) Returns 3600 seconds. howmanyattributes () Description For developer use. Returns the number of attributes. Example howmanyattributes() howmanycommands () Description For developer use. Returns the number of commands. Example howmanycommands() hypergeometric (num trials, num successes, num size[, num stream]) Returns a random sample from a hypergeometric distribution Description hypergeometric( t , m , n , stream ) is a discrete probability distribution used to represent the number of successes in t draws without replacement from a population of size n containing exactly m success states. Example i <no parentheses> Description For developer use. This command is used only in event functions. It is used to reference the object that was passed to the value of 0 is) command as the involved object. Example string involvedname = i.name; This sets involvedname to the name of the object that was passed to value of 0 is) as the involved object. if (num condition) { } Description If the condition is true (i.e. the conditional expression returns a 1), then the statement immediately following the closing parenthesis will be executed. If braces { } are what immediately follows the closing parenthesis, then the block of code within the braces will be executed when the condition is true. Nothing is executed if the condition is false (returns a 0), unless an \"else\" has been defined. Refer to the Users Manual for more information. Example if (item.Weight < 100) msg(\"TRUE\", \"\"); This example will display a popup message saying \"TRUE\" when the item's Weight label has a value less than 100 importdataset (node datatree, str filename, num format) Description Import tree dataset from a Comma Separated Value (CSV) file. datatree should be the node to import the data into. There are 3 possible formats to import. If format is 1, then the data is imported as a table, meaning each sub-node of datatree is a row in the table, and each sub-node of each row is a cell in the table. This is the same as using the importtable() command. If format is 2, then the data is imported as a simple data series. The csv file is assumed to have one column, and each row's value is imported into a sub-node of datatree. If format is 3, then the data is imported as a series of x,y pairs. The csv file is assumed to have 2 columns. Row 1 column 1 of the csv file is imported as sub-node 1 of datatree, row 1 column 2 is imported as sub-node 2 of datatree, row 2 column 1 is imported as sub-node 3 of datatree, and so forth. Example importdataset(so(),\"C:\\\\mydataset.csv\",1) importtable (node importnode, str filename[, num importcolheaders = 0, num importrowheaders = 0, str listseparator = 0, str decimalseparator = 0, str thousandseparator = 0]) Imports table data into importnode from a csv file. When importing both row and column headers, the first value in the file will be skipped. When importing into a bundle table, each field will use the data type of its first imported cell (row 1). Description Imports table data into the node from a csv (comma-separated values) file. Example importtable(current.labels[\"data\"], \"C:/modeldata.csv\", 1, 1) in (num inches) Gets the number of model length units in the number of inches Description Return the number of model length units in the specified number of inches. Example in(8) inc (node thenode, num amount) Deprecated, use += operator Description This command is deprecated. Use += operator instead. myNode.value += 2; Increments the value of a node by a defined amount. Example inc(current.mylabel,1) inheritcode () Description For developer use. This command is used for subclass function inheritance. Call this in an event function to call that same event function on the object's classobject. In C++ or DLL code, call _inheritcode(callpoint); Example Flexscript: inheritcode(); C++ or DLL: _inheritcode(callpoint); inititem (obj item) Initializes the FixedResource variables of a flowitem Description Initializes the FixedResource variables of a flowitem, usually done when the flowitem first enters the fixed resource. This is usually already done for you, but may be used in some exceptional cases when developing your own BasicFR object behavior. Example inititem(item) initkinematics (node infonode, obj/num object/x[, num flags/y, num z, num rx, num ry, num rz, num flags, num unused]) Initializes a kinematic operation Description Initialize a kinematic operation. Infonode is a blank node that can hold kinematic information. Object is the object that you want kinematics to be performed on. flags defines various flags for how you want it to behave. The unused parameter deprecated, i.e. you can define this through the flags parameter. Refer to kinematics documentation in the user manual for more information. Example initkinematics(current.labels[\"kinematics\"], current) inittrackedvariable (node theNode, num type[, num startValue, num flags]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example inobject (obj object, num inputportnum) Deprecated, use Object.inObjects[] Description This command is deprecated. Use Object . inObjects [] instead. Reference the upstream object connected to a downstream object's input port. Example inputopen (obj object) Returns 1 if the object's input is open, 0 otherwise Description Returns 1 if the object's input is open, 0 otherwise. The closeinput(), stopinput(), openinput(), and resumeinput() commands affect the return value of this command. The commands like closeip() and closeallip() do NOT affect the return value. Example if(inputopen(current)) current.input.close; insertallocatetask (obj tasksequence, obj dispatcher, num priority, num preempt [, num noblock] ) Inserts an allocate task into the coordinated task sequence Description Inserts an Allocate Task into the specified coordinated task sequence. By default the allocation task is a blocking task, but if noblock is 1, then the allocation does not block further execution of the task sequence. Example insertallocatetask(newts, current.centerObjects[2], 0, 0); insertcopy (obj originalobject, obj containerobject) Creates a copy of the flowitem and moves it into the container object Description Creates a copy of the flowitem and moves it into the container object, causing the OnReceive event of the container to execute. Example insertcopy(item, current); Creates a duplicate of the flowitem and moves it into the current object. insertdeallocatetask (obj tasksequence, num allocationkey [, num noblock] ) Inserts a deallocate task into the coordinated task sequence Description Inserts a Deallocate Task into the specified coordinated task sequence to deallocate the resource specified by allocationkey. By default this task will block, but if noblock is 1, it will not block. Example insertdeallocatetask(newts,forkkey); insertproxytask (obj tasksequence, num executerkey, num type [, num/obj involved1, num/obj involved2 , num var1, num var2, num var3, num var4]) Inserts a proxy task into the coordinated task sequence Description Inserts a proxy task into the specified coordinated task sequence. Example insertproxytask(newts, dispatchkey, TASKTYPE_TRAVEL, current.centerObjects[1], NULL,0,0,0,0); insertsynctask (obj tasksequence, num taskkey) Inserts a sync task into the coordinated task sequence Description Insert a Sync Task for the specified task in a coordinated task sequence. Example insertsynctask(newts, travelkey); inserttask (obj tasksequence, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Inserts a new task to the task sequence Description This command is deprecated. Use TaskSequence.addTask() instead. Inserts a task into the specified tasksequence of the specified type. Depending on the task type, the remaining parameters will have a different meaning. Refer to the Task Type Quick Reference guide in the Users Manual for an explanation of the parameters associated with each task type. Example inserttask(ts, TASKTYPE_TRAVEL, current, NULL); installpackage (str path+filename) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. Install a service pack (.fpk). Example installpackage(\"C:/mypak.fpk\") integrityscan (obj class, obj start) Description For developer use. Checks that attributes have not been deleted from model objects, based on their class object. A search is done starting at the given starting node. Example integrityscan(rank(library(1)),model()) inversegaussian (num location, num scale, num shape[, num stream]) Returns a random sample from an inversegaussian distribution Description inversegaussian( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ³ ⁄ α Probability Density Functions: Possible Applications: Used to model the time to complete some tasks. Comments: The inversegaussian( γ , 1, α ) and wald( γ , α ) distributions are the same. As γ approaches infinity, the distribution becomes more like the normal (Gaussian) distribution. The β parameter has elements of a shape parameter since it affects the skewness and kurtosis (width). Example double repairtime = inversegaussian(60, 2, 4, 5); The repairtime variable is set equal to a inversegaussian distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. inverseweibull (num location, num scale, num shape[, num stream]) Returns a random sample from a inverseweibull distribution Description Generates a continuous random variate from a inverseweibull distribution with parameters as defined. Example invertedweibull (num location, num scale, num shape[, num stream]) Returns a random sample from an inverted weibull distribution Description Generates a continuous random variate from an inverted weibull distribution with parameters as defined. Example ip <no parentheses> Description For developer use. Node pointer meaning 'involved port'. Alias for 'eventdata'. Example ipavailable (obj object, num inputportnum) Description Returns a 1 if the upstream object through the specified object's input port is available. Particularly, it checks if the upstream object exists, if it is stopped, if its output is open, and if the connected output port is open. This function returns 0 if the upstream object isn't available. Example ipavailable(current,1) ipopen (object object, num inputportnum) Description Returns a 1 if the inputportnum on object is open. Otherwise returns zero. Example ipopen(current,1) ipopno (obj object, num inputportnum) Output port number that is connected to inputportnum of object Description This command returns the output port number that is connected to inputportnum of object. Example int otherport = ipopno(current,1); This sets otherport to the port number of the output port that the current object's first input port is connected to. ipready (obj object, num inputportnum) Description Returns a 1 if the inputportnum of object is open and the connecting output port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the input of this object or the output of the connecting object are currently open. Example ipready(current,1) isclasstype (obj object, num/str classtype) Compares the object to classtype, returns 1 for yes, 0 for no Description Returns whether or not the object is of the given classtype. 1 means yes, 0 means no. Possible classtype parameters are: CLASSTYPE_FLEXSIMOBJECT CLASSTYPE_FIXEDRESOURCE CLASSTYPE_TASKEXECUTER CLASSTYPE_NETWORKNODE etc. Example isclasstype(current, CLASSTYPE_DISPATCHER); isedgeforward (obj netnode, num edgenr) Returns 1 if the network node's edge is forward, 0 otherwise Description Returns 1 if the network node's edge is \"forward\" meaning when created, the connection was dragged FROM this network node to the other network node. If the edge is forward, then the spline head is contained by this network node, and the spline distance values go forward from this network node. Example isedgeforward(current, 2) iskeydown ([num key]) Description For developer use. Returns 1 if the specified keyboard key is being held down. If the first parameter is not passed, then the function will return 1 if any key is being held down. Otherwise, the function returns 0. Example iskeydown(74) isprojectcompiled () Description For developer use. Returns 1 if the project has been compiled. Example isprojectcompiled() item <no parentheses> Description This command is deprecated. This should not be used as a special command with the setitem command anymore. Instead, declare a treenode variable type as item, then use item in your code as any other variable type. Example treenode item = model().subnodes[3]; pt(item.name); This sets the object that is ranked 3 in the model to item and prints its name to the output console. iterate (num start, num end, num step) {} Deprecated, use for() or while() commands Description This command is deprecated. Use for() or while() commands instead. Repeatedly execute the following block {} with counter value traversing from start to end being incremented by step. The count command can be used to access the current counter value on each iteration. The return value of count will depend on which iteration is currently being executed. Example iterate(1,9,2) { pd(count);pr(); } Prints the following numbers to the outputconsole: 1,3,5,7,9 johnsonbounded (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a johnson bounded distribution Description Generates a continuous random variate from a johnson bounded distribution with parameters as defined. Example johnsonunbounded (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a johnson unbounded distribution Description Generates a continuous random variate from a johnson unbounded distribution with parameters as defined. Example keyboardfocus ([HWND/node focus]) Gets/Sets keyboard focus Description Used in GUI development. Gets/Sets the keyboard focus. If the focus parameter is left out, then this command will return a reference to the current keyboard focus as an HWND handle. Otherwise, it will set the focus to the keyboard focus to the passed parameter. Use windowfromnode() or getviewhwnd() to get access to the HWND handle of a view node. Example keyboardfocus(windowfromnode(edit)); keyedclick (obj object, num key[, obj view]) Description For developer use. Executes the object's keyed click functionality (X, C, V) Example keyedclick(model().last, 88) label (obj object, str/num label) Deprecated, use treenode.labels[] Description This command is deprecated. Use treenode . labels [] instead. Gets the node reference to an object's label. Example laplace (num location, num scale[, num stream]) Returns a random sample from a laplace distribution Description Generates a continuous random variate from a laplace distribution with parameters as defined. Example last (node container) Deprecated, use treenode.last Description This command is deprecated. Use treenode . last instead. Reference a parent node's last child node. Example lastclickednode () Description For developer use. Returns a pointer to the last clicked node. Example lastclickednode() lastkey () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkey() lastkeydown () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeydown() lastkeyup () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeyup() le (num value1, num value2) Deprecated, use the <= operator Description This command is deprecated. Use the <= operator instead. Example library () Reference to the library node in the main tree Description This command returns a reference to the library node in the main tree. It is used as a fast way of referencing the library. Example treenode SourceObj = library().find(\"?Source\"); This sets the variable SourceObj so that it references the node called Source in the library. license () Gets the current license type Description Get the current license type Example licenseactivation (num operation[, str buffer, var p1, node callback]) Description For developer use. Do various licensing operations. Example licenseactivation(LA_SET_ACTIVATION_SERVER_PARAMS,\"@localhost\",0); listbackorders (obj list[, var partitionId]) Deprecated, use List.backOrders() Description This command is deprecated. Use List . backOrders () instead. References to a list's back orders. Example listboxrefresh (obj listbox) Refreshes the contents of a listbox Description Refreshes the contents of a listbox. Example listboxrefresh(c.find(\"../Collision Members\")) listenerinfo (int info) Description For developer use. This command returns information for use within the OnListen and OnPreListen event functions. The information returned is information that was passed to the event you are listening to. Info 1 will return the engine event code. Engine event codes have macros such as SM_MESSAGE and SM_DRAW. Info 2 and 3 return pointers to associated treenodes. To set up listening, you add a \"listeners\" attribute to the object you want to listen to (Object A). The listeners attribute should have subnodes that are couplings to the object(s) that you want to listen from (Object B). Before an event fires on Object A, Object B's OnPreListen event function will fire. After an event first on Object A, Object B's OnListen event function will fire. You can also filter events by additing a subnode with number data below Object B's coupling node. The number data should be a bitwise sum of the bitshifted event codes you want to listen for. If the coupling has no subnode, the object will default to listening to every event. Example treenode current = c; treenode involved = i; int code = listenerinfo(1); treenode associated = tonode(listenerinfo(2)); treenode coupling = tonode(listenerinfo(3)); print(\"OnListen\"); print(\"current: \", current); print(\"involved: \", involved); print(\"code: \", code); print(\"associated: \", associated); print(\"coupling: \", coupling); listentries (obj list[, var partitionId]) Deprecated, use List.entries() Description This command is deprecated. Use List . entries () instead. References to a list's pushed entries. Example listinlist (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of occurrence of value in list. The list, of length qty, is searched and the position in the list of the value val is returned by this function. Example listinlist(5,3,2,1,2,3,4) This returns the index number 4 because 3 is the fourth number in the list of 5 numbers. listmax (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of highest value. The list, of length qty, is searched and the position in the list of the highest value is returned by this function. Example listmax(5,2,1,2,3,4) This returns a 5 because 4 is the largest value and it is fifth in the list of five numbers. listmaximum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Highest value. The list, of length qty, is searched and the value of the highest value is returned by this function. Example listmaximum(5,2,1,2,3,4) This returns a 4 because it is the highest value in the list. listmean (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Average of values. The mean of the values in the list, of length qty, is returned by this function. Example listmean(5,2,1,2,3,4) This returns 2.5. listmin (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of lowest value. The list, of length qty, is searched and the position in the list of the lowest value is returned by this function. Example listmin(5,2,1,2,3,4) This returns 2 because 1 is the lowest value and it is second in the list. listminimum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Lowest value. The list, of length qty, is searched and the value of the lowest value is returned by this function. Example listminimum(5,2,1,2,3,4) This returns 1 because that is the lowest value in the list. listmul (num qty, num val [, num a,...]) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of list. The product of all the values in the list, of length qty, is returned by this function. Example listmul(5,2,1,2,3,4) This returns the value 48. listpull (str/obj list, str/node query, num requestNum [, num requireNum, str/node/num puller, str/node/num partitionId, num flags]) Deprecated, use List.pull() Description This command is deprecated. Use List . pull () instead. Pulls one or more entries from a list. Example listpush (str/obj list [, str/node/num pushVal, str/node/num partitionId, ...]) Deprecated, use List.push() Description This command is deprecated. Use List . push () instead. Pushes an entry onto a list. Example listremove (obj entryOrBackOrder) Deprecated, use List.backOrders()[backOrderNum].remove() or List.entries()[enterNum].remove() Description This command is deprecated. Use List . backOrders ()[backOrderNum].remove() or List . entries ()[entryNum].remove() instead. Removes an entry or back order from its owning list. Example listsub (num qty, num val [, num a,...]) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. Subtraction of list. The list, of length qty, is traversed and the first value has all subsequent values subtracted from it and then is returned by this function. Example listsub(5,2,1,2,3,4) listsum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the + operator instead. Sum of values. The sum of all the values in the list, of length qty, is returned by this function. Example listsum(5,2,1,2,3,4) loadimage (str file, str name) Description For developer use. Load an image directly. An image file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded images. Each image has a corresponding name and an index. This command will return the index corresponding to the loaded image. Example loadimage(\"c:/myimage.bmp\",\"myimage\") loadselectedfromfile (obj highlightedobj) Description For developer use. Loads previously saved tree file into the highlighted object. Example loadselectedfromfile(selectedobject(ownerview(c))) loadsound (str path+filename) Deprecated, use soundload() Description This command is deprecated. Use soundload() instead. A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. The sound must be a .wav file. Example int applauseindex = loadsound(\"c:/My Music/APPLAUSE.WAV\"); loadstate () Description For developer use. Loads the state of the project. If savestate() has been executed, then this command must be executed before you can run the model again. Example loadstate(); loadthreedobject (str file, str name) Description For developer use. Load a 3D model directly. A shape file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the loaded shape. Example loadthreedobject(\"c:/myshape.wrl\",\"myshape\") loaduserlibrary (str libfile [, obj libraryview, num reloadmedia, num changeitemcurrent, num autoinstall]) Description For developer use. Loads a library from the path specified in libfile. If reloadmedia is true, autoloadallmedia() will be called after loading the library. If autoinstall is true, the library's load and new model autoinstall objects will be added to the model. The libraryview and changeitemcurrent parameters are no longer used. Example loaduserlibrary(cdir() + \"libraries/mylib.fsl\"); local (num index) Deprecated, use local variables Description This command is deprecated. Use local variables like treenode, int, double, string instead. Gets a reference to an indexed local variable as a treenode. You must use localarray() to define how many local variables are used and what data type they should have. Can only be used in flexscript. Example setnodenum(local(1),4); Sets the 1st variable in the localarray to 4. localarray (num qty[, num datatype]) Deprecated, use Array class Description This command is deprecated. Use the Array class instead. Allocate general purpose local array with the given quantity of local variables. Type can be: 1 = num, 2 = str, 3 = coupling, 4 = obj. May only be used in flexscript. Example localarray(1,4) log (num value) Deprecated, use Math.log() Description This command is deprecated. Use Math . log () instead. Natural Logarithm of value. Example log10 (num value) Deprecated, use Math.log10() Description This command is deprecated. Use Math . log10 () instead. Base-10 Logarithm of value. Example logarithmic (num theta[, num stream]) Returns a random sample from a logarithmic distribution Description Generates a discrete random variate from a logarithmic distribution with parameters as defined. Example logevent (num/str index/name[, obj object, obj involved, num p1, num p2, num p3, num p4]) Description Logs an event as an entry in the Event Log. Use the name passed into registereventtype() or the index returned by registereventtype(). Example logevent(\"MyEventType\",current,item,port); logistic (num location, num scale[, num stream]) Returns a random sample from a logistic distribution Description Generates a continuous random variate from a logistic distribution with parameters as defined. Example loglaplace (num location, num scale, num shape[, num stream]) Returns a random sample from a log laplace distribution Description loglaplace( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β α ² ⁄ ( α ²− 1) for α > 1 variance = β ² α ² ( 2 α ² + 1 ) ⁄ ( α ² - 1 )² ( α ² - 4 ) for α > 2 Probability Density Functions: Possible Applications: Rarely used in defining processing times. Comments: This distribution is also known as the double-exponential distribution because its density curve is essentially two exponential curves back-to-back. Example loglaplace(0, 2, 8, 5); A loglaplace distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 8, and random stream number 5. loglogistic (num location, num scale, num shape[, num stream]) Returns a random sample from a log logistic distribution Description loglogistic( γ , β , α , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( 0, ∞ ) α is the shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β ( π ⁄ α )csc( π ⁄ α ) for α > 1 variance = β ²( π ⁄ α ){2csc(2 π ⁄ α ) − ( π ⁄ α )[csc( π ⁄ α )]²} for α > 2 Possible Applications: Used to model the time to perform some task. Example loglogistic(0, 1, 2, 5); A loglogistic distribution with a location (shift) of 0, a scale of 1, a shape factor of 2 and random stream number 5. lognormal (num location, num normalmean, num normalstdev[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. lognormal( location, normalmean, normalstdev, stream ) is a continuous probability distribution. Inputs: location : ( - ∞, ∞ ) normalmean such that ( Math.exp( normalmean ) > 0 ) normalstdev such that ( normalstdev > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( location , ∞ ) mean = location + Math.exp( normalmean + normalstdev² ⁄ 2) variance = Math.exp( 2*normalmean + normalstdev² ) [ Math.exp( normalstdev² ) − 1 ] Probability Density Functions: Possible Applications: Used to model the time to perform some task, and to model quantities that are the product of a large number of other quantities. It can also be used as a rough model in the absence of data. Comments: The probability density for the lognormal distribution takes on shapes similar to gamma( normalstdev, normalmean ) and weibull( normalstdev, normalmean ) densities for normalstdev > 1, but can have a large spike close to x=0 that is often useful. Example lognormal2 (num location, num scale, num shape[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. Example double cycletime = lognormal2(0, 29.8, 0.31, 5); Set the cycletime variable to a lognormal2 distribution with location parameter 0, scale parameter 29.8, shape parameter 0.31, and random stream number 5. lognormalmeanstdev (num mean, num stdev[, num stream]) Returns a random sample from a lognormal distribution Description This command is an alternative to the lognormal2 command, used in the absence of data. You can specify the mean and standard deviation, and the command will calculate from those parameters the proper location, scale, and shape parameters for the lognormal2 command, and return a sample from that distribution. Note that the shape of the distribution is pre-defined to be a bell-shaped curve with a reasonably long right tail. Hence this command isn't as flexible as the lognormal2 command. This command, similar to the triangular distribution, should be used in the absence of data, where you know the mean and standard deviation of the distribution, and you assume that the distribution is right-skewed (it has a longer right tail), but you do not have a real data set to fit to a distribution. Refer to lognormal2 for more information. Relating to the diagram describing the lognormal2 distribution, the lognormalmeanstdev command uses a normalstdev/shape value of 0.75 to define its shape. Note that since the shape of the distribution is hard-set, depending on the mean and standard deviation values, this may return a negative value. Example double cycletime = lognormalmeanstdev(10, 2); This example will return a random value that follows a right-skewed lognormal distribution with a mean of 10 and standard deviation of 2. lt (num value1, num value2) Deprecated, use the < operator Description This command is deprecated. Use the < operator instead. Example main () Deprecated, use maintree() Description This command is deprecated. Use maintree() instead. Get the main tree node. This is one of the two primary databases of FlexSim. Also called the \"Project Tree\". The other primary database is the views tree node also called the \"View Layout Tree\" Example main() mainmenucommand (str name) Description For developer use. Execute a command from the stock main menu. Example mainmenucommand(\"File|Open...\") maintenance (num command[, num state, str strparam]) Description For developer use. Set a maintenance switch. The first parameter designates the operation. The second parameter designates a state to set it to. Maintenance switches: 0. print this list 1. deadlinks 2. atttrbute bind method (0=names, 1=indices, 2=bootstrap) 3. numberprecision 4. display binding report 5. usercollisions 6. post-onsend 7. loadsavemode 8. disablefscheck 9. disablefspreprocess 10. splinetension 11. streamalizer 12. immediately load extended docs 13. save reps at experiment end 14. suppress object library compile 15. suppress global compile 16. set runtime info 17. get runtime info 18. bind c++ functions 19. autorebind c++ functions onoff 20. get presentation mode 21. refresh main menu 22. is optquest enabled 23. flypaths in seconds units 24. chached ports on/off 25. bind on reset on/off 26. set category name (user command group is 22, other 23, 24+ is available) 27. object sizermode 0. default 1. 3-axis 28. show hidden nodes in tree 29. hide 3d cursor 30. supress simclock redraw 31. use parser two 32. grid draw settings: bitwise field: 0x1-auto expand grid, 0x2-show grid axes, 0x4-show grid origin 1000. DDE Example maintenance(0) maintree () Reference to the main tree Description Returns a reference to the main tree. When defining string paths to nodes in the main tree, MAIN can be used as in the following example node(\"MAIN:/project/exec/globals/cppfunctions\"); Example maintree().find(\"project/exec/globals/cppfunctions\"); makeactive (obj viewwindow) Description For developer use. Makes the specified window active. Example makeactive(ownerview(c)); makearray (num qty) Deprecated, use the Array class Description This command is deprecated. Use Array (qty) instead. Array array = Array(4); Initializes a local array. Example makehisto (obj datalist, obj histocontainer, num nrofbuckets) Description For developer use. Builds a histogram structure from the data list and puts it in the destination container node with the given number of buckets. This is similar to graphtohistogram() except that this command creates a more complete structure. To illustrate the operator instead., view a FlexSim object's attribute tree. The makehisto command will create the entire stucture of object>stats/staytime/staytimehisto, whereas graphtohistogram will only populate object>stats/staytime/staytimehisto/data. makehisto also assumes a standard, y data series structure, meaning each sub-node of datalist is its own data point (they are not paired as x/y values). Example makehisto(c.find(\"@>objectfocus+\"), c.find(\">histogram\"), 20) max (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example maxof (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example mediafile (str filename) Description This command will search (by default in fs3d folder) for the filename and returns the full path plus filename if found. Example string fullpath = mediafile(\"fs3d\\\\queue_n_color.3ds\"); This example will return the string \"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\queue_n_color.3ds\" mediapath (str projectpath, str filepath, int mode) Description Returns strip of the project pathfile from filepath to make it relative, where mode denotes as 1=default, 2=getfile, 3=getpath. Example int mode = 1; mediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\program\", \"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\operator.3ds\", mode); If mode=1, returns \"program\" If mode=2, returns \"C:\\Program Files\\Flexsim4\\\" If mode=3, returns \"C:\\Program Files\\Flexsim4\\fs3d\\operator.3ds\" mediareset () Description For developer use. Unload all media. This will unload all currently loaded media from FlexSim: images; shapes; and sounds. Example mediareset() memberadd (obj childobject, str parentname, num type) Description If type = 1, then the childobject is added as a member to a Time Table named \"parentname\". If type = 2, then the childobject is added as a member to a MTBFMTTR object named \"parentname\". This is useful for dynamically assigning operators to different shifts for instance. Example memberadd(model().subnodes[2],\"TimeTable1\",1) memberremove (obj childobject, str parentname, num type) Description If type = 1, then the childobject is removed as a member from a Time Table named \"parentname\". If type = 2, then the childobject is removed as a member from a MTBFMTTR object named \"parentname\". see memberadd() Example memberremove(model().subnodes[2],\"TimeTable1\",1) memberremoveall (str parentname, num type) Description If type = 1, then all members are removed from a Time Table named \"parentname\". If type = 2, then all members are removed from a MTBFMTTR object named \"parentname\". see memberremove() Example memberremoveall(\"TimeTable1\",1) menubelow (HMENU menu, num index) Description For developer use. Get the menu item with the specified index (starting with 0) in the specified menu. Example var menu = menubelow(menumain(),4); menucheck (HMENU menu, num index, num on/off) Description For developer use. Set the check state of the menu item with the specified index (starting with 0) in the specified menu. Example menucheck(menumain(), 2, 1) menugray (HMENU menu, num index, num on/off) Description For developer use. Set the gray state of the menu item with the specified index (starting with 0) in the specified menu. Example menugray(menumain(), 2, 1) menumain () Description For developer use. Returns the HMENU reference of the main menu. Example var menu = menumain(); mergegetlanestate (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergegetlanestate(current, 5) mergegetnumlanes (obj mergeController) Description Deprecated, use Conveyor.MergeController class. Example mergegetnumlanes(current) mergeislaneclear (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergeislaneclear(current, 5) mergereleaselane (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergereleaselane(current, 1) mesh (node meshnode, int pervertexattribs, int flags) Creates an empty mesh and assigns it to meshnode Description Creates an empty mesh and assigns it to meshnode. The pervertexattribs takes a bit-wise ORed combination of the following attributes: MESH_POSITION (Added by default) MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Flags can be any of the following: MESH_STATIC_DRAW MESH_DYNAMIC_DRAW MESH_INDEXED Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE, MESH_STATIC_DRAW) meshaddindex (node meshnode, int index) Adds an indexed vertex to a mesh Description Adds an indexed vertex to the mesh associated with meshnode. This command is ignored if the mesh does not have a MESH_INDEXED flag. Example int newindex = meshaddindex(node(\"/mesh\",model()), 4) meshaddvertex (node meshnode) Adds a vertex to a mesh Description Adds a vertex to the mesh associated with meshnode. Returns the index of the added vertex. Example meshaddvertex(Model.find(\"mesh\")) meshdraw (node meshnode, int drawmode, int offset, int count [, int stride]) Draws a mesh Description Draws the mesh associated with meshnode. The value for drawmode can be any of the following: GL_POINTS GL_LINES GL_LINE_LOOP GL_TRIANGLES GL_TRIANGLE_STRIP GL_TRIANGLE_FAN Offset specifies which vertex index to begin at. Count specifies how many vertexes to set the drawmode. Stride specifies how many vertex indexes to skip between. For an indexed meshed, stride is ignored. Example meshdraw(node(\"/mesh\",model()), GLTRIANGLES, 0, 3, 0) meshinfo (node meshnode, int type[,int index, int param]) Gets the specified information from a mesh Description Gets the specified information from the mesh associated with meshnode. Index is the index of the requested vertex (base 0). Type is specified as one of the following for the mesh (index and param ignored): MESH_PER_VERTEX_ATTRIBS MESH_PER_MESH_ATTRIBS MESH_FLAGS MESH_NR_VERTS MESH_GET_INDEX - Returns the vertex index for the given index (only valid with MESH_INDEXED flag) The following are vertex specific types: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 If specifying a vertex, the following are valid for param: MESH_COLOR_RED MESH_COLOR_GREEN MESH_COLOR_BLUE MESH_COLOR_ALPHA MESH_POS_X MESH_POS_Y MESH_POS_Z MESH_TEX_S MESH_TEX_T Example double xposition = meshinfo(Model.find(\"mesh\"), MESH_POSITION, 6, MESH_POS_X) meshsetattrib (node meshnode, int attribid, double param1 [, double param2, double param3, double param4]) Adds/sets the value of attribid to the vertindex of a mesh Description Sets the value of attribid to be applied to the entire mesh associated with meshnode. The following attributes can be used as the attribid: MESH_NORMAL MESH_AMBIENT MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 MESH_SPECULAR MESH_SHININESS MESH_EMISSIVE Example meshsetattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) meshsetvertexattrib (node meshnode, int vertindex, int attribid, double param1 [, double param2, double param3, double param4]) Sets the value of attribid at the vertindex of a mesh Description Sets the value of attribid at the vertindex of the mesh associated with meshnode. The following attributes can be used as the attribid: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Note: The attribid must be defined previously when creating the mesh. Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE4, MESH_STATIC_DRAW) meshsetvertexattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) min (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2. Example minof (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2 Example minutes (num minutes) Gets the number of model time units in the number of minutes Description Return the number of model time units in the given number of minutes. Example minutes(1); Returns 60 seconds. model () Reference the model's root node Description This command returns a reference to the model node in the main tree. It is used as a fast way of referencing the model. Example treenode SourceObj = Model.find(\"Source1\"); This sets the variable SourceObj so that it references the node called Source1 in the model. modeldir () Gets the path to the currently open model's directory Description Returns that path of the currently open model's directory. Example modeldir(); modeleditmode (num/str mode) Description For developer use. Sets the current model edit mode. You can query the current mode with -1. Example modeleditmode(\"AConnect\"); module (num type, node libnode) Deprecated Description This command is deprecated. Use the DLL functionality provided with version 4 instead. Used with dll plugins. The type can be: MOD_LOAD (1) MOD_UNLOAD (2) MOD_GETFUNCTION (3) MOD_RUNFUNCTION (4) Example module(MOD_UNLOAD,main.find(\"project/exec/dll/1\")) moveobject (obj object, obj location[, num outport]) Moves object to the specified location Description This command moves the object to the specified location through the specified port. The specified port does not have to actually exist, this value is used by the receiving location to be able to reference the port the object came in through. When an object moves into location, the OnReceive event function of location is executed. This includes the OnEntry trigger function. Explicitly calling this on a flowitem with events queued up for it may cause problems. Only use when you know that no events are pending for the object being moved. Example moveobject(current.first,current.centerObjects[1]); This moves the first object that is inside the object referenced by current to the object connected to current's first center port. moveselectedintohighlighted (obj highlightedobj [, node selectedcontainer]) Description For developer use. Moves all selected objects in the model into the highlighted object. Example moveselectedintohighlighted(selectedobject(ownerview(c))) movetablecol (str/num/node table, num column, num newcolumn) Deprecated, use Table.moveCol() Description This command is deprecated. Use Table . moveCol (). instead. Moves a column of a table to newcolumn. Example movetablerow (str/num/node table, num row, num newrow) Deprecated, use Table.moveRow() Description This command is deprecated. Use Table . moveRow (). instead. Moves a row of a table to newrow. Example movetasksequence (obj tasksequence, obj dispatcher) Moves tasksequence into the dispatcher's tasksequence queue Description This command is deprecated. Use TaskSequence.move() instead. Moves the specified tasksequence into the specified dispatcher's tasksequence queue. WARNING!! This command should never be called on a tasksequence that is already being executed by a TaskExecuter. Example movetasksequence(tasksequence, current.centerObjects[1]); mpd (num value) Print an integer to the system console Description Prints the integer value to the system console Example mpd(6); mpf (num value) Print a floating point value to the system console Description Prints the floating point value to the system console. Example mpf(7.69); mph (num milesperhour) Gets the number of model length/time units in the number of miles/hour Description Return the number of model length/time units in the specified number of miles/hour. Example mph(9) mpr () Print a new line to the system console Description Prints a new line to the system console Example mpr(); mpt (str printvalue) Print text to the system console Description Prints the text printvalue to the system console. Example mpt(\"System console printout\"); msg (str caption, str text [, num buttontype]) Display a message dialog Description This command creates a message box with a title bar displaying the caption and the text written inside the box. The buttons displayed on the message box are based on the value for buttontype. If OK or Yes are pressed, msg() returns 1. If No is pressed, msg() returns 0. The value returned when Cancel is pressed depends on the buttontype. If buttontype is 3, Cancel returns -1; otherwise it returns 0. If buttontype is not specified, it is assumed to be 0. Values for buttontype: 0 - OK, Cancel 1 - OK 2 - OK, Cancel 3 - Yes, No, Cancel 4 - Yes, No Example if (msg(\"Finished\", \"Close the database?\") == 1) dbclose(); msgparam (num param) Within an OnMessage trigger, get the value of a message parameter Description Returns a parameter passed to with the Object . message () method or sendmessage() or senddelayedmessage() commands. Only used in OnMessage triggers. Example int msgtype = msgparam(1); treenode item = msgparam(2); Array data = msgparam(3); msgsendingobject () Within an OnMessage trigger, get a reference to the object sending the message Description Returns a reference to the object that sent the message as defined in the Object . message () method or sendmessage() or senddelayedmessage() command. Only used in OnMessage triggesr. Example treenode sender = msgsendingobject; mul (num value1, num value2) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of a and b. This returns the result of the arithmetic expression value1*value2. Example double product = mul(3,4); multisorttable (str/node/num table, num col1[, num col2, num col3, ...]) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by each column (ascending for positive columns, descending for negative columns). Example nametomodelpath (obj node, obj object) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Sets the name of a node to the path of the object relative to the model. Example nametomodelpath(curlistnode, current); ncols (node thenode) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Example ne (num/node value1, num/node value2) Deprecated, use the != operator Description This command is deprecated. Use the != operator instead. Example negbinomial (num successes, num prob[, num stream]) Returns a random sample from a negative binomial distribution Description Generates a discrete random variate from a negative binomial distribution with parameters as defined. Example netnodefromrank (num rank) Returns the network node member at rank rank Description Takes a network node member rank and returns the actual reference to the network node. Example treenode netnode = netnodefromrank(5); next (obj object) Deprecated, use treenode.next Description This command is deprecated. Use treenode . next instead. Reference the next sibling of a node. Example node (str relativepath[, obj startnode]) Deprecated, use treenode.find() Description This command is deprecated. Use treenode . find () instead. Reference a node by named path from a root node. Example nodeadddata (node thenode, num type:num/str/ptr/obj) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Add data to thenode, ie DATATYPE_NUMBER. Example nodebreak (node a) Description For developer use. Breaks a coupling pointer on a node that has coupling data that is pointing to another node. If the node is part of a bi-directional coupling, the other coupling is not affected. Example nodebreak(so()) nodedeldata (node thenode) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Removes all data from the node. Example nodefromwindow (num window) Description For developer use. Get the node of a window handle Example nodefromwindow(windowfromnode(sv())) nodefunction (node thenode [, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode. Thenode must be toggled as either a C++ node or a Flexscript node. If the node is C++, the model must be compiled before calling this command. Any parameters that need to be passed to the function are passed as par1, par2, etc. Up to 10 parameters may be passed. The values that are passed using this command must all be numbers, but can then be accessed and recast from within the function called using the command param(x) where x is the number of the parameter. Example nodefunction(node_v_entrytrigger,tonum(item),portnum); nodefunctionlisten (node theNode, node relayNode[, num flags, par1, par2, ... par10]) Description For developer use. This command will create a listening mechanism where whenever nodefunction() is called on theNode, relayNode will also be executed. flags is a bitwise mask of one of the following values: NFL_PRE_LISTEN : The listening function will be called before theNode is called. NFL_LISTEN : (default) The listening function will be called after theNode is called. NFL_PERSIST : The listener will persist across model resets. NFL_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into that function will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. When the listening node is called, if it returns NFL_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. Example nodefunctionlisten(getvarnode(current, \"entrytrigger\"), current.entrylistener); nodeinsertafter (node targetnode) Creates a new node immediately after targetnode Description This command creates a new node in the tree immediately after the targetnode. The new node has no data attached to it. Data is attached using the nodeadddata() command. Any node in the tree can be passed as targetnode. Example nodeinsertafter(item.find(\">labels\").last).dataType = DATATYPE_NUMBER; This creates a new label on the object referenced by item that holds number data. nodeinsertinto (node containernode) Deprecated, Creates a new node inside containernode Description This command is deprecated. Use treenode . subnodes .add() Example nodejoin (node a, node b) Description For developer use. Join two pointer nodes to form a bi-directional coupling. A bi-directional coupling in FlexSim is a pair of nodes who's data points to each other. FlexSim automatically manages the coupling. If either one of the endpoints is deleted or nullified, FlexSim cleans up to prevent dangling pointers. The two nodes a and b must have coupling data. Example nodejoin(so(),so().next) nodepoint (node a, node b) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value . instead. Points node a to node b. Example nodetomodelpath (node thenode [, num nameflag=1]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode from the model. Example nodetopath (node thenode [, num nameflag=0]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode. Example normal (num mean, num stddev[, num stream]) Returns a random sample from a normal distribution Description normal(μ, σ, stream) is an unbounded continuous probability distribution. Inputs: μ is the location parameter ∈ ( - ∞, ∞ ) σ is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( - ∞, ∞ ) mean = μ variance = σ² Probability Density Functions: Possible Applications: Used to model various types of error such as machined hole diameters for large quantities of parts. This distribution is not used much in simulation because variance found in real processes do not typically follow a symmetric distribution such as this. Comments: The normal distribution is completely symmetric meaning values below the mean have the same probability for occurance as values above the mean. The mode and mean are equal for the normal distribution. When using this distribution, be aware that negative values can be returned, and therefore truncating the distribution at 0 may be necessary as shown in the example below. Example double thickness = Math.max(0.001, normal(5, 1.2)); The thickness is set a normal distribution having a mean of 5 and a standard deviation of 1.2 that is truncated for values less than 0.001. No random stream has been declared, so the default stream number 0 will be used to generate variates from the distribution. not (num/node value1) Deprecated, use the ! operator Description This command is deprecated. Use the ! operator instead. Example notifylinecontroller (node object, int controllernum, num output, num sendinglast [0/1]) For Dynamo use Description For Dynamo use. Informs a LineController connected to the object that material has left the line so the Controller can decide if the run is complete. The number of the LineController to be notified is the contollernum parameter. The object should report how much material (of any kind) has left it since the model began running and whether or not the material leaving is the last material in the object. Example notifylinecontroller(current,1,current.stats.output + 1,(current.subnodes.length == 1)); nrcp (obj object) Deprecated, use Object.centerObjects.length Description This command is deprecated. Use Object . centerObjects .length instead. Number of center ports of object. Example nrip (obj object) Deprecated, use Object.inObjects.length Description This command is deprecated. Use Object . inObjects .length instead. Number of input ports of object Example nrop (obj object) Deprecated, use Object.outObjects.length Description This command is deprecated. Use Object . outObjects .length instead. Number of output ports of object. Example nrows (node thenode) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Example ntravelto (obj traveler, obj spline, num endx, num endy, num endz, num vmax, num acc, num dec, num startspeed, num endspeed) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Causes the object to travel to a given rz and return the simulation time that it will arrive. Similar to the travelto command, but includes a start and end speed definition. Used in the development of the TaskExecuter. Example ntravelto(current, 0, 5, 8, 0, 1, 1, 1, 0, 1) ntraveltoupdate (obj object) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Updates the rz of an object after a ntravelto() command was called on it. Used in the OnPreDraw of the TaskExecuter to update it's position. Example ntraveltoupdate(current) numconnections () Gets the number of server connections that are currently active Description Returns the number of server connections that are currently active. Example int numconns = numconnections(); Sets the numconns variable to the number of server connections that are currently active. numtostring (num value[, num width, num precision]) Deprecated, use string.fromNum() Description This command is deprecated. Use string . fromNum () (static method) instead. Converts value to a string. Example objectconnect (obj object1, obj object2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect two objects, adding needed ports. Object1 will have an output port added, and object2 will have an inport added as needed. Then the ports are connected. Example connect(so(),so().next) objectexists (obj object) Check if an object exists Description If you're trying to test if an object exists when using dot syntax you can omit the objectexists. For example, if (current.labels[\"MyLabel\"]) or if (current.next). This command returns true (1) if the object specified as object exists in the tree. If the object does not exist, this command returns false (0). Example if (objectexists(next(current))) { moveobject(item, next(current), 1); } This checks to see if there is an object in the tree after current. If there is, the object referenced by item is moved into it through port number 1. objectshapecode (obj object) Deprecated, use getshapeindex() Description This command is deprecated. Use getshapeindex() instead. Get the index of the object's default shape. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the objects default shape. Example objectshapecode(so()) objectsoundcode (obj object) Gets the index of object's default sound Description Get the index of the object's default sound. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This function will return the index corresponding to the objects default sound assuming the object has a sound and soundindex attribute (default objects do not at this time) Example objectsoundcode(current) objecttexcode (obj object) Deprecated, use getobjecttextureindex() Description This command is deprecated. Use getobjecttextureindex() instead. Gets the index of the object's default image. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to the objects default texture (image). Example objecttexcode(current) opavailable (obj object, num outputportnum) Description Returns a 1 if the downstream object through the specified object's output port is available. Particularly, it checks if the downstream object exists, if it is stopped, if its input is open, and if the connected input port is open. This function returns 0 if the downstream object isn't available. Example opavailable(current,1) openallip (obj object) Open all input ports of object Description Open all input ports of object. If an input port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openallip(current) openallop (obj object) Open all output ports of object Description Open all output ports of object. If an output port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openallop(current) openflexsimchart ([str filename1] [,str filename2]) Deprecated Description This command is deprecated. Example openglcolor (num red {0-1}, num green {0-1}, num blue {0-1}, num opacity {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example opengllighting (num on/off) Deprecated, use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) Description This command is deprecated. Use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) instead. Example openinput (obj object) Deprecated, use Object.input.open() Description This command is deprecated. Use Object . input .open() instead. This command unblocks the input of the object after it has been previously blocked with the closeinput() command. It is necessary that both the input ports themselves, and the input in general, are open before entry will be allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeinput(). Example if (current.subnodes.length < maxcontent) openinput(current); openip (obj object, num inputportnum) Open one input port of object Description Open just inputportnum of object. Opening an input port of an object will allow entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openip(so(),1) opennodeedge (obj networknode, num edgenum) Opens entry to the networknode's edge Description Opens entry to the networknode's specified edge number. Closing a node's edge with closenodeedge() blocks travelers from entry onto the edge. This command opens the edge up again. Example opennodeedge(current.centerObjects[1], 3); Opens node edge 3 of a NetworkNode connected to center port 1 of the current object. openop (obj object, num outputportnum) Open one output port of object Description Open just outputportnum of object. Opening an output port of an object will allow exiting from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openop(so(),1) openoutput (obj object) Deprecated, use Object.output.open() Description This command is deprecated. Use Object . output .open() instead. This command unblocks the output of the object after it has been previously blocked with the closeoutput() command. It is necessary that both the output ports themselves, and the output in general, are open before exiting is allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeoutput(). Example if (current.subnodes.length > mincontent) openoutput(current); opipno (obj object, num outputportnum) Input port number that is connect to outputportnum of object Description This command returns the input port number that is connected to outputportnum of object. Example int otherport = opipno(current,1); This sets otherport to the number of the input port that current's first output port is connected to. opopen (obj object, num outputportnum) Description Returns a 1 if the outputportnum on object is open. Otherwise returns zero. Example opopen(current,1) opready (obj object, num outputportnum) Description Returns a 1 if the outputportnum of object is open and the connecting input port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the output of this object or the input of the connecting object are currently open. Example opready(current,1) optimizenetwork () Causes the model's network navigator to regenerate its distance table Description Causes the model's network navigator to regenerate its distance table. Use this command if you are dynamically connecting edges in your network during the simulation run. This may take several seconds to do for large networks. Example optimizenetwork() or (num/node condition1, num/node condition2) Deprecated, use the || operator Description This command is deprecated. Use the || operator instead. Example outobject (obj object, num outputportnum) Deprecated, use Object.outObjects[] Description This command is deprecated. Use Object . outObjects [] instead. Reference the downstream object connected to an upstream object's output port. Example outputopen (obj object) Returns 1 if the object's output is open, 0 otherwise Description Returns 1 if the object's output is open, 0 otherwise. The closeoutput(), stopoutput(), openoutput(), and resumeoutput() commands affect the return value of this command. The commands like closeop() and closeallop() do NOT affect the return value. Example if(outputopen(current)) current.output.close; If the output is open for the current object, then close the output. outputtreecontent (node containernode, str path+filename) Writes the data of all nodes in the tree under containernode to a text file Description Writes the data of all nodes in the tree under containernode to a text file on disk. If file does not exist, it will be created. For more functionality, use menu option: Stats | Model Documentation. Example outputtreecontent(model(),\"C:/MyModelDocumentation.txt\") ownerobject (node thenode) Gets the object that \"owns\" the executing node, usually the current object Description This command returns the node with object data attached to it that is the start of the sub-tree that thenode is in. In other words, it returns the object node that contains thenode. The result of this command is cached on thenode, so that subsequent calls to ownerobject(thenode) do not search in the tree, but return the cached result. If thenode subsequently changes parent, ownerobject(thenode) will return the cached result. This command is used in most code fields and trigger fields to set the access variable current. In these fields, c references the node that contains the code, and ownerobject(c) references the object that \"owns\" that node. Example string objname = ownerobject(c).name; This sets objname to the name of the object that contains the node referenced by c. The c usually refers to the node where the code is being written. treenode current = ownerobject(c); This example is present in most code fields in FlexSim, and retrieves access to the \"current\" object. ownerview (obj viewobj) Description For developer use. Get the topmost node of a view structure. Example ownerview(sv()) param (num index) Gets a parameter passed into a function Description This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode), string, int, double, stringarray, intarray, doublearray or treenodearray. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = param(1); Other examples include: double quantity = param(2); var value = param(1); //In this example value could be used as any type pareto (num min, num scale[, num stream]) Returns a random sample from a pareto distribution Description Generates a continuous random variate from a pareto distribution with parameters as defined. Example parg () Description This command is deprecated. Example parg() parnode (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode). The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parval() and parstr() for casting them as numbers and strings respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = parnode(1); parqty () Description For developer use. Get the number of parameters passed into the nodefunction. This is used together with the nodefunction command. The value returned only applies when using Flexscript, not C++. Example parqty() parstr (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a string. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using the param() command. Example If a trigger/field is called with: nodefunction(thefuncnode, passingstr) then within the trigger/field, getting access to the passingstr string passed as the first additional parameter would be done with: string passedstr = parstr(1); particleset () Deprecated, do not use Description This command is deprecated. Used to set values on a \"particle\" object, which is no longer supported. Example parval (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a number. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parnode() and parstr() for casting them as a treenode and string respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, passingval) then within the trigger/field, getting access to the passingval passed as the first additional parameter would be done with: double passedval = parval(1); pc (num asciivalue) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an ASCII character to the output console. Example pd (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an integer to the output console. Example pdir () Description This command returns a string containing the path on the hard drive to the FlexSim's program directory. Example string flexpath = pdir(); This sets flexpath FlexSim's program directory. A typical installation would return C:\\Program Files\\FlexSim7\\program\\ as the string. pearsont5 (num location, num scale, num shape[, num stream]) Returns a random sample from a pearson t 5 distribution Description Generates a continuous random variate from a Person-T5 distribution with parameters as defined. Example pearsont6 (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a pearson t 6 distribution Description Generates a continuous random variate from a Person-T6 distribution with parameters as defined. Example pf (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a floating point number to the output console. Example pfile () Description For developer use. Returns the string attached to the end of the command line used to start the FlexSim application. Example If FlexSim was started with this command line: \"C:\\Program Files\\Flexsim7\\program\\flexsim.exe\" \"mymodel.fsm\" then a call to pfile() would return mymodel.fsm as a string. pi () Deprecated, use Math.pi Description This command is deprecated. Use Math . pi instead. Gets the value of pi (3.14159....). Example pickcolor () Description For developer use. Opens a color picker window to allow the user to pick a color. Use pickedcolorred(), pickedcolorgreen(), pickedcolorblue() commands to retrieve the rgb color component values. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickcolornode (obj colornode) Description For developer use. Open a color picker window to set the rgb color values of the color attribute node of an object. Example pickcolornode(color(current)); Opens a color picker window and then sets the color of the current object to the chosen color. pickedcolorblue () Description For developer use. Returns the blue component of a color picked with the pickcolor() command. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickedcolorgreen () Description For developer use. Returns the green component of a color picked with the pickcolor() command. Example pickcolor(); int greencomponent = pickedcolorgreen(); The greencomponent variable will be set to the rgb value for the green component of the color chosen with pickcolor(). pickedcolorred () Description For developer use. Returns the red component of a color picked with the pickcolor() command. Example pickcolor(); int redcomponent = pickedcolorred(); The redcomponent variable will be set to the rgb value for the red component of the color chosen with pickcolor(). pickfile (str extension, str extensiondescription[, str defaultreturn]) Description For developer use. Opens a file browser for the user to choose a file. The browser will be looking for files with the specified extension. The extensiondescription is any text which describes the type of files allowed. This command will return the full path to the chosen file. Convert the return value with tostr(). See filebrowse() command. Example pickfile(\"*.xls\",\"Excel Workbooks\") picklistapply (obj combobox) Description For developer use. Applies the selected picked option from a picklist combobox. This is done when applylinks is called, or when and OK or Apply button is pressed. Example picklistapply(c) pickoffsetx (obj station, obj item, obj loadingobject) Description This command queries the station for an x offset for the loadingobject to travel from its x center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = pickoffsetx(item.up,item,current); pickoffsety (obj station, obj item, obj loadingobject) Description This command queries the station for a y offset for the loadingobject to travel from its y center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = pickoffsety(item.up,item,current); pickoffsetz (obj station, obj item, obj loadingobject) Description This command queries the station for a z offset for the loadingobject to travel from its z base in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = pickoffsetz(item.up,item,current); pickoptiononselect (obj view) Description For developer use. This command is used by pick list gui controls to modify the combobox text when an option is selected. Example pickoptiononselect(c); placeoffsetx (obj station, obj item, obj unloadingobject) Description This command queries the station for an x offset for the unloadingobject to travel from its x center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = placeoffsetx(current.centerObjects[1],item,current); placeoffsety (obj station, obj item, obj unloadingobject) Description This command queries the station for a y offset for the unloadingobject to travel from its y center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = placeoffsety(current.centerObjects[1],item,current); placeoffsetz (obj station, obj item, obj unloadingobject) Description This command queries the station for a z offset for the unloadingobject to travel from its z base in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = placeoffsetz(current.centerObjects[1],item,current); poisson (num mean[, num stream]) Returns a random sample from a poisson distribution Description Generates a continuous random variate from a poisson distribution with parameters as defined. Example popupmenu (obj view) Description For developer use. Returns a reference to the view's popup menu as an HMenu. Example popupmenu(c) port <no parentheses> Description This command is deprecated. This should not be used as a special command with the setport command anymore. Instead, declare an int variable type as port, then use port in your code as any other variable type. Example int port = param(3); pd(port); This sets port to param(3) and then prints the value to the output console. postclosewindowmessage (obj view) Posts a Windows Message to close the window Description Posts a message onto the Windows message queue to close the window. This allows you to finish any scripting code before the window is actually closed. Example postclosewindowmessage(ownerview(c)); postmovewindowupdate (obj view) Description For developer use. Do not use. Example postwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API PostMessage() command, posting a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example postwindowmessage(windowfromnode(view), WM_COPY, 0,0); pow (num num1, num num2) Deprecated, use Math.pow() Description This command is deprecated. Use Math . pow () instead. Calculates num1 raised to the power of num2. Example pr () Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a new line to the output console. Example prev (obj object) Deprecated, use treenode.prev Description This command is deprecated. Use treenode . prev instead. Reference the previous sibling of a node. Example print ([var value, var value2, ...]) Print the contents of the given parameters and a new line to the console Description This command takes 0 to 20 variants as parameters. Each parameter is printed to the console and separated by a space. After all the parameters are printed a new line character is printed to the console. The output console must be open to write to it. To open the console, use Debug > Output Console in the menu. Example print(\"Number:\", 1); print([1, 2]); This prints \"Number: 1\" and \"Array[2]: {1,2}\" on different lines of the output console. profileevents () Prints descriptions of all events currently in the event queue to the output console Description Prints to the output console descriptions of all of the events currently waiting in the event queue. The output console must be open to write to it. To open console, use menus View | Output Console. Example profileevents() profilekinematics (node infonode, num kinematicindex) Prints information about the specified kinematics operation to the output console Description Prints information about the specified kinematics operation to the output console. For more information, refer to the help documentation on kinematics. Example printkinematics(current.labels[\"kinematics\"], 0); profiletasksequence (node tasksequence) Prints information on a task sequence to the output console Description Prints information on a task sequence to the output console. The output console must be open to write to it. To open the output console, use menus View | Output Console. You can also pass a reference to the TaskExecuter object instead of a specific task sequence. This will profile the object's currently active task sequence. Example profiletasksequence(gettasksequence(so(), 0)); Writes all the tasksequence information to the output console for the active (0) tasksequence of the selected object (so()). programdatadir () Gets the full path to the directory where FlexSim stores program data Description Returns a full path to the directory where FlexSim stores program data, such as the help documents. Example programdatadir() returns a string like \"C:\\ProgramData\\Flexsim\\Flexsim7\\\" pt (str text) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print text to the output console. Example pullitem (obj fixedresource, obj item, num portnr[, num bypassflags]) Description Tells the fixedresource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. If the pull evaluation is true, this command pulls the item immediately. This command returns 1 if the item was successfully pulled and 0 if not. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. You can specify BYPASS_ALL to immediately pull the item regardless of availability. Example pullitem(current, item, 1); // See also Pull Best Item picklist option qstudentt (num confidence [0.9/0.95/0.99], num degreesoffreedom) Description For developer use. Returns the quantity of the studentt distribution value for the given percent confidence and degrees of freedom. Example qstudentt(0.95, nrofsamples - 1) query (str query[, node/num/str p1, node/num/str p2, ...]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example rackdrawfilledcell (obj rack, num bay, num level, num x, num y, num z, num sx, num sy, num sz, num red, num green, num blue) Draws a box in the rack's given bay and level Description Draws a box in the rack's given bay and level. x,y, and z are numbers between 0 and 1 representing the percentage into the cell to start drawing the box. sx, sy, and sz are numbers between 0 and 1 representing the size percentage of the box. Red, green and blue specify the color of the box. To ensure that the boxes are drawn correctly, you should disabled OpenGL textures with fglDisable(GL_TEXTURE_2D) before calling this command in a draw trigger. Example fglDisable(GL_TEXTURE_2D); for (int bay = 1; bay <= 5; bay++) { for (int level = 1; level <= 3; level++) { rackdrawfilledcell(current, bay, level, 0,0,0, 0.5,1,1, 255,0,0); } } fglEnable(GL_TEXTURE_2D); This example draws red boxes in bays 1-5, levels 1-3, that fill half of each cell's volume (sx = 0.5, sy =1, sz = 1). rackdrawvirtualcontent (obj rack, num bayfillperc, num levelfillperc, num itemdepth, num red, num green, num blue, num virtualonly) Draw the rack's virtual content Description Draws the rack's \"virtual\" content. This command will usually only be used if you are recycling flowitems using the rackrecycleitem command. When this command is executed, the rack goes through its content table, and draws a box for every flowitem in the rack, at its appropriate bay and level. If virtualonly is 1, then it will only draw a box in spots where a slot is filled, but no flowitem is present (the flowitem has been recycled). Bayfillperc and levelfillperc are values between 0 and 1, and specify the percent of the cell to fill with the drawn box. Item depth is the size each item takes up in the rack. For a floor storage rack, this the z size of the items. For a regular rack, it is the y size of the items. Example rackdrawvirtualcontent(current, 0.9,0.9,3, 256,0, 0, 1); rackgetbaycontent (obj rack, num bay) Gets the number of flow items in the bay of the rack Description Returns the number of flow items in the specified bay of the rack Example int numitems = rackgetbaycontent(current, 5); Sets numitems to the number of flowitems in bay 5 of the current rack. rackgetbayloc (obj rack, num bay) Gets the x location of bay relative to the rack's origin Description Returns the x location of the given bay of the rack, relative to the rack's origin. Example rackgetbayloc(current, 5); Returns the rz of bay 5. rackgetbayofitem (obj rack, obj item) Gets the bay number of the rack that the item is placed in Description Returns the bay number of the rack that the item is placed in Example int baynum = rackgetbayofitem(current, item); Sets baynum to the bay number containing item in the current rack. rackgetbaysize (obj rack, num bay) Gets the x size of bay of the rack Description Returns the x size of the given bay of the rack. Example rackgetbaysize(current, 5); Returns the size of bay 5. rackgetcellcontent (obj rack, num bay, num level) Gets the number of flow items in bay and level of the rack Description Returns the number of flow items in the specified bay and level of the rack Example int numitems = rackgetcellcontent(current, 5, 3); Sets numitems to the number of flowitems in bay 5, level 3 of the current rack. rackgetcellvar (obj rack, num bay, num level, num varnum, node storagenode) Description Returns the value stored in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example int typeofcellitems = rackgetcellvar(current, 1,5,3, current.labels[\"storageData\"]); rackgetitembybaylevel (obj rack, num bay, num level, num itemrank) Gets a reference to an item in the bay and level of the rack Description Returns a reference to an item in the specified bay and level of the rack. Itemrank specifies the rank of the item in that cell. Example treenode theitem = rackgetitembybaylevel(current, 5, 4, 2); Sets theitem pointer to the second flowitem in bay 5, level 4 of the current object. rackgetitemcellrank (obj rack, obj item) Gets the item's rank within the rack's cell Description Returns the rank of the item within its given cell in a rack. Example int theRank = rackgetitemcellrank(current, item); rackgetlevelloc (obj rack, num bay, num level) Gets the y or z location of the level relative to the rack's origin Description Returns the y or z location of the given level of the rack, relative to the rack's origin. If the rack is a floor storage rack, this returns the y rz. If the rack is a normal rack, this returns the z rz. Example rackgetlevelloc(current, 5, 4); Returns the y or z location of bay 5, level 4. rackgetlevelofitem (obj rack, obj item) Gets the level number of the rack that the item is placed in Description Returns the level number of the rack that the item is placed in Example int levelnum = rackgetlevelofitem(current, item); Set the levelnum variable to the level number containing item in the current rack. rackgetlevelsize (obj rack, num bay, num level) Gets the y or z size of the level of the rack Description Returns the y or z size of the given level of the rack. If the rack is a floor storage rack, this returns the y size. If the rack is a normal rack, this returns the z size. Example rackgetlevelsize(current, 5, 4); Returns the y or z size of bay 5, level 4. rackgetnrofbays (obj rack) Gets the number of bays rack has Description Returns the number of bays that the rack has. Example return duniform(1,rackgetnrofbays(rack)); This returns a random number between one and the number of bays on the rack. This is the same as the \"Random\" option of the place in bay pick list. rackgetnroflevels ( obj rack [,num bay ] ) Gets the number of levels in the bay of the rack Description Returns the number of levels in the specified bay of the rack. If no bay parameter is passed into the function, then the nroflevels in the first bay will be returned. Example return duniform(1,rackgetnroflevels(rack, baynum)); This returns a random number between one and the number of levels on the chosen bay of the rack. This is the same as the \"Random\" option of the place in level pick list. rackrecycleitem (obj rack, obj item, num binrank) Recycles the flowitem into the flowitem bin Description Recycles the flowitem into the flowitem bin specified. This command is for advanced users, and should not be used unless you are prepared to do some debugging. Bin rank should be the rank of the flowitem in the flowitem bin (textured colored box = 5, etc.). When this command is called, the flowitem is recycled, but the spot where it is located is designated as taken, and further flowitems will be put into the rack as if this spot is already filled. This can significantly increase the speed of a model. Subsequent commands to rackgetbaycontent(), rackgetcellcontent(), etc. will return values as if the item were still there. However, rackgetitembybaylevel() will return NULL for an item that has been recycled and has yet to be restored. Make sure the item is not released or waiting for a transport before calling this command. Note that max content of the rack will not work properly if this command is used. Also you will need to eventually restore the item using the rackrestoreitem() command. Example rackrecycleitem(current, item, 5); This recycles the flowitem into the 5th ranked flowitem of the flowitem bin (usually the textured colored box). rackrestoreitem (obj rack, num binrank, num bay, num level, num position) Restores a flowitem from the flowitem bin into the bay and level Description Restores a flowitem from the flowitem bin into the given bay and level. Example rackrestoreitem(current, 5, 7, 3, 1); This restores a flowitem from the 5th ranked flowitem of the flowitem bin (usually the textured colored box) into bay 7, level 3, position 1 of the rack. racksetcellcontent (obj rack, num bay, num level, num contentval) Sets the virtual content of the rack's cell to contentval Description Sets the \"virtual\" content of the rack's cell to the specified value. This should only be used if you are recycling and restoring items to the rack with rackrecycleitem() and rackrestoreitem(). You will usually use this command to set an initial \"virtual\" content on reset. Example racksetcellcontent(current, 5, 3, 2); racksetcellvar (obj rack,num bay, num level, num varnum, num setvalue, node storagenode) Description Sets the value in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. Setvalue is the value to set it to. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example racksetcellvar(current, 5, 3, 2, 4.6, current.labels[\"storageData\"]); This sets the 2nd value of bay 5, level 3 to 4.6 radianstodegrees (num value) Deprecated, use Math.degrees() Description This command is deprecated. Use Math . degrees () instead. Convert radians to degrees Example randantithetic (num on/off) Description Makes number streams antithetic. Using this command, users can switch random streams to generate numbers between 1 and 0; rather than the default of 0 to 1. This is helpful for determining if random numbers are having a big affect on the results of the model. It's also useful when experimenting with massive models and there isn't sufficient time to run the model for multiple iterations as required for good statistical sampling. The user can then choose to do just one regular run and one antithetic run of the model to obtain two diametrically apposed results. These two results can be averaged for an approximation that is somewhat better than if each run of the model used random stream generators without antithetic sampling. Example randantithetic(1); randinit (num stream, num seedvalue[, num seedvalue2, num seedvalue3, num seedvalue4, num seedvalue5, num seedvalue 6]) Initializes a random stream Description Initializes the random number stream by setting its first value to seedvalue. Although there are an unlimited number of random number streams available to the user, only the first one hundred streams numbered 0 through 99 have been initialized when the FlexSim application is opened. To create a new stream, simply execute the randinit() command for the new stream. For instance, executing randinit(105, 7628912) will create a new stream number 105 if it does not currently exist, and set its initial seed value to 7628912. If \"Repeat Random Streams\" has been selected in the Statistics menu, then streams 0 through 99 will be automatically initialized with a default seed value for that stream whenever the model is reset. For streams 100 and above, you must use the randinit() command to set their initial seed values if you wish to repeat their random streams. Any positive integer may be passed in as the seedvalue for a random number stream. If you pass in a seedvalue of 0 for random streams 0 through 99, it is a special case that will initialize them to their default seed values. seedvalues 2 through 6 are only used if you are using FlexSim's Combined MRG random number generator. To enable this generator, call maintenance(49,1) when your model opens. Example Example 1: randinit(5, 73241); Initialize FlexSim's random stream number 5 with a sead value of 73241. Example 2: randinit(2,0); for(int i = 100; i <= 199; i++) { randinit(i, realtime(1) * uniform(0, 1, 2)); } First initialize standard stream number 2 to its default seed value, then execute a loop for 100 iterations to create (if necessary) streams 100 through 199 and set their initial seed value to the product of a random number pulled from stream 2 and the current number of real clock seconds. randnext (num stream) Description For development use. Returns the next random number from the stream. This command is used to pull random samples from probability distribution functions. Example randnext(1); Gets the next random number in the stream of random numbers associated with stream generator number 1. randomwalk (num location, num scale, num shape[, num stream]) Description Generates a continuous random variate from a random walk distribution with parameters as defined. Example randstate (num stream[, seednr]) Gets the current state value for the random number stream Description Returns the current state value for the specified random number stream. This state value may be useful as the seed value in the randinit() command for the purposes of restarting a saved state model from the same point in the random number stream of the initial run. seednr is only needed if you are using FlexSim's Combined MRG random number generator, in which case the seednr should be a value 1-6 defining which seed value you want to get the state on. Refer to randinit() for using the Combined MRG. Example int curstate = randstate(5); Set the curstate variable to the current random integer value stream number 5. rank (obj parent, num index) Deprecated, use treenode.subnodes[] Description This command is deprecated. Use treenode . subnodes [] instead. Reference a child node by rank. Example rankfromnetnode (obj netnode) Returns the member rank of network node netnode Description Takes a network node reference and returns the member rank of that network node. Each network node has a specific \"member rank\", which is used as a row/column reference in the network's distance and next node tables. The first network node that is added to a model gets member rank 1, the second gets member rank 2, and so on. Example int memberrank = rankfromnetnode(current); rankobj (obj container, num rank) Deprecated, use Object.attrs[] Description This command is deprecated. Use the treenode . attrs 's [] operator instead. Gets a reference to the ranked node in the object's attribute sub-tree at rank. Example reacquirepreemptedresource (node token, node instance, node preemptedObject, node info, node activeProcess, num sameAsLast [, num newPriority]) Description Example reacquirepreemptedresource(token, current, preemptedObject, info, activeProcess); realtime ([num timecode = 0]) Gets the real clock time Description Returns the real clock time in a variety of formats based on the timecode: 0 = the number of seconds and milliseconds since midnight, Jan 1, 1970 1 = the number of seconds since midnight, Jan 1, 1970 2 = the number of milliseconds since the last second change 10 = a time string with format hh:mm:ss 11 = a date string with format mm/dd/yy 12 = a date/time string with format Mon Nov 15 15:49:12 2004 Example string curdatetime = realtime(12); reassignnetnode (obj taskexecuter, obj networknode) Description TaskExecuters using a NetworkNode system are always associated with a specific NetworkNode in the system (red line graphic) which continually changes as they travel around. This command reassigns the specified taskexecuter to networknode. Warning!!! Do not execute this command unless the TaskExecuter is on a network, and unless you know the TaskExecuter is not currently executing a travel task. Example reassignnetnode(current, current.centrObjects[5]); Reassign the current TaskExecuter to the NetworkNode connected to its fifth center port. reassignticker (obj fluidobject, obj ticker[, int resortticker]) Reassigns the Fluid Object's ticker Description Changes the Fluid Object passed in as the first parameter from the control of its current Ticker, to the Ticker that is passed in as the second parameter. The object will then have its fluid movement calculated whenever the new Ticker's tick-time elapses. It is recommended that Fluid Objects that are connected to each other always be controlled by the same Ticker. If resortticker is 1, then the new Ticker will immediately resort its list of controlled objects. This may change the order that some fluid objects are evaluated and may have side-effects in the model behavior. Example reassignticker(current,Model.find(\"Ticker2\",1); rebindobjectattributes (node thenode) Rebinds object attributes Description Rebinds object attributes for the given node. If you delete or add an attribute to an object, the object's attribute cache will not immediately reflect that change, so you can call rebindobjectattributes to update the object's attribute cache. This is the same as right-clicking on the object and selecting Edit|Rebind Object Attributes. Example rebindobjectattributes(c) receiveitem (obj station [, num port ] ) Tells the FixedResource to open inputs and receive a flowitem Description Tells the FixedResource station to open its inputs and receive a flowitem. The port parameter is optional, and should only be used if you know exactly which port you want to receive from. If the port parameter is specified, this object will try to receive any item from the upstream object if its corresponding output port is open, ignoring any items' previous send-to return values (similarly to how pull logic works). This function should be executed only once to receive an item, and it should only executed again once you have received (or have confirmed reception of) that item. See also releaseitem() command. This function should generally only be used from within a BasicFR's code fields, as other objects implement receiveitem() on their own. If the object receives an item immediately, then it will return 1, otherwise 0. Example receiveitem(current) recover (num phase) Load recovery files Description Load recovery files. phase: 1 or 2 Example recover(1) recycleitem (obj item , num binrank ) Recycles the flowitem to the flowitem bin Description Recycles the specified flowitem to the flowitem bin. Binrank should be the rank in the flowitem bin to recycle to (texturedcoloredbox = 5, etc.) Example recycleitem(item, 5); redirectconsole (num console:output/system/compiler/trace, obj view) Redirects any prints to a given console Description This redirects any prints to a given console so that they will instead be printed to the view text of the specified view. CONSOLE_OUTPUT redirects the output console, CONSOLE_SYSTEM redirects the system console, CONSOLE_COMPILER redirects the compiler console, CONSOLE_TRANCE redirects the trace console. To redirect it back to its original console, call the command again and specify NULL as the view parameter. Example redirectconsole(2, c); buildnodeflexscript(getvarnode(Model.find(\"Processor1\"), \"exittrigger\")); redirectconsole(2, NULL); This redirects the compiler console to the view c and then builds flexscript on a node in the model. Thus, any errors in building flexscript will be directed to the view c instead of to the compiler console. redirectnetworktraveler (obj traveler, obj newdest) Description Attempts to change the end destination of the traveler to that of the newdest object. Only works if the traveler is currently on a TASKTYPE_TRAVEL task and is on a travel network. Returns 1 if successful. Example redirectnetworktraveler(traveler, Model.find(\"Processor5\")); Redirects the traveler to an object in the model named Processor5 assuming traveler is a pointer to a taskexecuter currently traveling on a network node system and Processor5 is connected to the network. redirectpicklists (obj view) Description For developer use. Adjusts all picklists of a parameters or properties window that has been redirected. Example redo (obj view) Description Redoes the previously undone action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example redo(view); refreshcommandlist () Description For developer use. Refreshes the command list. Example refreshcommandlist() refreshglobalvariables () Description For developer use. Refreshes all global variables to their initial values. Example refreshglobalvariables() refreshmodelcommands () Description System command. Do not use. Example refreshview (obj view) Description For developer use. Regenerate the window from it's view definition. Example refreshview(c) reftable (str/num globaltable) Deprecated, use Table(\"GlobalTableName\") Description This command is deprecated. Use the Table class instead. Gets a reference to a global table. Example Table table = reftable(\"GlobalTable1\") registereventtype (str name) Description Registers a custom event type for use with the Event Log. Returns the index of the eventtype to be used later by other commands such as logevent(). Example int index = registereventtype(\"MyEventType\"); releasebatch (node batch, int failed [, int/str/obj connector]) Description Releases batch from a Batch activity. If failed is 1, all tokens in the batch will be released and the release quantity and label values will be ignored. Example releasebatch(batch, false); releasebatch(batch, true, \"Failed\"); releasebatch(batch, true, getactivity(processFlow, \"Garbage\")); releaseitem (obj flowitem [, num port ]) Releases the flowitem from its current object Description Releases the specified flowitem. A flowitem is released when it is free to exit the object currently containing it, at which time the Send to Port is evaluated. This command should only be used if the flowitem is in a BasicFR object and the flowitem has not been released already, or if it is any FixedResource and has been held with holditem(). The second paramter, port, is optional. If passed, the sendto will not be evaluated, but the item will instead be released out the specified port. If the flowitem exits, releaseitem will return 1. Otherwise it will return 0. See also receiveitem() command. Example releaseitem(item) releasetoken (node token [, int/str/obj connectorOrActivity]) Description Deprecated. Use Token . release (). Example releasetoken(token); releasetoken(token, 3); releasetoken(token, \"To Start\"); releasetoken(token, getactivity(processFlow, \"Start\")); releasewave (node wave) Description Releases the wave from a Synchronize or Join activity. If the wave is in a Synchronize activity, tokens will exit the activity through the same connector rank that they entered through. If the wave is in a Join activity, the first token added to the wave will exit the activity. Example releasewave(wave); relloc (obj object, obj containerobj, num coordinate) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. This command returns the x, y, or z location of an object relative to an object that contains it. The containerobj does not need to be the immediate container, but does need to eventually be a container of the object. Use a coordinate value of 1,2,3 for x,y,z respectively. Example double x = relloc(current,model(),1); double y = relloc(current,model(),2); double z = relloc(current,model(),3); Sets x, y and z to the x,y,z positions of the current object relative to the model space. removeallcouplingreferences (node thenode) Recursively breaks couplings from a node and its subnodes in the tree Description Recursively breaks couplings from a node and its subnodes in the tree. Example removeallcouplingreferences(current); removebundleentry (node datanode, int entrynum) Removes the entry entrynum (base 0) of the bundle Description Removes the entry entrynum (base 0) of the bundle. Example removebundleentry(x, 2); removefirstbundleentry (node datanode) Removes the first entry in the bundle Description Removes the first entry in the bundle. For managing memory footprint of historical data. Example removefirstbundleentry(x); removelastbundleentry (node datanode) Removes the last entry of the bundle Description Removes the last entry of the bundle. Example removefirstbundleentry(x); reordertasks (obj dispatcher) Causes the dispatcher to reorder all its task sequences according to its queue strategy Description Causes the involved Dispatcher/TaskExecuter to reorder all its task sequences according to its queue strategy. Example reordertasks(c) repaintall () Description For developer use. Repaint all windows. Example repaintall() repaintallactive () Description For developer use. Repaint all windows in the active list. Example repaintallactive() repaintview (obj view) Description For developer use. Repaint the window without regenerating. Example repaintview(c) repeat (num nr, expression) Description Executes expression the specified number of times. The expression can use \"count\" to get the 1-based number of the iteration being executed. Example repeat(current.outObjects.length, current.outObjects[count].input.close); This example will close the input of all objects connected to the output ports of current. replacedata_n (obj startnode, num value, num replacement) Description For developer use. Search/Replace number data matched under startnode. Only number data nodes are searched. Returns the total number of matches found. Example replacedata_n(main(),25,42) replacedata_s (obj startnode, str string, str replacement[, num replication]) Description For developer use. Search for a string data match under startnode and replace with the replacement string. Results appear in the output console. This function will recognize and replace substrings. The search is case-sensitive. Replication is currently not used. See searchdata_s(). Returns the total number of matches found. Example replacedata_s(main(),\"jack\",\"john\") replacename (obj startnode, str searchname, str replacement) Description For developer use. Replace all node names found to be a match with searchname that fall under startnode. This function requires an exact match and will not recognize substrings. Returns the total number of matches found. Example replacename(main(),\"jack\",\"john\") report (obj containerobj, str path+filename, num append [0/1]) Description For developer use. Generate a standard report file in \"comma separated value\" (csv) format for all objects under containerobj which are currently selected. If append is 1, then the report will be appended to the end of the file specified. If append is 0, then either the file will be created or the existing file will be cleared before the report is written to it. Example report(model()); reportmode (int mode [0=general, 1=state]) Description For developer use. Set the report mode. (General or state.) Example reportmode(0); repositionhighlightededits (obj view) Description For developer use. Repositions the edit controls for a tree view's highlighted object. Example requestdecision (str/node/num object) Description Request a decision from a ReinforcementLearning object. When training, this will cause the simulation to return a reward for the previous action, make a new observation, and (if the episode is not done) wait for an action from the algorithm. When running normally (not training), this will make an observation and execute the On Request Action trigger of the ReinforcementLearning object in order to make a heuristic decision or predict an action using a trained AI model. Use this command to specify exactly when the AI should make a decision. Example requestdecision(\"ReinforcementLearning1\"); requestoperators (obj dispatcher, obj station, obj involved, num nrofops, num priority, num preempting) Description Request a specified number of operators to come to the station object and work on the involved object until released. The involved object will later need to be passed into the freeoperators() command when releasing the operators. The operator(s) being called must either be the object referenced by dispatcher, or be connected to its output ports. The tasksequence which is sent to the operator(s) will be given a priority and preempting value. The possible values for preempting are as follows: 0 = PREEMPT_NOT 1 = PREEMPT_ONLY 2 = PREEMPT_AND_ABORT_ACTIVE 3 = PREEMPT_AND_ABORT_ALL For each operater that needs to be called, stopobject() will be called on the station, and a tasksequence that looks like the following will be sent to the dispatcher (or operator) object. 1. put a preempt \"bookmark\" in the task sequence (TASKTYPE_MILESTONE) 2. travel to the station (TASKTYPE_TRAVEL) 3. resume the station (TASKTYPE_STOPREQUESTFINISH) 4. be utilized at the station (TASKTYPE_UTILIZE) Example requestoperators(current.centerObjects[1], current, item, 2, 0, PREEMPT_NOT); This calls 2 operators connected to the object that is connected to the first center port of the current object to come to the current object, and work on the item. rerankbesttask (obj object) Description This command forces the object specified as dispatcher to search through its task sequence queue and put the task sequence with the highest priority in the front of its queue. This will not reorder the other task sequences in the queue. Example rerankbesttask(current); reset () Deprecated, use resetmodel() Description This command is deprecated. Use resetmodel() instead. For developer use. This command resets the model. The simulation clock is set to 0, and the OnReset event function is called for every object in the model. The OnReset events generally call the ResetTrigger functions that the users define. The model must be compiled before it can be reset. The resetmodel() command should typically be used instead of reset(). Example reset(); go(); This resets then runs the model. resetexperiment () Description For developer use. Reset the experiment without performing a full model reset. It is typically used internally by the experiment manager. Example resetexperiment() resetlayer (obj layer) Description For developer use. Resets the layer passed. Use resetmodel instead. Example resetmodel ([num buildflexscript]) Resets the model Description Resets the model. Use this command instead of reset(). The parameter specifies whether the engine should build all flexscript functions as well. Example resetmodel() resetstats () Description For developer use. Reset all object statistics without performing a full model reset. It is typically used internally by the experiment manager. Example resetstats() resetuniqueid (obj flowitem) Resets the uniqueid attributes on a flowitem to a value that has not been assigned to another flowitem Description This command resets the uniqueid attribute on a flowitem to a value that has not been assigned to another flowitem already. This attribute is required to collect Full History information for the Full Report. This command should be used if a flowitem has not been destroyed but needs to be considered as a new item for data collection purposes. For example, if a flowitem is being recycled by a modeler (not with the built-in recycling functionality), they should call this when the flowitem is returned to circulation. Flowitems typically only have the uniqueid attribute when Full History collection is enabled. Example resetuniqueid(item); resumeanimation (obj object, num/str animation[, num resumeAtType, num resumeAtVal]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Resumes an animation from some point in the middle of the animation. Example resumeanimation(current, \"Stand\"); resumeinput (obj object) Deprecated, use Object.input.resume() Description This command is deprecated. Use Object . input .resume() instead. This command opens the input of an object just like openinput() does, but because it keeps track of previous stopinput() commands called on the object, it will only open input after all stops have been resumed. Refer to openinput() documentation for additional information. Example resumeinput(current.centerObjects[1]); resumeobject (obj object [, num id, num stateprofile ] ) Deprecated, use Object.resume() Description This command is deprecated. Use Object . resume () instead. Tells the object that it may resume whatever it was doing before stopobject() was called on it. The id value is optional and is for matching stop requests with resume requests. Refer to the stopobject() documentation for more information on this. Example resumeobject(current.centerObjects[1]); resumeoutput (obj object) Deprecated, use Object.output.resume() Description This command is deprecated. Use Object . output .resume() instead. This command opens the output of an object just like openoutput() does, but because it keeps track of previous stopoutput() commands called on the object, it will only open output after all stops have been resumed. Refer to openoutput() documentation for additional information. Example resumeoutput(current.centerObjects[1]); resumetransportsin (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportin command, and notifies those taskexecuters that they can resume their unload operation. The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsin variable. References to specific saved taskexecuters can be referenced by: nroftransportsinnode.subnodes[saverank].value Example resumetransportsin(current); resumetransportsout (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportout command, and notifies those taskexecuters that they can resume their load operation.The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsout variable. References to specific saved taskexecuters can be referenced by: nroftransportsoutnode.subnodes[saverank].value Example resumetransportsout(current); return (num value) Description This command causes a function to stop executing and return value to the function that called it. Example double res = item.rank * 5; return res; This sets the value of res to 5 times the rank of the item referenced by item. The value stored in res is then returned to the function that called this one. richeditaddtext (obj richedit, str text, num protected (0/1)) Deprecated, do not use Description This command is deprecated. Do not use. Example richedittoken (obj richedit, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example rotateselected (double angle, double x, double y[, obj roottree]) Description Rotates all selected objects in the model around the designated origin x/y location Example rotateselected(90, 5, 0) This example rotates selected objects 90 degrees around the location (5,0) round (num value[, num precision]) Deprecated, use Math.round() Description This command is deprecated. Use Math . round () instead. Rounds the value to the nearest integer. Example rundocument (str command, str path+filename) Open a file using the default application for the file type Description Opens a file using the default application used for opening files with the specified extension on your computer. The available commands are: edit, explore, find, open, and print. A return value > 32 means success. Example rundocument(\"open\",\"C:/myfile.doc\"); Opens myfile.doc with whatever application is default for opening *.doc files on your computer. runexpertfit () Description Deprecated, returns 0. Example runexpertfit() runfunction (num noreset) Description For developer use. Block user input/output, perform a model run at maximum speed possible by cpu, and return control when stoptime is met. If stoptime = 0, the stoptime is assumed to be 1000. See go(). Example runfunction(1) runprogram (str commandline) Run an external program Description Run an external program. This command will issue a command to the operating system. The commandline may contain full program arguments. A return value > 31 means success. Example runprogram(\"c:/myprogram.exe\") runspeed (num speed[, num precisionMode]) Sets the simulation speed Description This command sets the speed at which the simulation will run. It is the same as clicking and dragging the slider bar on the Run Control window, but more precise. The speed that the model will attempt to run at is defined as the number of simulation time units per real second. The model may not actually achieve this speed if the computer cpu can not keep up. precisionMode defines the precision to use. If 0, the precision mode will remain what it was before the call. If you pass RUN_SPEED_LOW_PRECISION, it will set to a low precision run speed. If you pass RUN_SPEED_HIGH_PRECISION, it will run in high precision mode. This is used for emulation purposes. The precision mode will be reset to low precision on every reset, so you need to have something in your model set it back on reset or when the model starts to enable high precision mode. Example runspeed(10); go(); This sets the speed to 10 simulation seconds per real second, then runs the model. savebyname (obj tree, str filename) Description For developer use. Saves the specified tree node to a file with the given name. Example savebyname(Model.find(\"MyProcessor\"), \"C:\\\\MyProcessor.t\"); savefpk (node servicepackhead) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. This saves the node to disk as a service pack file (.fpk). A save file dialog box will appear, allowing you to define the path and name of the file. A service pack is nothing more than a node with subnodes. The first subnode is assumed to be toggled flexscript and contain string data with code. When the service pack is loaded using File | Install Service Pack, the first subnode of you service pack will execute automatically. The code will usually copy the other subnodes into the MAIN and VIEW trees. Example savefpk(so()); savemodelprepare () Description For developer use. Prepares the model to be saved, including reseting, etc. Example savemodelprepare(); saveselectedtofile () Description For developer use. Saves all selected objects in the model to a tree file. Example saveselectedtofile() savestate () Description For developer use. Saves the state of the project. Once this command is executed, you can save your project (.fsp), then open in later, compile, execute loadstate(), and run from the previous spot you started from. Example savestate(); savestoppedtransportin (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport in complete trigger of a BasicFR object. If the BasicFR is not ready to receive an item that a taskexecuter is about to unload, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to receive it. When the BasicFR becomes ready to receive the item(s), it should call the resumetransportsin() command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their unload operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportin(current, transporter); return -1; } savestoppedtransportout (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport out complete trigger of a BasicFR object. If the BasicFR is not ready to send an item that a taskexecuter is about to load, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to send the item. When the BasicFR becomes ready to send the item, it should call the resumetransportsout command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their load operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportout(current, transporter); return -1; } savetree (node tree, str extension, str description, str startingpath) Description For developer use. Opens a save file dialog prompting the user for a file name to save. The tree passed in will be saved with the specified name, unless a session is selected. Then the first parameter is ignored. cdir() and pdir() may not be directly used as the path in FlexScript. Example savetree(model(),\"fsm\",\"FlexSim Model\",documentsdir()); scalekinematicstotime (node kinematics, int kinematicnr, double scaletotime) Scales the kinematics to a defined time Description Scales the kinematic(s) to a defined time. This can be used to preserve the characteristics of the kinematics, i.e. accelerate->peak speed->decelerate, but have the total time it takes to perform the kinematics be defined by some other mechanism such as a distribution. If kinematicnr is 0, then the entire set of kinematics will be scaled to the given time. If kinematicnr is greater than 0, then only that kinematic will be scaled. The return value is the new end time of the kinematic(s). Example scalekinematicstotime(kinematics, 0, exponential(0, 10)); scrollinfo (obj/HWND view, num get_set {0-1}, num horz_vert_ctl {0-2}, num scrollinfo {1-4}[, num value]) Description For developer use. Gets or sets scrollinfo for a scrollbar on a view. The value parameter is only used if get_set is 1. The position of the scrollbar (nPos) is changed with scrollinfo 4. You can also get and set the nMin, nMax, and nPage values of the scrollbar with scrollinfo 1, 2, and 3 respectively. Example scrollinfo(TheTable,1,1,4,scrollinfo(c,0,1,4)-amount); searchdata_n (obj startnode, num val) Description For developer use. Search for a number data match under startnode. Only number data nodes are searched. Results appear on the output console. Returns the total number of matches found. Example searchdata_n(main(),25) searchdata_s (obj startnode, str string [, num replication]) Description For developer use. Search for a string data match under startnode. Results appear in the output console. This function will recognize substrings and report which nodes contain them, and how many. The search is case-sensitive. Replication is currently not used. Returns the total number of matches found. Example searchdata_s(main(),\"glVertex()\",1) searchfornode (str/node searchstr, node startnode, num findnr[, num searchobjects]) Description For developer use. Recursively searches the startnode for a node with a name containing the searchstr. The findnr parameter is useful when the search finds multiple nodes containing the given name, specifying a number i here will give you the ith node found. Set searchobjects to 1 to search the object's data nodes. Example searchname (obj startnode, str searchname) Description For developer use. Search for a name match under startnode. Results appear in the output console. The search is case-sensitive. Returns the total number of matches found. Example searchname(main(),\"FixedResource\") seconds (num seconds) Gets the number of model time units in the number of seconds Description Return the number of model time units in the given number of seconds. Example seconds(30); Returns 0.5 minutes. select (obj window) Description For developer use. Select the specified view object. Convert the return value with tonode(). Example select(ownerview(c)) selectall () Description For developer use. Selects all objects in the model. Example selectall() selectedobject (obj window [, num reset]) Description For developer use. Get the highlighted node in a view. Example selectedobject(ownerview(c)) selectedx (obj window) Description For developer use. Get the x position of the highlighted object in a view. Example selectedx(ownerview(c)) selectedy (obj window) Description For developer use. Get the y position of the highlighted object in a view. Example selectedy(ownerview(c)) selectedz (obj window) Description For developer use. Get the z position of the highlighted object in a view. Example selectedz(ownerview(c)) senddelayedmessage (obj toobject, num delaytime, obj fromobject [, num par1, num par2, num par3]) Send a delayed message to an object, firing its OnMessage trigger after the delay time has transpired Description This command is deprecated. Use Object . message () instead. Causes a message to be sent to the toobject from the fromobject after the delaytime has transpired. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three numeric par values passed in as msgparam(1), msgparam(2) and msgparam(3). This is a very usefuly command for creating your own time events during a model run. Example senddelayedmessage(current.outObjects[1], 25, current, 0, 0, 0); Sends a message from the current object to the object connecte to output port 1 of the current object 25 time units after this command is executed. Zeros are passed for all three of the user-defined parameters. sendmessage (obj toobject, obj fromobject [, var par1, var par2, var par3]) Send a message to an object, firing its OnMessage trigger Description This command is deprecated. Use Object . message () instead. Causes a message to be sent immediately to the toobject from the fromobject as in a direct function call. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three par values passed in as msgparam(1), msgparam(2) and msgparam(3). These message parameters are Variants, meaning they can be numbers, strings, treenode references or arrays. Example sendmessage(current.centerObjects[1], current, item, 10); This sends a message to the object connected to current's first center port. A reference to item is passed as par1 and the number 10 as par2. sendonactivatenotify () Description For developer use. Causes each palette windows' OnActivateNotify event to fire. Example sendonactivatenotify(); sendwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API SendMessage() command, sending a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example sendwindowmessage(windowfromnode(view), WM_COPY, 0,0); serveraccept (int noblocking) Gets the server will attempt to accept a client connection Description The server will attempt to accept a client connection. If noblocking = 0, the command blocks until a connection is made. It returns an index used to reference the connection made. The server will attempt to accept a connection from a waiting client. A number will be returned that is the index of the connection established. A return value of 0 indicates that no connection was created. This value will be used in all future server calls. If noblocking = 1, the server will not block FlexSim program execution, but will return a 0 if no client attempts to connect. If noblocking = 0, the server will block (freeze) FlexSim program execution until a client attempts to connect. Connections with clients are only made with this command. Example int client = serveraccept(0); servercloseconnection (int connection) Closes the client connection Description The specified connection to a client is closed. Does not close the main server socket. This should be done when the server is completely finished communicating with a client. Example servercloseconnection(1); serverclosemain () Closes the main server socket and all open connections Description Closes the main server socket and all of the connections that are still open. No more communication can be done until it is created again. All connections should be closed before this is called. Example serverclosemain() servercreatemain (int port) Creates a server socket that is listening for connections to the specified port Description Creates a server socket that is listening for connections on the specified port. Some ports (called well-known ports) are reserved for special applications. Anything port number over 1024 is usually safe to use. Example servercreatemain(1880); serverreceive (int connection, char *buffer, int bufsize, int noblocking) Receives a message from the connection Description Receives a message from the specified connection. This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = serverreceive(1,Buf,15,0); flexscript: string readstr = serverreceive(1, NULL, 15, 0); serversend (int connection, char* message [, num charlength] ) Sends a message to the client connect to connection Description Sends the specified text message to the client that is connected to the specified connection. Returns the number of bytes (characters) sent correctly. The text message to be sent must be converted into a char *. The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example serversend(1,\"MadeConnection\"); set (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setanimationvar (obj object, num/str animation, str varName, num/obj toValue) Sets the value of an animation variable on an object Description Sets the value of an animation variable on an object. Animation variables are attributes of an animation that may need to dynamically change for different runs of the animation, such as surrogates, time between keyframes, or position/rotation/size values of a given keyframe. For example, you may use surrogates in building your animation. You do this by choosing a default visual from the flowitem bin to use as you create the animation. Then when the simulation runs, you substitute real flowitems in for those surrogates when you run the simulation. You do this substitution by setting the value of an animation variable that you've associated with that surrogate to the actual reference to the flowitem. Another example is you may use an animation variable to dynamically define the z position of a keyframe at run-time. Example setanimationvar(current, \"Animation1\", \"Item1\", current.first); setapplicationtitle (str title) Description For developer use. Sets the current application's title. Example setapplicationtitle(\"Custom Application Title\"); setbundlevalue (node datanode, num entrynr, str/num field, num/str val) Sets the value of the entry (base 0) and field (base 0) of the bundle Description Sets the value of the defined entry (base 0) and field (base 0) of the bundle. Example setbundlevalue(x, 5, \"Object Name\", current.name); setcameradirection (obj view, num x, num y, num z, num rx, num ry, num rz) Sets the viewpoint direction of the 3D view Description Set the viewpoint direction of an orthographic or perspective view. (x,y,z) is the location of the focus point of the camera. (rx, ry, rz) is the rotation of the camera. The associated view attribute names are: viewpointx, viewpointy, viewpointradius, viewpointrx, viewpointry, viewpointrz respectively. Example setcameradirection(sv(), 0, 0, 0, -40, 0, 25); setcameravolume (obj view, num w, num h, num nearclip, num farclip, num magnification, num fov, num projtype, num firstperson) Description For developer use. Set the OpenGL camera volume. Sets additional view parameters not set with setcameradirection. Example No example. setcenter (obj object, num x, num y, num z) Deprecated, use Object.setLocation() Description This command is deprecated. Use Object . setLocation () instead. Sets the x, y, and z location of the object's rotational center, relative to its container. Example setchecked (obj view, num value) Description For developer use. Set the checked state of a button. Example setchecked(c,0) ; setcollisioncheck (obj taskexecuter, num checkstate [, num checkinterval]) Sets the state and interval for collision checking on the taskexecuter Description Sets the state and interval for collision checking on the taskexecuter. If checkstate is 1, then check for collisions, else don't. If interval is >0, then reset the \"Time between Collision Checks\" for the taskexecuter specified. Example setcollisioncheck(traveler,1,5); Starts the traveler checking for collisions every 5 time units. setcolor (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the red, green and blue color components of an object Example setcurrent (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setcursor (num cursorid[, num forgetCount = 0]) Sets the visual look of the mouse pointer Description Sets the visual look of the mouse pointer. Valid ids are as follows 1: Arrow 2: IBeam 3: Wait 4: Cross 5: UpArrow 6: Size 7: Icon 8: SizeNWSE 9: SizeNESW 10: SizeWE 11: SizeNS 12: SizeAll 13: No 14: Hand 15: AppStarting 16: Help The forgetCount defines if/when FlexSim should go back to the default cursor. If 0 (default), then FlexSim will keep that cursor until the user calls setcursor() again. If you pass a positive number then FlexSim will reset the cursor back to the default after forgetCount number of mouse move messages are received from the system, if you have not called setcursor() again in that interval. Example setcursor(3) setdrawnamefunction (num boxwidth, num boxheight, node nodefunction[, num pval1, num pval2, num pval3]) Description This command gives direct access to the functionality that displays information in boxes below objects in the model. FlexSim's 3D display mechanism works by performing multiple drawing passes over the objects in the model. First, it gathers and caches data for what needs to be drawn. Then it goes through and draws the object shapes and calls the objects' custom draw functionality. Finally it draws any overlays such as connectors, information boxes, etc. The setdrawnamefunction() command, if called as part of an object's custom draw functionality, i.e. its OnDraw event or its Custom Draw Code trigger, will cause a callback to be fired when the drawing sequence gets to the information box step for that object. To do this, call the command and specify the size that you want the box to be drawn, and pass as the nodefunction parameter a reference to a node holding the code you want to fire to draw the box information, as well as up to 3 parameters that will be passed as param(1), param(2), and param(3) into that nodefunction. Then implement the nodefunction code to draw any information you want, using the drawflattext() command, or any other OpenGL drawing commands. Note that when the nodefunction is call, the OpenGL model view matrix will be set so that the (0,0,0) point is at the top-center of the display box, and one length unit represents one pixel on the screen. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object setdropcoords (obj view[, obj dropnodefrom, obj dropnodeto]) Description For developer use. Sets the dropx() and dropy() coordinate commands for the view based on current mouse location. You can optionally also set the dropnodefrom and dropnodeto parameters, which will define the nodes returned by dropnodefrom() and dropnodeto(). Example setdropcoords() seteventtime (str EventName, num time, num timemode[1/2], num createevent[1/0]) Sets the \"Repeat Event Time\" for the global UserEvent Description Sets the \"Repeat Event Time\" for the specified global UserEvent. If timemode = 1, then timeval will be used directly; otherwise, the timeval - time() will be used. If createevent = 1, then in addition to updating the \"Repeat Event Time\", a single event will be created at the previous time specified. Example seteventtime(\"UserEvent1\",20,1,0); The global userevent named \"UserEvent1\" will have its \"Repeat Event Time\" to 20. setframe (obj object, num/str toframe) Sets the shape frame of an object Description Sets the frame attribute of the object to the framenumber. The frame defines which 3D image to display. This is a nice way of changing the 3D shape of an object on the fly. There are two ways to define frames on an object. First, you can do it through the naming of various 3D files. For example, if the object was assigned Operator.3ds as its default shape, and there are additional files in the same directory as Operator.3ds named OperatorFRAME1.3ds, OperatorFRAME2.3ds and OperatorFRAME3.3ds, then the frame attribute could be set to 0,1,2, or 3 which would change the displayed shape to each of the 3ds files respectively. Secondly, you can add sub-nodes to an obejct's shape attribute, each with a path to the 3D file associated with that frame. Subsequently, frame 1 would be associated with the shape attribute's first sub-node, etc. This is the method used within FlexSim's environment to define shape frames. If toframe is a string, then the latter method is assumed, and it will find the shape attribute sub-node with the corresponding name. One use of this command would be to change the 3d shape in the OnDown trigger to show a \"broken\" shape. Example if(getframe(current) == 3)) setframe(current, 5); setitem (thing) Deprecated do not use Description This command is deprecated. Do not use. Example setiteminvolved (obj item, obj involved) Description This sets the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. Only use this command if you are using the explicit FixedResource class as and object in your model. You can use this command, along with the setitemvar, getitemvar, and getiteminvolved commands, to store variables on the items the object receives. Example setiteminvolved(current.first, current.centerObjects[1]) setitemsendto (obj item, num value) Description This sets the value of the sendto for the item if it is in a FixedResource. Only use this command if you are using an explicit FixedResource class object and want to store a sendto value on the item before releasing it, and then later use the releaseitem() command, passing the port in. If you want to change the evaluated sendto of an item that has already been released, execute holditem(), and then releaseitem() again, instead of this command. Example setitemsendto(item, current.currentsendto) setitemtype (obj object, num value) Deprecated, use labels Description This command is deprecated. Use labels instead. This command sets the itemtype attribute of the object to value. If the object does not have the itemtype attribute, this command does nothing. The attribute itemtype is typically used to distinguish between different types of flowitems that may be of the same class. Example setitemtype(item,duniform(1,3)); This sets the itemtype attribute of the flowitem referenced by item to a random integer between 1 and 3. setitemvar (obj item, num var, num value) Description This sets the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3, and the value parameter should be whatever value you want to set it to. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the getitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example setitemvar(current.first, 3, time()) setkinematicsrotoffset (node infonode, num rx, num ry, num rz) Description Sets the initial kinematics rotational offset for a kinematics operation. For more information, refer to the help documentation on kinematics. Example setkinematicsrotoffset(current.labels[\"kinematics\"], 0, 0, 180); setlabel (obj node, str/num label, num/str/node value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets the value of an object's label. Example setlabelnum (obj object, str/num label, num value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value. Example setlabelstr (obj object, str/num label, str value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value Example setloc (obj object, num x, num y, num z[, num xFactor, num yFactor, num zFactor]) Deprecated, use Object.location Description This command is deprecated. Use Object . location instead. Sets the x, y, and z location of the object relative to its container. Example setmessageloopsleep (num interval, num sleeptime) Description For developer use. Set a sleep time for each cycle of the message loop to decrease cpu load. Use carefully because a large value can make FlexSim unresponsive to user input. Every interval milliseconds, FlexSim will pause for a period of sleeptime milliseconds. This command may help certain laptops that tend to overheat due to excessive cpu usage. Example setmessageloopsleep(1) setname (obj object, str value) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodename (obj/node object, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodenum (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setnodestr (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setobjectbillboard (obj object, num mode) Sets the billboard attribute of the visual tool object Description This command sets the billboard attribute of the visual tool object. The following modes are available: 0: No Billboard, the visual tool will display based on its set rotation. 1: Vertical Billboard (plane only), this will cause the plane to stand vertically in the model and always face toward the camera along the same viewing plane. 2: All Around Billboard (plane only), this will cause the plane always present its face to you no matter what the viewing angle is. 3: Screen Locked Billboard, locks the Visual Tool in front of the view. Example setobjectbillboard(current, 1); setobjectimageindex (obj object, num index) Deprecated, do not use. Description This command is deprecated. Do not use. Sets the index number of the bmp or jpeg image to be assigned to the base of the object (2D shape and base image). For the new index to take effect, the imagebase node of the object must be removed or renamed, so this command renames the imagebase node to \"_imagebase\" for you. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Example setobjectimageindex(item,gettextureindex(\"fs3d\\\\BBsphere.bmp\")); setobjectshapeindex (obj object, num index) Sets the index number for the 3D shape of an object Description Sets the index number for the 3D shape of an object. For the new index to take effect, the shape node of the object must be removed or renamed, so this command renames the shape node to \"_shape\" for you. The index number must be a valid index number of a currently imported 3D shape. To view currently imported 3D shapes and to import more shapes, use View -> Media Files. See setframe() as another solution to changing the 3D shape of an object on the fly. Example setobjectshapeindex(item,getshapeindex(\"fs3d\\\\Processor.3ds\")); setobjecttextureindex (obj object, num index) Sets the index number of the image assigned as a texture for the object's 3D shape Description Sets the index number of the bmp or jpeg image to be assigned as the texture for the object's 3D shape. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Note that this command does not change the object's imageobject attribute so the original texture will return when the model is reset. Example setobjecttextureindex(item,gettextureindex(\"bitmaps\\\\flowitempicture.bmp\")); setpickingdrawfocus (obj theview, obj focus, num what[, obj secondaryfocus, num flags]) Description For developer use. Sets the draw code following this call to be picked as the focus when clicking or dragging. Usually you would use this to draw custom sizers and grippers on your object, and then implement an OnDrag or an OnClick event on the object that would call getpickingdrawfocus() to figure out what part was clicked. flags is a bitwise combination of one \"DETECT_DRAG\" setting, as well as optional \"override\" bits. The override bits aren't used to define picking focus, but will cause FlexSim to override its normal drawing of sizers and bounding boxes. DETECT_DRAG_X, DETECT_DRAG_Y, DETECT_DRAG_Z - will only detect dragging along the given axis, relative to the object being drawn. Use this with the draginfo() command in your OnDrag event to determine where the object is being dragged. DETECT_DRAG_XY, DETECT_DRAG_YZ, DETECT_DRAG_XZ - will only detect dragging along the given plane. Again you would use this with the draginfo() command in the OnDrag event. OVERRIDE_DRAW_SIZER_X, OVERRIDE_DRAW_SIZER_Y, OVERRIDE_DRAW_SIZER_Z, OVERRIDE_DRAW_SIZER_X_NEG, OVERRIDE_DRAW_SIZER_Y_NEG, OVERRIDE_DRAW_SIZER_Z_NEG, OVERRIDE_DRAW_SIZER_ALL - these flags will cause the engine to not draw the flagged sizers OVERRIDE_DRAW_YELLOW_BOX - causes FlexSim to not draw the yellow box around the object when selected OVERRIDE_DRAW_GREEN_BOX - causes FlexSim to not draw the green \"statistics-active\" box around the object OVERRIDE_DRAW_REDBOX - causes FlexSim to not draw the red selection box around the object when selected OVERRIDE_DRAW_HOVERBOX - causes FlexSim to not draw the yellow hover box around the object when hovering over it OVERRIDE_DRAW_ALL - causes FlexSim to not draw any sizers or boxes around the object OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse down\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been pressed on the given object. OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse up\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been released on the given object. OVERRIDE_SET_MOUSE_MOVE_PICK - explicitly sets the view's \"mouse move\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been moved on the given object. OVERRIDE_SET_MOUSE_HOVER_PICK - explicitly sets the view's \"mouse hover\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been hovered over the given object. Example setpickingdrawfocus(view, current, 20, drawsurrogate(current).first.subnodes[3], DETECT_DRAG_Y); setport (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setpreempt (obj tasksequence, num newpreempt) Sets the preempt value of the tasksequence Description Sets the preempt value of the tasksequence to the value of newpreempt. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example setpreempt(tasksequence, PREEMPT_NOT); This example changes the task sequence's preempt value to not preempt. setpriority (obj tasksequence, num newpriority) Sets the priority of the tasksequence Description Sets the priority value of the tasksequence to the value newpriority. Example setpriority(myts, 1); This example sets the priority value of the task sequence myts to the value of 1. setprogressbar (num progress) Description For developer use. Sets the progress bar to the specified value. Should be a value between 0 and 100. Example setprogressbar((numread / numtotal) * 100); setproperty (str filename, num property, str newvalue) Description For developer use. Sets the value for the specified property in the specified file to the newvalue. Example setproperty(modeldir() + \"MyModel.fsm\",1,\"Custom Title\"); setquerynode (node queryNode) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example setrank (obj/node object, num index) Deprecated, use treenode.rank Description This command. Use treenode . rank instead. Sets the rank of a child node in its parent's sub-tree. Example setresetposition (obj object) Sets the reset position of the object Description Sets the reset position of the object to its current position. Example setresetposition(current); setrot (obj object, num rx, num ry, num rz) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Sets the rotation of the object. Example sets (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setsdtvalue (node sdtNode, str valName, num/str/node toVal) For developer use Description Primarily for developer use only. Sets the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example setselectedobject (obj view, obj selected) Description For developer use. Sets the selectedobject (yellow highlighted object) of the view. Note that this is different than so(). The highlighted object is accessed by the selectedobject() command. Example setselectedobject(ownerview(c), model().first) setsize (obj object, num sx, num sy, num sz) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Sets the size of the object. Example setstate (obj object, num state [, num profilenr]) Deprecated, use Object.setState() Description This command is deprecated. Use Object . setState (stateNum); Sets the state of an object. Example setstate_s (obj object, str statename) Description This command is deprecated. Use Object . stats .state().valueString = stateStr; For development use. Set the state of an object using the actual name of one of the states. The state names must be as they appear in a state pie chart. Example setstate_s(current,\"busy\") settable (node table, num sx, num sy[, num type, num overwrite]) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example settableheader (string/num/node table, num row/col, num rowcolnr, string value) Deprecated, use Table.setColHeader() or Table.setRowHeader() Description This command is deprecated. Use Table . setColHeader () or Table . setRowHeader () instead. Sets the value of the header field of a table Example settablenum (str/node/num table, num row, num col, num value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the number value in a table cell. Example settablesize (str/num/node table, num rows, num cols [, num datatype, num overwrite y/n]) Deprecated, use Table.setSize() Description This command is deprecated. Use Table . setSize () instead. Sets the size of a table. Example settablestr (str/node/num table, num row, num col, str value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the text value in a table cell. Example settableviewselection (obj tableview, num startrow, num startcol, num endrow, num endcol[, num rangeselected]) Description For developer use. Sets the blue selection range in a table view. If any of the number parameters are less than 0, it deselects everything. Use 0 to select header cells. Example settableviewselection(c,0,1,2,2); setticker (node thenode[, num tickspersecond]) Description For developer use. Set the ticker script node. If tickspersecond is specified, the code will be executed that many times per second, otherwise the code associated with the node will be executed at each iteration of the windows event loop. The node must be toggled FlexScript or C++. No model events are created in association with the ticker node execution. To turn off ticker execution, use setticker(0). Example setticker(so()) settokencolor (node token, num red{0-255}, num green{0-255}, num blue{0-255} [, num alpha{0-255}]) Description Deprecated. Use Token . setColor . Example settokencolor(token, 100, 100, 0, 255); settokenshape (node token, num index) Description Deprecated. Use Token . setShape . Example settokenshape(token, 16); settrackedvariable (str/node trackedvar, num value[, num rate]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example setundos (num maxundos) Deprecated Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Sets the maximum number of allowable undos. A copy of the entire model will be saved each time a mouse is clicked or a key is pressed. Using the setundos command, you specify the maximum number of model copies that will be remembered for undoing. This command first requires creating a node in the main tree named undo and giving it number data. Example setundos(2); setvarnum (obj object, str/num var, num value) Sets the value of an object's numeric variable Description Set the specified variable on the object to the number passed in as value. Example setvarnum(current.centerObjects[1],\"speed\",1.5); setvarstr (obj object, str/num var, str value) Sets the value of an object's string variable Description Set the string value of the specified variable on the object. Example setvarstr(current,\"cycletime\",\"return exponential(10,1);\"); setviewtext (obj/HWND window, str text) Description For developer use. Set the text of a gui edit field. Example setviewtext(c,\"hello\") shapeinfo (num info[, p1, p2, p3]) Gets or sets information about loaded 3D shapes. Description Gets or sets information about loaded 3D shapes. Example shapeinfo(SHAPEINFO_GET_ANIMATION_COUNT, shapeIndex); shiftpressed () Description For developer use. Test if SHIFT key is pressed. Example shiftpressed() shiftscheduledownfunction (node downBehavior, node table, node downObject, double duration) Description Example shiftscheduledownfunction(lunch, shiftSchedule1, doctor, 400); showcompilerconsole () Description For developer use. Show the compiler console. Example showcompilerconsole() showgraphicinfo (num showhide, str filename) Deprecated, do not use Description This command is deprecated. Do not use. Example showhelp (str topicname) Description For developer use. Opens a help topic specified by the topic name. Example showhelp(\"getting_started\"); showhtmlhelp (str topic) Description For developer use. Open FlexSim's User Manual with the given topic to open. Example showhtmlhelp(\"Welcome_to_Flexsim.html\") showprogressbar (str caption) Description For developer use. Opens the progress bar with the specified caption. The bar's progress will be initialized to 0. Use setprogressbar to update the progess value. Example showprogressbar(\"Loading data, please wait\"); sign (num value) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Sign of value. Example simexec (num cmd, num v1) Description Example sin (num angle) Deprecated, use Math.sin() Description This command is deprecated. Use Math . sin () instead. Gets the sin of an angle in radians. Example skip () Description For developer use. Advance the model run by one step (process exactly one event) and then process any and all events at that same exact model time. Example skip() so () Gets a reference to the last node designated as so() Description This command returns a reference to the last node that was designated the selected object. This command is only used in the scripting window. To designate a node as so, right-click on the node in the tree and select Edit|Designate This Node (so). Any node in the tree can be designated the selected object. Example getnodename(so()) This returns the name of the object that is currently designated the selected object. This command would generally only be used in the scripting window. The final semicolon (;) is not needed in the scripting window. socketend () Shuts down the processes started with socketinit() Description This command shuts down the processes that were started with socketinit(). It should be called when the model has completely finished working with the sockets that it had open. This function returns true if the shut down is successful. See clientsend() for more information. Example socketend(); socketinit () Initializes background processes that allow Windows Sockets to be used Description This command initializes the background processes that allow Windows Sockets to be used. It must be called before any calls to socket commands will work. This function returns true if the initialization is successful. See clientsend() for more information. Example socketinit(); socketx socketx(int serverclient, int cmd, int port=0, char* data=\"\", linkedlist * thenode=SAFENODE) Not implemented yet Description Not implemented yet. Example sorttable (str/node/num table, num column) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by the values in column in ascending order. Example soundchange (obj view, num sound, num volume, num tempo, num repeat, num balance) Change a currently playing sond Description Change a currently playing sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Interesting affects are achieved when the volume and balance are changed based on the viewpoint relative to an object making the object appear to be emitting the sound. Example soundchange(sv(),1,1,1,1,.5) soundload (str path+filename) Load a sound into FlexSim Description A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. Microsoft Wave Format files (.wav) can be loaded and played. Sounds can have their volume, balance and frequency adjusted dynamically. Multiple channels are managed through the Microsoft DirectSound Interface. Example int applauseindex = soundload(\"c:/My Music/APPLAUSE.WAV\"); soundplay (obj view, num soundindex, num volume [, num tempo, num repeat y/n, num balance]) Play a loaded sound Description Play a loaded sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplay(sv(),3,.75,.25,1,.5) Continuously play sound index 3 in the selected view with 3/4 volume, and 1/4 tempo and balanced evenly across both speakers. soundplayfile (obj view, str path+filename, num volume [, num tempo, num repeat, num balance]) Play a sound directly from a file Description Play a sound directly from a file. Sounds are attached to a window by the operating system, so the view parameter is important. The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplayfile(sv(),\"C:/My Sounds/APPLAUSE.WAV\",1,1,0,.5); soundstop (obj view, num sound) Stop a sound playing Description Stop a sound playing. Sounds are attached to a window by the operating system, so the view parameter is important. Example soundstop(sv(),1) spacebase ([num view/object]) Description Set the OpenGL matrix to the scaled space of the current object/view. If the parameter is 0, then the object's base space matrix will be loaded. If the parameter is 1, then the view's space will be loaded, meaning any subsequent draw commands will face the viewer directly and not change scale. This command can only be used in OnDraw event and Custom Draw Code trigger. See drawtoobjectscale() when scaling the OpenGL space by the object's size. Example spacebase(0); spaceglobal () Deprecated, use drawtomodelscale() Description This command is deprecated. Use drawtomodelscale() instead. Set the OpenGL space to the global matrix. Example spaceglobal() spaceobject () Deprecated, use drawtoobjectscale() Description This command is deprecated. Do not use. Use drawtoobjectscale() instead. Example spaceobject() spacerotate (num x, num y, num z) Description Apply rotation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glRotatef( z, 0.0f, 1.0f, 0.0f); glRotatef(-y, 0.0f, 0.0f, 1.0f); glRotatef( x, 1.0f, 0.0f, 0.0f); Example spacerotate(90, 0, 0) This rotates the current coordinate space by 90 degrees around the FlexSim x-axis. Subsequent draw commands will be performed from this new rotation. spacescale (num x, num y, num z) Description Apply scale transform to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glScalef(x,z,y); Example spacescale(2, 1, 1) This scales the current coordinate space by 2 times in the FlexSim x direction. Subsequent draw commands will be performed from this new scaling. spacetranslate (num x, num y, num z) Description Apply translation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glTranslatef(x,z,-y); Example spacetranslate(current.size.x, -current.size.y, 0) This translates to the bottom left corner of the object assuming no translation has previously been applied. Subsequent draw commands will be performed from this new location. spline (obj spline, num perc) Description For developer use. Calculate spline mapping and set the current spline parameters using the spline object spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will not set the precalculated values for the spline object given in spline, as in fastspline().The parameter perc is the position along the spline of interest. This command does not lock precalculated values as when the fastsplineall() or fastsplineupdate() commands are used. A spline can be defined as any chain of objects that are connected from output ports to input ports. Pass the first object in the output port to input port chain as parameter 1. Example spline(splinestartobject,0.6) splinedraw (obj object) Description For developer use. Draw a line along a spline based on the current spline geometry as calculate by the spline(). Example splinedraw() splinedrawextrusion (obj object, num step, num wide, num high, num top, num side) Description For developer use. Draw a spline based on the current spline geometry as calculate by the spline() with a rectangular extrusion. Using parameters of spline object. Example splinedrawextrusion(current,20,1,2,1,1) splinelength () Description For developer use. Current spline parameter. This will return the length of the current spline. Example splinelength() splineposobject (obj object) Description For developer use. Position object according to current spline parameters. Example splineposobject(current) splinerx () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerx() splinery () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinery() splinerz () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerz() splinex () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinex() spliney () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example spliney() splinez () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinez() sqr (num value) Deprecated, use Math.sqr() Description This command is deprecated. Use Math . sqr () instead. Square of value. Example sqrt (num value) Deprecated, use Math.sqrt() Description This command is deprecated. Use Math . sqrt () instead. Square root of value. Example standardpreopen (obj object[, int nobuild]) Description For developer use. Queries if there are any open windows that are the same as the current window being opened. If so, then the current window is closed. Example standardpreopen(c) startanimation (obj object, num/str animation[, num speedtype, num speedvalue, num repeattype, num repeatvalue]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Starts an animation on an object. Example startanimation(current, \"Stand\"); startlisten (obj listener) Description For developer use. Tell the executive that an object is a listener. Not persistent across sessions. This command will add a node in the executive listener list pointing to listener. When a session is reloaded, or after a compile, listeners need to be reset. The listening mechanism can add a significant load to the executive, so use minimally. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. The listener must filter the message to decide whether to respond to the OnListen message. Refer to the Online Reference Guide for the parameters passed into an OnListen message. Example startlisten(so()) startuploadlibraries ([num viewalreadyset]) Description For developer use. Loads libraries on startup. Example startuploadlibraries() statisticaltime () Deprecated, use the Model class Description This command is deprecated. Use Model . statisticalTime instead. Returns the current simulation time with respect to when stats were last reset, such as since the warmup time has passed in an experiment or since resetstats() was executed. Example item.TimeIn = statisticaltime(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. statsenablemask (num mask) Description For developer use. Enable or disable aspects of stats collection. Set a 32 bit enable mask: Sum of flags. Bits: 0 = State; 1 = Flow; 2 = Inside Ports. Example statsenablemask(add(1,2)) step () Description For developer use. Advance the model run by one step. One step means to process exactly one event. Example step() stick (num stickno, num command [, HWND/num win, var/num p]) Description For developer use. This command queries the joystick or controller state or sets functionality for a joystick or controller. stickno defines an id for the joystick or gamepad you want to query. This is a number between 0 and 32. Usually you will only have one joystick connected to your computer, so in this case you should use the value 1 as stickno. If you are using a gamepad, you might need to use stickno 2. For Xbox controllers, stickno will be a value between 0 and 3. For VR controllers, stickno will be either 0 or 1. For Oculus touch controllers, stickno 0 is the left hand and stickno 1 is the right hand. Use stickno -1 to get the status, position, or rotation of a connected VR headset. command defines the operation that the command should perform. This should be one of the macros below: STICK_JOY_STATUS - Queries the connectivity of the joystick. If the joystick is connected properly, then this command will return 0. If the return value is non-zero, then there is some error with the joystick's connectivity, and you can view the system console to see what the error is. The following errors apply: MMSYSERR_NODRIVER - The joystick driver is not present. MMSYSERR_INVALPARAM - Invalid joystick ID or hwnd is NULL. JOYERR_NOCANDO - Cannot capture joystick input because a required service (such as a Windows timer) is unavailable. JOYERR_UNPLUGGED - The specified joystick is not connected to the system. JOYERR_PARMS - Invalid joystick ID or hwnd is NULL. STICK_JOY_XPOS - Current X-coordinate of the joystick. This is a number between 0 and 65535. 0 means the joystick is pushed all the way to the left, 65535 means it is pushed all the way to the right, and 32768 is exactly in the center. If you are using a gamepad, then this is the x position of the left side joystick. STICK_JOY_YPOS - Current Y-coordinate of the joystick. Again this is a number between 0 and 65535. 0 is up, 65535 is down. If you are using a gamepad, this is the position of the gamepad's left joystick. STICK_JOY_ZPOS - Current Z-coordinate of the joystick. If you are using a joystick, this will usually be the current setting of the joystick's throttle. Again it is a value between 0 and 65535. If you are using a gamepad, this represents the y position of the right side joystick. STICK_JOY_BUTTONS - Current state of the 32 joystick buttons. This is bitwise integer with each bit representing the state of a given button. For a joystick, the main trigger button is usually represented by the 0x00000001 bit, other buttons on the stick are 0x00000002 and 0x00000004, and buttons on the base of the joystick are then higher order bits. You will need to test these out on your own as each joystick is a little different. STICK_JOY_SET_CAPTURE - This command sets the joystick capture to a FlexSim window that you specify. This command requires the win and p parameters to be passed in. By executing this command, joystick messages will be sent to the OnStick attribute of the view. For example, if you have an ortho view that you would like to listen to joystick events, you would call this command, passing the ortho view's HWND handle (use windowfromnode()), and a polling period. The period specifies a time interval in milliseconds to repeatedly call the OnStick event. If p is 0, then the OnStick event will only be called when the joystick's state changes. If p is greater than 0, then the OnStick event will simply be called at the end of each sample period interval. Example: stick(1,5, windowfromnode(sv()), 200); This will cause the OnStick event to be called every 200 milliseconds. In order for this to work, you need to add an OnStick attribute to the view (you may also need to rebind the view's attributes after adding it: right-click->Edit|Rebind Object Attributes). STICK_JOY_RELEASE_CAPTURE - This command releases the joystick capture for the window that was previously captured with the 5 command. You need to pass in the win parameter as with command 5. STICK_JOY_RPOS - Current position of the rudder or fourth joystick axis of the joystick. For a joystick, this is usually the rotation of the joystick if your joystick can rotate around its z axis. Again it is a number between 0 and 65535. If you are using a gamepad, it is the x position of the right side joystick. STICK_JOY_UPOS - Current fifth axis position of the joystick. STICK_JOY_VPOS - Current sixth axis position of the joystick. STICK_JOY_POV - Current position of the point-of-view control of the joystick. It is a number between 0 and 35900 and represents the number of degrees times 100. For a gamepad, this represents the directional pad on the left of the gamepad. Up is 0, right is 9000, down is 18000, left is 27000. If the directional pad is not pressed, the value will be 65535. If you are using a joystick, there may be a directional thumb controller on the stick itself that you can press up, down, right, or left, and this will get the setting of that controller. STICK_JOY_CURRENT_BUTTON - Current button number that is pressed. STICK_JOY_FLAGS - Flags indicating the valid information returned about the joystick. STICK_XBOX_STATUS - Queries the connectivity of the Xbox controller. If the controller is connected properly, this returns 0. STICK_XBOX_BUTTONS - Bitmask of the device digital buttons. A set bit indicates that the corresponding button is pressed. STICK_XBOX_LEFT_THUMB_X - Left thumbstick x-axis value. Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick. A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right. STICK_XBOX_LEFT_THUMB_Y - Left thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_X - Right thumbstick x-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_Y - Right thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_LEFT_TRIGGER - The current value of the left trigger analog control. The value is between 0 and 255. STICK_XBOX_RIGHT_TRIGGER - The current value of the right trigger analog control. The value is between 0 and 255. STICK_VR_STATUS - Returns 1 if an Oculus Rift controller is active. Returns 2 if an HTC Vive controller is active. Returns 0 if the controller is inactive. Returns nullvar if the controller is not attached. STICK_VR_THUMB_X - Thumbstick or trackpad x-axis value between -1 and 1. STICK_VR_THUMB_Y - Thumbstick or trackpad y-axis value between -1 and 1. STICK_VR_INDEX_TRIGGER - Index trigger value between 0 and 1. STICK_VR_GRIP_TRIGGER - Grip trigger value between 0 and 1. On HTC Vive, grip button is pressed. STICK_VR_BUTTON_1 - The first button is pressed. A or X on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_2 - The second button is pressed. B or Y on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_3 - The third button is pressed. Enter or Home on Oculus Rift. Menu on HTC Vive. STICK_VR_BUTTON_4 - The fourth button is pressed. Thumbstick on Oculus Rift. Trackpad on HTC Vive. STICK_VR_TOUCH_BUTTON_1 - The first button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_2 - The second button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_3 - The third button is touched. Unused on Oculus Rift. STICK_VR_TOUCH_BUTTON_4 - The fourth button is touched. STICK_VR_TOUCH_THUMB_REST - The thumb rest sensor is touched on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_INDEX_TRIGGER - The index trigger sensor is touched. STICK_VR_TOUCH_POINTING - The hand gesture is pointing on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_THUMB_UP - The hand gesture is thumbs-up on Oculus Rift. Unused on HTC Vive. STICK_VR_HAND_POSITION - The controller position in VR space. STICK_VR_HAND_ROTATION - The controller rotation in VR rotation coordinates. STICK_VR_HAND_WORLD_POSITION - The controller position in FlexSim world space. STICK_VR_HAND_WORLD_ROTATION - The controller rotation in FlexSim rotation coordinates. STICK_VR_HAND_OFFSET_POSITION - The controller's position in FlexSim world space, but with an offset applied based on the controller's rotation. Pass an array as the offset vector in the p parameter. You can use this option to get a point relative to the controller, such as a finger position or where the controller is pointing. STICK_VR_TARGET_FLOOR_POSITION - The target position on the floor that the controller is pointing towards. Pass a value in the p parameter for the maximum distance away from the controller. STICK_VR_SET_VIBRATION - Causes the controller to vibrate. On Oculus Rift, pass an array for the p parameter where the first element is a value between 0 and 1 for the frequency and the second element is a value between 0 and 1 for the amplitude. On HTC Vive, pass a duration in microseconds for the p parameter. STICK_VR_SUBMIT_VIBRATION - Causes the controller to subtly vibrate. On original Oculus Touch controllers, pass an array of amplitudes (0 - 255) for the p parameter to be queued up and executed. Unused on HTC Vive or Oculus Rift S controllers. Example stick(1, STICK_JOY_YPOS); This gets the y position of the joystick id 1 stop ([num fast]) Stops the simulation run Description This command stops the simulation clock from running. The model stops with all of its pending events still in the queue. If the user starts the model again before resetting, the model will continue from the exact time that it stopped at. If fast is 1, then FlexSim will not rebind objects. This will improve speed if you are stopping and starting often. Example stop() stopanimation (obj object, num/str animation) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Stops an animation on an object. Example stopanimation(current, \"Walk\"); stopinput (obj object) Deprecated, use Object.input.stop() Description This command is deprecated. Use Object . input .stop() instead. This command closes the input of the object just like closeinput() does, but it also keeps track of consecutive stopinput() commands, and will only open input after all stops have been resumed. Refer to closeinput() documentation for additional information. Example stopinput(current.centerObjects[1]); stoplisten (obj listener) Description For developer use. Tell the executive that this object is not a listener anymore. This command will remove the pointer to listener from the listeners list if previously added with the startlisten() command. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. Example stoplisten(so()) stopobject (obj object, num state [, num id, num priority, num stateprofile] ) Deprecated, use Object.stop() Description This command is deprecated. Use Object . stop () instead. Tells the object to stop whatever it is doing, go into the state specified (in the state profile if specified), and waits for resumeobject() to be called. Stopobject commands are accumulated, meaning if stopobject is called twice on the same object, the object will not resume its operations until resumeobject has been called twice as well. Stopping an object depends on the type of object that is being stopped. For FixedResources, generally events are delayed indefinitely, input and output is stopped, and all operations going into and out of the object are stopped. This means that TaskExecuters trying to load/unload to or from the object will have to wait until the object has been resumed. For TaskExecuters, events are not delayed, but rather a preempting task sequence with priority of 100,000 is created for the TaskExecuter, with one TE_STOP task in it. Be aware that, if there are several stop requests for the same object, the state for each stop request is not remembered. If an object is requested to stop by entity A with state 12, and then is later requested to stop by entity B for state 14, it will go into state 14 and forget state 12. Even if entity B resumes the object before entity A, the object will remain in state 14 until all stop requests have resumed. The last two parameters, id and priority, are optional and have recently been added to fix the problem in the previous paragraph. If you specify these parameters, then it will store a record of the stop request, instead of just incrementing a value for the number of stops requested. The id is like a key for that stop request. The priority allows the object to prioritize its stop requests. For example, if you have a stop request for the scheduled down state, and another for the breakdown state at the same time, technically the object should be in two states at once, but since a FlexSim object can only be in one state at a time, the priority value breaks the tie and goes into the state of the highest priority stop request. The id value should match an id value that is added to a resumeobject() command later on. This is for matching stop requests with their appropriate resume requests. For example, if you stop an object for scheduled maintenance with and id of 1, once the scheduled maintenance is finished, you will need to resume the object with the same id of 1. Example stopobject(current.centerObjects[1], STATE_BLOCKED); stopoutput (obj object) Deprecated, use Object.output.stop() Description This command is deprecated. Use Object . output .stop() instead. This command closes the output of the object just like closeoutput() does, but it also keeps track of consecutive stopoutput() commands, and will only open output after all stops have been resumed. Refer to closeoutput() documentation for additional information. Example stopoutput(current.centerObjects[1]); stoptime (num time [, num stopNum=1]) Sets the time when the simulation should stop Description This command sets the time at which the simulation should stop running. The model will not necessarily stop at the exact time specified, but will stop at the first system check on or after the specified stop time. The model may stop early if there are no more events to execute. If stopNum is specified, the stop time at that rank will be set. If time is -1, the command returns the stoptime of stopNum. If time is 0 and stopNum is -1, all stop times will be reset such that there is only one disabled stop time at time 0. Example if (stoptime(-1) < 500) stoptime(500); This sets the stoptime to 500 if it was less than 500 to begin with. store () Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. It explicitly stores an archived copy of the current model inside the undo folder of the main tree. Refer to undos() command documentation for more information. Example store(); strascii (num asciivalue) Description This command returns a string that contains the character whose ascii value is character. Example strascii(91) + \"alert(\" + strascii(34) + \"Hello There\" + strascii(34) + \")\" + strascii(93); This returns a string that contains the following phrase: [alert(\"Hello There\")] stringcompare (str text1, str text2) Compare strings for alphabetical order Description Compare strings for alphabetical order. The return value is zero if the strings are the same. If text1 is alphabetically before text2, a negative number is returned. If text1 is alphabetically after text2, a positive number is returned. Same as the strcmp() C++ function. Example stringcompare(\"zenith\",\"beta\") returns 1 comparetext(\"aqua\",\"yellow\") returns -1 stringcopy (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. Returns a substring of string defined by index start (base 1) and length. Example stringlen (str string) Deprecated, use string.length Description This command is deprecated. Use string . length instead. Gets the length of string. Example stringpart (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. This command will return a portion of a string. The new string is defined with a starting character number and a length. A start value of 0 refers to the first character in the original string. Example stringpart(\"Hello\",2,3) returns the sub string \"llo\". stringreplace (str stringtosearch, str searchfor, str replacewith) Deprecated, use string.replace() Description This command is deprecated. Use string . replace () instead. Returns a copy of stringtosearch with all occurrences of searchfor replaced with replacewith. Example stringreturn (str returnstring, ptr callpoint) Description This command is deprecated. You can simply return strings from C++ user commands with the return statement. Prior to FlexSim 7.7, this command was used to return a string from a C++ implementation of a user command. This command was only needed in C++. In FlexScript user commands, you can simply return the string with the return statement. Example C++: stringreturn(result, callpoint); return 0; stringsearch (str stringtosearch, str searchfor, int startindex[, int flags]) Deprecated, use string.search() Description This command is deprecated. Use string . search () instead. Searches the string for the given substring searchfor (base 0). Example stringtoken (str token, str delimit) Finds the next token in a string Description Finds the next token in a string. The first parameter is a string containing delimited tokens. The second parameter is a string with a set of delimiter characters. Works similarly to strtok() in C++. Example string token = \"Jacob,Emma,Michael,Isabella,Ethan\"; string name = stringtoken(token,\",\"); while(stringlen(name)>0) { pt(name);pr(); name = stringtoken(NULL,\",\"); } This prints each name in the list to a different line of the output console. stringtonum (str string) Deprecated, use string.toNum() Description This command is deprecated. Use string . toNum () instead. Converts string to a num. Example stringtopchar (str string) Deprecated, use apchar() Description This command is deprecated. Use apchar() instead. This command returns the string as a pointer to a C++ character. This is used to convert variables of type string to type char* for some C++ commands which only take char*'s. It is not needed in Flexscript. Example setname(current,stringtopchar(\"ThisObjectName\")); This sets the name of the object referenced by current to \"ThisObjectName\". The stringtopchar() command may not be mandatory here, but it is legal. strquote (str string) Deprecated, use \\\" Description This command is deprecated. Use \\\" instead to include quotation marks within a string. Example strquote(\"hello\") sub (num value1, num value2) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. operator instead. of value1 and value2. This returns the result of the arithmetic expression value1-value2. Example double operator instead. = sub(10,4); suspenddraw (num bitmask) Description For developer use. Bit mask. Disables draw in window types. Bits: 0 - TREE; 1 - PLANAR; 2 - SPATIAL Example suspenddraw(1) sv () Gets a reference to the last view desginated as sv() Description This command returns a reference to the last view window that was designated the selected view. To designate a view window, right-click on the window, not on any objects drawn in that window, and select \"Set as (sv)\". Any open view window (e.g. Ortho or VR) can be designated the selected view. Example flypath(sv(),1); This begins flypath number 1 in the view that is currently designated the selected view. swapnoderanks (obj/node parentnode, num index1, num index2) Swap the ranks for two nodes in a parent node's sub-tree Description This command swaps the ranks of two nodes in the parent node's sub-tree. Swapping ranks can be faster than using setrank() especially for very large lists of nodes. Example swapnoderanks(parentNode,4,parentNode.subnodes.length); This swaps the 4th ranked node in parentNode's sub-tree with the last node in parentNode's sub-tree. This can make removing that node from parentNode's sub-tree faster if the list is very long. Note that this will put the last node into the 4th position, so ordering in the tree should not matter to be able to do this. In other words, this would break fifo ordering. swaptablecols (str/num/node table, num column, num column2) Deprecated, use Table.swapCols() Description This command is deprecated. Use Table . swapCols (). instead. Swaps two columns in a table. Example swaptablerows (str/num/node table, num row, num row2) Deprecated, use Table.swapRows() Description This command is deprecated. Use Table . swapRows (). instead. Swaps two rows in a table. Example switch (num value) Description Execute one of several possible cases, based on value Example int msgcase = msgparam(1); switch(msgcase) { case 1:msg(\"\",\"case 1\");break; case 2:msg(\"\",\"case 2\");break; default:msg(\"\",\"case 2\");break; } switch_cppfunc (node thenode[, num off/on]) Get or set the \"C++\" flag of thenode Description Get or set the \"C++\" flag of thenode. A value of 1 is C++, a value of 0 is not C++, a value of -1 gets the current value. If a node is toggled as C++ it will be compiled as a C++ function at time of compile. Example switch_cppfunc(so(),1) switch_destroyonreset (obj thenode[, num off/on]) Get or set the \"destroy on reset\" flag of the object Description Get or set a node's \"destroy on reset\" flag. If the flag is 1, the node will be deleted when the model is reset. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_destroyonreset(so(),1) switch_dllfunc (node dllnode[, num on/off/get]) Description Switches the node's dll toggle on or off. 1 switches it on, 0 off, and -1 gets the current state. Example switch_dllfunc(getvarnode(current, \"exittrigger\"), 1); switch_enablestats (obj object[, num off/on]) Get or set the \"stats\" flag of the object Description Get or set an object's \"stats\" flag. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. Example switch_enablestats(so(),1) switch_expanded (node thenode[, num off/on]) Expand/collaps sub-level nodes of thenode Description Expand or collapse sub-level nodes of thenode in the tree view. This is analogous to clicking the + and - sign of thenode in the tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_expanded(so(),1) switch_flexscript (obj object[, num on/off/query]) Description For developer use. This command switches the flexscript toggle of a node. 0 = toggle node non-flexscript 1 = toggle node as flexscript -1 = query whether node is toggled (1) or not (0) Example switch_flexscript(var_s(current, \"code\"), 1); switch_hashedlist (obj thenode[, num off/on]) Get or set the \"Hashed List\" flag of thenode Description Get or set the \"Hashed List\" flag of the thenode. A value of 1 sets the node to store a hashed list of its subnodes for fast lookup by name, a value of 0 sets the node to not store a hashed list of subnodes, a value of -1 gets the current value. Example switch_hashedlist(so(),1) switch_hidden (obj object[, num off/on]) Description Not implemented Get or set the \"is hidden\" flag of the node object. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. The \"is hidden\" flag is not currently implemented. Example switch_hidden(so(),1) switch_hidebase (obj object[, num off/on]) Deprecated, do not use Description This command is deprecated. Do not use. Get or set the \"Show 2D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. The 2D shape (base) of an object is visible in the Planar view window. Note that view windows also have an attribute named hideallbases that controls the display of 2D shapes (bases) for ALL objects in their view. Example switch_hidebase(so(),1) switch_hideconnectors (obj object[, num off/on]) Get or set the \"Hide Connectors\" flag of the object Description Get or set the \"Hide Connectors\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the connectors will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. Example switch_hideconnectors(so(),1) switch_hidecontents (obj object[, num off/on]) Get or set the \"Show Contents\" flag of the object Description Get or set the \"Show Contents\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the contents of an objects will stop the display of objects (e.g. flowitems) contained within it. Example switch_hidecontents(so(),1) switch_hidelabel (obj object[, num off/on]) Get or set the \"Show Name\" flag of the object Description Get or set the \"Show Name\" flag of the object. A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. A value of -1 gets the current value for the switch. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. Example switch_hidelabel(so(),1) switch_hideshape (obj object[, num off/on]) Get or set the \"Show 3D Shape\" flag of the object Description Get or set the \"Show 3D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. Example switch_hideshape(so(),1) switch_noselect (obj object[, num off/on]) Get or set the \"No Select\" flag of the object Description Get or set the \"No Select\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is unselectable, a value of 0 is selectable, and a value of -1 gets the current value. Setting no select on an object keeps it from being clicked on with the mouse in the 3D view. Example switch_noselect(so(),1) switch_orphancoupling (obj thenode[, num off/on]) Get or set the \"orphan coupling\" flag of the object Description Get or set a node's \"orphan coupling\" flag. If the flag is 1, when the coupling node is copied, the copy won't be destroyed if it no longer points to a valid node. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_orphancoupling(so(),1) switch_preservecoupling (obj thenode[, num off/on]) Get or set the \"preserve coupling\" flag of the object Description Get or set a node's \"preserve coupling\" flag. If the flag is 1, when the coupling node is copied, the copy will also point to its partner. For one-way couplings, the original and the copy will both point at the same partner node. For two-way couplings, a new partner node will be created. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_preservecoupling(so(),1) switch_protected (obj object[, num off/on]) Get or set the \"Protected\" flag of the object Description Get or set the \"Protected\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is protected, a value of 0 is unprotected, and a value of -1 gets the current value. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Example switch_protected(so(),1) switch_selected (obj thenode[, num off/on]) Get or set the \"Selected\" flag of thenode Description Get or set the \"Selected\" flag of thenode (red highlight). A value of 1 is selected, a value of 0 is unselected, a value of -1 gets the current value. Example switch_selected(so(),1) switch_showobject (obj object[, num off/on]) Expand/collaps the object data of an object node Description Expand or collapse the object data of an object node in a tree view. This is analogous to clicking the > next to the object node in a tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_showobject(so(),1) switch_statelocked (obj object[, num off/on]) Description Get or set the \"is code state locked\" flag of the node object. A value of 1 is enable, a value of 0 is disable, a value of -1 gets the current value. If enabled, the node will be locked as either C++ or flexscript depending on what it currently is (the model will not change it when \"Make All Code C++/Flexscript\" is chosen through the main menu. Example switch_statelocked(so(),1) switch_stateused (obj thenode[, num off/on]) Description For developer use. Get or set where a node inside a state profile is used by the object. This flag is automatically set in the setstate() command, so developers can know which states are used by an object, for UI development. Example switch_stateused(so(),1) switch_variable (obj object, str var[, num off/on]) Description For developer use. Add and set; or remove a dynamic switch variable to/from an object. When set to on, a node called var will be added to the structure of object and have a numerical value of 1 assigned to it. When set to off, a node called var, if present will be removed from the structure of object. Used in model update code. Example switch_variable(so(),\"arrivalmode\",1); system_cld Description System Command. Do not use. Example system_clda Description System Command. Do not use. Example system_cli Description System Command. Do not use. Example system_clia Description System Command. Do not use. Example system_cln Description System Command. Do not use. Example system_clna Description System Command. Do not use. Example system_cls Description System Command. Do not use. Example system_cls Description System Command. Do not use. Example system_clsa Description System Command. Do not use. Example system_gld Description System Command. Do not use. Example system_glda Description System Command. Do not use. Example system_gli Description System Command. Do not use. Example system_glia Description System Command. Do not use. Example system_gln Description System Command. Do not use. Example system_glna Description System Command. Do not use. Example system_gls Description System Command. Do not use. Example system_glsa Description System Command. Do not use. Example system_ms Description System Command. Do not use. Example system_sld Description System Command. Do not use. Example system_slda Description System Command. Do not use. Example system_sli Description System Command. Do not use. Example system_slia Description System Command. Do not use. Example system_sln Description System Command. Do not use. Example system_slna Description System Command. Do not use. Example system_sls Description System Command. Do not use. Example system_slsa Description System Command. Do not use. Example systemwindow (num windowtype) Description For developer use. Get HWND handle to a system window: 1-Output 2-System 3-Compiler 4-Trace 5-Commands 6-Attributes 7-Completions 8-app 9-appsb 10-Output Edit 11-Compiler Edit 12-Trace Edit 13-System Edit Example systemwindow(1) tabcontrolrefresh (obj tabcontrolnode) Description For developer use. Refreshes a tab control. Example tabcontrolrefresh(c.find(\"@/tabcontrol\")); tan (num angle) Deprecated, use Math.tan() Description This command is deprecated. Use Math . tan () instead. Gets the tan of an angle in radians. Example templatetocode (obj code, obj edit) Description For developer use. Apply template code to c++. This is used in a picklist's template code drop-down to apply edited template code back to the C++/Flexscript code that created it. Example templatetocode(so(),sv()) textureaxis_s (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture S axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_s(1,0,0,0) textureaxis_t (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture T axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_t(0,0,1,0) thisclass <no parentheses> Description For developer use. This keyword is used in an eventfunction to get the class of the object receiving the call. Example thisclass time () Deprecated, use the Model class Description This command is deprecated. Use Model . time instead. Returns the current simulation time. Example item.TimeIn = time(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. toggleallcodestates (node startpoint, num ascpp) Toggles all code nodes under startpoint as either C++ or flexscript Description Traverses the tree starting at start point and toggles all code nodes to either c++ or flexscript. 1 toggles to c++, 0 toggles to flexscript. This will only change nodes that have not been locked to their code state. This is the same as using the menu option Build|Make all code C++ or Build|Make all code flexscript. Example toggleallcodestates(model(), 1); tonode (thing) Assert type as a node pointer Description Assert type as a node pointer. Only serves a real purpose in C++. Example tonode(getnodenum(couplingnode)) Converts the numeric value of couplingnode to a treenode tonum (thing) Assert type as a number Description Assert type as an arithmetic number. Only serves a real purpose in C++. Example return tonum(current); This returns a pointer to the current object, casting it as a number. toptr (thing) Description For developer use. Assert type as pointer. Assert that the argument thing is of type void*. Only serves a real purpose in C++, but is safe to use in flexscript. Example toptr(so()) tostring (thing) Description For developer use. Assert as pchar string. Assert that the number val is of type char*. Only serves a real purpose in C++, but is safe to use in Flexscript. Example tostring(eventdata) tracemaskevents (num mask) Description For developer use. Set a 32 bit trace mask: Sum of Math.pow(2,N1)+Math.pow(2,N2)... where Nx are the event numbers to be reported in the trace. See View|Trace Debugger... Example tracemaskevents(listsum(Math.pow(2,1),Math.pow(2,2),Math.pow(2,3))) tracemaskobject (obj object) Description For developer use. Set an object to be included in the event reporting in the trace debugger. See View|Trace Debugger... Example tracemaskobject(Model.find(\"Processor3\")) tracemasktime (num start, num end) Description For developer use. Define a start and end time for event reporting in the trace debugger. See View|Trace Debugger... Example tracemasktime(100,200) trackedvariable (str name) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example trackpopup (node thenode) Description Example trafficcontrolinfo (obj trafficcontrol, num info [, num a, num b]) Gets information on a traffic controller Description This command gives you access to various information on a traffic control, as well as lets you direct the traffic control to perform logic. Logic/data that is performed/returned is based on the info parameter, as follows: trafficcontrolinfo(tc, TCI_NR_ACTIVE_TRAVELERS) - returns the total number of active travelers in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER, num travelnr) - returns a reference to the nth active traveler in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_COUPLING, num travelernr) - returns a reference to a coupling node, stored in the Traffic Control's variables tree, that is associated with the nth active traveler. This coupling can be used to stored custom user information regarding that active traveler. To do this, add sub-nodes to the coupling node with nodeinsertinto(), add data, etc. Note that once the active traveler leaves the traffic control area, the coupling, and its sub-nodes, will automatically be destroyed. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_RANK_FROM_TRAVELER, obj traveler) - This command takes a reference to a traveler object and returns which index in the traffic control's active travelers is associated with that traveler. If zero is returned then the object is not an active traveler in the traffic control. trafficcontrolinfo(tc, TCI_NR_MEMBERS) - Returns the total number of network nodes that are members of the traffic control area trafficcontrolinfo(tc, TCI_MEMBER, num membernr) - Returns a reference the nth network node member of the traffic control trafficcontrolinfo(tc, TCI_MEMBER_COUPLING, num membernr) - Returns a reference to a coupling node, stored in the traffic control's variables, that is associated with the nth network node member of the traffic control. Like TCI_ACTIVE_TRAVELER_COUPLING, this node may be used to store data associated with that network node. trafficcontrolinfo(tc, TCI_MEMBER_RANK_FROM_NETWORK_NODE, obj netnode) - Takes a network node reference and returns the member index of that network node in the traffic control. If zero is returned then the network node is not a member of the traffic control. trafficcontrolinfo(tc, TCI_NR_ENTRY_REQUESTS) - Returns the number of entry requests currently in queue waiting to enter the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_TRAVELER, num requestnr) - Returns a reference to the traveler associated with the nth entry request, who is waiting get into the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NETWORK_NODE, num requestnr) - Returns a reference to the network node where the traveler is waiting, associated with the nth entry request trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NODE, num requestnr) - Returns a reference to a node associated with the nth entry request. Like TCI_ACTIVE_TRAVELER_COUPLING, you may add sub-nodes to store data associated with the request. Do not, however, change the data on this node, as this is used by the traffic control logic. trafficcontrolinfo(tc, TCI_ALLOW_ENTRY, num requestnr) - Calling this command will instruct the traffic control to allow the traveler associated with the nth entry request to enter the traffic control area. trafficcontrolinfo(tc, TCI_SET_ENTRY_REQUEST_RANK, num requestnr, num settorank) - Calling this command will cause the traffic control to rerank its nth entry request to the specified rank. Also, a note regarding using the traffic control triggers to override the traffic control's default logic. The traffic control's OnEntryRequest trigger, which fires when a traveler first requests entry into the traffic control area, can take 3 different return values: TC_ON_ENTRY_REQUEST_DEFAULT - If this value is returned from the trigger, the traffic control will perform its normal filtering logic. TC_ON_ENTRY_REQUEST_ALLOW - If this value is returned, the traffic control will ignore its default logic and simply allow the traveler into the area. Note that if this is used, the traffic control will ignore its maximum capacity variable, so depending on the logic you define, the number of travelers in the area may exceed the maximum capacity variable you specify on the traffic control. TC_ON_ENTRY_REQUEST_QUEUE - If this value is returned, the traffic control will ignore its default logic and add the request to its request queue, disallowing the traveler from entering the area at that time. The traffic control's OnExit trigger may take one of two return values: 0 - If this value is returned, the traffic control will perform its default logic, allow other travelers to enter, etc. 1 - If this value is returned, the traffic control will do nothing. In this case the user should use the trigger to explicitly tell the traffic control which traveler(s) to receive using TCI_ALLOW_ENTRY. If you plan on implementing your own custom logic for allowing travelers into the area, then it is recommended that you use the traffic control's default \"Mutual Exclusion\" mode. Example treenode netnode = trafficcontrolinfo(tc, TCI_MEMBER, 2); transfernode (node movenode, node container) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up to set the node's parent (container). This command moves movenode into the container node. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernode(current.labels[\"inactivequeue\"].first, current.labels[\"activequeue\"]); transfernodeobj (node movenode, node container) Moves movenode into the container node's object data Description This command moves movenode into the container node's object data. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernodeobj(current.attrs.find(\"body\"), current.next); transitionport () Description Get the most recently traversed port number by an object in the model. It refers to the last moveobject() call which occurred in the model run. Example transitionport() transportincomplete (obj object, obj item [, num inport, obj transporter]) Notifies the FixedResource object that item will now be moved into it Description This command notifies a downstream FixedResource object that the specified item will now be moved into it from an upstream object. This should only be used if the upstream object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the downstream FixedResource to manage data on how many items are slated to enter the object, but haven't arrived yet. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportincomplete(current.outObjects[port], item, opipno(current, port)); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem transportoutcomplete (obj object, obj item [, num outport, obj transporter]) Notifies the FixedResource object that item will now be moved out of it Description This command notifies the FixedResource object that the specified item will now be moved out of it. This should only be used if the object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the FixedResource to manage data on how many items are still in the object but are ready to leave. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportoutcomplete(current, item, port); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem travelto (obj object, obj spline, num x, num y, num z, num vmax, num acc, num dec) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Calculate current travel parameters for the object. A travel path will be calculated. Once set, the object's position will be calculated based on the travel path as defined by this command. This function returns the time of travel end. This function can be used in conjunction with a spline to create curved travel paths. Example travelto(traveler,NULL,100,100,0,5,1,6) traveltoupdate (obj object [, obj spline]) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Update the object's position based on it's current travel parameters. Explicitly set an object's position based on the time and travel path parameters as calculated from the travelto() command on object, using spline as the path geometry if desired. Example traveltoupdate(current) Updates the current object's position based on the travel parameters set earlier by the traveto() command. This command is usually executed from the Custom Draw Code field. triangular (num min, num max, num mode[, num stream]) Returns a random sample from a triangular distribution Description Generates a continuous random variate from a triangular distribution with parameters as defined. Example trunc (num value) Deprecated, use Math.trunc() Description This command is deprecated. Use Math . trunc () instead. Truncation of value. Example truncatemediapath (str path) Description Returns a truncated media path based on the full path of the file passed. If this file exists relative to the model directory, then the path will be truncated to be relative to the model directory. It will also be truncated if it is relative to the FlexSim install directory. Example truncatemediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\texturebox.wrl\"); This example will return the string \"fs3d\\\\texturebox.wrl\" undo (obj view) Description Undoes the previously recorded action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example undo(view); undos (num off/on) Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. This command is used to turn on (1) and off (0) the automatic saving of model copies each time there is a mouse click or key press. Use the setundos command, to specify the maximum number of model copies that will be remembered for undoing. To function correctly, this command requires first creating a node in the main tree named undo and giving it number data. Example undos(1); uniform (num min, num max[, num stream]) Returns a random number between the min and max values Description uniform( a , b , stream ) is a bounded continuous probability distribution. Inputs: a and b are real numbers with a < b a is the location parameter defining the minimum variate b defines the maximum variate b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = [ a , b ] mean = ( a + b ) ⁄ 2 variance = ( b − a )² ⁄ 12 Possible Applications: Used to approximate a value that is felt to be randomly varying between a and b but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any real number inbetween will be returned. The uniform(0, 1) distribution is essential in generating random variates from all the other distributions and will return a continuous set of random values between and inclusive of 0 and 1. Example uniform(12.3, 27.5, 3); Random number stream 3 will be used to generate a random variate from a uniform distribution having a minimum of 12.3 and a maximum of 27.5. unloadimage (int textureid) Description For developer use. Unload an image from the Media List by index. Example treenode view = node(\"VIEW:/1>Documents/Dashboard/1+/~/GraphPanel/1/1\"); repaintview(view); viewtofile(view, modeldir() + \"test.png\"); unloadimage(gettextureindex(modeldir() + \"test.png\")); int newindex = loadimage(modeldir() + \"test.png\", modeldir() + \"test.png\"); setobjecttextureindex(Model.find(\"Plane1\"), newindex); This example renders a dashboard chart to an image file, unloads that image from the media list, reloads the image back into the media list, and sets the texture index of a plane to that image. up (obj object) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up instead. Reference a node's parent node. Example updateanimation (obj object [, num updatetime, num animationnr]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Updates an animation on an object. Example updateanimation(current); updatekinematics (node infonode, obj object [, num updatetime]) Updates the location of the object based on its kinematics Description Updates the location of the object based on the kinematics operation and the current time. For more information, refer to the help documentation on kinematics. Example updatekinematics(current.labels[\"kinematics\"], current, time()); updatelocations (obj object) Updates the location of the object and the objects inside of it Description This command causes the object to update the location of itself and possibly the objects inside of it. Use this command to refresh locations before querying or executing functionality that would query the location of an object. Example updatelocations(current); updatereport (num/str/node report) For Dynamo use Description For Dynamo use. Causes the specified Report to add a new row to its table and populate it correctly. This is used to add entries that are not time-based. Example updatereport(\"ResultsReport\"); updatestate (obj object [, num profilenr]) Updates the state of the object Description Updates the state of the specified object. Could be used in the OnDraw function of an object to make its states display smoothly while the model is running. Example updatestate(current); updatestates () Updates the states of all objects in the model Description Updates the states of all objects in the model. Additionally, this command also updates the content stats of all the objects. The 'Stop' button and menu option both call this function before executing a stop() so that objects' stats are updated. Otherwise, reports will not reflect the time the object was in its last state. Example updatestates(); updatetoolsmenu () Deprecated, use the Toolbox Description This command is deprecated, use the Toolbox. Updates the tools menu to reflect any additions or deletions to the tools. Example updatetoolsmenu() updateundorecord (obj view, num uniqueid[, num updatetype, num p1, num p2]) Description Updates an undo record for the specified view. The following undo record types should be updated: UNDO_MOVE_SIZE_ROTATE UNDO_MOVE_SIZE_ROTATE_GROUP UNDO_SELECTION_CHANGE See Miscellaneous Concepts > Advanced Undo for more information. Example updateundorecord(view, getundorecordid(record)); uselisteners (num mask) Description Enable or disable listening. Example uselisteners(1) userdatadir () Gets the full path to the directory where FlexSim stores user data Description Returns a full path to the directory where FlexSim stores user data, such as global preferences and compiler settings. Example userdatadir() returns a string like \"C:\\Users\\USERNAME\\AppData\\Roaming\\Flexsim\\Flexsim7\\\" userfunction_n (obj object, num index [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified rank index. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,4,1,2,3) Executes the code associated with a node ranked 4th in the userfunctions group of the current object. userfunction_s (obj object, str name [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead, because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified name. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,\"myfunc\",1,2,3) Executes the code associated with a node named \"myfunc\" in the userfunctions group of the current object. userinput (obj targetnode, str text [, int stop]) Prompts the user for a value in a dialog box Description Prompts the user for a value in a dialog box. The value is placed in the specified node. The model does not stop running while the dialog is open unless the stop parameter is specified. If the stop parameter is specified, then the model stops until the dialog is closed and it returns the value. Example userinput(model().subnodes[3].labels[\"myLabel\"],\"Please enter a value\"); validatename (obj node, num isviewtext [, obj object]) Description For developer use. Makes sure the name of node is a valid FlexSim name, replacing invalid characters with underscores and bringing up a message if changes were made. If isviewtext is 1, it assumes the node passed is an edit field, and it changes the viewtext of the field, instead of the name of the node. If the object parameter is specified, it checks that object's name against all the other names of objects in its container. If there are names that are the same, it will pop up an error message. This command is called when you press the Apply or OK buttons in an object's Properties window. Example validatename(current, 0); var (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by index. Example var(so(),1) var_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by name. Example var_s(current,\"myatt\") vectorprojectx (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojecty (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojectz (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example viewdist (obj view, obj object) Gets the distance from the focus point of view to object Description Returns the distance from the focus point of the view to object. Example if(viewdist(view, current) > 100) ; This command queries whether the distance between the point that the view is looking at and the location of the current object is greater than 100. viewmenucommand (str name, obj view) Description For developer use. Execute a command from the stock view menu. Example viewmenucommand(\"Edit|Copy\") views () Reference to the views tree Description This command returns a reference to the views tree. The views tree contains all of the information about the windows that are currently open as well as all of the available GUIs. When defining string paths to nodes in the view tree, VIEW can be used as in the following example: node(\"VIEW:/standardviews/ortho\"); Example activateview(views().find(\"standardviews/runcontrol\")); This activates the GUI called \"runcontrol\" which is stored in the node called \"standardviews\" of the view tree. viewtofile (obj view, str path[, num width, num height]) Saves the specified view as a bitmap image Description Saves the specified view as a bitmap image to the specified file. Example viewtofile(node(\"VIEW:/active/ortho\"), modeldir() + \"screenshot.bmp\")); webcommand (str name[, p1, p2, p3, ...]) Used to manipulate FlexSim's HTML engine/widgets Description A command used for manipulating FlexSim's HTML engine, html widgets, etc. Example string innerhtml = webcommand(\"getelementinnerhtml\", view, \"title\"); weibull (num location, num scale, num shape[, num stream]) Returns a random sample from a weibull distribution Description weibull( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞, ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + ( β ⁄ α ) Γ (1 ⁄ α ) where Γ () is the Gamma function. variance = ( β ² ⁄ α ) { 2 Γ (2 ⁄ α ) − 1 ⁄ α [ Γ (1 ⁄ α ) ] ² } Probability Density Functions: Possible Applications: The weibull distribution is commonly used when there is not sufficient data available because it can take on so many different shapes depending on the shape factor. It is a very common distribution used for representing the time between equipment failures, as well as the time to complete a manual task. Comments: The weibull( γ , β , 1 ) and exponential( γ , β ) distributions are the same. The weibull( γ , β , 2 ) and rayleigh( γ , β ) distributions are the same. The weibull distribution is skewed to the left if α > 3.6 Example weibull(0, 2, 3, 5); A weibull distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 3, and random stream number 5. while (num expression) {} Description Repeatedly execute the following block {} while the expression returns a non-zero value. Be careful with this function because it can cause FlexSim to freeze if the value never becomes false. Example while(current.subnodes.length > 4) { current.last.destroy(); } windowflash (HWND window, num count, num timeout) Description For developer use. Causes the specified window to flash. Count is the number of times to flash the window. Timeout controls the time between flashes. If timeout is 0, the default cursor blink rate is used. Example windowflash(windowfromnode(ownerview(c)),2,125); windowfromnode (obj viewnode) Description For developer use. Get the window handle (HWND) of a view node. Example windowfromnode(c) windowgray (HWND window, num graystate) Description For developer use. Enables or disables the window based on the graystate parameter (1 or 0). Example graywindow(windowfromnode(c),1); windowmenu (obj view) Description For developer use. Returns a reference to the view's menu as an HMenu. Example windowmenu(c) windowmove (HWND window, num x, num y, num sx, num sy[, num refresh]) Description For developer use. Move a window to the specified x,y pixel location and give it the sx,sy size in pixels. If refresh is 1, then the window will repaint itself. Example windowmove(windowfromnode(c),10,10,200,200,1) windowredraw (HWND window, num x, num y, num sx, num sy, int flags) Description For developer use. A wrapper around the RedrawWindow() windows API command. The parameters x, y, sx, and sy define the client rectangle that the call applies to, and flags defines the flags that will be passed to RedrawWindow(). Example windowredraw(windowfromnode(c),10,10,200,200, RDW_INVALIDATE); windowshow (HWND/node thewindow , num show) Description For developer use. Show or hide a window. If the second parameter is 1, then the window will be shown. Otherwise the window will be hidden. Example windowshow(windowfromnode(c)) windowstyle (HWND/obj window [, num style, num useexstyle]) Gets the windowstyle of window Description Used in GUI development. Dynamically gets/sets the window style of the given window. If style is 0, this will simply return the current style of the window. Otherwise, it will set it. If useexstyle is 1, it will apply/get the extended style of the window. Refer to Windows SDK documentation for more information on window styles. Example As an example, this command is used in the perspective view's \"Full Screen\" context menu option to change the style of the perspective window so that it no longer has a title bar when it is in full screen mode. wmp (num cmd, str file, HWND win, num left, num right, num top, num bottom, num controls) Opens the file in Windows Media Player Description Opens the file in Windows Media Player. Example xcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation (). Gets the x location of the rotational center of the object within its container. Example xloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation (). Gets the x location of an object. Example xrot (obj object) Deprecated, use Object.rotation or Object.setRotation() Description This command is deprecated. Use Object . rotation or Object . setRotation () instead. Gets the x rotation of an object (rotation about the x-axis). Example xsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the x size of an object. Example ycenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the y location of the rotational center of the object within its container. Example yloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the y location of an object. Example yrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the y rotation of an object (rotation about the y-axis). Example ysize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the y size of an object. Example zcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the z location of the rotational center of the object within its container. Example zloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the z location of an object. Example zonecheckrequests (obj instanceObject, obj/str zone) Description Reevaluates all tokens in a zone's request list. Example zonecheckrequests(fixedResource, \"Zone 1\") zonegetpartitionvaluefortoken (obj zone, obj token) Description Gets the partition value for a token in the given zone. Example zonegetpartitionvaluefortoken(zone, token) zoneistokeninsubset (obj zone, obj token, str subsetName) Description Determines whether the given token is in the named subset of the given zone Example zoneistokeninsubset(zone, token, \"MySubset\") zrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the z rotation of an object (rotation about the z-axis). Example zsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the z size of an object. Example"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/CommandGroupsIndex.html",
        "title": "Category Command Index",
        "content": "Command Categories AGV Communication Conversions Conveyor Deprecated Development Drawing Events FixedResources Kinematics and Splines Language Media Miscellaneous Model Execution NetworkNodes Object Data Object Functions Object Ports Output People Process Flow Rack Object Statistics Strings Tables TaskExecuter Object Tree Access Tree Node Data User Interface Do no remove, this fixes the anchor on doc.flexsim.com AGV agvaddlistener agvinfo agvreassigncp agvredirect cp cpaddlistener cpallocate cpconnection cpdeallocate cpdistance cpisavailable cpnumconnections cptasksequencequeue Do no remove, this fixes the anchor on doc.flexsim.com Communication Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel. clientclose clientconnect clientcreate clientreceive clientsend excelclose excelcreatesheet excelcreateworkbook exceldeleterange exceldeletesheet excelexporttable excelgetrangeparam excelgetrangesheet excelimporttable excellaunch excelmultitableexport excelmultitableimport excelopen excelquit excelrangereadnum excelrangereadstr excelrangewritenum excelrangewritestr excelreadcell excelreadnum excelreadstr excelsave excelsetrange excelsetsheet excelversion excelwritenum excelwritestr requestdecision rundocument runprogram serveraccept servercloseconnection serverclosemain servercreatemain serverreceive serversend socketend socketinit Do no remove, this fixes the anchor on doc.flexsim.com Conversions Commands for converting units, data types, and spatial coordinate. apchar cm convert days fpm fps ft hours in minutes mph seconds tonode tonum toptr Do no remove, this fixes the anchor on doc.flexsim.com Conveyor conveyorgetmotor conveyorinfo conveyorresumeitem conveyorsenditem conveyorsetspeed conveyorstopitem mergegetlanestate mergegetnumlanes mergeislaneclear mergereleaselane Do no remove, this fixes the anchor on doc.flexsim.com Deprecated Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead. acos add addfullhistorymoverecord addfullhistorystaterecord addlabel addtablecol addtablerow and angle anode anum aptr arraysize asin assertattribute assertlabel assertsubnode atan atan2 att att_s aviadd avifinish avistart bcgetitemkinematics bcgetitemposition bcsetdirection bcsetitemconveystate bitwiseand bitwisenot bitwiseor bitwisexor ceil cell cellrc cellrowcolumn centerobject changeconveyorspeed changetask clearconsole clearcontents clearfullhistory clearglobaltable closeinput closeoutput coloraqua colorarray colorblack colorblue colorbrown colorgray colorgreen colorlightblue colorlime colororange colorpink colorpurple colorrandom colorred colorrgb colorsilver colorteal colorwhite coloryellow comparetext concat connect containerentry containerexit content contentobj cos count cppgettoken cppsettoken createcopy createdelaytask createemptytasksequence createglobaltasksequence createinstance createloadtask createsendmessagetask createstandardtask createtravelloadtask createtraveltask createtraveltolocandwaittask createtraveltoloctask createtravelunloadtask createunloadtask createwaittask current dbchangetable dbclose dbexportnode dbexporttable dbgetfieldname dbgetmetrics dbgetmode dbgetnumcols dbgetnumrows dbgettablecell dbgettablenum dbgettablestr dbimportnode dbimporttable dbopen dbsettablecell dbsettablenum dbsettablestr dbsqlquery dbusername dbviewtable dbwritechanges defaultdragconnection degreestoradians deletetablecol deletetablerow dellabel destroyobject diffsign dispatchtasksequence div divide dumpquery enablefullhistory endwaittask eq excelexportnode excelimportnode excelmacro excelrangeread excelrangewrite excelread excelwrite executetablecell exp exportfullhistory fabs factorial familycreate familydelete familymember familymemberadd familymemberdel familymemberqty fillarray findmatch findmax findmin first floor fmod forobjecthighlightedin forobjectlayerunder forobjectsbefore forobjectsbehind forobjectselectionset frac ge get getcolorcomponent getdatatype getinput getitemtype getlabel getlabelnum getlabelstr getmodelunitnum getmodelunitstr getmoverecord getmoverecordvalue getname getnodename getnodenum getnodestr getnroftasks getnummoverecords getnumstaterecords getobjectimageindex getoutput getquerycolcount getquerymatchcount getquerymatchtablerow getqueryvalue getrank gets getstatenum getstaterecord getstaterecordvalue getstatestr gettablecell gettablecols gettableheader gettablenum gettablerows gettablestr gettaskinvolved gettasksequence gettasksequencequeue gettaskstate gettasktype gettaskvariable gettotalnroftasks gettrackedvariable getvartype glBegin glColor3d glColor4d glDisable glEnable glEnd glLoadIdentity glMatrixMode glNormal3d globallist glPopAttrib glPopMatrix glPushAttrib glPushMatrix glRotated glScaled glTexCoord2d glTranslated glVertex3d groupaddmember groupmember groupnummembers groupremovemember gt helpcommands hidelabel hideports inc inittrackedvariable inobject inserttask installpackage item iterate label last le listbackorders listentries listinlist listmax listmaximum listmean listmin listminimum listmul listpull listpush listremove listsub listsum loadsound local localarray log log10 lognormal lognormalmeanstdev lt main makearray max maxof min minof module movetablecol movetablerow movetasksequence mul multisorttable nametomodelpath ncols ne next node nodeadddata nodedeldata nodepoint nodetomodelpath nodetopath not nrcp nrip nrop nrows ntravelto ntraveltoupdate numtostring objectconnect objectshapecode objecttexcode openflexsimchart openglcolor opengllighting openinput openoutput or outobject parg parnode parstr particleset parval pc pd pf pi port pow pr prev pt query radianstodegrees rank rankobj reftable relloc repeat reset resumeanimation resumeinput resumeobject resumeoutput richeditaddtext richedittoken round runexpertfit savefpk senddelayedmessage sendmessage set setcenter setcolor setcurrent setitem setitemtype setlabel setlabelnum setlabelstr setloc setname setnodename setnodenum setnodestr setobjectimageindex setport setquerynode setrank setrot sets setsize setstate setstate_s settable settableheader settablenum settablesize settablestr settrackedvariable setundos showgraphicinfo sign sin sorttable spaceglobal spaceobject sqr sqrt startanimation statisticaltime stopanimation stopinput stopobject stopoutput store stringcopy stringlen stringpart stringreplace stringreturn stringsearch stringtonum stringtopchar strquote sub swaptablecols swaptablerows switch_hidebase tan time trackedvariable transfernode travelto traveltoupdate trunc undos up updateanimation updatetoolsmenu userfunction_n userfunction_s var var_s vectorprojectx vectorprojecty vectorprojectz xcenter xloc xrot xsize ycenter yloc yrot ysize zcenter zloc zrot zsize Do no remove, this fixes the anchor on doc.flexsim.com Development High-level development commands not typically intended for end users. addcommand backupfile buildall buildnodeflexscript changedisplay cleannodeflexscript cmdcompile cmddelete cmdexit cmdloadbyextension cmdloadsession cmdloadtree cmdnew cmdopen cmdsaveas cmdsavesession cmdsavetree consoleexecutefs copyattributes copycolor copylabel copylabels copyvariable copyvariables copyvisuals daemonstate documentusercommands excelupdatepreferences fgldebuglevel fileisreadonly fillwithatts fscheckall function_n function_s getapplicationtitle getnextparametersobject getproperty gettreedrawposition groupconnectfrom groupconnectto groupcopyconnections help howmanyattributes howmanycommands license licenseactivation maintenance modeleditmode postclosewindowmessage postmovewindowupdate postwindowmessage rebindobjectattributes recover refreshcommandlist refreshglobalvariables refreshmodelcommands sendwindowmessage setapplicationtitle setmessageloopsleep setproperty setticker statsenablemask stick suspenddraw switch_variable toggleallcodestates tracemaskevents tracemaskobject tracemasktime uselisteners Do no remove, this fixes the anchor on doc.flexsim.com Drawing Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window. bindtexture draw3dtext drawbox drawcolumn drawcube drawcylinder drawdisk drawflattext drawfont drawimage drawline drawobject drawpie drawquad drawrect drawrectangle drawshadow drawsphere drawtext drawtomodelscale drawtoobjectscale drawtriangle fglColor fglDisable fglEnable fglinfo fglLoadIdentity fglMatrixMode fglNormal fglPopMatrix fglPushMatrix fglRotate fglScale fglTranslate getdrawtextmetric glIsEnabled glLineWidth glPointSize mesh meshaddindex meshaddvertex meshdraw meshinfo meshsetattrib meshsetvertexattrib setdrawnamefunction spacebase spacerotate spacescale spacetranslate textureaxis_s textureaxis_t Do no remove, this fixes the anchor on doc.flexsim.com Events Commands for creating, searching and manipulating events. addtoeventtypelegend createevent createtickevent delayevents delayeventsofobject destroyevent destroyeventsofobject destroymessageevents eventcode eventdata eventget eventloginfo eventqty listenerinfo logevent registereventtype startlisten stoplisten Do no remove, this fixes the anchor on doc.flexsim.com FixedResources Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object. evaluatepullcriteria getiteminvolved getitemsendto getitemstate getitemvar holditem inititem pullitem receiveitem recycleitem releaseitem resetuniqueid resumetransportsin resumetransportsout savestoppedtransportin savestoppedtransportout setiteminvolved setitemsendto setitemvar transportincomplete transportoutcomplete Do no remove, this fixes the anchor on doc.flexsim.com Kinematics and Splines Commands associated with kinematics and spline math. addkinematic deactivatekinematics dynamicsplineall fastspline fastsplineall fastsplineupdate getkinematics initkinematics profilekinematics scalekinematicstotime setkinematicsrotoffset spline splinedraw splinedrawextrusion splinelength splineposobject splinerx splinery splinerz splinex spliney splinez updatekinematics Do no remove, this fixes the anchor on doc.flexsim.com Language Flexscript or C++ keywords and constructs. a break case continue default else for forobjecttreeunder if return stringcompare switch while Do no remove, this fixes the anchor on doc.flexsim.com Media Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths. applyshapefactors autoloadallmedia autoloadimages autoloadshapes autoloadsounds flyactive flyendnode flypath flypathadd flypathreset flystart flystop flyto flyupdate getshapeindex getsoundindex gettextureindex loadimage loadthreedobject mediareset objectsoundcode shapeinfo soundchange soundload soundplay soundplayfile soundstop unloadimage viewtofile Do no remove, this fixes the anchor on doc.flexsim.com Miscellaneous Miscellaneous commands that have not been categorized. addsystemcontrolleritem commandlineparam contextdragconnection createuserlibrary deleteselected dropuserlibraryobject duplicateselected executefsfile filebrowse firecreateevent flipselected geteventtime getlastfiletype getlinecontrollerdata getmodelunit getreportnum groupsetnames hideprogressbar highestconnection insertcopy integrityscan isprojectcompiled loadselectedfromfile loadstate loaduserlibrary memberadd memberremove memberremoveall moveobject moveselectedintohighlighted notifylinecontroller pickoptiononselect rotateselected savebyname savemodelprepare saveselectedtofile savestate savetree searchfornode seteventtime setprogressbar showprogressbar so startuploadlibraries transfernodeobj updatereport userinput validatename Do no remove, this fixes the anchor on doc.flexsim.com Model Execution Commands for stopping, starting, and managing simulation runs. endreplication fastforward getrunstate go realtime resetexperiment resetlayer resetmodel resetstats runfunction runspeed skip step stop stoptime updatestates Do no remove, this fixes the anchor on doc.flexsim.com NetworkNodes Commands associated with NetworkNode objects and network paths. closenodeedge getedgedist getedgespeedlimit getnetnode getnetnodespline getnetworkdistance getnextnetnode getnextnetnodeoutport gettenavigator gettenetnode gettenetworkinfo isedgeforward netnodefromrank opennodeedge optimizenetwork rankfromnetnode reassignnetnode redirectnetworktraveler trafficcontrolinfo Do no remove, this fixes the anchor on doc.flexsim.com Object Data Commands for accessing and assigning data on objects. assertvariable classobject contentunder emptyfluidobject fluidcontent fluidmaxcontent getanimationvar getcreationtime getentrytime getframe getobjectshapeindex getobjecttextureindex getvarnode getvarnum getvarstr isclasstype reassignticker setanimationvar setframe setobjectbillboard setobjectshapeindex setobjecttextureindex setresetposition setvarnum setvarstr switch_enablestats switch_hideconnectors switch_hidecontents switch_hidelabel switch_hideshape switch_showobject updatelocations updatestate Do no remove, this fixes the anchor on doc.flexsim.com Object Functions Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables. c debug delayednodefunction eventlisten executefsnode i inheritcode ip msgparam msgsendingobject nodefunction nodefunctionlisten param parqty selectall thisclass Do no remove, this fixes the anchor on doc.flexsim.com Object Ports Commands associated with the port connections of an objects. closeallip closeallop closeip closeop cpcpno inputopen ipavailable ipopen ipopno ipready numconnections opavailable openallip openallop openip openop opipno opopen opready outputopen transitionport Do no remove, this fixes the anchor on doc.flexsim.com Output Commands for giving feedback to the modeler for debugging or reporting purposes. endoffile fileclose fileexists fileopen filereadline fpc fpd fpf fpr fpt mpd mpf mpr mpt outputtreecontent print profileevents report reportmode Do no remove, this fixes the anchor on doc.flexsim.com People getactiverole getcensus getnumpeopleresources getpeopleresourceutilization reacquirepreemptedresource shiftscheduledownfunction Do no remove, this fixes the anchor on doc.flexsim.com Process Flow createtoken executesubflow getactivity getbatch getchildtoken getchildtokenrank getlastacquiredresource getparenttoken getprocessflowvar gettoken gettokenbyid gettokenid gettokens releasebatch releasetoken releasewave settokencolor settokenshape zonecheckrequests zonegetpartitionvaluefortoken zoneistokeninsubset Do no remove, this fixes the anchor on doc.flexsim.com Rack Object Commands for accessing and assigning data on Rack objects. rackdrawfilledcell rackdrawvirtualcontent rackgetbaycontent rackgetbayloc rackgetbayofitem rackgetbaysize rackgetcellcontent rackgetcellvar rackgetitembybaylevel rackgetitemcellrank rackgetlevelloc rackgetlevelofitem rackgetlevelsize rackgetnrofbays rackgetnroflevels rackrecycleitem rackrestoreitem racksetcellcontent racksetcellvar Do no remove, this fixes the anchor on doc.flexsim.com Statistics Commands for creating, manipulating, and accessing statistical data; including probability distributions. addbundleentry addbundlefield bernoulli beta binomial calculateconfidence cauchy cempirical clearbundle dataplot dempirical duniform empirical erlang exponential exportdataset extremevalue1a extremevalue1b gamma geometric getbundlefieldname getbundlefieldnr getbundlefieldtype getbundleindexentries getbundlenrentries getbundlenrfields getbundlevalue getdatastat getstat getstatetableutilization getstream graphtohistogram hypergeometric importdataset inversegaussian inverseweibull invertedweibull johnsonbounded johnsonunbounded laplace logarithmic logistic loglaplace loglogistic lognormal2 makehisto negbinomial normal pareto pearsont5 pearsont6 poisson qstudentt randantithetic randinit randnext randomwalk randstate removebundleentry removefirstbundleentry removelastbundleentry setbundlevalue triangular uniform weibull Do no remove, this fixes the anchor on doc.flexsim.com Strings Commands associated with strings, string manipulation and string comparisons. asciistr cdir currentfile documentsdir executestring getdirbrowse getpath modeldir pdir pfile programdatadir replacedata_n replacedata_s replacename searchdata_n searchdata_s searchname strascii stringtoken tostring truncatemediapath userdatadir Do no remove, this fixes the anchor on doc.flexsim.com Tables Commands for accessing, assigning and managing data in tables. exporttable importtable Do no remove, this fixes the anchor on doc.flexsim.com TaskExecuter Object Commands associated with TaskExecuter objects and a tasksequence. addsphere changepersonvisuals createcoordinatedtasksequence dispatchcoordinatedtasksequence distancetotravel drawspheres freeoperators getallocatedfromkey getcoordinatedtasksequence getcurtask getpreempt getpriority getutilizedobject insertallocatetask insertdeallocatetask insertproxytask insertsynctask pickoffsetx pickoffsety pickoffsetz placeoffsetx placeoffsety placeoffsetz profiletasksequence reordertasks requestoperators rerankbesttask setcollisioncheck setpreempt setpriority Do no remove, this fixes the anchor on doc.flexsim.com Tree Access Commands for referencing nodes or objects through FlexSim's tree structure. library maintree model views Do no remove, this fixes the anchor on doc.flexsim.com Tree Node Data Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree. $iter checkdllconnection comparetrees createcoupling enablecode findownerobject getsdtvalue nodebreak nodeinsertafter nodeinsertinto nodejoin objectexists ownerobject removeallcouplingreferences setsdtvalue swapnoderanks switch_cppfunc switch_destroyonreset switch_dllfunc switch_expanded switch_flexscript switch_hashedlist switch_noselect switch_orphancoupling switch_preservecoupling switch_protected switch_selected switch_statelocked switch_stateused Do no remove, this fixes the anchor on doc.flexsim.com User Interface Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows. activateview activedocumentnode activedocumentview activeview addviewtext applicationcommand applyalleditstonodes applyeditstonode applylinks applytoedits attlink beginaggregatedundo beginignoreundo callwebscriptmethod checkforexistingview clearundohistory clickcode closeview codetotemplate codetotemplatetext combocurrentnode comborefresh continueaggregatedundo controlpressed createpopup createundorecord createview cursorinfo deselectall distcutoff distfromviewpoint draginfo dropnodefrom dropnodeto dropx dropy dropz endaggregatedundo endignoreundo findundorecordbyid finishundorecord getchecked getcurrentundorecord getdashboardcontrol getfilebrowse getfilesindirectory getparentwindow getpickingdrawfocus getpickingmode getsystemmetric gettableviewselection getundorecordid getviewhwnd getviewmenu getviewscale getviewtext highlightviewtext iskeydown keyboardfocus keyedclick lastclickednode lastkey lastkeydown lastkeyup listboxrefresh mainmenucommand makeactive menubelow menucheck menugray menumain msg nodefromwindow ownerview pickcolor pickcolornode pickedcolorblue pickedcolorgreen pickedcolorred pickfile picklistapply popupmenu redirectconsole redirectpicklists redo refreshview repaintall repaintallactive repaintview repositionhighlightededits scrollinfo select selectedobject selectedx selectedy selectedz sendonactivatenotify setcameradirection setcameravolume setchecked setcursor setdropcoords setpickingdrawfocus setselectedobject settableviewselection setviewtext shiftpressed showcompilerconsole showhelp showhtmlhelp standardpreopen sv systemwindow tabcontrolrefresh templatetocode undo updateundorecord viewdist viewmenucommand webcommand windowflash windowfromnode windowgray windowmenu windowmove windowredraw windowshow windowstyle"
    },
    {
        "url": "https://docs.flexsim.com/en/25.2/Reference/CodingInFlexSim/CommandReference/CommandGroups.html",
        "title": "Category Command Reference",
        "content": "AGV agvaddlistener (obj agv, node listenernode, num flags[, ...]) Description Adds a listener event on the agv Example agvaddlistener(agv, c, AGV_LISTEN_PRE_ARRIVAL); agvinfo (obj agv, num what[, p1, p2, p3, p4]) Description Deprecated, use AGV class. Gets various information about an agv, based on the what parameter: AGV_CURRENT_CP - Returns the agv's current control point AGV_ORIGIN_CP - Returns the agv's origin control point AGV_INTERMEDIATE_DEST_CP - Returns the agv's intermediate destination control point AGV_DEST_CP - Same as AGV_INTERMEDIATE_DEST_CP AGV_FINAL_DEST_CP - Returns the agv's final destination control point AGV_DEST - Returns the agv's destination object AGV_BATTERY_LEVEL - Returns the agv's current battery level as a percentage of battery capacity (0 - 100) AGV_AMP_HOURS - Returns the agv's current battery level in amp hours AGV_START_RECHARGE - Starts the agv recharging. Returns the time it will take to recharge to full capacity. AGV_RECHARGE_TO_LEVEL - Explicitly set's the agv's battery level to p1 (0 - 100). AGV_ADD_ALLOC_POINT - Should be called from the travel initialization trigger. Manually adds a control point/control area for allocation, i.e. a control point or control area that would not otherwise need to be allocated as part of the agv's current travel path. The control point/control area is passed as p1, and the distance at which it must be allocated is passed as p2. The command will return a reference to a node that represents that allocation. Use AGV_SET_ALLOC_POINT_DEALLOC_DIST and AGV_SET_CAN_STOP_AT_ALLOC_POINT to specify further data on that allocation point. AGV_SET_ALLOC_POINT_DEALLOC_DIST - For a manual allocation point that's been added, this sets the travel distance at which the agv can deallocate the object. You should call this at some point after adding the allocation, so that the object will be properly deallocated. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is the deallocation distance. AGV_SET_CAN_STOP_AT_ALLOC_POINT - Sets whether or not the agv can stop at a manually added allocation point. The default is no, i.e. the agv will not stop at the stop distance, but will continue to the next stoppable point before attempting to allocate the object. Setting this to 1 will allow the agv to stop at the manual allocation point to allocate ahead. p1 is a reference to the allocation point node returned by AGV_ADD_ALLOC_POINT, and p2 is 1 or 0. AGV_ATTACH_TRAILER - Manually attaches a trailer to the AGV. p1: the object to attach. p2: the trailer gap to apply. p3: If 1, the trailer will be attached behind the AGV (attach to the AGV's tail), if 0, the trailer be attached ahead of the AGV (attach to the AGV's head). p4: If 1, the trailer will automatically be detached when the object exits the AGV, if 0, the trailer should be manually detached. AGV_DETACH_TRAILER - Manually detaches a trailer from the AGV. p1: the object that is attached as a trailer. AGV_SPEED - Returns the agv's current speed AGV_PROXIMITY_STATE - Returns 1 if the agv is blocked by proximity on an accumulating path, 0 otherwise. AGV_ACCUM_AHEAD_AGV - Returns the agv ahead of this agv on an accumulating path, if one exists. Example agvinfo(agv, AGV_DEST_CP); agvreassigncp (obj agv, obj controlpoint) Description Deprecated, use AGV class. Reassigns an agv to the specified control point Example agvreassigncp(agv, controlpoint); agvredirect (obj agv, obj object/controlpoint, num mode) Description Deprecated, use AGV class. Redirects the agv to the designated object/control point. mode can be one of the following values: REDIRECT_AND_WAIT - if not redirected before arrival, the agv will wait at the destination until redirected REDIRECT_AS_FINAL - the destination becomes the new final destination for the agv REDIRECT_AND_CONTINUE_ON_ARRIVAL - the agv will continue to the final destination after arriving at the intermediate destination REDIRECT_AND_CONTINUE_ON_PRE_ARRIVAL - the agv will continue to the final destination after pre-arriving at the intermediate destination (it will not decelerate to a stop) Example agvredirect(agv, controlpoint, 1); cp (obj/str object_or_name) Description Returns a reference to an AGV control point Example cp(\"CP547\"); cpaddlistener (obj rootObj, str connectionPath, node listenerNode, num flags[, ...]) Description Adds a listener to events on one or more control points Example cpaddlistener(current, \"Location > LoadPoints\", c, CP_LISTEN_EXIT | CP_LISTEN_AVAILABLE); cpallocate (obj controlPoint, obj allocator, num force) Description Allocates a control point to the claiming object. If successful, a reference to a coupling node representing the allocation will be returned. Example cpallocate(controlPoint, current, 1); cpconnection (obj controlpoint/object, num/str connection, num rank) Description Returns a control point connection. Also, if connection is a string and controlpoint and rank are both 0, then this command will return the index of the given connection. This is for speed, so that you can subsequently use a number for the connection. Example cpconnection(cp, \"ForwardTo\", 1) Returns the first ForwardTo connection on cp cpconnection(cp, \"LookForWork>NextLookForWork\", 1) Traverses two connections to find an object. This is the same as cpconnection(cpconnection(cp, \"LookForWork\", 1), \"NextLookForWork\", 1) cpconnection(cp, \"LookForWork:2>NextLookForWork\", 1) Same as cpconnection(cpconnection(cp, \"LookForWork\", 2), \"NextLookForWork\", 1) int connIndex = cpconnection(0, \"LookForWork\", 0); treenode obj = cpconnection(cp, connRank, 1); Gets the index of the connection, and then uses the index instead of the name. cpdeallocate (obj controlPoint, obj allocator) Description Deallocates a control point from the claiming object. If successful returns 1, otherwise 0. Example cpdeallocate(controlPoint, current); cpdistance (obj fromControlPoint, obj toControlPoint) Description Returns the agv network distance between two control points Example cpdistance(cp1, cp2) cpisavailable (obj controlpoint) Description Returns 1 if the given control point is available. byCriterion is not used right now, but is reserved for future use. Example if (cpisavailable(cp)) { ... } cpnumconnections (obj controlpoint, num/str connection) Description Returns the number of connections a control point has Example cpnumconnections(cp, \"ForwardTo\") cptasksequencequeue (obj controlpoint) Description Returns a reference to the task sequence queue associated with the control point Example treenode tsQueue = cptasksequencequeue(cp); Communication Commands for communicating with external applications such as sockets, database communication, and links with Microsoft Excel. clientclose (num socket) Closes the client socket Description This command closes the client socket specified as socket. It must be called sometime after clientcreate(). Once a socket is closed, nothing can read from it or write to it. The socket number may be reused again by a later call to clientcreate(). This function returns true if the socket closes correctly. Example clientclose(1); clientconnect (num socket, str hostname, num port) Attempts to connect the client socket Description This command attempts to connect the socket specified by socket to a server running on the machine called hostname, which is listening on the port specified. The number passed as socket is the number that was previously returned by clientcreate(). The string passed as hostname can be either the computer's name (if it is on the same network as the client) or its IP address. This command should not be called until after a successful call to clientcreate() is made. If the socket does not connect, then it is closed and clientcreate() will have to be called again to reopen it. This functions returns true if the socket connects successfully. Example clientconnect(1,\"localhost\",1880); clientcreate () Creates a new client socket with TCP/IP protocol Description This command creates a new client socket that is set to communicate using the TCP/IP protocol. FlexSim can create up to fifty client sockets at one time. Each client can be connected to a different server. This function returns a number that must be stored by the model to reference the socket that was created. If an error occurs, this function returns 0. Example int socknum = clientcreate(); clientreceive (num socket, str buffer, num buffersize, num noblock[1/0]) Receives data sent to the socket Description This command receives data that has been sent to the socket specified as socket. The value of socket is the number that is returned by clientcreate(). This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = clientreceive(1,Buf,15,0); flexscript: string readstr = clientreceive(1, NULL, 15, 0); clientsend (num socket, str message[, num charlength]) Sends a message across the socket Description This command sends a message across the socket specified as socket. The value passed as socket is the number returned by clientcreate(). The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example clientsend(1,\"REQ:service\"); excelclose (num save [1/0]) Close the currently open Excel workbook Description This command closes the currently open Excel workbook. If save is 1, the workbook will be saved before it closes. If save is 0, changes made to the workbook will be discarded. Example See the example for excelopen(). excelcreatesheet (str name) Creates a new worksheet in the currently open Excel workbook Description Creates a new worksheet. The new sheet will be given the specified name. Example excelcreatesheet(\"MyNewSheet\"); excelcreateworkbook () Create an Excel workbook Description This command creates a workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open or create another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelcreateworkbook(); excelsetsheet(\"Sheet1\"); excelwritenum(1,1,1); excelsave(\"NewWorkBook.xlsx\"); excelclose(0); This first creates a link between FlexSim and a new Excel workbook, sets the active sheet in the workbook to \"Sheet1\", writes a 1 to row 1 column 1, saves the workbook, then closes the workbook. exceldeleterange (str rangename) Deletes the specified range of the currently open Excel workbook Description Deletes the specified range. Does not affect the data in the range. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example exceldeleterange(\"MyRange\"); exceldeletesheet (str name [, int allowwarning]) Delete the worksheet in the currently open Excel workbook Description Deletes the specified worksheet. If allowwarning is 1, you will be warned before you delete a sheet with data. Example exceldeletesheet(\"MyNewSheet\"); excelexporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Exports data from a table within FlexSim to the currently open Excel workbook Description Exports data from a table within FlexSim to Excel. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelexporttable(\"Table1\",1,1,5,3); excelgetrangeparam (str rangename, num param) Retrieves a location parameter about the named range of the currently open Excel workbook Description Retrieves a location parameter about the named range. Valid values for param are: 1 = Starting Row Number 2 = Starting Column Number 3 = Ending Row Number 4 = Ending Column Number 5 = Width 6 = Height This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example int width = excelgetrangeparam(\"MyRange\",5); excelgetrangesheet (str rangename) Gets the name of the worksheet associated with rangename of the currently open Excel workbook Description Returns the name of the worksheet where the specified range is located. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example pt(excelgetrangesheet(\"MyRange\")); excelimporttable (str/node/num table, num startrow, num startcol, num numrows, num numcols) Imports data from the currently open Excel workbook to a table in FlexSim Description Imports data from Excel to a table in FlexSim. The table may be referenced by the name of a GlobalTable or by using a treenode reference to a table node. The type of data (string or number) to be exported is determined by the datatype of the cells in the FlexSim table. The user specifies the starting row and column number in Excel, and the total number of rows and columns to export. Example excelimporttable(\"MyTable\",1,1,5,3); excellaunch ([str launchdir]) Launch Microsoft Excel Description This command opens Microsoft Excel so that it can be accessed by FlexSim. If launchdir is not specified, the path defined in Tools|Excel...|Global Settings will be used. Otherwise, the launchdir must be an accurate path to the location on the hard drive where EXCEL.EXE is located. It is typically something like \"C:/Program Files/Microsoft Office/Office10,\" but may be different depending on the version of Excel installed. It is generally not required to launch Excel before communicating with it. However, if FlexSim is set to communicate with Excel via DDE (by calling maintenance(1000,1), this is not the default behavior) Excel must be running before any communication can be performed. If excellaunch() is called at the beginning of communication, excelquit() must also be called before the user opens a new model, compiles the current model or closes FlexSim. Example excellaunch(\" C:/Program Files/Microsoft Office/Office10\"); excelopen(\"C:/mybook.xls\"); excelsetsheet(\"Sheet1\"); double thenum = excelreadnum(1,1); excelclose(true); excelquit(); This starts Excel, opens a workbook called \"mybook,\" stores a value read from row 1, column 1 from that workbook, then closes the file and Excel. excelmultitableexport () Starts the automatic exporting of data from FlexSim tables to Excel Description Starts the automatic exporting of data from FlexSim tables to Excel sheets as setup in the Excel Import/Export tool. Example excelmultitableexport() excelmultitableimport () Starts the automatic importing of data from Excel to FlexSim tables Description Starts the automatic importing of data from Excel sheets to FlexSim tables as setup in the Excel Import/Export tool. Example excelmultitableimport() excelopen (str workbook) Open the Excel workbook Description This command opens the file called workbook in Excel. Only one workbook can be open at a time. The user must call excelclose() before trying to open another workbook, opening a new model, compiling the current model, or closing FlexSim. Before reading from the open file, excelsetsheet() must also be called. Example excelopen(\"mydata.xls\"); excelsetsheet(\"Sheet1\"); double myvalue = excelreadnum(1,2); excelclose(0); This first creates a link between FlexSim and an Excel workbook called \"mydata.xls\", then sets the active sheet in the workbook to \"Sheet1\", sets a local variable called myvalue to the number read from row 1 column 2, then closes the workbook without saving. excelquit () Close Microsoft Excel Description This command closes Microsoft Excel if it is open. After this command is called, no other commands to Excel should be called. Any Excel files that were open should be closed before this command is called. You may get an Excel prompt to save changes to any workbooks that were left open. Use excelclose() to avoid this. This command must be called if excellaunch() was called previously. Example see excellaunch(); excelrangereadnum (str rangename, num row, num column) Read the numeric value from a cell of the specified range of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadnum(\"MyRange\",5,1) excelrangereadstr (str rangename, num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the specified range of the currently open Excel workbook Description Reads a text value from a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelreadstr(\"MyRange\",5,1) excelrangewritenum (str rangename, num row, num column, num value) Write the numeric value to a cell of the specified range of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritenum(\"MyRange\",5,1,99.87) excelrangewritestr (str rangename, num row, num column, str value) Write the string value to a cell of the specified range of the currently open Excel workbook Description Writes string value to a cell defined by row and column in the specified named range. The upper-left cell of the range is row 1, column 1. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). For writing a whole table of values to Excel, use excelrangewrite. Example excelwritestr(\"MyRange\",5,1,\"My String\") excelreadcell (num row, num col[, num flags]) Returns the value of a cell in the active worksheet as a variant Description Returns the value of a cell in the active worksheet as a variant. Flags can be specified to specify what exactly is returned from Excel. Those flags are EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, and EXCEL_DATE_AS_NUM. EXCEL_DATA_NUMBER will read the Excel data as a number. EXCEL_DATA_STRING will read the Excel data as a string. EXCEL_DATE_AS_NUM will interpret any Excel dates as a Flexsim readable date number. Example Variant value = excelreadcell(1, 5, EXCEL_DATA_NUMBER | EXCEL_DATE_AS_NUM); This returns the value of the 5 column in the first row as a number. If it's a date, the number returned will be Flexsim readable as a date. excelreadnum (num row, num column [, num rowchar, num colchar]) Read the numeric value from a cell of the active sheet of the currently open Excel workbook Description Reads a numeric value from a cell defined by row and column of the active sheet of the currently open Excel workbook. Example excelreadnum(5,1) excelreadstr (num row, num column [, num rowchar, num colchar]) Read the text value from a cell of the active sheet of the currently open Excel workbook Description Reads a text value from a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelreadstr(5,1) excelsave ([str filename]) Saves the currently open Excel file Description Saves the currently open Excel file. If a filename is passed to this command, the file will be saved with that name. This is the equivalent of selecting Save As from Excel's File menu. If no parameters are passed to this command, the file will be saved with its current name, and the original file will be overwritten. This is the equivalent of selecting Save from Excel's File menu. Example excelsave(\"runresults_001.xls\") excelsetrange (str rangename, num startrow, num startcolumn, num endrow, num endcolumn) Creates or changes a named range of the currently open Excel workbook Description Creates or changes a named range. The range will be on the active sheet. The range's upper-left cell is defined by startrow and startcolumn. The bottom-right cell is defined by endrow and endcolumn. This command does nothing if FlexSim is set to communicate with Excel using DDE (by calling maintenance(1000,1), not FlexSim's default setting). Example excelsetrange(\"MyRange\",5,5,10,15); excelsetsheet (str sheetname) Sets the active worksheet of the currently open Excel workbook Description This command sets the active worksheet in the currently open Excel workbook. Whenever excelreadnum() or excelreadstr() are called, the value read will come from the active worksheet. The active worksheet may be set many times for the same open workbook. Example See the example for excelopen(). excelversion () Gets the version of Microsoft Excel Description Returns a string that contains the Excel interface version. Example excelversion() excelwritenum (num row, num column, num value [, num rowchar, num colchar]) Write the numeric value to a cell of the active sheet of the currently open Excel workbook Description Writes a numeric value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritenum(5,1,99.87) excelwritestr (num row, num column, str value [, num rowchar, num colchar]) Write the string value to a cell of the active sheet of the currently open Excel workbook Description Writes string value to a cell defined by row and column of the active sheet in the currently open Excel workbook. Example excelwritestr(5,1,\"My String\") requestdecision (str/node/num object) Description Request a decision from a ReinforcementLearning object. When training, this will cause the simulation to return a reward for the previous action, make a new observation, and (if the episode is not done) wait for an action from the algorithm. When running normally (not training), this will make an observation and execute the On Request Action trigger of the ReinforcementLearning object in order to make a heuristic decision or predict an action using a trained AI model. Use this command to specify exactly when the AI should make a decision. Example requestdecision(\"ReinforcementLearning1\"); rundocument (str command, str path+filename) Open a file using the default application for the file type Description Opens a file using the default application used for opening files with the specified extension on your computer. The available commands are: edit, explore, find, open, and print. A return value > 32 means success. Example rundocument(\"open\",\"C:/myfile.doc\"); Opens myfile.doc with whatever application is default for opening *.doc files on your computer. runprogram (str commandline) Run an external program Description Run an external program. This command will issue a command to the operating system. The commandline may contain full program arguments. A return value > 31 means success. Example runprogram(\"c:/myprogram.exe\") serveraccept (int noblocking) Gets the server will attempt to accept a client connection Description The server will attempt to accept a client connection. If noblocking = 0, the command blocks until a connection is made. It returns an index used to reference the connection made. The server will attempt to accept a connection from a waiting client. A number will be returned that is the index of the connection established. A return value of 0 indicates that no connection was created. This value will be used in all future server calls. If noblocking = 1, the server will not block FlexSim program execution, but will return a 0 if no client attempts to connect. If noblocking = 0, the server will block (freeze) FlexSim program execution until a client attempts to connect. Connections with clients are only made with this command. Example int client = serveraccept(0); servercloseconnection (int connection) Closes the client connection Description The specified connection to a client is closed. Does not close the main server socket. This should be done when the server is completely finished communicating with a client. Example servercloseconnection(1); serverclosemain () Closes the main server socket and all open connections Description Closes the main server socket and all of the connections that are still open. No more communication can be done until it is created again. All connections should be closed before this is called. Example serverclosemain() servercreatemain (int port) Creates a server socket that is listening for connections to the specified port Description Creates a server socket that is listening for connections on the specified port. Some ports (called well-known ports) are reserved for special applications. Anything port number over 1024 is usually safe to use. Example servercreatemain(1880); serverreceive (int connection, char *buffer, int bufsize, int noblocking) Receives a message from the connection Description Receives a message from the specified connection. This command operates differently in flexscript vs. c++. In c++, buffer must be a valid pointer to a char* destination into which the read bytes will be copied. The return value will be the total number of bytes received. Up to bufsize bytes from the clients message will be read and stored in the preallocated character array called buf. In flexscript, however, buffer should be passed as NULL, and the return value will be the actual string that is received. If noblocking = 1, then this command does not block FlexSim program execution, but if noblocking = 0, FlexSim program execution will block (freeze) until something is received from the client. Example c++: int bytes = serverreceive(1,Buf,15,0); flexscript: string readstr = serverreceive(1, NULL, 15, 0); serversend (int connection, char* message [, num charlength] ) Sends a message to the client connect to connection Description Sends the specified text message to the client that is connected to the specified connection. Returns the number of bytes (characters) sent correctly. The text message to be sent must be converted into a char *. The charlength is the length of the string being passed and is usually optional. Needed only if the string being sent has NULL characters in it. Example serversend(1,\"MadeConnection\"); socketend () Shuts down the processes started with socketinit() Description This command shuts down the processes that were started with socketinit(). It should be called when the model has completely finished working with the sockets that it had open. This function returns true if the shut down is successful. See clientsend() for more information. Example socketend(); socketinit () Initializes background processes that allow Windows Sockets to be used Description This command initializes the background processes that allow Windows Sockets to be used. It must be called before any calls to socket commands will work. This function returns true if the initialization is successful. See clientsend() for more information. Example socketinit(); Conversions Commands for converting units, data types, and spatial coordinate. apchar (str string) Asserts string as a char* Description Assert type as C style string (e.g. char*). Alias for stringtopchar Example apchar(\"hello\") cm (num centimeters) Gets the number of meters in the number of centimeters Description Returns the number of meters in the specified number of centimeters. Example cm(3) convert (var value, var from, var to) Converts the given value (a time) from one time format to another Description Converts the given value (a time) from one format to another. The from and to arguments only accept the following values: FS_DATETIME XL_DATETIME MODEL_TIME DATE_STR TIME_STR DATETIME_STR FS_DATETIME - the number of seconds since Jan 1, 1601. getmodelunit(START_TIME) returns a value in FS_DATETIME units. XL_DATETIME - the serialized day number, where day 1 is Jan 1, 1900. Feb 10, 2025 1:30 PM is 45698.5625 in XL_DATETIME units. This format is used in Microsoft Excel for dates. MODEL_TIME - the number of model units since the model start time DATE_STR - a string representing the date portion of a datetime value. The resulting text will depend on the date format specified in the model settings. If converting from this format, the value must be formatted according to those settings. TIME_STR - a string representing the time portion of a datetime value. The resulting text will depend on the time format specified in the model settings. If converting from this format, the value must be formatted according to those settings. DATETIME_STR - a string representing the time and date of a datetime value. The resulting text will depend on the time and date formats specified in the model settings. If converting from this format, the value must be formatted according to those settings; the time portion must be first, separated from the date portion by a single space. Note that year 3000 and beyond are not supported by this command. Example convert(42308, XL_DATETIME, MODEL_TIME) // converts an Excel date to a valid model time days (num days) Gets the number of model time units in the give number of days Description Return the number of model time units in the given number of days. Example days(1) Returns 86400 seconds. fpm (num feetperminute) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/minute. Example fpm(9) fps (num feetpersecond) Gets the number of model length/time units in the number of feet/minute Description Return the number of model length/time units in the specified number of feet/second. Example fps(9) ft (num feet) Gets the number of model length units in the number of feet Description Return the number of model length units in the specified number of feet. Example ft(3) hours (num hours) Gets the number of model time units in the number of hours Description Return the number of model time units in the given number of hours. Example hours(1) Returns 3600 seconds. in (num inches) Gets the number of model length units in the number of inches Description Return the number of model length units in the specified number of inches. Example in(8) minutes (num minutes) Gets the number of model time units in the number of minutes Description Return the number of model time units in the given number of minutes. Example minutes(1); Returns 60 seconds. mph (num milesperhour) Gets the number of model length/time units in the number of miles/hour Description Return the number of model length/time units in the specified number of miles/hour. Example mph(9) seconds (num seconds) Gets the number of model time units in the number of seconds Description Return the number of model time units in the given number of seconds. Example seconds(30); Returns 0.5 minutes. tonode (thing) Assert type as a node pointer Description Assert type as a node pointer. Only serves a real purpose in C++. Example tonode(getnodenum(couplingnode)) Converts the numeric value of couplingnode to a treenode tonum (thing) Assert type as a number Description Assert type as an arithmetic number. Only serves a real purpose in C++. Example return tonum(current); This returns a pointer to the current object, casting it as a number. toptr (thing) Description For developer use. Assert type as pointer. Assert that the argument thing is of type void*. Only serves a real purpose in C++, but is safe to use in flexscript. Example toptr(so()) Conveyor conveyorgetmotor (obj conveyor) Description Deprecated, use Conveyor class. Example conveyorgetmotor(conveyor); conveyorinfo (obj conveyor, num info[, p1, p2, p3, p4, p5]) Description Deprecated, use Conveyor class. Example conveyorinfo(conveyor, CONV_INFO_ESTIMATE_CONVEY_TIME); conveyorresumeitem (obj item[, num force]) Description Deprecated, use Conveyor class. Example conveyorresumeitem(item); conveyorsenditem (obj item, obj dest) Description Deprecated, use Conveyor class. Example conveyorsenditem(item, outobject(current, 1)); conveyorsetspeed (obj conveyor, num toSpeed) Description Deprecated, use Conveyor class. Example conveyorsetspeed(conveyor, 1); conveyorstopitem (obj item) Description Deprecated, use Conveyor class. Example conveyorstopitem(item); mergegetlanestate (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergegetlanestate(current, 5) mergegetnumlanes (obj mergeController) Description Deprecated, use Conveyor.MergeController class. Example mergegetnumlanes(current) mergeislaneclear (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergeislaneclear(current, 5) mergereleaselane (obj mergeController, num laneNum) Description Deprecated, use Conveyor.MergeController class. Example mergereleaselane(current, 1) Deprecated Commands that are no longer supported, or for which alternative commands have been made. The documentation for these commands has been discontinued, and therefore may be incorrect. Many of the commands still work for backwards compatibility purposes, but we encourage you to use their alternatives instead. acos (num ratio) Deprecated, use Math.acos() Description This command is deprecated. Use Math . acos () instead. Gets the arccos of an angle in radians. Example add (num value1, num value2) Deprecated, use the + operator Description This command is deprecated. Use the + operator instead. Addition of value1 to value2. This returns the result of the arithmetic expression value1+value2. Example double sum = add(1,2); addfullhistorymoverecord (num flowitemid, num time, obj origin, obj destination, num itemtype) Deprecated Description This command is deprecated. Adds a new entry to the Movement table that is recorded when Full History is enabled. The new entry records that the flowitem identified by flowitemid moved from the orgin object to the destination object and the specified time. The entry also records that the flowitem's itemtype at the time of the movement was the itemtype passed as the third parameter. Users should only have to use this command in very rare situations. Example addfullhistorymoverecord(getnodenum(uniqueid(item)), time(), current, current.outObjects[1], item.type); addfullhistorystaterecord (num time, num state, obj object) Deprecated Description This command is deprecated. Adds a new entry to the State table that is recorded when Full History is enabled. The new entry records that the specified object passed in as the third parameter changed to the specified state at the time that is entered as the first parameter. This should only need to be called if the object is having its state changed by soem command other than setstate(). Example addfullhistorystaterecord(time(), STATE_IDLE, current); addlabel (obj object, str labelname [, num/str value]) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode .LabelName or treenode . labels .assert() instead. Adds a label to object. Example addtablecol (str/num/node table [, num column, num datatype]) Deprecated, use Table.addCol() Description This command is deprecated. Use Table . addCol (). instead. Adds a column to a table. Example addtablerow (str/num/node table [, num row, num datatype]) Deprecated, use Table.addRow() Description This command is deprecated. Use Table . addRow () instead. Adds a row to a table Example and (num/node condition1, num/node condition2) Deprecated, use the && operator Description This command is deprecated. Use the && operator instead.. Example angle (num dx, num dy) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Returns the angle in degrees, rotated clockwise from the positive x axis, of the vector (dx, dy). Calling angle(dx, dy) is the same as calling -Math.degrees(Math.atan2(dy, dx)). Example double myangle = angle(distx, disty) anode (thing) Deprecated, use tonode() Description This command is deprecated. Use tonode() instead. Assert type as node pointer. Example anode(so()) anum (thing) Deprecated, use tonum() Description This command is deprecated. Use tonum() instead. Assert type as arithmetic number. Example anum(so()) aptr (thing) Deprecated, use toptr() Description This command is deprecated. Use toptr() instead. Assert type as pointer Example aptr(so()) arraysize (var array) Deprecated, use array.length Description This command is deprecated. Use Array . length instead. Gets the number of elements in an array. Example asin (num ratio) Deprecated, use Math.asin() Description This command is deprecated. Use Math . asin () instead. Gets the arcsin of an angle in radians. Example assertattribute (obj object, str attributename, num datatype) Deprecated, use Object.attrs.assert() Description This command is deprecated. Use Object . attrs .assert(). Gets a reference to attribute attributename of object, creates the attribute if it does not exist. Example assertlabel (obj object, str labelname, num datatype) Deprecated, use treenode.labels.assert() Description This command is deprecated. Use treenode . labels .assert() instead. Gets a reference to label labelname, creating the label if it does not exist. Example assertsubnode (node containernode, str name[, num datatype]) Deprecated, use treenode.subnodes.assert() Description This command is deprecated. Use treenode . subnodes .assert() instead. Example atan (num ratio) Deprecated, use Math.atan() Description This command is deprecated. Use Math . atan () instead. Gets the arctan of an angle in radians. Example atan2 (num dy, num dx) Deprecated, use Math.atan2() Description This command is deprecated. Use Math . atan2 () instead. Example att (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use var(), var_s() or getvarnode() instead. Example att(current,1) att_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the attribute node of an object by name. An attribute node is one which resides inside the \"variables\" node of the structure of an object. This function will return the pointer to the node called name inside the variables node of object. var_s supercedes this command. Example att_s(current,\"myatt\") aviadd (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avifinish (node viewnode) Description This command is deprecated. Use the Video Recorder instead. Example avistart (str filename, node viewnode, num fps) Description This command is deprecated. Use the Video Recorder instead. Example bcgetitemkinematics (obj basicconveyor, obj item, num kinematictype {0-main kinematic : 1-time dependent : 2-convey dependent}) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcgetitemkinematics command is used to obtain a reference to one of the three kinematics associated with a flowitem traveling on a BasicConveyor: 0 = The main convey state kinematics. You may get kinematic information from this, but do not change the kinematic by adding kinematics or initializing it. 1 = A user-definable kinematics that is dependent on simulation time. 2 = A user-definable kinematics that is dependent on the convey position of the flowitem on the conveyor. The two user-definable kinematics are available for the user to set up customized kinematic motion in addition to traveling down the length of the conveyor. Use bcgetitemkinematics to get a reference to the desired kinematics node, and then use standard initkinematics() and addkinematic() commands as normal. You will need to use the alternative initkinematics parameter list: initkinematics(node, x, y, z, rx, ry, rz, managerots, localcoords). Also, if you add kinematics to the type 2 convey depend kinematic node, bear in mind that all time units for that kinematic no longer apply to actual simulation time units. Instead, they are interpretted as \"convey units\". For example, a speed of 5 is no longer 5 units per time unit, but is instead 5 units per conveyed unit. Acceleration is not distance per time squared, but distance per conveyed unit squared. Start times are no longer a time to start the kinematic, but a position along the conveyor to start the kinematic at. As an example, let's say you add a kinematic to the convey dependent kinematic node to travel 1 unit in the y direction with \"start time\" 5 and \"max speed\" 0.5. What that translates to for the convey dependent kinematic is that the item will start traveling in the y direction once it reaches 5 units along the conveyor. Also, for every unit that it travels down the length of the conveyor, it will travel 0.5 units in the y direction (0.5 y units per convey unit). Thus it will finish the y kinematic once it has travelled 7 units down the conveyor. If the item is blocked in the middle because of accumulation, say at convey position 6, then its y kinematic will also stop, and not resume until the item resumes along the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example treenode kin = bcgetitemkinematics(current, item, 2); treenode kin2 = bcgetitemkinematics(current, item, 1); initkinematics(kin, 0,0,0, 0,0,0, 0,0); addkinematic(kin, 0,1,1,0.5,1,1,0,0, 5, KINEMATIC_TRAVEL); initkinematics(kin2, 0,0,0, 0,0,0, 0,0); addkinematic(kin2, 0,0,720,360,0,0,0,0, time()+5.0, KINEMATIC_ROTATE); bcgetitemposition (obj basicconveyor, obj item) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object The bcgetitemposition command returns the current position of an item on a BasicConveyor object. The position is measured along the conveyor's length from the head of the conveyor to the flowitem's edge furthest from the head of the conveyor. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcgetitemposition(current,current.first); bcsetdirection (obj basicconveyor, num direction) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The bcsetdirection command stops all flowitems on the conveyor and sets the direction of travel to 1=forward and 0=reverse. All flowitems will need to have their convey state reset with the bcsetitemconveystate() command before they will begin moving again. The example below shows how to stop the conveyor, and then have all the flowitems accelerate up to a speed of 1 in the reverse direction. Any additional item kinematics will still be active after a direction change. See bcsetitemconveystate command documentation for a general description of the BasicConveyor object. Example bcsetdirection(so(),0); for(int i = 1; i <= so().subnodes.length; i++) { treenode item = so().subnodes[i]; bcsetitemconveystate(so(), item, bcgetitemposition(so(), item), 0, 1, 0.2); } bcsetitemconveystate (obj basicconveyor, obj item, num startpoint, num startspeed, num targetspeed, num accdec) Deprecated, legacy conveyors are no longer supported Description Deprecated, Legacy conveyors are no longer supported. This command is used in conjunction with the BasicConveyor object. The BasicConveyor object allows flowitems to be moved in and out of the conveyor at any time and at any location. Each flowitem on the BasicConveyor can be assigned and re-assigned its own kinematic profile defining how the flowitem is to move along the conveyor. When one flowitem overtakes another flowitem on the conveyor which is either stopped or traveling at a slower speed, it will slow down immediately to match that flowitem's speed. Although flowitems may travel in either direction along the conveyor, all flowitems will travel in the same direction at any given time. The travel direction of the conveyor is set with the bcsetdirection() command. As flowitems are moved in and out of the conveyor, other flowitems on the conveyor are aware of the increase or decrease in available space along the conveyor, and will accumulate naturally. After a flowitem enters the conveyor, either indirectly with the receiveitem() command or directly with the moveobject() command; it is necessary to define the flowitem's initial kinematic profile. This profile is refered to as the flowitem's \"convey state\", and it is set with the bcsetitemconveystate() command. The convey state for a flowitem can be set multiple times if desired. The following are definitions for the parameters used to define the convey state of a flowitem: basicconveyor = A reference to the conveyor. item = A reference to the flowitem. startpoint = The starting location for the flowitem as measured from the beginning of the conveyor, along the conveyor's length to the flowitem's edge furthest from the head of the conveyor (the leading edge if the conveyor's direction is forward, the trailing edge if the conveyor's direction is backward). startspeed = The initial speed the flowitem will begin traveling at. targetspeed = The target speed the flowitem will try to achieve. If the targetspeed is greater than the startspeed, then the flowitem will accelerate up to the target speed; otherwise it will decelerate down to the target speed. If both the startspeed and the targetspeed are set to 0, the flowitem will be positioned at the startpoint, and will not move. accdec = The acceleration or deceleration used to achieve the target speed over time. A value of 0 indicates infinite acceleration/deceleration; or in other words the flowitem will reach it's targetspeed immediately. No destination or termination speed is required, because the flowitems continue traveling along the conveyor until they either reach the end of the conveyor, run into another flowitem, or their convey state is changed again. The BasicConveyor allows multiple \"Decision Points\" to be defined along its length. These trigger points are convenient locations to update the convey state of a flowitem. In addition to the main convey state kinematic assigned to the flowitem with the bcsetitemconveystate() command, a flowitem has two other kinematic structures associated with it that may be used to apply custom kinematic motion (translation or rotation) in addition to the travel motion along the conveyor. One of the kinematic structures is based on simulated time units, and the other is based on distance units along the length of the conveyor. To access these kinematic structures, use the bcgetitemkinematics() command, then use the initkinematics() and addkinematic() commands to create the custom kinematic motion desired. See bcgetitemkinematics() command documentation for more information. Example bcsetitemconveystate(current, item, position, 0, 60, 0); bitwiseand (num a, num b) Deprecated, use & operator Description This command is deprecated. Use & operator instead. Returns a bitwise AND operation on the two 32 bit integer values. Example int bwa = bitwiseand(0x460, 0x040); This example sets bwa to the value 0x020. bitwisenot (num a) Deprecated, use ~ operator Description This command is deprecated. Use ~ operator instead. Returns the bitwise not of the 32 bit integer value Example int bwn = bitwisenot(0x0); This example sets bwn to the value 0xffffffff bitwiseor (num a, num b) Deprecated, use | operator Description This command is deprecated. Use | operator instead. Returns the bitwise OR of the 32 bit integer values Example int bwo = bitwiseor(0x15, 0x01); This example sets bwo to the value 0x15 bitwisexor (num a, num b) Deprecated, use ^ operator Description This command is deprecated. Use ^ operator instead. Returns the bitwise XOR of the 32 bit integer values Example int bwxo = bitwisexor(0x15, 0x01); This example sets bwxo to the value 0x14 ceil (num num) Deprecated, use Math.ceil() Description This command is deprecated. Use Math . ceil () instead. Gets the smallest integral value not less than num. Example cell (node table, num col, num row) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Example cellrc (obj object, num row, num col) Deprecated, use Table.cell() Description This command is deprecated. Use Table . cell () instead. Gets a reference to the table's cell. Example double val = getnodenum(cellrc(reftable(\"MyTable\"),2,3)); cellrowcolumn (node table, num row, num col) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example centerobject (obj object, num centerportnum) Deprecated, use Object.centerObjects[] Description This command is deprecated. Use Object . centerObjects [] instead. Reference the object connected to an object's center port. Example changeconveyorspeed (obj conveyor, num newspeed ) Deprecated, use conveyor.targetSpeed Description This command is deprecated. Legacy conveyors are no longer supported. Use Conveyor . targetSpeed instead. Changes the speed of the conveyor to newspeed. Example changeconveyorspeed(current, 4); This example changes the conveyor's speed to 4. changetask (obj tasksequence, num taskrank, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Dynamically change a task in tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. This command lets you change a task dynamically. For example, if you want an operator to travel to object B instead of traveling to object A, but a task has already been created for him to travel to object A, you can use this command to change the task. The first parameter (tasksequence) specifies the tasksequence containing the task. The second parameter (taskrank) specifies the rank of the task in the tasksequence. All other parameters are the same as for the inserttask command. This command should only be executed if the task is not the currently active task in the task sequence! Example changetask(gettasksequence(current, 0), 4, TASKTYPE_TRAVEL, current.centerObjects[5]); This example changes the fourth task in the current object's active task sequence to a travel task to travel to the object connected to the 5th center port of the current object. clearconsole () Clears the output console Description This command clears the output console if it is open. The output console is where output from the pt(), pf(), and pr() commands is printed. Example if (v_printerror == 1) { clearconsole(); pt(\"An Error occurred\"); } This clears the output console and prints a simple error message to it if the variable called printerror is equal to 1. clearcontents (node thenode) Deprecated, use treenode.subnodes.clear() Description This command is deprecated. Use treenode . subnodes .clear() instead. Destroys all of the objects/nodes under the node. Example clearfullhistory (int resetuniqueid) Deprecated Description This command is deprecated. Deletes all of the data that has been collected by the Full History system. If resetuniqueid is 1, then the unique IDs of the flowitems that are created after this command is called will being again at 1. Typically, this parameter should be 0, as that will continue numbering so that old flowitems are not confused with new flowitems. Example clearfullhistory(0); clearglobaltable (str/node/num table) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example closeinput (obj object) Deprecated, use Object.input.close() Description This command is deprecated. Use Object . input .close() instead. This command blocks the input of the object. Only the input ports themselves, or the input in general needs to be closed to block entry. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the input ports (squares) for the object, signifying the input ports are blocked. Individual ports may still be open and drawn in green, but entry to the object is still blocked because of the red bar. Compare this command with stopinput(). Example if (current.subnodes.length == getvarnum(current,\"maxcontent\") closeinput(current); This blocks the input ports of current when it has too many objects inside it. closeoutput (obj object) Deprecated, use Object.output.close() Description This command is deprecated. Use Object . output .close() instead. This command blocks the output of the object. Only the output ports themselves, or the output in general needs to be closed to block the exit. When port connections are displayed with sufficient size in the view window, you will see a small red bar drawn across all the output ports (squares) for the object, signifying the output ports are blocked. Individual ports may still be open and drawn in green, but exit from the object is still blocked because of the red bar. Compare this command with stopoutput(). Example if (current.subnodes.length == current.mincontent) closeoutput(current); This blocks the output ports of current, if current has too few objects inside it. coloraqua (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . aqua instead. Sets the color of object to aqua. Example colorarray (obj object, num colornumber) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . byNumber () instead. Sets the color of object based on a color index. Example colorblack (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . black instead. Sets an object's color to black. Example colorblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . blue instead. Sets the color of object to blue. Example colorbrown (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . brown instead. Sets the color of object to brown. Example colorgray (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . gray instead. Sets the color of object to gray. Example colorgreen (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . green instead. Sets the color of object to green. Example colorlightblue (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lightBlue instead. Sets the color of object to lightblue. Example colorlime (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . lime instead. Sets the color of object to lime. Example colororange (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . orange instead. Sets the color of object to orange. Example colorpink (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . pink instead. Sets the color of object to pink. Example colorpurple (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . purple instead. Sets the color of object to purple. Example colorrandom (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . random () instead. Sets the color of object to a random color. Example colorred (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . red instead. Sets the color of object to red. Example colorrgb (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the color of an object using red, green and blue components. Example colorsilver (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . silver instead. Sets the color of object to silver. Example colorteal (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . teal instead. Sets the color of object to teal. Example colorwhite (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . white instead. Sets the color of object to white. Example coloryellow (obj object) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color . yellow instead. Sets the color of object to yellow. Example comparetext (str text1, str text2[, int ignorecase]) Deprecated, use == operator Description This command is deprecated. Use the == operator instead. myStr == \"Hello\" Test for string equality. Example concat (str text1, str text2 [, str text3, ...]) Deprecated, use + operator Description This command is deprecated. Use the + operator instead. \"a\" + \"b\" + \"c\" Concatenates strings together. Example connect (obj object1, num port1, obj object2, num port2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect ports of two objects. The two objects are connected by checking whether the ports exist on the objects in question and then connecting them. The output port of the first object will be connected to the input of the second object. If the ports do not exist, or are already connected then the command will abort. To connect two objects by automatically adding ports, see the command objectconnect(). Example connect(model().subnodes[2],1,model().subnodes[3],2) containerentry (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example containerexit (obj container, obj item) Deprecated, use tracked variables or Process Flow Description This command is deprecated. Use tracked variables and/or Process Flow to track custom statistics. Example content (node parent) Deprecated, use treenode.subnodes.length Description This command is deprecated. Use treenode . subnodes .length instead. Gets the number of child nodes in a parent node. Example contentobj (obj container) Deprected, use Object.attrs.length Description This command is deprecated. Use Object . attrs .length instead. Gets the content of the object's attribute sub-tree. Example cos (num angle) Deprecated, use Math.cos(). Description This command is deprecated. Use Math . cos () instead. Gets the cos of an angle in radians. Example count () Description The value of the iterator used with several commands such as repeat(), findmatch(), findmin(), and findmax(). The value of count will depend on which iteration is currently being executed. Example findmax(Table(\"MyTable\").numRows, Table(\"MyTable\")[count][5]) This example returns the maximum value found in column 5, among all the rows of the table MyTable. cppgettoken (obj textblock, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example cppsettoken (obj textblock, num tokenindex, str insertiontext) Deprecated, do not use Description This command is deprecated. Do not use. Example createcopy (node thenode, node container [, num samename, num inobject, num cached, num replace]) Copies thenode into the specified container Description This command is deprecated. Use treenode . copy () instead. Copy thenode into the node specified as container. This command is different from createinstance() in that it does not attempt to establish any links between thenode and any class. If an instantiation is required, use createinstance() instead. If samename is 1, the copy will have the same name as thenode. If samename is 0, the newly created node's name will be thenode's name with a random number added to the end. If inobject is 1, the copy will be created in the object data portion of the container. If the container does not have object data, the command does nothing. If cached is 1, a pre-cached version of the node will be copied. This is generally faster. If replace is 1, the copy will overwrite container, instead of being placed inside it. If those parameters are not specified, they default to 0. Example createcopy(Model.find(\"Tools/FlowItemBin/7/1\"), current) createdelaytask (obj dispatcher, num delaytime, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to pause its current task for delaytime seconds. During the time that it is delayed, it will be in the state specified by state. The task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createdelaytask(current.centerObjects[1], 25, SCHEDULED_DOWN, 1, PREEMPT_NOT); createemptytasksequence (obj dispatcher, num priority, num preempting) Creates a new task sequence in the dispatcher's queue and returns a reference to it Description This command is deprecated. Use TaskSequence.create() instead. Creates an empty task sequence in the dispatcher's tasksequence queue. Tasks should be added to this task sequence once it is created, using the inserttask command. The task sequence is dispatched with the dispatchtasksequence command. This command returns a pointer to the newly created tasksequence node. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createemptytasksequence(current.centerObjects[1], 1, PREEMPT_NOT); createglobaltasksequence (str name, obj dispatcher [, obj dp1, obj dp2, obj dp3, obj dp4, obj dp5]) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. Creates an instance of the named global task sequence with the given dynamic parameters 1-5 and dispatches it to the specified dispatcher. Returns a reference to the created global task sequence. Note that this does not dispatch the task sequence. You need to dispatch it yourself using dispatchtasksequence(). Example treenode ts = createglobaltasksequence(\"GlobalTS\", current.centerObjects[1]) dispatchtasksequence(ts) createinstance (obj class, obj location) Description This command is deprecated. Use Object . create () instead. For developer use. This command creates an instance of the class specified as class and places it in the object specified as location. The instance will be given a name that is the name of the class followed by a number. The instance will have all of the variables and attributes of class and it's superclasses. Nodes in the behavior node will not be copied into the instance, as they apply to all instances of the class. The object passed as class should be in the library. Generally, location is the model. The library and the model can be easily referenced using the library() and model() commands. Example createinstance(library().find(\"?Source\"), model()); This creates an instance of the Source class in the model. createloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to load flowitem. The object will not travel to the flowitem before loading it. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createsendmessagetask (obj taskexecuter, obj receiver, num priority, num preempting , num param1, num param2, num param3) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specifies as dispatcher that causes it to send a message to the object specified as receiver. The OnMessage trigger of the receiving object will be executed when the message is sent. The values passed as param1, param2, and param3 will be available in the trigger function using the param() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createsendmessagetask(current, current.centerObjects[1],1,PREEMPT_NOT,5, 6, 7); createstandardtask (obj taskexecuter, obj origin, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to origin, load flowitem, travel to destination and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createstandardtaskcurrent.centerObjects[1],current.centerObjects[2],current.centerObjects[3],item, 1, PREEMPT_NOT); createtravelloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and load flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createtraveltask (obj taskexecuter, obj destination, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination. It will travel until its front edge reaches destination. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltask( current.centerObjects[1], current.centerObjects[2], 1, PREEMPT_NOT); createtraveltolocandwaittask (obj taskexecuter, num relativeloc, num x, num y, num z, num endspeed, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. Once the object reaches that point, it will wait in the state specified as state until an endwaittask() command is issued to it. For a list of legal states, see setstate(). If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltolocandwaittask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, STATE_IDLE, 1, PREEMPT_NOT); createtraveltoloctask (obj dispatcher, num relativeloc, num x, num y, num z, num endspeed, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to the point specified by xlox, y, and z. If relativeloc is 1, the specified point is relative to the origin of dispatcher. If relativeloc is 0, the specified point is the exact point in the model that dispatcher will try to travel to. It will travel until its front edge reaches the specified point. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtraveltoloctask(current.centerObjects[1], 1, 5.15, 2.5, 0, 0, 1, PREEMPT_NOT); createtravelunloadtask (obj taskexecuter, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to travel to destination, and unload flowitem. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createtravelunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createunloadtask (obj dispatcher, obj destination, obj flowitem, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence for the object specified by dispatcher that causes it to unload flowitem into the object specified by destination. The object will not travel to the location before unloading. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createunloadtask(current.centerObjects[1],current.centerObjects[2],item, 1, PREEMPT_NOT); createwaittask (obj taskexecuter, num state, num priority, num preempting) Deprecated, use Process Flow instead Description This command is deprecated. Use Process Flow instead. This command creates a task sequence on the object specified as dispatcher that causes the object to not perform new task sequences that it is given until it has been released. The object can be released with the endwaittask() command. The object will be in the state specified by state while it is waiting. For a list of possible states, see setstate() command. This task sequence will be given a priority of priority and a preempting value of preempting. The possible values for preempting are: 0 - PREEMPT_NOT 1 - PREEMPT_ONLY 2 - PREEMPT_AND_ABORT_ACTIVE 3 - PREEMPT_AND_ABORT_ALL Example createwaittask(current.centerObjects[1], STATE_IDLE, 1, PREEMPT_NOT); current <no parentheses> Description This command is deprecated. This should not be used as a special command with the setcurrent command anymore. Instead, declare a treenode variable type as current, then use current in your code as any other variable type. Example treenode current = model().subnodes[3]; pt(current.name); This sets the object that is ranked 3 in the model to current and prints its name to the output console. dbchangetable (str tablename) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbchangetable(\"Inventory\"); This closes the currently open table and opens a table called Inventory. dbclose () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (current.donegatheringdata == 1) dbclose(); If the label donegatheringdata on current is set to 1, the current database is closed. dbexportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Description This command is deprecated. Use Database.Connection instead. The starting row and column in the table are specified as well as how many rows and columns to export. Example dbexportnode(so(),1,1,4,5); dbexporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbexportnode(\"MyTable4\",2,2,3,3); dbgetfieldname (num column) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string ColName = dbgetfieldname(1); This sets ColName to the name of the first column in the current database. dbgetmetrics () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgetmetrics() dbgetmode () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example if (dbgetmode() != DBMODE_CLOSED) ColName = dbgetfieldname(1); If the database is open, ColName is set to the name of the first column in the database. dbgetnumcols () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumcols(); x++) Table(\"MyTable\")[1][x] = stringtonum(dbgettablecell(1,x)); This copies the values from a column in the database to a column in a GlobalTable. dbgetnumrows () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<=dbgetnumrows(); x++) Table(\"MyTable\")[x][1] = stringtonum(dbgettablecell(x,1)); This copies the values from a row in the database to a row in a GlobalTable. dbgettablecell (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double tablevalue = stringtonum(dbgettablecell(1,1)); This sets tablevalue to the number that is stored in the first row and first column of the database. dbgettablenum (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example double val = dbgettablenum(2,3); dbgettablestr (num row, num col) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example string val = dbgettablenum(2,3); dbimportnode (obj tablenode, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(so(),1,1,4,5); dbimporttable (str tablename, num startrow, num startcol, num numrows, num numcols) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbimportnode(\"MyTable4\",2,2,3,3); dbopen (str databasename, str command {SQL string or Tablename}, num usetable [, num showlogin]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbopen(\"itemdrive\",\"timetable\",1); This opens a database with the alias \"itemdrive\" and opens the table called \"timetable\" in Table mode. dbopen(\"warehouse\",\"select * from inventory\",0); This opens a database with the alias \"warehouse\" and performs a SQL query on it. The database is open in SQL mode. dbsettablecell (num row, num col, str value) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example for (int x=1; x<= model().subnodes.length; x++) dbsettablecell(x,1,model().subnodes[x].name); This places the names of all of the objects in the model into the first column of the current database. dbsettablenum (num row, num col, num val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsettablenum(2,3,56.5); dbsettablestr (num row, num col, str val) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbgettablestr(1,1,\"John\"); dbsqlquery (str query[, num forwardOnlyCursor]) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbsqlquery(\"select processtime from timetable where type='1'\"); This returns a new table based on the SQL query passed. dbsqlquery(\"update timetable set processtime=type*2\"); This updates the database based on the query passed. dbusername (str username, str password) Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbusername(\"user1\",\"abc123XYZ\"); This sets the username to \"user1\" and the password to \"abc123XYZ\". These values will be used to access a database the next time dbopen() is called. dbusername(\"\",\"\"); This clears out the last set username and password. The next time dbopen() is called, the database will be accessed without a username or password. dbviewtable () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbviewtable(); dbwritechanges () Deprecated. Use Database.Connection Description This command is deprecated. Use Database.Connection instead. Example dbwritechanges() defaultdragconnection (obj fromobject, obj toobject, char characterpressed) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Either connects or disconnects ports between fromobject and toobject according to the specified characterpressed. This command mimics the keyboard and mouse combinations used to connect/disconnect object ports. For instance an 'A' would be as if the letter \"A\" were held down on the keyboard while click-dragging from the fromobject to the toobject. For 'A' and 'Q' it connects and disconnects output ports to input ports. For 'S' and 'W' it connects and disconnects central ports. Can only be used in C++, not flexscript. Example defaultdragconnection(model().subnodes[count], model().subnodes[2], 'A') degreestoradians (num degrees) Deprecated, use Math.radians() Description This command is deprecated. Use Math . radians () instead. Convert degrees to radians. Example deletetablecol (str/num/node table, num column) Deprecated, use Table.deleteCol() Description This command is deprecated. Use Table . deleteCol (). instead. Removes a column from a table. Example deletetablerow (str/num/node table, num row) Deprecated, use Table.deleteRow() Description This command is deprecated. Use Table . deleteRow () instead. Removes a row from a table. Example dellabel (obj object, str/num label) Deprecated, use treenode.labels[\"LabelName\"].destroy() Description This command is deprecated. Use treenode . labels [\"LableName\"]. destroy () instead. Deletes the specified label from the node called \"labels\" on the specified object. The specified label can either be the labelname as a string or the label's rank as a number. If the label does not exist in that node, this command does nothing. Example dellabel(current,\"MyLabel\") destroyobject (node thenode) Deprecated, use treenode.destroy() Description This command is deprecated. Use treenode . destroy () instead. Destroys thenode. Example diffsign (num value1, num value2) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Example dispatchtasksequence (obj tasksequence) Dispatches the task sequence, initiating handling/execution of the task sequence Description This command is deprecated. Use TaskSequence.dispatch() instead. Tells the dispatcher/taskexecuter in which the specified task sequence resides to handle that task sequence. Users should create the task sequence using the createemptytasksequence command, then add tasks using the inserttask command, then cause the task sequence to be handled using the dispatchtasksequence command. Example dispatchtasksequence(newtasksequence); div (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use the / operator instead. Division of value1 by value2. If value2 is zero, the calculation is aborted and zero is returned. Example div(10,2) divide (num value1, num value2) Deprecated, use the / operator Description This command is deprecated. Use / operator instead. This is an alias for div(). Example divide(10,2) dumpquery (node dumpNode[, num asTable]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Dumps the full result table for the last call to query() into a node. If asTable is 1, it will dump the result as table data. If asTable is 0, it will dump it as bundle data. Example enablefullhistory (num on/off) Deprecated Description This command is deprecated. Turns Full History collection on and off. If the parameter passed in is 1, Full History will be turned on. If it is 0, it will be turned off. This command should not be called directly. Instead, use the Enable Full History menu option to turn Full History on or off. Example enablefullhistory(1); // Turns Full History collection on endwaittask (obj taskexecuter) Deprecated, use Process Flow or freeoperators() Description This command is deprecated. Use Process Flow instead or the freeoperators() command instead. This command releases the object specified as dispatcher from a wait task issued by the createwaittask(). Once the object is released, it will return to the state that it was previously in, and it will begin to perform any task sequences that are in its tasksequence queue. Example endwaittask(current.centerObjects[1]); eq (num/node value1, num/node value2) Deprecated, use the == operator Description This command is deprecated. Use the == operator instead.. Example excelexportnode (node table, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelexporttable() Description This command is deprecated. Use excelexporttable() instead. Example excelexportnode(reftable(\"Table1\"),1,1,5,3); excelimportnode (obj node, num startrow, num startcol, num numrows, num numcols [, num rowchar, num colchar]) Deprecated, use excelimporttable() Description This command is deprecated. Use excelimporttable() instead Example excelimportnode(so(),1,1,5,3); excelmacro (str macro) Deprecated Description This command is deprecated. This command allows the user to send an Excel 4.0 macro command to Excel. This language is no longer maintained by Microsoft and may be removed from future versions of Excel. Example excelmacro(\"select(\\\"r1c1:r5c5\\\")\"); This selects the section of the workbook beginning at row 1, column 1 to row 5, column 5. excelrangeread (str rangename[treenode target], num row, num col[, num numRows, num numCols, num flags]) Reads an Excel range and dumps it to a treenode Description This function is overloaded so that it has two functions depending on which arguments you pass in. The first (where you pass in a string) is deprecated. Use excelrangereadnum() and excelrangereadstr() instead. The second (where you pass in a treenode) will read a range in Excel and assign all of the data in that range to the target treenode. If the treenode has bundle data, the excel data will be set on the bundle. Otherwise, subnodes will be inserted under the target treenode that will have the Excel data set on them as either string or number data, in the same format as Global Tables. The origin of the range is specified by the row and col passed in, and the second pair of numbers will specify the size of the range. If 0 is passed in for any one of these, Flexsim will automatically choose the boundary in that direction of the Excel range that has data. Flags can be passed in to change exactly what is read from Excel. Those flags are EXCEL_DATA_AUTOMATIC, EXCEL_DATA_NUMBER, EXCEL_DATA_STRING, EXCEL_DATE_AS_NUM, EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_DATA_AUTOMATIC will assign string or number data based on what the datatype of the Excel cell is. This is the default behavior. EXCEL_DATA_NUMBER will force all Excel data to be read as a number. EXCEL_DATA_STRING will force all Excel data to be read as a string. EXCEL_DATE_AS_NUM will read any Excel dates as numbers readable by Flexsim as dates. Otherwise, the data will come in as a string. EXCEL_USE_COLUMNHEADERS will take the first row of data and use it as names for the table columns instead of data. EXCEL_USE_ROWHEADERS will take the first column of data and use it as names for the table rows instead of data. Example treenode myTable = node (\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangeread(myTable, 1, 1, 5, 0, EXCEL_DATA_AUTOMATIC | EXCEL_USE_COLUMNHEADERS); This will read data from the active sheet starting at cell A1. It will read the first five rows, and read as many columns as have data in them. The first row will be used as names for the columns of the Global Table we're writing to. Therefore, if the Excel sheet has 10 columns with data in them, a total of 40 nodes will be inserted under the data variable of the Global Table. Each of those nodes will have the datatype of their corresponding Excel cell. excelrangewrite (treenode source, num row, num col, num flags) Reads data from a source table node and writes it to the active Excel sheet Description This function will write all the of the data from the source table node to the active Excel sheet. If the treenode has bundle data, this will read the bundle and write it to the sheet, otherwise it will look for child nodes with data on them, like a Global Table. The row and col passed in specify where on the Excel sheet to begin writing the data. All of the data on the source node will always be written. Flags can be passed in to change the use of headers. Those flags are EXCEL_USE_COLUMNHEADERS and EXCEL_USE_ROWHEADERS. EXCEL_USE_COLUMNHEADERS will write any existing column headers as a separate row in the Excel table. EXCEL_USE_ROWHEADERS will write any existing row headers as a separate column in the Excel table. Example treenode myTable = node(\"Tools/GlobalTables/GlobalTable1>variables/data\", model()); excelrangewrite(myTable, 1, 1, EXCEL_USE_ROWHEADERS | EXCEL_USE_COLUMNHEADERS); This will take all of the data in GlobalTable1 and write it to the active Excel sheet, starting at cell A1. Before it writes any of the actual data, there will be a row of column headers and column of row headers. excelread (num row, num col) Deprecated, use excelreadnum(), excelreadstr() or excelreadcell() Description This command is deprecated. Use excelreadnum(), excelreadstr() or excelreadcell() instead. Example excelwrite (str data, num row, num col) Deprecated, use excelwritenum() and excelwritestr() Description This command is deprecated. Use excelwritenum() and excelwritestr() instead. Example executetablecell (str/node/num table, num row, num column) Deprecated, use Table.executeCell() or the Table's [] operators Description This command is deprecated. Use Table . executeCell () or the Table class's [] operators instead. Executes the table cell's text as Flexscript. Example exp (num value) Deprecated, use Math.exp() Description This command is deprecated. Use Math . exp () instead. Returns (e ^ value) where e is 2.7183. Example exportfullhistory ([str filename, num scenario, num replication]) Deprecated Description This command is deprecated. Writes to a database (.mdb file) the Full History data that was collected during a run. If a file name is passed to this command, that name willbe used for the database. If no file name is passed in, the user will be prompted for a file to save the data to. If the file (either passed in or selected from a dialog) does not exist, it will be created. Example exportfullhistory(\"myrundata.mdb\"); fabs (num value) Deprecated, use Math.fabs() Description This command is deprecated. Use Math . fabs () instead. Absolute value of the argument. Example factorial (num value) Deprecated, use Math.factorial() Description This command is deprecated. Use Math . factorial () instead. Factorial of value. Example familycreate (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Create a new family (a list of nodes used for organizing relational information). Example familycreate(item,\"family1\") familydelete (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Delete a family. Example familydelete(item,\"family1\") familymember (obj familycontainer, str name, num index) Description This command is deprecated. Use the Group class instead. Returns a pointer to a member of the specified family. Example familymember(item,\"family1\",2) familymemberadd (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Adds a new family member to the specified familycontainer. Example familymemberadd(item,\"family1\",item.subnodes[1]) familymemberdel (obj familycontainer, str name, obj member) Description This command is deprecated. Use the Group class instead. Removes a family member from the specified familycontainer. Example familymemberdel(item,\"family1\",item.subnodes[2]) familymemberqty (obj familycontainer, str name) Description This command is deprecated. Use the Group class instead. Returns the size of the specified family. Example familymemberqty(item,\"family1\") fillarray (array thearray, num/treenode/string val1[, num/treenode/string val2, ...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class to construct the array using an array literal: Array arr = [1, 2, 3]; Fill a local array with values. Example findmatch (num nr, num matchexpression[, returnexpression = count, num reverseorder = 0]) Description Performs a matching test a defined number of times, and when a match is found, returns a user-definable value associated with that match. Within the match expression and return expression, \"count\" can be used to determine which iteration your are on in the check. This can be used to search in a list of things for a matching item or criterion. If returnexpression is not included in the call, then findmatch() will return the count associated with the matching expression. If no matches are found, findmatch() will return 0. If reverseorder is 1, then it will go backwards, assigning count to nr first, then nr - 1, etc. down to 1. If returnexpression is left out, then findmatch will return the count associated with the found match. Example int portNr = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5); This example will return the output port number that corresponds to the first object it finds connected to current's output ports that has a content less than 5. treenode object = findmatch(current.outObjects.length, current.outObjects[count].subnodes.length < 5, current.outObjects[count]); This example is similar to the previous example except it will return the object itself instead of the associated port number. int item2Rank = findmatch(current.subnodes.length, current.subnodes[count].type == 2); This example will return the rank number of the first item found in current's queue that has an item type of 2. findmax (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the maximum value found, or a user-definable return value associated with that maximum value. Within the value expression, return expression and criterion, \"count\" can be used to determine which iteration you are on in the check. If the return expression is not defined, the maximum value found will be returned. Additionally, you can specify a criterion to filter out values as invalid. If criterion is defined and nothing meets the criterion, 0 will be returned. Example double latestCreation = findmax(current.subnodes.length, getcreationtime(current.subnodes[count])); This example will return the maximum creation time of all items in current. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length; This example will return the input port number associated with the object with the largest queue of items. int largestQueuePortNr = findmax(current.inObjects.length, current.inObjects[count].subnodes.length, count, getitemstate(current.inObjects[count].first) == FR_STATE_READY); This example is the same as the previous example, but additionally in includes a criterion that the first item in the upstream object must also have been released. findmin (num nr, num valueexpression[, returnexpression = maxvalue, num criterion = true, num reverseorder = 0]) Description Iteratively evaluates an expression, and then returns the minimum value found, or a user-definable return value associated with that minimum value. findmin() is the same as findmax() except it finds the minimum value instead of the maximum value. For more information, refer to the documentation for findmax(). Example Refer to findmax() first (node container) Deprecated, use treenode.first Description This command is deprecated. Use treenode . first instead. Reference a parent node's first child node. Example floor (num num) Deprecated, use Math.floor() Description This command is deprecated. Use Math . floor () instead. Gets the largest integral value not greater than num. Example fmod (num value1, num value2) Deprecated, use Math.fmod() Description This command is deprecated. Use Math . fmod () instead. Remainder of value1/value2 as a double. Example forobjecthighlightedin (obj view) { } Description This command is deprecated. Use selectedobject() instead. Iterate on the node that is both selected (red) and highlighted (yellow) in the selected view. Reference the selected and highlighted node by using \"a\" within the loop. Example forobjecthighlightedin(sv()) { pt(a.name); pr(); } This prints to the outputconsole the name of the selected, highlighted node in the first level of the model. forobjectlayerunder (node container) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the tree layer directly under the node specified as container. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectlayerunder() command can only be used in flexscript, not C++. Example forobjectlayerunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the first level of the model. forobjectsbefore (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value less than or equal to the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbefore() command can only be used in flexscript, not C++. Example forobjectsbefore(model.subnodes[5])) { pt(a.name); pr(); } This prints to the outputconsole the name of the first 5 objects in the model. forobjectsbehind (node thenode) { } Description This command is deprecated. Use for() or while() commands instead. Execute a block of code for each node that is in the same layer and has a rank value greater than the rank of the object specified as thenode. To access the node that is currently active in the loop, the \"a\" command is used. The forobjectsbehind() command can only be used in flexscript, not C++. Example forobjectsbehind(model.subnodes[5]) { pt(a.name); pr(); } This prints to the outputconsole the name of the objects in the model starting with the sixth one. forobjectselectionset (node container) { } Description This command is deprecated. Instead use: for(int i =1; i<= container.subnodes.length; i++) { if(switch_selected(container.subnodes[i])) { pt(container.subnodes[i].name); pr(); } } The block following the command will be iterated upon once for each selected object in the container. The value of the \"a\" command will return the pointer to the object being iterated upon. This command is not available in C++. Example forobjectselectionset(library()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object currently selected in the library tree. frac (num value) Deprecated, use Math.frac() Description This command is deprecated. Use Math . frac () instead. Gets the decimal part of value. Example ge (num value1, num value2) Deprecated, use the >= operator Description This command is deprecated. Use the >= operator instead. Example get (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getcolorcomponent (obj object, num index) Deprecated, use the Color class Description This command is deprecated. Use Color . r or Color . g or Color . b or Color . a instead. Gets the rgb color component of object Example getdatatype (thing) Deprecated, use treenode.dataType Description This command is deprecated. Use treenode . dataType instead. Gets the datatype of a node Example getdatatype(so()) getinput (obj involved) Deprecated, use Object.stats.input.value Description This command is deprecated. Use Object . stats .input.value instead. Returns the input statistic of the involved object. Example double inval = getinput(current.centerObjects[1]); getitemtype (obj object) Deprecated, use labels Description This command is deprecated. Use labels instead. Returns the itemtype value of a flow item. Example getitemtype(so()) getlabel (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the value of an object's label. Example getlabelnum (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the number value of an object's label. Example getlabelstr (obj node, str/num label) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Gets the string value of an object's label Example getmodelunitnum (num querytype) Description This command is deprecated. Use getmodelunit() instead. Example getmodelunitstr (num querytype) Description This command is deprecated. Use getmodelunit() instead. Returns a name or abbreviation of the current model's units. Example getmoverecord (num record) Deprecated Description This command is deprecated. Returns a movement record that has been recorded for the Full History Report. A movement record is created every time a flowitem moves from one object to another if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a MoveRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnummoverecords(). getmoverecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the movement record that is passed in as the first parameter to the function. This record is the return value from a call to getmoverecord(). The value passed to this function as the second parameter indicates which value from the movement record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The ItemID of the flowitem whose movement is recorded by the record. 2 = The time the flowitem moved. 3 = The object that the flowitem moved from. This is returned as an int and should be converted to a treenode using tonode(). 4 = The object that the flowitem moved to. This is returned as an int and should be converted to a treenode using tonode(); 5 = The itemtype of the flowitem at the time it moved. Example See the example for getnummoverecords(). getname (node thenode) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnodename (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Gets the name of a node/object. Example getnodenum (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with numeric data. Example getnodestr (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getnroftasks (obj tasksequence) Gets the number of uncompleted tasks in the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the number of tasks that still need to be completed in the tasksequence (including the current task). Example if(getnroftasks(mytasksequence) > 5) pt(\"There are more than 5 tasks in the tasksequence queue.\"); getnummoverecords () Deprecated Description This command is deprecated. Returns the number of movement records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the move records that have been recorded for (int rec = 1; rec <= getnummoverecords(); rec++) { int record = getmoverecord(rec); pd(getmoverecordvalue(record,0)); pt(\" \"); pd(getmoverecordvalue(record,1)); pt(\" \"); pf(getmoverecordvalue(record,2)); pt(\" \"); pt(getmoverecordvalue(record,3).name); pt(\" \"); pt(getmoverecordvalue(record,4).name); pt(\" \"); pd(getmoverecordvalue(record,5)); pt(\" \"); } getnumstaterecords () Deprecated Description This command is deprecated. Returns the number of state change records that have been collected for the Full History Report. The records are deleted when a model is reset, so this will return 0 before a model run. If Full History is not enabled, this will return 0. Example // Print the state change records that have been recorded for (int rec = 1; rec <= getnumstaterecords(); rec++) { int record = getstaterecord(rec); pd(getstaterecordvalue(record,0)); pt(\" \"); pf(getstaterecordvalue(record,1)); pt(\" \"); pd(getstaterecordvalue(record,2)); pt(\" \"); pt(getstaterecordvalue(record,3).name); pr(); } getobjectimageindex (obj object) Deprecated, do not use. Description This command is deprecated. Do not use. Returns the index number of the bmp or jpeg image currently assigned to the base of the object. Example getobjectimageindex(item); getoutput (obj involved) Deprecated, use Object.stats.output.value Description This command is deprecated. Use Object . stats .output.value instead. Returns the output statistic of the involved object. Example double outval = getoutput(current.centerObjects[1]); getquerycolcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the number of columns in the result table for the last call to query(). Example getquerymatchcount () Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the total number of rows in the result table for the last call to query() Example getquerymatchtablerow (str/num table, num matchRow) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns the source table's row number associated with a matched row in the last query() result. table - If a string, it is the name of the table as defined in the FROM statement. If you used an alias, it should be the table's alias. If a number, it should be the 1-based index of the table in the FROM statement. If there is only one table in the query, this should be 1. For multiple tables, the first table in the FROM is 1, the second is 2, etc. matchRow - The 1-based row of the result table of the query. Note that this command will not work if you use aggregator functions such as MIN(), MAX(), AVG(), etc. in the SELECT clause. When aggregators are used, this command just returns the number of rows in the source table. Example getqueryvalue (num row, num/str col) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. Returns a value in the result table for the last call to query() row - The 1-based row number of the result table col - The 1-based column number of the result table, or the name of the result column. If you have defined aliases in the select statement, the column name should be the alias. Example getrank (node thenode) Deprecated, use treenode.rank Description This command is deprecated. Use treenode . rank instead. Gets the rank of a child node in its parent's sub-tree. Example gets (node thenode) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Gets the value of a node with string data. Example getstatenum (obj object [, num stateprofilenr]) Deprecated, use Object.stats.state().value Description This command is deprecated. Use Object . stats .state().value instead. Returns the state of an object in numeric form. Example getstatenum(current); getstaterecord (num record) Deprecated Description This command is deprecated. Returns a state change record that has been recorded for the Full History Report. A state change record is created every time an object changes state if Full History is enabled. The parameter passed to this function is the number of the record (beginning at 1) that the user wishes to retrieve. If this command is called in C++, the return value is a StateRecord*. If this command is called in FlexScript, the return value can be assigned to an int. Example See the example for getnumstaterecords(). getstaterecordvalue (num record, num value) Deprecated Description This command is deprecated. Returns one of the values from the state change record that is passed in as the first parameter to the function. This record is the return value from a call to getstaterecord(). The value passed to this function as the second parameter indicates which value from the state change record the user wishes to retrieve: 0 = The record ID. This is the record\\'s row number in the movement table. 1 = The time of the state change. 2 = The state that the object changed to. 3 = The object that changed state. This is returned as an int and should be converted to a treenode using tonode(). Example See the example for getnumstaterecords(). getstatestr (obj object) Deprecated, use Object.stats.state().valueString Description This command is deprecated. Use Object . stats .state().valueString instead. Returns the state of an object as a text string. Example getstatestr(current); gettablecell (str/node/num table, num row, num column) Deprecated, use Table.cell Description This command is deprecated. Use Table . cell (). Example gettablecols (str/node/num table) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Gets the number of columns in the table. Example gettableheader (string/num/node table, num row/col, num rowcolnr) Deprecated, use Table.getColHeader() or Table.getRowHeader() Description This command is deprecated. Use Table . getColHeader () or Table . getRowHeader () instead. Gets the value of the header field of a table. Example gettablenum (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the number value in a table cell. Example gettablerows (str/node/num table) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Gets the number of rows in the table. Example gettablestr (str/node/num table, num row, num col) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Gets the text value in a table cell. Example gettaskinvolved (obj tasksequence, num taskrank, num involvednum) Gets a reference to the first or second involved object of the task of the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task classes instead. Returns a reference to either the first or second involved object for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which involved object it is (1 or 2) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the involved of the object's currently active task. Example treenode loaditem = getinvolved(gettasksequence(current.centerObjects[1], 0), 2, 1); gettasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a task sequence Description This command is deprecated. Use the Dispatcher and TaskExecuter class methods and properties instead. Returns a reference to the task sequence that has the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to its currently active task sequence. Example treenode mytasksequence = gettasksequence(current.centerObjects[1], 5); gettasksequencequeue (obj dispatcher) Gets a reference to the dispatcher's tasksequence queue Description This command is deprecated. Use the Dispatcher class properties instead. Returns a reference to the specified dispatcher's task sequence queue. Example treenode tsqueue = gettasksequencequeue(current.centerObjects[1]); gettaskstate (obj tasksequence, num taskrank) Gets the state of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Gets the state of the task at rank taskrank of tasksequence. The following are task states: TASKSTATE_UNFINISHED TASKSTATE_ACTIVE TASKSTATE_FINISHED TASKSTATE_COORDINATED Example if(gettaskstate(gettasksequence(current.centerObjects[1], 0), 2) == TASKSTATE_ACTIVE)... gettasktype (obj tasksequence, num taskrank) Gets the task type of the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the task type for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task type of the object's currently active task. Example if(gettasktype(gettasksequence(current.centerObjects[1], 0), 2) == TASKTYPE_LOAD)... gettaskvariable (obj tasksequence, num taskrank, num variablenum) Gets the tasksequence variable for the task at rank taskrank of tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns a reference to one of the four task variables for the nth ranked task of the specified task sequence. The ranking is based on the initial ranking of the task, when the task sequence was initially created and tasks were added. It is not based on the ranking at a given time in the simulation, as tasks may have already been completed and subsequently destroyed. The third parameter defines which task variable it is (1 - 4) You can also pass a reference to the TaskExecuter as the first parameter, and the value 0 as the second parameter to get the task variable of the object's currently active task. Example double myvar = gettaskvariable(gettasksequence(current.centerObjects[1], 0), 2, 1); gettotalnroftasks (obj tasksequence) Gets the total number of tasks that were ever added to the tasksequence Description This command is deprecated. Use the TaskSequence and TaskSequence.Task class methods and properties instead. Returns the total number of tasks that were ever added to the tasksequence. Example gettotalnroftasks(mytasksequence) gettrackedvariable (str/node trackedvar [, num valtype] ) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example getvartype (var) Deprecated, use Variant.type Description This command is deprecated. Use Variant . type instead. Example getvartype(myVar) glBegin (num primitive) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glColor3d (num red {0-1}, num green {0-1}, num blue {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glColor4d (num red {0-1}, num green {0-1}, num blue {0-1}, num alpha {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example glDisable (num setting) Deprecated, use fglDisable() Description This command is deprecated. Use fglDisable() instead. Example glEnable (num setting) Deprecated, use fglEnable() Description This command is deprecated. Use fglEnable() instead. Example glEnd () Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glLoadIdentity () Deprecated, use fglLoadIdentity() Description This command is deprecated. Use fglLoadIdentity() instead. Example glMatrixMode (num mode) Deprecated, use fglMatrixMode() Description This command is deprecated. Use fglMatrixMode() instead. Example glNormal3d (num x, num y, num z) Deprecated, use fglNormal() Description This command is deprecated. Use fglNormal() instead. Example glNormal3d(1,0,0); globallist (str listName) Deprecated, use List(\"GlobalListName\") Description This command is deprecated. Use List (\"GlobalListName\") instead. References a global list by name. Example glPopAttrib () Deprecated, do not use Description This command is deprecated. Do not use. Example glPopMatrix () Deprecated, use fglPopMatrix() Description This command is deprecated. Use fglPopMatrix() instead. Example glPushAttrib (num attribsetting) Deprecated, do not use Description This command is deprecated. Do not use. Example glPushMatrix () Deprecated, use fglPushMatrix() Description This command is deprecated. Use fglPushMatrix() instead. Example glRotated (num degrees, num x, num y, num z) Deprecated, use fglRotate() Description This command is deprecated. Use fglRotate() instead. Example glScaled (num x, num y, num z) Deprecated, use fglScale() Description This command is deprecated. Use fglScale() instead. Example glTexCoord2d (num x 0-1, num y 0-1) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example glTranslated (num x, num y, num z) Deprecated, use fglTranslate() Description This command is deprecated. Use fglTranslate() instead. Example glVertex3d (num x, num y, num z) Deprecated, use the mesh() API Description This command is deprecated. Do not use. Use the mesh() API instead. Example groupaddmember (str group, obj member) Deprecated, use Group.addMember() Description This command is deprecated. Use Group . addMember () instead. Adds an object to a group. Example groupmember (str group, num member) Deprecated, use Group[] Description This command is deprecated. Use Group [] instead. Gets a reference to a group member. Example groupnummembers (str group) Deprecated, use Group.length() Description This command is deprecated. Use Group . length instead. Gets the number of members in a group. Example groupremovemember (str group, num/obj member) Deprecated, use Group.removeMember() Description This command is deprecated. Use Group . removeMember () instead. Removes an object from a group. Example gt (num value1, num value2) Deprecated, use the > operator Description This command is deprecated. Use the > operator instead.. Example helpcommands (node destnode, num what, str command) Description For developer use. Used to get information about a command. Enter the command name in parameter 3. The return value will be copied into the string data of destnode. \"what\" defines what information is needed, as follows: 1 - returns the xml fragment string that contains the documentation for that command Example helpcommands( hidelabel (obj object[, num off/on]) Deprecated, use switch_hidelabel() Description This command is deprecated. Use switch_hidelabel() instead. This command sets the specified object to show or hide its name and basic statistics on the screen. A value of 1 is show and a value of 0 is hide. If the name and statistics are hidden for an object, they will not be visible in any view window. View windows also have an attribute that controls this connector display of all objects in the view. Example hidelabel(current,0); This sets the object referenced by current so that its name and statistics will not be drawn. hideports (obj object[, num off/on]) Deprecated, use switch_hideconnectors() Description This command is deprecated. Use switch_hideconnectors() instead. This command sets the specified object to show or hide its ports and connections. A value of 1 is show and a value of 0 is hide. If the ports and connections are hidden, they will not be visible in any view window. Example hideports(current,1); This sets the current object to show its ports and connections in all view windows. inc (node thenode, num amount) Deprecated, use += operator Description This command is deprecated. Use += operator instead. myNode.value += 2; Increments the value of a node by a defined amount. Example inc(current.mylabel,1) inittrackedvariable (node theNode, num type[, num startValue, num flags]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example inobject (obj object, num inputportnum) Deprecated, use Object.inObjects[] Description This command is deprecated. Use Object . inObjects [] instead. Reference the upstream object connected to a downstream object's input port. Example inserttask (obj tasksequence, num type [, obj involved1, obj involved2 , num var1, num var2, num var3, num var4] ) Inserts a new task to the task sequence Description This command is deprecated. Use TaskSequence.addTask() instead. Inserts a task into the specified tasksequence of the specified type. Depending on the task type, the remaining parameters will have a different meaning. Refer to the Task Type Quick Reference guide in the Users Manual for an explanation of the parameters associated with each task type. Example inserttask(ts, TASKTYPE_TRAVEL, current, NULL); installpackage (str path+filename) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. Install a service pack (.fpk). Example installpackage(\"C:/mypak.fpk\") item <no parentheses> Description This command is deprecated. This should not be used as a special command with the setitem command anymore. Instead, declare a treenode variable type as item, then use item in your code as any other variable type. Example treenode item = model().subnodes[3]; pt(item.name); This sets the object that is ranked 3 in the model to item and prints its name to the output console. iterate (num start, num end, num step) {} Deprecated, use for() or while() commands Description This command is deprecated. Use for() or while() commands instead. Repeatedly execute the following block {} with counter value traversing from start to end being incremented by step. The count command can be used to access the current counter value on each iteration. The return value of count will depend on which iteration is currently being executed. Example iterate(1,9,2) { pd(count);pr(); } Prints the following numbers to the outputconsole: 1,3,5,7,9 label (obj object, str/num label) Deprecated, use treenode.labels[] Description This command is deprecated. Use treenode . labels [] instead. Gets the node reference to an object's label. Example last (node container) Deprecated, use treenode.last Description This command is deprecated. Use treenode . last instead. Reference a parent node's last child node. Example le (num value1, num value2) Deprecated, use the <= operator Description This command is deprecated. Use the <= operator instead. Example listbackorders (obj list[, var partitionId]) Deprecated, use List.backOrders() Description This command is deprecated. Use List . backOrders () instead. References to a list's back orders. Example listentries (obj list[, var partitionId]) Deprecated, use List.entries() Description This command is deprecated. Use List . entries () instead. References to a list's pushed entries. Example listinlist (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of occurrence of value in list. The list, of length qty, is searched and the position in the list of the value val is returned by this function. Example listinlist(5,3,2,1,2,3,4) This returns the index number 4 because 3 is the fourth number in the list of 5 numbers. listmax (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of highest value. The list, of length qty, is searched and the position in the list of the highest value is returned by this function. Example listmax(5,2,1,2,3,4) This returns a 5 because 4 is the largest value and it is fifth in the list of five numbers. listmaximum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Highest value. The list, of length qty, is searched and the value of the highest value is returned by this function. Example listmaximum(5,2,1,2,3,4) This returns a 4 because it is the highest value in the list. listmean (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Average of values. The mean of the values in the list, of length qty, is returned by this function. Example listmean(5,2,1,2,3,4) This returns 2.5. listmin (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Index of lowest value. The list, of length qty, is searched and the position in the list of the lowest value is returned by this function. Example listmin(5,2,1,2,3,4) This returns 2 because 1 is the lowest value and it is second in the list. listminimum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the Array class instead. Lowest value. The list, of length qty, is searched and the value of the lowest value is returned by this function. Example listminimum(5,2,1,2,3,4) This returns 1 because that is the lowest value in the list. listmul (num qty, num val [, num a,...]) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of list. The product of all the values in the list, of length qty, is returned by this function. Example listmul(5,2,1,2,3,4) This returns the value 48. listpull (str/obj list, str/node query, num requestNum [, num requireNum, str/node/num puller, str/node/num partitionId, num flags]) Deprecated, use List.pull() Description This command is deprecated. Use List . pull () instead. Pulls one or more entries from a list. Example listpush (str/obj list [, str/node/num pushVal, str/node/num partitionId, ...]) Deprecated, use List.push() Description This command is deprecated. Use List . push () instead. Pushes an entry onto a list. Example listremove (obj entryOrBackOrder) Deprecated, use List.backOrders()[backOrderNum].remove() or List.entries()[enterNum].remove() Description This command is deprecated. Use List . backOrders ()[backOrderNum].remove() or List . entries ()[entryNum].remove() instead. Removes an entry or back order from its owning list. Example listsub (num qty, num val [, num a,...]) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. Subtraction of list. The list, of length qty, is traversed and the first value has all subsequent values subtracted from it and then is returned by this function. Example listsub(5,2,1,2,3,4) listsum (num qty, num val [, num a,...]) Deprecated, use the Array class Description This command is deprecated. Use the + operator instead. Sum of values. The sum of all the values in the list, of length qty, is returned by this function. Example listsum(5,2,1,2,3,4) loadsound (str path+filename) Deprecated, use soundload() Description This command is deprecated. Use soundload() instead. A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. The sound must be a .wav file. Example int applauseindex = loadsound(\"c:/My Music/APPLAUSE.WAV\"); local (num index) Deprecated, use local variables Description This command is deprecated. Use local variables like treenode, int, double, string instead. Gets a reference to an indexed local variable as a treenode. You must use localarray() to define how many local variables are used and what data type they should have. Can only be used in flexscript. Example setnodenum(local(1),4); Sets the 1st variable in the localarray to 4. localarray (num qty[, num datatype]) Deprecated, use Array class Description This command is deprecated. Use the Array class instead. Allocate general purpose local array with the given quantity of local variables. Type can be: 1 = num, 2 = str, 3 = coupling, 4 = obj. May only be used in flexscript. Example localarray(1,4) log (num value) Deprecated, use Math.log() Description This command is deprecated. Use Math . log () instead. Natural Logarithm of value. Example log10 (num value) Deprecated, use Math.log10() Description This command is deprecated. Use Math . log10 () instead. Base-10 Logarithm of value. Example lognormal (num location, num normalmean, num normalstdev[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. lognormal( location, normalmean, normalstdev, stream ) is a continuous probability distribution. Inputs: location : ( - ∞ , ∞ ) normalmean such that ( Math.exp( normalmean ) > 0 ) normalstdev such that ( normalstdev > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( location , ∞ ) mean = location + Math.exp( normalmean + normalstdev² ⁄ 2) variance = Math.exp( 2*normalmean + normalstdev² ) [ Math.exp( normalstdev² ) − 1 ] Probability Density Functions: Possible Applications: Used to model the time to perform some task, and to model quantities that are the product of a large number of other quantities. It can also be used as a rough model in the absence of data. Comments: The probability density for the lognormal distribution takes on shapes similar to gamma( normalstdev, normalmean ) and weibull( normalstdev, normalmean ) densities for normalstdev > 1, but can have a large spike close to x=0 that is often useful. Example lognormalmeanstdev (num mean, num stdev[, num stream]) Returns a random sample from a lognormal distribution Description This command is an alternative to the lognormal2 command, used in the absence of data. You can specify the mean and standard deviation, and the command will calculate from those parameters the proper location, scale, and shape parameters for the lognormal2 command, and return a sample from that distribution. Note that the shape of the distribution is pre-defined to be a bell-shaped curve with a reasonably long right tail. Hence this command isn't as flexible as the lognormal2 command. This command, similar to the triangular distribution, should be used in the absence of data, where you know the mean and standard deviation of the distribution, and you assume that the distribution is right-skewed (it has a longer right tail), but you do not have a real data set to fit to a distribution. Refer to lognormal2 for more information. Relating to the diagram describing the lognormal2 distribution, the lognormalmeanstdev command uses a normalstdev/shape value of 0.75 to define its shape. Note that since the shape of the distribution is hard-set, depending on the mean and standard deviation values, this may return a negative value. Example double cycletime = lognormalmeanstdev(10, 2); This example will return a random value that follows a right-skewed lognormal distribution with a mean of 10 and standard deviation of 2. lt (num value1, num value2) Deprecated, use the < operator Description This command is deprecated. Use the < operator instead. Example main () Deprecated, use maintree() Description This command is deprecated. Use maintree() instead. Get the main tree node. This is one of the two primary databases of FlexSim. Also called the \"Project Tree\". The other primary database is the views tree node also called the \"View Layout Tree\" Example main() makearray (num qty) Deprecated, use the Array class Description This command is deprecated. Use Array (qty) instead. Array array = Array(4); Initializes a local array. Example max (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example maxof (num value1, num value2) Deprecated, use Math.max() Description This command is deprecated. Use Math . max () instead. Gets the maximum of value1 and value2. Example min (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2. Example minof (num value1, num value2) Deprecated, use Math.min() Description This command is deprecated. Use Math . min () instead. Gets the minimum of value1 and value2 Example module (num type, node libnode) Deprecated Description This command is deprecated. Use the DLL functionality provided with version 4 instead. Used with dll plugins. The type can be: MOD_LOAD (1) MOD_UNLOAD (2) MOD_GETFUNCTION (3) MOD_RUNFUNCTION (4) Example module(MOD_UNLOAD,main.find(\"project/exec/dll/1\")) movetablecol (str/num/node table, num column, num newcolumn) Deprecated, use Table.moveCol() Description This command is deprecated. Use Table . moveCol (). instead. Moves a column of a table to newcolumn. Example movetablerow (str/num/node table, num row, num newrow) Deprecated, use Table.moveRow() Description This command is deprecated. Use Table . moveRow (). instead. Moves a row of a table to newrow. Example movetasksequence (obj tasksequence, obj dispatcher) Moves tasksequence into the dispatcher's tasksequence queue Description This command is deprecated. Use TaskSequence.move() instead. Moves the specified tasksequence into the specified dispatcher's tasksequence queue. WARNING!! This command should never be called on a tasksequence that is already being executed by a TaskExecuter. Example movetasksequence(tasksequence, current.centerObjects[1]); mul (num value1, num value2) Deprecated, use the * operator Description This command is deprecated. Use the * operator instead. Product of a and b. This returns the result of the arithmetic expression value1*value2. Example double product = mul(3,4); multisorttable (str/node/num table, num col1[, num col2, num col3, ...]) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by each column (ascending for positive columns, descending for negative columns). Example nametomodelpath (obj node, obj object) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Sets the name of a node to the path of the object relative to the model. Example nametomodelpath(curlistnode, current); ncols (node thenode) Deprecated, use Table.numCols Description This command is deprecated. Use Table . numCols instead. Example ne (num/node value1, num/node value2) Deprecated, use the != operator Description This command is deprecated. Use the != operator instead. Example next (obj object) Deprecated, use treenode.next Description This command is deprecated. Use treenode . next instead. Reference the next sibling of a node. Example node (str relativepath[, obj startnode]) Deprecated, use treenode.find() Description This command is deprecated. Use treenode . find () instead. Reference a node by named path from a root node. Example nodeadddata (node thenode, num type:num/str/ptr/obj) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Add data to thenode, ie DATATYPE_NUMBER. Example nodedeldata (node thenode) Deprecated, use treenode.value or treenode.dataType Description This command is deprecated. Use treenode . value or treenode . dataType instead. Removes all data from the node. Example nodepoint (node a, node b) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value . instead. Points node a to node b. Example nodetomodelpath (node thenode [, num nameflag=1]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode from the model. Example nodetopath (node thenode [, num nameflag=0]) Deprecated, use treenode.getPath() Description This command is deprecated. Use treenode . getPath () instead. Returns the text path of thenode. Example not (num/node value1) Deprecated, use the ! operator Description This command is deprecated. Use the ! operator instead. Example nrcp (obj object) Deprecated, use Object.centerObjects.length Description This command is deprecated. Use Object . centerObjects .length instead. Number of center ports of object. Example nrip (obj object) Deprecated, use Object.inObjects.length Description This command is deprecated. Use Object . inObjects .length instead. Number of input ports of object Example nrop (obj object) Deprecated, use Object.outObjects.length Description This command is deprecated. Use Object . outObjects .length instead. Number of output ports of object. Example nrows (node thenode) Deprecated, use Table.numRows Description This command is deprecated. Use Table . numRows instead. Example ntravelto (obj traveler, obj spline, num endx, num endy, num endz, num vmax, num acc, num dec, num startspeed, num endspeed) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Causes the object to travel to a given rz and return the simulation time that it will arrive. Similar to the travelto command, but includes a start and end speed definition. Used in the development of the TaskExecuter. Example ntravelto(current, 0, 5, 8, 0, 1, 1, 1, 0, 1) ntraveltoupdate (obj object) Deprecated, use kinematics instead Description This command is deprecated. Use kinematics instead. Updates the rz of an object after a ntravelto() command was called on it. Used in the OnPreDraw of the TaskExecuter to update it's position. Example ntraveltoupdate(current) numtostring (num value[, num width, num precision]) Deprecated, use string.fromNum() Description This command is deprecated. Use string . fromNum () (static method) instead. Converts value to a string. Example objectconnect (obj object1, obj object2) Deprecated, use contextdragconnection() Description This command is deprecated. Use contextdragconnection() instead. Connect two objects, adding needed ports. Object1 will have an output port added, and object2 will have an inport added as needed. Then the ports are connected. Example connect(so(),so().next) objectshapecode (obj object) Deprecated, use getshapeindex() Description This command is deprecated. Use getshapeindex() instead. Get the index of the object's default shape. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the objects default shape. Example objectshapecode(so()) objecttexcode (obj object) Deprecated, use getobjecttextureindex() Description This command is deprecated. Use getobjecttextureindex() instead. Gets the index of the object's default image. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to the objects default texture (image). Example objecttexcode(current) openflexsimchart ([str filename1] [,str filename2]) Deprecated Description This command is deprecated. Example openglcolor (num red {0-1}, num green {0-1}, num blue {0-1}, num opacity {0-1}) Deprecated, use fglColor() Description This command is deprecated. Use fglColor() instead. Example opengllighting (num on/off) Deprecated, use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) Description This command is deprecated. Use fglEnable(GL_LIGHTING) and fglDisable(GL_LIGHTING) instead. Example openinput (obj object) Deprecated, use Object.input.open() Description This command is deprecated. Use Object . input .open() instead. This command unblocks the input of the object after it has been previously blocked with the closeinput() command. It is necessary that both the input ports themselves, and the input in general, are open before entry will be allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeinput(). Example if (current.subnodes.length < maxcontent) openinput(current); openoutput (obj object) Deprecated, use Object.output.open() Description This command is deprecated. Use Object . output .open() instead. This command unblocks the output of the object after it has been previously blocked with the closeoutput() command. It is necessary that both the output ports themselves, and the output in general, are open before exiting is allowed. It is advised that modelers never use this command in any field other than the OnMessage field which has been triggered with the senddelayedmessage() command, because commands which open ports often spawn several other activities that shouldn't be performed during transitional events. Compare this command with resumeoutput(). Example if (current.subnodes.length > mincontent) openoutput(current); or (num/node condition1, num/node condition2) Deprecated, use the || operator Description This command is deprecated. Use the || operator instead. Example outobject (obj object, num outputportnum) Deprecated, use Object.outObjects[] Description This command is deprecated. Use Object . outObjects [] instead. Reference the downstream object connected to an upstream object's output port. Example parg () Description This command is deprecated. Example parg() parnode (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode). The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parval() and parstr() for casting them as numbers and strings respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = parnode(1); parstr (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a string. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using the param() command. Example If a trigger/field is called with: nodefunction(thefuncnode, passingstr) then within the trigger/field, getting access to the passingstr string passed as the first additional parameter would be done with: string passedstr = parstr(1); particleset () Deprecated, do not use Description This command is deprecated. Used to set values on a \"particle\" object, which is no longer supported. Example parval (num index) Deprecated, use param() Description This command is deprecated. Use param instead. This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a number. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Parameters can also be retrieved using parnode() and parstr() for casting them as a treenode and string respectively. Example If a trigger/field is called with: nodefunction(thefuncnode, passingval) then within the trigger/field, getting access to the passingval passed as the first additional parameter would be done with: double passedval = parval(1); pc (num asciivalue) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an ASCII character to the output console. Example pd (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print an integer to the output console. Example pf (num value) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a floating point number to the output console. Example pi () Deprecated, use Math.pi Description This command is deprecated. Use Math . pi instead. Gets the value of pi (3.14159....). Example port <no parentheses> Description This command is deprecated. This should not be used as a special command with the setport command anymore. Instead, declare an int variable type as port, then use port in your code as any other variable type. Example int port = param(3); pd(port); This sets port to param(3) and then prints the value to the output console. pow (num num1, num num2) Deprecated, use Math.pow() Description This command is deprecated. Use Math . pow () instead. Calculates num1 raised to the power of num2. Example pr () Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print a new line to the output console. Example prev (obj object) Deprecated, use treenode.prev Description This command is deprecated. Use treenode . prev instead. Reference the previous sibling of a node. Example pt (str text) Deprecated, use print() Description This command is deprecated. Use the print() command instead. Print text to the output console. Example query (str query[, node/num/str p1, node/num/str p2, ...]) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example radianstodegrees (num value) Deprecated, use Math.degrees() Description This command is deprecated. Use Math . degrees () instead. Convert radians to degrees Example rank (obj parent, num index) Deprecated, use treenode.subnodes[] Description This command is deprecated. Use treenode . subnodes [] instead. Reference a child node by rank. Example rankobj (obj container, num rank) Deprecated, use Object.attrs[] Description This command is deprecated. Use the treenode . attrs 's [] operator instead. Gets a reference to the ranked node in the object's attribute sub-tree at rank. Example reftable (str/num globaltable) Deprecated, use Table(\"GlobalTableName\") Description This command is deprecated. Use the Table class instead. Gets a reference to a global table. Example Table table = reftable(\"GlobalTable1\") relloc (obj object, obj containerobj, num coordinate) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. This command returns the x, y, or z location of an object relative to an object that contains it. The containerobj does not need to be the immediate container, but does need to eventually be a container of the object. Use a coordinate value of 1,2,3 for x,y,z respectively. Example double x = relloc(current,model(),1); double y = relloc(current,model(),2); double z = relloc(current,model(),3); Sets x, y and z to the x,y,z positions of the current object relative to the model space. repeat (num nr, expression) Description Executes expression the specified number of times. The expression can use \"count\" to get the 1-based number of the iteration being executed. Example repeat(current.outObjects.length, current.outObjects[count].input.close); This example will close the input of all objects connected to the output ports of current. reset () Deprecated, use resetmodel() Description This command is deprecated. Use resetmodel() instead. For developer use. This command resets the model. The simulation clock is set to 0, and the OnReset event function is called for every object in the model. The OnReset events generally call the ResetTrigger functions that the users define. The model must be compiled before it can be reset. The resetmodel() command should typically be used instead of reset(). Example reset(); go(); This resets then runs the model. resumeanimation (obj object, num/str animation[, num resumeAtType, num resumeAtVal]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Resumes an animation from some point in the middle of the animation. Example resumeanimation(current, \"Stand\"); resumeinput (obj object) Deprecated, use Object.input.resume() Description This command is deprecated. Use Object . input .resume() instead. This command opens the input of an object just like openinput() does, but because it keeps track of previous stopinput() commands called on the object, it will only open input after all stops have been resumed. Refer to openinput() documentation for additional information. Example resumeinput(current.centerObjects[1]); resumeobject (obj object [, num id, num stateprofile ] ) Deprecated, use Object.resume() Description This command is deprecated. Use Object . resume () instead. Tells the object that it may resume whatever it was doing before stopobject() was called on it. The id value is optional and is for matching stop requests with resume requests. Refer to the stopobject() documentation for more information on this. Example resumeobject(current.centerObjects[1]); resumeoutput (obj object) Deprecated, use Object.output.resume() Description This command is deprecated. Use Object . output .resume() instead. This command opens the output of an object just like openoutput() does, but because it keeps track of previous stopoutput() commands called on the object, it will only open output after all stops have been resumed. Refer to openoutput() documentation for additional information. Example resumeoutput(current.centerObjects[1]); richeditaddtext (obj richedit, str text, num protected (0/1)) Deprecated, do not use Description This command is deprecated. Do not use. Example richedittoken (obj richedit, num tokenindex) Deprecated, do not use Description This command is deprecated. Do not use. Example round (num value[, num precision]) Deprecated, use Math.round() Description This command is deprecated. Use Math . round () instead. Rounds the value to the nearest integer. Example runexpertfit () Description Deprecated, returns 0. Example runexpertfit() savefpk (node servicepackhead) Deprecated, use user libraries Description This command is deprecated. Use user libraries instead. This saves the node to disk as a service pack file (.fpk). A save file dialog box will appear, allowing you to define the path and name of the file. A service pack is nothing more than a node with subnodes. The first subnode is assumed to be toggled flexscript and contain string data with code. When the service pack is loaded using File | Install Service Pack, the first subnode of you service pack will execute automatically. The code will usually copy the other subnodes into the MAIN and VIEW trees. Example savefpk(so()); senddelayedmessage (obj toobject, num delaytime, obj fromobject [, num par1, num par2, num par3]) Send a delayed message to an object, firing its OnMessage trigger after the delay time has transpired Description This command is deprecated. Use Object . message () instead. Causes a message to be sent to the toobject from the fromobject after the delaytime has transpired. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three numeric par values passed in as msgparam(1), msgparam(2) and msgparam(3). This is a very usefuly command for creating your own time events during a model run. Example senddelayedmessage(current.outObjects[1], 25, current, 0, 0, 0); Sends a message from the current object to the object connecte to output port 1 of the current object 25 time units after this command is executed. Zeros are passed for all three of the user-defined parameters. sendmessage (obj toobject, obj fromobject [, var par1, var par2, var par3]) Send a message to an object, firing its OnMessage trigger Description This command is deprecated. Use Object . message () instead. Causes a message to be sent immediately to the toobject from the fromobject as in a direct function call. When the toobject receives the message, its OnMessage trigger will fire. In the code of the OnMessage trigger, you may refer to the fromobject as msgsendingobject, and the three par values passed in as msgparam(1), msgparam(2) and msgparam(3). These message parameters are Variants, meaning they can be numbers, strings, treenode references or arrays. Example sendmessage(current.centerObjects[1], current, item, 10); This sends a message to the object connected to current's first center port. A reference to item is passed as par1 and the number 10 as par2. set (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setcenter (obj object, num x, num y, num z) Deprecated, use Object.setLocation() Description This command is deprecated. Use Object . setLocation () instead. Sets the x, y, and z location of the object's rotational center, relative to its container. Example setcolor (obj object, num red, num green, num blue) Deprecated, use the Color class Description This command is deprecated. Instead set Object . color to Color () instead. Sets the red, green and blue color components of an object Example setcurrent (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setitem (thing) Deprecated do not use Description This command is deprecated. Do not use. Example setitemtype (obj object, num value) Deprecated, use labels Description This command is deprecated. Use labels instead. This command sets the itemtype attribute of the object to value. If the object does not have the itemtype attribute, this command does nothing. The attribute itemtype is typically used to distinguish between different types of flowitems that may be of the same class. Example setitemtype(item,duniform(1,3)); This sets the itemtype attribute of the flowitem referenced by item to a random integer between 1 and 3. setlabel (obj node, str/num label, num/str/node value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets the value of an object's label. Example setlabelnum (obj object, str/num label, num value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value. Example setlabelstr (obj object, str/num label, str value) Deprecated, use treenode.LabelName Description This command is deprecated. Use treenode . labelProperties instead. Sets an object label value Example setloc (obj object, num x, num y, num z[, num xFactor, num yFactor, num zFactor]) Deprecated, use Object.location Description This command is deprecated. Use Object . location instead. Sets the x, y, and z location of the object relative to its container. Example setname (obj object, str value) Deprecated, use treenode.name Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodename (obj/node object, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . name instead. Sets the name of a node/object. Example setnodenum (node thenode, num value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with numeric data. Example setnodestr (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setobjectimageindex (obj object, num index) Deprecated, do not use. Description This command is deprecated. Do not use. Sets the index number of the bmp or jpeg image to be assigned to the base of the object (2D shape and base image). For the new index to take effect, the imagebase node of the object must be removed or renamed, so this command renames the imagebase node to \"_imagebase\" for you. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Example setobjectimageindex(item,gettextureindex(\"fs3d\\\\BBsphere.bmp\")); setport (thing) Deprecated, do not use Description This command is deprecated. Do not use. Example setquerynode (node queryNode) Deprecated, use Table.query() Description This command is deprecated. Use Table . query () instead. See Miscellaneous Concepts > SQL Queries for more information. Example setrank (obj/node object, num index) Deprecated, use treenode.rank Description This command. Use treenode . rank instead. Sets the rank of a child node in its parent's sub-tree. Example setrot (obj object, num rx, num ry, num rz) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Sets the rotation of the object. Example sets (node thenode, str value) Deprecated, use treenode.value Description This command is deprecated. Use treenode . value instead. Sets the value of a node with string data. Example setsize (obj object, num sx, num sy, num sz) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Sets the size of the object. Example setstate (obj object, num state [, num profilenr]) Deprecated, use Object.setState() Description This command is deprecated. Use Object . setState (stateNum); Sets the state of an object. Example setstate_s (obj object, str statename) Description This command is deprecated. Use Object . stats .state().valueString = stateStr; For development use. Set the state of an object using the actual name of one of the states. The state names must be as they appear in a state pie chart. Example setstate_s(current,\"busy\") settable (node table, num sx, num sy[, num type, num overwrite]) Deprecated, use Table class Description This command is deprecated. Use the Table class instead. Example settableheader (string/num/node table, num row/col, num rowcolnr, string value) Deprecated, use Table.setColHeader() or Table.setRowHeader() Description This command is deprecated. Use Table . setColHeader () or Table . setRowHeader () instead. Sets the value of the header field of a table Example settablenum (str/node/num table, num row, num col, num value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the number value in a table cell. Example settablesize (str/num/node table, num rows, num cols [, num datatype, num overwrite y/n]) Deprecated, use Table.setSize() Description This command is deprecated. Use Table . setSize () instead. Sets the size of a table. Example settablestr (str/node/num table, num row, num col, str value) Deprecated, use the Table's [] operators Description This command is deprecated. Use the Table class's [] operators instead. Sets the text value in a table cell. Example settrackedvariable (str/node trackedvar, num value[, num rate]) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example setundos (num maxundos) Deprecated Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. Sets the maximum number of allowable undos. A copy of the entire model will be saved each time a mouse is clicked or a key is pressed. Using the setundos command, you specify the maximum number of model copies that will be remembered for undoing. This command first requires creating a node in the main tree named undo and giving it number data. Example setundos(2); showgraphicinfo (num showhide, str filename) Deprecated, do not use Description This command is deprecated. Do not use. Example sign (num value) Deprecated, use Math.sign() Description This command is deprecated. Use Math . sign () instead. Sign of value. Example sin (num angle) Deprecated, use Math.sin() Description This command is deprecated. Use Math . sin () instead. Gets the sin of an angle in radians. Example sorttable (str/node/num table, num column) Deprecated, use Table.sort() Description This command is deprecated. Use Table . sort () instead. Sorts the table by the values in column in ascending order. Example spaceglobal () Deprecated, use drawtomodelscale() Description This command is deprecated. Use drawtomodelscale() instead. Set the OpenGL space to the global matrix. Example spaceglobal() spaceobject () Deprecated, use drawtoobjectscale() Description This command is deprecated. Do not use. Use drawtoobjectscale() instead. Example spaceobject() sqr (num value) Deprecated, use Math.sqr() Description This command is deprecated. Use Math . sqr () instead. Square of value. Example sqrt (num value) Deprecated, use Math.sqrt() Description This command is deprecated. Use Math . sqrt () instead. Square root of value. Example startanimation (obj object, num/str animation[, num speedtype, num speedvalue, num repeattype, num repeatvalue]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Starts an animation on an object. Example startanimation(current, \"Stand\"); statisticaltime () Deprecated, use the Model class Description This command is deprecated. Use Model . statisticalTime instead. Returns the current simulation time with respect to when stats were last reset, such as since the warmup time has passed in an experiment or since resetstats() was executed. Example item.TimeIn = statisticaltime(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. stopanimation (obj object, num/str animation) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Stops an animation on an object. Example stopanimation(current, \"Walk\"); stopinput (obj object) Deprecated, use Object.input.stop() Description This command is deprecated. Use Object . input .stop() instead. This command closes the input of the object just like closeinput() does, but it also keeps track of consecutive stopinput() commands, and will only open input after all stops have been resumed. Refer to closeinput() documentation for additional information. Example stopinput(current.centerObjects[1]); stopobject (obj object, num state [, num id, num priority, num stateprofile] ) Deprecated, use Object.stop() Description This command is deprecated. Use Object . stop () instead. Tells the object to stop whatever it is doing, go into the state specified (in the state profile if specified), and waits for resumeobject() to be called. Stopobject commands are accumulated, meaning if stopobject is called twice on the same object, the object will not resume its operations until resumeobject has been called twice as well. Stopping an object depends on the type of object that is being stopped. For FixedResources, generally events are delayed indefinitely, input and output is stopped, and all operations going into and out of the object are stopped. This means that TaskExecuters trying to load/unload to or from the object will have to wait until the object has been resumed. For TaskExecuters, events are not delayed, but rather a preempting task sequence with priority of 100,000 is created for the TaskExecuter, with one TE_STOP task in it. Be aware that, if there are several stop requests for the same object, the state for each stop request is not remembered. If an object is requested to stop by entity A with state 12, and then is later requested to stop by entity B for state 14, it will go into state 14 and forget state 12. Even if entity B resumes the object before entity A, the object will remain in state 14 until all stop requests have resumed. The last two parameters, id and priority, are optional and have recently been added to fix the problem in the previous paragraph. If you specify these parameters, then it will store a record of the stop request, instead of just incrementing a value for the number of stops requested. The id is like a key for that stop request. The priority allows the object to prioritize its stop requests. For example, if you have a stop request for the scheduled down state, and another for the breakdown state at the same time, technically the object should be in two states at once, but since a FlexSim object can only be in one state at a time, the priority value breaks the tie and goes into the state of the highest priority stop request. The id value should match an id value that is added to a resumeobject() command later on. This is for matching stop requests with their appropriate resume requests. For example, if you stop an object for scheduled maintenance with and id of 1, once the scheduled maintenance is finished, you will need to resume the object with the same id of 1. Example stopobject(current.centerObjects[1], STATE_BLOCKED); stopoutput (obj object) Deprecated, use Object.output.stop() Description This command is deprecated. Use Object . output .stop() instead. This command closes the output of the object just like closeoutput() does, but it also keeps track of consecutive stopoutput() commands, and will only open output after all stops have been resumed. Refer to closeoutput() documentation for additional information. Example stopoutput(current.centerObjects[1]); store () Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. It explicitly stores an archived copy of the current model inside the undo folder of the main tree. Refer to undos() command documentation for more information. Example store(); stringcopy (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. Returns a substring of string defined by index start (base 1) and length. Example stringlen (str string) Deprecated, use string.length Description This command is deprecated. Use string . length instead. Gets the length of string. Example stringpart (str string, num start, num length) Deprecated, use string.substr() Description This command is deprecated. Use string . substr () instead. This command will return a portion of a string. The new string is defined with a starting character number and a length. A start value of 0 refers to the first character in the original string. Example stringpart(\"Hello\",2,3) returns the sub string \"llo\". stringreplace (str stringtosearch, str searchfor, str replacewith) Deprecated, use string.replace() Description This command is deprecated. Use string . replace () instead. Returns a copy of stringtosearch with all occurrences of searchfor replaced with replacewith. Example stringreturn (str returnstring, ptr callpoint) Description This command is deprecated. You can simply return strings from C++ user commands with the return statement. Prior to FlexSim 7.7, this command was used to return a string from a C++ implementation of a user command. This command was only needed in C++. In FlexScript user commands, you can simply return the string with the return statement. Example C++: stringreturn(result, callpoint); return 0; stringsearch (str stringtosearch, str searchfor, int startindex[, int flags]) Deprecated, use string.search() Description This command is deprecated. Use string . search () instead. Searches the string for the given substring searchfor (base 0). Example stringtonum (str string) Deprecated, use string.toNum() Description This command is deprecated. Use string . toNum () instead. Converts string to a num. Example stringtopchar (str string) Deprecated, use apchar() Description This command is deprecated. Use apchar() instead. This command returns the string as a pointer to a C++ character. This is used to convert variables of type string to type char* for some C++ commands which only take char*'s. It is not needed in Flexscript. Example setname(current,stringtopchar(\"ThisObjectName\")); This sets the name of the object referenced by current to \"ThisObjectName\". The stringtopchar() command may not be mandatory here, but it is legal. strquote (str string) Deprecated, use \\\" Description This command is deprecated. Use \\\" instead to include quotation marks within a string. Example strquote(\"hello\") sub (num value1, num value2) Deprecated, use the - operator Description This command is deprecated. Use the - operator instead. operator instead. of value1 and value2. This returns the result of the arithmetic expression value1-value2. Example double operator instead. = sub(10,4); swaptablecols (str/num/node table, num column, num column2) Deprecated, use Table.swapCols() Description This command is deprecated. Use Table . swapCols (). instead. Swaps two columns in a table. Example swaptablerows (str/num/node table, num row, num row2) Deprecated, use Table.swapRows() Description This command is deprecated. Use Table . swapRows (). instead. Swaps two rows in a table. Example switch_hidebase (obj object[, num off/on]) Deprecated, do not use Description This command is deprecated. Do not use. Get or set the \"Show 2D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. The 2D shape (base) of an object is visible in the Planar view window. Note that view windows also have an attribute named hideallbases that controls the display of 2D shapes (bases) for ALL objects in their view. Example switch_hidebase(so(),1) tan (num angle) Deprecated, use Math.tan() Description This command is deprecated. Use Math . tan () instead. Gets the tan of an angle in radians. Example time () Deprecated, use the Model class Description This command is deprecated. Use Model . time instead. Returns the current simulation time. Example item.TimeIn = time(); This sets the label called \"TimeIn\" on the object referenced by item to the current simulation clock time. trackedvariable (str name) Deprecated, use Tracked Variable class Description This command is deprecated. Use the TrackedVariable class instead. Example transfernode (node movenode, node container) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up to set the node's parent (container). This command moves movenode into the container node. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernode(current.labels[\"inactivequeue\"].first, current.labels[\"activequeue\"]); travelto (obj object, obj spline, num x, num y, num z, num vmax, num acc, num dec) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Calculate current travel parameters for the object. A travel path will be calculated. Once set, the object's position will be calculated based on the travel path as defined by this command. This function returns the time of travel end. This function can be used in conjunction with a spline to create curved travel paths. Example travelto(traveler,NULL,100,100,0,5,1,6) traveltoupdate (obj object [, obj spline]) Deprecated, use kinematics Description This command is deprecated. Use kinematics instead. Update the object's position based on it's current travel parameters. Explicitly set an object's position based on the time and travel path parameters as calculated from the travelto() command on object, using spline as the path geometry if desired. Example traveltoupdate(current) Updates the current object's position based on the travel parameters set earlier by the traveto() command. This command is usually executed from the Custom Draw Code field. trunc (num value) Deprecated, use Math.trunc() Description This command is deprecated. Use Math . trunc () instead. Truncation of value. Example undos (num off/on) Description This command is deprecated. This command is currently deprecated because a faster leaner implementation of the undo functionality has been developed that does not use this command. This command is used to turn on (1) and off (0) the automatic saving of model copies each time there is a mouse click or key press. Use the setundos command, to specify the maximum number of model copies that will be remembered for undoing. To function correctly, this command requires first creating a node in the main tree named undo and giving it number data. Example undos(1); up (obj object) Deprecated, use treenode.up Description This command is deprecated. Use treenode . up instead. Reference a node's parent node. Example updateanimation (obj object [, num updatetime, num animationnr]) Deprecated, use Animation class Description This command is deprecated. Use the Animation class instead. Updates an animation on an object. Example updateanimation(current); updatetoolsmenu () Deprecated, use the Toolbox Description This command is deprecated, use the Toolbox. Updates the tools menu to reflect any additions or deletions to the tools. Example updatetoolsmenu() userfunction_n (obj object, num index [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified rank index. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,4,1,2,3) Executes the code associated with a node ranked 4th in the userfunctions group of the current object. userfunction_s (obj object, str name [, num param_a,...]) Deprecated, use nodefunction() Description This command is deprecated. Use nodefunction() instead, because it will work on any node. Executes code associated with a node found in the object's userfunctions group having the specified name. Use param() within the called function node to retrieve the arguments passed into the function. Example userfunction_s(current,\"myfunc\",1,2,3) Executes the code associated with a node named \"myfunc\" in the userfunctions group of the current object. var (obj object, num index) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by index. Example var(so(),1) var_s (obj object, str name) Deprecated, use getvarnode() Description This command is deprecated. Use getvarnode() instead. Get the node of an object in 'variables' by name. Example var_s(current,\"myatt\") vectorprojectx (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojecty (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example vectorprojectz (obj projectfrom, num fromx, num fromy, num fromz, obj projectonto) Deprecated, use Vec3.project() Description This command is deprecated. Use Vec3 . project () instead. Example xcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation (). Gets the x location of the rotational center of the object within its container. Example xloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation (). Gets the x location of an object. Example xrot (obj object) Deprecated, use Object.rotation or Object.setRotation() Description This command is deprecated. Use Object . rotation or Object . setRotation () instead. Gets the x rotation of an object (rotation about the x-axis). Example xsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the x size of an object. Example ycenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the y location of the rotational center of the object within its container. Example yloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the y location of an object. Example yrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the y rotation of an object (rotation about the y-axis). Example ysize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the y size of an object. Example zcenter (obj object) Deprecated, use Object.getLocation() Description This command is deprecated. Use Object . getLocation () instead. Gets the z location of the rotational center of the object within its container. Example zloc (obj object) Deprecated, use Object.location or Object.getLocation() Description This command is deprecated. Use Object . location or Object . getLocation () instead. Gets the z location of an object. Example zrot (obj object) Deprecated, use Object.rotation Description This command is deprecated. Use Object . rotation instead. Gets the z rotation of an object (rotation about the z-axis). Example zsize (obj object) Deprecated, use Object.size Description This command is deprecated. Use Object . size instead. Gets the z size of an object. Example Development High-level development commands not typically intended for end users. addcommand (obj codenode, str commandname, str description, str parameters, str example [, str cppprefix, str shortdescription]) Description For developer use. Adds a Flexscript command to the current list of available commands. The new command is available until the next compile. The Tools | User Commands menu is for end-users to create their own commands. Example addcommand(...) backupfile (str filepath) Description For developer use. Backs up the file by appending a ! onto the specified file's name. Note that this doesn't copy the file. You would do this before an overwrite of a file. Example backupfile(modeldir() + \"mydocument.htm\"); buildall () Description For developer use. This command builds Flexscript trees for all of the nodes in the tree that are designated as Flexscript nodes. A Flexscript node must have a Flexscript tree made before it can run. This option is available in the main menu under Build -> Build All Flexscript. This must be done before running a model with Flexscript written anywhere in it. It should also be done after making any changes to GUIs. Example buildall(); This builds Flexscript trees for all Flexscript nodes in the tree. buildnodeflexscript (node codenode) Description For developer use. This command builds Flexscript trees for the node specified as node if it is designated as a Flexscript node. A Flexscript node must have a Flexscript tree made before it can run. Example buildnodeflexscript(Table(\"mytable\").cell(1,2)); This builds a Flexscript tree for the node at row 1 column 2 of the GlobalTable named \"mytable\", if it is a Flexscript node. changedisplay (num width, num height, num depth, num fullscreen, num test) Change resolution Description Change resolution Example changedisplay(1024,768,0,0,0) cleannodeflexscript (node startnode) Description For developer use. This command recursively deletes Flexscript trees starting at the node specified. Example cleannodeflexscript(model()); This cleans all the Flexscript nodes in the model. cmdcompile () Description For developer use. Compile the project. Example cmdcompile() cmddelete (node thenode) Description For developer use. Use destroyobject(). Delete thenode. Example cmddelete(model().subnodes[4])) cmdexit () Description For developer use. Closes FlexSim. Example cmdexit() cmdloadbyextension (str filename, num silent) Description For developer use. Load a file by name and extension. Recognizes: Project (fsp), Session (fss), Model (fsm), View Layout (fsv). If silent is 0, the user will be asked to confirm that they are opening the correct file. Example cmdloadbyextension(\"c:/mysession.fss\",0) cmdloadsession (str filename) Description For developer use. Load a session by name. Example cmdloadsession(\"c:/mysession.fss\") cmdloadtree (obj desttree, str filename [, num nobuild]) Description For developer use. Load a tree by file path into desttree. By default, after loading, all flexscript will be built. If nobuild is 1, flexscript will not be built. Set nobuild to 1 if you are executing this command from a script node that is toggled as flexscript, or else your script will not finish properly. Example cmdloadtree(node(\"MAIN:/project/model/2\"),\"c:/mytree.t\")) cmdnew () Description For developer use. Start a new model. This command will clear the contents of the model by deleting all objects in the model. Example cmdnew() cmdopen () Description For developer use. Open a new model. This command will cause an Open Model Dialog box to appear from which a model file can be selected for opening. Example cmdopen() cmdsaveas () Description For developer use. Save the model. This command will cause an SaveAs Model Dialog box to appear from which a model file name can be specified for saving. Example cmdsaveas() cmdsavesession (str filename) Description For developer use. Save a session by name. Example cmdsavesession(\"c:/mysession.fss\") cmdsavetree (obj tree, str filename) Save a Tree by name Description Save a Tree by name Example cmdsavetree(node(\"MAIN:/project/library/1\"),\"c:\\\\mytree.t\")) consoleexecutefs (HWND input, HWND output) Description For developer use. Execute the console code as Flexscript. Example copyattributes (obj destination, obj source, num mask) Description For developer use. Copy the attributes from one object to another. Use mask parameter to enable specific groups (from least significant): ATTCOPY_ALL ATTCOPY_SPATIAL ATTCOPY_OFFSETS ATTCOPY_VISUAL ATTCOPY_MEDIA ATTCOPY_LABELS ATTCOPY_VARIABLES ATTCOPY_DESCRIPTIVE ATTCOPY_TABLES Use the OR operator (|) to combine these values into a single value for the mask parameter. Example copyattributes(library().subnodes[1],model().subnodes[1],ATTCOPY_SPATIAL | ATTCOPY_VISUAL) copycolor (obj highlightedobj) Description For developer use. Copies the color of the highlighted object to all of the selected objects Example copycolor(current) copylabel (obj highlightedobject, str/obj labelnamenode) Description For developer use. Copies the label with the name specified by parameter 2 or stored on the string data of the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copylabel(selectedobject(ownerview(c)), c.find(\">labelname\")) copylabels (obj highlightedobj[, num mode]) Description For developer use. Copies all labels from the parameter 1 object to all selected objects in the model. By default it clears out all existing labels and replaces them with the labels on the parameter 1 object. If mode is 1, existing labels will be overwritten by any incoming labels with the same name, but will otherwise be left alone. If mode is 2, only labels that the selected objects do not already have will be copied. Example copylabels(selectedobject(ownerview(c)), c.find(\">labelname\")) copyvariable (obj fromobject, obj variablenamenode) Description For developer use. Copies the variable with the name held by the node in parameter 2 from the parameter 1 object to all selected objects in the model. Example copyvariable(selectedobject(ownerview(c)), c.find(\">variablename\")) copyvariables (obj fromobject) Description For developer use. Copies all variables from the parameter 1 object to all selected objects in the model. Example copyvariables(selectedobject(ownerview(c))) copyvisuals (obj highlightedobj [, num copyshapefactorsalso]) Description For developer use. Copies all visuals from the parameter 1 object to all selected objects in the model. Example copyvisuals(selectedobject(ownerview(c)),1) daemonstate (num thing) Description For developer use. Returns the stats of: 1 - clock 2 - flythrough 3 - ticker Example daemonstate(1) documentusercommands () Description For developer use. Accesses the current model's command documenation and updates a file called usercommands.xml so that the user commands are included in the command documentation Example documentusercommands(); excelupdatepreferences () SYSTEM USE ONLY Description SYSTEM USE ONLY - used to update global variables to match preferences. Called in startupRT.txt and in OnSelect of Excel Preferences GUI. Example excelupdatepreferences() fgldebuglevel (num level [0-3]) Description For developer use. Set the OpenGL debug level. The higher the number, the more scrutiny is put on the system, and the more reporting is done. 0 is none, 3 is maximum. Example fgldebuglevel(3) fileisreadonly (str filename) Description For developer use (Dynamo). Looks for the string \"READONLY\" in the PROPERTY_COMMENTS of the specified file. Example fileisreadonly(pdir() + \"\\\\flexsim.exe\") fillwithatts (obj object, num attgroup) Description For developer use. Fill an object with attribute from an attribute group. Example fillwithatts(so(),1) fscheckall (node startingnode) Description For developer use. This command checks for errors in all flexscript nodes under and including the specified startingnode and outputs the results to the compiler console if it finds atleast one error. Example fscheckall(main()); function_n (obj object, num index [, num param_a,...]) Description For developer use. Executes code associated with a node found in the object's eventfunctions group having the specified event code. The event code is not the rank of the node in the eventfunctions group, but it corresponds to one of the following pre-defined FlexSim event : OnReset 1 OnMessage 2 OnEvent 3 OnDraw 4 OnInopen 5 OnOutopen 6 OnReceive 7 OnSend 8 OnEntering 9 OnExiting 10 OnCompile 11 OnCreate 12 OnDestroy 13 OnLoad 14 OnCollision 15 OnClick 16 OnRunend 17 OnRunstart 18 OnInterrupted 19 OnCaptured 20 OnListen 21 OnPredraw 22 OnDrawplanar 23 OnPredrawplanar 24 OnPreListen 25 Example function_n(current,1,1,2,3) Executes the OnReset event function defined on the current object. function_s (obj object, str name [, num param_a,...]) Description For developer use. Executes code associated with the node found in the object's eventfunctions group having the specified name. For a list of the pre-defined system level events in FlexSim refer to function_n() command documentation. Example function_s(current,\"OnReset\",1,2,3) Executes the OnReset event function defined on the current object. getapplicationtitle () Description For developer use. Returns the current application's title as a string. Example msg(getapplicationtitle(),\"Hello world.\"); getnextparametersobject (obj startobject, str guifocus, num doguifocusclass, num searchforward) Description For developer use. Used in parameters window to access the next object when the \"Next\" button on the parameters window is pressed. Example Refer to object parameters properties windows in the view tree getproperty (str filename, num property) Description For developer use. Gets the value for the specified property in the specified file. Example getproperty(modeldir() + \"MyModel.fsm\",1); gettreedrawposition (node destnode, node roottree) Description For developer use. Example groupconnectfrom (obj object, str character) Description For developer use. Connects the object passed in as param(1) to every selected object in the model using the letter passed in as param(2). Typically used in GUIs. Example groupconnectfrom(selectedobject(ownerview(c)),\"A\"); groupconnectto (obj object, str character) Description For developer use. Connects every selected object in the model to the object passed in as param(1) using the letter passed in as param(2). Typically used in GUIs. Example groupconnectto(selectedobject(ownerview(c)),\"A\"); groupcopyconnections (obj object) Description For developer use. Copies the connections on the object passed in as param(1) onto every selected object in the model. Typically used in GUIs Example groupcopyconnections(selectedobject(ownerview(c))); help () Description For developer use. Display the help system window. Example help() howmanyattributes () Description For developer use. Returns the number of attributes. Example howmanyattributes() howmanycommands () Description For developer use. Returns the number of commands. Example howmanycommands() license () Gets the current license type Description Get the current license type Example licenseactivation (num operation[, str buffer, var p1, node callback]) Description For developer use. Do various licensing operations. Example licenseactivation(LA_SET_ACTIVATION_SERVER_PARAMS,\"@localhost\",0); maintenance (num command[, num state, str strparam]) Description For developer use. Set a maintenance switch. The first parameter designates the operation. The second parameter designates a state to set it to. Maintenance switches: 0. print this list 1. deadlinks 2. atttrbute bind method (0=names, 1=indices, 2=bootstrap) 3. numberprecision 4. display binding report 5. usercollisions 6. post-onsend 7. loadsavemode 8. disablefscheck 9. disablefspreprocess 10. splinetension 11. streamalizer 12. immediately load extended docs 13. save reps at experiment end 14. suppress object library compile 15. suppress global compile 16. set runtime info 17. get runtime info 18. bind c++ functions 19. autorebind c++ functions onoff 20. get presentation mode 21. refresh main menu 22. is optquest enabled 23. flypaths in seconds units 24. chached ports on/off 25. bind on reset on/off 26. set category name (user command group is 22, other 23, 24+ is available) 27. object sizermode 0. default 1. 3-axis 28. show hidden nodes in tree 29. hide 3d cursor 30. supress simclock redraw 31. use parser two 32. grid draw settings: bitwise field: 0x1-auto expand grid, 0x2-show grid axes, 0x4-show grid origin 1000. DDE Example maintenance(0) modeleditmode (num/str mode) Description For developer use. Sets the current model edit mode. You can query the current mode with -1. Example modeleditmode(\"AConnect\"); postclosewindowmessage (obj view) Posts a Windows Message to close the window Description Posts a message onto the Windows message queue to close the window. This allows you to finish any scripting code before the window is actually closed. Example postclosewindowmessage(ownerview(c)); postmovewindowupdate (obj view) Description For developer use. Do not use. Example postwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API PostMessage() command, posting a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example postwindowmessage(windowfromnode(view), WM_COPY, 0,0); rebindobjectattributes (node thenode) Rebinds object attributes Description Rebinds object attributes for the given node. If you delete or add an attribute to an object, the object's attribute cache will not immediately reflect that change, so you can call rebindobjectattributes to update the object's attribute cache. This is the same as right-clicking on the object and selecting Edit|Rebind Object Attributes. Example rebindobjectattributes(c) recover (num phase) Load recovery files Description Load recovery files. phase: 1 or 2 Example recover(1) refreshcommandlist () Description For developer use. Refreshes the command list. Example refreshcommandlist() refreshglobalvariables () Description For developer use. Refreshes all global variables to their initial values. Example refreshglobalvariables() refreshmodelcommands () Description System command. Do not use. Example sendwindowmessage (HWND window, num msg[, num/str/node wParam, num/str/node lParam]) Description For developer use. This gives direct access to the Windows API SendMessage() command, sending a message to a window. Use windowfromnode() or getviewhwnd() to get access to the window handle. Refer to Windows API documentation for more information. Not that you cannot use a message that uses lParam or wParam as an [out] parameter, or one that you pass in as a pointer to a struct. You should be able to pass strings into lParam or wParam, but again thay cannot be [out] parameters. FlexSim does not include all possible WM_ messages in its flexscript macros, so if you want to use one in flexscript, you will need to find the definition in the windows header files and add the definition to your flexscript code. Example sendwindowmessage(windowfromnode(view), WM_COPY, 0,0); setapplicationtitle (str title) Description For developer use. Sets the current application's title. Example setapplicationtitle(\"Custom Application Title\"); setmessageloopsleep (num interval, num sleeptime) Description For developer use. Set a sleep time for each cycle of the message loop to decrease cpu load. Use carefully because a large value can make FlexSim unresponsive to user input. Every interval milliseconds, FlexSim will pause for a period of sleeptime milliseconds. This command may help certain laptops that tend to overheat due to excessive cpu usage. Example setmessageloopsleep(1) setproperty (str filename, num property, str newvalue) Description For developer use. Sets the value for the specified property in the specified file to the newvalue. Example setproperty(modeldir() + \"MyModel.fsm\",1,\"Custom Title\"); setticker (node thenode[, num tickspersecond]) Description For developer use. Set the ticker script node. If tickspersecond is specified, the code will be executed that many times per second, otherwise the code associated with the node will be executed at each iteration of the windows event loop. The node must be toggled FlexScript or C++. No model events are created in association with the ticker node execution. To turn off ticker execution, use setticker(0). Example setticker(so()) statsenablemask (num mask) Description For developer use. Enable or disable aspects of stats collection. Set a 32 bit enable mask: Sum of flags. Bits: 0 = State; 1 = Flow; 2 = Inside Ports. Example statsenablemask(add(1,2)) stick (num stickno, num command [, HWND/num win, var/num p]) Description For developer use. This command queries the joystick or controller state or sets functionality for a joystick or controller. stickno defines an id for the joystick or gamepad you want to query. This is a number between 0 and 32. Usually you will only have one joystick connected to your computer, so in this case you should use the value 1 as stickno. If you are using a gamepad, you might need to use stickno 2. For Xbox controllers, stickno will be a value between 0 and 3. For VR controllers, stickno will be either 0 or 1. For Oculus touch controllers, stickno 0 is the left hand and stickno 1 is the right hand. Use stickno -1 to get the status, position, or rotation of a connected VR headset. command defines the operation that the command should perform. This should be one of the macros below: STICK_JOY_STATUS - Queries the connectivity of the joystick. If the joystick is connected properly, then this command will return 0. If the return value is non-zero, then there is some error with the joystick's connectivity, and you can view the system console to see what the error is. The following errors apply: MMSYSERR_NODRIVER - The joystick driver is not present. MMSYSERR_INVALPARAM - Invalid joystick ID or hwnd is NULL. JOYERR_NOCANDO - Cannot capture joystick input because a required service (such as a Windows timer) is unavailable. JOYERR_UNPLUGGED - The specified joystick is not connected to the system. JOYERR_PARMS - Invalid joystick ID or hwnd is NULL. STICK_JOY_XPOS - Current X-coordinate of the joystick. This is a number between 0 and 65535. 0 means the joystick is pushed all the way to the left, 65535 means it is pushed all the way to the right, and 32768 is exactly in the center. If you are using a gamepad, then this is the x position of the left side joystick. STICK_JOY_YPOS - Current Y-coordinate of the joystick. Again this is a number between 0 and 65535. 0 is up, 65535 is down. If you are using a gamepad, this is the position of the gamepad's left joystick. STICK_JOY_ZPOS - Current Z-coordinate of the joystick. If you are using a joystick, this will usually be the current setting of the joystick's throttle. Again it is a value between 0 and 65535. If you are using a gamepad, this represents the y position of the right side joystick. STICK_JOY_BUTTONS - Current state of the 32 joystick buttons. This is bitwise integer with each bit representing the state of a given button. For a joystick, the main trigger button is usually represented by the 0x00000001 bit, other buttons on the stick are 0x00000002 and 0x00000004, and buttons on the base of the joystick are then higher order bits. You will need to test these out on your own as each joystick is a little different. STICK_JOY_SET_CAPTURE - This command sets the joystick capture to a FlexSim window that you specify. This command requires the win and p parameters to be passed in. By executing this command, joystick messages will be sent to the OnStick attribute of the view. For example, if you have an ortho view that you would like to listen to joystick events, you would call this command, passing the ortho view's HWND handle (use windowfromnode()), and a polling period. The period specifies a time interval in milliseconds to repeatedly call the OnStick event. If p is 0, then the OnStick event will only be called when the joystick's state changes. If p is greater than 0, then the OnStick event will simply be called at the end of each sample period interval. Example: stick(1,5, windowfromnode(sv()), 200); This will cause the OnStick event to be called every 200 milliseconds. In order for this to work, you need to add an OnStick attribute to the view (you may also need to rebind the view's attributes after adding it: right-click->Edit|Rebind Object Attributes). STICK_JOY_RELEASE_CAPTURE - This command releases the joystick capture for the window that was previously captured with the 5 command. You need to pass in the win parameter as with command 5. STICK_JOY_RPOS - Current position of the rudder or fourth joystick axis of the joystick. For a joystick, this is usually the rotation of the joystick if your joystick can rotate around its z axis. Again it is a number between 0 and 65535. If you are using a gamepad, it is the x position of the right side joystick. STICK_JOY_UPOS - Current fifth axis position of the joystick. STICK_JOY_VPOS - Current sixth axis position of the joystick. STICK_JOY_POV - Current position of the point-of-view control of the joystick. It is a number between 0 and 35900 and represents the number of degrees times 100. For a gamepad, this represents the directional pad on the left of the gamepad. Up is 0, right is 9000, down is 18000, left is 27000. If the directional pad is not pressed, the value will be 65535. If you are using a joystick, there may be a directional thumb controller on the stick itself that you can press up, down, right, or left, and this will get the setting of that controller. STICK_JOY_CURRENT_BUTTON - Current button number that is pressed. STICK_JOY_FLAGS - Flags indicating the valid information returned about the joystick. STICK_XBOX_STATUS - Queries the connectivity of the Xbox controller. If the controller is connected properly, this returns 0. STICK_XBOX_BUTTONS - Bitmask of the device digital buttons. A set bit indicates that the corresponding button is pressed. STICK_XBOX_LEFT_THUMB_X - Left thumbstick x-axis value. Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick. A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right. STICK_XBOX_LEFT_THUMB_Y - Left thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_X - Right thumbstick x-axis value. The value is between -32768 and 32767. STICK_XBOX_RIGHT_THUMB_Y - Right thumbstick y-axis value. The value is between -32768 and 32767. STICK_XBOX_LEFT_TRIGGER - The current value of the left trigger analog control. The value is between 0 and 255. STICK_XBOX_RIGHT_TRIGGER - The current value of the right trigger analog control. The value is between 0 and 255. STICK_VR_STATUS - Returns 1 if an Oculus Rift controller is active. Returns 2 if an HTC Vive controller is active. Returns 0 if the controller is inactive. Returns nullvar if the controller is not attached. STICK_VR_THUMB_X - Thumbstick or trackpad x-axis value between -1 and 1. STICK_VR_THUMB_Y - Thumbstick or trackpad y-axis value between -1 and 1. STICK_VR_INDEX_TRIGGER - Index trigger value between 0 and 1. STICK_VR_GRIP_TRIGGER - Grip trigger value between 0 and 1. On HTC Vive, grip button is pressed. STICK_VR_BUTTON_1 - The first button is pressed. A or X on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_2 - The second button is pressed. B or Y on Oculus Rift. Unused on HTC Vive. STICK_VR_BUTTON_3 - The third button is pressed. Enter or Home on Oculus Rift. Menu on HTC Vive. STICK_VR_BUTTON_4 - The fourth button is pressed. Thumbstick on Oculus Rift. Trackpad on HTC Vive. STICK_VR_TOUCH_BUTTON_1 - The first button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_2 - The second button is touched. Unused on HTC Vive. STICK_VR_TOUCH_BUTTON_3 - The third button is touched. Unused on Oculus Rift. STICK_VR_TOUCH_BUTTON_4 - The fourth button is touched. STICK_VR_TOUCH_THUMB_REST - The thumb rest sensor is touched on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_INDEX_TRIGGER - The index trigger sensor is touched. STICK_VR_TOUCH_POINTING - The hand gesture is pointing on Oculus Rift. Unused on HTC Vive. STICK_VR_TOUCH_THUMB_UP - The hand gesture is thumbs-up on Oculus Rift. Unused on HTC Vive. STICK_VR_HAND_POSITION - The controller position in VR space. STICK_VR_HAND_ROTATION - The controller rotation in VR rotation coordinates. STICK_VR_HAND_WORLD_POSITION - The controller position in FlexSim world space. STICK_VR_HAND_WORLD_ROTATION - The controller rotation in FlexSim rotation coordinates. STICK_VR_HAND_OFFSET_POSITION - The controller's position in FlexSim world space, but with an offset applied based on the controller's rotation. Pass an array as the offset vector in the p parameter. You can use this option to get a point relative to the controller, such as a finger position or where the controller is pointing. STICK_VR_TARGET_FLOOR_POSITION - The target position on the floor that the controller is pointing towards. Pass a value in the p parameter for the maximum distance away from the controller. STICK_VR_SET_VIBRATION - Causes the controller to vibrate. On Oculus Rift, pass an array for the p parameter where the first element is a value between 0 and 1 for the frequency and the second element is a value between 0 and 1 for the amplitude. On HTC Vive, pass a duration in microseconds for the p parameter. STICK_VR_SUBMIT_VIBRATION - Causes the controller to subtly vibrate. On original Oculus Touch controllers, pass an array of amplitudes (0 - 255) for the p parameter to be queued up and executed. Unused on HTC Vive or Oculus Rift S controllers. Example stick(1, STICK_JOY_YPOS); This gets the y position of the joystick id 1 suspenddraw (num bitmask) Description For developer use. Bit mask. Disables draw in window types. Bits: 0 - TREE; 1 - PLANAR; 2 - SPATIAL Example suspenddraw(1) switch_variable (obj object, str var[, num off/on]) Description For developer use. Add and set; or remove a dynamic switch variable to/from an object. When set to on, a node called var will be added to the structure of object and have a numerical value of 1 assigned to it. When set to off, a node called var, if present will be removed from the structure of object. Used in model update code. Example switch_variable(so(),\"arrivalmode\",1); toggleallcodestates (node startpoint, num ascpp) Toggles all code nodes under startpoint as either C++ or flexscript Description Traverses the tree starting at start point and toggles all code nodes to either c++ or flexscript. 1 toggles to c++, 0 toggles to flexscript. This will only change nodes that have not been locked to their code state. This is the same as using the menu option Build|Make all code C++ or Build|Make all code flexscript. Example toggleallcodestates(model(), 1); tracemaskevents (num mask) Description For developer use. Set a 32 bit trace mask: Sum of Math.pow(2,N1)+Math.pow(2,N2)... where Nx are the event numbers to be reported in the trace. See View|Trace Debugger... Example tracemaskevents(listsum(Math.pow(2,1),Math.pow(2,2),Math.pow(2,3))) tracemaskobject (obj object) Description For developer use. Set an object to be included in the event reporting in the trace debugger. See View|Trace Debugger... Example tracemaskobject(Model.find(\"Processor3\")) tracemasktime (num start, num end) Description For developer use. Define a start and end time for event reporting in the trace debugger. See View|Trace Debugger... Example tracemasktime(100,200) uselisteners (num mask) Description Enable or disable listening. Example uselisteners(1) Drawing Commands associated with drawing graphics in the planar, orthographic, or perspective views. Draw commands are designed for use in OnDraw events such as the \"Custom Draw Code\" field found in an object's Properties window. bindtexture (num textureid) Description This function is used in an OpenGL call sequence. When OpenGL commands are being used to draw a scene, this command will bind the texture loaded into FlexSim with the index textureid. Once bound, a texture will be used to render any polygons drawn subsequently. Texture mapping is the application (or mapping) of an image (or texture) to the surface of a polygon or other graphics primitive. Example bindtexture(10) Use loaded texture with index number 10 for rendering any subsequent polygons draw3dtext (str text[, num asBitmap]) Draws text in a 3d view Description This command is similar to drawtext(), but can only be used in a 3D view, and its parameter set is stripped down to provide direct access to the text rendering procedure. Whereas drawtext() does some automatic scaling based on the current object, as well as some OpenGL state changes, etc., draw3dtext() calls the text drawing procedure directly, so any positioning, scaling, color settings, etc., should be done with OpenGL commands, i.e. glTranslated(), glScaled(), glColor3d(), etc. Example draw3dtext(current.name); drawbox (num x, num y, num z, num sx, num sy, num sz, num glbegin) Draws a simple box Description Draws a simple box. If glbegin is 1, then it will call glBegin before drawing. This command is a shortcut way to draw an OpenGL type cube that allows more control over lighting, coloring, and texturing than the drawcube() command. Example drawbox(5,0,0, 2,1,3, 1); drawcolumn (num x, num y, num z, num totalsides, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D column Description A very versatile command that can draw anything with multiple sides and a height such as a square, a pentagon, a pyramid, and even a cylinder (if the total number of sides is large). Draws a column with its origin (center of base) positioned at x, y, z. The column is then defined by the number of sides, a base radius, a top radius, and a height. The column can be rotated in degrees about each axis with rx, ry, rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the column from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the column. The location, size and rotation of the column are by default relative to the object it is drawn on. The parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcolumn(0,0,0, 5 ,4,2, 6 ,0,0,0, 175,175,175, .6, 3, 5,1); drawcube (num x, num y, num z, num sx, num sy, num sz, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draws a 3D cube Description Draws a cube with its origin (bottom left corner) positioned at x, y, z. Its length, width, and height is defined by sx, sy, and sz respectively. It can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cube from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times on each face of the cube. The location, size and rotation of the cube are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcube(0,0,0, 5,3,2, 0,0,0, 175,175,175, .6, 3, 1,1); drawcylinder (num x, num y, num z, num baseradius, num topradius, num height, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draws a 3D clyinder Description This command draws a hollow cylinder with its origin (center of base) positioned at x, y, z. The cylinder's dimensions are defined by a base radius, a top radius and a height. Use the drawdisk() command to cap off the ends of the cylinder. The cylinder can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the cylinder from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing around the outside circumference of the cylinder. The location, size and rotation of the cylinder are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawcylinder(0,0,0, 1,1, 5, 0,0,0, 175,175,175, .6,3); drawdisk (num x, num y, num z, num innerradius, num outerradius, num startangle, num sweepangle, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D disk Description Draws a flat planar disk with its origin (center of radius) positioned at x, y, z. The disk's dimensions are defined by an inner radius, an outer radius, a start angle, and a sweep angle. A sweep angle of 360 makes a complete circle. An innerradius greater than 0 will create a disk with a hole in the middle of it. The disk can be rotated in degrees about the x, y, and z axis by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the disk from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be used as texturing across the face of the disk. The location, size and rotation of the disk are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawdisk(0,0,0, .5,2, 90,270, 0,0,0, 175,175,175, 1,3); drawflattext (str text) Description This command can only be used in a 3D view. It draws a texture-mapped text string. This uses the same functionality that draws the names and stats below objects. If scaled correctly, it draws a very crisp, readable text. Use this in conjunction with setdrawnamefunction() to customize the data that is shown in the box below objects. Unlike drawtext(), this command's parameter set is much more stripped down, so you should use gl commands (i.e. fglTranslate(), fglScale(), fglColor(), etc.) to set up the location, size, and render settings before drawing the text. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object drawfont (num font) Specifies the font to be used with drawtext() Description Call before drawtext, to define font to be drawn. After drawtext is called, the font will be reset to default. There are currently 12 font types (numbers 0 through 11). Example drawfont(2) drawimage (obj view, str imagepath, num x, num y, num width, num height, num scaling) Draws an image Description Draws the image at imagepath in the view. The scaling value specifies how the image will be positioned and scaled. NO_SCALE (or 0): Draws the image at location x,y with the width and height being based on the size of the image. SCALE_DOWN: Draws the image centered in the rectangle created by x,y,width,height and scales the image proportionally down to fit if necessary. SCALE_UP_DOWN: Draws the image centered in the rectangle created by x,y,width, height and scales the image proportionally up or down to fit. SCALE_INDEPENDENT: Draws the image at x,y with the size of width and height. Example drawimage(c, \"buttons\\\\visible_eye.png\", 0, 10, 0, 0, 0); drawline (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar line Description This command draws a planar line with a starting point of xloc1, yloc1, zloc1, and an ending point of xloc2, yloc2, zloc2. The color is defined by the red, green, blue color components ranging from 0 to 1. Example fglDisable(GL_LIGHTING); drawline(view, 0, 0, 0, 2, 2, 2, 1, 0, 0); fglEnable(GL_LIGHTING); This example draws a line from point (0,0,0) to point (2,2,2). The line will be red in color. drawobject (obj view, num shapeindex, num textureindex[, num animation, treenode shapedata]) Draws a 3D shape Description Draws a 3d object with the specified shape and texture indices. Example drawtomodelscale(current); drawobject(view,getshapeindex(\"fs3d//texturebox.wrl\"),gettextureindex(\"flexsim.bmp\")); Set the drawing scale to that of the model, then draw the texturebox.wrl shape using flexsim.bmp as a texture. drawpie (obj view, num x, num y, num z, num x2, num y2, num z2, num startangle, num endangle, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a flat pie shape Description Draws a flat pie shape with its origin (center of radius) positioned at the midpoint between [x1,y1,z1] and [x2,y2,z2]. The angles are measured in degrees counterclockwise from the positive x axis. Negative angles are measured clockwise. The pie is filled from the start angle to the endangle counterclockwise. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawpie(view,3,3,0,0,0,0,45,90,0.5,0,0); drawquad (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num x4, num y4, num z4, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar quadrilateral Description This command draws a planar quadrilateral with vertices defined by x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, and z4. The color is defined by the red, green, blue color components ranging from 0 to 1. The resultant shape and lighting is dependent on the order or sequence in which the vertices are defined. If vertices are all in one plane, consider using drawrectangle() command. Example drawquad(view, 0, 0, 1, 0, 0, 0, 2, 2, 2, 4, 5, 6, 1, 0, 0); This example draws a quadrilateral with vertices defined by the following four points: (0,0,0), (1,0,0), (2,2,2), and (4,5,6). The quadrilateral will be red in color. drawrect (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar rectangle Description This command draws a planar rectangle with opposite corners defined by x1, y1, z1, and x2, y2, and z2. Both points must lie in a plane parallel to the xy plane. The color is defined by the red, green, blue color components ranging from 0 to 1. This command can be called in a planar, 3D, graph, or panel view. See also drawquad() Example drawrect(view, 0,0,.5, 1, 1, .5, 1, 0, 0); Draws a red rectangle with opposite corners (0,0,.5) and (1,1,.5). drawrectangle (num x, num y, num z, num length, num width, num rx, num ry, num rz, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex, num textureXrepeat, num textureYrepeat]) Draw a 3D rectangle Description Draws a flat planar rectangle with a user-defined location, length, width, rotation, and color. The drawquad() command must be used to draw a rectangle that is not parallel with the x, y or z plane. An optional opacity parameter will change the rectangle from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be repeated textureXrepeat and textureYrepeat times across the face of the rectangular plane as texturing. The location, size and rotation of the rectangle are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawrectangle(0,0,0, 2,3, 0,0,0, 175,175,175, .6, 1, 2,3); drawshadow (num phase (1,2,3)) In OnDraw: draw shadow volume Description In OnDraw: draw shadow volume Example drawshadow(1); drawsphere (num x, num y, num z, num radius, num red {0-255}, num green {0-255}, num blue {0-255} [, num opacity {0-1}, num textureindex]) Draw a 3D sphere Description Draws a hollow sphere with its origin (center of sphere) positioned at x, y, z. The sphere's dimensions are defined by a single radius. The color is defined by the red, green, blue color components ranging from 0 to 255. An optional opacity parameter will change the sphere from clear (0) to opaque (1). If a valid textureindex number is entered, then the associated image will be wrapped over the surface of the sphere as a texture. The location, size and rotation of the sphere are by default relative to the object it is drawn on. The optional parameters shown in brackets [ ] must ALL be used or ALL not used. The textureindex is a numeric value that can be learned using the gettextureindex() command or through the Tools | Media Files menu. Example drawsphere(0,0,0,5,175,175,175,1,3); drawtext (obj view, str text, num x, num y, num z [, num width, num height, num thickness, num rx, num ry, num rz, num red {0-1}, num green {0-1}, num blue {0-1} , num opacity {0-1}, num flags]) Draws text Description This command draws text at a location defined by x, y, and z. The width parameter is not used. The text width and height is determined by the height parameter. The rotation is defined by rx, ry, and rz. The color is defined by the red, green, blue color components ranging from 0 to 1. You can define the flags parameter as follows: 0x1 = bold, 0x2 = italic, 0x4 = underline. The flags parameter only applies to non-3d views The opacity if used should be a number ranging between 0 (full transparency) to 1 (opaque). Call drawfont() command to change font type before calling drawtext() if desired. This command can be used in a planar, 3D, graph or panel view. Example drawtext(view, \"Hello\", 0,0,0, 0,.3,.1, 90,0,0, 1,0,0, .8); This example draws \"Hello\" at location (0,0,0) with size 0.3, thickness 0.1, rotation (90,0,0), an rgb color (1,0,0), and opacity of 0.8. drawtomodelscale (obj object) Gets the current drawing scale of the model Description Returns the current drawing scale to that of the model after a previous call of drawtoobjectscale(). This is equivalent to the following OpenGL function: glScalef(1/object.location.x,1/object.location.y,1/object.location.z); Example drawtomodelscale(current); drawtoobjectscale (obj object) Scale subsequent draw commands to the size of the object Description This command causes all subsequent draw commands to be scaled according to the size of the object. This is equivalent to the following OpenGL function: glScalef(object.location.x,object.location.y,object.location.z); By default, the scale is originally set to that of the object. Example drawtoobjectscale(current); drawtriangle (obj view, num x1, num y1, num z1, num x2, num y2, num z2, num x3, num y3, num z3, num red {0-1}, num green {0-1}, num blue {0-1}) Draws a planar triangle Description This command draws a planar triangle with vertices defined by xloc1, yloc1, zloc1, xloc2, yloc2, zloc2, xloc3, yloc3, and zloc3. The color is defined by the red, green, blue color components ranging from 0 to 1. Example drawtriangle(view, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0); This example draws a triangle with vertices defined by the following three points: (0,0,0), (1,0,0), and (0,1,0). The triangle will be red in color. fglColor (num red {0-1}, num green {0-1}, num blue {0-1}[, num alpha {0-1}]) Sets the color for drawing a mesh in OpenGL Description Sets the color for drawing a mesh in OpenGL. The rgb color components are between 0 and 1. The optional alpha component is between 0 (transparent) and 1 (opaque). Example fglDisable (num setting) Disables an OpenGL draw setting Description Disables an OpenGL draw setting. See glEnable() for list of draw settings. You can refer to standard OpenGL documentation for more information if needed. Example fglDisable(GL_LIGHTING); fglEnable (num setting) Enables an OpenGL draw setting Description Enables an OpenGL draw setting. Note that for optimization purposes, FlexSim's drawing engine does not automatically restore the enabled/disabled state of a given setting, so it is up to you, if you use this command, to restore the setting to its default after you have executed your drawing functionality. Failing to restore a setting to its default will result in weird rendering of other objects in the model. Common OpenGL draw settings: GL_LIGHTING Turns lighting on and off. Turn it on if polygons do not change color when they turn away from the viewer. Default: enabled. GL_CULL_FACE Turns back-face culling on and off Turn it off if you want both sides (front and back) of all polygons drawn. Default: disabled. GL_TEXTURE_2D Turns texturing on and off. Turn it off if a texture is being displayed and you don't want it there. Default: enabled. You can refer to standard OpenGL documentation on glEnable() for more information if needed. Example fglEnable(GL_LIGHTING); fglinfo (num operation, obj view) Gets information about a 3D view's draw state Description This command gives you access to various information about the draw state of a 3d view. Logic/data that is performed/returned is based on the operation parameter, as follows: FGL_INFO_SHADERTYPE - returns what part of the draw pass is happening, such as rendering the shadow map (SHADERTYPE_RENDER_SHADOWS), blurring the shadow map (SHADERTYPE_BLUR), or rendering the objects to the screen (SHADERTYPE_DEFAULT). Example /*do not draw this object when rendering the shadow map*/ if (fglinfo(FGL_INFO_SHADERTYPE, view) == SHADERTYPE_RENDER_SHADOWS) return 0; fglLoadIdentity () Description Loads the identity matrix into the current OpenGL drawing context, or in other words, replaces the current matrix with the identity matrix. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Loading the identity matrix is simply a way of resetting things to the origin, so there's no rotation, translation or scaling. The default position is (0,0,0) and the default orientation is looking down the negative z-axis. You can refer to standard OpenGL documentation for more information if needed. Example fglLoadIdentity() fglMatrixMode (num mode) Specifies which matrix stack is the target for subsequent matrix operations Description Specifies which matrix stack is the target for subsequent matrix operations. A matrix is just a way to specify a whole bunch of n-dimensional transformations in one convenient package. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW which is used when moving objects around the scene. You can refer to standard OpenGL documentation for more information if needed. Example fglMatrixMode(GL_MODELVIEW); fglNormal (num x, num y, num z) Sets the normal vector for shading subsequent vertices in OpenGL Description Sets the normal vector for shading subsequent vertices in OpenGL drawing. Polygons will be flat shaded unless normals are applied to them. A normal is a vector that is perpendicular to the polygon and points in the direction the polygon is facing. Remember polygons with vertices defined in a counter-clockwise winding points forward per the \"right-hand rule\". Polygon shading is based on the angle between the normals and the light source. Normals are applied to each vertex in the same way colors are, but is usually just defined at the start of each polygon definition. When a polygon's normals point directly at the light source, they are brightly shaded; and are darker shaded when the angles are skewed. You can refer to standard OpenGL documentation for more information if needed. Example fglNormal(1,0,0); fglPopMatrix () Pops the current OpenGL drawing context from the matrix stack Description Pops the current OpenGL drawing context from the matrix stack, or in other words returns to the space on the top of the stack. The OpenGL stack stores the space matrix in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPopMatrix(); fglPushMatrix () Pushes the current OpenGL drawing context onto the matrix stack Description Pushes the current OpenGL drawing context onto the matrix stack which can later be retrieved with glPopMatrix(). If you are drawing more than one object and you don't want the glTranslated, glRotated or glScaled to affect the next objects, you should use glPushMatrix and glPopMatrix. The OpenGL stack stores the space matrices in a LIFO fashion. You can refer to standard OpenGL documentation for more information if needed. Example fglPushMatrix(); fglRotate (num degrees, num x, num y, num z) Rotates the current OpenGL drawing context by degrees around axis x,y,z Description Rotates the current OpenGL drawing context by degrees around an axis defined by the vertex (x,y,z). Anything drawn after a rotation is based on the new rotation of the axes. See glVertex3d for definition of the OpenGL xyz coordinate system. You can refer to standard OpenGL documentation for more information if needed. Example fglRotate(90,1,0,0); fglScale (num x, num y, num z) Scales the current OpenGL drawing context by x,y,z Description Scales the current OpenGL drawing context by the given scale parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after this command is based on the change in scale of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglScale(2,4,1); fglTranslate (num x, num y, num z) Translates the current OpenGL drawing context by x,y,z Description Translates the current OpenGL drawing context by the given translation parameters. See glVertex3d for definition of the OpenGL xyz coordinate system. Anything drawn after a translation is based on the new location of the axes. You can refer to standard OpenGL documentation for more information if needed. Example fglTranslate(15, 4, 0); getdrawtextmetric (str text, num fontsize, num metric[, num a]) Description Returns information about the text. If metric is 1, it will return the width of the text. If metric is 2, it will return the height of the text. If metric is 3, it will return the max fitting length of the text using 'a' as the max extent. Example getdrawtextmetric(\"Hello\",12,1,0); glIsEnabled (num setting) Returns 1 if the OpenGL setting is enabled, 0 otherwise Description Returns 1 if the OpenGL setting is enabled, 0 otherwise. See fglEnable() for list of draw settings. Note that this is an extremely slow operation and is discouraged. You can refer to standard OpenGL documentation for more information if needed. Example glIsEnabled(GL_LIGHTING) glLineWidth (num linewidth) Specifies the line width for subsequent lines draw in OpenGL Description Specifies the line width for subsequent lines drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glLineWidth(3); glPointSize (num pointsize) Specifies the point size in pixels for subsequent vertices drawn in OpenGL Description Specifies the point size in pixels for subsequent vertices drawn in OpenGL. You can refer to standard OpenGL documentation for more information if needed. Example glPointSize(5); mesh (node meshnode, int pervertexattribs, int flags) Creates an empty mesh and assigns it to meshnode Description Creates an empty mesh and assigns it to meshnode. The pervertexattribs takes a bit-wise ORed combination of the following attributes: MESH_POSITION (Added by default) MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Flags can be any of the following: MESH_STATIC_DRAW MESH_DYNAMIC_DRAW MESH_INDEXED Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE, MESH_STATIC_DRAW) meshaddindex (node meshnode, int index) Adds an indexed vertex to a mesh Description Adds an indexed vertex to the mesh associated with meshnode. This command is ignored if the mesh does not have a MESH_INDEXED flag. Example int newindex = meshaddindex(node(\"/mesh\",model()), 4) meshaddvertex (node meshnode) Adds a vertex to a mesh Description Adds a vertex to the mesh associated with meshnode. Returns the index of the added vertex. Example meshaddvertex(Model.find(\"mesh\")) meshdraw (node meshnode, int drawmode, int offset, int count [, int stride]) Draws a mesh Description Draws the mesh associated with meshnode. The value for drawmode can be any of the following: GL_POINTS GL_LINES GL_LINE_LOOP GL_TRIANGLES GL_TRIANGLE_STRIP GL_TRIANGLE_FAN Offset specifies which vertex index to begin at. Count specifies how many vertexes to set the drawmode. Stride specifies how many vertex indexes to skip between. For an indexed meshed, stride is ignored. Example meshdraw(node(\"/mesh\",model()), GLTRIANGLES, 0, 3, 0) meshinfo (node meshnode, int type[,int index, int param]) Gets the specified information from a mesh Description Gets the specified information from the mesh associated with meshnode. Index is the index of the requested vertex (base 0). Type is specified as one of the following for the mesh (index and param ignored): MESH_PER_VERTEX_ATTRIBS MESH_PER_MESH_ATTRIBS MESH_FLAGS MESH_NR_VERTS MESH_GET_INDEX - Returns the vertex index for the given index (only valid with MESH_INDEXED flag) The following are vertex specific types: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 If specifying a vertex, the following are valid for param: MESH_COLOR_RED MESH_COLOR_GREEN MESH_COLOR_BLUE MESH_COLOR_ALPHA MESH_POS_X MESH_POS_Y MESH_POS_Z MESH_TEX_S MESH_TEX_T Example double xposition = meshinfo(Model.find(\"mesh\"), MESH_POSITION, 6, MESH_POS_X) meshsetattrib (node meshnode, int attribid, double param1 [, double param2, double param3, double param4]) Adds/sets the value of attribid to the vertindex of a mesh Description Sets the value of attribid to be applied to the entire mesh associated with meshnode. The following attributes can be used as the attribid: MESH_NORMAL MESH_AMBIENT MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 MESH_SPECULAR MESH_SHININESS MESH_EMISSIVE Example meshsetattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) meshsetvertexattrib (node meshnode, int vertindex, int attribid, double param1 [, double param2, double param3, double param4]) Sets the value of attribid at the vertindex of a mesh Description Sets the value of attribid at the vertindex of the mesh associated with meshnode. The following attributes can be used as the attribid: MESH_POSITION MESH_TEX_COORD2 MESH_NORMAL MESH_DIFFUSE MESH_DIFFUSE4 MESH_AMBIENT_AND_DIFFUSE MESH_AMBIENT_AND_DIFFUSE4 Note: The attribid must be defined previously when creating the mesh. Example mesh(Model.find(\"mesh\"), MESH_NORMAL | MESH_DIFFUSE4, MESH_STATIC_DRAW) meshsetvertexattrib(Model.find(\"mesh\"), 1, MESH_DIFFUSE4, 1, 0, 0, 1) setdrawnamefunction (num boxwidth, num boxheight, node nodefunction[, num pval1, num pval2, num pval3]) Description This command gives direct access to the functionality that displays information in boxes below objects in the model. FlexSim's 3D display mechanism works by performing multiple drawing passes over the objects in the model. First, it gathers and caches data for what needs to be drawn. Then it goes through and draws the object shapes and calls the objects' custom draw functionality. Finally it draws any overlays such as connectors, information boxes, etc. The setdrawnamefunction() command, if called as part of an object's custom draw functionality, i.e. its OnDraw event or its Custom Draw Code trigger, will cause a callback to be fired when the drawing sequence gets to the information box step for that object. To do this, call the command and specify the size that you want the box to be drawn, and pass as the nodefunction parameter a reference to a node holding the code you want to fire to draw the box information, as well as up to 3 parameters that will be passed as param(1), param(2), and param(3) into that nodefunction. Then implement the nodefunction code to draw any information you want, using the drawflattext() command, or any other OpenGL drawing commands. Note that when the nodefunction is call, the OpenGL model view matrix will be set so that the (0,0,0) point is at the top-center of the display box, and one length unit represents one pixel on the screen. Example Add the following code to an object's Custom Draw Code trigger: if(!param(2)) { setdrawnamefunction(80, 15, c, param(1), 1); } else { fglTranslate(-40, -15, 0); drawflattext(\"Hello World\"); } This will draw the text Hello World in the display box below the object spacebase ([num view/object]) Description Set the OpenGL matrix to the scaled space of the current object/view. If the parameter is 0, then the object's base space matrix will be loaded. If the parameter is 1, then the view's space will be loaded, meaning any subsequent draw commands will face the viewer directly and not change scale. This command can only be used in OnDraw event and Custom Draw Code trigger. See drawtoobjectscale() when scaling the OpenGL space by the object's size. Example spacebase(0); spacerotate (num x, num y, num z) Description Apply rotation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glRotatef( z, 0.0f, 1.0f, 0.0f); glRotatef(-y, 0.0f, 0.0f, 1.0f); glRotatef( x, 1.0f, 0.0f, 0.0f); Example spacerotate(90, 0, 0) This rotates the current coordinate space by 90 degrees around the FlexSim x-axis. Subsequent draw commands will be performed from this new rotation. spacescale (num x, num y, num z) Description Apply scale transform to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glScalef(x,z,y); Example spacescale(2, 1, 1) This scales the current coordinate space by 2 times in the FlexSim x direction. Subsequent draw commands will be performed from this new scaling. spacetranslate (num x, num y, num z) Description Apply translation to the OpenGL space. This corresponds to the following OpenGL code (keep in mind that OpenGL coordinate systems have y pointing in the direction of FlexSim's z axis, and have z pointing in the direction of FlexSim's -y axis): glTranslatef(x,z,-y); Example spacetranslate(current.size.x, -current.size.y, 0) This translates to the bottom left corner of the object assuming no translation has previously been applied. Subsequent draw commands will be performed from this new location. textureaxis_s (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture S axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_s(1,0,0,0) textureaxis_t (num x, num y, num z, num a) Description Once we have a texture bound in an OpenGL call sequence, we can specify the texture coordinates. OpenGL uses the concept of texture coordinates for mapping. This function is used to set the texture T axis. Once set, the texture axes will be used to render any polygons drawn subsequently. Example textureaxis_t(0,0,1,0) Events Commands for creating, searching and manipulating events. addtoeventtypelegend (str name, num parameter, num value, str legendname) Description The eventtype legend allows you to associate a string with a given value for a given parameter in that eventtype. Passing a negative number for 'parameter' allows you to add a preceeding string to explain the parameter. If the 'parameter' is negative and the 'value' is -1, then it assumes the number is a pointer to a node and will display the node's path as a string. Example addtoeventtypelegend(index,-1,-1,\"resource: \"); // for p1, display the text \"resource: \" and display the path for the object addtoeventtypelegend(index,-2,0,\"covermode: \"); // for p2, display the text \"covermode: \" addtoeventtypelegend(index,2,1,\"YellowToGreen\"); // for p2, a value of 1 should display \"YellowToGreen\" instead of the number 1 addtoeventtypelegend(index,2,2,\"RedToGreen\"); // for p2, a value of 2 should display \"RedToGreen\" instead of the number 2 addtoeventtypelegend(index,3,0,\"\"); // for p3, this makes zeroes blank addtoeventtypelegend(index,4,0,\"\"); // for p4, this makes zeroes blank createevent (obj object, num time, num code[, str data, node involved]) Description For developer use. This command creates an event that will occur sometime in the future in the model's run. The event will be created for the object specified by object. It will occur time seconds from the time that this command is called. If an event needs to occur that the same simulation time that it was created at, time should be 0. When the event occurs, the OnTimerEvent event function of the class of object will be called. This function will be passed code, data, and involved. These values can be accessed in OnTimerEvent as eventcode, eventdata, and i. Generally, eventcode is used to determine what type of event is being created or executed. Eventdata is used as a description of the event for the user's benefit. It is generally not important to the execution of OnTimerEvent. Any objects that are involved in the event, such as a flowitem that is entering or exiting, are passed as involved and are referenced in OnTimerEvent as i. There are predefined values for code that the user should use listed below: 1 - EVENT_OPENINPUTS 2 - EVENT_OPENOUTPUTS 3 - EVENT_PROCESSFINISH 4 - EVENT_CREATEPART 5 - EVENT_DESTROYPRODUCT 6 - EVENT_CONVEYEND 7 - EVENT_BEGINLOADTIME 8 - EVENT_BEGINUNLOADTIME 9 - EVENT_ENDLOADTIME 10 - EVENT_ENDUNLOADTIME 11 - EVENT_ENDDELAYTIME 12 - EVENT_BEGINDOWNTIME 13 - EVENT_ENDDOWNTIME 14 - EVENT_ENDWAITTIME 15 - EVENT_MEETBATCHQTY 16 - EVENT_ENDTRAVELTIME 17 - EVENT_ENDSETUP If a user wishes to create their own types of events, they should use values for code that are greater than 100. See also eventcode and eventdata. Example if (current.subnodes.length >= current.mincontent) { createevent(current,5,EVENT_OPENOUTPUTS,\"openoutputs\",involved); } This creates an event that will occur in 5 simulation seconds that will open the output ports of the object specified as current, for the flowitem specified by involved, if the content of current is less than the label called mincontent of the object referenced by current. createtickevent (obj fluidobject) Creates a tick event for fluidobject and all objects assigned to that Ticker Description Creates a Tick event for the Fluid Object that is passed in and all of the other Fluid Objects that are controlled by the same Ticker. This allows the user to cause fluid material to move at times that are not the Ticker's normal tick times. The user can also pass a specific Ticker as the parameter to this command. Example createtickevent(current); delayevents (num value) Description For developer use. Delay all events in the eventlist. The times of all events in the eventlist will be incremented by value. Example delayevents(20) delayeventsofobject (obj object, num value) Description For developer use. Delay events of object. The timed events of object are incremented by value, and the eventlist re-sorted. Value may be positive or negative. Example delayeventsofobject(model().subnodes[2],20) destroyevent (node event) Description For developer use. Destroys a particular event from the event list. Example destroyevent(node(\"MAIN:/1/exec/events\").last) destroyeventsofobject (obj object [, num simtime, num code, str data, node involved]) Destroys events associated with object Description Destroys events associated with the given object. The first parameter, object, is the only required parameter. Other parameters are optional and provide a filter for choosing which events to destroy, as follows: time: If greater than or equal to the time that that the command is called, this parameter will filter events by their time. If the event's time is not equal to the time passed in, then the event will not be destroyed. Pass -1 if you don't want this as a filter. code: If greater than 0, this parameter filters events by their event code. If the event's code is not equal to the code passed in, the event will not be destroyed. data: If not NULL, this parameter filters events by the data string associated with the event. If the event's data string is not equal to the string passed in, the event will not be destroyed. involved: If not NULL, this parameter filters events by their involved node or object. If the event's involved node is not equal to the node passed in, the event will not be destroyed. Example destroyeventsofobject(model().subnodes[2]) destroymessageevents (obj object, num time, obj fromobj[, num param1, num param2, num param3]) Destroys message events associated with object Description Destroys message events associated with the given object. If no message parameters are included, all message events will be destroyed. Example destroymessageevents(current, time(), NULL, 8) eventcode <no parentheses> Description For developer use. This command returns the number value that was passed to the createevent() command as code. It is only used in the OnTimerEvent function of the library objects. It is generally used to identify the type of event that is occurring. This command should not have parentheses when it is called. See also createevent() and eventdata. Example if (eventcode == EVENT_OPENINPUTS) thisobjectdata->openinputs(); This calls a method called openinputs() on the object referenced by thisobjectdata if the value EVENT_OPENINPUTS was passed to the createevent() function. eventdata <no parentheses> Description For developer use. This command returns the string value that was passed to the createevent() command as data. It is only used in the OnTimerEvent function of the library objects. Generally, it is used as a description to the user of the type of event that is occurring. It is not generally used in the execution of the OnTimerEvent function, for speed reasons. This command should not have parentheses when it is called. See also createevent() and eventcode. Example if (comparetext(eventdata,\"openinputs\")) { thisobjectdata->openinputs(); } This calls a method called openinputs on the object referenced by thisobjectdata if the string value passed to createevent() is equal to \"openinputs\". eventget (num index, num thing) An event attribute for the event at index Description Returns an event attribute at the specified index in MAIN:/project/exec/events. thing can be: 1 = client 2 = time 3 = code 4 = data 5 = involved 6 = event node Example eventget(2,3) eventloginfo (num operation, num n1) Description For developer use. Returns a string value describing something related to the Event Log. Operations: ELI_GET_OBJECTPATH 1 - returns the path of the object at index n1 from the objectpaths array. ELI_GET_INVOLVEDPATH 2 - returns the path of the object at index n1 from the involvedpaths array. ELI_GET_OTHERPATH 3 - returns the path of the object at index n1 from the otherpaths array. ELI_EVENTTYPE_NAME 4 - returns the name of the eventtype at index n1 from the eventtypes array. ELI_LOGGEDEVENTTYPE_NAME 5 - returns the name of the logged eventtype at index n1 from the loggedeventtypes array. Other operations relating to the Event Log that return number values can be accessed using the applicationcommand() function: \"seteventlogging\" - enables or disables logging for eventtype n1. \"geteventlogging\" - returns whether logging is enabled for eventtype n1. \"getobjectpathslistsize\" - returns the size of the objectpaths array. \"getinvolvedpathslistsize\" - returns the size of the involvedpaths array. \"getotherpathslistsize\" - returns the size of the otherpaths array. \"geteventtypeslistsize\" - returns the size of the eventtypes array. \"getloggedeventtypeslistsize\" - returns the size of the loggedeventtypes array. \"geteventtypecode\" - returns the index of the eventtype by name passed as n1. Example string objectpath = eventloginfo(ELI_GET_OBJECTPATH,1); eventqty () Gets the number of events currently pending Description Returns the number of events currently pending. Example eventqty() listenerinfo (int info) Description For developer use. This command returns information for use within the OnListen and OnPreListen event functions. The information returned is information that was passed to the event you are listening to. Info 1 will return the engine event code. Engine event codes have macros such as SM_MESSAGE and SM_DRAW. Info 2 and 3 return pointers to associated treenodes. To set up listening, you add a \"listeners\" attribute to the object you want to listen to (Object A). The listeners attribute should have subnodes that are couplings to the object(s) that you want to listen from (Object B). Before an event fires on Object A, Object B's OnPreListen event function will fire. After an event first on Object A, Object B's OnListen event function will fire. You can also filter events by additing a subnode with number data below Object B's coupling node. The number data should be a bitwise sum of the bitshifted event codes you want to listen for. If the coupling has no subnode, the object will default to listening to every event. Example treenode current = c; treenode involved = i; int code = listenerinfo(1); treenode associated = tonode(listenerinfo(2)); treenode coupling = tonode(listenerinfo(3)); print(\"OnListen\"); print(\"current: \", current); print(\"involved: \", involved); print(\"code: \", code); print(\"associated: \", associated); print(\"coupling: \", coupling); logevent (num/str index/name[, obj object, obj involved, num p1, num p2, num p3, num p4]) Description Logs an event as an entry in the Event Log. Use the name passed into registereventtype() or the index returned by registereventtype(). Example logevent(\"MyEventType\",current,item,port); registereventtype (str name) Description Registers a custom event type for use with the Event Log. Returns the index of the eventtype to be used later by other commands such as logevent(). Example int index = registereventtype(\"MyEventType\"); startlisten (obj listener) Description For developer use. Tell the executive that an object is a listener. Not persistent across sessions. This command will add a node in the executive listener list pointing to listener. When a session is reloaded, or after a compile, listeners need to be reset. The listening mechanism can add a significant load to the executive, so use minimally. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. The listener must filter the message to decide whether to respond to the OnListen message. Refer to the Online Reference Guide for the parameters passed into an OnListen message. Example startlisten(so()) stoplisten (obj listener) Description For developer use. Tell the executive that this object is not a listener anymore. This command will remove the pointer to listener from the listeners list if previously added with the startlisten() command. Listeners will receive OnListen messages when an event (OnTimerEvent) is dispatched to any object in the model. Example stoplisten(so()) FixedResources Commands associated with FixedResource objects. Most of these commands are used when developing custom behavior for the BasicConveyor or BasicFR object. evaluatepullcriteria (obj fixedresource, obj item, num portnr[, num bypassflags]) Causes the FixedResource object to re-fire its pull requirement Description Tells the FixedResource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. This command returns the value returned by the pull requirement field if the item can be pulled. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. Example evaluatepullcriteria(current, item, 1); // See also Pull Best Item picklist option getiteminvolved (obj item) Gets the object reference stored in the FixedResource involved variable for the item Description This returns the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getitemvar, and setiteminvolved commands, to store variables on the items the object receives. Example getiteminvolved(current.first) getitemsendto (obj item) Gets the value of the evaluated sendto for the item Description This returns the value of the evaluated sendto for the item if it is in a FixedResource and has been released. Example getitemsendto(item) getitemstate (obj item) Gets the FixedResource state of the flowitem Description Returns the FixedResource state of the flowitem. This will be one of 3 values: FRSTATE_INQUEUE: The flowitem is in-process; it has not been released yet. FRSTATE_READY: The flowitem has been release, but has not found a downstream object that is ready to receive it. FRSTATE_MOVEREQUESTED: The flowitem has been released, and a downstream object is ready to receive it, but the item is waiting to get picked up by a transport. For more information, refer to the FixedResource documentation. Example getitemstate(so()) getitemvar (obj item, num var) Gets the value of a FixedResource variable for the item Description This returns the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the setitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example getitemvar(current.first, 3) holditem (obj item) Holds the item if it has already been released Description Holds the specified item if it has already been released. This in effect \"unreleases\" the item so that it will not leave. This only applies if the item is in a FixedResource and it has already been released and has not been \"allocated\" to a downstream object (it is not waiting for a transport). Example holditem(item) inititem (obj item) Initializes the FixedResource variables of a flowitem Description Initializes the FixedResource variables of a flowitem, usually done when the flowitem first enters the fixed resource. This is usually already done for you, but may be used in some exceptional cases when developing your own BasicFR object behavior. Example inititem(item) pullitem (obj fixedresource, obj item, num portnr[, num bypassflags]) Description Tells the fixedresource to evaluate its pull requirement for the passed item that is in the object through the input port portnr. If the pull evaluation is true, this command pulls the item immediately. This command returns 1 if the item was successfully pulled and 0 if not. If the item cannot be pulled for any of various reasons (such as closed ports or the item not being released), then this command returns 0. The bypassflags parameter is a bitwise combination of macros that start with BYPASS_ to specify certain criteria to ignore in determining item availability. You can specify BYPASS_ALL to immediately pull the item regardless of availability. Example pullitem(current, item, 1); // See also Pull Best Item picklist option receiveitem (obj station [, num port ] ) Tells the FixedResource to open inputs and receive a flowitem Description Tells the FixedResource station to open its inputs and receive a flowitem. The port parameter is optional, and should only be used if you know exactly which port you want to receive from. If the port parameter is specified, this object will try to receive any item from the upstream object if its corresponding output port is open, ignoring any items' previous send-to return values (similarly to how pull logic works). This function should be executed only once to receive an item, and it should only executed again once you have received (or have confirmed reception of) that item. See also releaseitem() command. This function should generally only be used from within a BasicFR's code fields, as other objects implement receiveitem() on their own. If the object receives an item immediately, then it will return 1, otherwise 0. Example receiveitem(current) recycleitem (obj item , num binrank ) Recycles the flowitem to the flowitem bin Description Recycles the specified flowitem to the flowitem bin. Binrank should be the rank in the flowitem bin to recycle to (texturedcoloredbox = 5, etc.) Example recycleitem(item, 5); releaseitem (obj flowitem [, num port ]) Releases the flowitem from its current object Description Releases the specified flowitem. A flowitem is released when it is free to exit the object currently containing it, at which time the Send to Port is evaluated. This command should only be used if the flowitem is in a BasicFR object and the flowitem has not been released already, or if it is any FixedResource and has been held with holditem(). The second paramter, port, is optional. If passed, the sendto will not be evaluated, but the item will instead be released out the specified port. If the flowitem exits, releaseitem will return 1. Otherwise it will return 0. See also receiveitem() command. Example releaseitem(item) resetuniqueid (obj flowitem) Resets the uniqueid attributes on a flowitem to a value that has not been assigned to another flowitem Description This command resets the uniqueid attribute on a flowitem to a value that has not been assigned to another flowitem already. This attribute is required to collect Full History information for the Full Report. This command should be used if a flowitem has not been destroyed but needs to be considered as a new item for data collection purposes. For example, if a flowitem is being recycled by a modeler (not with the built-in recycling functionality), they should call this when the flowitem is returned to circulation. Flowitems typically only have the uniqueid attribute when Full History collection is enabled. Example resetuniqueid(item); resumetransportsin (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportin command, and notifies those taskexecuters that they can resume their unload operation. The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsin variable. References to specific saved taskexecuters can be referenced by: nroftransportsinnode.subnodes[saverank].value Example resumetransportsin(current); resumetransportsout (obj fixedresource [, num saverank]) Description This should only be executed from triggers of a BasicFR object, and usually will only be executed from the resume object field. This command looks up references to taskexecuters that have been saved using the savestoppedtransportout command, and notifies those taskexecuters that they can resume their load operation.The saverank parameter refers to a rank in the tree of a specific saved reference. If the saverank parameter is not specified, all saved references will be resumed. If this parameter is specified, only the taskexecuter associated with the specific rank will be allowed to resume. Saved references are stored as sub-nodes in the BasicFR's nroftransportsout variable. References to specific saved taskexecuters can be referenced by: nroftransportsoutnode.subnodes[saverank].value Example resumetransportsout(current); savestoppedtransportin (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport in complete trigger of a BasicFR object. If the BasicFR is not ready to receive an item that a taskexecuter is about to unload, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to receive it. When the BasicFR becomes ready to receive the item(s), it should call the resumetransportsin() command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their unload operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportin(current, transporter); return -1; } savestoppedtransportout (obj fixedresource, obj taskexecuter) Description This should only be executed from the transport out complete trigger of a BasicFR object. If the BasicFR is not ready to send an item that a taskexecuter is about to load, it must save off a reference to the taskexecuter, then return the value -1. The taskexecuter will then go into a blocked state and wait until the BasicFR is ready to send the item. When the BasicFR becomes ready to send the item, it should call the resumetransportsout command. This will look up saved references and notify their corresponding taskexecuters that they can immediately resume their load operation. Example if(getvarnum(current, \"nrofstops\") > 0) { savestoppedtransportout(current, transporter); return -1; } setiteminvolved (obj item, obj involved) Description This sets the object reference stored in the FixedResource involved variable for the item. The FixedResource class allows sub-classes to store 1 involved variable on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses the involved variable to store a reference to the dispatcher called for a flowitem if the Processor is set to use operators for the process or setup time. Only use this command if you are using the explicit FixedResource class as and object in your model. You can use this command, along with the setitemvar, getitemvar, and getiteminvolved commands, to store variables on the items the object receives. Example setiteminvolved(current.first, current.centerObjects[1]) setitemsendto (obj item, num value) Description This sets the value of the sendto for the item if it is in a FixedResource. Only use this command if you are using an explicit FixedResource class object and want to store a sendto value on the item before releasing it, and then later use the releaseitem() command, passing the port in. If you want to change the evaluated sendto of an item that has already been released, execute holditem(), and then releaseitem() again, instead of this command. Example setitemsendto(item, current.currentsendto) setitemvar (obj item, num var, num value) Description This sets the value of a FixedResource variable for the item. The var parameter should be either 1, 2, or 3, and the value parameter should be whatever value you want to set it to. The FixedResource class allows sub-classes to keep up to 3 number variables on each flowitem. What these variables mean is dependent on the type of class. For example, a Processor uses variable 1 to store the time the item started its processing time, and variable 2 to store the item's processing time. If you are using the explicit FixedResource class as an object in your model, you can use this command, along with the getitemvar, getiteminvolved, and setiteminvolved commands, to store variables on the items the object receives. Example setitemvar(current.first, 3, time()) transportincomplete (obj object, obj item [, num inport, obj transporter]) Notifies the FixedResource object that item will now be moved into it Description This command notifies a downstream FixedResource object that the specified item will now be moved into it from an upstream object. This should only be used if the upstream object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the downstream FixedResource to manage data on how many items are slated to enter the object, but haven't arrived yet. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportincomplete(current.outObjects[port], item, opipno(current, port)); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem transportoutcomplete (obj object, obj item [, num outport, obj transporter]) Notifies the FixedResource object that item will now be moved out of it Description This command notifies the FixedResource object that the specified item will now be moved out of it. This should only be used if the object's Use Transport field is checked, but you are moving the item explicitly, instead of using an FRLOAD task. This allows the FixedResource to manage data on how many items are still in the object but are ready to leave. Execute this command just before you move the item out with the moveobject command. For more information, refer to the FixedResource documentation. If this command returns 0, then the object has been stopped using the stopobject command, and you must wait until it has been resumed before moving the item into it. Example transportoutcomplete(current, item, port); This example should be executed from the Request Transport From field before a moveobject command if you decide that you don't want to use a transport, but rather want to immediately move the flowitem Kinematics and Splines Commands associated with kinematics and spline math. addkinematic (node infonode, num x, num y, num z, num targetspeed, num acc, num dec, num startspeed, num endspeed, num starttime, num type ) Adds one kinematic operation to a set of kinematics Description Adds one kinematic operation to a set of kinematics. For more information, refer to the user manual documentation on kinematics. Example addkinematic(current.labels[\"kinematics\"], 1, 0, 0, 5,0,0, 0,0, time(), KINEMATIC_TRAVEL); deactivatekinematics (node kinematicsnode) Causes kinematics to do nothing when updatekinematics() is called Description Causes kinematics to do nothing when updatekinematics() is subsequently called instead of updating the object. Call this in the reset trigger of an object to free the object to move it around in the ortho view. Example deactivatekinematics(current.labels[\"kinLabel\"]); dynamicsplineall (node starttree) Description For developer use. Un-cache all splines for objects under starttree. Any splines in the model become editable or \"unlocked\". Spline rendering becomes slower in editable mode. In editable mode, splines can be edited dynamically. Example dynamicsplineall(model()) fastspline (obj spline, num perc [0-1]) Description For developer use. Get a spline mapping from a cached spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will use the precalculated values for the spline object given in spline. The parameter perc is the position along the spline of interest. The precalculated values are evaluated when the fastsplineall() or fastsplineupdate() commands are used. Example fastspline(splinestartnode,1) This activates the spline pointed to splinestartnode at its furthest point (100 percent along the spline). fastsplineall (obj starttree {model}, num res) Description For developer use. Cache all splines at once. The geometry for all splines in the model are evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinery(), splinery(), splinery(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineall(model(),20) fastsplineupdate (obj spline, num res) Description For developer use. Cache a spline's shape to increase it's speed. The geometry for all splines in the model are re-evaluated and \"locked\" in order to accelerate the rendering and evaluation of spline geometry. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands whenever calling fastspline(). Example fastsplineupdate(so(),20) getkinematics (node infonode, num querytype[, num kinematicindex, num updatetime/traveldist]) Gets information from the specified kinematics operation Description Gets information from the specified kinematics operation. For more information, refer to the help documentation on kinematics. Example getkinematics(current.labels[\"kinematics\"], KINEMATIC_ARRIVALTIME, 1, current.size.x); initkinematics (node infonode, obj/num object/x[, num flags/y, num z, num rx, num ry, num rz, num flags, num unused]) Initializes a kinematic operation Description Initialize a kinematic operation. Infonode is a blank node that can hold kinematic information. Object is the object that you want kinematics to be performed on. flags defines various flags for how you want it to behave. The unused parameter deprecated, i.e. you can define this through the flags parameter. Refer to kinematics documentation in the user manual for more information. Example initkinematics(current.labels[\"kinematics\"], current) profilekinematics (node infonode, num kinematicindex) Prints information about the specified kinematics operation to the output console Description Prints information about the specified kinematics operation to the output console. For more information, refer to the help documentation on kinematics. Example printkinematics(current.labels[\"kinematics\"], 0); scalekinematicstotime (node kinematics, int kinematicnr, double scaletotime) Scales the kinematics to a defined time Description Scales the kinematic(s) to a defined time. This can be used to preserve the characteristics of the kinematics, i.e. accelerate->peak speed->decelerate, but have the total time it takes to perform the kinematics be defined by some other mechanism such as a distribution. If kinematicnr is 0, then the entire set of kinematics will be scaled to the given time. If kinematicnr is greater than 0, then only that kinematic will be scaled. The return value is the new end time of the kinematic(s). Example scalekinematicstotime(kinematics, 0, exponential(0, 10)); setkinematicsrotoffset (node infonode, num rx, num ry, num rz) Description Sets the initial kinematics rotational offset for a kinematics operation. For more information, refer to the help documentation on kinematics. Example setkinematicsrotoffset(current.labels[\"kinematics\"], 0, 0, 180); spline (obj spline, num perc) Description For developer use. Calculate spline mapping and set the current spline parameters using the spline object spline. This command will set the values to be returned by subsequent calls to the splinex(), spliney(), splinez(), splinerx(), splinery(), splinerz(), splinelength(), splineposobject() commands. It will not set the precalculated values for the spline object given in spline, as in fastspline().The parameter perc is the position along the spline of interest. This command does not lock precalculated values as when the fastsplineall() or fastsplineupdate() commands are used. A spline can be defined as any chain of objects that are connected from output ports to input ports. Pass the first object in the output port to input port chain as parameter 1. Example spline(splinestartobject,0.6) splinedraw (obj object) Description For developer use. Draw a line along a spline based on the current spline geometry as calculate by the spline(). Example splinedraw() splinedrawextrusion (obj object, num step, num wide, num high, num top, num side) Description For developer use. Draw a spline based on the current spline geometry as calculate by the spline() with a rectangular extrusion. Using parameters of spline object. Example splinedrawextrusion(current,20,1,2,1,1) splinelength () Description For developer use. Current spline parameter. This will return the length of the current spline. Example splinelength() splineposobject (obj object) Description For developer use. Position object according to current spline parameters. Example splineposobject(current) splinerx () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerx() splinery () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinery() splinerz () Description For developer use. Current spline parameter. This will give the orientation of an object as if placed on the spline at the parameter p given in the last call to spline(). Example splinerz() splinex () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinex() spliney () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example spliney() splinez () Description For developer use. Current spline parameter. This will give the position on the spline at the parameter p given in the last call to spline(). Example splinez() updatekinematics (node infonode, obj object [, num updatetime]) Updates the location of the object based on its kinematics Description Updates the location of the object based on the kinematics operation and the current time. For more information, refer to the help documentation on kinematics. Example updatekinematics(current.labels[\"kinematics\"], current, time()); Language Flexscript or C++ keywords and constructs. a <no parentheses> Description This command is used to reference objects during iterations of certain flexscript commands such as forobjectlayerunder() and forobjecttreeunder(). This command does not require parentheses, and can only be used in C++. Example See forobjecttreeunder(). break Description Break out of a loop or the case of a switch statement {} Example break; case value: Description One case in a switch statement {} Example case 5: { msg(\"case statement\",\"\"); } continue Description Continues immediately to the next iteration of a for or while loop without executing any of the remaining code in the current loop. Example if(thisloopnotneeded) continue; default : Description The default case in a switch statement {} Example default: { msg(\"case statement\",\"\"); } else { } Description Used in conjunction with the \"if\" statement to declare what (if any) code should be executed when the condition for the \"if\" is false. Example if( item.Weight < 100 ) { msg(\"TRUE\",\"\"); } else { msg(\"FALSE\",\"\"); } This example will display the TRUE message when the value of the item's Weight label is less than 100, and the FALSE message when it is not. for (initalstatement; whiletrueexpression ; countstatement) Description Perform a number of loops. The initialstatement will be executed once before starting the loop. The whiletrueexpression will be evaluated before executing each loop and the loop will stop as soon as this expression is true. The countstatement is executed at the end of each loop and usually increments a counter. Refer to the help manual under Writing Logic in FlexSim for more information. Example for(int i = 1; i <= 5; i++) { msg(\"for loop\",\"\"); } forobjecttreeunder (node container) { } Description Execute a block of code for each node that is in the tree under the node specified as container, including all sub-trees. To access the node that is currently active in the loop, the \"a\" command is used. The forobjecttreeunder() command can only be used in flexscript, not C++. Example forobjecttreeunder(model()) { pt(a.name); pr(); } This prints to the outputconsole the name of every object in the model, including those inside other objects. if (num condition) { } Description If the condition is true (i.e. the conditional expression returns a 1), then the statement immediately following the closing parenthesis will be executed. If braces { } are what immediately follows the closing parenthesis, then the block of code within the braces will be executed when the condition is true. Nothing is executed if the condition is false (returns a 0), unless an \"else\" has been defined. Refer to the Users Manual for more information. Example if (item.Weight < 100) msg(\"TRUE\", \"\"); This example will display a popup message saying \"TRUE\" when the item's Weight label has a value less than 100 return (num value) Description This command causes a function to stop executing and return value to the function that called it. Example double res = item.rank * 5; return res; This sets the value of res to 5 times the rank of the item referenced by item. The value stored in res is then returned to the function that called this one. stringcompare (str text1, str text2) Compare strings for alphabetical order Description Compare strings for alphabetical order. The return value is zero if the strings are the same. If text1 is alphabetically before text2, a negative number is returned. If text1 is alphabetically after text2, a positive number is returned. Same as the strcmp() C++ function. Example stringcompare(\"zenith\",\"beta\") returns 1 comparetext(\"aqua\",\"yellow\") returns -1 switch (num value) Description Execute one of several possible cases, based on value Example int msgcase = msgparam(1); switch(msgcase) { case 1:msg(\"\",\"case 1\");break; case 2:msg(\"\",\"case 2\");break; default:msg(\"\",\"case 2\");break; } while (num expression) {} Description Repeatedly execute the following block {} while the expression returns a non-zero value. Be careful with this function because it can cause FlexSim to freeze if the value never becomes false. Example while(current.subnodes.length > 4) { current.last.destroy(); } Media Commands associated with presentation and media such as images, sounds, 3D shapes, video and flypaths. applyshapefactors (obj object) Applies all of the shape factors to object Description This command applies all of the shape factors to the object if it has any. Example applyshapefactors(item); autoloadallmedia ([node thenode]) Description For developer use. This command loads all of the media (images and shapes) required by the current views, library, and model. Images are either .bmp or .jpg graphics files. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many images or shapes that need to be loaded. This command is not available in C++. Example autoloadallmedia(); This reloads all of the media needed for the current model. autoloadimages () Description For developer use. This command loads all of the images required by the current views, library, and model. Images are either .bmp or .jpg graphics files. This command may take some time to complete, if there are many images that need to be loaded. This command is not available in C++. Example autoloadimages(); This reloads all of the images needed for the current model. autoloadshapes () Description For developer use. This command loads all 3D shapes required by the current views, library, and model. Shapes are either .3ds or .wrl files. This command may take some time to complete, if there are many shapes that need to be loaded. This command is not available in C++. Example autoloadshapes(); This reloads all of the shapes needed for the current model. autoloadsounds () Description For developer use. This command loads all sounds required by the current views, library, and model as declared by \"sound\" attributes on the objects. This command may take some time to complete, if there are many sounds that need to be loaded. This command is not available in C++. Example autoloadsounds(); This reloads all of the sounds needed for the current model. flyactive () Returns 1 if there is an fly path running, 0 otherwise Description Returns 1 if there is a fly path currently being run, 0 otherwise. Example flyactive() flyendnode (node x) Gets a reference to the node that represents the stopping point for the current fly path Description Returns a reference to the node in the tree that represents the stopping point for the current fly path. Example Used in the presentation builder GUI. flypath (obj view, num pathno [, num singlerun]) Description For developer use. This command begins the predefined flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypath(ownerview(c),1); This will run flypath number 1 in the view window containing an event's code. flypathadd (obj view, num pathno) Description For developer use. This command adds a flypath to the flypath numbered pathno in the view designated specified as view. Any view window can be passed as view. Example flypathadd(ownerview(c),1); This will add a flypath to flypath number 1 in the view window containing an event's code. flypathreset (obj view, num pathno) Description For developer use. This command clears the points from the flypath numbered pathno in the view specified as view. Once the points have been cleared, a new set of flypath points can be generated. Example flypathreset(ownerview(c),1); This clears the flypath points out of flypath 1 in the view containing an event's code. flystart (obj view) Description For developer use. Start fly mode. Example flystart(ownerview(c)) flystop () Description For developer use. This command stops any active flypaths. Example flystop(); This causes all flypaths that are currently active to stop moving. flyto (obj view, num endtime, num x, num y, num z, num rx, num ry, num rz) Description For developer use. Fly to the specified viewpoint over time. Example flyto(sv(),10000,0,0,20,-50,0,-30); flyupdate () Updates the currently active fly path Description Updates the currently active fly path if there is one Example getshapeindex (str name) Gets the index of a loaded 3D shape Description Get the index of a loaded shape by its file path name. The file path name used in this command must use double backslashes as shown in the example. Use View -> Media Files to see a complete list of currently loaded shapes with their associated file path names and indexes. Example getshapeindex(\"fs3d\\\\Operator\\\\BasicOperator\\\\Chest.3ds\"); getsoundindex (str name) Gets the index of a loaded sound Description Returns the index of a loaded sound by the name associated with it in the project/media/sounds folder. Example getsoundindex(\"C:/My Sounds/APPLAUSE.WAV\"); gettextureindex (str name) Gets the index of a loaded image Description Get the index of a loaded image by name. The media list of FlexSim will keep a list of all loaded textures (images). Each texture has a corresponding name and an index. This command will return the index corresponding to a texture's name. Example gettextureindex(\"myimage\") loadimage (str file, str name) Description For developer use. Load an image directly. An image file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded images. Each image has a corresponding name and an index. This command will return the index corresponding to the loaded image. Example loadimage(\"c:/myimage.bmp\",\"myimage\") loadthreedobject (str file, str name) Description For developer use. Load a 3D model directly. A shape file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded shapes. Each shape has a corresponding name and an index. This command will return the index corresponding to the loaded shape. Example loadthreedobject(\"c:/myshape.wrl\",\"myshape\") mediareset () Description For developer use. Unload all media. This will unload all currently loaded media from FlexSim: images; shapes; and sounds. Example mediareset() objectsoundcode (obj object) Gets the index of object's default sound Description Get the index of the object's default sound. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This function will return the index corresponding to the objects default sound assuming the object has a sound and soundindex attribute (default objects do not at this time) Example objectsoundcode(current) shapeinfo (num info[, p1, p2, p3]) Gets or sets information about loaded 3D shapes. Description Gets or sets information about loaded 3D shapes. Example shapeinfo(SHAPEINFO_GET_ANIMATION_COUNT, shapeIndex); soundchange (obj view, num sound, num volume, num tempo, num repeat, num balance) Change a currently playing sond Description Change a currently playing sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Interesting affects are achieved when the volume and balance are changed based on the viewpoint relative to an object making the object appear to be emitting the sound. Example soundchange(sv(),1,1,1,1,.5) soundload (str path+filename) Load a sound into FlexSim Description A sound file on disk will be loaded into FlexSim and recorded in the Media List. The media list of FlexSim will keep a list of all loaded sounds. Each sound has a corresponding name and an index. This command will return the index corresponding to the loaded sound. Microsoft Wave Format files (.wav) can be loaded and played. Sounds can have their volume, balance and frequency adjusted dynamically. Multiple channels are managed through the Microsoft DirectSound Interface. Example int applauseindex = soundload(\"c:/My Music/APPLAUSE.WAV\"); soundplay (obj view, num soundindex, num volume [, num tempo, num repeat y/n, num balance]) Play a loaded sound Description Play a loaded sound. Sounds are attached to a window by the operating system, so the view parameter is important. To get the soundindex use getsoundindex(). The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplay(sv(),3,.75,.25,1,.5) Continuously play sound index 3 in the selected view with 3/4 volume, and 1/4 tempo and balanced evenly across both speakers. soundplayfile (obj view, str path+filename, num volume [, num tempo, num repeat, num balance]) Play a sound directly from a file Description Play a sound directly from a file. Sounds are attached to a window by the operating system, so the view parameter is important. The volume, tempo and balance are numbers between 0 and 1. To continuosly repeat the sound, use a repeat of 1 else 0. Example soundplayfile(sv(),\"C:/My Sounds/APPLAUSE.WAV\",1,1,0,.5); soundstop (obj view, num sound) Stop a sound playing Description Stop a sound playing. Sounds are attached to a window by the operating system, so the view parameter is important. Example soundstop(sv(),1) unloadimage (int textureid) Description For developer use. Unload an image from the Media List by index. Example treenode view = node(\"VIEW:/1>Documents/Dashboard/1+/~/GraphPanel/1/1\"); repaintview(view); viewtofile(view, modeldir() + \"test.png\"); unloadimage(gettextureindex(modeldir() + \"test.png\")); int newindex = loadimage(modeldir() + \"test.png\", modeldir() + \"test.png\"); setobjecttextureindex(Model.find(\"Plane1\"), newindex); This example renders a dashboard chart to an image file, unloads that image from the media list, reloads the image back into the media list, and sets the texture index of a plane to that image. viewtofile (obj view, str path[, num width, num height]) Saves the specified view as a bitmap image Description Saves the specified view as a bitmap image to the specified file. Example viewtofile(node(\"VIEW:/active/ortho\"), modeldir() + \"screenshot.bmp\")); Miscellaneous Miscellaneous commands that have not been categorized. addsystemcontrolleritem (obj systemcontroller, num productid, num linenum, num target, num starttime [, num newcolumn1, num newcolumn2, num newcolumn3, num newcolumn4]) For Dynamo use Description For Dynamo use. Adds a new line item to a SystemController's schedule during a model run. Does not actually add a new row to the table. The parameters are the same data that the SystemController's schedule requires. The newcolumn parameters are numbers that could have been added to each row of the SystemController's schedule table. Example addsystemcontrolleritem(current.centerObjects[1],0,1,1,0); commandlineparam (str param) Description Returns the specified commandline parameter that was passed in if FlexSim is being run from the commandline. Example commandlineparam(\"nrofops\"); This example will return the \"nrofops\" commandline parameter. If a batch opens FlexSim with the line: flexsim.exe myfile.fsm -nrofops 8 Then within FlexSim, commandlineparam(\"nrofops\") will return \"8\". You can use either the unix-style hyphen (-) or the windows-style forward slash (/) to define a command-line parameter contextdragconnection (obj fromobject, obj toobject, str/num characterpressed) Creates an A or S connection between objects Description This command mimicks holding the specified letter down on the keyboard, clicking on the fromobject and then dragging to the toobject with the mouse. Whatever context sensitive action takes place when using the actual keyboard and mouse combinations, will occur when this command is executed. This command can be used in both Flexscript and C++. Example contextdragconnection(model().subnodes[5], model().subnodes3], \"A\"); createuserlibrary () Description For developer use. This command creates a new user library Example createuserlibrary(); deleteselected () Description For developer use. Deletes all selected objects in the model. Example deleteselected() dropuserlibraryobject (obj object [, obj ontoobject, num x, num y, num z, obj ontoview, num viewalreadyset]) Description For developer use. Drops the specified object as if it were dragged from a user library into the model. Example dropuserlibraryobject(node(\"MAIN:/project/userlibrary/1/1\")); duplicateselected () Description For developer use. Duplicates all selected objects in the model. Example duplicateselected() executefsfile (str filename, num direct) Description For developer use. Executes Flexscript code in a file. The specified file is loaded and its content is executed. The contents of the file are assumed to be valid Flexscript code. If direct is 0, then FlexSim's program directory will be concatenated onto the front of filename, otherwise filename will remain as it is. Example executefsfile(\"c:/myscript.fs\",1) filebrowse (str extension, str description, str startpath) Opens a file selection dialog Description Opens a file selection dialog that allows the user to select the specified file type(s). Different types should be separated by semicolons(;). The dialog's default directory is the path specified. The commands pdir() and cdir() can only be passed as the path parameter in C++. Example string filename = filebrowse(\"*.fsm; *.fsp; *.fsv; *.fss\",\"FlexSim Files\",pdir()); firecreateevent (obj object, num x, num y, num z, num iscopy [, num libraryfunctiononly]) Description For developer use. Fires the creation event of the specified object. x, y, and z are the rz the object was dropped at. Example firevalue of 0 islast(model()),0,0,0, 1); flipselected (num firstX, num firstY, num secondX, num secondY[, node roottree]) Flip selected objects across an axis Description Flip selected objects across the axis defined by the two passed xy points Example flipselected(1, 5, 2, 7) This example flips the selected objects across the axis defined by the points point (1, 5) and (2, 7) geteventtime (str EventName, num mode[1/2/3]) Gets a UserEvent's event time Description Returns a UserEvent's event time. Mode: 1 - Repeat time intervals, 2 - Exact event time, 3 - Time until event fires Example double remainingtime = geteventtime(\"myevent\",3); getlastfiletype () Description For developer use. Returns the type of the last file saved. 1 = Model file 2 = Project file 3 = View file 4 = Session file 0 = Other file Example if (getlastfiletype()) {pt(\"Known file type\"); pr(); } getlinecontrollerdata (obj linecontroller, num datatype, num column) For Dynamo use Description For Dynamo use. Returns data about the LineController's current job, 1 = ProdID, 2 = LineNum, 3 = Target, 4 = StartTime. 5 = Extra Column Example getlinecontrollerdata(current,1,0); getmodelunit (num querytype) Description Returns information about the model's unit settings. FlexSim's typical units are: time - 1 second, length - 1 meter, volume - 1 liter, mass - 1 kilogram. Also may return a name or abbreviation of the current model's units querytype can be one of the following values: TIME_MULTIPLE returns the number of seconds represented by each time unit in the current model LENGTH_MULTIPLE returns the number of meters represented by each length unit in the current model FLUID_MULTIPLE returns the number of liters represented by each fluid unit in the current model FLUID_TYPE returns 0 if the fluid units represent volume, or returns 1 if the fluid units represent mass DATE_TIME_NODE returns a reference to the date/time node in the model units tree START_TIME returns the start time in seconds (since Jan 1, 1601) START_TIME_NODE returns a reference to the start time node in the model units tree CURRENT_TIME returns the current time in seconds (since Jan 1, 1601) CURRENT_TIME_NODE returns a reference to the current time node in the model units tree STOP_TIME returns the next stop time in seconds (since Jan 1, 1601) STOP_TIME_NODE returns a reference to the stop times node in the model units tree START_YEAR returns the year associated with the start time as a number START_MONTH returns the month associated with the start time as a number betweeen 1 (Jan) and 12 (Dec) START_DAY returns the day associated with the start time as a number, where 1 indicates the first day of the month START_DAYOFWEEK returns the day associated with the start time as a number, where 0 indicates Sunday START_HOUR returns the hour associated with the start time as a number between 0 and 23 START_MINUTE returns the minute associated with the start time as a number between 0 and 59 START_SECOND returns the second associated with the start time as a number between 0 and 59 START_MILLISECOND returns the millisecond associated with the start time as a number between 0 and 999 CURRENT_YEAR returns the number of years since the model start time CURRENT_DAY returns the number of days since the model start time CURRENT_HOUR returns the number of hours since the model start time CURRENT_MINUTE returns the number of minutes since the model start time CURRENT_SECOND returns the number of seconds since the model start time CURRENT_MILLISECOND returns the number of milliseconds since the model start time CURRENT_YEAR_OF_TIME returns the year associated with the current time as a number CURRENT_MONTH_OF_YEAR returns the month associated with the current time as a number between 1 (Jan) and 12 (Dec) CURRENT_DAY_OF_MONTH returns the day associated with the current time as a number, where 1 indicates the first day of the month CURRENT_DAY_OF_WEEK returns the day associated with the current time as a number, where 0 indicates Sunday CURRENT_HOUR_OF_DAY returns the hour associated with the current time as a number between 0 and 23 CURRENT_MINUTE_OF_HOUR returns the minute associated with the current time as a number between 0 and 59 CURRENT_SECOND_OF_MINUTE returns the second associated with the current time as a number between 0 and 59 CURRENT_MILLISECOND_OF_SECOND returns the millisecond associated with the current time as a number between 0 and 999 TIME_NAME returns the name of the model time units TIME_PLURAL_NAME returns the plural name of the model time units TIME_ABBREVIATION returns the abbreviation of the model time units LENGTH_NAME returns the name of the model length units LENGTH_PLURAL_NAME returns the plural name of the model length units LENGTH_ABBREVIATION returns the abbreviation of the name of the model length units FLUID_NAME returns the name of the model fluid units FLUID_PLURAL_NAME returns the plural name of the model fluid units FLUID_ABBREVIATION returns the abbreviation of the name of the model fluid units START_TIME_STR returns the start time as a string, formatted by the date and time formats CURRENT_TIME_STR returns the current time as a string, formmatted by the date and time formats STOP_TIME_STR returns the next stop time as a string, formatted by the date and time formats TIME_FORMAT returns the time format used to format date/time strings DATE_FORMAT returns the date format used to format date/time strings Example getmodelunit(LENGTH_MULTIPLE) getreportnum (node report, int column, int rowsback) For Dynamo use Description For Dynamo use. Returns the value from a Report object that is in the specified column. The row is determined by subtracting the rowsback parameter from the number of rows in the table. Example double myval = getreportnum(current,3,0); groupsetnames (node namenode, num startnum, num append) Description For developer use. Sets the names of all of the selected objects in the model to the string data on namenode. If append is 1, then a number is appended to the end of each name, starting at startnum and increasing by 1 for each object. Example groupsetnames(\"WeldStation\",1,1); hideprogressbar () Description For developer use. Hides the progress bar Example hideprogressbar(); highestconnection () Gets the highest numbered server connection index Description Returns the highest numbered server connection index. Example int highconn = highestconnection(); insertcopy (obj originalobject, obj containerobject) Creates a copy of the flowitem and moves it into the container object Description Creates a copy of the flowitem and moves it into the container object, causing the OnReceive event of the container to execute. Example insertcopy(item, current); Creates a duplicate of the flowitem and moves it into the current object. integrityscan (obj class, obj start) Description For developer use. Checks that attributes have not been deleted from model objects, based on their class object. A search is done starting at the given starting node. Example integrityscan(rank(library(1)),model()) isprojectcompiled () Description For developer use. Returns 1 if the project has been compiled. Example isprojectcompiled() loadselectedfromfile (obj highlightedobj) Description For developer use. Loads previously saved tree file into the highlighted object. Example loadselectedfromfile(selectedobject(ownerview(c))) loadstate () Description For developer use. Loads the state of the project. If savestate() has been executed, then this command must be executed before you can run the model again. Example loadstate(); loaduserlibrary (str libfile [, obj libraryview, num reloadmedia, num changeitemcurrent, num autoinstall]) Description For developer use. Loads a library from the path specified in libfile. If reloadmedia is true, autoloadallmedia() will be called after loading the library. If autoinstall is true, the library's load and new model autoinstall objects will be added to the model. The libraryview and changeitemcurrent parameters are no longer used. Example loaduserlibrary(cdir() + \"libraries/mylib.fsl\"); memberadd (obj childobject, str parentname, num type) Description If type = 1, then the childobject is added as a member to a Time Table named \"parentname\". If type = 2, then the childobject is added as a member to a MTBFMTTR object named \"parentname\". This is useful for dynamically assigning operators to different shifts for instance. Example memberadd(model().subnodes[2],\"TimeTable1\",1) memberremove (obj childobject, str parentname, num type) Description If type = 1, then the childobject is removed as a member from a Time Table named \"parentname\". If type = 2, then the childobject is removed as a member from a MTBFMTTR object named \"parentname\". see memberadd() Example memberremove(model().subnodes[2],\"TimeTable1\",1) memberremoveall (str parentname, num type) Description If type = 1, then all members are removed from a Time Table named \"parentname\". If type = 2, then all members are removed from a MTBFMTTR object named \"parentname\". see memberremove() Example memberremoveall(\"TimeTable1\",1) moveobject (obj object, obj location[, num outport]) Moves object to the specified location Description This command moves the object to the specified location through the specified port. The specified port does not have to actually exist, this value is used by the receiving location to be able to reference the port the object came in through. When an object moves into location, the OnReceive event function of location is executed. This includes the OnEntry trigger function. Explicitly calling this on a flowitem with events queued up for it may cause problems. Only use when you know that no events are pending for the object being moved. Example moveobject(current.first,current.centerObjects[1]); This moves the first object that is inside the object referenced by current to the object connected to current's first center port. moveselectedintohighlighted (obj highlightedobj [, node selectedcontainer]) Description For developer use. Moves all selected objects in the model into the highlighted object. Example moveselectedintohighlighted(selectedobject(ownerview(c))) notifylinecontroller (node object, int controllernum, num output, num sendinglast [0/1]) For Dynamo use Description For Dynamo use. Informs a LineController connected to the object that material has left the line so the Controller can decide if the run is complete. The number of the LineController to be notified is the contollernum parameter. The object should report how much material (of any kind) has left it since the model began running and whether or not the material leaving is the last material in the object. Example notifylinecontroller(current,1,current.stats.output + 1,(current.subnodes.length == 1)); pickoptiononselect (obj view) Description For developer use. This command is used by pick list gui controls to modify the combobox text when an option is selected. Example pickoptiononselect(c); rotateselected (double angle, double x, double y[, obj roottree]) Description Rotates all selected objects in the model around the designated origin x/y location Example rotateselected(90, 5, 0) This example rotates selected objects 90 degrees around the location (5,0) savebyname (obj tree, str filename) Description For developer use. Saves the specified tree node to a file with the given name. Example savebyname(Model.find(\"MyProcessor\"), \"C:\\\\MyProcessor.t\"); savemodelprepare () Description For developer use. Prepares the model to be saved, including reseting, etc. Example savemodelprepare(); saveselectedtofile () Description For developer use. Saves all selected objects in the model to a tree file. Example saveselectedtofile() savestate () Description For developer use. Saves the state of the project. Once this command is executed, you can save your project (.fsp), then open in later, compile, execute loadstate(), and run from the previous spot you started from. Example savestate(); savetree (node tree, str extension, str description, str startingpath) Description For developer use. Opens a save file dialog prompting the user for a file name to save. The tree passed in will be saved with the specified name, unless a session is selected. Then the first parameter is ignored. cdir() and pdir() may not be directly used as the path in FlexScript. Example savetree(model(),\"fsm\",\"FlexSim Model\",documentsdir()); searchfornode (str/node searchstr, node startnode, num findnr[, num searchobjects]) Description For developer use. Recursively searches the startnode for a node with a name containing the searchstr. The findnr parameter is useful when the search finds multiple nodes containing the given name, specifying a number i here will give you the ith node found. Set searchobjects to 1 to search the object's data nodes. Example seteventtime (str EventName, num time, num timemode[1/2], num createevent[1/0]) Sets the \"Repeat Event Time\" for the global UserEvent Description Sets the \"Repeat Event Time\" for the specified global UserEvent. If timemode = 1, then timeval will be used directly; otherwise, the timeval - time() will be used. If createevent = 1, then in addition to updating the \"Repeat Event Time\", a single event will be created at the previous time specified. Example seteventtime(\"UserEvent1\",20,1,0); The global userevent named \"UserEvent1\" will have its \"Repeat Event Time\" to 20. setprogressbar (num progress) Description For developer use. Sets the progress bar to the specified value. Should be a value between 0 and 100. Example setprogressbar((numread / numtotal) * 100); showprogressbar (str caption) Description For developer use. Opens the progress bar with the specified caption. The bar's progress will be initialized to 0. Use setprogressbar to update the progess value. Example showprogressbar(\"Loading data, please wait\"); so () Gets a reference to the last node designated as so() Description This command returns a reference to the last node that was designated the selected object. This command is only used in the scripting window. To designate a node as so, right-click on the node in the tree and select Edit|Designate This Node (so). Any node in the tree can be designated the selected object. Example getnodename(so()) This returns the name of the object that is currently designated the selected object. This command would generally only be used in the scripting window. The final semicolon (;) is not needed in the scripting window. startuploadlibraries ([num viewalreadyset]) Description For developer use. Loads libraries on startup. Example startuploadlibraries() transfernodeobj (node movenode, node container) Moves movenode into the container node's object data Description This command moves movenode into the container node's object data. This is like the moveobject command, except no events (ie. OnSend, OnReceive) are executed. Example transfernodeobj(current.attrs.find(\"body\"), current.next); updatereport (num/str/node report) For Dynamo use Description For Dynamo use. Causes the specified Report to add a new row to its table and populate it correctly. This is used to add entries that are not time-based. Example updatereport(\"ResultsReport\"); userinput (obj targetnode, str text [, int stop]) Prompts the user for a value in a dialog box Description Prompts the user for a value in a dialog box. The value is placed in the specified node. The model does not stop running while the dialog is open unless the stop parameter is specified. If the stop parameter is specified, then the model stops until the dialog is closed and it returns the value. Example userinput(model().subnodes[3].labels[\"myLabel\"],\"Please enter a value\"); validatename (obj node, num isviewtext [, obj object]) Description For developer use. Makes sure the name of node is a valid FlexSim name, replacing invalid characters with underscores and bringing up a message if changes were made. If isviewtext is 1, it assumes the node passed is an edit field, and it changes the viewtext of the field, instead of the name of the node. If the object parameter is specified, it checks that object's name against all the other names of objects in its container. If there are names that are the same, it will pop up an error message. This command is called when you press the Apply or OK buttons in an object's Properties window. Example validatename(current, 0); Model Execution Commands for stopping, starting, and managing simulation runs. endreplication (num onlyifexperimenting) Ends the current experimenter replication Description Will end the current experimenter replication. Use this if your experiment's end time is dependent on a certain condition becoming true instead of a set end time. Specify 1 for onlyifexperimenting to make sure that you only stop if you are running the experiment. Example if(current.stats.output >= 5000) endreplication(1); fastforward () Description For developer use. Saves off the current runspeed, sets the run speed to max, suspends draw, and then runs to the next stop time. Once the next stop time is reached drawing is resumed and the runspeed is restored. Example fastforward() getrunstate ([int checkProcessingEvent]) Returns 1 if the model is currently running, 0 if not Description Returns 1 if the model is currently running, 0 if not. If you pass a true value, returns whether an event is currently executing. Example if(!getrunstate()){msg(\"Model Stopped\", \"The model is not running right now.\",1);} If executed from the script window, this message will only appear if the model is stopped. go ([num fast]) Starts the simulation run Description This command starts the simulation run. If there are any events in the event queue, they will occur when the clock reaches them. If there are no events in the queue, the clock will stop. This command will not reset the simulation. If fast is 1, then it will not bind objects before starting. This improves speed if you are stopping and starting the simulation often. See also runfunction(). Example stop(); if (msg(\"Model Stopped\",\"Continue?\")==1) { go(); } This stops the model then prompts the user if it should start again. If the user presses \"OK\", the model continues from where it was stopped. realtime ([num timecode = 0]) Gets the real clock time Description Returns the real clock time in a variety of formats based on the timecode: 0 = the number of seconds and milliseconds since midnight, Jan 1, 1970 1 = the number of seconds since midnight, Jan 1, 1970 2 = the number of milliseconds since the last second change 10 = a time string with format hh:mm:ss 11 = a date string with format mm/dd/yy 12 = a date/time string with format Mon Nov 15 15:49:12 2004 Example string curdatetime = realtime(12); resetexperiment () Description For developer use. Reset the experiment without performing a full model reset. It is typically used internally by the experiment manager. Example resetexperiment() resetlayer (obj layer) Description For developer use. Resets the layer passed. Use resetmodel instead. Example resetmodel ([num buildflexscript]) Resets the model Description Resets the model. Use this command instead of reset(). The parameter specifies whether the engine should build all flexscript functions as well. Example resetmodel() resetstats () Description For developer use. Reset all object statistics without performing a full model reset. It is typically used internally by the experiment manager. Example resetstats() runfunction (num noreset) Description For developer use. Block user input/output, perform a model run at maximum speed possible by cpu, and return control when stoptime is met. If stoptime = 0, the stoptime is assumed to be 1000. See go(). Example runfunction(1) runspeed (num speed[, num precisionMode]) Sets the simulation speed Description This command sets the speed at which the simulation will run. It is the same as clicking and dragging the slider bar on the Run Control window, but more precise. The speed that the model will attempt to run at is defined as the number of simulation time units per real second. The model may not actually achieve this speed if the computer cpu can not keep up. precisionMode defines the precision to use. If 0, the precision mode will remain what it was before the call. If you pass RUN_SPEED_LOW_PRECISION, it will set to a low precision run speed. If you pass RUN_SPEED_HIGH_PRECISION, it will run in high precision mode. This is used for emulation purposes. The precision mode will be reset to low precision on every reset, so you need to have something in your model set it back on reset or when the model starts to enable high precision mode. Example runspeed(10); go(); This sets the speed to 10 simulation seconds per real second, then runs the model. skip () Description For developer use. Advance the model run by one step (process exactly one event) and then process any and all events at that same exact model time. Example skip() step () Description For developer use. Advance the model run by one step. One step means to process exactly one event. Example step() stop ([num fast]) Stops the simulation run Description This command stops the simulation clock from running. The model stops with all of its pending events still in the queue. If the user starts the model again before resetting, the model will continue from the exact time that it stopped at. If fast is 1, then FlexSim will not rebind objects. This will improve speed if you are stopping and starting often. Example stop() stoptime (num time [, num stopNum=1]) Sets the time when the simulation should stop Description This command sets the time at which the simulation should stop running. The model will not necessarily stop at the exact time specified, but will stop at the first system check on or after the specified stop time. The model may stop early if there are no more events to execute. If stopNum is specified, the stop time at that rank will be set. If time is -1, the command returns the stoptime of stopNum. If time is 0 and stopNum is -1, all stop times will be reset such that there is only one disabled stop time at time 0. Example if (stoptime(-1) < 500) stoptime(500); This sets the stoptime to 500 if it was less than 500 to begin with. updatestates () Updates the states of all objects in the model Description Updates the states of all objects in the model. Additionally, this command also updates the content stats of all the objects. The 'Stop' button and menu option both call this function before executing a stop() so that objects' stats are updated. Otherwise, reports will not reflect the time the object was in its last state. Example updatestates(); NetworkNodes Commands associated with NetworkNode objects and network paths. closenodeedge (obj object, num edgenum) Closes entry to the networknode's edge Description Closes entry to the networknode's specified edge number. The edge's color will turn orange indicating it is closed. Open or close status of an edge will only be checked by a traveler when traveling from one node to the next (not when entering a node from an offset) Example closenodeedge(current.centerObjects[1], 3); getedgedist (obj netnode, num edgenum) Gets the distance of the edge of a network node Description Returns the distance of the specified edge of the network node. Example getedgedist(current, 1) getedgespeedlimit (obj netnode, num edgenum) Gets the speed limit of the edge of a network node Description Returns the speed limit of the specified edge of the network node. Example getedgespeedlimit(current, 1) getnetnode (obj object, num nodenr) Gets the nth network node connected to object with an A connection line Description Returns the nth network node connected to the object with a \"blue\" or \"station\" connection line Example getnetnode(current, 1) getnetnodespline (obj netnode, num edgenr) Gets a reference to the spline head of netnode's edge edgenr Description Returns a reference to the spline head for the specified edge of the network node. You can use spline() commands to then access location data for that spline. Note that the spline head may not be inside the network node you're passing, but rather may be in the network node on the other side of the edge. You can use the isedgeforward() command to query whether the spline is inside the network node. If not, then spline percentages disances passed to the spline() command will be backwards. Example treenode splinehead = getnetnodespline(netnode, 2); getnetworkdistance (num fromnetnoderank, num tonetnoderank) Gets the network distance between two network nodes Description Returns the network distance between the network nodes. Note that the network nodes are referenced by their member ranks, not by the pointer to the network node. Use rankfromnetnode() to get a network node's member rank. Example getnetworkdistance(rankfromnetnode(current), rankfromnetnode(current.outObjects[1])); getnextnetnode (num fromnn, num tonn) Gets the rank of the next network node from fromnn in order to get to tonn Description Returns the rank of the next network node to go to from one network node in getting to the destination network node. The return value and parameters will all be network node member ranks. Use rankfromnetnode() to get the member rank of a network node, and netnodefromrank() to get the network node from the member rank. Example treenode nextnode = netnodefromrank(getnextnetnode(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\")))); getnextnetnodeoutport (num fromnn, num tonn) Gets the output port of the network node fromnn in order to get to tonn Description Returns the output port, or edge number, to go to in getting from a source network node to a destination network node. Example int outport = getnextnetnodeoutport(rankfromnetnode(current), rankfromnetnode(Model.find(\"NN5\"))); gettenavigator (obj taskexecuter) Gets the current navigator that a taskexecuter is connect to Description Returns the current navigator that a taskexecuter (TE) is connected to, either DefaultNavigator or DefaultNetworkNavigator. Example treenode navigator = gettenavigator(current); gettenetnode (obj taskexecuter) Gets the current network node that a taskexecuter is attached to with an A Connection Description Returns the current network node that a taskexecuter (TE) is attached to with a red line. Example treenode netnode = gettenetnode(current); gettenetworkinfo (obj taskexecuter, obj destobj, num info) Gets information regarding the current state of a taskexecuter on a node network Description Returns information regarding the current state of a taskexecuter on a node network. Valid queries are as follows: NETWORK_INFO_DEST_NET_NODE_RANK - returns the destination column/rank of the network node that the TE would travel to were he to be given a travel task to destobj. Usually this will simply be the network node attached to destobj, but if multiple network nodes are attached to destobj, the command will find the closest one. NETWORK_INFO_ORIGIN_NET_NODE_RANK - returns the origin column/rank of the network node that the TE would start from were he to be given a travel task to destobj. Usually this will simply be the current network node where the TE is located, but if that network node has virtual exits, the command will find the virtual exit that renders the shortest travel distance. NETWORK_INFO_DISTANCE - returns the shortest travel distance to the destination object through the network. NETWORK_INFO_CUR_DIST_ALONG_EDGE - Only valid when the TE is actively doing a travel task. This returns the current distance that the TE has traveled along its current network edge. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_ORIGIN_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the origin node at which the TE starts its current travel operation. For this query, destobj should be NULL. NETWORK_INFO_CUR_TRAVEL_DEST_RANK - Only valid when the TE is actively doing a travel task. This returns the rank of the destination node to which the TE is traveling for its current travel operation. For this query, destobj should be NULL. Example int destrank = gettenetworkinfo(current, NULL, NETWORK_INFO_CUR_TRAVEL_DEST_RANK); isedgeforward (obj netnode, num edgenr) Returns 1 if the network node's edge is forward, 0 otherwise Description Returns 1 if the network node's edge is \"forward\" meaning when created, the connection was dragged FROM this network node to the other network node. If the edge is forward, then the spline head is contained by this network node, and the spline distance values go forward from this network node. Example isedgeforward(current, 2) netnodefromrank (num rank) Returns the network node member at rank rank Description Takes a network node member rank and returns the actual reference to the network node. Example treenode netnode = netnodefromrank(5); opennodeedge (obj networknode, num edgenum) Opens entry to the networknode's edge Description Opens entry to the networknode's specified edge number. Closing a node's edge with closenodeedge() blocks travelers from entry onto the edge. This command opens the edge up again. Example opennodeedge(current.centerObjects[1], 3); Opens node edge 3 of a NetworkNode connected to center port 1 of the current object. optimizenetwork () Causes the model's network navigator to regenerate its distance table Description Causes the model's network navigator to regenerate its distance table. Use this command if you are dynamically connecting edges in your network during the simulation run. This may take several seconds to do for large networks. Example optimizenetwork() rankfromnetnode (obj netnode) Returns the member rank of network node netnode Description Takes a network node reference and returns the member rank of that network node. Each network node has a specific \"member rank\", which is used as a row/column reference in the network's distance and next node tables. The first network node that is added to a model gets member rank 1, the second gets member rank 2, and so on. Example int memberrank = rankfromnetnode(current); reassignnetnode (obj taskexecuter, obj networknode) Description TaskExecuters using a NetworkNode system are always associated with a specific NetworkNode in the system (red line graphic) which continually changes as they travel around. This command reassigns the specified taskexecuter to networknode. Warning!!! Do not execute this command unless the TaskExecuter is on a network, and unless you know the TaskExecuter is not currently executing a travel task. Example reassignnetnode(current, current.centrObjects[5]); Reassign the current TaskExecuter to the NetworkNode connected to its fifth center port. redirectnetworktraveler (obj traveler, obj newdest) Description Attempts to change the end destination of the traveler to that of the newdest object. Only works if the traveler is currently on a TASKTYPE_TRAVEL task and is on a travel network. Returns 1 if successful. Example redirectnetworktraveler(traveler, Model.find(\"Processor5\")); Redirects the traveler to an object in the model named Processor5 assuming traveler is a pointer to a taskexecuter currently traveling on a network node system and Processor5 is connected to the network. trafficcontrolinfo (obj trafficcontrol, num info [, num a, num b]) Gets information on a traffic controller Description This command gives you access to various information on a traffic control, as well as lets you direct the traffic control to perform logic. Logic/data that is performed/returned is based on the info parameter, as follows: trafficcontrolinfo(tc, TCI_NR_ACTIVE_TRAVELERS) - returns the total number of active travelers in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER, num travelnr) - returns a reference to the nth active traveler in the traffic control. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_COUPLING, num travelernr) - returns a reference to a coupling node, stored in the Traffic Control's variables tree, that is associated with the nth active traveler. This coupling can be used to stored custom user information regarding that active traveler. To do this, add sub-nodes to the coupling node with nodeinsertinto(), add data, etc. Note that once the active traveler leaves the traffic control area, the coupling, and its sub-nodes, will automatically be destroyed. trafficcontrolinfo(tc, TCI_ACTIVE_TRAVELER_RANK_FROM_TRAVELER, obj traveler) - This command takes a reference to a traveler object and returns which index in the traffic control's active travelers is associated with that traveler. If zero is returned then the object is not an active traveler in the traffic control. trafficcontrolinfo(tc, TCI_NR_MEMBERS) - Returns the total number of network nodes that are members of the traffic control area trafficcontrolinfo(tc, TCI_MEMBER, num membernr) - Returns a reference the nth network node member of the traffic control trafficcontrolinfo(tc, TCI_MEMBER_COUPLING, num membernr) - Returns a reference to a coupling node, stored in the traffic control's variables, that is associated with the nth network node member of the traffic control. Like TCI_ACTIVE_TRAVELER_COUPLING, this node may be used to store data associated with that network node. trafficcontrolinfo(tc, TCI_MEMBER_RANK_FROM_NETWORK_NODE, obj netnode) - Takes a network node reference and returns the member index of that network node in the traffic control. If zero is returned then the network node is not a member of the traffic control. trafficcontrolinfo(tc, TCI_NR_ENTRY_REQUESTS) - Returns the number of entry requests currently in queue waiting to enter the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_TRAVELER, num requestnr) - Returns a reference to the traveler associated with the nth entry request, who is waiting get into the traffic control area. trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NETWORK_NODE, num requestnr) - Returns a reference to the network node where the traveler is waiting, associated with the nth entry request trafficcontrolinfo(tc, TCI_ENTRY_REQUEST_NODE, num requestnr) - Returns a reference to a node associated with the nth entry request. Like TCI_ACTIVE_TRAVELER_COUPLING, you may add sub-nodes to store data associated with the request. Do not, however, change the data on this node, as this is used by the traffic control logic. trafficcontrolinfo(tc, TCI_ALLOW_ENTRY, num requestnr) - Calling this command will instruct the traffic control to allow the traveler associated with the nth entry request to enter the traffic control area. trafficcontrolinfo(tc, TCI_SET_ENTRY_REQUEST_RANK, num requestnr, num settorank) - Calling this command will cause the traffic control to rerank its nth entry request to the specified rank. Also, a note regarding using the traffic control triggers to override the traffic control's default logic. The traffic control's OnEntryRequest trigger, which fires when a traveler first requests entry into the traffic control area, can take 3 different return values: TC_ON_ENTRY_REQUEST_DEFAULT - If this value is returned from the trigger, the traffic control will perform its normal filtering logic. TC_ON_ENTRY_REQUEST_ALLOW - If this value is returned, the traffic control will ignore its default logic and simply allow the traveler into the area. Note that if this is used, the traffic control will ignore its maximum capacity variable, so depending on the logic you define, the number of travelers in the area may exceed the maximum capacity variable you specify on the traffic control. TC_ON_ENTRY_REQUEST_QUEUE - If this value is returned, the traffic control will ignore its default logic and add the request to its request queue, disallowing the traveler from entering the area at that time. The traffic control's OnExit trigger may take one of two return values: 0 - If this value is returned, the traffic control will perform its default logic, allow other travelers to enter, etc. 1 - If this value is returned, the traffic control will do nothing. In this case the user should use the trigger to explicitly tell the traffic control which traveler(s) to receive using TCI_ALLOW_ENTRY. If you plan on implementing your own custom logic for allowing travelers into the area, then it is recommended that you use the traffic control's default \"Mutual Exclusion\" mode. Example treenode netnode = trafficcontrolinfo(tc, TCI_MEMBER, 2); Object Data Commands for accessing and assigning data on objects. assertvariable (obj object, str variablename, num datatype) Gets a reference to variable variablename of object, creates the variable if it does not exist Description This command returns a reference to a variable with the given name. If the variable does not exist, one is created with the defined data type. Example treenode newvar = assertvariable(Model.find(\"/Processor1\"),\"MyVariable\", DATATYPE_NUMBER); classobject (obj object) Returns the class object of an instance Description Returns the class object of an instance. Example if(classobject(current) == library().find(\"?Processor\")) { pt(\"Processor1 is an instance of the Processor class.\");pr(); } This prints a message to the output console if current is a Processor. contentunder (node thenode [, num objectsonly) Description This command returns the number of nodes in the tree that are inside the node specified as thenode plus the number of nodes that may be contained in any sub-trees that begin at that layer. If thenode does not contain any other nodes, this command returns 0. If objectsonly is not specified or 0, any node in the FlexSim tree can be passed as thenode. If objectsonly is not 0, any node passed in as thenode that isn't an object will return 0. Example if (contentunder(current) >= getvarnum(current,\"maxcontent\")) { current.input.close; } This closes the inputs of current if the number of objects contained under current is greater than or equal to the variable called maxcontent of the object referenced by thisobjectdata. emptyfluidobject (obj object) Sets the contents of the fluid object to 0 Description Sets the contents of the fluid object to 0. Example emptyfluidobject(current); fluidcontent (obj fluidobject) Gets the current fluid content of fluidobject Description Returns the current fluid content of the specified Fluid Object. It is the same as reading the \"curcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objcontent = fluidcontent(current.outObjects[1]); fluidmaxcontent (obj fluidobject) Gets the max fluid content of fluidobject Description Returns the defined maximum fluid content of the specified Fluid Object. It is the same as reading the \"maxcontent\" variable on the object. This does not have any meaning if a Discrete object is passed in. Example double objmaxcontent = fluidmaxcontent(current.outObjects[1]); getanimationvar (obj object, num/str animation, str varName) Gets the current value of an animation variable Description Gets the current value of an animation variable. See setanimationvar() for more information on animation variables. Example treenode curItem = getanimationvar(current, \"Animation1\", \"Item1\"); getcreationtime (obj object) Gets the time that a flow item was created Description Returns the time that a flowitem was first created. Example time() - getcreationtime(item) getentrytime (obj object) Gets the time that a flow item entered the current object it is in Description Returns the last entry time of the item (the time the flowitem last entered another object). Example time() - getentrytime(item) getframe (obj object) Gets the current Shape Frame being drawn for object Description Returns the current 3D shape frame that is being drawn for the object. If the 3D shape assigned to the object was named myshape.3ds, and if two additional 3D shapes with file names myshapeFRAME1.3ds and myshapeFRAME2.3ds resided in the same directory as myshape.3ds, then the two additional files would be loaded into FlexSim automatically at the same time myshape.3ds was loaded, and setting the object's frame from 0 to 1 to 2 would change the object's shape to each of the shapes defined by the three files in order. Example if(getframe(current) == 3)) setframe(current, 5); getobjectshapeindex (obj object) Gets the index number of the 3D shape assigned to object Description Returns the index number of the 3D shape currently assigned to the object. Example getobjectshapeindex(item); getobjecttextureindex (obj object) Gets the index number of the image assigned as the texture for the object's 3D shape Description Returns the index number of the bmp or jpeg image currently assigned as the default texture for the object's 3D shape. Example getobjecttextureindex(item); getvarnode (obj object, str/num var) Gets a node reference to an object's variable Description Returns a reference to the specified variable's node in the specified object. Example treenode schedule = getvarnode(current,\"schedule\"); getvarnum (obj object, str/num var) Gets the value of an object's numeric variable Description Returns the numeric value stored in the specified variable of the specified object. Example double speed = getvarnum(current,\"speed\"); getvarstr (obj object, str/num var) Gets the value of an object's string variable Description Returns the string data stored on the specified variable of the specified object. Example pt(getvarstr(model().subnodes[2],\"creationtrigger\")); isclasstype (obj object, num/str classtype) Compares the object to classtype, returns 1 for yes, 0 for no Description Returns whether or not the object is of the given classtype. 1 means yes, 0 means no. Possible classtype parameters are: CLASSTYPE_FLEXSIMOBJECT CLASSTYPE_FIXEDRESOURCE CLASSTYPE_TASKEXECUTER CLASSTYPE_NETWORKNODE etc. Example isclasstype(current, CLASSTYPE_DISPATCHER); reassignticker (obj fluidobject, obj ticker[, int resortticker]) Reassigns the Fluid Object's ticker Description Changes the Fluid Object passed in as the first parameter from the control of its current Ticker, to the Ticker that is passed in as the second parameter. The object will then have its fluid movement calculated whenever the new Ticker's tick-time elapses. It is recommended that Fluid Objects that are connected to each other always be controlled by the same Ticker. If resortticker is 1, then the new Ticker will immediately resort its list of controlled objects. This may change the order that some fluid objects are evaluated and may have side-effects in the model behavior. Example reassignticker(current,Model.find(\"Ticker2\",1); setanimationvar (obj object, num/str animation, str varName, num/obj toValue) Sets the value of an animation variable on an object Description Sets the value of an animation variable on an object. Animation variables are attributes of an animation that may need to dynamically change for different runs of the animation, such as surrogates, time between keyframes, or position/rotation/size values of a given keyframe. For example, you may use surrogates in building your animation. You do this by choosing a default visual from the flowitem bin to use as you create the animation. Then when the simulation runs, you substitute real flowitems in for those surrogates when you run the simulation. You do this substitution by setting the value of an animation variable that you've associated with that surrogate to the actual reference to the flowitem. Another example is you may use an animation variable to dynamically define the z position of a keyframe at run-time. Example setanimationvar(current, \"Animation1\", \"Item1\", current.first); setframe (obj object, num/str toframe) Sets the shape frame of an object Description Sets the frame attribute of the object to the framenumber. The frame defines which 3D image to display. This is a nice way of changing the 3D shape of an object on the fly. There are two ways to define frames on an object. First, you can do it through the naming of various 3D files. For example, if the object was assigned Operator.3ds as its default shape, and there are additional files in the same directory as Operator.3ds named OperatorFRAME1.3ds, OperatorFRAME2.3ds and OperatorFRAME3.3ds, then the frame attribute could be set to 0,1,2, or 3 which would change the displayed shape to each of the 3ds files respectively. Secondly, you can add sub-nodes to an obejct's shape attribute, each with a path to the 3D file associated with that frame. Subsequently, frame 1 would be associated with the shape attribute's first sub-node, etc. This is the method used within FlexSim's environment to define shape frames. If toframe is a string, then the latter method is assumed, and it will find the shape attribute sub-node with the corresponding name. One use of this command would be to change the 3d shape in the OnDown trigger to show a \"broken\" shape. Example if(getframe(current) == 3)) setframe(current, 5); setobjectbillboard (obj object, num mode) Sets the billboard attribute of the visual tool object Description This command sets the billboard attribute of the visual tool object. The following modes are available: 0: No Billboard, the visual tool will display based on its set rotation. 1: Vertical Billboard (plane only), this will cause the plane to stand vertically in the model and always face toward the camera along the same viewing plane. 2: All Around Billboard (plane only), this will cause the plane always present its face to you no matter what the viewing angle is. 3: Screen Locked Billboard, locks the Visual Tool in front of the view. Example setobjectbillboard(current, 1); setobjectshapeindex (obj object, num index) Sets the index number for the 3D shape of an object Description Sets the index number for the 3D shape of an object. For the new index to take effect, the shape node of the object must be removed or renamed, so this command renames the shape node to \"_shape\" for you. The index number must be a valid index number of a currently imported 3D shape. To view currently imported 3D shapes and to import more shapes, use View -> Media Files. See setframe() as another solution to changing the 3D shape of an object on the fly. Example setobjectshapeindex(item,getshapeindex(\"fs3d\\\\Processor.3ds\")); setobjecttextureindex (obj object, num index) Sets the index number of the image assigned as a texture for the object's 3D shape Description Sets the index number of the bmp or jpeg image to be assigned as the texture for the object's 3D shape. The index number must be a valid index number of a currently imported bmp or jpeg image. To view currently imported images, or to import another bmp or jpeg image, use the Import Media option in the ToolBox. Note that this command does not change the object's imageobject attribute so the original texture will return when the model is reset. Example setobjecttextureindex(item,gettextureindex(\"bitmaps\\\\flowitempicture.bmp\")); setresetposition (obj object) Sets the reset position of the object Description Sets the reset position of the object to its current position. Example setresetposition(current); setvarnum (obj object, str/num var, num value) Sets the value of an object's numeric variable Description Set the specified variable on the object to the number passed in as value. Example setvarnum(current.centerObjects[1],\"speed\",1.5); setvarstr (obj object, str/num var, str value) Sets the value of an object's string variable Description Set the string value of the specified variable on the object. Example setvarstr(current,\"cycletime\",\"return exponential(10,1);\"); switch_enablestats (obj object[, num off/on]) Get or set the \"stats\" flag of the object Description Get or set an object's \"stats\" flag. A value of 1 is enable, a value of 0 is disable, and a value of -1 gets the current value. Example switch_enablestats(so(),1) switch_hideconnectors (obj object[, num off/on]) Get or set the \"Hide Connectors\" flag of the object Description Get or set the \"Hide Connectors\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the connectors will turn off the display of ports and their connections both to and from the object. Note that view windows have an attribute named hideallconnectors that controls the display of connectors for ALL objects in their view. Example switch_hideconnectors(so(),1) switch_hidecontents (obj object[, num off/on]) Get or set the \"Show Contents\" flag of the object Description Get or set the \"Show Contents\" flag of the object. A value of 1 is hide, a value of 0 is show, a value of -1 gets the current value. Hiding the contents of an objects will stop the display of objects (e.g. flowitems) contained within it. Example switch_hidecontents(so(),1) switch_hidelabel (obj object[, num off/on]) Get or set the \"Show Name\" flag of the object Description Get or set the \"Show Name\" flag of the object. A value of 1 will hide the object's name and stats from being displayed on the screen, a value of 0 will show the object's name and possibly stats depending on the viewhidealllabels attribute of the view window. A value of -1 gets the current value for the switch. The viewhidealllabels attribute of the view window has the following possible values which will apply to the label display of all objects in the window: 0=show name and stats, 1=hide name and stats, 2=show just names. Example switch_hidelabel(so(),1) switch_hideshape (obj object[, num off/on]) Get or set the \"Show 3D Shape\" flag of the object Description Get or set the \"Show 3D Shape\" flag of the object. A value of 1 is hide, a value of 0 is show, and a value of -1 gets the current value. Note that view windows also have an attribute called hidealldrawcontent that controls the display of 3D shapes for ALL objects in their view. Example switch_hideshape(so(),1) switch_showobject (obj object[, num off/on]) Expand/collaps the object data of an object node Description Expand or collapse the object data of an object node in a tree view. This is analogous to clicking the > next to the object node in a tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_showobject(so(),1) updatelocations (obj object) Updates the location of the object and the objects inside of it Description This command causes the object to update the location of itself and possibly the objects inside of it. Use this command to refresh locations before querying or executing functionality that would query the location of an object. Example updatelocations(current); updatestate (obj object [, num profilenr]) Updates the state of the object Description Updates the state of the specified object. Could be used in the OnDraw function of an object to make its states display smoothly while the model is running. Example updatestate(current); Object Functions Commands associated with calling functions on objects and nodes; including nodefunctions, events, messages and their related access variables. c <no parentheses> Description This command is used to reference the active node during a function's execution. If the function was called using nodefunction(), c returns a reference to the node on which the function is written. If the function is an event function, c returns a reference to the object that contains the event. Example treenode current = ownerobject(c); debug ([num operation, num/obj p2, num/obj p3]) Acts like a breakpoint in Flexscript to start debugging Description For developer use. This command is used to control the Flexscript step debugger. Calling this command without any parameters will behave as if there is a breakpoint at that line of code. Operations: DEBUG_STOP 0 DEBUG_STEP 1 DEBUG_CONTINUE 2 DEBUG_IS_STOPPED 3 DEBUG_GET_LINE_NR 4 DEBUG_DUMP_VARIABLES 5 DEBUG_STOP_SIMULATION 6 DEBUG_REFRESH_BREAK_POINTS 7 DEBUG_ADD_BREAK_POINT 8 DEBUG_DELETE_BREAK_POINT 9 DEBUG_GET_WATCH_VARIABLE 10 DEBUG_ENABLE_CODE_PROFILING 11 DEBUG_PRINT_CODE_PROFILING_INFO 12 DEBUG_RESET_CODE_PROFILING 13 Example debug(); delayednodefunction (node thenode, double timeDelay[, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode after a defined delay time. It works the same as the nodefunction() command, except it delays firing the node for the given delay time. Example delayednodefunction(current.myFunc, tonum(item)); eventlisten (obj object, str eventName, node relayNode[, num flags, par1, par2, ... par10]) Description This command will create a listening mechanism where whenever the defined event is called on object, relayNode will also be executed. flags is a bitwise mask of one of the following values: EVENT_PRE_LISTEN : The listening function will be called before theNode is called. EVENT_LISTEN : (default) The listening function will be called after theNode is called. EVENT_PERSIST : The listener will persist across model resets. EVENT_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into the event will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. EVENT_LISTEN_ONCE : The listening mechanism will automatically be removed after the first event firing. When the listening node is called, if it returns EVENT_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. To get a list of the events that can be listened to on an object, call function_s(object, \"enumerateEvents\", destNode). The object will dump a table onto destNode that contains information on all the events that can be listened to on the object. Some events may have \"requirements\". This means that in order to properly bind to the event, you have to pass additional parameters in. The enumeration table will give information on the number of requirements and their names. When requirements are needed they displace and shift par1, par2, etc. For example, if an event has 2 requirements, these requirements will take up par1 and par2 of the eventlisten() call, and par3 will then become param(1) in relayNode's code. Example eventlisten(current, \"OnEntry\", current.entrylistener); executefsnode (node thenode, node c[, node i, node/num/str eventdata, int nobuild]) Execute a node as Flexscript Description Dynamically execute a node as Flexscript. If the node is not already Flexscript, the nobuild parameter should be 0. Used to parse string data into Flexscript to execute, such as from a global table or label. The c and i parameters can be accessed in the function as c and i. The eventdata parameter can be accessed as eventdata if it is a string or as eventcode (an integer) if it is a number. If eventdata is a node, it can be accessed using tonode(eventdata) in the function. Example executefsnode(current.labels[\"myFunc\"],NULL,NULL,NULL,0) This executes the script on current's myFunc label, passing NULL into the function for c,i,and eventdata. i <no parentheses> Description For developer use. This command is used only in event functions. It is used to reference the object that was passed to the value of 0 is) command as the involved object. Example string involvedname = i.name; This sets involvedname to the name of the object that was passed to value of 0 is) as the involved object. inheritcode () Description For developer use. This command is used for subclass function inheritance. Call this in an event function to call that same event function on the object's classobject. In C++ or DLL code, call _inheritcode(callpoint); Example Flexscript: inheritcode(); C++ or DLL: _inheritcode(callpoint); ip <no parentheses> Description For developer use. Node pointer meaning 'involved port'. Alias for 'eventdata'. Example msgparam (num param) Within an OnMessage trigger, get the value of a message parameter Description Returns a parameter passed to with the Object . message () method or sendmessage() or senddelayedmessage() commands. Only used in OnMessage triggers. Example int msgtype = msgparam(1); treenode item = msgparam(2); Array data = msgparam(3); msgsendingobject () Within an OnMessage trigger, get a reference to the object sending the message Description Returns a reference to the object that sent the message as defined in the Object . message () method or sendmessage() or senddelayedmessage() command. Only used in OnMessage triggesr. Example treenode sender = msgsendingobject; nodefunction (node thenode [, par1, par2, ... par10]) Description For developer use. This command executes a function that is defined on thenode. Thenode must be toggled as either a C++ node or a Flexscript node. If the node is C++, the model must be compiled before calling this command. Any parameters that need to be passed to the function are passed as par1, par2, etc. Up to 10 parameters may be passed. The values that are passed using this command must all be numbers, but can then be accessed and recast from within the function called using the command param(x) where x is the number of the parameter. Example nodefunction(node_v_entrytrigger,tonum(item),portnum); nodefunctionlisten (node theNode, node relayNode[, num flags, par1, par2, ... par10]) Description For developer use. This command will create a listening mechanism where whenever nodefunction() is called on theNode, relayNode will also be executed. flags is a bitwise mask of one of the following values: NFL_PRE_LISTEN : The listening function will be called before theNode is called. NFL_LISTEN : (default) The listening function will be called after theNode is called. NFL_PERSIST : The listener will persist across model resets. NFL_PASS_THROUGH_PARAMS : When theNode is called, the parameters passed into that function will also be \"passed through\" into the listening node. In this case, par1, par2, etc. are not used. When the listening node is called, if it returns NFL_STOP_LISTENING, the listener mechanism will be removed and the listening node will no longer be called. The return value is a reference to a node associated with the listening. If this node is later deleted, the listening mechanism will stop. Example nodefunctionlisten(getvarnode(current, \"entrytrigger\"), current.entrylistener); param (num index) Gets a parameter passed into a function Description This command is used inside a function that is called by the nodefunction() command. It returns the parameter passed to nodefunction specified by index as a node (or treenode), string, int, double, stringarray, intarray, doublearray or treenodearray. The first additional parameter passed to nodefunction() is parameter 1, the second is parameter 2, etc. Example If a trigger/field is called with: nodefunction(thefuncnode, item) then within the trigger/field, getting access to the item passed as the first additional parameter would be done with: treenode item = param(1); Other examples include: double quantity = param(2); var value = param(1); //In this example value could be used as any type parqty () Description For developer use. Get the number of parameters passed into the nodefunction. This is used together with the nodefunction command. The value returned only applies when using Flexscript, not C++. Example parqty() selectall () Description For developer use. Selects all objects in the model. Example selectall() thisclass <no parentheses> Description For developer use. This keyword is used in an eventfunction to get the class of the object receiving the call. Example thisclass Object Ports Commands associated with the port connections of an objects. closeallip (obj object) Close all input ports of object Description Close all input ports of object. Closing all input ports of an object will block entry to the object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeallip(current) closeallop (obj object) Close all output ports of object Description Close all output ports of object. Closing all output ports of an object will block the exit of that object. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeallop(current) closeip (obj object, num inputportnum) Close one input port of object Description Close just inputportnum of object. Closing an input port of an object will block entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeinput() and stopinput(). Example closeip(current,1) closeop (obj object, num outputportnum) Close one output port of object Description Close just outputportnum of object. Closing an output port of an object will block the exit from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to closeoutput() and stopoutput(). Example closeop(current,1) cpcpno (obj object, num port) Description This command returns the center port number that is connected to the specified center port number of object. Example int otherport = cpcpno(current,1); This sets otherport to the number of the port that current's first center port is connected to. inputopen (obj object) Returns 1 if the object's input is open, 0 otherwise Description Returns 1 if the object's input is open, 0 otherwise. The closeinput(), stopinput(), openinput(), and resumeinput() commands affect the return value of this command. The commands like closeip() and closeallip() do NOT affect the return value. Example if(inputopen(current)) current.input.close; ipavailable (obj object, num inputportnum) Description Returns a 1 if the upstream object through the specified object's input port is available. Particularly, it checks if the upstream object exists, if it is stopped, if its output is open, and if the connected output port is open. This function returns 0 if the upstream object isn't available. Example ipavailable(current,1) ipopen (object object, num inputportnum) Description Returns a 1 if the inputportnum on object is open. Otherwise returns zero. Example ipopen(current,1) ipopno (obj object, num inputportnum) Output port number that is connected to inputportnum of object Description This command returns the output port number that is connected to inputportnum of object. Example int otherport = ipopno(current,1); This sets otherport to the port number of the output port that the current object's first input port is connected to. ipready (obj object, num inputportnum) Description Returns a 1 if the inputportnum of object is open and the connecting output port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the input of this object or the output of the connecting object are currently open. Example ipready(current,1) numconnections () Gets the number of server connections that are currently active Description Returns the number of server connections that are currently active. Example int numconns = numconnections(); Sets the numconns variable to the number of server connections that are currently active. opavailable (obj object, num outputportnum) Description Returns a 1 if the downstream object through the specified object's output port is available. Particularly, it checks if the downstream object exists, if it is stopped, if its input is open, and if the connected input port is open. This function returns 0 if the downstream object isn't available. Example opavailable(current,1) openallip (obj object) Open all input ports of object Description Open all input ports of object. If an input port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openallip(current) openallop (obj object) Open all output ports of object Description Open all output ports of object. If an output port has a pass-through state as a result (both connected ports are open), both objects will be sent a notification message that the port has become \"ready\". The object with the input port will receive an OnInOpen message and the object with an output port will receive an OnOutOpen message. During traversal of the ports, any given port will only allow pass-through evaluation once. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openallop(current) openip (obj object, num inputportnum) Open one input port of object Description Open just inputportnum of object. Opening an input port of an object will allow entry to the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openinput() and resumeinput(). Example openip(so(),1) openop (obj object, num outputportnum) Open one output port of object Description Open just outputportnum of object. Opening an output port of an object will allow exiting from the object through that port. Modelers should only use this command when working with fluid objects because the internal behavior of discrete objects controls the opening and closing of their ports, and therefore this command may be overridden. For discrete objects the modeler is referred to openoutput() and resumeoutput(). Example openop(so(),1) opipno (obj object, num outputportnum) Input port number that is connect to outputportnum of object Description This command returns the input port number that is connected to outputportnum of object. Example int otherport = opipno(current,1); This sets otherport to the number of the input port that current's first output port is connected to. opopen (obj object, num outputportnum) Description Returns a 1 if the outputportnum on object is open. Otherwise returns zero. Example opopen(current,1) opready (obj object, num outputportnum) Description Returns a 1 if the outputportnum of object is open and the connecting input port of the other object is also open. Otherwise a 0 is returned. This command does not take into consideration whether or not the output of this object or the input of the connecting object are currently open. Example opready(current,1) outputopen (obj object) Returns 1 if the object's output is open, 0 otherwise Description Returns 1 if the object's output is open, 0 otherwise. The closeoutput(), stopoutput(), openoutput(), and resumeoutput() commands affect the return value of this command. The commands like closeop() and closeallop() do NOT affect the return value. Example if(outputopen(current)) current.output.close; If the output is open for the current object, then close the output. transitionport () Description Get the most recently traversed port number by an object in the model. It refers to the last moveobject() call which occurred in the model run. Example transitionport() Output Commands for giving feedback to the modeler for debugging or reporting purposes. endoffile () Returns 1 if the end of the currently open file has been reached Description Returns 1 if the end of the currently open file has been reached. Used with fileopen() Example while(!endoffile()){string nextline = filereadline();} fileclose () Closes the FlexSim file interface Description Closes the FlexSim file interface and saves any data written to the file while it was open. Example fileclose() fileexists (str filepath) Returns 1 if the file exists, 0 otherwise Description Returns 1 if the file exists, otherwise 0. Example if(fileexists(\"C:/myfile.txt\")) { fileopen(\"C:/myfile.txt\"); fpt(\"Hello World\"); fileclose(); } fileopen (str filename [, str opentype]) Opens the FlexSim file interface Description Opens the FlexSim file interface. Returns 1 if successful. Returns 0 if an error is encountered. Parameter 2 can be \"w\" for writing, \"r\" for reading, or \"a\" for appending. Default is \"w\". Use the commands fpt(), fpr(), fpf(), etc. to write to the opened text file. Use filereadline() to read a line from the file. Using this command, you can only have one file open at a time. To write to multiple files simultaneously, use the C standard fopen/fclose commands or C++ standard fstream classes in C++ or through a dll. If in write mode, the contents of the file will be cleared, and the file pointer will be set to the top of the file. The file must be closed to save any data written to the file. Example fileopen(\"C:/myfile.txt\", \"w\"); filereadline () Reads a line from the currently open file Description Reads a line from the currently open file. Used with fileopen() Example string nextline = filereadline(); fpc (num value) Prints an ASCII character to the open file Description Prints an ASCII character to the open file. Common values: TAB = 9, LF = 10, CR = 13 Example fpc(9) fpd (num value) Prints an integer value to the open file Description Prints an integer value to the open file. Floating point values will be truncated. Example fpd(3) prints 3 fpd(3.23) prints 3 fpd(3.954) prints 3 fpd(4) prints 4 fpf (num value) Prints a floating point value to the open file Description Prints a floating point value to the open file. Example fpf(1.234) fpr () Prints a return (new line) to the open file Description Prints a return (new line) to the open file. Example fpr() fpt (str text) Prints a string to the open file Description Prints a string to the open file. Example fpt(\"Hello\") mpd (num value) Print an integer to the system console Description Prints the integer value to the system console Example mpd(6); mpf (num value) Print a floating point value to the system console Description Prints the floating point value to the system console. Example mpf(7.69); mpr () Print a new line to the system console Description Prints a new line to the system console Example mpr(); mpt (str printvalue) Print text to the system console Description Prints the text printvalue to the system console. Example mpt(\"System console printout\"); outputtreecontent (node containernode, str path+filename) Writes the data of all nodes in the tree under containernode to a text file Description Writes the data of all nodes in the tree under containernode to a text file on disk. If file does not exist, it will be created. For more functionality, use menu option: Stats | Model Documentation. Example outputtreecontent(model(),\"C:/MyModelDocumentation.txt\") print ([var value, var value2, ...]) Print the contents of the given parameters and a new line to the console Description This command takes 0 to 20 variants as parameters. Each parameter is printed to the console and separated by a space. After all the parameters are printed a new line character is printed to the console. The output console must be open to write to it. To open the console, use Debug > Output Console in the menu. Example print(\"Number:\", 1); print([1, 2]); This prints \"Number: 1\" and \"Array[2]: {1,2}\" on different lines of the output console. profileevents () Prints descriptions of all events currently in the event queue to the output console Description Prints to the output console descriptions of all of the events currently waiting in the event queue. The output console must be open to write to it. To open console, use menus View | Output Console. Example profileevents() report (obj containerobj, str path+filename, num append [0/1]) Description For developer use. Generate a standard report file in \"comma separated value\" (csv) format for all objects under containerobj which are currently selected. If append is 1, then the report will be appended to the end of the file specified. If append is 0, then either the file will be created or the existing file will be cleared before the report is written to it. Example report(model()); reportmode (int mode [0=general, 1=state]) Description For developer use. Set the report mode. (General or state.) Example reportmode(0); People getactiverole (treenode person) Description Return the person's active role Example getactiverole(token.Person) getcensus ([obj model/group/location]) Description Get the number of people in the model, a Location group, or an individual location Example int census = getcensus(Group(\"PodA\")); getnumpeopleresources (obj group [, num availability{0=available/1=acquired}, num priority]) Description Get the number of available/acquired objects in a people resource group. If a priority value is passed resources will also be considered available if a request of that priority would preempt the resource. Example int numAvailable = getnumpeopleresources(Group(\"PodA\")); getpeopleresourceutilization (obj object/group[, num mode{0=ByState/1=ByAcquires}]) Description Returns the utilization percentage of a people object or the average of all members of a people group. Example double utilization = getpeopleresourceutilization(Group(\"PodA\")); reacquirepreemptedresource (node token, node instance, node preemptedObject, node info, node activeProcess, num sameAsLast [, num newPriority]) Description Example reacquirepreemptedresource(token, current, preemptedObject, info, activeProcess); shiftscheduledownfunction (node downBehavior, node table, node downObject, double duration) Description Example shiftscheduledownfunction(lunch, shiftSchedule1, doctor, 400); Process Flow createtoken (obj instanceObject, obj/str activity, int start) Description Deprecated. Use Token . create . Example treenode token = createtoken(node(\"Operator1\", model()), \"Start\", 0); setlabel(token, \"type\", 1); releasetoken(token); executesubflow (obj/str processFlow [, obj instanceObject, str startActivity, str finishActivity]) Description Creates a token in a Process Flow Sub Flow which starts that sub flow. Once the created token hits a Finish activity it will return the value evaluted from the Return Value field. instanceObject: If the instanceObject is specified then current may be used by the activities in the Sub Flow to get access to the instanceObject. This can be useful when multiple objects execute the same Sub Flow but require object specific data. If no Start activity is specified, the activities in the Sub Flow will be searched and the first Start activity will be used. If multiple Finish activities are contained in the Sub Flow, the return value will be evaluated from whichever Finish activity the token enters. However, if internal sub flows cause other tokens to enter a Finish activity, it may be necessary to specify the Finish activity name so the correct return value is evaluated. NOTE: It is important that the activities used in the Sub Flow do not create delays or wait. If the token is interrupted by a delay or wait, the token will not arrive at the Finish activity when the executesubflow function finishes. Example return executesubflow(\"SubFlow1\", processor); getactivity (node/obj/str token/processFlow [, str activityName]) Description If the first parameters is a ProcessFlow object you must specify a string for the activity name. To get the current activity of a token, use Token . activity . Example treenode activity = getactivity(processFlow, \"Delay\"); getbatch (obj/str tokenOrBatch[, obj instanceObject, obj/str/num group]) Description Gets the batch in a Batch activity by token or Group By value. If a token is passed in as parameter 1, then the instanceObject and group parameters are not used. Example treenode batch = getbatch(token); treenode batch = getbatch(\"Batch\", current, 3); getchildtoken (node parentToken [, int childIndex]) Description Deprecated. Use Token . children [], or Token . children .length. Example treenode childToken = getchildtoken(token, 3); int numChildren = getchildtoken(token); getchildtokenrank (node childToken) Description Deprecated. Use Token . childRank . Example int childRank = getchildtokenrank(token); getlastacquiredresource (node resource, node token) Description Gets the last object acquired by the token from the resource. Example treenode operator = getlastacquiredresource(operatorResource, token); getparenttoken (node token) Description Deprecated. Use Token . parent . Example treenode parentToken = getparenttoken(token); getprocessflowvar (obj/str processFlow, str varname[, node token]) Description Gets the value for the Process Flow Variable. The processflow parameter can either be a reference to the Process Flow object in the Tools or the name of the Process Flow object. Example double processTime = getprocessflowvar(processflow, \"processTime\"); treenode processor = getprocessflowvar(processflow, \"processor\", token); gettoken (obj instanceObject, obj/str activity, num index) Description Gets the token at the index of the activity for the given owner object (instance). Example treenode token = gettoken(fixedResource, activity, 3); treenode token = gettoken(processor3, \"Wait for Conveyor\", 2); gettokenbyid (num id [, obj/str processFlow]) Description Deprecated. Use Token . byID . Example treenode token = gettokenbyid(54); treenode token = gettokenbyid(23, \"ProcessFlow2\"); gettokenid (node token) Description Deprecated. Use Token . id . Example int tokenID = gettokenid(token); gettokens (obj instanceObject, obj activityOrAsset[, num flags]) Description Gets all the tokens \"inside\" an activity or shared asset. For activities, this is the current set of tokens in the activity. For resources, it is the set of tokens who have acquired the resource. For zones, it is the set of tokens that have entered the zone. For a list, it is the set of tokens who have been pushed to the list. Returns an Array containing the result. instanceObject - The object associated with the desired process flow instance. For general process flows this is the same as the process flow itself. For object process flows, it is the 3D object, i.e. task executer or fixed resource, associated with the process flow instance. If executed from within process flow activity logic, this will usually just be \"current\". If you pass NULL here, it will get tokens for all instances. activityOrAsset - The target activity or shared asset. If NULL, the command will return all active tokens in the entire process flow instance. flags - Defines optional flags. If GET_TOKENS_REQUESTS is passed for a shared asset, it will return the set of tokens requesting the shared asset (i.e. tokens waiting to enter a zone, tokens back ordering on a list, etc.). Example Array tokensInActivity = gettokens(current, getactivity(processFlow, \"Wait For Exit\")); Array resourceOwners = gettokens(current, getactivity(processFlow, \"Resource1\")); releasebatch (node batch, int failed [, int/str/obj connector]) Description Releases batch from a Batch activity. If failed is 1, all tokens in the batch will be released and the release quantity and label values will be ignored. Example releasebatch(batch, false); releasebatch(batch, true, \"Failed\"); releasebatch(batch, true, getactivity(processFlow, \"Garbage\")); releasetoken (node token [, int/str/obj connectorOrActivity]) Description Deprecated. Use Token . release (). Example releasetoken(token); releasetoken(token, 3); releasetoken(token, \"To Start\"); releasetoken(token, getactivity(processFlow, \"Start\")); releasewave (node wave) Description Releases the wave from a Synchronize or Join activity. If the wave is in a Synchronize activity, tokens will exit the activity through the same connector rank that they entered through. If the wave is in a Join activity, the first token added to the wave will exit the activity. Example releasewave(wave); settokencolor (node token, num red{0-255}, num green{0-255}, num blue{0-255} [, num alpha{0-255}]) Description Deprecated. Use Token . setColor . Example settokencolor(token, 100, 100, 0, 255); settokenshape (node token, num index) Description Deprecated. Use Token . setShape . Example settokenshape(token, 16); zonecheckrequests (obj instanceObject, obj/str zone) Description Reevaluates all tokens in a zone's request list. Example zonecheckrequests(fixedResource, \"Zone 1\") zonegetpartitionvaluefortoken (obj zone, obj token) Description Gets the partition value for a token in the given zone. Example zonegetpartitionvaluefortoken(zone, token) zoneistokeninsubset (obj zone, obj token, str subsetName) Description Determines whether the given token is in the named subset of the given zone Example zoneistokeninsubset(zone, token, \"MySubset\") Rack Object Commands for accessing and assigning data on Rack objects. rackdrawfilledcell (obj rack, num bay, num level, num x, num y, num z, num sx, num sy, num sz, num red, num green, num blue) Draws a box in the rack's given bay and level Description Draws a box in the rack's given bay and level. x,y, and z are numbers between 0 and 1 representing the percentage into the cell to start drawing the box. sx, sy, and sz are numbers between 0 and 1 representing the size percentage of the box. Red, green and blue specify the color of the box. To ensure that the boxes are drawn correctly, you should disabled OpenGL textures with fglDisable(GL_TEXTURE_2D) before calling this command in a draw trigger. Example fglDisable(GL_TEXTURE_2D); for (int bay = 1; bay <= 5; bay++) { for (int level = 1; level <= 3; level++) { rackdrawfilledcell(current, bay, level, 0,0,0, 0.5,1,1, 255,0,0); } } fglEnable(GL_TEXTURE_2D); This example draws red boxes in bays 1-5, levels 1-3, that fill half of each cell's volume (sx = 0.5, sy =1, sz = 1). rackdrawvirtualcontent (obj rack, num bayfillperc, num levelfillperc, num itemdepth, num red, num green, num blue, num virtualonly) Draw the rack's virtual content Description Draws the rack's \"virtual\" content. This command will usually only be used if you are recycling flowitems using the rackrecycleitem command. When this command is executed, the rack goes through its content table, and draws a box for every flowitem in the rack, at its appropriate bay and level. If virtualonly is 1, then it will only draw a box in spots where a slot is filled, but no flowitem is present (the flowitem has been recycled). Bayfillperc and levelfillperc are values between 0 and 1, and specify the percent of the cell to fill with the drawn box. Item depth is the size each item takes up in the rack. For a floor storage rack, this the z size of the items. For a regular rack, it is the y size of the items. Example rackdrawvirtualcontent(current, 0.9,0.9,3, 256,0, 0, 1); rackgetbaycontent (obj rack, num bay) Gets the number of flow items in the bay of the rack Description Returns the number of flow items in the specified bay of the rack Example int numitems = rackgetbaycontent(current, 5); Sets numitems to the number of flowitems in bay 5 of the current rack. rackgetbayloc (obj rack, num bay) Gets the x location of bay relative to the rack's origin Description Returns the x location of the given bay of the rack, relative to the rack's origin. Example rackgetbayloc(current, 5); Returns the rz of bay 5. rackgetbayofitem (obj rack, obj item) Gets the bay number of the rack that the item is placed in Description Returns the bay number of the rack that the item is placed in Example int baynum = rackgetbayofitem(current, item); Sets baynum to the bay number containing item in the current rack. rackgetbaysize (obj rack, num bay) Gets the x size of bay of the rack Description Returns the x size of the given bay of the rack. Example rackgetbaysize(current, 5); Returns the size of bay 5. rackgetcellcontent (obj rack, num bay, num level) Gets the number of flow items in bay and level of the rack Description Returns the number of flow items in the specified bay and level of the rack Example int numitems = rackgetcellcontent(current, 5, 3); Sets numitems to the number of flowitems in bay 5, level 3 of the current rack. rackgetcellvar (obj rack, num bay, num level, num varnum, node storagenode) Description Returns the value stored in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example int typeofcellitems = rackgetcellvar(current, 1,5,3, current.labels[\"storageData\"]); rackgetitembybaylevel (obj rack, num bay, num level, num itemrank) Gets a reference to an item in the bay and level of the rack Description Returns a reference to an item in the specified bay and level of the rack. Itemrank specifies the rank of the item in that cell. Example treenode theitem = rackgetitembybaylevel(current, 5, 4, 2); Sets theitem pointer to the second flowitem in bay 5, level 4 of the current object. rackgetitemcellrank (obj rack, obj item) Gets the item's rank within the rack's cell Description Returns the rank of the item within its given cell in a rack. Example int theRank = rackgetitemcellrank(current, item); rackgetlevelloc (obj rack, num bay, num level) Gets the y or z location of the level relative to the rack's origin Description Returns the y or z location of the given level of the rack, relative to the rack's origin. If the rack is a floor storage rack, this returns the y rz. If the rack is a normal rack, this returns the z rz. Example rackgetlevelloc(current, 5, 4); Returns the y or z location of bay 5, level 4. rackgetlevelofitem (obj rack, obj item) Gets the level number of the rack that the item is placed in Description Returns the level number of the rack that the item is placed in Example int levelnum = rackgetlevelofitem(current, item); Set the levelnum variable to the level number containing item in the current rack. rackgetlevelsize (obj rack, num bay, num level) Gets the y or z size of the level of the rack Description Returns the y or z size of the given level of the rack. If the rack is a floor storage rack, this returns the y size. If the rack is a normal rack, this returns the z size. Example rackgetlevelsize(current, 5, 4); Returns the y or z size of bay 5, level 4. rackgetnrofbays (obj rack) Gets the number of bays rack has Description Returns the number of bays that the rack has. Example return duniform(1,rackgetnrofbays(rack)); This returns a random number between one and the number of bays on the rack. This is the same as the \"Random\" option of the place in bay pick list. rackgetnroflevels ( obj rack [,num bay ] ) Gets the number of levels in the bay of the rack Description Returns the number of levels in the specified bay of the rack. If no bay parameter is passed into the function, then the nroflevels in the first bay will be returned. Example return duniform(1,rackgetnroflevels(rack, baynum)); This returns a random number between one and the number of levels on the chosen bay of the rack. This is the same as the \"Random\" option of the place in level pick list. rackrecycleitem (obj rack, obj item, num binrank) Recycles the flowitem into the flowitem bin Description Recycles the flowitem into the flowitem bin specified. This command is for advanced users, and should not be used unless you are prepared to do some debugging. Bin rank should be the rank of the flowitem in the flowitem bin (textured colored box = 5, etc.). When this command is called, the flowitem is recycled, but the spot where it is located is designated as taken, and further flowitems will be put into the rack as if this spot is already filled. This can significantly increase the speed of a model. Subsequent commands to rackgetbaycontent(), rackgetcellcontent(), etc. will return values as if the item were still there. However, rackgetitembybaylevel() will return NULL for an item that has been recycled and has yet to be restored. Make sure the item is not released or waiting for a transport before calling this command. Note that max content of the rack will not work properly if this command is used. Also you will need to eventually restore the item using the rackrestoreitem() command. Example rackrecycleitem(current, item, 5); This recycles the flowitem into the 5th ranked flowitem of the flowitem bin (usually the textured colored box). rackrestoreitem (obj rack, num binrank, num bay, num level, num position) Restores a flowitem from the flowitem bin into the bay and level Description Restores a flowitem from the flowitem bin into the given bay and level. Example rackrestoreitem(current, 5, 7, 3, 1); This restores a flowitem from the 5th ranked flowitem of the flowitem bin (usually the textured colored box) into bay 7, level 3, position 1 of the rack. racksetcellcontent (obj rack, num bay, num level, num contentval) Sets the virtual content of the rack's cell to contentval Description Sets the \"virtual\" content of the rack's cell to the specified value. This should only be used if you are recycling and restoring items to the rack with rackrecycleitem() and rackrestoreitem(). You will usually use this command to set an initial \"virtual\" content on reset. Example racksetcellcontent(current, 5, 3, 2); racksetcellvar (obj rack,num bay, num level, num varnum, num setvalue, node storagenode) Description Sets the value in a three dimensional table with rows representing the rack's bays, columns representing the rack's levels, and sub-nodes of table cells representing different stored values for each cell of the Rack. This allows you to store custom information for each cell of the rack. Bay, level, and varnum reference bay (row), level (column), and variable number (sub-node rank) in the table. Setvalue is the value to set it to. storagenode references the node you have stored this table on. Usually this should be a label on the Rack. Example racksetcellvar(current, 5, 3, 2, 4.6, current.labels[\"storageData\"]); This sets the 2nd value of bay 5, level 3 to 4.6 Statistics Commands for creating, manipulating, and accessing statistical data; including probability distributions. addbundleentry (node datanode[, field1val, field2val, ...]) Adds a new entry to the bundle (base 0) Description Adds a new entry to the bundle (base 0). All fields must be added before adding entries. The optional field values will be added to the fields in the given order. Up to 29 field values can be given. For bundles with more fields, use setbundlevalue. Example int lastentry = addbundleentry(x, time(), current.subnodes.length); addbundlefield (node datanode, str fieldname, num type[, num maxstrsize]) Adds a field to the bundle Description Adds a field to the bundle with the given field name. Returns the field rank (base 0) of the added field. All fields for a bundle must be added before any entries are added. The type is a bitwise flag that must be one of the following values: BUNDLE_FIELD_TYPE_DOUBLE : stores a 64-bit double BUNDLE_FIELD_TYPE_FLOAT : stores a 32-bit float BUNDLE_FIELD_TYPE_INT : stores a 32-bit integer BUNDLE_FIELD_TYPE_STR : stores a string. If used, you should also define the maximum string size, which will be the space allocated for each string entry. If maxstrsize is unspecified, the default will be 32 bytes. The field will be able to store strings at least as long as the specified length, and any longer strings will be truncated. BUNDLE_FIELD_TYPE_VARCHAR: stores a string. This field type does not impose a limit on string length. This field type is recommended if you need variable string lengths, or if strings are frequently repeated. BUNDLE_FIELD_TYPE_NODEREF : stores a reference to a node BUNDLE_FIELD_TYPE_BINARY : stores a 1 or 0 as a single bit. Bits are allocated in blocks of 32, so that one binary field requires 32 bits. However, 32 binary fields can share a single block. You can optionally bitwise combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_INDEX_MAP. All values in this type of field will be indexed for quick lookup ( O(log n) ) using getbundleindexentries(). You can optionally combine BUNDLE_FIELD_TYPE_INT, BUNDLE_FIELD_TYPE_STR, BUNDLE_FIELD_TYPE_VARCHAR, or BUNDLE_FIELD_TYPE_NODEREF with BUNDLE_FIELD_INDEX_HASH. All values in this type of field will be indexed for quick lookup ( O(1) ) using getbundleindexentries(). This type of field is only recommended for use with bundles that rarely, if ever, change size while the model is running. You can optionally combine any of the above values (except BUNDLE_FIELD_TYPE_BINARY) with BUNDLE_FIELD_NULLABLE, to allow those fields to contain null values. If a field is nullable, you can pass a null Variant in to setbundlevalue(), and it is possible to get a null Variant from getbundlevalue(). Example addbundlefield(x, \"Object Name\", BUNDLE_FIELD_TYPE_STR | BUNDLE_FIELD_NULLABLE, 64); bernoulli (num prob, num succeed-value, num fail-value[, num stream]) Returns one of two possible values, based on the given probability Description bernoulli( p , a , b , stream ) is a discrete probability distribution. Inputs: p is the probability that a will be returned; where p ∈ ( 0, 100 ) 100 − p is the probability that b will be returned. a ∈ ( - ∞ , ∞ ) b ∈ ( - ∞ , ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , b } mean = ( a p + b (100− p ) ) ⁄ 100 variance = ( p ⁄ 100)(1 − p ⁄ 100) when a =1 and b =0 Possible Applications: Used to model a random occurrence that has two possible outcomes such as a pass/fail test. It is possible to generate more than two values by nesting bernoulli commands; however, it is better to use empirical distributions in these cases. Comments: The bernoulli( p , 1, 0) and binomial(1, p ) distributions are the same. Example treenode curoperator = current.centerObjects[bernoulli(90,1,2,1)]; The bernoulli command in this example has a 90 percent probability of returning 1 otherwise it will return 2, using random number stream 1. It is used within a centerObject reference such that 90 percent of the time curoperator references the object connected to center port 1 of the current object, otherwise curoperator references the object connected to center port 2. beta (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a beta distribution Description beta( a , b , α 1 , α 2 , stream ) is a bounded continuous probability distribution. Inputs: a is the lower-endpoint parameter ∈ ( - ∞ , ∞ ) b is the upper-endpoint parameter( b > a ) α 1 is the 1 st shape parameter ( 0, ∞ ) α 2 is the 2 nd shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( a , b ) mean = a + α 1 ( b − a ) ⁄ ( α 1 + α 2 ) variance = α 1 α 2 ( b − a )² ⁄ ( α 1 + α 2 )²( α 1 + α 2 + 1) Probability Density Functions: Possible Applications: The beta distribution is often used to model task durations in the absence of real data because it can be definitively bounded between a minimum and maximum value, and it can take on a number of different probability density shapes depending on the two shape parameters used. For most real world task durations, the density shape will have a longer right tail than a left, so if you know the mean μ and the mode (most likely value) m , you can back calculate suitable shape parameters with the following equations: α 1 ≅ ( μ − a )(2 m − a − b ) ⁄ ( m − μ )( b − a ) α 2 ≅ α 1 ( b − μ ) ⁄ ( μ − a ) Comments: The beta( a , b , 1, 1) and uniform( a , b ) distributions are the same. The density is symmetric about ( a + b ) ⁄ 2 when α 1 = α 2 . The density will have a hump and longer right tail when α 2 > α 1 > 1. The mean and mode are equal when α 1 = α 2 > 1. Example double ptime = beta(8, 12, 1.3, 3, 5); The ptime variable is set equal to a beta distribution having a minimum value of 8, a maximum value of 12, and shape factors of 1.3 and 3 for α 1 and α 2 respectively. FlexSim's random stream number 5 will be used to generate variates from the distribution. The distribution density will have a nice humped curve with a long right tail. binomial (num trials, num prob[, num stream]) Returns a random sample from a binomial distribution Description binomial( t , p , stream ) is a discrete probability distribution used to represent the number of successes in t independent Bernoulli trials with probability p of sucess on each trial. Inputs: t is the number of independent trials { 1, 2, ..., ∞ }. p is the probability of success for any given trial (0, 100) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { 0, 1, 2, ..., t } mean = t p ⁄ 100 variance = t ( p ⁄ 100 )( 1 − p ⁄ 100 ) Possible Applications: The binomial distribution is useful for modeling the number of defective parts in a batch of size t , or the actual number of people in random size groups, or maybe the number of items ordered from inventory. Comments: The binomial(1, p ) and bernoulli( p , 1, 0 ) distributions are the same. The binomial( t , p ) distribution is symmetric when p = 50 percent. Example int fparts = binomial(item.batchsize, 10, 5); The number of failed parts will be written to the fparts variable based on a 10% probability that any given part will fail within a batch quantity defined by a label on the flowitem named \"batchsize\". FlexSim's random stream number 5 will be used to generate variates from the distribution. calculateconfidence (num stddev, num nrofdatapoints, num confidence) Description For developer use. Calculates the confidence interval for the given standard deviation and number of data points. The return value is the distance on one side of the interval from the sample mean. This uses the t distribution to calculate the confidence interval. Confidence values must be either 90, 95, or 99. This is used in the experimenter to calculate the confidence intervals for the mean of performance measures for each scenario. Example calculateconfidence(5.82, nrofsamples, 90) cauchy (num location, num scale[, num stream]) Returns a random sample from a cauchy distribution Description Generates a continuous random variate from a cauchy distribution with parameters as defined. Example cempirical (str/node/num table[, num stream]) Returns a random sample from a continuous empirical distribution Description A continuous empirical distribution with percentages and values defined in the table specified. Empirical distributions reference tables created by the user that contain a list of values and probability percentages associated with each value. Probability percentages must be entered in column 1 starting with row 1 of the table, and the associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. There are three commands in FlexSim that can be used to generate random variates from the empirical distributions defined in tables. The three commands are dempirical(), empirical() and cempirical(). The first one is a discrete distribution and will return the explicit values listed in the table. The next two are bounded continuous distributions, meaning they return a continous number within a range. The values in column 2 for the continuous distributions must be in ascending order because they will interpolate values between two adjacent values in the table. Let's assume we have a table with 4 rows and 2 columns. In column one are the percentages 10, 20, 30 and 40 adding up to 100 percent. In column two are the values 0.1, 0.2, 0.3 and 0.4. Now let's see the differences between the discrete empirical command and the two continuous empirical commands. The discrete command will only generate random variates that match exactly the values that were entered into column two of the table. The continuous commands will generate random variates that are real numbers uniformly distributed between two adjacent numbers in column two of the table. The difference between the two continuous commands is in how the bounds of the uniform ranges are defined. The command dempirical(\"mytable\") will return the number 0.1 for ten percent of the samples, the number 0.2 for twenty percent of the samples, the number 0.3 for thirty percent of the samples, and the number 0.4 for forty percent of the samples assuming a very large sample set. The command empirical(\"mytable\") will return a number uniformly distributed between 0.1 and 0.2 for ten percent of the samples, a number uniformly distributed between 0.2 and 0.3 for twenty percent of the samples, a number uniformly distributed between 0.3 and 0.4 for thirty percent of the samples and a number uniformly distributed between 0.4 and 0.4 for forty percent of the samples. If you want the last forty percent to be between 0.4 and 0.5 instead of 0.4, add a 5th row with column one being a value of 0 and column two being 0.5 or the desired upper bound. The command cempirical(\"mytable\") will return a number uniformly distributed between 0.0 and 0.1 for ten percent of the samples, a number uniformly distributed between 0.1 and 0.2 for twenty percent of the samples, a number uniformly distributed between 0.2 and 0.3 for thirty percent of the samples and a number uniformly distributed between 0.3 and 0.4 for forty percent of the samples. You can define a lower bound for the first ten percent to be a value different than 0.0 by adding a row to the beginning of the table (row 1) where column one is a value of 0 and column two is 0.05 or the desired lower bound. Here is a summary in tabular form showing the possible return values (\"x\") for each of the three distribution functions: Here is an example of adding a \"dummy\" first row so that cempirical() starts at 0.05 instead of 0.0 (notice that row 1 has a probability of 0 percent): Here is an example of adding a \"dummy\" last row so that empirical() has a range between each value including the last (any number can be entered for the percent of the last row because the percents already add up to 100% with the previous row, so it doesn't matter what it is): When using ExpertFit to determine an empirical distribution that matches your data, you need to be aware that if your data has been defined as integers, then ExpertFit will fit it for use with dempirical(), and if your data has been defined as real numbers, ExpertFit will fit it for use with empirical(). When your data set is composed of real numbers, ExpertFit will show the same percentage for the last value as for the previous to last value, but you'll notice that the percents add up to 100% with the second to last entry. Example cempirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. cempirical(current.labels[\"ptime\"] 5); Returns a random variate from a continuous empirical distribution defined in a node table defined on a label named \"ptime\" of the current object, and using random number stream 5. clearbundle (node datanode[, num resetflags = 0]) Clears all bundle data Description Clears the bundle data associated with datanode. This will clear all entries as well as all fields in the bundle. resetflags is a bitwise mask for flags to initialize the bundle by. Valid values are: BUNDLE_FLAG_UNPAGED = 0x1 - The bundle's entries will be stored in an unpaged, contiguous block of memory. BUNDLE_FLAG_IR_OPT = 0x10 - The bundle will use additional memory (32 bits per row) to improve insert/remove performance for rows in the middle of the bundle. Example clearbundle(x); dataplot (obj tree, num type, num action, num x, num y, num z) Description For developer use. This command lets you create, reset or add data to a histogram, x/y chart, or a data series. The first three parameters define the associated node in the tree as well as the operation to do. The last three parameters, x,y and z, define the appropriate data for the operation. The first parameter should be the main node in the tree that holds the graph/histo data. The second parameter should be either 1, 2, or 3, and defines the type of data that the node holds. 1 means graphx data. For this data type the node contains a list of sub-nodes, and each sub-node contains a number that is a unique point in a data series. 2 means graphxy. For this data type, the node again contains a list of sub-nodes but this time the sub-nodes are paired together as x/y pairs. Nodes ranked 1 and 2 hold the x and y values for one data point, nodes 3 and 4 hold x and y values for the next data point, etc. A type parameter of 3 means histo data. Here the node holds data associated with a histogram. The action parameter should be either 1, 2, or 3, and defines the action that you want to do. 1 means a create operation. This is only needed for histogram type data, as it needs to set up the node's sub-tree structure. To create a histogram plot, pass the minimum value for the histogram as the x parameter, the maximum value of the histogram as the y value, and the number of divisions, or buckets, as the z parameter. An action parameter value of 2 means you want to reset the data. This will clear the content of the node for graphx or graphxy data, and will reset the histogram values for histogram data. An action parameter value of 3 means you want to add a data point. For graphx and histo data, pass the data point as the x parameter. For graphxy data, pass the as the x and y paramters. In summary: Type: 1-graphx/2-graphxy/3-histo. Action: 1-create (only needed for histo data)/2-reset/3-add point. Data: x,y are data points [histo create: x=start, y=end, z=nr of divisions]. Example dataplot(stats_contentgraph(model.find(\"Processor2\")),2,3,8.6,5,0); This adds a point to Processor2's content graph for time 8.6 and content 5. This example is only for demonstration purposes. You should never need to do this since the Processor automatically maintains its content graph. dempirical (str/node/num table[, num stream]) Returns a random sample from a discrete empirical distribution Description A discrete empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example int ptype = dempirical(\"prodtypes\", 5); Assigns a value to the ptype variable using a discrete empirical distribution defined in a global table named \"prodtypes\" using random number stream 5. dempirical(current.labels[\"route\"], 5); Returns a random variate from a discrete empirical distribution defined in a node table defined on the label named \"route\" of the current object, and using random number stream 5. duniform (num min, num max[, num stream]) Returns random integer between the min and max Description duniform( a , b , stream ) is a bounded discrete probability distribution. Inputs: a is the lower-endpoint parameter b is the upper-endpoint parameter a and b are integer numbers where a < b b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = { a , a +1, ..., b } mean = ( a + b ) ⁄ 2 variance = ( ( b − a + 1)²− 1 ) ⁄ 12 Possible Applications: Used to approximate a quantity that is felt to be randomly varying between a and b , but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any discrete (integer) number inbetween will be returned. Example duniform(1, 6, 3); Random number stream 3 will be used to generate a random variate from a discrete uniform distribution having a minimum value of 1 and a maximum value of 6. This simulates the roll of a dice. empirical (str/node/num table[, num stream]) Description A continuous empirical distribution. The table referenced must contain a list of values and probability percentages associated with each of the values. Probability percentages must be entered in column 1 starting with row 1 of the table, and their associated values are entered in column 2. The table may have as many rows as needed to define as many values as desired. The percents are entered as numbers between 0 and 100, and should add up to a total of 100 percent; otherwise any values defined after a cumulative percentage of 100 is reached will never be returned. A detailed description of the three empirical distributions used in FlexSim and their differences is included with the cempirical() command. Example empirical(\"mytable\", 5); Returns a random variate from a continuous empirical distribution defined in a global table named \"mytable\" using random number stream 5. empirical(current.labels[\"ptime\"], 5); Returns a random variate from a continuous empirical distribution defined in a table defined on a label named \"ptime\" on the current object using random number stream 5. erlang (num location, num scale, num shape[, num stream]) Returns a random sample from an erlang distribution Description erlang( γ , β , m , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) m is the shape parameter ∈ {1, 2, ... } stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + m β variance = m β ² Possible Applications: Used to model the time to complete some task such as assembly, customer service and machine repair. Comments: When γ = 0, this distribution is known as the m-Erlang( β ) distribution. The exponential( γ , β ) and erlang( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Example double servicetime = erlang(60, 2, 4, 5); The servicetime variable is set equal to a erlang distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, using random stream number 5. The mean is 100 + (2*4) = 108. exponential (num location, num scale [, num stream]) Returns a random sample from an exponential distribution Description exponential( γ , β , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ² Possible Applications: Often used to model the interarrival times of a continous stream of customers and/or customer orders into a system. It is also a popular distribution for modeling the time between failure of mechanical equipment. Comments: Variates less than the mean occur much more frequently than variates greater than the mean. The exponential distribution is the only continuous distribution with the memoryless property of producing totally independent variates. If the location parameter ( γ ) is set to zero, then β becomes the mean, and the distribution's variates will range between zero and infinity. The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. Example exponential(0, 10, 5); An exponential distribution with a location of 0 and a scale of 10 (mean = 10). FlexSim's random stream number 5 will be used to generate variates from the distribution. exportdataset (node datatree, str filename, num format[, str wrOption = \"w\"]) Description Export tree dataset to .CSV (Comma Separated Value) format. the format parameter can be: 1 = table 2 = graph 3 = graphxy This implements the opposite functionality of importdataset(). Refer to importdataset() for more information. Example exportdataset(so(),\"mydataset.csv\",1) extremevalue1a (num location, num scale[, num stream]) Returns a random sample from a extremevalue1a distribution Description Generates a continuous random variate from a extremevalue1a distribution with parameters as defined. Example extremevalue1b (num location, num scale[, num stream]) Returns a random sample from a extremevalue1b distribution Description Generates a continuous random variate from a extremevalue1b distribution with parameters as defined. Example gamma (num location, num scale, num shape[, num stream]) Returns a random sample from a gamma distribution Description gamma( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + α β variance = α β ² Probability Density Functions: Possible Applications: Used to model the time to complete some task such as assembly, customer service or machine repair. Comments: The exponential( γ , β ) and gamma( γ , β , 1 ) distributions are the same. For a positive integer m , the gamma( γ , β , m ) and erlang( γ , β , m ) distributions are the same. Shape values less than 1 are rarely used. Example double repairtime = gamma(60, 2, 3.4, 5); The repairtime variable is set equal to a gamma distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. The mean is 100 + (2*3.4) = 106.8. geometric (num prob[, num stream]) Returns a random sample from a geometric distribution Description Generates a discrete random number with a geometric distribution and parameters as specified. Example getbundlefieldname (node datanode, num fieldnr) Gets the name of the nth ranked field (base 0) in the bundle Description Returns the name of the nth ranked field (base 0) in the bundle. Example string fieldname = getbundlefieldname(x, 5); getbundlefieldnr (node datanode, str fieldname) Gets the rank of the bundle field (base 0) Description Returns the rank of the bundle field (base 0). If the bundle field doesn't exist, returns -1. Example int index = getbundlefieldnr(x, \"Field Name\"); getbundlefieldtype (node datanode, num fieldnr) Gets the data type of the bundle field at rank fieldnr (base 0) Description Returns the data type of the bundle field at rank fieldnr (base 0). Available return values are: BUNDLE_FIELD_TYPE_DOUBLE BUNDLE_FIELD_TYPE_FLOAT BUNDLE_FIELD_TYPE_INT BUNDLE_FIELD_TYPE_STR BUNDLE_FIELD_TYPE_VARCHAR BUNDLE_FIELD_TYPE_NODEREF Example int type = getbundlefieldtype(x, 5); getbundleindexentries (node datanode, str/num field, str/num value) Gets all rows with a matching value in the given field Description If this command succeeds, it returns an int or an intarray containing all entries (0-based) that contain the given value for the given field. If it fails, it returns -1. It will fail if the datanode is not a bundle, or if the given field is not an indexed field, or if none of values in the field match the given value. See the addbundlefield command for information on how to make an indexed field. Example int entryNr = getbundleindexentries(data, \"SKU\", \"FS2016-BLU\"); getbundlenrentries (node datanode) Gets the total number of entries in the bundle Description Returns the total number of entries in the bundle. Example int nrentries = getbundlenrentries(x); getbundlenrfields (node datanode) Gets the total number of fields in the bundle Description Returns the total number of fields in the bundle. Example int nrfields = getbundlenrfields(x); getbundlevalue (node datanode, num entrynr, str/num field) Gets the value of the defined entry (base 0) and field (base 0) of the bundle Description Returns the value of the defined entry (base 0) and field (base 0) of the bundle. Example string name = getbundlevalue(x, 5, \"Object Name\"); getdatastat (num stat, num/node nrSamples/parentNode, num sampler [, num p1, num p2, num p3]) Description Calculates and returns a certain statistic of a data set. stat - Can be one of the following values STAT_MEAN - calculates the sample mean of the set STAT_MIN - calculates the minimum value in a defined range of values. p1 is the first element in the range (default is the first element in the set), p2 is the last element in the range (default is the last element in the set), and p3 defines a stride, allowing you to look at every nth value (default 1). If either of p1, p2, or p3 is 0, then it will revert to that value's respective default. STAT_MAX - calculates the maximum element in a defined range of values. p1, p2 and p3 are the same as for STAT_MIN STAT_VARIANCE - calculates the unbiased variance of the data set STAT_STD_DEV - calculates the unbiased standard deviation of the set STAT_SUM - calculates the sum of the set STAT_CONF_INTERVAL_HALF_WIDTH - calculates the confidence interval half-width of the set. Pass in p1 to define the desired confidence percentage. FlexSim will return precise values for percentages at 80%, 90%, 95%, 98%, 99%, and 99.8% and for sample sizes at or below 100 degrees of freedom. For percentages not in this set, FlexSim will \"clamp\" it to the nearest percentage ABOVE the percentage passed in. So if you pass in a 75%, it will return an 80% confidence interval. Since an 80% confidence interval will be a \"wider\" interval, we clamp up to be \"safer\" with the wider interval. Confidence intervals above 99.8 will simply return 0 (i.e. not valid). For degrees of freedom above above 100, it will assume 100 degrees of freedom. nrSamples - defines the number of samples in the set. Note: parameter 2 as a parentNode is deprecated and you should use the parameter 2 as nrSamples option because it encompasses the other and is more flexible. The following deprecated functionality: getdatastat(STAT_MEAN, myNode, 0, 0, 0, 0) can be represented using the newer option with: getdatastat(STAT_MEAN, myNode.subnodes.length, myNode.subnodes[count].value, 0, 0, 0) sampler - an expression that gets the nth value in the sample. Use count for determining which value is to be retrieved. Below are several examples: For calculating the mean of all values in column 5 of global table GT1: getdatastat(STAT_MEAN, Table(\"GT1\").numRows, Table(\"GT1\")[count][5]) For calculating the sum of all values in field \"Time\" of a bundle: getdatastat(STAT_SUM, Table(\"MyBundle\").numRows, Table(\"MyBundle\")[count][\"Time\"]) Example getstat (node object, str name, int flag [, var p1, var p2, var p3]) Returns the statistic value for the given object Description It is preferred to use Object . stats instead. Gets the specified statistic from the given object. name - The name of the statistic. Valid names can be enumerated using function_s(object, \"enumerateStatistics\", targetNode) . Documentation for the meaning of the various statistics that an object provides should be found in each object's documentation. The documentation may include spaces in the names of the statistics, for readability. In passing these as the name parameter to getstat(), you should remove all spaces. flag - Can be one of the following values STAT_CURRENT - returns the current value of this statistic STAT_MIN - returns the minimum value of this statistic STAT_MAX - returns the maximum value of this statistic STAT_AVERAGE - returns the average value of this statistic STAT_TIME_AT_VALUE - returns the total simulation time the stat spent at a given value (requires an additional p1/p2/p3 parameter designating the desired value). This is only valid if the stat is tracking its history or profile data, such as in objects' standard \"State\" statistics. See below for more information on this. p1 , p2 , and p3 are for providing \"requirements\" to resolve the correct statistic. For example, a list has several per-partition statistics. In order to get a partition's statistic, you need to pass the desired partition ID as p1. Requirements depend on the statistic that is being retrieved. There are also several special stat names that you can use. They are: \"State\", \"Output\", \"Input\", \"Content\", \"Staytime\". If you use one of these names, the command will return the corresponding standard statistic of the object. Examples: getstat(object, \"Output\", STAT_CURRENT) - returns the current (total) output of the object (same as object.stats.output) getstat(object, \"Content\", STAT_AVERAGE) - returns the average content of the object getstat(object, \"State\", STAT_CURRENT, 0) - returns the current state of the object (same as object.stats.state().value) getstat(object, \"State\", STAT_TIME_AT_VALUE, 0, STATE_IDLE) - returns the total idle time of the object (0 designates the state profile, i.e. the default state profile) getstat(object, \"Staytime\", STAT_MAX) - returns the maximum recorded stay time of the object Note that some stats that do not make sense will not return valid data, such as average state, or average output. STAT_TIME_AT_VALUE If you want to get the STAT_TIME_AT_VALUE access, the statistic needs to track either historical or profile data. If it is an object's standard \"State\" statistic, FlexSim will automatically make it track its profile data, so you don't need to do any extra work for that. For other statistics, however, you will need to explicitly \"subscribe\" to the statistic to make it track its profile or history data. Historical data records each change of value and the corresponding simulation time of that value change. Profile data records the total time the variable was at each value. Only non-negative integer values are valid for profile data. To subscribe to a tracked variable, first find where the tracked variable statistic is in the tree. For example if it's the \"Content\" statistic, you'll likely find it at object>stats/stats_content. Then call the following command on the node: function_s(statNode, \"addSubscriber\", needsHistory, needsProfile, persist). The needsHistory and needsProfile parameters are booleans telling which data you want to track. The persist is a boolean that tells if you want it to track these statistics indefinitely going forward. The tracked variable tries not to continue tracking extra data if it is not needed. If nobody subscribes to its data \"persistently\", then it will discontinue recording the data if it doesn't get subscribers for a while (I think after 5 or so model resets with no subscribers). Recording historical data will allow you to get the STAT_TIME_AT_VALUE access. However, using historical data for getting STAT_TIME_AT_VALUE is slower than if you track profile data. With historical data, it must traverse the entire history to calculate STAT_TIME_AT_VALUE, whereas if you track profile data, it stores the total time at the value directly in the profile data. Example getstatetableutilization (Table stateTable, TrackedVariable stateProfile) Description Returns the utilization of a state profile given a state table. See State Table for more information on how to create and modify a state table. Example getstatetableutilization(Table(\"StateTable1\"), Model.find(\"Processor1\").as(Object).stats.state()) getstream (node object) Returns a unique random stream associated with the object Description Returns a unique random stream associated with the object. Returns the number stored in the object's stream attribute. If the object does not yet own a stream attribute, or if its stream attribute is 0, FlexSim will assert the attribute and assign it a unique stream number. If the object passed into the function does not have object data, it will store the unique stream in a subnode. This subnode will be destroyed on model reset and reassigned during the model run as needed. Assigned streams start at stream 101 and increase as they are assigned. Example uniform(0, 1, getstream(current)) graphtohistogram (obj graph, obj histogram, num start, num end, num res, num xyformat) Description For developer use. Generate histogram data from a list of values. This command will generate a histogram inside the node histogram based on the occurrence table given by graph. Mainly used internally by objects. The starting value of the histogram is specified as start. The ending value of the histogram is specified as end. The number of buckets in the histogram is specified as res. If xyformat is 0, it assumes that the graph is a y format occurrence table. If xyformat is 1, it assumed the graph is an xy format occurrence table. Similar to makehisto(). Refer to makehisto() for more information on these similarities. Example graphtohistogram(so(),so().next,1,10,5,0) hypergeometric (num trials, num successes, num size[, num stream]) Returns a random sample from a hypergeometric distribution Description hypergeometric( t , m , n , stream ) is a discrete probability distribution used to represent the number of successes in t draws without replacement from a population of size n containing exactly m success states. Example importdataset (node datatree, str filename, num format) Description Import tree dataset from a Comma Separated Value (CSV) file. datatree should be the node to import the data into. There are 3 possible formats to import. If format is 1, then the data is imported as a table, meaning each sub-node of datatree is a row in the table, and each sub-node of each row is a cell in the table. This is the same as using the importtable() command. If format is 2, then the data is imported as a simple data series. The csv file is assumed to have one column, and each row's value is imported into a sub-node of datatree. If format is 3, then the data is imported as a series of x,y pairs. The csv file is assumed to have 2 columns. Row 1 column 1 of the csv file is imported as sub-node 1 of datatree, row 1 column 2 is imported as sub-node 2 of datatree, row 2 column 1 is imported as sub-node 3 of datatree, and so forth. Example importdataset(so(),\"C:\\\\mydataset.csv\",1) inversegaussian (num location, num scale, num shape[, num stream]) Returns a random sample from an inversegaussian distribution Description inversegaussian( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β variance = β ³ ⁄ α Probability Density Functions: Possible Applications: Used to model the time to complete some tasks. Comments: The inversegaussian( γ , 1, α ) and wald( γ , α ) distributions are the same. As γ approaches infinity, the distribution becomes more like the normal (Gaussian) distribution. The β parameter has elements of a shape parameter since it affects the skewness and kurtosis (width). Example double repairtime = inversegaussian(60, 2, 4, 5); The repairtime variable is set equal to a inversegaussian distribution with a location parameter of 60, a scale parameter of 2, a shape parameter of 4, and using random stream number 5. inverseweibull (num location, num scale, num shape[, num stream]) Returns a random sample from a inverseweibull distribution Description Generates a continuous random variate from a inverseweibull distribution with parameters as defined. Example invertedweibull (num location, num scale, num shape[, num stream]) Returns a random sample from an inverted weibull distribution Description Generates a continuous random variate from an inverted weibull distribution with parameters as defined. Example johnsonbounded (num min, num max, num shape1, num shape2[, num stream]) Returns a random sample from a johnson bounded distribution Description Generates a continuous random variate from a johnson bounded distribution with parameters as defined. Example johnsonunbounded (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a johnson unbounded distribution Description Generates a continuous random variate from a johnson unbounded distribution with parameters as defined. Example laplace (num location, num scale[, num stream]) Returns a random sample from a laplace distribution Description Generates a continuous random variate from a laplace distribution with parameters as defined. Example logarithmic (num theta[, num stream]) Returns a random sample from a logarithmic distribution Description Generates a discrete random variate from a logarithmic distribution with parameters as defined. Example logistic (num location, num scale[, num stream]) Returns a random sample from a logistic distribution Description Generates a continuous random variate from a logistic distribution with parameters as defined. Example loglaplace (num location, num scale, num shape[, num stream]) Returns a random sample from a log laplace distribution Description loglaplace( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β α ² ⁄ ( α ²− 1) for α > 1 variance = β ² α ² ( 2 α ² + 1 ) ⁄ ( α ² - 1 )² ( α ² - 4 ) for α > 2 Probability Density Functions: Possible Applications: Rarely used in defining processing times. Comments: This distribution is also known as the double-exponential distribution because its density curve is essentially two exponential curves back-to-back. Example loglaplace(0, 2, 8, 5); A loglaplace distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 8, and random stream number 5. loglogistic (num location, num scale, num shape[, num stream]) Returns a random sample from a log logistic distribution Description loglogistic( γ , β , α , stream) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( 0, ∞ ) α is the shape parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + β ( π ⁄ α )csc( π ⁄ α ) for α > 1 variance = β ²( π ⁄ α ){2csc(2 π ⁄ α ) − ( π ⁄ α )[csc( π ⁄ α )]²} for α > 2 Possible Applications: Used to model the time to perform some task. Example loglogistic(0, 1, 2, 5); A loglogistic distribution with a location (shift) of 0, a scale of 1, a shape factor of 2 and random stream number 5. lognormal2 (num location, num scale, num shape[, num stream]) Returns a random sample from a lognormal distribution Description lognormal() and lognormal2() are similar functions, but with different parameter definitions. lognormal() uses parameter definitions as defined on wikipedia and other sites. lognormal2() uses parameters as defined in the latest versions of Expertfit. Essentially, the parameters can be converted as follows: lognormal( location, normalmean, normalstdev ) = lognormal2( location, Math.exp( normalmean ), normalstdev ) lognormal2( location, scale, shape ) = lognormal( location, Math.log( scale ), shape ) (Math.exp(x) is e raised to the x power, and Math.log(x) is the natural logarithm of x.) Please make sure you use the right distribution. Using the wrong distribution could result in bad simulation results. Example double cycletime = lognormal2(0, 29.8, 0.31, 5); Set the cycletime variable to a lognormal2 distribution with location parameter 0, scale parameter 29.8, shape parameter 0.31, and random stream number 5. makehisto (obj datalist, obj histocontainer, num nrofbuckets) Description For developer use. Builds a histogram structure from the data list and puts it in the destination container node with the given number of buckets. This is similar to graphtohistogram() except that this command creates a more complete structure. To illustrate the operator instead., view a FlexSim object's attribute tree. The makehisto command will create the entire stucture of object>stats/staytime/staytimehisto, whereas graphtohistogram will only populate object>stats/staytime/staytimehisto/data. makehisto also assumes a standard, y data series structure, meaning each sub-node of datalist is its own data point (they are not paired as x/y values). Example makehisto(c.find(\"@>objectfocus+\"), c.find(\">histogram\"), 20) negbinomial (num successes, num prob[, num stream]) Returns a random sample from a negative binomial distribution Description Generates a discrete random variate from a negative binomial distribution with parameters as defined. Example normal (num mean, num stddev[, num stream]) Returns a random sample from a normal distribution Description normal(μ, σ, stream) is an unbounded continuous probability distribution. Inputs: μ is the location parameter ∈ ( - ∞ , ∞ ) σ is the scale parameter ( 0, ∞ ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( - ∞ , ∞ ) mean = μ variance = σ² Probability Density Functions: Possible Applications: Used to model various types of error such as machined hole diameters for large quantities of parts. This distribution is not used much in simulation because variance found in real processes do not typically follow a symmetric distribution such as this. Comments: The normal distribution is completely symmetric meaning values below the mean have the same probability for occurance as values above the mean. The mode and mean are equal for the normal distribution. When using this distribution, be aware that negative values can be returned, and therefore truncating the distribution at 0 may be necessary as shown in the example below. Example double thickness = Math.max(0.001, normal(5, 1.2)); The thickness is set a normal distribution having a mean of 5 and a standard deviation of 1.2 that is truncated for values less than 0.001. No random stream has been declared, so the default stream number 0 will be used to generate variates from the distribution. pareto (num min, num scale[, num stream]) Returns a random sample from a pareto distribution Description Generates a continuous random variate from a pareto distribution with parameters as defined. Example pearsont5 (num location, num scale, num shape[, num stream]) Returns a random sample from a pearson t 5 distribution Description Generates a continuous random variate from a Person-T5 distribution with parameters as defined. Example pearsont6 (num location, num scale, num shape1, num shape2[, num stream]) Returns a random sample from a pearson t 6 distribution Description Generates a continuous random variate from a Person-T6 distribution with parameters as defined. Example poisson (num mean[, num stream]) Returns a random sample from a poisson distribution Description Generates a continuous random variate from a poisson distribution with parameters as defined. Example qstudentt (num confidence [0.9/0.95/0.99], num degreesoffreedom) Description For developer use. Returns the quantity of the studentt distribution value for the given percent confidence and degrees of freedom. Example qstudentt(0.95, nrofsamples - 1) randantithetic (num on/off) Description Makes number streams antithetic. Using this command, users can switch random streams to generate numbers between 1 and 0; rather than the default of 0 to 1. This is helpful for determining if random numbers are having a big affect on the results of the model. It's also useful when experimenting with massive models and there isn't sufficient time to run the model for multiple iterations as required for good statistical sampling. The user can then choose to do just one regular run and one antithetic run of the model to obtain two diametrically apposed results. These two results can be averaged for an approximation that is somewhat better than if each run of the model used random stream generators without antithetic sampling. Example randantithetic(1); randinit (num stream, num seedvalue[, num seedvalue2, num seedvalue3, num seedvalue4, num seedvalue5, num seedvalue 6]) Initializes a random stream Description Initializes the random number stream by setting its first value to seedvalue. Although there are an unlimited number of random number streams available to the user, only the first one hundred streams numbered 0 through 99 have been initialized when the FlexSim application is opened. To create a new stream, simply execute the randinit() command for the new stream. For instance, executing randinit(105, 7628912) will create a new stream number 105 if it does not currently exist, and set its initial seed value to 7628912. If \"Repeat Random Streams\" has been selected in the Statistics menu, then streams 0 through 99 will be automatically initialized with a default seed value for that stream whenever the model is reset. For streams 100 and above, you must use the randinit() command to set their initial seed values if you wish to repeat their random streams. Any positive integer may be passed in as the seedvalue for a random number stream. If you pass in a seedvalue of 0 for random streams 0 through 99, it is a special case that will initialize them to their default seed values. seedvalues 2 through 6 are only used if you are using FlexSim's Combined MRG random number generator. To enable this generator, call maintenance(49,1) when your model opens. Example Example 1: randinit(5, 73241); Initialize FlexSim's random stream number 5 with a sead value of 73241. Example 2: randinit(2,0); for(int i = 100; i <= 199; i++) { randinit(i, realtime(1) * uniform(0, 1, 2)); } First initialize standard stream number 2 to its default seed value, then execute a loop for 100 iterations to create (if necessary) streams 100 through 199 and set their initial seed value to the product of a random number pulled from stream 2 and the current number of real clock seconds. randnext (num stream) Description For development use. Returns the next random number from the stream. This command is used to pull random samples from probability distribution functions. Example randnext(1); Gets the next random number in the stream of random numbers associated with stream generator number 1. randomwalk (num location, num scale, num shape[, num stream]) Description Generates a continuous random variate from a random walk distribution with parameters as defined. Example randstate (num stream[, seednr]) Gets the current state value for the random number stream Description Returns the current state value for the specified random number stream. This state value may be useful as the seed value in the randinit() command for the purposes of restarting a saved state model from the same point in the random number stream of the initial run. seednr is only needed if you are using FlexSim's Combined MRG random number generator, in which case the seednr should be a value 1-6 defining which seed value you want to get the state on. Refer to randinit() for using the Combined MRG. Example int curstate = randstate(5); Set the curstate variable to the current random integer value stream number 5. removebundleentry (node datanode, int entrynum) Removes the entry entrynum (base 0) of the bundle Description Removes the entry entrynum (base 0) of the bundle. Example removebundleentry(x, 2); removefirstbundleentry (node datanode) Removes the first entry in the bundle Description Removes the first entry in the bundle. For managing memory footprint of historical data. Example removefirstbundleentry(x); removelastbundleentry (node datanode) Removes the last entry of the bundle Description Removes the last entry of the bundle. Example removefirstbundleentry(x); setbundlevalue (node datanode, num entrynr, str/num field, num/str val) Sets the value of the entry (base 0) and field (base 0) of the bundle Description Sets the value of the defined entry (base 0) and field (base 0) of the bundle. Example setbundlevalue(x, 5, \"Object Name\", current.name); triangular (num min, num max, num mode[, num stream]) Returns a random sample from a triangular distribution Description Generates a continuous random variate from a triangular distribution with parameters as defined. Example uniform (num min, num max[, num stream]) Returns a random number between the min and max values Description uniform( a , b , stream ) is a bounded continuous probability distribution. Inputs: a and b are real numbers with a < b a is the location parameter defining the minimum variate b defines the maximum variate b − a is the scale parameter stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = [ a , b ] mean = ( a + b ) ⁄ 2 variance = ( b − a )² ⁄ 12 Possible Applications: Used to approximate a value that is felt to be randomly varying between a and b but hardly anything else is known. Comments: There is an equal probability that an a , or b , or any real number inbetween will be returned. The uniform(0, 1) distribution is essential in generating random variates from all the other distributions and will return a continuous set of random values between and inclusive of 0 and 1. Example uniform(12.3, 27.5, 3); Random number stream 3 will be used to generate a random variate from a uniform distribution having a minimum of 12.3 and a maximum of 27.5. weibull (num location, num scale, num shape[, num stream]) Returns a random sample from a weibull distribution Description weibull( γ , β , α , stream ) is a non-negative continuous probability distribution. Inputs: γ is the location parameter ∈ ( - ∞ , ∞ ) β is the scale parameter ( β > 0 ) α is the shape parameter ( α > 0 ) stream is a reference to one of FlexSim's random number streams {0,1,2,...} Outputs: range = ( γ , ∞ ) mean = γ + ( β ⁄ α ) Γ (1 ⁄ α ) where Γ () is the Gamma function. variance = ( β ² ⁄ α ) { 2 Γ (2 ⁄ α ) − 1 ⁄ α [ Γ (1 ⁄ α ) ] ² } Probability Density Functions: Possible Applications: The weibull distribution is commonly used when there is not sufficient data available because it can take on so many different shapes depending on the shape factor. It is a very common distribution used for representing the time between equipment failures, as well as the time to complete a manual task. Comments: The weibull( γ , β , 1 ) and exponential( γ , β ) distributions are the same. The weibull( γ , β , 2 ) and rayleigh( γ , β ) distributions are the same. The weibull distribution is skewed to the left if α > 3.6 Example weibull(0, 2, 3, 5); A weibull distribution with a location parameter of 0, a scale parameter of 2, a shape parameter of 3, and random stream number 5. Strings Commands associated with strings, string manipulation and string comparisons. asciistr (str string [, num index]) Description This command returns the ascii value of the character at the specified index (0-based) of the string. If index is not specified, the first character of the string is used. Example asciistr(\"fred\",1) returns 114, the ascii value of 'r' cdir () Description Returns a string of the path to FlexSim's install directory. Example string userpath = cdir(); For a standard installation this will return C:\\Program Files\\Flexsim3\\ currentfile () Gets the path to the currently open model Description Returns the path of the currently open model. Example currentfile(); documentsdir () Gets the full path to the currently active user's FlexSim Projects folder in My Documents Description Returns a full path to the currently active user's FlexSim Projects folder in My Documents Example documentsdir() executestring (str thestring[, node c, node i, obj eventdata]) Executes a string as flexscript Description Executes the given string as flexscript. Parameters 2-4 are the same as executefsnode. Example executestring(\"profileevents()\"); getdirbrowse (str initialdir, str message, node result) Opens a browser window to pick a directory Description Opens a browser window to pick a directory. destnode should have string data, and the directory path will be written to its text. Example getdirbrowse(documentsdir, \"A folder\", destnode) getpath (str truncatedpath) Returns the full file path of the truncated path Description Takes a truncated, or relative file path, and returns the full file path. Example string fullpath = getpath(\"fs3d\\\\texturebox.wrl\"); modeldir () Gets the path to the currently open model's directory Description Returns that path of the currently open model's directory. Example modeldir(); pdir () Description This command returns a string containing the path on the hard drive to the FlexSim's program directory. Example string flexpath = pdir(); This sets flexpath FlexSim's program directory. A typical installation would return C:\\Program Files\\FlexSim7\\program\\ as the string. pfile () Description For developer use. Returns the string attached to the end of the command line used to start the FlexSim application. Example If FlexSim was started with this command line: \"C:\\Program Files\\Flexsim7\\program\\flexsim.exe\" \"mymodel.fsm\" then a call to pfile() would return mymodel.fsm as a string. programdatadir () Gets the full path to the directory where FlexSim stores program data Description Returns a full path to the directory where FlexSim stores program data, such as the help documents. Example programdatadir() returns a string like \"C:\\ProgramData\\Flexsim\\Flexsim7\\\" replacedata_n (obj startnode, num value, num replacement) Description For developer use. Search/Replace number data matched under startnode. Only number data nodes are searched. Returns the total number of matches found. Example replacedata_n(main(),25,42) replacedata_s (obj startnode, str string, str replacement[, num replication]) Description For developer use. Search for a string data match under startnode and replace with the replacement string. Results appear in the output console. This function will recognize and replace substrings. The search is case-sensitive. Replication is currently not used. See searchdata_s(). Returns the total number of matches found. Example replacedata_s(main(),\"jack\",\"john\") replacename (obj startnode, str searchname, str replacement) Description For developer use. Replace all node names found to be a match with searchname that fall under startnode. This function requires an exact match and will not recognize substrings. Returns the total number of matches found. Example replacename(main(),\"jack\",\"john\") searchdata_n (obj startnode, num val) Description For developer use. Search for a number data match under startnode. Only number data nodes are searched. Results appear on the output console. Returns the total number of matches found. Example searchdata_n(main(),25) searchdata_s (obj startnode, str string [, num replication]) Description For developer use. Search for a string data match under startnode. Results appear in the output console. This function will recognize substrings and report which nodes contain them, and how many. The search is case-sensitive. Replication is currently not used. Returns the total number of matches found. Example searchdata_s(main(),\"glVertex()\",1) searchname (obj startnode, str searchname) Description For developer use. Search for a name match under startnode. Results appear in the output console. The search is case-sensitive. Returns the total number of matches found. Example searchname(main(),\"FixedResource\") strascii (num asciivalue) Description This command returns a string that contains the character whose ascii value is character. Example strascii(91) + \"alert(\" + strascii(34) + \"Hello There\" + strascii(34) + \")\" + strascii(93); This returns a string that contains the following phrase: [alert(\"Hello There\")] stringtoken (str token, str delimit) Finds the next token in a string Description Finds the next token in a string. The first parameter is a string containing delimited tokens. The second parameter is a string with a set of delimiter characters. Works similarly to strtok() in C++. Example string token = \"Jacob,Emma,Michael,Isabella,Ethan\"; string name = stringtoken(token,\",\"); while(stringlen(name)>0) { pt(name);pr(); name = stringtoken(NULL,\",\"); } This prints each name in the list to a different line of the output console. tostring (thing) Description For developer use. Assert as pchar string. Assert that the number val is of type char*. Only serves a real purpose in C++, but is safe to use in Flexscript. Example tostring(eventdata) truncatemediapath (str path) Description Returns a truncated media path based on the full path of the file passed. If this file exists relative to the model directory, then the path will be truncated to be relative to the model directory. It will also be truncated if it is relative to the FlexSim install directory. Example truncatemediapath(\"C:\\\\Program Files\\\\Flexsim4\\\\fs3d\\\\texturebox.wrl\"); This example will return the string \"fs3d\\\\texturebox.wrl\" userdatadir () Gets the full path to the directory where FlexSim stores user data Description Returns a full path to the directory where FlexSim stores user data, such as global preferences and compiler settings. Example userdatadir() returns a string like \"C:\\Users\\USERNAME\\AppData\\Roaming\\Flexsim\\Flexsim7\\\" Tables Commands for accessing, assigning and managing data in tables. exporttable (node exportnode, str filename[, num exportcolumnnames = 0, num exportrownames = 0, str listseparator = 0, str decimalseparator = 0]) Export a table in .CSV format Description Export a table in .CSV (Comma Separated Value) format. Example exporttable(so(),\"mytable.csv\",1, 1) This exports the table designated as so(), including row and column headers. importtable (node importnode, str filename[, num importcolheaders = 0, num importrowheaders = 0, str listseparator = 0, str decimalseparator = 0, str thousandseparator = 0]) Imports table data into importnode from a csv file. When importing both row and column headers, the first value in the file will be skipped. When importing into a bundle table, each field will use the data type of its first imported cell (row 1). Description Imports table data into the node from a csv (comma-separated values) file. Example importtable(current.labels[\"data\"], \"C:/modeldata.csv\", 1, 1) TaskExecuter Object Commands associated with TaskExecuter objects and a tasksequence. addsphere (obj object, num x, num y, num z, num radius) Description For developer use. Adds a collision sphere with the specified radius to the specified object at location x, y, z relative to the object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed. Example addsphere(Processor1, 2, -1.25, .75, 1); changepersonvisuals (treenode person, string category, num/string index [, Array color]) Change the person's visuals (Head, Hair, Skin Texture, Clothes) Description Change the person's visuals (Head, Hair, Skin Texture, Clothes). This can be done dynamically during the model run. Example changepersonvisuals(person, \"Shirt\", \"Scrubs\", Color.red) createcoordinatedtasksequence (obj dispatcher) Create a new, empty coordinated task sequence Description Create a new, empty coordinated task sequence on the specified Dispatcher. Must be followed at some point by dispatchcoordinatedtasksequence. Example createcoordinatedtasksequence(current.centerObjects[1]); dispatchcoordinatedtasksequence (obj tasksequence) Dispatches the coordinated task sequence Description Dispatches the specified coordinated task sequence. Must be called after calling createcoordinatedtasksequence(). Example dispatchcoordinatedtasksequence(newts); distancetotravel (obj traveler, obj destination) Gets the distance a traveler would need to travel to reach destination Description Returns the distance that a traveler (Operator, Transporter, etc) would need to travel in order to reach the given destination. If the object is connected to a network, then it will return the travel distance along the network. Example distancetotravel(current.centerObjects[1], current); drawspheres (obj object, obj view) Description For developer use. Draws the collision spheres assigned to the specified object. TaskExecuters allow users to add collision spheres and draw collision spheres through the object's Parameters window, but commands are needed to add and draw collision spheres to other objects when needed Example drawspheres(current,view); freeoperators (obj taskexecuter, obj involved) Release all operators connected to taskexecuter that are working on involved Description Release all operators connected to the specified dispatcher that are currently working on the involved object. This command should be executed from a trigger when you want to release operator(s) that you have called to a process using the requestoperators command or using a utilize task. The first parameter can be either a dispatcher connected to operator(s) that you want to free, or it can be the operator itself. The second parameter is a key for releasing the appropriate operator(s). If you have called the operator(s) using the requestoperators command, then the second parameter of the freeoperators command should match the third parameter of the requestoperators command. If you have given an operator a utilize task, then the second parameter of the freeoperators command should match the involved1 parameter of the utilize task. You would probably execute this command from a trigger like OnProcessFinish or OnSetupFinish. For more information, refer to the task sequence section of the user manual. Example freeoperators(current.centerObjects[1], item); getallocatedfromkey (obj coordtasksequence, num key) Gets a reference to the object allocated for the allocate task for the given key Description Returns a reference to the object that has been allocated for the allocate task specified by the given key. Example treenode allocatedobj = getallocatedfromkey(getcoordinatedtasksequence(current.centerObjects[1], 0), mykey); getcoordinatedtasksequence (obj dispatcher, num tasksequencerank) Gets a reference to a coordinated task sequence Description Returns a reference to the coordinated task sequence that is associated with allocation request with the specified rank in the specified dispatcher's task sequence queue. If the specified rank is zero, then the command assumes that the dispatcher is actually a TaskExecuter, and it returns a reference to the coordinated task sequence that it is currently allocated for. Example treenode coordtasksequence = getcoordinatedtasksequence(current.centerObjects[1], 5); getcurtask (node tasksequence) Gets the current task number of tasksequence Description Returns the current task number of the task sequence Example if(getcurtask(ts) > 5) pt(\"The operator has finished the first five tasks\"); getpreempt (node tasksequence) Gets the preempt value of the tasksequence Description Returns the preempt value of the tasksequence. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example if(getpreempt(mytasksequence) == PREEMPT_ONLY) pt(\"This tasksequence is a preempting task\"); getpriority (node tasksequence) Gets the priority value of the tasksequence Description Returns the priority value of the tasksequence. Example if(getpriority(mytasksequence) > 5) pt(\"This tasksequence has a priority greater than 5.\"); getutilizedobject (obj dispatcher, obj involved, obj station, num utilizednr) Gets a reference to an operator that is currently executing a utilize task Description Finds and returns a reference to an operator that is currently executing a utilize task with the given involved and station variables. If multiple operators are being used, then utilizednr allows you to distinguish which one you want to reference. Example treenode op = getutilizedobject(current.centerObjects[1], item, current, 1); insertallocatetask (obj tasksequence, obj dispatcher, num priority, num preempt [, num noblock] ) Inserts an allocate task into the coordinated task sequence Description Inserts an Allocate Task into the specified coordinated task sequence. By default the allocation task is a blocking task, but if noblock is 1, then the allocation does not block further execution of the task sequence. Example insertallocatetask(newts, current.centerObjects[2], 0, 0); insertdeallocatetask (obj tasksequence, num allocationkey [, num noblock] ) Inserts a deallocate task into the coordinated task sequence Description Inserts a Deallocate Task into the specified coordinated task sequence to deallocate the resource specified by allocationkey. By default this task will block, but if noblock is 1, it will not block. Example insertdeallocatetask(newts,forkkey); insertproxytask (obj tasksequence, num executerkey, num type [, num/obj involved1, num/obj involved2 , num var1, num var2, num var3, num var4]) Inserts a proxy task into the coordinated task sequence Description Inserts a proxy task into the specified coordinated task sequence. Example insertproxytask(newts, dispatchkey, TASKTYPE_TRAVEL, current.centerObjects[1], NULL,0,0,0,0); insertsynctask (obj tasksequence, num taskkey) Inserts a sync task into the coordinated task sequence Description Insert a Sync Task for the specified task in a coordinated task sequence. Example insertsynctask(newts, travelkey); pickoffsetx (obj station, obj item, obj loadingobject) Description This command queries the station for an x offset for the loadingobject to travel from its x center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = pickoffsetx(item.up,item,current); pickoffsety (obj station, obj item, obj loadingobject) Description This command queries the station for a y offset for the loadingobject to travel from its y center in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = pickoffsety(item.up,item,current); pickoffsetz (obj station, obj item, obj loadingobject) Description This command queries the station for a z offset for the loadingobject to travel from its z base in order to load the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = pickoffsetz(item.up,item,current); placeoffsetx (obj station, obj item, obj unloadingobject) Description This command queries the station for an x offset for the unloadingobject to travel from its x center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int xoffset = placeoffsetx(current.centerObjects[1],item,current); placeoffsety (obj station, obj item, obj unloadingobject) Description This command queries the station for a y offset for the unloadingobject to travel from its y center in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int yoffset = placeoffsety(current.centerObjects[1],item,current); placeoffsetz (obj station, obj item, obj unloadingobject) Description This command queries the station for a z offset for the unloadingobject to travel from its z base in order to unload the item. For more information on offset travel, refer to the TaskExecuter documentation. Example int zoffset = placeoffsetz(current.centerObjects[1],item,current); profiletasksequence (node tasksequence) Prints information on a task sequence to the output console Description Prints information on a task sequence to the output console. The output console must be open to write to it. To open the output console, use menus View | Output Console. You can also pass a reference to the TaskExecuter object instead of a specific task sequence. This will profile the object's currently active task sequence. Example profiletasksequence(gettasksequence(so(), 0)); Writes all the tasksequence information to the output console for the active (0) tasksequence of the selected object (so()). reordertasks (obj dispatcher) Causes the dispatcher to reorder all its task sequences according to its queue strategy Description Causes the involved Dispatcher/TaskExecuter to reorder all its task sequences according to its queue strategy. Example reordertasks(c) requestoperators (obj dispatcher, obj station, obj involved, num nrofops, num priority, num preempting) Description Request a specified number of operators to come to the station object and work on the involved object until released. The involved object will later need to be passed into the freeoperators() command when releasing the operators. The operator(s) being called must either be the object referenced by dispatcher, or be connected to its output ports. The tasksequence which is sent to the operator(s) will be given a priority and preempting value. The possible values for preempting are as follows: 0 = PREEMPT_NOT 1 = PREEMPT_ONLY 2 = PREEMPT_AND_ABORT_ACTIVE 3 = PREEMPT_AND_ABORT_ALL For each operater that needs to be called, stopobject() will be called on the station, and a tasksequence that looks like the following will be sent to the dispatcher (or operator) object. 1. put a preempt \"bookmark\" in the task sequence (TASKTYPE_MILESTONE) 2. travel to the station (TASKTYPE_TRAVEL) 3. resume the station (TASKTYPE_STOPREQUESTFINISH) 4. be utilized at the station (TASKTYPE_UTILIZE) Example requestoperators(current.centerObjects[1], current, item, 2, 0, PREEMPT_NOT); This calls 2 operators connected to the object that is connected to the first center port of the current object to come to the current object, and work on the item. rerankbesttask (obj object) Description This command forces the object specified as dispatcher to search through its task sequence queue and put the task sequence with the highest priority in the front of its queue. This will not reorder the other task sequences in the queue. Example rerankbesttask(current); setcollisioncheck (obj taskexecuter, num checkstate [, num checkinterval]) Sets the state and interval for collision checking on the taskexecuter Description Sets the state and interval for collision checking on the taskexecuter. If checkstate is 1, then check for collisions, else don't. If interval is >0, then reset the \"Time between Collision Checks\" for the taskexecuter specified. Example setcollisioncheck(traveler,1,5); Starts the traveler checking for collisions every 5 time units. setpreempt (obj tasksequence, num newpreempt) Sets the preempt value of the tasksequence Description Sets the preempt value of the tasksequence to the value of newpreempt. Possible values are: PREEMPT_NOT, PREEMPT_ONLY, PREEMPT_AND_ABORT_ACTIVE, PREEMPT_AND_ABORT_ALL Example setpreempt(tasksequence, PREEMPT_NOT); This example changes the task sequence's preempt value to not preempt. setpriority (obj tasksequence, num newpriority) Sets the priority of the tasksequence Description Sets the priority value of the tasksequence to the value newpriority. Example setpriority(myts, 1); This example sets the priority value of the task sequence myts to the value of 1. Tree Access Commands for referencing nodes or objects through FlexSim's tree structure. library () Reference to the library node in the main tree Description This command returns a reference to the library node in the main tree. It is used as a fast way of referencing the library. Example treenode SourceObj = library().find(\"?Source\"); This sets the variable SourceObj so that it references the node called Source in the library. maintree () Reference to the main tree Description Returns a reference to the main tree. When defining string paths to nodes in the main tree, MAIN can be used as in the following example node(\"MAIN:/project/exec/globals/cppfunctions\"); Example maintree().find(\"project/exec/globals/cppfunctions\"); model () Reference the model's root node Description This command returns a reference to the model node in the main tree. It is used as a fast way of referencing the model. Example treenode SourceObj = Model.find(\"Source1\"); This sets the variable SourceObj so that it references the node called Source1 in the model. views () Reference to the views tree Description This command returns a reference to the views tree. The views tree contains all of the information about the windows that are currently open as well as all of the available GUIs. When defining string paths to nodes in the view tree, VIEW can be used as in the following example: node(\"VIEW:/standardviews/ortho\"); Example activateview(views().find(\"standardviews/runcontrol\")); This activates the GUI called \"runcontrol\" which is stored in the node called \"standardviews\" of the view tree. Tree Node Data Commands for accessing and assigning data to nodes in the tree. Many of these commands can be used on objects as well, because objects are also nodes in the tree. $iter (num index) See User Manual > Miscellaneous Concepts > SQL Queries Description See Miscellaneous Concepts > SQL Queries for more information. Example checkdllconnection (node dllnode, num force) Returns 1 if the node is properly connected with a dll function Description Returns 1 if the node is properly connected with a dll function. Otherwise returns 0. If force is 1, then if the node is not connected, it will attempt to bind it to a dll function, and will return 1 if successful, 0 if not. The node must be toggled as DLL and have proper data specifying the path to the dll and the function name. Example if(!checkdllconnection(getvarnode(current, \"exittrigger\"), 1)) msg(\"DLL Error\",\"Error connecting to dll.\") This will attempt to connect and object's exit trigger node with a dll function, and will print a message if it is unsuccessful. comparetrees (obj tree1, obj tree2) Description For developer use. Test trees for equality. Example comparetrees(node(\"MAIN:/project/model/1\"),node(\"MAIN:/project/model/2\")) createcoupling (node container1, node container2) Creates a pointer coupling inside the two container nodes Description Creates a pointer coupling inside the two container nodes Example createcoupling(current.labels[\"items\"], item.labels[\"owner\"]); enablecode (node codenode [, num mode]) Makes the node a code node Description If mode is 0, then the node is set to FlexScript unless the node is already a code node and then it leaves the node as is. If mode is non-zero, then it forces a given toggle: 1-FlexScript, 2-C++, 3-DLL. This command is used in the code edit window to toggle the node as FlexScript or DLL. Example enablecode(getvarnode(current, \"exittrigger\")); findownerobject (node thenode) Description Like ownerobject(), this command returns the object node containing thenode. Unlike ownerobject(), this command does not cache the result, but searches in the tree for the \"owner\" node. For example when a TaskExecuter transfers from one NetworkNode to another on a network path, a coupling node is transferred to the new node to keep track of the TaskExecuter's current node, and findownerobject() is used to get access to the correct \"owner\" node. Example findownerobject(c) getsdtvalue (node sdtNode, str valName) For developer use Description Primarily for developer use only. Returns the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example nodebreak (node a) Description For developer use. Breaks a coupling pointer on a node that has coupling data that is pointing to another node. If the node is part of a bi-directional coupling, the other coupling is not affected. Example nodebreak(so()) nodeinsertafter (node targetnode) Creates a new node immediately after targetnode Description This command creates a new node in the tree immediately after the targetnode. The new node has no data attached to it. Data is attached using the nodeadddata() command. Any node in the tree can be passed as targetnode. Example nodeinsertafter(item.find(\">labels\").last).dataType = DATATYPE_NUMBER; This creates a new label on the object referenced by item that holds number data. nodeinsertinto (node containernode) Deprecated, Creates a new node inside containernode Description This command is deprecated. Use treenode . subnodes .add() Example nodejoin (node a, node b) Description For developer use. Join two pointer nodes to form a bi-directional coupling. A bi-directional coupling in FlexSim is a pair of nodes who's data points to each other. FlexSim automatically manages the coupling. If either one of the endpoints is deleted or nullified, FlexSim cleans up to prevent dangling pointers. The two nodes a and b must have coupling data. Example nodejoin(so(),so().next) objectexists (obj object) Check if an object exists Description If you're trying to test if an object exists when using dot syntax you can omit the objectexists. For example, if (current.labels[\"MyLabel\"]) or if (current.next). This command returns true (1) if the object specified as object exists in the tree. If the object does not exist, this command returns false (0). Example if (objectexists(next(current))) { moveobject(item, next(current), 1); } This checks to see if there is an object in the tree after current. If there is, the object referenced by item is moved into it through port number 1. ownerobject (node thenode) Gets the object that \"owns\" the executing node, usually the current object Description This command returns the node with object data attached to it that is the start of the sub-tree that thenode is in. In other words, it returns the object node that contains thenode. The result of this command is cached on thenode, so that subsequent calls to ownerobject(thenode) do not search in the tree, but return the cached result. If thenode subsequently changes parent, ownerobject(thenode) will return the cached result. This command is used in most code fields and trigger fields to set the access variable current. In these fields, c references the node that contains the code, and ownerobject(c) references the object that \"owns\" that node. Example string objname = ownerobject(c).name; This sets objname to the name of the object that contains the node referenced by c. The c usually refers to the node where the code is being written. treenode current = ownerobject(c); This example is present in most code fields in FlexSim, and retrieves access to the \"current\" object. removeallcouplingreferences (node thenode) Recursively breaks couplings from a node and its subnodes in the tree Description Recursively breaks couplings from a node and its subnodes in the tree. Example removeallcouplingreferences(current); setsdtvalue (node sdtNode, str valName, num/str/node toVal) For developer use Description Primarily for developer use only. Sets the value of the named class member of a node that has \"SimpleDataType\" data. We discourage using this command in model code because you risk breaking forward-compatibility. Future versions may redefine class members and their names, so model code that accesses these values by name may not work in future versions. Example swapnoderanks (obj/node parentnode, num index1, num index2) Swap the ranks for two nodes in a parent node's sub-tree Description This command swaps the ranks of two nodes in the parent node's sub-tree. Swapping ranks can be faster than using setrank() especially for very large lists of nodes. Example swapnoderanks(parentNode,4,parentNode.subnodes.length); This swaps the 4th ranked node in parentNode's sub-tree with the last node in parentNode's sub-tree. This can make removing that node from parentNode's sub-tree faster if the list is very long. Note that this will put the last node into the 4th position, so ordering in the tree should not matter to be able to do this. In other words, this would break fifo ordering. switch_cppfunc (node thenode[, num off/on]) Get or set the \"C++\" flag of thenode Description Get or set the \"C++\" flag of thenode. A value of 1 is C++, a value of 0 is not C++, a value of -1 gets the current value. If a node is toggled as C++ it will be compiled as a C++ function at time of compile. Example switch_cppfunc(so(),1) switch_destroyonreset (obj thenode[, num off/on]) Get or set the \"destroy on reset\" flag of the object Description Get or set a node's \"destroy on reset\" flag. If the flag is 1, the node will be deleted when the model is reset. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_destroyonreset(so(),1) switch_dllfunc (node dllnode[, num on/off/get]) Description Switches the node's dll toggle on or off. 1 switches it on, 0 off, and -1 gets the current state. Example switch_dllfunc(getvarnode(current, \"exittrigger\"), 1); switch_expanded (node thenode[, num off/on]) Expand/collaps sub-level nodes of thenode Description Expand or collapse sub-level nodes of thenode in the tree view. This is analogous to clicking the + and - sign of thenode in the tree view. A value of 1 is expand, a value of 0 is collapse, a value of -1 gets the current value. Example switch_expanded(so(),1) switch_flexscript (obj object[, num on/off/query]) Description For developer use. This command switches the flexscript toggle of a node. 0 = toggle node non-flexscript 1 = toggle node as flexscript -1 = query whether node is toggled (1) or not (0) Example switch_flexscript(var_s(current, \"code\"), 1); switch_hashedlist (obj thenode[, num off/on]) Get or set the \"Hashed List\" flag of thenode Description Get or set the \"Hashed List\" flag of the thenode. A value of 1 sets the node to store a hashed list of its subnodes for fast lookup by name, a value of 0 sets the node to not store a hashed list of subnodes, a value of -1 gets the current value. Example switch_hashedlist(so(),1) switch_noselect (obj object[, num off/on]) Get or set the \"No Select\" flag of the object Description Get or set the \"No Select\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is unselectable, a value of 0 is selectable, and a value of -1 gets the current value. Setting no select on an object keeps it from being clicked on with the mouse in the 3D view. Example switch_noselect(so(),1) switch_orphancoupling (obj thenode[, num off/on]) Get or set the \"orphan coupling\" flag of the object Description Get or set a node's \"orphan coupling\" flag. If the flag is 1, when the coupling node is copied, the copy won't be destroyed if it no longer points to a valid node. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_orphancoupling(so(),1) switch_preservecoupling (obj thenode[, num off/on]) Get or set the \"preserve coupling\" flag of the object Description Get or set a node's \"preserve coupling\" flag. If the flag is 1, when the coupling node is copied, the copy will also point to its partner. For one-way couplings, the original and the copy will both point at the same partner node. For two-way couplings, a new partner node will be created. An off/on value of 0 or 1 sets the flag, and -1 gets the current value. Example switch_preservecoupling(so(),1) switch_protected (obj object[, num off/on]) Get or set the \"Protected\" flag of the object Description Get or set the \"Protected\" flag of the node object (the object node will have a gray highlight in the treeview to indicate protected). A value of 1 is protected, a value of 0 is unprotected, and a value of -1 gets the current value. Protecting an object keeps it from being moved, rotated, or resized with the mouse, but not from being double-clicked to access the Parameters window for the object. View windows have an attribute named viewignoreobjects which can be used to ignore ALL the objects in their view which means the objects can not be manipulated in any way with the mouse including double-clicking. Example switch_protected(so(),1) switch_selected (obj thenode[, num off/on]) Get or set the \"Selected\" flag of thenode Description Get or set the \"Selected\" flag of thenode (red highlight). A value of 1 is selected, a value of 0 is unselected, a value of -1 gets the current value. Example switch_selected(so(),1) switch_statelocked (obj object[, num off/on]) Description Get or set the \"is code state locked\" flag of the node object. A value of 1 is enable, a value of 0 is disable, a value of -1 gets the current value. If enabled, the node will be locked as either C++ or flexscript depending on what it currently is (the model will not change it when \"Make All Code C++/Flexscript\" is chosen through the main menu. Example switch_statelocked(so(),1) switch_stateused (obj thenode[, num off/on]) Description For developer use. Get or set where a node inside a state profile is used by the object. This flag is automatically set in the setstate() command, so developers can know which states are used by an object, for UI development. Example switch_stateused(so(),1) User Interface Commands associated with implementing and managing user interfaces such as menus, toolbars, views and edit windows. activateview (obj viewnode) Description For developer use. This command makes a GUI window active and visible. It should be used to open a window that is stored in the view tree without creating a copy of the view in the active tree, in order to make direct changes that will be saved in the view tree instead of being deleted when the window is closed. Generally, the command createview() should be used to open GUI windows. Use makeactive() if you want to make an already open view the active, or top, window. Example activateview(views.find(\"standardviews/other/FindReplace\")); This opens the node called FindReplace in the folder called standardviews/other in the view tree. activedocumentnode () Gets the currently active document window Description Returns the currently active document window. If the active document window is a tabbed window, it will return the active tab page node. Example treenode activedoc = activedocumentnode(); activedocumentview () Gets the currently active document window as an HWND Description Returns the currently active document window as an HWND. To get the node associated with the window, use activedocumentnode(). Example treenode activedoc = nodefromwindow(activedocumentview()); activeview () Gets the currently active window as an HWND Description Returns the currently active window as an HWND. To get the node associated with the window, use nodefromwindow() Example treenode viewnode = nodefromwindow(activeview()); addviewtext (node view, string text) Description For developer use. Add text to the specified window. Example addviewtext(sv(),\"Hello\") applicationcommand (str name[, p1, p2, p3, ...]) Description For developer use. Execute a command based on its name. This command will search for the named node in VIEW:/nodefunctions, then in MAIN:/project/exec/globals/nodefunctions, then in VIEW:/commands, and lastly in the FlexSim Engine. If it finds a toggled node, it will call nodefunction on that node passing in up to 10 number parameters. If it finds an untoggled node, it will call executefsnode() on that node passing in n1 as c, n2 as i, and n3 as eventcode. Example applicationcommand(\"outputconsole\"); applyalleditstonodes ([obj view]) Description For developer use. Applies all view edits. This is done before a compile or save. Example applyalleditstonodes applyeditstonode (obj view, obj editednode) Description For developer use. Applies view changes to a node. This is usually only needed for a table view, and is essentially the same as mouse-clicking off of the table's currently active cell. This is the opposite of applytoedits. Example applyeditstonode(ownerview(c), current) applylinks (node view [, num refresh]) Description For developer use. This command applies all of the hotlinks and coldlinks in the view window specified as view. If refresh is 1, then the links will be refreshed, meaning the values from the model will be retrieved and set on the window controls themselves. If refresh is 0, then the values in the model will be set according to what the user specified in the view. This command is used in Flexscript GUI programming. Example applylinks(ownerview(c)); This applies all of the links in the window that is currently designated as the selected view. applytoedits (obj view, obj editednode) Description For developer use. Applies programmatic changes to a node if that node has been selected in a view. This is usually only needed for a table view. This is the opposite of applyeditstonode(). Example applytoedits(ownerview(c), current) attlink (node viewdatanode, str path) Description For developer use. Find a node by text path, relative to the view's objectfocus. This command will return the node on the path relative to the object focus of the ownerview of viewdatanode. For example, let viewdatanode be a node inside the structure of a view, such as an OnPress event node. Then, let the objectfocus of the parent view point to an object in the model called \"Processor\". Now, whatever is passed to the path argument of attlink() will be relative to the Processor object. So, if \">variables\" was passed to path in the attlink call, then attlink would return the pointer to \"variables\" of the Processor. If the node does not exist, attlink will return a null \"safenode\" which signals a failure to find the requested node. The return value can be tested for validity with the objectexists() command. Example attlink(so(),\">variables\") // where so() is data node inside view beginaggregatedundo (obj view, str description) Description Begins an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the next endaggregatedundo() command will be encapsulated into a single undoable operation. Returns the id for the created record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = beginaggregatedundo(c.find(\"@/TheTable\"),\"Name Change\"); beginignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example beginignoreundo(); callwebscriptmethod (obj view, str domid, str methodname, int type [, num/str data ...]) Description Call a method on a DOM element in the HTML document of an HTML view. You must define the type of data of any parameters that are to be passed into the method. The following types are available: CWSM_DOUBLE CWSM_STRING CWSM_NODE CWSM_BUNDLE CWSM_BUNDLE_HEADER CWSM_BUNDLE_DATA CWSM_JSON The last parameter passed into the method must be CWSM_END. When using the CWSM_JSON type, the json string must start with json:. For example, json:{\"title\":\"My Title\"} Example callwebscriptmethod(view, \"chart\", \"updateData\", CWSM_DOUBLE, time(), CWSM_NODE, getvarnode(current, \"data\"), CWSM_STRING, \"My Title\", CWSM_END); This examples calls the method named updateData on the element with id \"chart\". checkforexistingview (obj view [, num mode]) Description For developer use. Checks to see if there are any currently active windows that match this window. Compares the beginning of each name of each window in the active view node with the beginning of the name of the specified view. Along with comparing the beginning of the names, this compares each objectfocus as well. If mode is specified and is not 0, it will compare the viewfocus instead of the objectfocus. Example checkforexistingview(c) clearundohistory ([obj view]) Description Deletes all undo records in the undohistory of the specified view. If no view is specified, it will clear the global undo history used by the 3D and tree windows. Example clearundohistory(view); clickcode () Description For developer use. Returns the type of click in a view. Used in the OnClick event. DOUBLE_CLICK returns 1 LEFT_PRESS returns 2 LEFT_RELEASE returns 3 RIGHT_PRESS returns 4 RIGHT_RELEASE returns 5 Example if(clickcode()==2) { pt(\"Clicked!!\");pr(); } This prints the statement \"Clicked!!\" to the output console when the left mouse button is pressed. closeview (node viewnode) Description For developer use. This command closes the view specified as viewnode. If viewnode is not a viewwindow or GUI, this command does nothing. The view is not removed from the active views folder, however. Use destroyobject() to remove it. Example treenode activewindows = views().find(\"active\"); while (activewindows.subnodes.length != 0) { closeview(activewindows.first); } This closes all of the windows that are in the active node of the views tree. This will generally close all of the windows that are currently open. codetotemplate (obj code, obj edit) Description For developer use. Converts C++/Flexscript code into template code and sets the view text of edit to the template code. The code parameter should reference a node that contains text with C++/Flexscript code on it. This is used in a picklist's template code drop-down to create template code from the actual C++/Flexscript code. Example codetotemplate(so(),sv()) codetotemplatetext (node codeobject, node toobjecttext [, num firstcommentonly]) Description For developer use. Converts C++/Flexscript code into template code. Sets the text in toobjecttext to the template code of the code found in codeobject's text Example combocurrentnode (obj combonode) Description For developer use. Returns the current node of the specified picklist combobox. Example createview( \"VIEW:/standardviews/picklisttemplate\",\"\", combocurrentnode(c.find(\"../pickoptions\").getPath(0, 1) ); comborefresh (obj combonode) Description For developer use. Refreshes a picklist combobox contents. Example comborefresh(current); continueaggregatedundo (obj view) Description Continues the previously-finished aggregated undo record for the specified view. This is used if some other logic created and finished an aggregated undo, but you want it to append any subsequent changes onto the previously finished undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = continueaggregatedundo(c.find(\"@/TheTable\")); controlpressed () Description For devloper use. Test if CTRL key is pressed Example controlpressed() createpopup (str viewpath, str objectfocus, str viewfocus, obj relativeto, num x, num y, num sx, num sy) Creates a new popup window Description Similar to the createview command in that it creates a new window. However, FlexSim manages this window so that whenever the user clicks outside of the window, the window will be closed. Code template pop-ups use this command to create a drop-down in which you can edit the template code. The pop-up view must contain a style attribute with the WS_POPUP style. You also specify a view node \"relative to\" which the popup's location will be set (usually whatever view you're writing code on). Also specify an offset location in pixels from relativeto's top-left corner, and a size of the pop-up. Example treenode combobox = c.find(\"../pickoptions\"); createpopup( \"VIEW:/standardviews/picklisttemplate\", combobox.find(\">pickprimary+\").getPath(0,1), combocurrentnode(combobox).getPath(0,1), combobox, 0,20,combobox.location.x, 150 ); This code is similar to what is used to create the template code pop-up for many of FlexSim's edit fields. createundorecord (obj view, obj object, num undocode[, num p1, num p2, num p3]) Description Creates an undo record for the specified view. Returns the uniqueid for the created record. Undo codes: UNDO_AGGREGATED 1 UNDO_MOVE_SIZE_ROTATE 2 UNDO_MOVE_SIZE_ROTATE_GROUP 3 UNDO_SELECTION_CHANGE 4 UNDO_CREATE_OBJECT 5 UNDO_DELETE_OBJECT 6 UNDO_CHANGE_DATA 7 UNDO_CHANGE_RANK 8 UNDO_CHANGE_NAME 9 UNDO_MOVE_OBJECT 10 UNDO_DELETE_COUPLING 11 UNDO_AGGREGATED_FIRST_RECORD 12 UNDO_DESTROY_BRANCH 13 UNDO_CHANGE_FLAGS 14 UNDO_REPLACE_OBJECT 15 UNDO_CUSTOM 16 UNDO_CALLBACK 17 See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); createview (str viewpath[, str objectfocus, str viewfocus]) Description For developer use. This command creates a new GUI window in the active node of the views tree. This window is a copy of the window whose path is given in viewpath. The window will have an object focus of objectfocus and a view focus of viewfocus. Objectfocus and viewfocus are generally the same for most GUI windows. They should be the path of the node that this GUI window is representing. Example createview(\"VIEW:/standardviews/other/FindReplace\",\"MAIN:/project/model/Tools/precision\",\"MAIN:/project/model/Tools/precision\"); This creates the Find Replace GUI. cursorinfo (obj/num view, num operation, num x/y/z, num pos/move) Description For developer use. This command represents a lot of functionality wrapped up into one command. It is a way of getting information regarding the position/state of the mouse for a window control. view : the associated view, such as an ortho or planar view. This can also be an HWND (stored in a double). operation : the type of operation you want to do: 1 - gets x or y positions of the cursor in a planar view 2 - get orthographic or perspective view coordinates 3 - get current mouse button state. return value: 0 : no buttons down 1 : left down 2 : right down 3 : right and left down 4 : double left click 4 - update the cursor position 5 - gets x or y positions of the cursor relative to the view 6 - gets x or y positions of the cursor in screen coordinates 7 - sets the x or y position of the cursor xyz : 1(x), 2(y), or 3(z); not used for operation 3. For operation 4, if xyz=1, the cursor position will be updated with objects being drawing, if xyz=2 it will be updated with only the floor drawn. pos/move : 1(pos) or 2(move); 1 gets absolute mouse position, and 2 gets the change since last update. only used for operations 1-2. The best way to test this functionality out is just by trial and error. Add an OnMouseMove attribute to the ortho view (make sure you rebind the view's attributes after you've added it: Build|Rebind Object Attributes), then print information to the output console. Example cursorinfo(c,2,1,1) deselectall () Description For developer use. Deselects all objects in the model. Example deselectall() distcutoff (num radius) Sets a globally applied cutoff radius for object drawing Description Sets a globally applied cutoff radius (from the viewpoint) for object drawing. Example discutoff(10) distfromviewpoint (obj object, obj view) How far from the viewpoint object is in the window view Description Returns how far from the viewpoint the object specified as object is in the view window specified as view. This value is only meaningful if view is a reference to a Perspective window. Example double dist = distfromviewpoint(model().subnodes[2],sv()); This sets dist to the distance from the first object in the model to the viewer's eye. draginfo (num operation[, num val]) Gets or set values related to draggin the mouse Description Get or set values related to dragging the mouse. Operations: DRAG_INFO_DX 1 - gets dx DRAG_INFO_DY 2 - gets dy DRAG_INFO_DZ 3 - gets dz DRAG_INFO_MDX 4 - gets mdx DRAG_INFO_MDY 5 - gets mdy DRAG_INFO_BUTTON_STATE 6 - gets the button state DRAG_INFO_SET_DX 7 - sets dx to val DRAG_INFO_SET_DY 8 - sets dy to val DRAG_INFO_SET_DZ 9 - sets dz to val DRAG_INFO_SET_MDX 10 - sets mdx to val DRAG_INFO_SET_MDY 11 - sets mdy to val DRAG_INFO_SET_BUTTON_STATE 12 - sets the button state to val Example double dx = draginfo(DRAG_INFO_DX); dropnodefrom () Description For developer use. Returns the view from which a node was dropped. Example dropnodefrom() dropnodeto () Description For developer use. Returns the view into which a node was dropped. Example dropnodeto() dropx () Gets the x position of a drop action Description Get the x position of a drop action Example dropx() dropy () Gets the y position of a drop action Description Get the y position of a drop action Example dropy() dropz () Gets the z position of a drop action Description Get the z position of a drop action Example dropz() endaggregatedundo (obj view, num id) Description Ends an aggregated undo record for the specified view. Any undoable commands that are executed between this command and the previous beginaggregatedundo() command will be encapsulated into a single undoable operation. Pass the id returned by the beginaggregatedundo() function. See Miscellaneous Concepts > Advanced Undo for more information. Example endaggregatedundo(c.find(\"@/TheTable\"),id); endignoreundo () Description Used in conjunction with beginaggregatedundo() and endaggregatedundo(). Any commands called between beginignoreundo() and endignoreundo() will not be added as undoable commands within the aggregated undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example endignoreundo(); findundorecordbyid (obj view, num id) Description Returns the undo record with the specified id for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = createundorecord(ownerobject(c), selectedobject(ownerobject(c)), UNDO_CUSTOM); treenode record = findundorecordbyid(ownerobject(c),id); finishundorecord (obj view, num uniqueid) Description Finishes an undo record for the specified view. See Miscellaneous Concepts > Advanced Undo for more information. Example finishundorecord(view, getundorecordid(record)); getchecked (obj window) Description For developer use. Returns the checked state of a button. Example getchecked(c) getcurrentundorecord (obj view[, int flags = 0x1]) Description Returns a pointer to the treenode associated with the current undo record in the undohistory of the specified view. This is the record that would be undone first when you perform an undo operation. It is also the most recently created record (potentially deep in the undo aggregation hierarchy) when and aggregated undo operation is being created. The flags parameter lets you optionally adjust what should be returned. 0x1 means get the top-most record for a move-size-rotate undo. 0x2 indicates get the top-most record in a normal aggregated undo. See Miscellaneous Concepts > Advanced Undo for more information. Example treenode record = getcurrentundorecord(view); getdashboardcontrol (str id [, node startnode]) Returns a reference to the dashboard control associated with id Description Returns a reference to the dashboard control that has the ID value of id. This command will search through all open dashboards until it finds a control with matching ID. Passing in a value for startnode will cause the command to only search through the dashboard containing startnode. Dashboard controls include edit fields, buttons, comboboxes, etc. Example treenode accelEdit = getdashboardcontrol(\"accelEdit\", c); //Searches through the current dashboard only getfilebrowse (str extension, str extensiondescription[, str defaultreturn, str location, num savemode, node filelist]) Opens a standard windows file browser dialog window Description This command opens a standard Windows file browser dialog window. The files shown in the window will have the extensions defined in extension. Different extensions should be separated by semicolons (;) in extension. The text passed as description will be used in the file browser to describe the type of file to open. This command returns a string that is the path of the selected file. If no file is selected, or Cancel is pressed, the command returns an empty string. See filebrowse() command. Example string shapefile = getfilebrowse(\"*.3ds; *.wrl\",\"3D shape files\"); This sets the variable shapefile to the path of a file chosen from a file browser that displays files with the .3ds and .wrl extensions. getfilesindirectory (str directory, str extension, node destnode) Description Retrieves all files in the specified directory that match the specified extension, and populates the content of destnode with nodes holding the path to each matching file. The command returns the number of matching files that were found. The extension parameter should be the specific three (or sometimes four) letter extension that you want to get. For example, if you want all .fsm model files, specify the string \"fsm\". Also, if you pass \"directories\" as the extension parameter, then the command will retrieve the list of directories inside the directory. To get all files, no matter the extension, pass \"*\" as the extension parameter. File paths will be set on the string data (as opposed to the name) of nodes inserted into destnode. Example treenode destnode = Model.find(\"Tools\").subnodes.assert(\"Files\"); int nrfiles = getfilesindirectory(documentsdir(), \"*\", destnode); for(int i = 1; i <= nrfiles; i++) { mpt(\"file: \"); mpt(destnode.subnodes[i].value); mpr(); } getparentwindow (HWND window) Description For developer use. Returns the parent window of the specified window. Use windowfromnode as a parameter to pass into this function. Example getpickingdrawfocus (obj theview, num whattoget, num pickedid) Gets the picking draw focus Description Gets the picking draw focus. Used in OnClick to know what was clicked. The whattoget parameter can be PICK_TYPE, PICK_OBJECT, or PICK_SECONDARY_OBJECT. pickedid should be PICK_PRESSED for the \"pressed\" pick, PICK_HOVERED for the \"hovered\" pick, PICK_RELEASED for the \"released\" pick, or PICK_MOVED for \"mouse moved\" pick. Example int picktype = getpickingdrawfocus(view, PICK_TYPE, 0); getpickingmode (obj view) Gets the picking mode for view Description Gets the picking mode for the specified view. Example int isselectionmode = getpickingmode(view); getsystemmetric (num metric[, HWND win]) Description For developer use. Returns system screen metrics. These values for metric return the following values (if not specified, values are in logical units): 1: desktop width 2: desktop height 3: the left position of the work area of the monitor under the cursor 4: the right position of the work area of the monitor under the cursor 5: the top position of the work area of the monitor under the cursor 6: the bottom position of the work area of the monitor under the cursor 7: the width of window win in pixels 8: the height of window win in pixels 9: the left position of the monitor under the cursor 10: the right position of the monitor under the cursor 11: the top position of the monitor under the cursor 12: the bottom position of the monitor under the cursor 13: the width of window win 14: the height of window win Example getsystemmetric(1) gettableviewselection (obj tableview, num val) Description For developer use. Returns values based on the blue selection range in a table view: val 1 returns the start row, val 2 returns the start col, val 3 returns the end row, val 4 returns the end col. Example int startrow = gettableviewselection(c,1); getundorecordid (obj record) Description Returns the id of the specified undo record. See Miscellaneous Concepts > Advanced Undo for more information. Example int id = getundorecordid(getcurrentundorecord(view)); getviewhwnd (obj view, int windowtype) Gets the HWND handle for a certain window of a view Description Returns a windows HWND handle for a certain window of a view. Each view may use several windows to display data properly. For example, a tree view contains the main window that displays the tree as well as a window that displays the string or number data on a node for editing, as well as a window that displays/edits the name of a node. The windowtype parameter specifies which window handle you want returned, as follows: 1 - the main control (same as using windowfromnode()) 2 - datacontrol - The scintilla code control that displays data of a node in a tree, and in a script view 3 - control - the control that displays/edits a highlighted node's name in the tree 4 - statusbar - the statusbar of the view if it has one 5 - tooltip - the tooltip control of the view 6 - pointercontrol - I think this is only used in a tree that displays list heads Example sendwindowmessage(getviewhwnd(treeview,2), SCI_SETSEL, 4, 8); getviewmenu (obj view, int menutype) Description For developer use. Returns the HMENU reference of the menu based on the menutype. Menutypes: 1: floatingtreemainmenubar 2: custommenu 3: popupmenu 4: thecustompopupmenu Example var menu = menubelow(getviewmenu(c, 4), 0); getviewscale (obj view) Description For developer use. Returns the view scale factor. Example getviewscale(sv()) getviewtext (obj/num window) Description For developer use. Returns the text of a window. Example getviewtext(sv()) highlightviewtext (node view, num pos, num span, num mode span/lines) Highlights text in a code edit window Description Highlights text in a scintilla code edit window. This is used by the flexscript syntax checker to go to highlight a syntax error in the code edit window. You can either highlight whole lines or individual characters. To highlight individual characters, specify mode as 2. For lines specify mode as 1. For lines, specify pos as the start line to highlight(the first line is line 1) and span the number of lines to highlight. For individual characters, specify pos as the start position and span as the number of characters to highlight (position 0 is the position to the left to the first character) Example highlightviewtext(c, 0, 5, 2) This will highlight the first 5 characters of the scintilla text edit. highlightviewtext(c, 1, 1, 1) This will highlight the first line of the scintilla text edit. iskeydown ([num key]) Description For developer use. Returns 1 if the specified keyboard key is being held down. If the first parameter is not passed, then the function will return 1 if any key is being held down. Otherwise, the function returns 0. Example iskeydown(74) keyboardfocus ([HWND/node focus]) Gets/Sets keyboard focus Description Used in GUI development. Gets/Sets the keyboard focus. If the focus parameter is left out, then this command will return a reference to the current keyboard focus as an HWND handle. Otherwise, it will set the focus to the keyboard focus to the passed parameter. Use windowfromnode() or getviewhwnd() to get access to the HWND handle of a view node. Example keyboardfocus(windowfromnode(edit)); keyedclick (obj object, num key[, obj view]) Description For developer use. Executes the object's keyed click functionality (X, C, V) Example keyedclick(model().last, 88) lastclickednode () Description For developer use. Returns a pointer to the last clicked node. Example lastclickednode() lastkey () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkey() lastkeydown () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeydown() lastkeyup () Description For developer use. Returns the keycode of a keypress in OnKeyPress event. Example lastkeyup() listboxrefresh (obj listbox) Refreshes the contents of a listbox Description Refreshes the contents of a listbox. Example listboxrefresh(c.find(\"../Collision Members\")) mainmenucommand (str name) Description For developer use. Execute a command from the stock main menu. Example mainmenucommand(\"File|Open...\") makeactive (obj viewwindow) Description For developer use. Makes the specified window active. Example makeactive(ownerview(c)); menubelow (HMENU menu, num index) Description For developer use. Get the menu item with the specified index (starting with 0) in the specified menu. Example var menu = menubelow(menumain(),4); menucheck (HMENU menu, num index, num on/off) Description For developer use. Set the check state of the menu item with the specified index (starting with 0) in the specified menu. Example menucheck(menumain(), 2, 1) menugray (HMENU menu, num index, num on/off) Description For developer use. Set the gray state of the menu item with the specified index (starting with 0) in the specified menu. Example menugray(menumain(), 2, 1) menumain () Description For developer use. Returns the HMENU reference of the main menu. Example var menu = menumain(); msg (str caption, str text [, num buttontype]) Display a message dialog Description This command creates a message box with a title bar displaying the caption and the text written inside the box. The buttons displayed on the message box are based on the value for buttontype. If OK or Yes are pressed, msg() returns 1. If No is pressed, msg() returns 0. The value returned when Cancel is pressed depends on the buttontype. If buttontype is 3, Cancel returns -1; otherwise it returns 0. If buttontype is not specified, it is assumed to be 0. Values for buttontype: 0 - OK, Cancel 1 - OK 2 - OK, Cancel 3 - Yes, No, Cancel 4 - Yes, No Example if (msg(\"Finished\", \"Close the database?\") == 1) dbclose(); nodefromwindow (num window) Description For developer use. Get the node of a window handle Example nodefromwindow(windowfromnode(sv())) ownerview (obj viewobj) Description For developer use. Get the topmost node of a view structure. Example ownerview(sv()) pickcolor () Description For developer use. Opens a color picker window to allow the user to pick a color. Use pickedcolorred(), pickedcolorgreen(), pickedcolorblue() commands to retrieve the rgb color component values. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickcolornode (obj colornode) Description For developer use. Open a color picker window to set the rgb color values of the color attribute node of an object. Example pickcolornode(color(current)); Opens a color picker window and then sets the color of the current object to the chosen color. pickedcolorblue () Description For developer use. Returns the blue component of a color picked with the pickcolor() command. Example pickcolor(); int bluecomponent = pickedcolorblue(); The bluecomponent variable will be set to the rgb value for the blue component of the color chosen with pickcolor(). pickedcolorgreen () Description For developer use. Returns the green component of a color picked with the pickcolor() command. Example pickcolor(); int greencomponent = pickedcolorgreen(); The greencomponent variable will be set to the rgb value for the green component of the color chosen with pickcolor(). pickedcolorred () Description For developer use. Returns the red component of a color picked with the pickcolor() command. Example pickcolor(); int redcomponent = pickedcolorred(); The redcomponent variable will be set to the rgb value for the red component of the color chosen with pickcolor(). pickfile (str extension, str extensiondescription[, str defaultreturn]) Description For developer use. Opens a file browser for the user to choose a file. The browser will be looking for files with the specified extension. The extensiondescription is any text which describes the type of files allowed. This command will return the full path to the chosen file. Convert the return value with tostr(). See filebrowse() command. Example pickfile(\"*.xls\",\"Excel Workbooks\") picklistapply (obj combobox) Description For developer use. Applies the selected picked option from a picklist combobox. This is done when applylinks is called, or when and OK or Apply button is pressed. Example picklistapply(c) popupmenu (obj view) Description For developer use. Returns a reference to the view's popup menu as an HMenu. Example popupmenu(c) redirectconsole (num console:output/system/compiler/trace, obj view) Redirects any prints to a given console Description This redirects any prints to a given console so that they will instead be printed to the view text of the specified view. CONSOLE_OUTPUT redirects the output console, CONSOLE_SYSTEM redirects the system console, CONSOLE_COMPILER redirects the compiler console, CONSOLE_TRANCE redirects the trace console. To redirect it back to its original console, call the command again and specify NULL as the view parameter. Example redirectconsole(2, c); buildnodeflexscript(getvarnode(Model.find(\"Processor1\"), \"exittrigger\")); redirectconsole(2, NULL); This redirects the compiler console to the view c and then builds flexscript on a node in the model. Thus, any errors in building flexscript will be directed to the view c instead of to the compiler console. redirectpicklists (obj view) Description For developer use. Adjusts all picklists of a parameters or properties window that has been redirected. Example redo (obj view) Description Redoes the previously undone action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example redo(view); refreshview (obj view) Description For developer use. Regenerate the window from it's view definition. Example refreshview(c) repaintall () Description For developer use. Repaint all windows. Example repaintall() repaintallactive () Description For developer use. Repaint all windows in the active list. Example repaintallactive() repaintview (obj view) Description For developer use. Repaint the window without regenerating. Example repaintview(c) repositionhighlightededits (obj view) Description For developer use. Repositions the edit controls for a tree view's highlighted object. Example scrollinfo (obj/HWND view, num get_set {0-1}, num horz_vert_ctl {0-2}, num scrollinfo {1-4}[, num value]) Description For developer use. Gets or sets scrollinfo for a scrollbar on a view. The value parameter is only used if get_set is 1. The position of the scrollbar (nPos) is changed with scrollinfo 4. You can also get and set the nMin, nMax, and nPage values of the scrollbar with scrollinfo 1, 2, and 3 respectively. Example scrollinfo(TheTable,1,1,4,scrollinfo(c,0,1,4)-amount); select (obj window) Description For developer use. Select the specified view object. Convert the return value with tonode(). Example select(ownerview(c)) selectedobject (obj window [, num reset]) Description For developer use. Get the highlighted node in a view. Example selectedobject(ownerview(c)) selectedx (obj window) Description For developer use. Get the x position of the highlighted object in a view. Example selectedx(ownerview(c)) selectedy (obj window) Description For developer use. Get the y position of the highlighted object in a view. Example selectedy(ownerview(c)) selectedz (obj window) Description For developer use. Get the z position of the highlighted object in a view. Example selectedz(ownerview(c)) sendonactivatenotify () Description For developer use. Causes each palette windows' OnActivateNotify event to fire. Example sendonactivatenotify(); setcameradirection (obj view, num x, num y, num z, num rx, num ry, num rz) Sets the viewpoint direction of the 3D view Description Set the viewpoint direction of an orthographic or perspective view. (x,y,z) is the location of the focus point of the camera. (rx, ry, rz) is the rotation of the camera. The associated view attribute names are: viewpointx, viewpointy, viewpointradius, viewpointrx, viewpointry, viewpointrz respectively. Example setcameradirection(sv(), 0, 0, 0, -40, 0, 25); setcameravolume (obj view, num w, num h, num nearclip, num farclip, num magnification, num fov, num projtype, num firstperson) Description For developer use. Set the OpenGL camera volume. Sets additional view parameters not set with setcameradirection. Example No example. setchecked (obj view, num value) Description For developer use. Set the checked state of a button. Example setchecked(c,0) ; setcursor (num cursorid[, num forgetCount = 0]) Sets the visual look of the mouse pointer Description Sets the visual look of the mouse pointer. Valid ids are as follows 1: Arrow 2: IBeam 3: Wait 4: Cross 5: UpArrow 6: Size 7: Icon 8: SizeNWSE 9: SizeNESW 10: SizeWE 11: SizeNS 12: SizeAll 13: No 14: Hand 15: AppStarting 16: Help The forgetCount defines if/when FlexSim should go back to the default cursor. If 0 (default), then FlexSim will keep that cursor until the user calls setcursor() again. If you pass a positive number then FlexSim will reset the cursor back to the default after forgetCount number of mouse move messages are received from the system, if you have not called setcursor() again in that interval. Example setcursor(3) setdropcoords (obj view[, obj dropnodefrom, obj dropnodeto]) Description For developer use. Sets the dropx() and dropy() coordinate commands for the view based on current mouse location. You can optionally also set the dropnodefrom and dropnodeto parameters, which will define the nodes returned by dropnodefrom() and dropnodeto(). Example setdropcoords() setpickingdrawfocus (obj theview, obj focus, num what[, obj secondaryfocus, num flags]) Description For developer use. Sets the draw code following this call to be picked as the focus when clicking or dragging. Usually you would use this to draw custom sizers and grippers on your object, and then implement an OnDrag or an OnClick event on the object that would call getpickingdrawfocus() to figure out what part was clicked. flags is a bitwise combination of one \"DETECT_DRAG\" setting, as well as optional \"override\" bits. The override bits aren't used to define picking focus, but will cause FlexSim to override its normal drawing of sizers and bounding boxes. DETECT_DRAG_X, DETECT_DRAG_Y, DETECT_DRAG_Z - will only detect dragging along the given axis, relative to the object being drawn. Use this with the draginfo() command in your OnDrag event to determine where the object is being dragged. DETECT_DRAG_XY, DETECT_DRAG_YZ, DETECT_DRAG_XZ - will only detect dragging along the given plane. Again you would use this with the draginfo() command in the OnDrag event. OVERRIDE_DRAW_SIZER_X, OVERRIDE_DRAW_SIZER_Y, OVERRIDE_DRAW_SIZER_Z, OVERRIDE_DRAW_SIZER_X_NEG, OVERRIDE_DRAW_SIZER_Y_NEG, OVERRIDE_DRAW_SIZER_Z_NEG, OVERRIDE_DRAW_SIZER_ALL - these flags will cause the engine to not draw the flagged sizers OVERRIDE_DRAW_YELLOW_BOX - causes FlexSim to not draw the yellow box around the object when selected OVERRIDE_DRAW_GREEN_BOX - causes FlexSim to not draw the green \"statistics-active\" box around the object OVERRIDE_DRAW_REDBOX - causes FlexSim to not draw the red selection box around the object when selected OVERRIDE_DRAW_HOVERBOX - causes FlexSim to not draw the yellow hover box around the object when hovering over it OVERRIDE_DRAW_ALL - causes FlexSim to not draw any sizers or boxes around the object OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse down\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been pressed on the given object. OVERRIDE_SET_MOUSE_DOWN_PICK - explicitly sets the view's \"mouse up\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been released on the given object. OVERRIDE_SET_MOUSE_MOVE_PICK - explicitly sets the view's \"mouse move\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been moved on the given object. OVERRIDE_SET_MOUSE_HOVER_PICK - explicitly sets the view's \"mouse hover\" pick to the defined values. This is called outside of the drawing sequence, and updates the pick information \"as-if\" the mouse had been hovered over the given object. Example setpickingdrawfocus(view, current, 20, drawsurrogate(current).first.subnodes[3], DETECT_DRAG_Y); setselectedobject (obj view, obj selected) Description For developer use. Sets the selectedobject (yellow highlighted object) of the view. Note that this is different than so(). The highlighted object is accessed by the selectedobject() command. Example setselectedobject(ownerview(c), model().first) settableviewselection (obj tableview, num startrow, num startcol, num endrow, num endcol[, num rangeselected]) Description For developer use. Sets the blue selection range in a table view. If any of the number parameters are less than 0, it deselects everything. Use 0 to select header cells. Example settableviewselection(c,0,1,2,2); setviewtext (obj/HWND window, str text) Description For developer use. Set the text of a gui edit field. Example setviewtext(c,\"hello\") shiftpressed () Description For developer use. Test if SHIFT key is pressed. Example shiftpressed() showcompilerconsole () Description For developer use. Show the compiler console. Example showcompilerconsole() showhelp (str topicname) Description For developer use. Opens a help topic specified by the topic name. Example showhelp(\"getting_started\"); showhtmlhelp (str topic) Description For developer use. Open FlexSim's User Manual with the given topic to open. Example showhtmlhelp(\"Welcome_to_Flexsim.html\") standardpreopen (obj object[, int nobuild]) Description For developer use. Queries if there are any open windows that are the same as the current window being opened. If so, then the current window is closed. Example standardpreopen(c) sv () Gets a reference to the last view desginated as sv() Description This command returns a reference to the last view window that was designated the selected view. To designate a view window, right-click on the window, not on any objects drawn in that window, and select \"Set as (sv)\". Any open view window (e.g. Ortho or VR) can be designated the selected view. Example flypath(sv(),1); This begins flypath number 1 in the view that is currently designated the selected view. systemwindow (num windowtype) Description For developer use. Get HWND handle to a system window: 1-Output 2-System 3-Compiler 4-Trace 5-Commands 6-Attributes 7-Completions 8-app 9-appsb 10-Output Edit 11-Compiler Edit 12-Trace Edit 13-System Edit Example systemwindow(1) tabcontrolrefresh (obj tabcontrolnode) Description For developer use. Refreshes a tab control. Example tabcontrolrefresh(c.find(\"@/tabcontrol\")); templatetocode (obj code, obj edit) Description For developer use. Apply template code to c++. This is used in a picklist's template code drop-down to apply edited template code back to the C++/Flexscript code that created it. Example templatetocode(so(),sv()) undo (obj view) Description Undoes the previously recorded action for the specified view. The specified view must have an undohistory attribute to record undoable actions. Example undo(view); updateundorecord (obj view, num uniqueid[, num updatetype, num p1, num p2]) Description Updates an undo record for the specified view. The following undo record types should be updated: UNDO_MOVE_SIZE_ROTATE UNDO_MOVE_SIZE_ROTATE_GROUP UNDO_SELECTION_CHANGE See Miscellaneous Concepts > Advanced Undo for more information. Example updateundorecord(view, getundorecordid(record)); viewdist (obj view, obj object) Gets the distance from the focus point of view to object Description Returns the distance from the focus point of the view to object. Example if(viewdist(view, current) > 100) ; This command queries whether the distance between the point that the view is looking at and the location of the current object is greater than 100. viewmenucommand (str name, obj view) Description For developer use. Execute a command from the stock view menu. Example viewmenucommand(\"Edit|Copy\") webcommand (str name[, p1, p2, p3, ...]) Used to manipulate FlexSim's HTML engine/widgets Description A command used for manipulating FlexSim's HTML engine, html widgets, etc. Example string innerhtml = webcommand(\"getelementinnerhtml\", view, \"title\"); windowflash (HWND window, num count, num timeout) Description For developer use. Causes the specified window to flash. Count is the number of times to flash the window. Timeout controls the time between flashes. If timeout is 0, the default cursor blink rate is used. Example windowflash(windowfromnode(ownerview(c)),2,125); windowfromnode (obj viewnode) Description For developer use. Get the window handle (HWND) of a view node. Example windowfromnode(c) windowgray (HWND window, num graystate) Description For developer use. Enables or disables the window based on the graystate parameter (1 or 0). Example graywindow(windowfromnode(c),1); windowmenu (obj view) Description For developer use. Returns a reference to the view's menu as an HMenu. Example windowmenu(c) windowmove (HWND window, num x, num y, num sx, num sy[, num refresh]) Description For developer use. Move a window to the specified x,y pixel location and give it the sx,sy size in pixels. If refresh is 1, then the window will repaint itself. Example windowmove(windowfromnode(c),10,10,200,200,1) windowredraw (HWND window, num x, num y, num sx, num sy, int flags) Description For developer use. A wrapper around the RedrawWindow() windows API command. The parameters x, y, sx, and sy define the client rectangle that the call applies to, and flags defines the flags that will be passed to RedrawWindow(). Example windowredraw(windowfromnode(c),10,10,200,200, RDW_INVALIDATE); windowshow (HWND/node thewindow , num show) Description For developer use. Show or hide a window. If the second parameter is 1, then the window will be shown. Otherwise the window will be hidden. Example windowshow(windowfromnode(c)) windowstyle (HWND/obj window [, num style, num useexstyle]) Gets the windowstyle of window Description Used in GUI development. Dynamically gets/sets the window style of the given window. If style is 0, this will simply return the current style of the window. Otherwise, it will set it. If useexstyle is 1, it will apply/get the extended style of the window. Refer to Windows SDK documentation for more information on window styles. Example As an example, this command is used in the perspective view's \"Full Screen\" context menu option to change the style of the perspective window so that it no longer has a title bar when it is in full screen mode."
    }
]